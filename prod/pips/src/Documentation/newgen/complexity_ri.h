#ifndef _newgen_complexity_ri_included
#define _newgen_complexity_ri_included
#define _gen_complexity_ri_start 161
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_statement_domain_defined_)
#define _newgen_statement_domain_defined_
#define STATEMENT_NEWGEN_DOMAIN (statement_domain)
#define statement_NEWGEN_DOMAIN (statement_domain)
typedef struct _newgen_struct_statement_ * statement;
#endif /* _newgen_statement_domain_defined_ */

#if !defined(_newgen_Ppolynome_domain_defined_)
#define _newgen_Ppolynome_domain_defined_
#define newgen_Ppolynome(p) (p) /* old hack compatible */
#define PPOLYNOME_NEWGEN_EXTERNAL (_gen_complexity_ri_start+0)
#define PPOLYNOME_NEWGEN_DOMAIN (PPOLYNOME_NEWGEN_EXTERNAL)
#define Ppolynome_NEWGEN_DOMAIN (PPOLYNOME_NEWGEN_EXTERNAL)
#endif /* _newgen_Ppolynome_domain_defined_ */

#define complexity_domain (_gen_complexity_ri_start+1)
#if !defined(_newgen_complexity_domain_defined_)
#define _newgen_complexity_domain_defined_
#define COMPLEXITY_NEWGEN_DOMAIN (complexity_domain)
#define complexity_NEWGEN_DOMAIN (complexity_domain)
typedef struct _newgen_struct_complexity_ * complexity;
#endif /* _newgen_complexity_domain_defined_ */

#define ifcount_domain (_gen_complexity_ri_start+2)
#if !defined(_newgen_ifcount_domain_defined_)
#define _newgen_ifcount_domain_defined_
#define IFCOUNT_NEWGEN_DOMAIN (ifcount_domain)
#define ifcount_NEWGEN_DOMAIN (ifcount_domain)
typedef struct _newgen_struct_ifcount_ * ifcount;
#endif /* _newgen_ifcount_domain_defined_ */

#define rangecount_domain (_gen_complexity_ri_start+3)
#if !defined(_newgen_rangecount_domain_defined_)
#define _newgen_rangecount_domain_defined_
#define RANGECOUNT_NEWGEN_DOMAIN (rangecount_domain)
#define rangecount_NEWGEN_DOMAIN (rangecount_domain)
typedef struct _newgen_struct_rangecount_ * rangecount;
#endif /* _newgen_rangecount_domain_defined_ */

#define varcount_domain (_gen_complexity_ri_start+4)
#if !defined(_newgen_varcount_domain_defined_)
#define _newgen_varcount_domain_defined_
#define VARCOUNT_NEWGEN_DOMAIN (varcount_domain)
#define varcount_NEWGEN_DOMAIN (varcount_domain)
typedef struct _newgen_struct_varcount_ * varcount;
#endif /* _newgen_varcount_domain_defined_ */


/* COMPLEXITY
 */
#define COMPLEXITY(x) ((complexity)((x).p))
#define complexity_CAST(x) COMPLEXITY(x)
#define COMPLEXITY_CAST(x) COMPLEXITY(x)
#define COMPLEXITY_(x) ((x).e)
#define COMPLEXITY_TYPE complexity
#define complexity_TYPE complexity
#define complexity_undefined ((complexity)gen_chunk_undefined)
#define complexity_undefined_p(x) ((x)==complexity_undefined)

extern complexity copy_complexity(complexity);
extern void free_complexity(complexity);
extern complexity check_complexity(complexity);
extern bool complexity_consistent_p(complexity);
extern bool complexity_defined_p(complexity);
#define gen_COMPLEXITY_cons gen_complexity_cons
extern list gen_complexity_cons(complexity, list);
extern void complexity_assign_contents(complexity, complexity);
extern void complexity_non_recursive_free(complexity);
extern void write_complexity(FILE*, complexity);
extern complexity read_complexity(FILE*);
extern complexity make_complexity(Ppolynome, varcount, rangecount, ifcount);

struct _newgen_struct_complexity_ {
  intptr_t _type_;
  Ppolynome _complexity_eval_; /* eval:Ppolynome */
  varcount _complexity_varcount_; /* varcount:varcount */
  rangecount _complexity_rangecount_; /* rangecount:rangecount */
  ifcount _complexity_ifcount_; /* ifcount:ifcount */
};

#define complexity_domain_number(x) ((x)->_type_)
#define complexity_eval_(x) complexity_eval(x) /* old hack compatible */
#define complexity_eval(x) ((x)->_complexity_eval_)
#define complexity_varcount_(x) complexity_varcount(x) /* old hack compatible */
#define complexity_varcount(x) ((x)->_complexity_varcount_)
#define complexity_rangecount_(x) complexity_rangecount(x) /* old hack compatible */
#define complexity_rangecount(x) ((x)->_complexity_rangecount_)
#define complexity_ifcount_(x) complexity_ifcount(x) /* old hack compatible */
#define complexity_ifcount(x) ((x)->_complexity_ifcount_)

/* IFCOUNT
 */
#define IFCOUNT(x) ((ifcount)((x).p))
#define ifcount_CAST(x) IFCOUNT(x)
#define IFCOUNT_CAST(x) IFCOUNT(x)
#define IFCOUNT_(x) ((x).e)
#define IFCOUNT_TYPE ifcount
#define ifcount_TYPE ifcount
#define ifcount_undefined ((ifcount)gen_chunk_undefined)
#define ifcount_undefined_p(x) ((x)==ifcount_undefined)

extern ifcount copy_ifcount(ifcount);
extern void free_ifcount(ifcount);
extern ifcount check_ifcount(ifcount);
extern bool ifcount_consistent_p(ifcount);
extern bool ifcount_defined_p(ifcount);
#define gen_IFCOUNT_cons gen_ifcount_cons
extern list gen_ifcount_cons(ifcount, list);
extern void ifcount_assign_contents(ifcount, ifcount);
extern void ifcount_non_recursive_free(ifcount);
extern void write_ifcount(FILE*, ifcount);
extern ifcount read_ifcount(FILE*);
extern ifcount make_ifcount(intptr_t, intptr_t, intptr_t);

struct _newgen_struct_ifcount_ {
  intptr_t _type_;
  intptr_t _ifcount_profiled_; /* profiled:int */
  intptr_t _ifcount_computed_; /* computed:int */
  intptr_t _ifcount_halfhalf_; /* halfhalf:int */
};

#define ifcount_domain_number(x) ((x)->_type_)
#define ifcount_profiled_(x) ifcount_profiled(x) /* old hack compatible */
#define ifcount_profiled(x) ((x)->_ifcount_profiled_)
#define ifcount_computed_(x) ifcount_computed(x) /* old hack compatible */
#define ifcount_computed(x) ((x)->_ifcount_computed_)
#define ifcount_halfhalf_(x) ifcount_halfhalf(x) /* old hack compatible */
#define ifcount_halfhalf(x) ((x)->_ifcount_halfhalf_)

/* RANGECOUNT
 */
#define RANGECOUNT(x) ((rangecount)((x).p))
#define rangecount_CAST(x) RANGECOUNT(x)
#define RANGECOUNT_CAST(x) RANGECOUNT(x)
#define RANGECOUNT_(x) ((x).e)
#define RANGECOUNT_TYPE rangecount
#define rangecount_TYPE rangecount
#define rangecount_undefined ((rangecount)gen_chunk_undefined)
#define rangecount_undefined_p(x) ((x)==rangecount_undefined)

extern rangecount copy_rangecount(rangecount);
extern void free_rangecount(rangecount);
extern rangecount check_rangecount(rangecount);
extern bool rangecount_consistent_p(rangecount);
extern bool rangecount_defined_p(rangecount);
#define gen_RANGECOUNT_cons gen_rangecount_cons
extern list gen_rangecount_cons(rangecount, list);
extern void rangecount_assign_contents(rangecount, rangecount);
extern void rangecount_non_recursive_free(rangecount);
extern void write_rangecount(FILE*, rangecount);
extern rangecount read_rangecount(FILE*);
extern rangecount make_rangecount(intptr_t, intptr_t, intptr_t, intptr_t);

struct _newgen_struct_rangecount_ {
  intptr_t _type_;
  intptr_t _rangecount_profiled_; /* profiled:int */
  intptr_t _rangecount_guessed_; /* guessed:int */
  intptr_t _rangecount_bounded_; /* bounded:int */
  intptr_t _rangecount_unknown_; /* unknown:int */
};

#define rangecount_domain_number(x) ((x)->_type_)
#define rangecount_profiled_(x) rangecount_profiled(x) /* old hack compatible */
#define rangecount_profiled(x) ((x)->_rangecount_profiled_)
#define rangecount_guessed_(x) rangecount_guessed(x) /* old hack compatible */
#define rangecount_guessed(x) ((x)->_rangecount_guessed_)
#define rangecount_bounded_(x) rangecount_bounded(x) /* old hack compatible */
#define rangecount_bounded(x) ((x)->_rangecount_bounded_)
#define rangecount_unknown_(x) rangecount_unknown(x) /* old hack compatible */
#define rangecount_unknown(x) ((x)->_rangecount_unknown_)

/* VARCOUNT
 */
#define VARCOUNT(x) ((varcount)((x).p))
#define varcount_CAST(x) VARCOUNT(x)
#define VARCOUNT_CAST(x) VARCOUNT(x)
#define VARCOUNT_(x) ((x).e)
#define VARCOUNT_TYPE varcount
#define varcount_TYPE varcount
#define varcount_undefined ((varcount)gen_chunk_undefined)
#define varcount_undefined_p(x) ((x)==varcount_undefined)

extern varcount copy_varcount(varcount);
extern void free_varcount(varcount);
extern varcount check_varcount(varcount);
extern bool varcount_consistent_p(varcount);
extern bool varcount_defined_p(varcount);
#define gen_VARCOUNT_cons gen_varcount_cons
extern list gen_varcount_cons(varcount, list);
extern void varcount_assign_contents(varcount, varcount);
extern void varcount_non_recursive_free(varcount);
extern void write_varcount(FILE*, varcount);
extern varcount read_varcount(FILE*);
extern varcount make_varcount(intptr_t, intptr_t, intptr_t, intptr_t);

struct _newgen_struct_varcount_ {
  intptr_t _type_;
  intptr_t _varcount_symbolic_; /* symbolic:int */
  intptr_t _varcount_guessed_; /* guessed:int */
  intptr_t _varcount_bounded_; /* bounded:int */
  intptr_t _varcount_unknown_; /* unknown:int */
};

#define varcount_domain_number(x) ((x)->_type_)
#define varcount_symbolic_(x) varcount_symbolic(x) /* old hack compatible */
#define varcount_symbolic(x) ((x)->_varcount_symbolic_)
#define varcount_guessed_(x) varcount_guessed(x) /* old hack compatible */
#define varcount_guessed(x) ((x)->_varcount_guessed_)
#define varcount_bounded_(x) varcount_bounded(x) /* old hack compatible */
#define varcount_bounded(x) ((x)->_varcount_bounded_)
#define varcount_unknown_(x) varcount_unknown(x) /* old hack compatible */
#define varcount_unknown(x) ((x)->_varcount_unknown_)

#define complexity_ri_spec "\
--NEWGEN-START 161\n\
import statement from \"ri.newgen\";\n\
external Ppolynome;\n\
complexity = eval:Ppolynome x varcount:varcount x rangecount:rangecount x ifcount:ifcount;\n\
ifcount = profiled:int x computed:int x halfhalf:int;\n\
rangecount = profiled:int x guessed:int x bounded:int x unknown:int;\n\
varcount = symbolic:int x guessed:int x bounded:int x unknown:int;\n\
"
#endif

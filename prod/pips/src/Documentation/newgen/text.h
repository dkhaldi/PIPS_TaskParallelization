#ifndef _newgen_text_included
#define _newgen_text_included
#define _gen_text_start 84
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#define sentence_domain (_gen_text_start+0)
#if !defined(_newgen_sentence_domain_defined_)
#define _newgen_sentence_domain_defined_
#define SENTENCE_NEWGEN_DOMAIN (sentence_domain)
#define sentence_NEWGEN_DOMAIN (sentence_domain)
typedef struct _newgen_struct_sentence_ * sentence;
#endif /* _newgen_sentence_domain_defined_ */

#define text_domain (_gen_text_start+1)
#if !defined(_newgen_text_domain_defined_)
#define _newgen_text_domain_defined_
#define TEXT_NEWGEN_DOMAIN (text_domain)
#define text_NEWGEN_DOMAIN (text_domain)
typedef struct _newgen_struct_text_ * text;
#endif /* _newgen_text_domain_defined_ */

#define unformatted_domain (_gen_text_start+2)
#if !defined(_newgen_unformatted_domain_defined_)
#define _newgen_unformatted_domain_defined_
#define UNFORMATTED_NEWGEN_DOMAIN (unformatted_domain)
#define unformatted_NEWGEN_DOMAIN (unformatted_domain)
typedef struct _newgen_struct_unformatted_ * unformatted;
#endif /* _newgen_unformatted_domain_defined_ */

/* SENTENCE
 */
#define SENTENCE(x) ((sentence)((x).p))
#define sentence_CAST(x) SENTENCE(x)
#define SENTENCE_CAST(x) SENTENCE(x)
#define SENTENCE_(x) ((x).e)
#define SENTENCE_TYPE sentence
#define sentence_TYPE sentence
#define sentence_undefined ((sentence)gen_chunk_undefined)
#define sentence_undefined_p(x) ((x)==sentence_undefined)

extern sentence copy_sentence(sentence);
extern void free_sentence(sentence);
extern sentence check_sentence(sentence);
extern bool sentence_consistent_p(sentence);
extern bool sentence_defined_p(sentence);
#define gen_SENTENCE_cons gen_sentence_cons
extern list gen_sentence_cons(sentence, list);
extern void sentence_assign_contents(sentence, sentence);
extern void sentence_non_recursive_free(sentence);
extern void write_sentence(FILE*, sentence);
extern sentence read_sentence(FILE*);
enum sentence_utype {
  is_sentence_formatted,
  is_sentence_unformatted
};
extern string sentence_tag_as_string(enum sentence_utype);
extern sentence make_sentence(enum sentence_utype, void *);
extern sentence make_sentence_formatted(string);
extern sentence make_sentence_unformatted(unformatted);

struct _newgen_struct_sentence_ {
  intptr_t _type_;
  enum sentence_utype _sentence_tag__;
  union {
    string _sentence_formatted_; /* formatted:string */
    unformatted _sentence_unformatted_; /* unformatted:unformatted */
  } _sentence_union_;
};

#define sentence_domain_number(x) ((x)->_type_)
#define sentence_tag(x) ((x)->_sentence_tag__)
#define sentence_formatted_p(x) (sentence_tag(x)==is_sentence_formatted)
#define sentence_formatted_(x) sentence_formatted(x) /* old hack compatible */
#define sentence_formatted(x) ((x)->_sentence_union_._sentence_formatted_)
#define sentence_unformatted_p(x) (sentence_tag(x)==is_sentence_unformatted)
#define sentence_unformatted_(x) sentence_unformatted(x) /* old hack compatible */
#define sentence_unformatted(x) ((x)->_sentence_union_._sentence_unformatted_)

/* TEXT
 */
#define TEXT(x) ((text)((x).p))
#define text_CAST(x) TEXT(x)
#define TEXT_CAST(x) TEXT(x)
#define TEXT_(x) ((x).e)
#define TEXT_TYPE text
#define text_TYPE text
#define text_undefined ((text)gen_chunk_undefined)
#define text_undefined_p(x) ((x)==text_undefined)

extern text copy_text(text);
extern void free_text(text);
extern text check_text(text);
extern bool text_consistent_p(text);
extern bool text_defined_p(text);
#define gen_TEXT_cons gen_text_cons
extern list gen_text_cons(text, list);
extern void text_assign_contents(text, text);
extern void text_non_recursive_free(text);
extern void write_text(FILE*, text);
extern text read_text(FILE*);
extern text make_text(list);

struct _newgen_struct_text_ {
  intptr_t _type_;
  list _text_holder_;
};

#define text_domain_number(x) ((x)->_type_)
#define text_sentences(x) ((x)->_text_holder_)

/* UNFORMATTED
 */
#define UNFORMATTED(x) ((unformatted)((x).p))
#define unformatted_CAST(x) UNFORMATTED(x)
#define UNFORMATTED_CAST(x) UNFORMATTED(x)
#define UNFORMATTED_(x) ((x).e)
#define UNFORMATTED_TYPE unformatted
#define unformatted_TYPE unformatted
#define unformatted_undefined ((unformatted)gen_chunk_undefined)
#define unformatted_undefined_p(x) ((x)==unformatted_undefined)

extern unformatted copy_unformatted(unformatted);
extern void free_unformatted(unformatted);
extern unformatted check_unformatted(unformatted);
extern bool unformatted_consistent_p(unformatted);
extern bool unformatted_defined_p(unformatted);
#define gen_UNFORMATTED_cons gen_unformatted_cons
extern list gen_unformatted_cons(unformatted, list);
extern void unformatted_assign_contents(unformatted, unformatted);
extern void unformatted_non_recursive_free(unformatted);
extern void write_unformatted(FILE*, unformatted);
extern unformatted read_unformatted(FILE*);
extern unformatted make_unformatted(string, intptr_t, intptr_t, list);

struct _newgen_struct_unformatted_ {
  intptr_t _type_;
  string _unformatted_label_; /* label:string */
  intptr_t _unformatted_number_; /* number:int */
  intptr_t _unformatted_extra_margin_; /* extra_margin:int */
  list _unformatted_words_; /* words:string* */
};

#define unformatted_domain_number(x) ((x)->_type_)
#define unformatted_label_(x) unformatted_label(x) /* old hack compatible */
#define unformatted_label(x) ((x)->_unformatted_label_)
#define unformatted_number_(x) unformatted_number(x) /* old hack compatible */
#define unformatted_number(x) ((x)->_unformatted_number_)
#define unformatted_extra_margin_(x) unformatted_extra_margin(x) /* old hack compatible */
#define unformatted_extra_margin(x) ((x)->_unformatted_extra_margin_)
#define unformatted_words_(x) unformatted_words(x) /* old hack compatible */
#define unformatted_words(x) ((x)->_unformatted_words_)

#define text_spec "\
--NEWGEN-START 84\n\
sentence = formatted:string + unformatted:unformatted;\n\
text = sentences:sentence*;\n\
unformatted = label:string x number:int x extra_margin:int x words:string*;\n\
"
#endif

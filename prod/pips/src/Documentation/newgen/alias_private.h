#ifndef _newgen_alias_private_included
#define _newgen_alias_private_included
#define _gen_alias_private_start 167
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#if !defined(_newgen_expression_domain_defined_)
#define _newgen_expression_domain_defined_
#define EXPRESSION_NEWGEN_DOMAIN (expression_domain)
#define expression_NEWGEN_DOMAIN (expression_domain)
typedef struct _newgen_struct_expression_ * expression;
#endif /* _newgen_expression_domain_defined_ */

#define alias_associations_domain (_gen_alias_private_start+0)
#if !defined(_newgen_alias_associations_domain_defined_)
#define _newgen_alias_associations_domain_defined_
#define ALIAS_ASSOCIATIONS_NEWGEN_DOMAIN (alias_associations_domain)
#define alias_associations_NEWGEN_DOMAIN (alias_associations_domain)
typedef struct _newgen_struct_alias_associations_ * alias_associations;
#endif /* _newgen_alias_associations_domain_defined_ */

#define alias_association_domain (_gen_alias_private_start+1)
#if !defined(_newgen_alias_association_domain_defined_)
#define _newgen_alias_association_domain_defined_
#define ALIAS_ASSOCIATION_NEWGEN_DOMAIN (alias_association_domain)
#define alias_association_NEWGEN_DOMAIN (alias_association_domain)
typedef struct _newgen_struct_alias_association_ * alias_association;
#endif /* _newgen_alias_association_domain_defined_ */

#define call_site_domain (_gen_alias_private_start+2)
#if !defined(_newgen_call_site_domain_defined_)
#define _newgen_call_site_domain_defined_
#define CALL_SITE_NEWGEN_DOMAIN (call_site_domain)
#define call_site_NEWGEN_DOMAIN (call_site_domain)
typedef struct _newgen_struct_call_site_ * call_site;
#endif /* _newgen_call_site_domain_defined_ */

#define dynamic_check_domain (_gen_alias_private_start+3)
#if !defined(_newgen_dynamic_check_domain_defined_)
#define _newgen_dynamic_check_domain_defined_
#define DYNAMIC_CHECK_NEWGEN_DOMAIN (dynamic_check_domain)
#define dynamic_check_NEWGEN_DOMAIN (dynamic_check_domain)
typedef struct _newgen_struct_dynamic_check_ * dynamic_check;
#endif /* _newgen_dynamic_check_domain_defined_ */

/* ALIAS_ASSOCIATIONS
 */
#define ALIAS_ASSOCIATIONS(x) ((alias_associations)((x).p))
#define alias_associations_CAST(x) ALIAS_ASSOCIATIONS(x)
#define ALIAS_ASSOCIATIONS_CAST(x) ALIAS_ASSOCIATIONS(x)
#define ALIAS_ASSOCIATIONS_(x) ((x).e)
#define ALIAS_ASSOCIATIONS_TYPE alias_associations
#define alias_associations_TYPE alias_associations
#define alias_associations_undefined ((alias_associations)gen_chunk_undefined)
#define alias_associations_undefined_p(x) ((x)==alias_associations_undefined)

extern alias_associations copy_alias_associations(alias_associations);
extern void free_alias_associations(alias_associations);
extern alias_associations check_alias_associations(alias_associations);
extern bool alias_associations_consistent_p(alias_associations);
extern bool alias_associations_defined_p(alias_associations);
#define gen_ALIAS_ASSOCIATIONS_cons gen_alias_associations_cons
extern list gen_alias_associations_cons(alias_associations, list);
extern void alias_associations_assign_contents(alias_associations, alias_associations);
extern void alias_associations_non_recursive_free(alias_associations);
extern void write_alias_associations(FILE*, alias_associations);
extern alias_associations read_alias_associations(FILE*);
extern alias_associations make_alias_associations(list);

struct _newgen_struct_alias_associations_ {
  intptr_t _type_;
  list _alias_associations_holder_;
};

#define alias_associations_domain_number(x) ((x)->_type_)
#define alias_associations_list(x) ((x)->_alias_associations_holder_)

/* ALIAS_ASSOCIATION
 */
#define ALIAS_ASSOCIATION(x) ((alias_association)((x).p))
#define alias_association_CAST(x) ALIAS_ASSOCIATION(x)
#define ALIAS_ASSOCIATION_CAST(x) ALIAS_ASSOCIATION(x)
#define ALIAS_ASSOCIATION_(x) ((x).e)
#define ALIAS_ASSOCIATION_TYPE alias_association
#define alias_association_TYPE alias_association
#define alias_association_undefined ((alias_association)gen_chunk_undefined)
#define alias_association_undefined_p(x) ((x)==alias_association_undefined)

extern alias_association copy_alias_association(alias_association);
extern void free_alias_association(alias_association);
extern alias_association check_alias_association(alias_association);
extern bool alias_association_consistent_p(alias_association);
extern bool alias_association_defined_p(alias_association);
#define gen_ALIAS_ASSOCIATION_cons gen_alias_association_cons
extern list gen_alias_association_cons(alias_association, list);
extern void alias_association_assign_contents(alias_association, alias_association);
extern void alias_association_non_recursive_free(alias_association);
extern void write_alias_association(FILE*, alias_association);
extern alias_association read_alias_association(FILE*);
extern alias_association make_alias_association(entity, entity, expression, intptr_t, intptr_t, list);

struct _newgen_struct_alias_association_ {
  intptr_t _type_;
  entity _alias_association_variable_; /* variable:entity */
  entity _alias_association_section_; /* section:entity */
  expression _alias_association_offset_; /* offset:expression */
  intptr_t _alias_association_lower_offset_; /* lower_offset:int */
  intptr_t _alias_association_upper_offset_; /* upper_offset:int */
  list _alias_association_call_chain_; /* call_chain:call_site* */
};

#define alias_association_domain_number(x) ((x)->_type_)
#define alias_association_variable_(x) alias_association_variable(x) /* old hack compatible */
#define alias_association_variable(x) ((x)->_alias_association_variable_)
#define alias_association_section_(x) alias_association_section(x) /* old hack compatible */
#define alias_association_section(x) ((x)->_alias_association_section_)
#define alias_association_offset_(x) alias_association_offset(x) /* old hack compatible */
#define alias_association_offset(x) ((x)->_alias_association_offset_)
#define alias_association_lower_offset_(x) alias_association_lower_offset(x) /* old hack compatible */
#define alias_association_lower_offset(x) ((x)->_alias_association_lower_offset_)
#define alias_association_upper_offset_(x) alias_association_upper_offset(x) /* old hack compatible */
#define alias_association_upper_offset(x) ((x)->_alias_association_upper_offset_)
#define alias_association_call_chain_(x) alias_association_call_chain(x) /* old hack compatible */
#define alias_association_call_chain(x) ((x)->_alias_association_call_chain_)

/* CALL_SITE
 */
#define CALL_SITE(x) ((call_site)((x).p))
#define call_site_CAST(x) CALL_SITE(x)
#define CALL_SITE_CAST(x) CALL_SITE(x)
#define CALL_SITE_(x) ((x).e)
#define CALL_SITE_TYPE call_site
#define call_site_TYPE call_site
#define call_site_undefined ((call_site)gen_chunk_undefined)
#define call_site_undefined_p(x) ((x)==call_site_undefined)

extern call_site copy_call_site(call_site);
extern void free_call_site(call_site);
extern call_site check_call_site(call_site);
extern bool call_site_consistent_p(call_site);
extern bool call_site_defined_p(call_site);
#define gen_CALL_SITE_cons gen_call_site_cons
extern list gen_call_site_cons(call_site, list);
extern void call_site_assign_contents(call_site, call_site);
extern void call_site_non_recursive_free(call_site);
extern void write_call_site(FILE*, call_site);
extern call_site read_call_site(FILE*);
extern call_site make_call_site(entity, intptr_t);

struct _newgen_struct_call_site_ {
  intptr_t _type_;
  entity _call_site_function_; /* function:entity */
  intptr_t _call_site_ordering_; /* ordering:int */
};

#define call_site_domain_number(x) ((x)->_type_)
#define call_site_function_(x) call_site_function(x) /* old hack compatible */
#define call_site_function(x) ((x)->_call_site_function_)
#define call_site_ordering_(x) call_site_ordering(x) /* old hack compatible */
#define call_site_ordering(x) ((x)->_call_site_ordering_)

/* DYNAMIC_CHECK
 */
#define DYNAMIC_CHECK(x) ((dynamic_check)((x).p))
#define dynamic_check_CAST(x) DYNAMIC_CHECK(x)
#define DYNAMIC_CHECK_CAST(x) DYNAMIC_CHECK(x)
#define DYNAMIC_CHECK_(x) ((x).e)
#define DYNAMIC_CHECK_TYPE dynamic_check
#define dynamic_check_TYPE dynamic_check
#define dynamic_check_undefined ((dynamic_check)gen_chunk_undefined)
#define dynamic_check_undefined_p(x) ((x)==dynamic_check_undefined)

extern dynamic_check copy_dynamic_check(dynamic_check);
extern void free_dynamic_check(dynamic_check);
extern dynamic_check check_dynamic_check(dynamic_check);
extern bool dynamic_check_consistent_p(dynamic_check);
extern bool dynamic_check_defined_p(dynamic_check);
#define gen_DYNAMIC_CHECK_cons gen_dynamic_check_cons
extern list gen_dynamic_check_cons(dynamic_check, list);
extern void dynamic_check_assign_contents(dynamic_check, dynamic_check);
extern void dynamic_check_non_recursive_free(dynamic_check);
extern void write_dynamic_check(FILE*, dynamic_check);
extern dynamic_check read_dynamic_check(FILE*);
extern dynamic_check make_dynamic_check(entity, entity, bool);

struct _newgen_struct_dynamic_check_ {
  intptr_t _type_;
  entity _dynamic_check_first_; /* first:entity */
  entity _dynamic_check_second_; /* second:entity */
  gen_chunk _dynamic_check_checked_; /* checked:bool */
};

#define dynamic_check_domain_number(x) ((x)->_type_)
#define dynamic_check_first_(x) dynamic_check_first(x) /* old hack compatible */
#define dynamic_check_first(x) ((x)->_dynamic_check_first_)
#define dynamic_check_second_(x) dynamic_check_second(x) /* old hack compatible */
#define dynamic_check_second(x) ((x)->_dynamic_check_second_)
#define dynamic_check_checked_(x) dynamic_check_checked(x) /* old hack compatible */
#define dynamic_check_checked(x) ((x)->_dynamic_check_checked_.b)

#define alias_private_spec "\
--NEWGEN-START 167\n\
import entity from \"ri.newgen\";\n\
import expression from \"ri.newgen\";\n\
alias_associations = list:alias_association*;\n\
alias_association = variable:entity x section:entity x offset:expression x lower_offset:int x upper_offset:int x call_chain:call_site*;\n\
call_site = function:entity x ordering:int;\n\
dynamic_check = first:entity x second:entity x checked:bool;\n\
"
#endif

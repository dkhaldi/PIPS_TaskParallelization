#ifndef _newgen_hpf_included
#define _newgen_hpf_included
#define _gen_hpf_start 115
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#if !defined(_newgen_expression_domain_defined_)
#define _newgen_expression_domain_defined_
#define EXPRESSION_NEWGEN_DOMAIN (expression_domain)
#define expression_NEWGEN_DOMAIN (expression_domain)
typedef struct _newgen_struct_expression_ * expression;
#endif /* _newgen_expression_domain_defined_ */

#define align_domain (_gen_hpf_start+0)
#if !defined(_newgen_align_domain_defined_)
#define _newgen_align_domain_defined_
#define ALIGN_NEWGEN_DOMAIN (align_domain)
#define align_NEWGEN_DOMAIN (align_domain)
typedef struct _newgen_struct_align_ * align;
#endif /* _newgen_align_domain_defined_ */

#define alignment_domain (_gen_hpf_start+1)
#if !defined(_newgen_alignment_domain_defined_)
#define _newgen_alignment_domain_defined_
#define ALIGNMENT_NEWGEN_DOMAIN (alignment_domain)
#define alignment_NEWGEN_DOMAIN (alignment_domain)
typedef struct _newgen_struct_alignment_ * alignment;
#endif /* _newgen_alignment_domain_defined_ */

#define distribute_domain (_gen_hpf_start+2)
#if !defined(_newgen_distribute_domain_defined_)
#define _newgen_distribute_domain_defined_
#define DISTRIBUTE_NEWGEN_DOMAIN (distribute_domain)
#define distribute_NEWGEN_DOMAIN (distribute_domain)
typedef struct _newgen_struct_distribute_ * distribute;
#endif /* _newgen_distribute_domain_defined_ */

#define distribution_domain (_gen_hpf_start+3)
#if !defined(_newgen_distribution_domain_defined_)
#define _newgen_distribution_domain_defined_
#define DISTRIBUTION_NEWGEN_DOMAIN (distribution_domain)
#define distribution_NEWGEN_DOMAIN (distribution_domain)
typedef struct _newgen_struct_distribution_ * distribution;
#endif /* _newgen_distribution_domain_defined_ */

#define style_domain (_gen_hpf_start+4)
#if !defined(_newgen_style_domain_defined_)
#define _newgen_style_domain_defined_
#define STYLE_NEWGEN_DOMAIN (style_domain)
#define style_NEWGEN_DOMAIN (style_domain)
typedef struct _newgen_struct_style_ * style;
#endif /* _newgen_style_domain_defined_ */

/* ALIGN
 */
#define ALIGN(x) ((align)((x).p))
#define align_CAST(x) ALIGN(x)
#define ALIGN_CAST(x) ALIGN(x)
#define ALIGN_(x) ((x).e)
#define ALIGN_TYPE align
#define align_TYPE align
#define align_undefined ((align)gen_chunk_undefined)
#define align_undefined_p(x) ((x)==align_undefined)

extern align copy_align(align);
extern void free_align(align);
extern align check_align(align);
extern bool align_consistent_p(align);
extern bool align_defined_p(align);
#define gen_ALIGN_cons gen_align_cons
extern list gen_align_cons(align, list);
extern void align_assign_contents(align, align);
extern void align_non_recursive_free(align);
extern void write_align(FILE*, align);
extern align read_align(FILE*);
extern align make_align(list, entity);

struct _newgen_struct_align_ {
  intptr_t _type_;
  list _align_alignment_; /* alignment:alignment* */
  entity _align_template_; /* template:entity */
};

#define align_domain_number(x) ((x)->_type_)
#define align_alignment_(x) align_alignment(x) /* old hack compatible */
#define align_alignment(x) ((x)->_align_alignment_)
#define align_template_(x) align_template(x) /* old hack compatible */
#define align_template(x) ((x)->_align_template_)

/* ALIGNMENT
 */
#define ALIGNMENT(x) ((alignment)((x).p))
#define alignment_CAST(x) ALIGNMENT(x)
#define ALIGNMENT_CAST(x) ALIGNMENT(x)
#define ALIGNMENT_(x) ((x).e)
#define ALIGNMENT_TYPE alignment
#define alignment_TYPE alignment
#define alignment_undefined ((alignment)gen_chunk_undefined)
#define alignment_undefined_p(x) ((x)==alignment_undefined)

extern alignment copy_alignment(alignment);
extern void free_alignment(alignment);
extern alignment check_alignment(alignment);
extern bool alignment_consistent_p(alignment);
extern bool alignment_defined_p(alignment);
#define gen_ALIGNMENT_cons gen_alignment_cons
extern list gen_alignment_cons(alignment, list);
extern void alignment_assign_contents(alignment, alignment);
extern void alignment_non_recursive_free(alignment);
extern void write_alignment(FILE*, alignment);
extern alignment read_alignment(FILE*);
extern alignment make_alignment(intptr_t, intptr_t, expression, expression);

struct _newgen_struct_alignment_ {
  intptr_t _type_;
  intptr_t _alignment_arraydim_; /* arraydim:int */
  intptr_t _alignment_templatedim_; /* templatedim:int */
  expression _alignment_rate_; /* rate:expression */
  expression _alignment_constant_; /* constant:expression */
};

#define alignment_domain_number(x) ((x)->_type_)
#define alignment_arraydim_(x) alignment_arraydim(x) /* old hack compatible */
#define alignment_arraydim(x) ((x)->_alignment_arraydim_)
#define alignment_templatedim_(x) alignment_templatedim(x) /* old hack compatible */
#define alignment_templatedim(x) ((x)->_alignment_templatedim_)
#define alignment_rate_(x) alignment_rate(x) /* old hack compatible */
#define alignment_rate(x) ((x)->_alignment_rate_)
#define alignment_constant_(x) alignment_constant(x) /* old hack compatible */
#define alignment_constant(x) ((x)->_alignment_constant_)

/* DISTRIBUTE
 */
#define DISTRIBUTE(x) ((distribute)((x).p))
#define distribute_CAST(x) DISTRIBUTE(x)
#define DISTRIBUTE_CAST(x) DISTRIBUTE(x)
#define DISTRIBUTE_(x) ((x).e)
#define DISTRIBUTE_TYPE distribute
#define distribute_TYPE distribute
#define distribute_undefined ((distribute)gen_chunk_undefined)
#define distribute_undefined_p(x) ((x)==distribute_undefined)

extern distribute copy_distribute(distribute);
extern void free_distribute(distribute);
extern distribute check_distribute(distribute);
extern bool distribute_consistent_p(distribute);
extern bool distribute_defined_p(distribute);
#define gen_DISTRIBUTE_cons gen_distribute_cons
extern list gen_distribute_cons(distribute, list);
extern void distribute_assign_contents(distribute, distribute);
extern void distribute_non_recursive_free(distribute);
extern void write_distribute(FILE*, distribute);
extern distribute read_distribute(FILE*);
extern distribute make_distribute(list, entity);

struct _newgen_struct_distribute_ {
  intptr_t _type_;
  list _distribute_distribution_; /* distribution:distribution* */
  entity _distribute_processors_; /* processors:entity */
};

#define distribute_domain_number(x) ((x)->_type_)
#define distribute_distribution_(x) distribute_distribution(x) /* old hack compatible */
#define distribute_distribution(x) ((x)->_distribute_distribution_)
#define distribute_processors_(x) distribute_processors(x) /* old hack compatible */
#define distribute_processors(x) ((x)->_distribute_processors_)

/* DISTRIBUTION
 */
#define DISTRIBUTION(x) ((distribution)((x).p))
#define distribution_CAST(x) DISTRIBUTION(x)
#define DISTRIBUTION_CAST(x) DISTRIBUTION(x)
#define DISTRIBUTION_(x) ((x).e)
#define DISTRIBUTION_TYPE distribution
#define distribution_TYPE distribution
#define distribution_undefined ((distribution)gen_chunk_undefined)
#define distribution_undefined_p(x) ((x)==distribution_undefined)

extern distribution copy_distribution(distribution);
extern void free_distribution(distribution);
extern distribution check_distribution(distribution);
extern bool distribution_consistent_p(distribution);
extern bool distribution_defined_p(distribution);
#define gen_DISTRIBUTION_cons gen_distribution_cons
extern list gen_distribution_cons(distribution, list);
extern void distribution_assign_contents(distribution, distribution);
extern void distribution_non_recursive_free(distribution);
extern void write_distribution(FILE*, distribution);
extern distribution read_distribution(FILE*);
extern distribution make_distribution(style, expression);

struct _newgen_struct_distribution_ {
  intptr_t _type_;
  style _distribution_style_; /* style:style */
  expression _distribution_parameter_; /* parameter:expression */
};

#define distribution_domain_number(x) ((x)->_type_)
#define distribution_style_(x) distribution_style(x) /* old hack compatible */
#define distribution_style(x) ((x)->_distribution_style_)
#define distribution_parameter_(x) distribution_parameter(x) /* old hack compatible */
#define distribution_parameter(x) ((x)->_distribution_parameter_)

/* STYLE
 */
#define STYLE(x) ((style)((x).p))
#define style_CAST(x) STYLE(x)
#define STYLE_CAST(x) STYLE(x)
#define STYLE_(x) ((x).e)
#define STYLE_TYPE style
#define style_TYPE style
#define style_undefined ((style)gen_chunk_undefined)
#define style_undefined_p(x) ((x)==style_undefined)

extern style copy_style(style);
extern void free_style(style);
extern style check_style(style);
extern bool style_consistent_p(style);
extern bool style_defined_p(style);
#define gen_STYLE_cons gen_style_cons
extern list gen_style_cons(style, list);
extern void style_assign_contents(style, style);
extern void style_non_recursive_free(style);
extern void write_style(FILE*, style);
extern style read_style(FILE*);
enum style_utype {
  is_style_none,
  is_style_block,
  is_style_cyclic
};
extern string style_tag_as_string(enum style_utype);
extern style make_style(enum style_utype, void *);
extern style make_style_none(void);
extern style make_style_block(void);
extern style make_style_cyclic(void);

struct _newgen_struct_style_ {
  intptr_t _type_;
  enum style_utype _style_tag__;
  union {
    gen_chunk _style_none_; /* none:unit */
    gen_chunk _style_block_; /* block:unit */
    gen_chunk _style_cyclic_; /* cyclic:unit */
  } _style_union_;
};

#define style_domain_number(x) ((x)->_type_)
#define style_tag(x) ((x)->_style_tag__)
#define style_none_p(x) (style_tag(x)==is_style_none)
#define style_none_(x) style_none(x) /* old hack compatible */
#define style_none(x) ((x)->_style_union_._style_none_.u)
#define style_block_p(x) (style_tag(x)==is_style_block)
#define style_block_(x) style_block(x) /* old hack compatible */
#define style_block(x) ((x)->_style_union_._style_block_.u)
#define style_cyclic_p(x) (style_tag(x)==is_style_cyclic)
#define style_cyclic_(x) style_cyclic(x) /* old hack compatible */
#define style_cyclic(x) ((x)->_style_union_._style_cyclic_.u)

#define hpf_spec "\
--NEWGEN-START 115\n\
import entity from \"ri.newgen\";\n\
import expression from \"ri.newgen\";\n\
align = alignment:alignment* x template:entity;\n\
alignment = arraydim:int x templatedim:int x rate:expression x constant:expression;\n\
distribute = distribution:distribution* x processors:entity;\n\
distribution = style:style x parameter:expression;\n\
style = none:unit + block:unit + cyclic:unit;\n\
"
#endif

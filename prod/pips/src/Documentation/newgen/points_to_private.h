#ifndef _newgen_points_to_private_included
#define _newgen_points_to_private_included
#define _gen_points_to_private_start 217
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_descriptor_domain_defined_)
#define _newgen_descriptor_domain_defined_
#define DESCRIPTOR_NEWGEN_DOMAIN (descriptor_domain)
#define descriptor_NEWGEN_DOMAIN (descriptor_domain)
typedef struct _newgen_struct_descriptor_ * descriptor;
#endif /* _newgen_descriptor_domain_defined_ */

#if !defined(_newgen_approximation_domain_defined_)
#define _newgen_approximation_domain_defined_
#define APPROXIMATION_NEWGEN_DOMAIN (approximation_domain)
#define approximation_NEWGEN_DOMAIN (approximation_domain)
typedef struct _newgen_struct_approximation_ * approximation;
#endif /* _newgen_approximation_domain_defined_ */

#if !defined(_newgen_statement_domain_defined_)
#define _newgen_statement_domain_defined_
#define STATEMENT_NEWGEN_DOMAIN (statement_domain)
#define statement_NEWGEN_DOMAIN (statement_domain)
typedef struct _newgen_struct_statement_ * statement;
#endif /* _newgen_statement_domain_defined_ */

#if !defined(_newgen_cell_domain_defined_)
#define _newgen_cell_domain_defined_
#define CELL_NEWGEN_DOMAIN (cell_domain)
#define cell_NEWGEN_DOMAIN (cell_domain)
typedef struct _newgen_struct_cell_ * cell;
#endif /* _newgen_cell_domain_defined_ */

#define points_to_graph_domain (_gen_points_to_private_start+0)
#if !defined(_newgen_points_to_graph_domain_defined_)
#define _newgen_points_to_graph_domain_defined_
#define POINTS_TO_GRAPH_NEWGEN_DOMAIN (points_to_graph_domain)
#define points_to_graph_NEWGEN_DOMAIN (points_to_graph_domain)
typedef struct _newgen_struct_points_to_graph_ * points_to_graph;
#endif /* _newgen_points_to_graph_domain_defined_ */

#define points_to_list_domain (_gen_points_to_private_start+1)
#if !defined(_newgen_points_to_list_domain_defined_)
#define _newgen_points_to_list_domain_defined_
#define POINTS_TO_LIST_NEWGEN_DOMAIN (points_to_list_domain)
#define points_to_list_NEWGEN_DOMAIN (points_to_list_domain)
typedef struct _newgen_struct_points_to_list_ * points_to_list;
#endif /* _newgen_points_to_list_domain_defined_ */

#define points_to_domain (_gen_points_to_private_start+2)
#if !defined(_newgen_points_to_domain_defined_)
#define _newgen_points_to_domain_defined_
#define POINTS_TO_NEWGEN_DOMAIN (points_to_domain)
#define points_to_NEWGEN_DOMAIN (points_to_domain)
typedef struct _newgen_struct_points_to_ * points_to;
#endif /* _newgen_points_to_domain_defined_ */

#define statement_points_to_domain (_gen_points_to_private_start+3)
#if !defined(_newgen_statement_points_to_domain_defined_)
#define _newgen_statement_points_to_domain_defined_
#define STATEMENT_POINTS_TO_NEWGEN_DOMAIN (statement_points_to_domain)
#define statement_points_to_NEWGEN_DOMAIN (statement_points_to_domain)
typedef struct _newgen_struct_statement_points_to_ * statement_points_to;
#endif /* _newgen_statement_points_to_domain_defined_ */

/* POINTS_TO_GRAPH
 */
#define POINTS_TO_GRAPH(x) ((points_to_graph)((x).p))
#define points_to_graph_CAST(x) POINTS_TO_GRAPH(x)
#define POINTS_TO_GRAPH_CAST(x) POINTS_TO_GRAPH(x)
#define POINTS_TO_GRAPH_(x) ((x).e)
#define POINTS_TO_GRAPH_TYPE points_to_graph
#define points_to_graph_TYPE points_to_graph
#define points_to_graph_undefined ((points_to_graph)gen_chunk_undefined)
#define points_to_graph_undefined_p(x) ((x)==points_to_graph_undefined)

extern points_to_graph copy_points_to_graph(points_to_graph);
extern void free_points_to_graph(points_to_graph);
extern points_to_graph check_points_to_graph(points_to_graph);
extern bool points_to_graph_consistent_p(points_to_graph);
extern bool points_to_graph_defined_p(points_to_graph);
#define gen_POINTS_TO_GRAPH_cons gen_points_to_graph_cons
extern list gen_points_to_graph_cons(points_to_graph, list);
extern void points_to_graph_assign_contents(points_to_graph, points_to_graph);
extern void points_to_graph_non_recursive_free(points_to_graph);
extern void write_points_to_graph(FILE*, points_to_graph);
extern points_to_graph read_points_to_graph(FILE*);
extern points_to_graph make_points_to_graph(bool, set);

struct _newgen_struct_points_to_graph_ {
  intptr_t _type_;
  gen_chunk _points_to_graph_bottom_; /* bottom:bool */
  set _points_to_graph_set_; /* set:points_to{} */
};

#define points_to_graph_domain_number(x) ((x)->_type_)
#define points_to_graph_bottom_(x) points_to_graph_bottom(x) /* old hack compatible */
#define points_to_graph_bottom(x) ((x)->_points_to_graph_bottom_.b)
#define points_to_graph_set_(x) points_to_graph_set(x) /* old hack compatible */
#define points_to_graph_set(x) ((x)->_points_to_graph_set_)

/* POINTS_TO_LIST
 */
#define POINTS_TO_LIST(x) ((points_to_list)((x).p))
#define points_to_list_CAST(x) POINTS_TO_LIST(x)
#define POINTS_TO_LIST_CAST(x) POINTS_TO_LIST(x)
#define POINTS_TO_LIST_(x) ((x).e)
#define POINTS_TO_LIST_TYPE points_to_list
#define points_to_list_TYPE points_to_list
#define points_to_list_undefined ((points_to_list)gen_chunk_undefined)
#define points_to_list_undefined_p(x) ((x)==points_to_list_undefined)

extern points_to_list copy_points_to_list(points_to_list);
extern void free_points_to_list(points_to_list);
extern points_to_list check_points_to_list(points_to_list);
extern bool points_to_list_consistent_p(points_to_list);
extern bool points_to_list_defined_p(points_to_list);
#define gen_POINTS_TO_LIST_cons gen_points_to_list_cons
extern list gen_points_to_list_cons(points_to_list, list);
extern void points_to_list_assign_contents(points_to_list, points_to_list);
extern void points_to_list_non_recursive_free(points_to_list);
extern void write_points_to_list(FILE*, points_to_list);
extern points_to_list read_points_to_list(FILE*);
extern points_to_list make_points_to_list(bool, list);

struct _newgen_struct_points_to_list_ {
  intptr_t _type_;
  gen_chunk _points_to_list_bottom_; /* bottom:bool */
  list _points_to_list_list_; /* list:points_to* */
};

#define points_to_list_domain_number(x) ((x)->_type_)
#define points_to_list_bottom_(x) points_to_list_bottom(x) /* old hack compatible */
#define points_to_list_bottom(x) ((x)->_points_to_list_bottom_.b)
#define points_to_list_list_(x) points_to_list_list(x) /* old hack compatible */
#define points_to_list_list(x) ((x)->_points_to_list_list_)

/* POINTS_TO
 */
#define POINTS_TO(x) ((points_to)((x).p))
#define points_to_CAST(x) POINTS_TO(x)
#define POINTS_TO_CAST(x) POINTS_TO(x)
#define POINTS_TO_(x) ((x).e)
#define POINTS_TO_TYPE points_to
#define points_to_TYPE points_to
#define points_to_undefined ((points_to)gen_chunk_undefined)
#define points_to_undefined_p(x) ((x)==points_to_undefined)

extern points_to copy_points_to(points_to);
extern void free_points_to(points_to);
extern points_to check_points_to(points_to);
extern bool points_to_consistent_p(points_to);
extern bool points_to_defined_p(points_to);
#define gen_POINTS_TO_cons gen_points_to_cons
extern list gen_points_to_cons(points_to, list);
extern void points_to_assign_contents(points_to, points_to);
extern void points_to_non_recursive_free(points_to);
extern void write_points_to(FILE*, points_to);
extern points_to read_points_to(FILE*);
extern points_to make_points_to(cell, cell, approximation, descriptor);

struct _newgen_struct_points_to_ {
  intptr_t _type_;
  cell _points_to_source_; /* source:cell */
  cell _points_to_sink_; /* sink:cell */
  approximation _points_to_approximation_; /* approximation:approximation */
  descriptor _points_to_descriptor_; /* descriptor:descriptor */
};

#define points_to_domain_number(x) ((x)->_type_)
#define points_to_source_(x) points_to_source(x) /* old hack compatible */
#define points_to_source(x) ((x)->_points_to_source_)
#define points_to_sink_(x) points_to_sink(x) /* old hack compatible */
#define points_to_sink(x) ((x)->_points_to_sink_)
#define points_to_approximation_(x) points_to_approximation(x) /* old hack compatible */
#define points_to_approximation(x) ((x)->_points_to_approximation_)
#define points_to_descriptor_(x) points_to_descriptor(x) /* old hack compatible */
#define points_to_descriptor(x) ((x)->_points_to_descriptor_)

/* STATEMENT_POINTS_TO
 */
#define STATEMENT_POINTS_TO(x) ((statement_points_to)((x).p))
#define statement_points_to_CAST(x) STATEMENT_POINTS_TO(x)
#define STATEMENT_POINTS_TO_CAST(x) STATEMENT_POINTS_TO(x)
#define STATEMENT_POINTS_TO_(x) ((x).e)
#define STATEMENT_POINTS_TO_TYPE statement_points_to
#define statement_points_to_TYPE statement_points_to
#define statement_points_to_undefined ((statement_points_to)gen_chunk_undefined)
#define statement_points_to_undefined_p(x) ((x)==statement_points_to_undefined)

extern statement_points_to copy_statement_points_to(statement_points_to);
extern void free_statement_points_to(statement_points_to);
extern statement_points_to check_statement_points_to(statement_points_to);
extern bool statement_points_to_consistent_p(statement_points_to);
extern bool statement_points_to_defined_p(statement_points_to);
#define gen_STATEMENT_POINTS_TO_cons gen_statement_points_to_cons
extern list gen_statement_points_to_cons(statement_points_to, list);
extern void statement_points_to_assign_contents(statement_points_to, statement_points_to);
extern void statement_points_to_non_recursive_free(statement_points_to);
extern void write_statement_points_to(FILE*, statement_points_to);
extern statement_points_to read_statement_points_to(FILE*);
extern statement_points_to make_statement_points_to(void);

struct _newgen_struct_statement_points_to_ {
  intptr_t _type_;
  hash_table _statement_points_to_holder_;
};

#define statement_points_to_domain_number(x) ((x)->_type_)
#define statement_points_to_hash_table(x) ((x)->_statement_points_to_holder_)
#define statement_points_to_key_type statement
#define statement_points_to_value_type points_to_list
#define STATEMENT_POINTS_TO_MAP(k,v,c,f) FUNCTION_MAP(statement_points_to,p,p,k,v,c,f)
#define STATEMENT_POINTS_TO_FOREACH(k,v,f) FUNCTION_FOREACH(statement_points_to,p,p,k,v,f)
extern points_to_list apply_statement_points_to(statement_points_to, statement);
extern void update_statement_points_to(statement_points_to, statement, points_to_list);
extern void extend_statement_points_to(statement_points_to, statement, points_to_list);
extern points_to_list delete_statement_points_to(statement_points_to, statement);
extern bool bound_statement_points_to_p(statement_points_to, statement);

#define points_to_private_spec "\
--NEWGEN-START 217\n\
import descriptor from \"ri.newgen\";\n\
import approximation from \"ri.newgen\";\n\
import statement from \"ri.newgen\";\n\
import cell from \"effects.newgen\";\n\
points_to_graph = bottom:bool x set:points_to{};\n\
points_to_list = bottom:bool x list:points_to*;\n\
points_to = source:cell x sink:cell x approximation:approximation x descriptor:descriptor;\n\
statement_points_to = persistant statement:statement -> points_to_list:points_to_list;\n\
"
#endif

#ifndef _newgen_makefile_included
#define _newgen_makefile_included
#define _gen_makefile_start 15
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#define makefile_domain (_gen_makefile_start+0)
#if !defined(_newgen_makefile_domain_defined_)
#define _newgen_makefile_domain_defined_
#define MAKEFILE_NEWGEN_DOMAIN (makefile_domain)
#define makefile_NEWGEN_DOMAIN (makefile_domain)
typedef struct _newgen_struct_makefile_ * makefile;
#endif /* _newgen_makefile_domain_defined_ */

#define owner_domain (_gen_makefile_start+1)
#if !defined(_newgen_owner_domain_defined_)
#define _newgen_owner_domain_defined_
#define OWNER_NEWGEN_DOMAIN (owner_domain)
#define owner_NEWGEN_DOMAIN (owner_domain)
typedef struct _newgen_struct_owner_ * owner;
#endif /* _newgen_owner_domain_defined_ */

#define real_resource_domain (_gen_makefile_start+2)
#if !defined(_newgen_real_resource_domain_defined_)
#define _newgen_real_resource_domain_defined_
#define REAL_RESOURCE_NEWGEN_DOMAIN (real_resource_domain)
#define real_resource_NEWGEN_DOMAIN (real_resource_domain)
typedef struct _newgen_struct_real_resource_ * real_resource;
#endif /* _newgen_real_resource_domain_defined_ */

#define rule_domain (_gen_makefile_start+3)
#if !defined(_newgen_rule_domain_defined_)
#define _newgen_rule_domain_defined_
#define RULE_NEWGEN_DOMAIN (rule_domain)
#define rule_NEWGEN_DOMAIN (rule_domain)
typedef struct _newgen_struct_rule_ * rule;
#endif /* _newgen_rule_domain_defined_ */

#define virtual_resource_domain (_gen_makefile_start+4)
#if !defined(_newgen_virtual_resource_domain_defined_)
#define _newgen_virtual_resource_domain_defined_
#define VIRTUAL_RESOURCE_NEWGEN_DOMAIN (virtual_resource_domain)
#define virtual_resource_NEWGEN_DOMAIN (virtual_resource_domain)
typedef struct _newgen_struct_virtual_resource_ * virtual_resource;
#endif /* _newgen_virtual_resource_domain_defined_ */

/* MAKEFILE
 */
#define MAKEFILE(x) ((makefile)((x).p))
#define makefile_CAST(x) MAKEFILE(x)
#define MAKEFILE_CAST(x) MAKEFILE(x)
#define MAKEFILE_(x) ((x).e)
#define MAKEFILE_TYPE makefile
#define makefile_TYPE makefile
#define makefile_undefined ((makefile)gen_chunk_undefined)
#define makefile_undefined_p(x) ((x)==makefile_undefined)

extern makefile copy_makefile(makefile);
extern void free_makefile(makefile);
extern makefile check_makefile(makefile);
extern bool makefile_consistent_p(makefile);
extern bool makefile_defined_p(makefile);
#define gen_MAKEFILE_cons gen_makefile_cons
extern list gen_makefile_cons(makefile, list);
extern void makefile_assign_contents(makefile, makefile);
extern void makefile_non_recursive_free(makefile);
extern void write_makefile(FILE*, makefile);
extern makefile read_makefile(FILE*);
extern makefile make_makefile(list, list);

struct _newgen_struct_makefile_ {
  intptr_t _type_;
  list _makefile_rules_; /* rules:rule* */
  list _makefile_active_phases_; /* active_phases:string* */
};

#define makefile_domain_number(x) ((x)->_type_)
#define makefile_rules_(x) makefile_rules(x) /* old hack compatible */
#define makefile_rules(x) ((x)->_makefile_rules_)
#define makefile_active_phases_(x) makefile_active_phases(x) /* old hack compatible */
#define makefile_active_phases(x) ((x)->_makefile_active_phases_)

/* OWNER
 */
#define OWNER(x) ((owner)((x).p))
#define owner_CAST(x) OWNER(x)
#define OWNER_CAST(x) OWNER(x)
#define OWNER_(x) ((x).e)
#define OWNER_TYPE owner
#define owner_TYPE owner
#define owner_undefined ((owner)gen_chunk_undefined)
#define owner_undefined_p(x) ((x)==owner_undefined)

extern owner copy_owner(owner);
extern void free_owner(owner);
extern owner check_owner(owner);
extern bool owner_consistent_p(owner);
extern bool owner_defined_p(owner);
#define gen_OWNER_cons gen_owner_cons
extern list gen_owner_cons(owner, list);
extern void owner_assign_contents(owner, owner);
extern void owner_non_recursive_free(owner);
extern void write_owner(FILE*, owner);
extern owner read_owner(FILE*);
enum owner_utype {
  is_owner_program,
  is_owner_module,
  is_owner_main,
  is_owner_callees,
  is_owner_callers,
  is_owner_all,
  is_owner_select,
  is_owner_compilation_unit
};
extern string owner_tag_as_string(enum owner_utype);
extern owner make_owner(enum owner_utype, void *);
extern owner make_owner_program(void);
extern owner make_owner_module(void);
extern owner make_owner_main(void);
extern owner make_owner_callees(void);
extern owner make_owner_callers(void);
extern owner make_owner_all(void);
extern owner make_owner_select(void);
extern owner make_owner_compilation_unit(void);

struct _newgen_struct_owner_ {
  intptr_t _type_;
  enum owner_utype _owner_tag__;
  union {
    gen_chunk _owner_program_; /* program:unit */
    gen_chunk _owner_module_; /* module:unit */
    gen_chunk _owner_main_; /* main:unit */
    gen_chunk _owner_callees_; /* callees:unit */
    gen_chunk _owner_callers_; /* callers:unit */
    gen_chunk _owner_all_; /* all:unit */
    gen_chunk _owner_select_; /* select:unit */
    gen_chunk _owner_compilation_unit_; /* compilation_unit:unit */
  } _owner_union_;
};

#define owner_domain_number(x) ((x)->_type_)
#define owner_tag(x) ((x)->_owner_tag__)
#define owner_program_p(x) (owner_tag(x)==is_owner_program)
#define owner_program_(x) owner_program(x) /* old hack compatible */
#define owner_program(x) ((x)->_owner_union_._owner_program_.u)
#define owner_module_p(x) (owner_tag(x)==is_owner_module)
#define owner_module_(x) owner_module(x) /* old hack compatible */
#define owner_module(x) ((x)->_owner_union_._owner_module_.u)
#define owner_main_p(x) (owner_tag(x)==is_owner_main)
#define owner_main_(x) owner_main(x) /* old hack compatible */
#define owner_main(x) ((x)->_owner_union_._owner_main_.u)
#define owner_callees_p(x) (owner_tag(x)==is_owner_callees)
#define owner_callees_(x) owner_callees(x) /* old hack compatible */
#define owner_callees(x) ((x)->_owner_union_._owner_callees_.u)
#define owner_callers_p(x) (owner_tag(x)==is_owner_callers)
#define owner_callers_(x) owner_callers(x) /* old hack compatible */
#define owner_callers(x) ((x)->_owner_union_._owner_callers_.u)
#define owner_all_p(x) (owner_tag(x)==is_owner_all)
#define owner_all_(x) owner_all(x) /* old hack compatible */
#define owner_all(x) ((x)->_owner_union_._owner_all_.u)
#define owner_select_p(x) (owner_tag(x)==is_owner_select)
#define owner_select_(x) owner_select(x) /* old hack compatible */
#define owner_select(x) ((x)->_owner_union_._owner_select_.u)
#define owner_compilation_unit_p(x) (owner_tag(x)==is_owner_compilation_unit)
#define owner_compilation_unit_(x) owner_compilation_unit(x) /* old hack compatible */
#define owner_compilation_unit(x) ((x)->_owner_union_._owner_compilation_unit_.u)

/* REAL_RESOURCE
 */
#define REAL_RESOURCE(x) ((real_resource)((x).p))
#define real_resource_CAST(x) REAL_RESOURCE(x)
#define REAL_RESOURCE_CAST(x) REAL_RESOURCE(x)
#define REAL_RESOURCE_(x) ((x).e)
#define REAL_RESOURCE_TYPE real_resource
#define real_resource_TYPE real_resource
#define real_resource_undefined ((real_resource)gen_chunk_undefined)
#define real_resource_undefined_p(x) ((x)==real_resource_undefined)

extern real_resource copy_real_resource(real_resource);
extern void free_real_resource(real_resource);
extern real_resource check_real_resource(real_resource);
extern bool real_resource_consistent_p(real_resource);
extern bool real_resource_defined_p(real_resource);
#define gen_REAL_RESOURCE_cons gen_real_resource_cons
extern list gen_real_resource_cons(real_resource, list);
extern void real_resource_assign_contents(real_resource, real_resource);
extern void real_resource_non_recursive_free(real_resource);
extern void write_real_resource(FILE*, real_resource);
extern real_resource read_real_resource(FILE*);
extern real_resource make_real_resource(string, string);

struct _newgen_struct_real_resource_ {
  intptr_t _type_;
  string _real_resource_resource_name_; /* resource_name:string */
  string _real_resource_owner_name_; /* owner_name:string */
};

#define real_resource_domain_number(x) ((x)->_type_)
#define real_resource_resource_name_(x) real_resource_resource_name(x) /* old hack compatible */
#define real_resource_resource_name(x) ((x)->_real_resource_resource_name_)
#define real_resource_owner_name_(x) real_resource_owner_name(x) /* old hack compatible */
#define real_resource_owner_name(x) ((x)->_real_resource_owner_name_)

/* RULE
 */
#define RULE(x) ((rule)((x).p))
#define rule_CAST(x) RULE(x)
#define RULE_CAST(x) RULE(x)
#define RULE_(x) ((x).e)
#define RULE_TYPE rule
#define rule_TYPE rule
#define rule_undefined ((rule)gen_chunk_undefined)
#define rule_undefined_p(x) ((x)==rule_undefined)

extern rule copy_rule(rule);
extern void free_rule(rule);
extern rule check_rule(rule);
extern bool rule_consistent_p(rule);
extern bool rule_defined_p(rule);
#define gen_RULE_cons gen_rule_cons
extern list gen_rule_cons(rule, list);
extern void rule_assign_contents(rule, rule);
extern void rule_non_recursive_free(rule);
extern void write_rule(FILE*, rule);
extern rule read_rule(FILE*);
extern rule make_rule(string, list, list, list, list, list, list);

struct _newgen_struct_rule_ {
  intptr_t _type_;
  string _rule_phase_; /* phase:string */
  list _rule_required_; /* required:virtual_resource* */
  list _rule_produced_; /* produced:virtual_resource* */
  list _rule_preserved_; /* preserved:virtual_resource* */
  list _rule_modified_; /* modified:virtual_resource* */
  list _rule_pre_transformation_; /* pre_transformation:virtual_resource* */
  list _rule_post_transformation_; /* post_transformation:virtual_resource* */
};

#define rule_domain_number(x) ((x)->_type_)
#define rule_phase_(x) rule_phase(x) /* old hack compatible */
#define rule_phase(x) ((x)->_rule_phase_)
#define rule_required_(x) rule_required(x) /* old hack compatible */
#define rule_required(x) ((x)->_rule_required_)
#define rule_produced_(x) rule_produced(x) /* old hack compatible */
#define rule_produced(x) ((x)->_rule_produced_)
#define rule_preserved_(x) rule_preserved(x) /* old hack compatible */
#define rule_preserved(x) ((x)->_rule_preserved_)
#define rule_modified_(x) rule_modified(x) /* old hack compatible */
#define rule_modified(x) ((x)->_rule_modified_)
#define rule_pre_transformation_(x) rule_pre_transformation(x) /* old hack compatible */
#define rule_pre_transformation(x) ((x)->_rule_pre_transformation_)
#define rule_post_transformation_(x) rule_post_transformation(x) /* old hack compatible */
#define rule_post_transformation(x) ((x)->_rule_post_transformation_)

/* VIRTUAL_RESOURCE
 */
#define VIRTUAL_RESOURCE(x) ((virtual_resource)((x).p))
#define virtual_resource_CAST(x) VIRTUAL_RESOURCE(x)
#define VIRTUAL_RESOURCE_CAST(x) VIRTUAL_RESOURCE(x)
#define VIRTUAL_RESOURCE_(x) ((x).e)
#define VIRTUAL_RESOURCE_TYPE virtual_resource
#define virtual_resource_TYPE virtual_resource
#define virtual_resource_undefined ((virtual_resource)gen_chunk_undefined)
#define virtual_resource_undefined_p(x) ((x)==virtual_resource_undefined)

extern virtual_resource copy_virtual_resource(virtual_resource);
extern void free_virtual_resource(virtual_resource);
extern virtual_resource check_virtual_resource(virtual_resource);
extern bool virtual_resource_consistent_p(virtual_resource);
extern bool virtual_resource_defined_p(virtual_resource);
#define gen_VIRTUAL_RESOURCE_cons gen_virtual_resource_cons
extern list gen_virtual_resource_cons(virtual_resource, list);
extern void virtual_resource_assign_contents(virtual_resource, virtual_resource);
extern void virtual_resource_non_recursive_free(virtual_resource);
extern void write_virtual_resource(FILE*, virtual_resource);
extern virtual_resource read_virtual_resource(FILE*);
extern virtual_resource make_virtual_resource(string, owner);

struct _newgen_struct_virtual_resource_ {
  intptr_t _type_;
  string _virtual_resource_name_; /* name:string */
  owner _virtual_resource_owner_; /* owner:owner */
};

#define virtual_resource_domain_number(x) ((x)->_type_)
#define virtual_resource_name_(x) virtual_resource_name(x) /* old hack compatible */
#define virtual_resource_name(x) ((x)->_virtual_resource_name_)
#define virtual_resource_owner_(x) virtual_resource_owner(x) /* old hack compatible */
#define virtual_resource_owner(x) ((x)->_virtual_resource_owner_)

#define makefile_spec "\
--NEWGEN-START 15\n\
makefile = rules:rule* x active_phases:string*;\n\
owner = program:unit + module:unit + main:unit + callees:unit + callers:unit + all:unit + select:unit + compilation_unit:unit;\n\
real_resource = resource_name:string x owner_name:string;\n\
rule = phase:string x required:virtual_resource* x produced:virtual_resource* x preserved:virtual_resource* x modified:virtual_resource* x pre_transformation:virtual_resource* x post_transformation:virtual_resource*;\n\
virtual_resource = name:string x owner:owner;\n\
"
#endif

#ifndef _newgen_database_included
#define _newgen_database_included
#define _gen_database_start 7
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#define database_domain (_gen_database_start+0)
#if !defined(_newgen_database_domain_defined_)
#define _newgen_database_domain_defined_
#define DATABASE_NEWGEN_DOMAIN (database_domain)
#define database_NEWGEN_DOMAIN (database_domain)
typedef struct _newgen_struct_database_ * database;
#endif /* _newgen_database_domain_defined_ */

#define resource_domain (_gen_database_start+1)
#if !defined(_newgen_resource_domain_defined_)
#define _newgen_resource_domain_defined_
#define RESOURCE_NEWGEN_DOMAIN (resource_domain)
#define resource_NEWGEN_DOMAIN (resource_domain)
typedef struct _newgen_struct_resource_ * resource;
#endif /* _newgen_resource_domain_defined_ */

#define status_domain (_gen_database_start+2)
#if !defined(_newgen_status_domain_defined_)
#define _newgen_status_domain_defined_
#define STATUS_NEWGEN_DOMAIN (status_domain)
#define status_NEWGEN_DOMAIN (status_domain)
typedef struct _newgen_struct_status_ * status;
#endif /* _newgen_status_domain_defined_ */

/* DATABASE
 */
#define DATABASE(x) ((database)((x).p))
#define database_CAST(x) DATABASE(x)
#define DATABASE_CAST(x) DATABASE(x)
#define DATABASE_(x) ((x).e)
#define DATABASE_TYPE database
#define database_TYPE database
#define database_undefined ((database)gen_chunk_undefined)
#define database_undefined_p(x) ((x)==database_undefined)

extern database copy_database(database);
extern void free_database(database);
extern database check_database(database);
extern bool database_consistent_p(database);
extern bool database_defined_p(database);
#define gen_DATABASE_cons gen_database_cons
extern list gen_database_cons(database, list);
extern void database_assign_contents(database, database);
extern void database_non_recursive_free(database);
extern void write_database(FILE*, database);
extern database read_database(FILE*);
extern database make_database(string, string, list);

struct _newgen_struct_database_ {
  intptr_t _type_;
  string _database_name_; /* name:string */
  string _database_directory_; /* directory:string */
  list _database_resources_; /* resources:resource* */
};

#define database_domain_number(x) ((x)->_type_)
#define database_name_(x) database_name(x) /* old hack compatible */
#define database_name(x) ((x)->_database_name_)
#define database_directory_(x) database_directory(x) /* old hack compatible */
#define database_directory(x) ((x)->_database_directory_)
#define database_resources_(x) database_resources(x) /* old hack compatible */
#define database_resources(x) ((x)->_database_resources_)

/* RESOURCE
 */
#define RESOURCE(x) ((resource)((x).p))
#define resource_CAST(x) RESOURCE(x)
#define RESOURCE_CAST(x) RESOURCE(x)
#define RESOURCE_(x) ((x).e)
#define RESOURCE_TYPE resource
#define resource_TYPE resource
#define resource_undefined ((resource)gen_chunk_undefined)
#define resource_undefined_p(x) ((x)==resource_undefined)

extern resource copy_resource(resource);
extern void free_resource(resource);
extern resource check_resource(resource);
extern bool resource_consistent_p(resource);
extern bool resource_defined_p(resource);
#define gen_RESOURCE_cons gen_resource_cons
extern list gen_resource_cons(resource, list);
extern void resource_assign_contents(resource, resource);
extern void resource_non_recursive_free(resource);
extern void write_resource(FILE*, resource);
extern resource read_resource(FILE*);
extern resource make_resource(string, string, status, intptr_t, intptr_t);

struct _newgen_struct_resource_ {
  intptr_t _type_;
  string _resource_name_; /* name:string */
  string _resource_owner_name_; /* owner_name:string */
  status _resource_status_; /* status:status */
  intptr_t _resource_time_; /* time:int */
  intptr_t _resource_file_time_; /* file_time:int */
};

#define resource_domain_number(x) ((x)->_type_)
#define resource_name_(x) resource_name(x) /* old hack compatible */
#define resource_name(x) ((x)->_resource_name_)
#define resource_owner_name_(x) resource_owner_name(x) /* old hack compatible */
#define resource_owner_name(x) ((x)->_resource_owner_name_)
#define resource_status_(x) resource_status(x) /* old hack compatible */
#define resource_status(x) ((x)->_resource_status_)
#define resource_time_(x) resource_time(x) /* old hack compatible */
#define resource_time(x) ((x)->_resource_time_)
#define resource_file_time_(x) resource_file_time(x) /* old hack compatible */
#define resource_file_time(x) ((x)->_resource_file_time_)

/* STATUS
 */
#define STATUS(x) ((status)((x).p))
#define status_CAST(x) STATUS(x)
#define STATUS_CAST(x) STATUS(x)
#define STATUS_(x) ((x).e)
#define STATUS_TYPE status
#define status_TYPE status
#define status_undefined ((status)gen_chunk_undefined)
#define status_undefined_p(x) ((x)==status_undefined)

extern status copy_status(status);
extern void free_status(status);
extern status check_status(status);
extern bool status_consistent_p(status);
extern bool status_defined_p(status);
#define gen_STATUS_cons gen_status_cons
extern list gen_status_cons(status, list);
extern void status_assign_contents(status, status);
extern void status_non_recursive_free(status);
extern void write_status(FILE*, status);
extern status read_status(FILE*);
enum status_utype {
  is_status_memory,
  is_status_file
};
extern string status_tag_as_string(enum status_utype);
extern status make_status(enum status_utype, void *);
extern status make_status_memory(string);
extern status make_status_file(string);

struct _newgen_struct_status_ {
  intptr_t _type_;
  enum status_utype _status_tag__;
  union {
    string _status_memory_; /* memory:string */
    string _status_file_; /* file:string */
  } _status_union_;
};

#define status_domain_number(x) ((x)->_type_)
#define status_tag(x) ((x)->_status_tag__)
#define status_memory_p(x) (status_tag(x)==is_status_memory)
#define status_memory_(x) status_memory(x) /* old hack compatible */
#define status_memory(x) ((x)->_status_union_._status_memory_)
#define status_file_p(x) (status_tag(x)==is_status_file)
#define status_file_(x) status_file(x) /* old hack compatible */
#define status_file(x) ((x)->_status_union_._status_file_)

#define database_spec "\
--NEWGEN-START 7\n\
database = name:string x directory:string x resources:resource*;\n\
resource = name:string x owner_name:string x status:status x time:int x file_time:int;\n\
status = memory:string + file:string;\n\
"
#endif

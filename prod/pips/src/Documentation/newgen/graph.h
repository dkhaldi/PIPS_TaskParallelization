#ifndef _newgen_graph_included
#define _newgen_graph_included
#define _gen_graph_start 10
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_vertex_label_domain_defined_)
#define _newgen_vertex_label_domain_defined_
#define newgen_vertex_label(p) (p) /* old hack compatible */
#define VERTEX_LABEL_NEWGEN_EXTERNAL (_gen_graph_start+0)
#define VERTEX_LABEL_NEWGEN_DOMAIN (VERTEX_LABEL_NEWGEN_EXTERNAL)
#define vertex_label_NEWGEN_DOMAIN (VERTEX_LABEL_NEWGEN_EXTERNAL)
#endif /* _newgen_vertex_label_domain_defined_ */

#if !defined(_newgen_arc_label_domain_defined_)
#define _newgen_arc_label_domain_defined_
#define newgen_arc_label(p) (p) /* old hack compatible */
#define ARC_LABEL_NEWGEN_EXTERNAL (_gen_graph_start+1)
#define ARC_LABEL_NEWGEN_DOMAIN (ARC_LABEL_NEWGEN_EXTERNAL)
#define arc_label_NEWGEN_DOMAIN (ARC_LABEL_NEWGEN_EXTERNAL)
#endif /* _newgen_arc_label_domain_defined_ */

#define graph_domain (_gen_graph_start+2)
#if !defined(_newgen_graph_domain_defined_)
#define _newgen_graph_domain_defined_
#define GRAPH_NEWGEN_DOMAIN (graph_domain)
#define graph_NEWGEN_DOMAIN (graph_domain)
typedef struct _newgen_struct_graph_ * graph;
#endif /* _newgen_graph_domain_defined_ */

#define successor_domain (_gen_graph_start+3)
#if !defined(_newgen_successor_domain_defined_)
#define _newgen_successor_domain_defined_
#define SUCCESSOR_NEWGEN_DOMAIN (successor_domain)
#define successor_NEWGEN_DOMAIN (successor_domain)
typedef struct _newgen_struct_successor_ * successor;
#endif /* _newgen_successor_domain_defined_ */

#define vertex_domain (_gen_graph_start+4)
#if !defined(_newgen_vertex_domain_defined_)
#define _newgen_vertex_domain_defined_
#define VERTEX_NEWGEN_DOMAIN (vertex_domain)
#define vertex_NEWGEN_DOMAIN (vertex_domain)
typedef struct _newgen_struct_vertex_ * vertex;
#endif /* _newgen_vertex_domain_defined_ */



/* GRAPH
 */
#define GRAPH(x) ((graph)((x).p))
#define graph_CAST(x) GRAPH(x)
#define GRAPH_CAST(x) GRAPH(x)
#define GRAPH_(x) ((x).e)
#define GRAPH_TYPE graph
#define graph_TYPE graph
#define graph_undefined ((graph)gen_chunk_undefined)
#define graph_undefined_p(x) ((x)==graph_undefined)

extern graph copy_graph(graph);
extern void free_graph(graph);
extern graph check_graph(graph);
extern bool graph_consistent_p(graph);
extern bool graph_defined_p(graph);
#define gen_GRAPH_cons gen_graph_cons
extern list gen_graph_cons(graph, list);
extern void graph_assign_contents(graph, graph);
extern void graph_non_recursive_free(graph);
extern void write_graph(FILE*, graph);
extern graph read_graph(FILE*);
extern graph make_graph(list);

struct _newgen_struct_graph_ {
  intptr_t _type_;
  list _graph_holder_;
};

#define graph_domain_number(x) ((x)->_type_)
#define graph_vertices(x) ((x)->_graph_holder_)

/* SUCCESSOR
 */
#define SUCCESSOR(x) ((successor)((x).p))
#define successor_CAST(x) SUCCESSOR(x)
#define SUCCESSOR_CAST(x) SUCCESSOR(x)
#define SUCCESSOR_(x) ((x).e)
#define SUCCESSOR_TYPE successor
#define successor_TYPE successor
#define successor_undefined ((successor)gen_chunk_undefined)
#define successor_undefined_p(x) ((x)==successor_undefined)

extern successor copy_successor(successor);
extern void free_successor(successor);
extern successor check_successor(successor);
extern bool successor_consistent_p(successor);
extern bool successor_defined_p(successor);
#define gen_SUCCESSOR_cons gen_successor_cons
extern list gen_successor_cons(successor, list);
extern void successor_assign_contents(successor, successor);
extern void successor_non_recursive_free(successor);
extern void write_successor(FILE*, successor);
extern successor read_successor(FILE*);
extern successor make_successor(arc_label, vertex);

struct _newgen_struct_successor_ {
  intptr_t _type_;
  arc_label _successor_arc_label_; /* arc_label:arc_label */
  vertex _successor_vertex_; /* vertex:vertex */
};

#define successor_domain_number(x) ((x)->_type_)
#define successor_arc_label_(x) successor_arc_label(x) /* old hack compatible */
#define successor_arc_label(x) ((x)->_successor_arc_label_)
#define successor_vertex_(x) successor_vertex(x) /* old hack compatible */
#define successor_vertex(x) ((x)->_successor_vertex_)

/* VERTEX
 */
#define VERTEX(x) ((vertex)((x).p))
#define vertex_CAST(x) VERTEX(x)
#define VERTEX_CAST(x) VERTEX(x)
#define VERTEX_(x) ((x).e)
#define VERTEX_TYPE vertex
#define vertex_TYPE vertex
#define vertex_undefined ((vertex)gen_chunk_undefined)
#define vertex_undefined_p(x) ((x)==vertex_undefined)

extern vertex copy_vertex(vertex);
extern void free_vertex(vertex);
extern vertex check_vertex(vertex);
extern bool vertex_consistent_p(vertex);
extern bool vertex_defined_p(vertex);
#define gen_VERTEX_cons gen_vertex_cons
extern list gen_vertex_cons(vertex, list);
extern void vertex_assign_contents(vertex, vertex);
extern void vertex_non_recursive_free(vertex);
extern void write_vertex(FILE*, vertex);
extern vertex read_vertex(FILE*);
extern vertex make_vertex(vertex_label, list);

struct _newgen_struct_vertex_ {
  intptr_t _type_;
  vertex_label _vertex_vertex_label_; /* vertex_label:vertex_label */
  list _vertex_successors_; /* successors:successor* */
};

#define vertex_domain_number(x) ((x)->_type_)
#define vertex_vertex_label_(x) vertex_vertex_label(x) /* old hack compatible */
#define vertex_vertex_label(x) ((x)->_vertex_vertex_label_)
#define vertex_successors_(x) vertex_successors(x) /* old hack compatible */
#define vertex_successors(x) ((x)->_vertex_successors_)

#define graph_spec "\
--NEWGEN-START 10\n\
external vertex_label;\n\
external arc_label;\n\
graph = vertices:vertex*;\n\
successor = arc_label:arc_label x vertex:vertex;\n\
vertex = vertex_label:vertex_label x successors:successor*;\n\
"
#endif

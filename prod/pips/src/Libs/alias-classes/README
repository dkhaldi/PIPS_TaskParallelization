Goal of the library

Compute points-to information for each statement, that is a relation
between pointers or set of pointers and memory locations.

Organization of the library

  passes.c   	pass definitions, interface with pipsmake and pipsdbm

  statement.c	recursive statement analysis

  expression.c	recursive expression analysis

  sinks.c       given a points-to in, compute the set of memory locations
                possibly associated with a lhs expression either
                directly or via a memory dereferencing

alias_classes.c
alias_lists.c
alias_pairs.c

  constant-path-utils.c: to be reengineered/checked/read... Assumes
  that sets of arcs are used as representation of the points-to graph

  points_to_analysis_general_algorithm.c : initial algorithm, build
  incrementaly so as to have results quickly and to explore the
  problems; it is re-used by copy to build the new version so as to
  keep two possible versions; the function names are changed from
  points_to_xxxx to xxx_to_points[_to_yyy] in order to avoid name
  conflicts. For instance, points_to_statement has been replaced by
  statement_to_points_to(), which is located in statement.c

  points_to_init_analysis.c

  points_to_interprocedural_analysis.c

  points_to_prettyprint.c

  points_to_set.c	basic operation on points-to sets (~utils.c)

  prettyprint.c:

sav_alias_classes.c
sav_alias_lists.c

  unstructured.c: to deal with unstructured statements (called from statement.c)

  variable.c: to build the list of pointer locations contained in a
  variable; there may be many when the variables is an array of
  structs containing structs and so on...

Temporary or historical files

  emami.c: functions developed to implement Emami's algorithm
  assignment.c	analysis of assignment (statement or expression?)

Validation of the library

  Pointers
  EffectsWithPointsTo

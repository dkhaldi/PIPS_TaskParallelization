#ifndef _newgen_parser_private_included
#define _newgen_parser_private_included
#define _gen_parser_private_start 105
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#if !defined(_newgen_constant_domain_defined_)
#define _newgen_constant_domain_defined_
#define CONSTANT_NEWGEN_DOMAIN (constant_domain)
#define constant_NEWGEN_DOMAIN (constant_domain)
typedef struct _newgen_struct_constant_ * constant;
#endif /* _newgen_constant_domain_defined_ */

#define atom_domain (_gen_parser_private_start+0)
#if !defined(_newgen_atom_domain_defined_)
#define _newgen_atom_domain_defined_
#define ATOM_NEWGEN_DOMAIN (atom_domain)
#define atom_NEWGEN_DOMAIN (atom_domain)
typedef struct _newgen_struct_atom_ * atom;
#endif /* _newgen_atom_domain_defined_ */

#define chain_domain (_gen_parser_private_start+1)
#if !defined(_newgen_chain_domain_defined_)
#define _newgen_chain_domain_defined_
#define CHAIN_NEWGEN_DOMAIN (chain_domain)
#define chain_NEWGEN_DOMAIN (chain_domain)
typedef struct _newgen_struct_chain_ * chain;
#endif /* _newgen_chain_domain_defined_ */

#define data_domain (_gen_parser_private_start+2)
#if !defined(_newgen_data_domain_defined_)
#define _newgen_data_domain_defined_
#define DATA_NEWGEN_DOMAIN (data_domain)
#define data_NEWGEN_DOMAIN (data_domain)
typedef struct _newgen_struct_data_ * data;
#endif /* _newgen_data_domain_defined_ */

#define dataval_domain (_gen_parser_private_start+3)
#if !defined(_newgen_dataval_domain_defined_)
#define _newgen_dataval_domain_defined_
#define DATAVAL_NEWGEN_DOMAIN (dataval_domain)
#define dataval_NEWGEN_DOMAIN (dataval_domain)
typedef struct _newgen_struct_dataval_ * dataval;
#endif /* _newgen_dataval_domain_defined_ */

#define datavar_domain (_gen_parser_private_start+4)
#if !defined(_newgen_datavar_domain_defined_)
#define _newgen_datavar_domain_defined_
#define DATAVAR_NEWGEN_DOMAIN (datavar_domain)
#define datavar_NEWGEN_DOMAIN (datavar_domain)
typedef struct _newgen_struct_datavar_ * datavar;
#endif /* _newgen_datavar_domain_defined_ */

#define equivalences_domain (_gen_parser_private_start+5)
#if !defined(_newgen_equivalences_domain_defined_)
#define _newgen_equivalences_domain_defined_
#define EQUIVALENCES_NEWGEN_DOMAIN (equivalences_domain)
#define equivalences_NEWGEN_DOMAIN (equivalences_domain)
typedef struct _newgen_struct_equivalences_ * equivalences;
#endif /* _newgen_equivalences_domain_defined_ */

/* ATOM
 */
#define ATOM(x) ((atom)((x).p))
#define atom_CAST(x) ATOM(x)
#define ATOM_CAST(x) ATOM(x)
#define ATOM_(x) ((x).e)
#define ATOM_TYPE atom
#define atom_TYPE atom
#define atom_undefined ((atom)gen_chunk_undefined)
#define atom_undefined_p(x) ((x)==atom_undefined)

extern atom copy_atom(atom);
extern void free_atom(atom);
extern atom check_atom(atom);
extern bool atom_consistent_p(atom);
extern bool atom_defined_p(atom);
#define gen_ATOM_cons gen_atom_cons
extern list gen_atom_cons(atom, list);
extern void atom_assign_contents(atom, atom);
extern void atom_non_recursive_free(atom);
extern void write_atom(FILE*, atom);
extern atom read_atom(FILE*);
extern atom make_atom(entity, intptr_t);

struct _newgen_struct_atom_ {
  intptr_t _type_;
  entity _atom_equivar_; /* equivar:entity */
  intptr_t _atom_equioff_; /* equioff:int */
};

#define atom_domain_number(x) ((x)->_type_)
#define atom_equivar_(x) atom_equivar(x) /* old hack compatible */
#define atom_equivar(x) ((x)->_atom_equivar_)
#define atom_equioff_(x) atom_equioff(x) /* old hack compatible */
#define atom_equioff(x) ((x)->_atom_equioff_)

/* CHAIN
 */
#define CHAIN(x) ((chain)((x).p))
#define chain_CAST(x) CHAIN(x)
#define CHAIN_CAST(x) CHAIN(x)
#define CHAIN_(x) ((x).e)
#define CHAIN_TYPE chain
#define chain_TYPE chain
#define chain_undefined ((chain)gen_chunk_undefined)
#define chain_undefined_p(x) ((x)==chain_undefined)

extern chain copy_chain(chain);
extern void free_chain(chain);
extern chain check_chain(chain);
extern bool chain_consistent_p(chain);
extern bool chain_defined_p(chain);
#define gen_CHAIN_cons gen_chain_cons
extern list gen_chain_cons(chain, list);
extern void chain_assign_contents(chain, chain);
extern void chain_non_recursive_free(chain);
extern void write_chain(FILE*, chain);
extern chain read_chain(FILE*);
extern chain make_chain(list);

struct _newgen_struct_chain_ {
  intptr_t _type_;
  list _chain_holder_;
};

#define chain_domain_number(x) ((x)->_type_)
#define chain_atoms(x) ((x)->_chain_holder_)

/* DATA
 */
#define DATA(x) ((data)((x).p))
#define data_CAST(x) DATA(x)
#define DATA_CAST(x) DATA(x)
#define DATA_(x) ((x).e)
#define DATA_TYPE data
#define data_TYPE data
#define data_undefined ((data)gen_chunk_undefined)
#define data_undefined_p(x) ((x)==data_undefined)

extern data copy_data(data);
extern void free_data(data);
extern data check_data(data);
extern bool data_consistent_p(data);
extern bool data_defined_p(data);
#define gen_DATA_cons gen_data_cons
extern list gen_data_cons(data, list);
extern void data_assign_contents(data, data);
extern void data_non_recursive_free(data);
extern void write_data(FILE*, data);
extern data read_data(FILE*);
extern data make_data(list, list);

struct _newgen_struct_data_ {
  intptr_t _type_;
  list _data_datavars_; /* datavars:datavar* */
  list _data_datavals_; /* datavals:dataval* */
};

#define data_domain_number(x) ((x)->_type_)
#define data_datavars_(x) data_datavars(x) /* old hack compatible */
#define data_datavars(x) ((x)->_data_datavars_)
#define data_datavals_(x) data_datavals(x) /* old hack compatible */
#define data_datavals(x) ((x)->_data_datavals_)

/* DATAVAL
 */
#define DATAVAL(x) ((dataval)((x).p))
#define dataval_CAST(x) DATAVAL(x)
#define DATAVAL_CAST(x) DATAVAL(x)
#define DATAVAL_(x) ((x).e)
#define DATAVAL_TYPE dataval
#define dataval_TYPE dataval
#define dataval_undefined ((dataval)gen_chunk_undefined)
#define dataval_undefined_p(x) ((x)==dataval_undefined)

extern dataval copy_dataval(dataval);
extern void free_dataval(dataval);
extern dataval check_dataval(dataval);
extern bool dataval_consistent_p(dataval);
extern bool dataval_defined_p(dataval);
#define gen_DATAVAL_cons gen_dataval_cons
extern list gen_dataval_cons(dataval, list);
extern void dataval_assign_contents(dataval, dataval);
extern void dataval_non_recursive_free(dataval);
extern void write_dataval(FILE*, dataval);
extern dataval read_dataval(FILE*);
extern dataval make_dataval(constant, intptr_t);

struct _newgen_struct_dataval_ {
  intptr_t _type_;
  constant _dataval_constant_; /* constant:constant */
  intptr_t _dataval_nboccurrences_; /* nboccurrences:int */
};

#define dataval_domain_number(x) ((x)->_type_)
#define dataval_constant_(x) dataval_constant(x) /* old hack compatible */
#define dataval_constant(x) ((x)->_dataval_constant_)
#define dataval_nboccurrences_(x) dataval_nboccurrences(x) /* old hack compatible */
#define dataval_nboccurrences(x) ((x)->_dataval_nboccurrences_)

/* DATAVAR
 */
#define DATAVAR(x) ((datavar)((x).p))
#define datavar_CAST(x) DATAVAR(x)
#define DATAVAR_CAST(x) DATAVAR(x)
#define DATAVAR_(x) ((x).e)
#define DATAVAR_TYPE datavar
#define datavar_TYPE datavar
#define datavar_undefined ((datavar)gen_chunk_undefined)
#define datavar_undefined_p(x) ((x)==datavar_undefined)

extern datavar copy_datavar(datavar);
extern void free_datavar(datavar);
extern datavar check_datavar(datavar);
extern bool datavar_consistent_p(datavar);
extern bool datavar_defined_p(datavar);
#define gen_DATAVAR_cons gen_datavar_cons
extern list gen_datavar_cons(datavar, list);
extern void datavar_assign_contents(datavar, datavar);
extern void datavar_non_recursive_free(datavar);
extern void write_datavar(FILE*, datavar);
extern datavar read_datavar(FILE*);
extern datavar make_datavar(entity, intptr_t);

struct _newgen_struct_datavar_ {
  intptr_t _type_;
  entity _datavar_variable_; /* variable:entity */
  intptr_t _datavar_nbelements_; /* nbelements:int */
};

#define datavar_domain_number(x) ((x)->_type_)
#define datavar_variable_(x) datavar_variable(x) /* old hack compatible */
#define datavar_variable(x) ((x)->_datavar_variable_)
#define datavar_nbelements_(x) datavar_nbelements(x) /* old hack compatible */
#define datavar_nbelements(x) ((x)->_datavar_nbelements_)

/* EQUIVALENCES
 */
#define EQUIVALENCES(x) ((equivalences)((x).p))
#define equivalences_CAST(x) EQUIVALENCES(x)
#define EQUIVALENCES_CAST(x) EQUIVALENCES(x)
#define EQUIVALENCES_(x) ((x).e)
#define EQUIVALENCES_TYPE equivalences
#define equivalences_TYPE equivalences
#define equivalences_undefined ((equivalences)gen_chunk_undefined)
#define equivalences_undefined_p(x) ((x)==equivalences_undefined)

extern equivalences copy_equivalences(equivalences);
extern void free_equivalences(equivalences);
extern equivalences check_equivalences(equivalences);
extern bool equivalences_consistent_p(equivalences);
extern bool equivalences_defined_p(equivalences);
#define gen_EQUIVALENCES_cons gen_equivalences_cons
extern list gen_equivalences_cons(equivalences, list);
extern void equivalences_assign_contents(equivalences, equivalences);
extern void equivalences_non_recursive_free(equivalences);
extern void write_equivalences(FILE*, equivalences);
extern equivalences read_equivalences(FILE*);
extern equivalences make_equivalences(list);

struct _newgen_struct_equivalences_ {
  intptr_t _type_;
  list _equivalences_holder_;
};

#define equivalences_domain_number(x) ((x)->_type_)
#define equivalences_chains(x) ((x)->_equivalences_holder_)

#define parser_private_spec "\
--NEWGEN-START 105\n\
import entity from \"ri.newgen\";\n\
import constant from \"ri.newgen\";\n\
atom = equivar:entity x equioff:int;\n\
chain = atoms:atom*;\n\
data = datavars:datavar* x datavals:dataval*;\n\
dataval = constant:constant x nboccurrences:int;\n\
datavar = variable:entity x nbelements:int;\n\
equivalences = chains:chain*;\n\
"
#endif

#ifndef _newgen_reduction_included
#define _newgen_reduction_included
#define _gen_reduction_start 101
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_expression_domain_defined_)
#define _newgen_expression_domain_defined_
#define EXPRESSION_NEWGEN_DOMAIN (expression_domain)
#define expression_NEWGEN_DOMAIN (expression_domain)
typedef struct _newgen_struct_expression_ * expression;
#endif /* _newgen_expression_domain_defined_ */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#define gexpression_domain (_gen_reduction_start+0)
#if !defined(_newgen_gexpression_domain_defined_)
#define _newgen_gexpression_domain_defined_
#define GEXPRESSION_NEWGEN_DOMAIN (gexpression_domain)
#define gexpression_NEWGEN_DOMAIN (gexpression_domain)
typedef struct _newgen_struct_gexpression_ * gexpression;
#endif /* _newgen_gexpression_domain_defined_ */

#define pattern_domain (_gen_reduction_start+1)
#if !defined(_newgen_pattern_domain_defined_)
#define _newgen_pattern_domain_defined_
#define PATTERN_NEWGEN_DOMAIN (pattern_domain)
#define pattern_NEWGEN_DOMAIN (pattern_domain)
typedef struct _newgen_struct_pattern_ * pattern;
#endif /* _newgen_pattern_domain_defined_ */

#define reduced_loops_domain (_gen_reduction_start+2)
#if !defined(_newgen_reduced_loops_domain_defined_)
#define _newgen_reduced_loops_domain_defined_
#define REDUCED_LOOPS_NEWGEN_DOMAIN (reduced_loops_domain)
#define reduced_loops_NEWGEN_DOMAIN (reduced_loops_domain)
typedef struct _newgen_struct_reduced_loops_ * reduced_loops;
#endif /* _newgen_reduced_loops_domain_defined_ */

#define sexpression_domain (_gen_reduction_start+3)
#if !defined(_newgen_sexpression_domain_defined_)
#define _newgen_sexpression_domain_defined_
#define SEXPRESSION_NEWGEN_DOMAIN (sexpression_domain)
#define sexpression_NEWGEN_DOMAIN (sexpression_domain)
typedef struct _newgen_struct_sexpression_ * sexpression;
#endif /* _newgen_sexpression_domain_defined_ */

/* GEXPRESSION
 */
#define GEXPRESSION(x) ((gexpression)((x).p))
#define gexpression_CAST(x) GEXPRESSION(x)
#define GEXPRESSION_CAST(x) GEXPRESSION(x)
#define GEXPRESSION_(x) ((x).e)
#define GEXPRESSION_TYPE gexpression
#define gexpression_TYPE gexpression
#define gexpression_undefined ((gexpression)gen_chunk_undefined)
#define gexpression_undefined_p(x) ((x)==gexpression_undefined)

extern gexpression copy_gexpression(gexpression);
extern void free_gexpression(gexpression);
extern gexpression check_gexpression(gexpression);
extern bool gexpression_consistent_p(gexpression);
extern bool gexpression_defined_p(gexpression);
#define gen_GEXPRESSION_cons gen_gexpression_cons
extern list gen_gexpression_cons(gexpression, list);
extern void gexpression_assign_contents(gexpression, gexpression);
extern void gexpression_non_recursive_free(gexpression);
extern void write_gexpression(FILE*, gexpression);
extern gexpression read_gexpression(FILE*);
extern gexpression make_gexpression(expression, expression);

struct _newgen_struct_gexpression_ {
  intptr_t _type_;
  expression _gexpression_guard_; /* guard:expression */
  expression _gexpression_expression_; /* expression:expression */
};

#define gexpression_domain_number(x) ((x)->_type_)
#define gexpression_guard_(x) gexpression_guard(x) /* old hack compatible */
#define gexpression_guard(x) ((x)->_gexpression_guard_)
#define gexpression_expression_(x) gexpression_expression(x) /* old hack compatible */
#define gexpression_expression(x) ((x)->_gexpression_expression_)

/* PATTERN
 */
#define PATTERN(x) ((pattern)((x).p))
#define pattern_CAST(x) PATTERN(x)
#define PATTERN_CAST(x) PATTERN(x)
#define PATTERN_(x) ((x).e)
#define PATTERN_TYPE pattern
#define pattern_TYPE pattern
#define pattern_undefined ((pattern)gen_chunk_undefined)
#define pattern_undefined_p(x) ((x)==pattern_undefined)

extern pattern copy_pattern(pattern);
extern void free_pattern(pattern);
extern pattern check_pattern(pattern);
extern bool pattern_consistent_p(pattern);
extern bool pattern_defined_p(pattern);
#define gen_PATTERN_cons gen_pattern_cons
extern list gen_pattern_cons(pattern, list);
extern void pattern_assign_contents(pattern, pattern);
extern void pattern_non_recursive_free(pattern);
extern void write_pattern(FILE*, pattern);
extern pattern read_pattern(FILE*);
extern pattern make_pattern(entity, expression, expression, entity, list);

struct _newgen_struct_pattern_ {
  intptr_t _type_;
  entity _pattern_variable_; /* variable:entity */
  expression _pattern_condition_; /* condition:expression */
  expression _pattern_parameter_; /* parameter:expression */
  entity _pattern_operator_; /* operator:entity */
  list _pattern_indices_; /* indices:entity* */
};

#define pattern_domain_number(x) ((x)->_type_)
#define pattern_variable_(x) pattern_variable(x) /* old hack compatible */
#define pattern_variable(x) ((x)->_pattern_variable_)
#define pattern_condition_(x) pattern_condition(x) /* old hack compatible */
#define pattern_condition(x) ((x)->_pattern_condition_)
#define pattern_parameter_(x) pattern_parameter(x) /* old hack compatible */
#define pattern_parameter(x) ((x)->_pattern_parameter_)
#define pattern_operator_(x) pattern_operator(x) /* old hack compatible */
#define pattern_operator(x) ((x)->_pattern_operator_)
#define pattern_indices_(x) pattern_indices(x) /* old hack compatible */
#define pattern_indices(x) ((x)->_pattern_indices_)

/* REDUCED_LOOPS
 */
#define REDUCED_LOOPS(x) ((reduced_loops)((x).p))
#define reduced_loops_CAST(x) REDUCED_LOOPS(x)
#define REDUCED_LOOPS_CAST(x) REDUCED_LOOPS(x)
#define REDUCED_LOOPS_(x) ((x).e)
#define REDUCED_LOOPS_TYPE reduced_loops
#define reduced_loops_TYPE reduced_loops
#define reduced_loops_undefined ((reduced_loops)gen_chunk_undefined)
#define reduced_loops_undefined_p(x) ((x)==reduced_loops_undefined)

extern reduced_loops copy_reduced_loops(reduced_loops);
extern void free_reduced_loops(reduced_loops);
extern reduced_loops check_reduced_loops(reduced_loops);
extern bool reduced_loops_consistent_p(reduced_loops);
extern bool reduced_loops_defined_p(reduced_loops);
#define gen_REDUCED_LOOPS_cons gen_reduced_loops_cons
extern list gen_reduced_loops_cons(reduced_loops, list);
extern void reduced_loops_assign_contents(reduced_loops, reduced_loops);
extern void reduced_loops_non_recursive_free(reduced_loops);
extern void write_reduced_loops(FILE*, reduced_loops);
extern reduced_loops read_reduced_loops(FILE*);
extern reduced_loops make_reduced_loops(list);

struct _newgen_struct_reduced_loops_ {
  intptr_t _type_;
  list _reduced_loops_holder_;
};

#define reduced_loops_domain_number(x) ((x)->_type_)
#define reduced_loops_ordering(x) ((x)->_reduced_loops_holder_)

/* SEXPRESSION
 */
#define SEXPRESSION(x) ((sexpression)((x).p))
#define sexpression_CAST(x) SEXPRESSION(x)
#define SEXPRESSION_CAST(x) SEXPRESSION(x)
#define SEXPRESSION_(x) ((x).e)
#define SEXPRESSION_TYPE sexpression
#define sexpression_TYPE sexpression
#define sexpression_undefined ((sexpression)gen_chunk_undefined)
#define sexpression_undefined_p(x) ((x)==sexpression_undefined)

extern sexpression copy_sexpression(sexpression);
extern void free_sexpression(sexpression);
extern sexpression check_sexpression(sexpression);
extern bool sexpression_consistent_p(sexpression);
extern bool sexpression_defined_p(sexpression);
#define gen_SEXPRESSION_cons gen_sexpression_cons
extern list gen_sexpression_cons(sexpression, list);
extern void sexpression_assign_contents(sexpression, sexpression);
extern void sexpression_non_recursive_free(sexpression);
extern void write_sexpression(FILE*, sexpression);
extern sexpression read_sexpression(FILE*);
extern sexpression make_sexpression(list);

struct _newgen_struct_sexpression_ {
  intptr_t _type_;
  list _sexpression_holder_;
};

#define sexpression_domain_number(x) ((x)->_type_)
#define sexpression_gexpressions(x) ((x)->_sexpression_holder_)

#define reduction_spec "\
--NEWGEN-START 101\n\
import expression from \"ri.newgen\";\n\
import entity from \"ri.newgen\";\n\
gexpression = guard:expression x expression:expression;\n\
pattern = variable:entity x condition:expression x parameter:expression x operator:entity x indices:entity*;\n\
reduced_loops = ordering:int*;\n\
sexpression = gexpressions:gexpression*;\n\
"
#endif

#ifndef _newgen_eole_private_included
#define _newgen_eole_private_included
#define _gen_eole_private_start 124
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_expression_domain_defined_)
#define _newgen_expression_domain_defined_
#define EXPRESSION_NEWGEN_DOMAIN (expression_domain)
#define expression_NEWGEN_DOMAIN (expression_domain)
typedef struct _newgen_struct_expression_ * expression;
#endif /* _newgen_expression_domain_defined_ */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#define assignment_domain (_gen_eole_private_start+0)
#if !defined(_newgen_assignment_domain_defined_)
#define _newgen_assignment_domain_defined_
#define ASSIGNMENT_NEWGEN_DOMAIN (assignment_domain)
#define assignment_NEWGEN_DOMAIN (assignment_domain)
typedef struct _newgen_struct_assignment_ * assignment;
#endif /* _newgen_assignment_domain_defined_ */

#define expressionwithlevel_domain (_gen_eole_private_start+1)
#if !defined(_newgen_expressionwithlevel_domain_defined_)
#define _newgen_expressionwithlevel_domain_defined_
#define EXPRESSIONWITHLEVEL_NEWGEN_DOMAIN (expressionwithlevel_domain)
#define expressionwithlevel_NEWGEN_DOMAIN (expressionwithlevel_domain)
typedef struct _newgen_struct_expressionwithlevel_ * expressionwithlevel;
#endif /* _newgen_expressionwithlevel_domain_defined_ */

#define function_domain (_gen_eole_private_start+2)
#if !defined(_newgen_function_domain_defined_)
#define _newgen_function_domain_defined_
#define FUNCTION_NEWGEN_DOMAIN (function_domain)
#define function_NEWGEN_DOMAIN (function_domain)
typedef struct _newgen_struct_function_ * function;
#endif /* _newgen_function_domain_defined_ */

#define lexpressionwithlevel_domain (_gen_eole_private_start+3)
#if !defined(_newgen_lexpressionwithlevel_domain_defined_)
#define _newgen_lexpressionwithlevel_domain_defined_
#define LEXPRESSIONWITHLEVEL_NEWGEN_DOMAIN (lexpressionwithlevel_domain)
#define lexpressionwithlevel_NEWGEN_DOMAIN (lexpressionwithlevel_domain)
typedef struct _newgen_struct_lexpressionwithlevel_ * lexpressionwithlevel;
#endif /* _newgen_lexpressionwithlevel_domain_defined_ */

#define persistant_expression_to_entity_domain (_gen_eole_private_start+4)
#if !defined(_newgen_persistant_expression_to_entity_domain_defined_)
#define _newgen_persistant_expression_to_entity_domain_defined_
#define PERSISTANT_EXPRESSION_TO_ENTITY_NEWGEN_DOMAIN (persistant_expression_to_entity_domain)
#define persistant_expression_to_entity_NEWGEN_DOMAIN (persistant_expression_to_entity_domain)
typedef struct _newgen_struct_persistant_expression_to_entity_ * persistant_expression_to_entity;
#endif /* _newgen_persistant_expression_to_entity_domain_defined_ */

/* ASSIGNMENT
 */
#define ASSIGNMENT(x) ((assignment)((x).p))
#define assignment_CAST(x) ASSIGNMENT(x)
#define ASSIGNMENT_CAST(x) ASSIGNMENT(x)
#define ASSIGNMENT_(x) ((x).e)
#define ASSIGNMENT_TYPE assignment
#define assignment_TYPE assignment
#define assignment_undefined ((assignment)gen_chunk_undefined)
#define assignment_undefined_p(x) ((x)==assignment_undefined)

extern assignment copy_assignment(assignment);
extern void free_assignment(assignment);
extern assignment check_assignment(assignment);
extern bool assignment_consistent_p(assignment);
extern bool assignment_defined_p(assignment);
#define gen_ASSIGNMENT_cons gen_assignment_cons
extern list gen_assignment_cons(assignment, list);
extern void assignment_assign_contents(assignment, assignment);
extern void assignment_non_recursive_free(assignment);
extern void write_assignment(FILE*, assignment);
extern assignment read_assignment(FILE*);
extern assignment make_assignment(function, function, list);

struct _newgen_struct_assignment_ {
  intptr_t _type_;
  function _assignment_lhs_; /* lhs:function */
  function _assignment_rhs_; /* rhs:function */
  list _assignment_dependences_; /* dependences:entity* */
};

#define assignment_domain_number(x) ((x)->_type_)
#define assignment_lhs_(x) assignment_lhs(x) /* old hack compatible */
#define assignment_lhs(x) ((x)->_assignment_lhs_)
#define assignment_rhs_(x) assignment_rhs(x) /* old hack compatible */
#define assignment_rhs(x) ((x)->_assignment_rhs_)
#define assignment_dependences_(x) assignment_dependences(x) /* old hack compatible */
#define assignment_dependences(x) ((x)->_assignment_dependences_)

/* EXPRESSIONWITHLEVEL
 */
#define EXPRESSIONWITHLEVEL(x) ((expressionwithlevel)((x).p))
#define expressionwithlevel_CAST(x) EXPRESSIONWITHLEVEL(x)
#define EXPRESSIONWITHLEVEL_CAST(x) EXPRESSIONWITHLEVEL(x)
#define EXPRESSIONWITHLEVEL_(x) ((x).e)
#define EXPRESSIONWITHLEVEL_TYPE expressionwithlevel
#define expressionwithlevel_TYPE expressionwithlevel
#define expressionwithlevel_undefined ((expressionwithlevel)gen_chunk_undefined)
#define expressionwithlevel_undefined_p(x) ((x)==expressionwithlevel_undefined)

extern expressionwithlevel copy_expressionwithlevel(expressionwithlevel);
extern void free_expressionwithlevel(expressionwithlevel);
extern expressionwithlevel check_expressionwithlevel(expressionwithlevel);
extern bool expressionwithlevel_consistent_p(expressionwithlevel);
extern bool expressionwithlevel_defined_p(expressionwithlevel);
#define gen_EXPRESSIONWITHLEVEL_cons gen_expressionwithlevel_cons
extern list gen_expressionwithlevel_cons(expressionwithlevel, list);
extern void expressionwithlevel_assign_contents(expressionwithlevel, expressionwithlevel);
extern void expressionwithlevel_non_recursive_free(expressionwithlevel);
extern void write_expressionwithlevel(FILE*, expressionwithlevel);
extern expressionwithlevel read_expressionwithlevel(FILE*);
extern expressionwithlevel make_expressionwithlevel(list, expression);

struct _newgen_struct_expressionwithlevel_ {
  intptr_t _type_;
  list _expressionwithlevel_level_; /* level:entity* */
  expression _expressionwithlevel_expression_; /* expression:expression */
};

#define expressionwithlevel_domain_number(x) ((x)->_type_)
#define expressionwithlevel_level_(x) expressionwithlevel_level(x) /* old hack compatible */
#define expressionwithlevel_level(x) ((x)->_expressionwithlevel_level_)
#define expressionwithlevel_expression_(x) expressionwithlevel_expression(x) /* old hack compatible */
#define expressionwithlevel_expression(x) ((x)->_expressionwithlevel_expression_)

/* FUNCTION
 */
#define FUNCTION(x) ((function)((x).p))
#define function_CAST(x) FUNCTION(x)
#define FUNCTION_CAST(x) FUNCTION(x)
#define FUNCTION_(x) ((x).e)
#define FUNCTION_TYPE function
#define function_TYPE function
#define function_undefined ((function)gen_chunk_undefined)
#define function_undefined_p(x) ((x)==function_undefined)

extern function copy_function(function);
extern void free_function(function);
extern function check_function(function);
extern bool function_consistent_p(function);
extern bool function_defined_p(function);
#define gen_FUNCTION_cons gen_function_cons
extern list gen_function_cons(function, list);
extern void function_assign_contents(function, function);
extern void function_non_recursive_free(function);
extern void write_function(FILE*, function);
extern function read_function(FILE*);
extern function make_function(entity, list);

struct _newgen_struct_function_ {
  intptr_t _type_;
  entity _function_op_; /* op:entity */
  list _function_args_; /* args:entity* */
};

#define function_domain_number(x) ((x)->_type_)
#define function_op_(x) function_op(x) /* old hack compatible */
#define function_op(x) ((x)->_function_op_)
#define function_args_(x) function_args(x) /* old hack compatible */
#define function_args(x) ((x)->_function_args_)

/* LEXPRESSIONWITHLEVEL
 */
#define LEXPRESSIONWITHLEVEL(x) ((lexpressionwithlevel)((x).p))
#define lexpressionwithlevel_CAST(x) LEXPRESSIONWITHLEVEL(x)
#define LEXPRESSIONWITHLEVEL_CAST(x) LEXPRESSIONWITHLEVEL(x)
#define LEXPRESSIONWITHLEVEL_(x) ((x).e)
#define LEXPRESSIONWITHLEVEL_TYPE lexpressionwithlevel
#define lexpressionwithlevel_TYPE lexpressionwithlevel
#define lexpressionwithlevel_undefined ((lexpressionwithlevel)gen_chunk_undefined)
#define lexpressionwithlevel_undefined_p(x) ((x)==lexpressionwithlevel_undefined)

extern lexpressionwithlevel copy_lexpressionwithlevel(lexpressionwithlevel);
extern void free_lexpressionwithlevel(lexpressionwithlevel);
extern lexpressionwithlevel check_lexpressionwithlevel(lexpressionwithlevel);
extern bool lexpressionwithlevel_consistent_p(lexpressionwithlevel);
extern bool lexpressionwithlevel_defined_p(lexpressionwithlevel);
#define gen_LEXPRESSIONWITHLEVEL_cons gen_lexpressionwithlevel_cons
extern list gen_lexpressionwithlevel_cons(lexpressionwithlevel, list);
extern void lexpressionwithlevel_assign_contents(lexpressionwithlevel, lexpressionwithlevel);
extern void lexpressionwithlevel_non_recursive_free(lexpressionwithlevel);
extern void write_lexpressionwithlevel(FILE*, lexpressionwithlevel);
extern lexpressionwithlevel read_lexpressionwithlevel(FILE*);
extern lexpressionwithlevel make_lexpressionwithlevel(list);

struct _newgen_struct_lexpressionwithlevel_ {
  intptr_t _type_;
  list _lexpressionwithlevel_holder_;
};

#define lexpressionwithlevel_domain_number(x) ((x)->_type_)
#define lexpressionwithlevel_list(x) ((x)->_lexpressionwithlevel_holder_)

/* PERSISTANT_EXPRESSION_TO_ENTITY
 */
#define PERSISTANT_EXPRESSION_TO_ENTITY(x) ((persistant_expression_to_entity)((x).p))
#define persistant_expression_to_entity_CAST(x) PERSISTANT_EXPRESSION_TO_ENTITY(x)
#define PERSISTANT_EXPRESSION_TO_ENTITY_CAST(x) PERSISTANT_EXPRESSION_TO_ENTITY(x)
#define PERSISTANT_EXPRESSION_TO_ENTITY_(x) ((x).e)
#define PERSISTANT_EXPRESSION_TO_ENTITY_TYPE persistant_expression_to_entity
#define persistant_expression_to_entity_TYPE persistant_expression_to_entity
#define persistant_expression_to_entity_undefined ((persistant_expression_to_entity)gen_chunk_undefined)
#define persistant_expression_to_entity_undefined_p(x) ((x)==persistant_expression_to_entity_undefined)

extern persistant_expression_to_entity copy_persistant_expression_to_entity(persistant_expression_to_entity);
extern void free_persistant_expression_to_entity(persistant_expression_to_entity);
extern persistant_expression_to_entity check_persistant_expression_to_entity(persistant_expression_to_entity);
extern bool persistant_expression_to_entity_consistent_p(persistant_expression_to_entity);
extern bool persistant_expression_to_entity_defined_p(persistant_expression_to_entity);
#define gen_PERSISTANT_EXPRESSION_TO_ENTITY_cons gen_persistant_expression_to_entity_cons
extern list gen_persistant_expression_to_entity_cons(persistant_expression_to_entity, list);
extern void persistant_expression_to_entity_assign_contents(persistant_expression_to_entity, persistant_expression_to_entity);
extern void persistant_expression_to_entity_non_recursive_free(persistant_expression_to_entity);
extern void write_persistant_expression_to_entity(FILE*, persistant_expression_to_entity);
extern persistant_expression_to_entity read_persistant_expression_to_entity(FILE*);
extern persistant_expression_to_entity make_persistant_expression_to_entity(void);

struct _newgen_struct_persistant_expression_to_entity_ {
  intptr_t _type_;
  hash_table _persistant_expression_to_entity_holder_;
};

#define persistant_expression_to_entity_domain_number(x) ((x)->_type_)
#define persistant_expression_to_entity_hash_table(x) ((x)->_persistant_expression_to_entity_holder_)
#define persistant_expression_to_entity_key_type expression
#define persistant_expression_to_entity_value_type entity
#define PERSISTANT_EXPRESSION_TO_ENTITY_MAP(k,v,c,f) FUNCTION_MAP(persistant_expression_to_entity,p,p,k,v,c,f)
#define PERSISTANT_EXPRESSION_TO_ENTITY_FOREACH(k,v,f) FUNCTION_FOREACH(persistant_expression_to_entity,p,p,k,v,f)
extern entity apply_persistant_expression_to_entity(persistant_expression_to_entity, expression);
extern void update_persistant_expression_to_entity(persistant_expression_to_entity, expression, entity);
extern void extend_persistant_expression_to_entity(persistant_expression_to_entity, expression, entity);
extern entity delete_persistant_expression_to_entity(persistant_expression_to_entity, expression);
extern bool bound_persistant_expression_to_entity_p(persistant_expression_to_entity, expression);

#define eole_private_spec "\
--NEWGEN-START 124\n\
import expression from \"ri.newgen\";\n\
import entity from \"ri.newgen\";\n\
assignment = lhs:function x rhs:function x dependences:entity*;\n\
expressionwithlevel = level:entity* x expression:expression;\n\
function = op:entity x args:entity*;\n\
lexpressionwithlevel = list:expressionwithlevel*;\n\
persistant_expression_to_entity = persistant expression:expression -> entity:entity;\n\
"
#endif

--	   --------------------------------------------------------
--	   --------------------------------------------------------
--
--				    WARNING
--
--		  THIS FILE HAS BEEN AUTOMATICALLY GENERATED
--
--			       DO NOT MODIFY IT
--
--	   --------------------------------------------------------
--	   --------------------------------------------------------

-- Imported domains
-- ----------------

-- External domains
-- ----------------
external Pvecteur ;
external Psysteme ;

-- Domains
-- -------
application = function:expression x arguments:expression* ;
area = size:int x layout:entity* ;
basic = int:int + float:int + logical:int + overloaded:unit + complex:int + string:value + bit:symbolic + pointer:type + derived:entity + typedef:entity ;
callees = callees:string* ;
call = function:entity x arguments:expression* ;
cast = type x expression ;
code = declarations:entity* x decls_text:string x initializations:sequence x externs:entity* x language ;
constant = int + float:float + logical:int + litteral:unit + call:entity + unknown:unit ;
controlmap = persistant statement->control ;
control = statement x predecessors:control* x successors:control* ;
dimension = lower:expression x upper:expression x qualifiers:qualifier* ;
dummy = unknown:unit + identifier:entity ;
entity_int = entity->int ;
evaluation = before:unit + after:unit ;
execution = sequential:unit + parallel:unit ;
expression = syntax x normalized ;
extension = pragma + unknown:unit ;
extensions = extension* ;
forloop = initialization:expression x condition:expression x increment:expression x body:statement ;
formal = function:entity x offset:int ;
functional = parameters:parameter* x result:type ;
instruction = sequence + test + loop + whileloop + goto:statement + call + unstructured + multitest + forloop  + expression ;
language = fortran:unit + c:unit + fortran95:unit + unknown:unit  ;
loop = index:entity x range x body:statement x label:entity x execution x locals:entity* ;
mode = value:unit + reference:unit ;
multitest = controller:expression x body:statement ;
normalized = linear:Pvecteur + complex:unit ;
parameter = type x mode x dummy ;
persistant_statement_to_cluster = statement:int -> number:int ;
persistant_statement_to_control = persistant statement -> persistant control ;
persistant_statement_to_int = persistant statement -> int ;
persistant_statement_to_statement = persistant statement -> persistant statement ;
pragma = string + expression* ;
predicate = system:Psysteme ;
preference = persistant reference ;
qualifier = const:unit + restrict:unit + volatile:unit + register:unit + auto:unit + thread:unit + asm:string + static_dimension:unit + local:unit + global:unit + constant:unit + private:unit ;
ram = function:entity x section:entity x offset:int x shared:entity* ;
range = lower:expression x upper:expression x increment:expression ;
reference = variable:entity x indices:expression* ;
sequence = statements:statement* ;
sizeofexpression = type + expression ;
statement = label:entity x number:int x ordering:int x comments:string x instruction x declarations:entity* x decls_text:string x extensions x synchronization  ;
storage = return:entity + ram + formal + rom:unit ;
subscript = array:expression x indices:expression* ;
symbolic = expression x constant ;
synchronization = none:unit + spawn:entity + barrier:unit + single:bool + critical:reference ;
syntax = reference + range + call + cast + sizeofexpression + subscript + application + va_arg:sizeofexpression* ;
tabulated entity = name:string x type x storage x initial:value x kind:int ;
test = condition:expression x true:statement x false:statement ;
transformer = arguments:entity* x relation:predicate ;
type = statement:unit + area + variable + functional + varargs:type + unknown:unit + void:qualifier* + struct:entity* + union:entity* + enum:entity* ;
unstructured = entry:control x exit:control ;
value = code + symbolic + constant + intrinsic:unit + unknown:unit + expression ;
variable = basic x dimensions:dimension* x qualifiers:qualifier* ;
whileloop = condition:expression x body:statement x label:entity x evaluation ;

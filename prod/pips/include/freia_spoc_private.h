#ifndef _newgen_freia_spoc_private_included
#define _newgen_freia_spoc_private_included
#define _gen_freia_spoc_private_start 120
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_entity_domain_defined_)
#define _newgen_entity_domain_defined_
#define ENTITY_NEWGEN_DOMAIN (entity_domain)
#define entity_NEWGEN_DOMAIN (entity_domain)
typedef struct _newgen_struct_entity_ * entity;
#endif /* _newgen_entity_domain_defined_ */

#if !defined(_newgen_statement_domain_defined_)
#define _newgen_statement_domain_defined_
#define STATEMENT_NEWGEN_DOMAIN (statement_domain)
#define statement_NEWGEN_DOMAIN (statement_domain)
typedef struct _newgen_struct_statement_ * statement;
#endif /* _newgen_statement_domain_defined_ */

#define dag_domain (_gen_freia_spoc_private_start+0)
#if !defined(_newgen_dag_domain_defined_)
#define _newgen_dag_domain_defined_
#define DAG_NEWGEN_DOMAIN (dag_domain)
#define dag_NEWGEN_DOMAIN (dag_domain)
typedef struct _newgen_struct_dag_ * dag;
#endif /* _newgen_dag_domain_defined_ */

#define dagvtx_domain (_gen_freia_spoc_private_start+1)
#if !defined(_newgen_dagvtx_domain_defined_)
#define _newgen_dagvtx_domain_defined_
#define DAGVTX_NEWGEN_DOMAIN (dagvtx_domain)
#define dagvtx_NEWGEN_DOMAIN (dagvtx_domain)
typedef struct _newgen_struct_dagvtx_ * dagvtx;
#endif /* _newgen_dagvtx_domain_defined_ */

#define pstatement_domain (_gen_freia_spoc_private_start+2)
#if !defined(_newgen_pstatement_domain_defined_)
#define _newgen_pstatement_domain_defined_
#define PSTATEMENT_NEWGEN_DOMAIN (pstatement_domain)
#define pstatement_NEWGEN_DOMAIN (pstatement_domain)
typedef struct _newgen_struct_pstatement_ * pstatement;
#endif /* _newgen_pstatement_domain_defined_ */

#define vtxcontent_domain (_gen_freia_spoc_private_start+3)
#if !defined(_newgen_vtxcontent_domain_defined_)
#define _newgen_vtxcontent_domain_defined_
#define VTXCONTENT_NEWGEN_DOMAIN (vtxcontent_domain)
#define vtxcontent_NEWGEN_DOMAIN (vtxcontent_domain)
typedef struct _newgen_struct_vtxcontent_ * vtxcontent;
#endif /* _newgen_vtxcontent_domain_defined_ */

/* DAG
 */
#define DAG(x) ((dag)((x).p))
#define dag_CAST(x) DAG(x)
#define DAG_CAST(x) DAG(x)
#define DAG_(x) ((x).e)
#define DAG_TYPE dag
#define dag_TYPE dag
#define dag_undefined ((dag)gen_chunk_undefined)
#define dag_undefined_p(x) ((x)==dag_undefined)

extern dag copy_dag(dag);
extern void free_dag(dag);
extern dag check_dag(dag);
extern bool dag_consistent_p(dag);
extern bool dag_defined_p(dag);
#define gen_DAG_cons gen_dag_cons
extern list gen_dag_cons(dag, list);
extern void dag_assign_contents(dag, dag);
extern void dag_non_recursive_free(dag);
extern void write_dag(FILE*, dag);
extern dag read_dag(FILE*);
extern dag make_dag(list, list, list);

struct _newgen_struct_dag_ {
  intptr_t _type_;
  list _dag_inputs_; /* inputs:dagvtx* */
  list _dag_outputs_; /* outputs:dagvtx* */
  list _dag_vertices_; /* vertices:dagvtx* */
};

#define dag_domain_number(x) ((x)->_type_)
#define dag_inputs_(x) dag_inputs(x) /* old hack compatible */
#define dag_inputs(x) ((x)->_dag_inputs_)
#define dag_outputs_(x) dag_outputs(x) /* old hack compatible */
#define dag_outputs(x) ((x)->_dag_outputs_)
#define dag_vertices_(x) dag_vertices(x) /* old hack compatible */
#define dag_vertices(x) ((x)->_dag_vertices_)

/* DAGVTX
 */
#define DAGVTX(x) ((dagvtx)((x).p))
#define dagvtx_CAST(x) DAGVTX(x)
#define DAGVTX_CAST(x) DAGVTX(x)
#define DAGVTX_(x) ((x).e)
#define DAGVTX_TYPE dagvtx
#define dagvtx_TYPE dagvtx
#define dagvtx_undefined ((dagvtx)gen_chunk_undefined)
#define dagvtx_undefined_p(x) ((x)==dagvtx_undefined)

extern dagvtx copy_dagvtx(dagvtx);
extern void free_dagvtx(dagvtx);
extern dagvtx check_dagvtx(dagvtx);
extern bool dagvtx_consistent_p(dagvtx);
extern bool dagvtx_defined_p(dagvtx);
#define gen_DAGVTX_cons gen_dagvtx_cons
extern list gen_dagvtx_cons(dagvtx, list);
extern void dagvtx_assign_contents(dagvtx, dagvtx);
extern void dagvtx_non_recursive_free(dagvtx);
extern void write_dagvtx(FILE*, dagvtx);
extern dagvtx read_dagvtx(FILE*);
extern dagvtx make_dagvtx(vtxcontent, list);

struct _newgen_struct_dagvtx_ {
  intptr_t _type_;
  vtxcontent _dagvtx_content_; /* content:vtxcontent */
  list _dagvtx_succs_; /* succs:dagvtx* */
};

#define dagvtx_domain_number(x) ((x)->_type_)
#define dagvtx_content_(x) dagvtx_content(x) /* old hack compatible */
#define dagvtx_content(x) ((x)->_dagvtx_content_)
#define dagvtx_succs_(x) dagvtx_succs(x) /* old hack compatible */
#define dagvtx_succs(x) ((x)->_dagvtx_succs_)

/* PSTATEMENT
 */
#define PSTATEMENT(x) ((pstatement)((x).p))
#define pstatement_CAST(x) PSTATEMENT(x)
#define PSTATEMENT_CAST(x) PSTATEMENT(x)
#define PSTATEMENT_(x) ((x).e)
#define PSTATEMENT_TYPE pstatement
#define pstatement_TYPE pstatement
#define pstatement_undefined ((pstatement)gen_chunk_undefined)
#define pstatement_undefined_p(x) ((x)==pstatement_undefined)

extern pstatement copy_pstatement(pstatement);
extern void free_pstatement(pstatement);
extern pstatement check_pstatement(pstatement);
extern bool pstatement_consistent_p(pstatement);
extern bool pstatement_defined_p(pstatement);
#define gen_PSTATEMENT_cons gen_pstatement_cons
extern list gen_pstatement_cons(pstatement, list);
extern void pstatement_assign_contents(pstatement, pstatement);
extern void pstatement_non_recursive_free(pstatement);
extern void write_pstatement(FILE*, pstatement);
extern pstatement read_pstatement(FILE*);
enum pstatement_utype {
  is_pstatement_statement,
  is_pstatement_empty
};
extern string pstatement_tag_as_string(enum pstatement_utype);
extern pstatement make_pstatement(enum pstatement_utype, void *);
extern pstatement make_pstatement_statement(statement);
extern pstatement make_pstatement_empty(void);

struct _newgen_struct_pstatement_ {
  intptr_t _type_;
  enum pstatement_utype _pstatement_tag__;
  union {
    statement _pstatement_statement_; /* statement:statement */
    gen_chunk _pstatement_empty_; /* empty:unit */
  } _pstatement_union_;
};

#define pstatement_domain_number(x) ((x)->_type_)
#define pstatement_tag(x) ((x)->_pstatement_tag__)
#define pstatement_statement_p(x) (pstatement_tag(x)==is_pstatement_statement)
#define pstatement_statement_(x) pstatement_statement(x) /* old hack compatible */
#define pstatement_statement(x) ((x)->_pstatement_union_._pstatement_statement_)
#define pstatement_empty_p(x) (pstatement_tag(x)==is_pstatement_empty)
#define pstatement_empty_(x) pstatement_empty(x) /* old hack compatible */
#define pstatement_empty(x) ((x)->_pstatement_union_._pstatement_empty_.u)

/* VTXCONTENT
 */
#define VTXCONTENT(x) ((vtxcontent)((x).p))
#define vtxcontent_CAST(x) VTXCONTENT(x)
#define VTXCONTENT_CAST(x) VTXCONTENT(x)
#define VTXCONTENT_(x) ((x).e)
#define VTXCONTENT_TYPE vtxcontent
#define vtxcontent_TYPE vtxcontent
#define vtxcontent_undefined ((vtxcontent)gen_chunk_undefined)
#define vtxcontent_undefined_p(x) ((x)==vtxcontent_undefined)

extern vtxcontent copy_vtxcontent(vtxcontent);
extern void free_vtxcontent(vtxcontent);
extern vtxcontent check_vtxcontent(vtxcontent);
extern bool vtxcontent_consistent_p(vtxcontent);
extern bool vtxcontent_defined_p(vtxcontent);
#define gen_VTXCONTENT_cons gen_vtxcontent_cons
extern list gen_vtxcontent_cons(vtxcontent, list);
extern void vtxcontent_assign_contents(vtxcontent, vtxcontent);
extern void vtxcontent_non_recursive_free(vtxcontent);
extern void write_vtxcontent(FILE*, vtxcontent);
extern vtxcontent read_vtxcontent(FILE*);
extern vtxcontent make_vtxcontent(intptr_t, intptr_t, pstatement, list, entity);

struct _newgen_struct_vtxcontent_ {
  intptr_t _type_;
  intptr_t _vtxcontent_optype_; /* optype:int */
  intptr_t _vtxcontent_opid_; /* opid:int */
  pstatement _vtxcontent_source_; /* source:pstatement */
  list _vtxcontent_inputs_; /* inputs:entity* */
  entity _vtxcontent_out_; /* out:entity */
};

#define vtxcontent_domain_number(x) ((x)->_type_)
#define vtxcontent_optype_(x) vtxcontent_optype(x) /* old hack compatible */
#define vtxcontent_optype(x) ((x)->_vtxcontent_optype_)
#define vtxcontent_opid_(x) vtxcontent_opid(x) /* old hack compatible */
#define vtxcontent_opid(x) ((x)->_vtxcontent_opid_)
#define vtxcontent_source_(x) vtxcontent_source(x) /* old hack compatible */
#define vtxcontent_source(x) ((x)->_vtxcontent_source_)
#define vtxcontent_inputs_(x) vtxcontent_inputs(x) /* old hack compatible */
#define vtxcontent_inputs(x) ((x)->_vtxcontent_inputs_)
#define vtxcontent_out_(x) vtxcontent_out(x) /* old hack compatible */
#define vtxcontent_out(x) ((x)->_vtxcontent_out_)

#define freia_spoc_private_spec "\
--NEWGEN-START 120\n\
import entity from \"ri.newgen\";\n\
import statement from \"ri.newgen\";\n\
dag = inputs:dagvtx* x outputs:dagvtx* x vertices:dagvtx*;\n\
dagvtx = content:vtxcontent x succs:dagvtx*;\n\
pstatement = persistant statement:statement + empty:unit;\n\
vtxcontent = optype:int x opid:int x source:pstatement x inputs:entity* x out:entity;\n\
"
#endif

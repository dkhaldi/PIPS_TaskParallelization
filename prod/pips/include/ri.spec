--NEWGEN-START 27
external Pvecteur;
external Psysteme;
application = function:expression x arguments:expression*;
area = size:int x layout:entity*;
basic = int:int + float:int + logical:int + overloaded:unit + complex:int + string:value + bit:symbolic + pointer:type + derived:entity + typedef:entity;
callees = callees:string*;
call = function:entity x arguments:expression*;
cast = type:type x expression:expression;
code = declarations:entity* x decls_text:string x initializations:sequence x externs:entity* x language:language;
constant = int:int + float:float + logical:int + litteral:unit + call:entity + unknown:unit;
controlmap = persistant statement:statement -> control:control;
control = statement:statement x predecessors:control* x successors:control*;
dimension = lower:expression x upper:expression x qualifiers:qualifier*;
dummy = unknown:unit + identifier:entity;
entity_int = entity:entity -> int:int;
evaluation = before:unit + after:unit;
execution = sequential:unit + parallel:unit;
expression = syntax:syntax x normalized:normalized;
extension = pragma:pragma + unknown:unit;
extensions = extension:extension*;
forloop = initialization:expression x condition:expression x increment:expression x body:statement;
formal = function:entity x offset:int;
functional = parameters:parameter* x result:type;
instruction = sequence:sequence + test:test + loop:loop + whileloop:whileloop + goto:statement + call:call + unstructured:unstructured + multitest:multitest + forloop:forloop + expression:expression;
language = fortran:unit + c:unit + fortran95:unit + unknown:unit;
loop = index:entity x range:range x body:statement x label:entity x execution:execution x locals:entity*;
mode = value:unit + reference:unit;
multitest = controller:expression x body:statement;
normalized = linear:Pvecteur + complex:unit;
parameter = type:type x mode:mode x dummy:dummy;
persistant_statement_to_cluster = statement:int -> number:int;
persistant_statement_to_control = persistant statement:statement -> persistant control:control;
persistant_statement_to_int = persistant statement:statement -> int:int;
persistant_statement_to_statement = persistant statement:statement -> persistant statement:statement;
pragma = string:string + expression:expression*;
predicate = system:Psysteme;
preference = persistant reference:reference;
qualifier = const:unit + restrict:unit + volatile:unit + register:unit + auto:unit + thread:unit + asm:string + static_dimension:unit + local:unit + global:unit + constant:unit + private:unit;
ram = function:entity x section:entity x offset:int x shared:entity*;
range = lower:expression x upper:expression x increment:expression;
reference = variable:entity x indices:expression*;
sequence = statements:statement*;
sizeofexpression = type:type + expression:expression;
statement = label:entity x number:int x ordering:int x comments:string x instruction:instruction x declarations:entity* x decls_text:string x extensions:extensions x synchronization:synchronization;
storage = return:entity + ram:ram + formal:formal + rom:unit;
subscript = array:expression x indices:expression*;
symbolic = expression:expression x constant:constant;
synchronization = none:unit + spawn:entity + barrier:unit + single:bool + critical:reference;
syntax = reference:reference + range:range + call:call + cast:cast + sizeofexpression:sizeofexpression + subscript:subscript + application:application + va_arg:sizeofexpression*;
tabulated entity = name:string x type:type x storage:storage x initial:value x kind:int;
test = condition:expression x true:statement x false:statement;
transformer = arguments:entity* x relation:predicate;
type = statement:unit + area:area + variable:variable + functional:functional + varargs:type + unknown:unit + void:qualifier* + struct:entity* + union:entity* + enum:entity*;
unstructured = entry:control x exit:control;
value = code:code + symbolic:symbolic + constant:constant + intrinsic:unit + unknown:unit + expression:expression;
variable = basic:basic x dimensions:dimension* x qualifiers:qualifier*;
whileloop = condition:expression x body:statement x label:entity x evaluation:evaluation;

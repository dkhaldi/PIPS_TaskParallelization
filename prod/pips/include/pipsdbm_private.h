#ifndef _newgen_pipsdbm_private_included
#define _newgen_pipsdbm_private_included
#define _gen_pipsdbm_private_start 20
/*
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY NEWGEN.
 *
 * PLEASE DO NOT MODIFY IT.
 */

#if !defined(_newgen_db_void_domain_defined_)
#define _newgen_db_void_domain_defined_
#define newgen_db_void(p) (p) /* old hack compatible */
#define DB_VOID_NEWGEN_EXTERNAL (_gen_pipsdbm_private_start+0)
#define DB_VOID_NEWGEN_DOMAIN (DB_VOID_NEWGEN_EXTERNAL)
#define db_void_NEWGEN_DOMAIN (DB_VOID_NEWGEN_EXTERNAL)
#endif /* _newgen_db_void_domain_defined_ */

#define db_owned_resources_domain (_gen_pipsdbm_private_start+1)
#if !defined(_newgen_db_owned_resources_domain_defined_)
#define _newgen_db_owned_resources_domain_defined_
#define DB_OWNED_RESOURCES_NEWGEN_DOMAIN (db_owned_resources_domain)
#define db_owned_resources_NEWGEN_DOMAIN (db_owned_resources_domain)
typedef struct _newgen_struct_db_owned_resources_ * db_owned_resources;
#endif /* _newgen_db_owned_resources_domain_defined_ */

#define db_resource_domain (_gen_pipsdbm_private_start+2)
#if !defined(_newgen_db_resource_domain_defined_)
#define _newgen_db_resource_domain_defined_
#define DB_RESOURCE_NEWGEN_DOMAIN (db_resource_domain)
#define db_resource_NEWGEN_DOMAIN (db_resource_domain)
typedef struct _newgen_struct_db_resource_ * db_resource;
#endif /* _newgen_db_resource_domain_defined_ */

#define db_resources_domain (_gen_pipsdbm_private_start+3)
#if !defined(_newgen_db_resources_domain_defined_)
#define _newgen_db_resources_domain_defined_
#define DB_RESOURCES_NEWGEN_DOMAIN (db_resources_domain)
#define db_resources_NEWGEN_DOMAIN (db_resources_domain)
typedef struct _newgen_struct_db_resources_ * db_resources;
#endif /* _newgen_db_resources_domain_defined_ */

#define db_status_domain (_gen_pipsdbm_private_start+4)
#if !defined(_newgen_db_status_domain_defined_)
#define _newgen_db_status_domain_defined_
#define DB_STATUS_NEWGEN_DOMAIN (db_status_domain)
#define db_status_NEWGEN_DOMAIN (db_status_domain)
typedef struct _newgen_struct_db_status_ * db_status;
#endif /* _newgen_db_status_domain_defined_ */

#define db_symbol_domain (_gen_pipsdbm_private_start+5)
#if !defined(_newgen_db_symbol_domain_defined_)
#define _newgen_db_symbol_domain_defined_
#define DB_SYMBOL_NEWGEN_DOMAIN (db_symbol_domain)
#define db_symbol_NEWGEN_DOMAIN (db_symbol_domain)
typedef struct _newgen_struct_db_symbol_ * db_symbol;
#endif /* _newgen_db_symbol_domain_defined_ */


/* DB_OWNED_RESOURCES
 */
#define DB_OWNED_RESOURCES(x) ((db_owned_resources)((x).p))
#define db_owned_resources_CAST(x) DB_OWNED_RESOURCES(x)
#define DB_OWNED_RESOURCES_CAST(x) DB_OWNED_RESOURCES(x)
#define DB_OWNED_RESOURCES_(x) ((x).e)
#define DB_OWNED_RESOURCES_TYPE db_owned_resources
#define db_owned_resources_TYPE db_owned_resources
#define db_owned_resources_undefined ((db_owned_resources)gen_chunk_undefined)
#define db_owned_resources_undefined_p(x) ((x)==db_owned_resources_undefined)

extern db_owned_resources copy_db_owned_resources(db_owned_resources);
extern void free_db_owned_resources(db_owned_resources);
extern db_owned_resources check_db_owned_resources(db_owned_resources);
extern bool db_owned_resources_consistent_p(db_owned_resources);
extern bool db_owned_resources_defined_p(db_owned_resources);
#define gen_DB_OWNED_RESOURCES_cons gen_db_owned_resources_cons
extern list gen_db_owned_resources_cons(db_owned_resources, list);
extern void db_owned_resources_assign_contents(db_owned_resources, db_owned_resources);
extern void db_owned_resources_non_recursive_free(db_owned_resources);
extern void write_db_owned_resources(FILE*, db_owned_resources);
extern db_owned_resources read_db_owned_resources(FILE*);
extern db_owned_resources make_db_owned_resources(void);

struct _newgen_struct_db_owned_resources_ {
  intptr_t _type_;
  hash_table _db_owned_resources_holder_;
};

#define db_owned_resources_domain_number(x) ((x)->_type_)
#define db_owned_resources_hash_table(x) ((x)->_db_owned_resources_holder_)
#define db_owned_resources_key_type db_symbol
#define db_owned_resources_value_type db_resource
#define DB_OWNED_RESOURCES_MAP(k,v,c,f) FUNCTION_MAP(db_owned_resources,p,p,k,v,c,f)
#define DB_OWNED_RESOURCES_FOREACH(k,v,f) FUNCTION_FOREACH(db_owned_resources,p,p,k,v,f)
extern db_resource apply_db_owned_resources(db_owned_resources, db_symbol);
extern void update_db_owned_resources(db_owned_resources, db_symbol, db_resource);
extern void extend_db_owned_resources(db_owned_resources, db_symbol, db_resource);
extern db_resource delete_db_owned_resources(db_owned_resources, db_symbol);
extern bool bound_db_owned_resources_p(db_owned_resources, db_symbol);

/* DB_RESOURCE
 */
#define DB_RESOURCE(x) ((db_resource)((x).p))
#define db_resource_CAST(x) DB_RESOURCE(x)
#define DB_RESOURCE_CAST(x) DB_RESOURCE(x)
#define DB_RESOURCE_(x) ((x).e)
#define DB_RESOURCE_TYPE db_resource
#define db_resource_TYPE db_resource
#define db_resource_undefined ((db_resource)gen_chunk_undefined)
#define db_resource_undefined_p(x) ((x)==db_resource_undefined)

extern db_resource copy_db_resource(db_resource);
extern void free_db_resource(db_resource);
extern db_resource check_db_resource(db_resource);
extern bool db_resource_consistent_p(db_resource);
extern bool db_resource_defined_p(db_resource);
#define gen_DB_RESOURCE_cons gen_db_resource_cons
extern list gen_db_resource_cons(db_resource, list);
extern void db_resource_assign_contents(db_resource, db_resource);
extern void db_resource_non_recursive_free(db_resource);
extern void write_db_resource(FILE*, db_resource);
extern db_resource read_db_resource(FILE*);
extern db_resource make_db_resource(db_void, db_status, intptr_t, intptr_t);

struct _newgen_struct_db_resource_ {
  intptr_t _type_;
  db_void _db_resource_pointer_; /* pointer:db_void */
  db_status _db_resource_db_status_; /* db_status:db_status */
  intptr_t _db_resource_time_; /* time:int */
  intptr_t _db_resource_file_time_; /* file_time:int */
};

#define db_resource_domain_number(x) ((x)->_type_)
#define db_resource_pointer_(x) db_resource_pointer(x) /* old hack compatible */
#define db_resource_pointer(x) ((x)->_db_resource_pointer_)
#define db_resource_db_status_(x) db_resource_db_status(x) /* old hack compatible */
#define db_resource_db_status(x) ((x)->_db_resource_db_status_)
#define db_resource_time_(x) db_resource_time(x) /* old hack compatible */
#define db_resource_time(x) ((x)->_db_resource_time_)
#define db_resource_file_time_(x) db_resource_file_time(x) /* old hack compatible */
#define db_resource_file_time(x) ((x)->_db_resource_file_time_)

/* DB_RESOURCES
 */
#define DB_RESOURCES(x) ((db_resources)((x).p))
#define db_resources_CAST(x) DB_RESOURCES(x)
#define DB_RESOURCES_CAST(x) DB_RESOURCES(x)
#define DB_RESOURCES_(x) ((x).e)
#define DB_RESOURCES_TYPE db_resources
#define db_resources_TYPE db_resources
#define db_resources_undefined ((db_resources)gen_chunk_undefined)
#define db_resources_undefined_p(x) ((x)==db_resources_undefined)

extern db_resources copy_db_resources(db_resources);
extern void free_db_resources(db_resources);
extern db_resources check_db_resources(db_resources);
extern bool db_resources_consistent_p(db_resources);
extern bool db_resources_defined_p(db_resources);
#define gen_DB_RESOURCES_cons gen_db_resources_cons
extern list gen_db_resources_cons(db_resources, list);
extern void db_resources_assign_contents(db_resources, db_resources);
extern void db_resources_non_recursive_free(db_resources);
extern void write_db_resources(FILE*, db_resources);
extern db_resources read_db_resources(FILE*);
extern db_resources make_db_resources(void);

struct _newgen_struct_db_resources_ {
  intptr_t _type_;
  hash_table _db_resources_holder_;
};

#define db_resources_domain_number(x) ((x)->_type_)
#define db_resources_hash_table(x) ((x)->_db_resources_holder_)
#define db_resources_key_type db_symbol
#define db_resources_value_type db_owned_resources
#define DB_RESOURCES_MAP(k,v,c,f) FUNCTION_MAP(db_resources,p,p,k,v,c,f)
#define DB_RESOURCES_FOREACH(k,v,f) FUNCTION_FOREACH(db_resources,p,p,k,v,f)
extern db_owned_resources apply_db_resources(db_resources, db_symbol);
extern void update_db_resources(db_resources, db_symbol, db_owned_resources);
extern void extend_db_resources(db_resources, db_symbol, db_owned_resources);
extern db_owned_resources delete_db_resources(db_resources, db_symbol);
extern bool bound_db_resources_p(db_resources, db_symbol);

/* DB_STATUS
 */
#define DB_STATUS(x) ((db_status)((x).p))
#define db_status_CAST(x) DB_STATUS(x)
#define DB_STATUS_CAST(x) DB_STATUS(x)
#define DB_STATUS_(x) ((x).e)
#define DB_STATUS_TYPE db_status
#define db_status_TYPE db_status
#define db_status_undefined ((db_status)gen_chunk_undefined)
#define db_status_undefined_p(x) ((x)==db_status_undefined)

extern db_status copy_db_status(db_status);
extern void free_db_status(db_status);
extern db_status check_db_status(db_status);
extern bool db_status_consistent_p(db_status);
extern bool db_status_defined_p(db_status);
#define gen_DB_STATUS_cons gen_db_status_cons
extern list gen_db_status_cons(db_status, list);
extern void db_status_assign_contents(db_status, db_status);
extern void db_status_non_recursive_free(db_status);
extern void write_db_status(FILE*, db_status);
extern db_status read_db_status(FILE*);
enum db_status_utype {
  is_db_status_loaded,
  is_db_status_stored,
  is_db_status_required,
  is_db_status_loaded_and_stored
};
extern string db_status_tag_as_string(enum db_status_utype);
extern db_status make_db_status(enum db_status_utype, void *);
extern db_status make_db_status_loaded(void);
extern db_status make_db_status_stored(void);
extern db_status make_db_status_required(void);
extern db_status make_db_status_loaded_and_stored(void);

struct _newgen_struct_db_status_ {
  intptr_t _type_;
  enum db_status_utype _db_status_tag__;
  union {
    gen_chunk _db_status_loaded_; /* loaded:unit */
    gen_chunk _db_status_stored_; /* stored:unit */
    gen_chunk _db_status_required_; /* required:unit */
    gen_chunk _db_status_loaded_and_stored_; /* loaded_and_stored:unit */
  } _db_status_union_;
};

#define db_status_domain_number(x) ((x)->_type_)
#define db_status_tag(x) ((x)->_db_status_tag__)
#define db_status_loaded_p(x) (db_status_tag(x)==is_db_status_loaded)
#define db_status_loaded_(x) db_status_loaded(x) /* old hack compatible */
#define db_status_loaded(x) ((x)->_db_status_union_._db_status_loaded_.u)
#define db_status_stored_p(x) (db_status_tag(x)==is_db_status_stored)
#define db_status_stored_(x) db_status_stored(x) /* old hack compatible */
#define db_status_stored(x) ((x)->_db_status_union_._db_status_stored_.u)
#define db_status_required_p(x) (db_status_tag(x)==is_db_status_required)
#define db_status_required_(x) db_status_required(x) /* old hack compatible */
#define db_status_required(x) ((x)->_db_status_union_._db_status_required_.u)
#define db_status_loaded_and_stored_p(x) (db_status_tag(x)==is_db_status_loaded_and_stored)
#define db_status_loaded_and_stored_(x) db_status_loaded_and_stored(x) /* old hack compatible */
#define db_status_loaded_and_stored(x) ((x)->_db_status_union_._db_status_loaded_and_stored_.u)

/* DB_SYMBOL
 */
#define DB_SYMBOL(x) ((db_symbol)((x).p))
#define db_symbol_CAST(x) DB_SYMBOL(x)
#define DB_SYMBOL_CAST(x) DB_SYMBOL(x)
#define DB_SYMBOL_(x) ((x).e)
#define DB_SYMBOL_TYPE db_symbol
#define db_symbol_TYPE db_symbol
#define db_symbol_undefined ((db_symbol)gen_chunk_undefined)
#define db_symbol_undefined_p(x) ((x)==db_symbol_undefined)

extern db_symbol copy_db_symbol(db_symbol);
extern void free_db_symbol(db_symbol);
extern db_symbol check_db_symbol(db_symbol);
extern bool db_symbol_consistent_p(db_symbol);
extern bool db_symbol_defined_p(db_symbol);
#define gen_DB_SYMBOL_cons gen_db_symbol_cons
extern list gen_db_symbol_cons(db_symbol, list);
extern void db_symbol_assign_contents(db_symbol, db_symbol);
extern void db_symbol_non_recursive_free(db_symbol);
extern db_symbol gen_find_db_symbol(char *);
extern void write_tabulated_db_symbol(FILE *);
extern void read_tabulated_db_symbol(FILE *);
extern db_symbol make_db_symbol(string);

struct _newgen_struct_db_symbol_ {
  intptr_t _type_;
  intptr_t _db_symbol_index__;
  string _db_symbol_name_; /* name:string */
};

#define db_symbol_domain_number(x) ((x)->_type_)
#define db_symbol_name_(x) db_symbol_name(x) /* old hack compatible */
#define db_symbol_name(x) ((x)->_db_symbol_name_)

#define pipsdbm_private_spec "\
--NEWGEN-START 20\n\
external db_void;\n\
db_owned_resources = db_symbol:db_symbol -> db_resource:db_resource;\n\
db_resource = pointer:db_void x db_status:db_status x time:int x file_time:int;\n\
db_resources = db_symbol:db_symbol -> db_owned_resources:db_owned_resources;\n\
db_status = loaded:unit + stored:unit + required:unit + loaded_and_stored:unit;\n\
tabulated db_symbol = name:string;\n\
"
#endif

setenv WKS matmul04

delete $WKS

#setenv CPRETTYPRINTER_DEBUG_LEVEL 9
#setenv KERNEL_LOAD_STORE_DEBUG_LEVEL 9
#setenv KERNEL_DATA_MAPPING_DEBUG_LEVEL 9

setproperty ABORT_ON_USER_ERROR TRUE

create $WKS $WKS.f include/p4a_stubs.f

setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE
setproperty CROUGH_FORTRAN_USES_INTERFACE TRUE
setproperty CROUGH_SCALAR_BY_VALUE_IN_FCT_DECL TRUE
setproperty ISOLATE_STATEMENT_EVEN_NON_LOCAL TRUE
setproperty EVAL_SYMBOLIC_CONSTANT FALSE
setproperty GPU_LAUNCHER_PREFIX "P4A_LAUNCHER"
setproperty GPU_WRAPPER_PREFIX "P4A_WRAPPER"
setproperty GPU_KERNEL_PREFIX "P4A_KERNEL"
setproperty GPU_FORTRAN_WRAPPER_PREFIX "P4A_FORTRAN_WRAPPER"
setproperty KERNEL_LOAD_STORE_ALLOCATE_FUNCTION "P4A_ACCEL_MALLOC"
setproperty KERNEL_LOAD_STORE_DEALLOCATE_FUNCTION "P4A_ACCEL_FREE"
setproperty KERNEL_LOAD_STORE_LOAD_FUNCTION_2D "P4A_COPY_TO_ACCEL_2D"
setproperty KERNEL_LOAD_STORE_STORE_FUNCTION_2D "P4A_COPY_FROM_ACCEL_2D"
setproperty NESTED_PARALLELISM_THRESHOLD 2
setproperty OUTLINE_INDEPENDENT_COMPILATION_UNIT TRUE
setproperty LINEARIZE_ARRAY_USE_POINTERS FALSE
setproperty LINEARIZE_ARRAY_CAST_AT_CALL_SITE TRUE

activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL

# Loop normalize for the C language and GPU friendly
setproperty LOOP_NORMALIZE_ONE_INCREMENT TRUE
setproperty LOOP_NORMALIZE_LOWER_BOUND 1
# It is legal in the following by construction:
setproperty LOOP_NORMALIZE_SKIP_INDEX_SIDE_EFFECT TRUE
# If we do this here, the side effect at the end of a loop on the index
# break parallelization. It would require to apply USE_DEF_ELIM...
apply LOOP_NORMALIZE[MATMUL04]

apply PRIVATIZE_MODULE[MATMUL04]

apply COARSE_GRAIN_PARALLELIZATION[MATMUL04]

setproperty GPU_USE_FORTRAN_WRAPPER TRUE
setproperty GPU_USE_LAUNCHER TRUE
setproperty GPU_USE_WRAPPER FALSE
setproperty GPU_USE_KERNEL FALSE

apply GPU_IFY[MATMUL04]

apply LOOP_NORMALIZE [P4A_LAUNCHER_MATMUL04]
apply LOOP_NORMALIZE [P4A_LAUNCHER_MATMUL04_1]

apply PRIVATIZE_MODULE [P4A_LAUNCHER_MATMUL04]
apply PRIVATIZE_MODULE [P4A_LAUNCHER_MATMUL04_1]

apply COARSE_GRAIN_PARALLELIZATION [P4A_LAUNCHER_MATMUL04]
apply COARSE_GRAIN_PARALLELIZATION [P4A_LAUNCHER_MATMUL04_1]

apply LIMIT_NESTED_PARALLELISM [P4A_LAUNCHER_MATMUL04]
apply LIMIT_NESTED_PARALLELISM [P4A_LAUNCHER_MATMUL04_1]

apply GPU_LOOP_NEST_ANNOTATE [P4A_LAUNCHER_MATMUL04]
apply GPU_LOOP_NEST_ANNOTATE [P4A_LAUNCHER_MATMUL04_1]

setproperty GPU_USE_LAUNCHER FALSE
setproperty GPU_USE_WRAPPER TRUE
setproperty GPU_USE_KERNEL TRUE

apply GPU_IFY [P4A_LAUNCHER_MATMUL04]
apply GPU_IFY [P4A_LAUNCHER_MATMUL04_1]

apply KERNEL_LOAD_STORE [P4A_FORTRAN_WRAPPER_MATMUL04]
apply KERNEL_LOAD_STORE [P4A_FORTRAN_WRAPPER_MATMUL04_1]

apply LINEARIZE_ARRAY_FORTRAN[P4A_KERNEL_MATMUL04]
apply LINEARIZE_ARRAY_FORTRAN[P4A_KERNEL_MATMUL04_1]

apply LINEARIZE_ARRAY_FORTRAN[P4A_WRAPPER_MATMUL04]
apply LINEARIZE_ARRAY_FORTRAN[P4A_WRAPPER_MATMUL04_1]

apply PRINT_INTERFACE [P4A_WRAPPER_MATMUL04]
apply PRINT_INTERFACE [P4A_WRAPPER_MATMUL04_1]

apply UNSPLIT [MATMUL04]

setproperty PRETTYPRINT_C_FUNCTION_NAME_WITH_UNDERSCORE FALSE
display C_PRINTED_FILE [P4A_KERNEL_MATMUL04]
display C_PRINTED_FILE [P4A_KERNEL_MATMUL04_1]
display C_PRINTED_FILE [P4A_WRAPPER_MATMUL04]
display C_PRINTED_FILE [P4A_WRAPPER_MATMUL04_1]
display C_PRINTED_FILE [P4A_LAUNCHER_MATMUL04]
display C_PRINTED_FILE [P4A_LAUNCHER_MATMUL04_1]

close $WKS
delete $WKS
quit


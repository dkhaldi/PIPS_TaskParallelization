void p4a_kernel_main()
{
}
void p4a_kernel_main_1(int finger_mat[64][16], int c, int inv_qpsk_user1[16*64+16], int ovsf_code_ref[16])
{
   // Declared by Pass Outlining
   int d, i, j;
   for(i = 0; i <= 15; i += 1)
      finger_mat[c][i] = 0;
   for(j = 0; j <= 15; j += 1)
      for(d = 0; d <= 15; d += 1)
         finger_mat[c][j] += inv_qpsk_user1[c*16+d+j]*ovsf_code_ref[d];
}
void p4a_kernel_main_2(int coeff2[16], int finger_mat[64][16], int j, int symbole_flow_user1[64])
{
   // Declared by Pass Outlining
   int c;
   coeff2[j] = 0;
   for(c = 0; c <= 63; c += 1)
      if (symbole_flow_user1[c]==0)
         coeff2[j] += finger_mat[c][j]*(-1);
      else
         coeff2[j] += finger_mat[c][j]*1;
}
void p4a_kernel_main_3(int j)
{
   if (j<16-1)
      ;
}
void p4a_kernel_main_4(int c, int d, int inv_qpsk_user1[16*64+16], int j, int ovsf_code_ref[16], int symbole_flow_user1[64])
{
   if (symbole_flow_user1[c]==1)
      inv_qpsk_user1[c*16+d+j] -= ovsf_code_ref[d];
   else
      inv_qpsk_user1[c*16+d+j] += ovsf_code_ref[d];
}
void p4a_wrapper_main()
{
   // To be assigned to a call to P4A_vp_0: d
   p4a_kernel_main();
}
void p4a_wrapper_main_1(int finger_mat[64][16], int c, int inv_qpsk_user1[16*64+16], int ovsf_code_ref[16])
{
   // To be assigned to a call to P4A_vp_0: c
   p4a_kernel_main_1(finger_mat, c, inv_qpsk_user1, ovsf_code_ref);
}
void p4a_wrapper_main_2(int coeff2[16], int finger_mat[64][16], int j, int symbole_flow_user1[64])
{
   // To be assigned to a call to P4A_vp_0: j
   p4a_kernel_main_2(coeff2, finger_mat, j, symbole_flow_user1);
}
void p4a_wrapper_main_3(int j)
{
   // To be assigned to a call to P4A_vp_0: j
   p4a_kernel_main_3(j);
}
void p4a_wrapper_main_4(int c, int d, int inv_qpsk_user1[16*64+16], int j, int ovsf_code_ref[16], int symbole_flow_user1[64])
{
   // To be assigned to a call to P4A_vp_1: c
   // To be assigned to a call to P4A_vp_0: d
   p4a_kernel_main_4(c, d, inv_qpsk_user1, j, ovsf_code_ref, symbole_flow_user1);
}
void p4a_launcher_main()
{
   // Declared by Pass Outlining
   int d;
   for(d = 0; d <= 1039; d += 1)
      p4a_wrapper_main();
}
void p4a_launcher_main_1(int finger_mat[64][16], int inv_qpsk_user1[16*64+16], int ovsf_code_ref[16])
{
   // Declared by Pass Outlining
   int c;
   //#endif
   
   
   for(c = 0; c <= 63; c += 1)
      p4a_wrapper_main_1(finger_mat, c, inv_qpsk_user1, ovsf_code_ref);
}
void p4a_launcher_main_2(int coeff2[16], int finger_mat[64][16], int symbole_flow_user1[64])
{
   // Declared by Pass Outlining
   int j;
   for(j = 0; j <= 15; j += 1)
      p4a_wrapper_main_2(coeff2, finger_mat, j, symbole_flow_user1);
}
void p4a_launcher_main_3()
{
   // Declared by Pass Outlining
   int j;
   
   //display the channel coefficients
   for(j = 0; j <= 15; j += 1)
      p4a_wrapper_main_3(j);
}
void p4a_launcher_main_4(int inv_qpsk_user1[16*64+16], int j, int ovsf_code_ref[16], int symbole_flow_user1[64])
{
   // Declared by Pass Outlining
   int c, d;
   for(c = 0; c <= 63; c += 1)
      for(d = 0; d <= 15; d += 1)
         p4a_wrapper_main_4(c, d, inv_qpsk_user1, j, ovsf_code_ref, symbole_flow_user1);
}
int main()
{
   int i, d, j, c, h, u, n;
   //Local variables
   //Sending...	
   int symbole_flow_user1[64];
   int ovsf_code_user1[16] = {1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1};
   int ovsf_code_ref[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   int spreading_signal_user1[16*64];
   int spreading_signals[16*64+16];

   int I_user[16/2*64+16/2];
   int Q_user[16/2*64+16/2];
   float Signal_I[(16/2*64+16/2)*4];
   float Signal_Q[(16/2*64+16/2)*4];
   float FIR_COEFF[64];
   
   //receiving
   float FIR2_I_user1[(16/2*64+16/2)*4];
   float FIR2_Q_user1[(16/2*64+16/2)*4];
   int inv_qpsk_user1[16*64+16];
   int symbole_flow[64];

   int count_loop = 0;
   int max = 0;
   
   /********************************************************************************/
   /*										*/
   /*										*/
   /********************************************************************************/
   while (count_loop<10) {
      int channel_delay1, channel_delay2, channel_delay3, channel_delay4;
      float alpha = (float) 0.22;

      float x_buffer_user1[64];
      int ptr_x_buffer_user1 = 0;
      int found_error = 0;
      int retro_loop_count = 0;
      int finger_mat[64][16];
      int coeff[16];
      int coeff2[16];
      //for the temporary coeff calculated before retroaction loop
      int finger[16];
      int fingers;

      count_loop++;
      
      //#ifdef DEBUG
estimation:      ;
      p4a_launcher_main();
      {
         //PIPS generated variable
         int (*p4a_var_finger_mat0)[64][16] = (int (*)[64][16]) 0, (*p4a_var_inv_qpsk_user10)[1040] = (int (*)[1040]) 0, (*p4a_var_ovsf_code_ref0)[16] = (int (*)[16]) 0;
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref0, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user10, sizeof(int)*1040);
         P4A_accel_malloc((void **) &p4a_var_finger_mat0, sizeof(int)*1024);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref0);
         P4A_copy_to_accel_1d(sizeof(int), 1040, 1040, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);

         p4a_launcher_main_1(*p4a_var_finger_mat0, *p4a_var_inv_qpsk_user10, *p4a_var_ovsf_code_ref0);
         P4A_copy_from_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);
         P4A_accel_free(p4a_var_ovsf_code_ref0);
         P4A_accel_free(p4a_var_inv_qpsk_user10);
         P4A_accel_free(p4a_var_finger_mat0);
      }

      for(c = 0; c <= 63; c += 1)
         for(j = 0; j <= 15; j += 1) {
            if (finger_mat[c][j]>=0)
               printf("%3d\t", finger_mat[c][j]);
            if (finger_mat[c][j]<0)
               printf("%3d\t", finger_mat[c][j]);
         }
      {
         //PIPS generated variable
         int (*p4a_var_coeff20)[16] = (int (*)[16]) 0, (*p4a_var_finger_mat1)[64][16] = (int (*)[64][16]) 0, (*p4a_var_symbole_flow_user10)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user10, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_finger_mat1, sizeof(int)*1024);
         P4A_accel_malloc((void **) &p4a_var_coeff20, sizeof(int)*16);
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat1);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);

         p4a_launcher_main_2(*p4a_var_coeff20, *p4a_var_finger_mat1, *p4a_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);
         P4A_accel_free(p4a_var_symbole_flow_user10);
         P4A_accel_free(p4a_var_finger_mat1);
         P4A_accel_free(p4a_var_coeff20);
      }
      p4a_launcher_main_3();
      
      //calculating max power received
      max = 0;
      for(j = 0; j <= 15; j += 1)
         if (coeff2[j]>max)
            max = coeff2[j];
      
      //max=max*100/(SF*NB_SYMBOL*80);
      
      if (max>=16*64) {
      }
      else {
         goto l99999;
      }
      j = 0;
l99997:      ;
      //retroaction
      if (!(j<16)) goto _break_13;
      if (retro_loop_count>16) goto _break_13;
      if (coeff2[j]>=max) goto l99998;
      j++;
      goto l99997;
l99998:      ;
      coeff[j]++;
      {
         //PIPS generated variable
         int (*p4a_var_inv_qpsk_user11)[j+1023+1] = (int (*)[j+1023+1]) 0, (*p4a_var_ovsf_code_ref1)[16] = (int (*)[16]) 0, (*p4a_var_symbole_flow_user11)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user11, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref1, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user11, sizeof(int)*(j+1024));
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user11);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref1);
         P4A_copy_to_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);

         p4a_launcher_main_4(*p4a_var_inv_qpsk_user11, j, *p4a_var_ovsf_code_ref1, *p4a_var_symbole_flow_user11);
         P4A_copy_from_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);
         P4A_accel_free(p4a_var_symbole_flow_user11);
         P4A_accel_free(p4a_var_ovsf_code_ref1);
         P4A_accel_free(p4a_var_inv_qpsk_user11);
      }

      retro_loop_count++;
      goto estimation;
_break_13:      ;
l99999:      ;
   }
   return 0;
}
int main()
{
   int i, d, j, c, h, u, n;
   //Local variables
   //Sending...	
   int symbole_flow_user1[64];
   int ovsf_code_user1[16] = {1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1};
   int ovsf_code_ref[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   int spreading_signal_user1[16*64];
   int spreading_signals[16*64+16];

   int I_user[16/2*64+16/2];
   int Q_user[16/2*64+16/2];
   float Signal_I[(16/2*64+16/2)*4];
   float Signal_Q[(16/2*64+16/2)*4];
   float FIR_COEFF[64];
   
   //receiving
   float FIR2_I_user1[(16/2*64+16/2)*4];
   float FIR2_Q_user1[(16/2*64+16/2)*4];
   int inv_qpsk_user1[16*64+16];
   int symbole_flow[64];

   int count_loop = 0;
   int max = 0;
   
   /********************************************************************************/
   /*										*/
   /*										*/
   /********************************************************************************/
   while (count_loop<10) {
      int channel_delay1, channel_delay2, channel_delay3, channel_delay4;
      float alpha = (float) 0.22;

      float x_buffer_user1[64];
      int ptr_x_buffer_user1 = 0;
      int found_error = 0;
      int retro_loop_count = 0;
      int finger_mat[64][16];
      int coeff[16];
      int coeff2[16];
      //for the temporary coeff calculated before retroaction loop
      int finger[16];
      int fingers;

      count_loop++;
      
      //#ifdef DEBUG
estimation:      ;
      p4a_launcher_main();
      {
         //PIPS generated variable
         int (*p4a_var_finger_mat0)[64][16] = (int (*)[64][16]) 0, (*p4a_var_inv_qpsk_user10)[1040] = (int (*)[1040]) 0, (*p4a_var_ovsf_code_ref0)[16] = (int (*)[16]) 0;
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref0, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user10, sizeof(int)*1040);
         P4A_accel_malloc((void **) &p4a_var_finger_mat0, sizeof(int)*1024);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref0);
         P4A_copy_to_accel_1d(sizeof(int), 1040, 1040, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);

         p4a_launcher_main_1(*p4a_var_finger_mat0, *p4a_var_inv_qpsk_user10, *p4a_var_ovsf_code_ref0);
         P4A_copy_from_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);
         P4A_accel_free(p4a_var_ovsf_code_ref0);
         P4A_accel_free(p4a_var_inv_qpsk_user10);
         P4A_accel_free(p4a_var_finger_mat0);
      }

      for(c = 0; c <= 63; c += 1)
         for(j = 0; j <= 15; j += 1) {
            if (finger_mat[c][j]>=0)
               printf("%3d\t", finger_mat[c][j]);
            if (finger_mat[c][j]<0)
               printf("%3d\t", finger_mat[c][j]);
         }
      {
         //PIPS generated variable
         int (*p4a_var_coeff20)[16] = (int (*)[16]) 0, (*p4a_var_finger_mat1)[64][16] = (int (*)[64][16]) 0, (*p4a_var_symbole_flow_user10)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user10, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_finger_mat1, sizeof(int)*1024);
         P4A_accel_malloc((void **) &p4a_var_coeff20, sizeof(int)*16);
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat1);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);

         p4a_launcher_main_2(*p4a_var_coeff20, *p4a_var_finger_mat1, *p4a_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);
         P4A_accel_free(p4a_var_symbole_flow_user10);
         P4A_accel_free(p4a_var_finger_mat1);
         P4A_accel_free(p4a_var_coeff20);
      }
      p4a_launcher_main_3();
      
      //calculating max power received
      max = 0;
      for(j = 0; j <= 15; j += 1)
         if (coeff2[j]>max)
            max = coeff2[j];
      
      //max=max*100/(SF*NB_SYMBOL*80);
      
      if (max>=16*64) {
      }
      else {
         goto l99999;
      }
      j = 0;
l99997:      ;
      //retroaction
      if (!(j<16)) goto _break_13;
      if (retro_loop_count>16) goto _break_13;
      if (coeff2[j]>=max) goto l99998;
      j++;
      goto l99997;
l99998:      ;
      coeff[j]++;
      {
         //PIPS generated variable
         int (*p4a_var_inv_qpsk_user11)[j+1023+1] = (int (*)[j+1023+1]) 0, (*p4a_var_ovsf_code_ref1)[16] = (int (*)[16]) 0, (*p4a_var_symbole_flow_user11)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user11, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref1, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user11, sizeof(int)*(j+1024));
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user11);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref1);
         P4A_copy_to_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);

         p4a_launcher_main_4(*p4a_var_inv_qpsk_user11, j, *p4a_var_ovsf_code_ref1, *p4a_var_symbole_flow_user11);
         P4A_copy_from_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);
         P4A_accel_free(p4a_var_symbole_flow_user11);
         P4A_accel_free(p4a_var_ovsf_code_ref1);
         P4A_accel_free(p4a_var_inv_qpsk_user11);
      }

      retro_loop_count++;
      goto estimation;
_break_13:      ;
l99999:      ;
   }
   return 0;
}
int main()
{
   int i, d, j, c, h, u, n;
   //Local variables
   //Sending...	
   int symbole_flow_user1[64];
   int ovsf_code_user1[16] = {1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1};
   int ovsf_code_ref[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   int spreading_signal_user1[16*64];
   int spreading_signals[16*64+16];

   int I_user[16/2*64+16/2];
   int Q_user[16/2*64+16/2];
   float Signal_I[(16/2*64+16/2)*4];
   float Signal_Q[(16/2*64+16/2)*4];
   float FIR_COEFF[64];
   
   //receiving
   float FIR2_I_user1[(16/2*64+16/2)*4];
   float FIR2_Q_user1[(16/2*64+16/2)*4];
   int inv_qpsk_user1[16*64+16];
   int symbole_flow[64];

   int count_loop = 0;
   int max = 0;
   
   /********************************************************************************/
   /*										*/
   /*										*/
   /********************************************************************************/
   while (count_loop<10) {
      int channel_delay1, channel_delay2, channel_delay3, channel_delay4;
      float alpha = (float) 0.22;

      float x_buffer_user1[64];
      int ptr_x_buffer_user1 = 0;
      int found_error = 0;
      int retro_loop_count = 0;
      int finger_mat[64][16];
      int coeff[16];
      int coeff2[16];
      //for the temporary coeff calculated before retroaction loop
      int finger[16];
      int fingers;

      count_loop++;
      
      //#ifdef DEBUG
estimation:      ;
      p4a_launcher_main();
      {
         //PIPS generated variable
         int (*p4a_var_finger_mat0)[64][16] = (int (*)[64][16]) 0, (*p4a_var_inv_qpsk_user10)[1040] = (int (*)[1040]) 0, (*p4a_var_ovsf_code_ref0)[16] = (int (*)[16]) 0;
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref0, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user10, sizeof(int)*1040);
         P4A_accel_malloc((void **) &p4a_var_finger_mat0, sizeof(int)*1024);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref0);
         P4A_copy_to_accel_1d(sizeof(int), 1040, 1040, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);

         p4a_launcher_main_1(*p4a_var_finger_mat0, *p4a_var_inv_qpsk_user10, *p4a_var_ovsf_code_ref0);
         P4A_copy_from_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);
         P4A_accel_free(p4a_var_ovsf_code_ref0);
         P4A_accel_free(p4a_var_inv_qpsk_user10);
         P4A_accel_free(p4a_var_finger_mat0);
      }

      for(c = 0; c <= 63; c += 1)
         for(j = 0; j <= 15; j += 1) {
            if (finger_mat[c][j]>=0)
               printf("%3d\t", finger_mat[c][j]);
            if (finger_mat[c][j]<0)
               printf("%3d\t", finger_mat[c][j]);
         }
      {
         //PIPS generated variable
         int (*p4a_var_coeff20)[16] = (int (*)[16]) 0, (*p4a_var_finger_mat1)[64][16] = (int (*)[64][16]) 0, (*p4a_var_symbole_flow_user10)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user10, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_finger_mat1, sizeof(int)*1024);
         P4A_accel_malloc((void **) &p4a_var_coeff20, sizeof(int)*16);
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat1);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);

         p4a_launcher_main_2(*p4a_var_coeff20, *p4a_var_finger_mat1, *p4a_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);
         P4A_accel_free(p4a_var_symbole_flow_user10);
         P4A_accel_free(p4a_var_finger_mat1);
         P4A_accel_free(p4a_var_coeff20);
      }
      p4a_launcher_main_3();
      
      //calculating max power received
      max = 0;
      for(j = 0; j <= 15; j += 1)
         if (coeff2[j]>max)
            max = coeff2[j];
      
      //max=max*100/(SF*NB_SYMBOL*80);
      
      if (max>=16*64) {
      }
      else {
         goto l99999;
      }
      j = 0;
l99997:      ;
      //retroaction
      if (!(j<16)) goto _break_13;
      if (retro_loop_count>16) goto _break_13;
      if (coeff2[j]>=max) goto l99998;
      j++;
      goto l99997;
l99998:      ;
      coeff[j]++;
      {
         //PIPS generated variable
         int (*p4a_var_inv_qpsk_user11)[j+1023+1] = (int (*)[j+1023+1]) 0, (*p4a_var_ovsf_code_ref1)[16] = (int (*)[16]) 0, (*p4a_var_symbole_flow_user11)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user11, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref1, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user11, sizeof(int)*(j+1024));
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user11);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref1);
         P4A_copy_to_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);

         p4a_launcher_main_4(*p4a_var_inv_qpsk_user11, j, *p4a_var_ovsf_code_ref1, *p4a_var_symbole_flow_user11);
         P4A_copy_from_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);
         P4A_accel_free(p4a_var_symbole_flow_user11);
         P4A_accel_free(p4a_var_ovsf_code_ref1);
         P4A_accel_free(p4a_var_inv_qpsk_user11);
      }

      retro_loop_count++;
      goto estimation;
_break_13:      ;
l99999:      ;
   }
   return 0;
}
int main()
{
   int i, d, j, c, h, u, n;
   //Local variables
   //Sending...	
   int symbole_flow_user1[64];
   int ovsf_code_user1[16] = {1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1};
   int ovsf_code_ref[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   int spreading_signal_user1[16*64];
   int spreading_signals[16*64+16];

   int I_user[16/2*64+16/2];
   int Q_user[16/2*64+16/2];
   float Signal_I[(16/2*64+16/2)*4];
   float Signal_Q[(16/2*64+16/2)*4];
   float FIR_COEFF[64];
   
   //receiving
   float FIR2_I_user1[(16/2*64+16/2)*4];
   float FIR2_Q_user1[(16/2*64+16/2)*4];
   int inv_qpsk_user1[16*64+16];
   int symbole_flow[64];

   int count_loop = 0;
   int max = 0;
   
   /********************************************************************************/
   /*										*/
   /*										*/
   /********************************************************************************/
   while (count_loop<10) {
      int channel_delay1, channel_delay2, channel_delay3, channel_delay4;
      float alpha = (float) 0.22;

      float x_buffer_user1[64];
      int ptr_x_buffer_user1 = 0;
      int found_error = 0;
      int retro_loop_count = 0;
      int finger_mat[64][16];
      int coeff[16];
      int coeff2[16];
      //for the temporary coeff calculated before retroaction loop
      int finger[16];
      int fingers;

      count_loop++;
      
      //#ifdef DEBUG
estimation:      ;
      p4a_launcher_main();
      {
         //PIPS generated variable
         int (*p4a_var_finger_mat0)[64][16] = (int (*)[64][16]) 0, (*p4a_var_inv_qpsk_user10)[1040] = (int (*)[1040]) 0, (*p4a_var_ovsf_code_ref0)[16] = (int (*)[16]) 0;
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref0, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user10, sizeof(int)*1040);
         P4A_accel_malloc((void **) &p4a_var_finger_mat0, sizeof(int)*1024);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref0);
         P4A_copy_to_accel_1d(sizeof(int), 1040, 1040, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);

         p4a_launcher_main_1(*p4a_var_finger_mat0, *p4a_var_inv_qpsk_user10, *p4a_var_ovsf_code_ref0);
         P4A_copy_from_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);
         P4A_accel_free(p4a_var_ovsf_code_ref0);
         P4A_accel_free(p4a_var_inv_qpsk_user10);
         P4A_accel_free(p4a_var_finger_mat0);
      }

      for(c = 0; c <= 63; c += 1)
         for(j = 0; j <= 15; j += 1) {
            if (finger_mat[c][j]>=0)
               printf("%3d\t", finger_mat[c][j]);
            if (finger_mat[c][j]<0)
               printf("%3d\t", finger_mat[c][j]);
         }
      {
         //PIPS generated variable
         int (*p4a_var_coeff20)[16] = (int (*)[16]) 0, (*p4a_var_finger_mat1)[64][16] = (int (*)[64][16]) 0, (*p4a_var_symbole_flow_user10)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user10, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_finger_mat1, sizeof(int)*1024);
         P4A_accel_malloc((void **) &p4a_var_coeff20, sizeof(int)*16);
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat1);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);

         p4a_launcher_main_2(*p4a_var_coeff20, *p4a_var_finger_mat1, *p4a_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);
         P4A_accel_free(p4a_var_symbole_flow_user10);
         P4A_accel_free(p4a_var_finger_mat1);
         P4A_accel_free(p4a_var_coeff20);
      }
      p4a_launcher_main_3();
      
      //calculating max power received
      max = 0;
      for(j = 0; j <= 15; j += 1)
         if (coeff2[j]>max)
            max = coeff2[j];
      
      //max=max*100/(SF*NB_SYMBOL*80);
      
      if (max>=16*64) {
      }
      else {
         goto l99999;
      }
      j = 0;
l99997:      ;
      //retroaction
      if (!(j<16)) goto _break_13;
      if (retro_loop_count>16) goto _break_13;
      if (coeff2[j]>=max) goto l99998;
      j++;
      goto l99997;
l99998:      ;
      coeff[j]++;
      {
         //PIPS generated variable
         int (*p4a_var_inv_qpsk_user11)[j+1023+1] = (int (*)[j+1023+1]) 0, (*p4a_var_ovsf_code_ref1)[16] = (int (*)[16]) 0, (*p4a_var_symbole_flow_user11)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user11, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref1, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user11, sizeof(int)*(j+1024));
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user11);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref1);
         P4A_copy_to_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);

         p4a_launcher_main_4(*p4a_var_inv_qpsk_user11, j, *p4a_var_ovsf_code_ref1, *p4a_var_symbole_flow_user11);
         P4A_copy_from_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);
         P4A_accel_free(p4a_var_symbole_flow_user11);
         P4A_accel_free(p4a_var_ovsf_code_ref1);
         P4A_accel_free(p4a_var_inv_qpsk_user11);
      }

      retro_loop_count++;
      goto estimation;
_break_13:      ;
l99999:      ;
   }
   return 0;
}
int main()
{
   int i, d, j, c, h, u, n;
   //Local variables
   //Sending...	
   int symbole_flow_user1[64];
   int ovsf_code_user1[16] = {1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1};
   int ovsf_code_ref[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   int spreading_signal_user1[16*64];
   int spreading_signals[16*64+16];

   int I_user[16/2*64+16/2];
   int Q_user[16/2*64+16/2];
   float Signal_I[(16/2*64+16/2)*4];
   float Signal_Q[(16/2*64+16/2)*4];
   float FIR_COEFF[64];
   
   //receiving
   float FIR2_I_user1[(16/2*64+16/2)*4];
   float FIR2_Q_user1[(16/2*64+16/2)*4];
   int inv_qpsk_user1[16*64+16];
   int symbole_flow[64];

   int count_loop = 0;
   int max = 0;
   
   /********************************************************************************/
   /*										*/
   /*										*/
   /********************************************************************************/
   while (count_loop<10) {
      int channel_delay1, channel_delay2, channel_delay3, channel_delay4;
      float alpha = (float) 0.22;

      float x_buffer_user1[64];
      int ptr_x_buffer_user1 = 0;
      int found_error = 0;
      int retro_loop_count = 0;
      int finger_mat[64][16];
      int coeff[16];
      int coeff2[16];
      //for the temporary coeff calculated before retroaction loop
      int finger[16];
      int fingers;

      count_loop++;
      
      //#ifdef DEBUG
estimation:      ;
      p4a_launcher_main();
      {
         //PIPS generated variable
         int (*p4a_var_finger_mat0)[64][16] = (int (*)[64][16]) 0, (*p4a_var_inv_qpsk_user10)[1040] = (int (*)[1040]) 0, (*p4a_var_ovsf_code_ref0)[16] = (int (*)[16]) 0;
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref0, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user10, sizeof(int)*1040);
         P4A_accel_malloc((void **) &p4a_var_finger_mat0, sizeof(int)*1024);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref0);
         P4A_copy_to_accel_1d(sizeof(int), 1040, 1040, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);

         p4a_launcher_main_1(*p4a_var_finger_mat0, *p4a_var_inv_qpsk_user10, *p4a_var_ovsf_code_ref0);
         P4A_copy_from_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat0);
         P4A_accel_free(p4a_var_ovsf_code_ref0);
         P4A_accel_free(p4a_var_inv_qpsk_user10);
         P4A_accel_free(p4a_var_finger_mat0);
      }

      for(c = 0; c <= 63; c += 1)
         for(j = 0; j <= 15; j += 1) {
            if (finger_mat[c][j]>=0)
               printf("%3d\t", finger_mat[c][j]);
            if (finger_mat[c][j]<0)
               printf("%3d\t", finger_mat[c][j]);
         }
      {
         //PIPS generated variable
         int (*p4a_var_coeff20)[16] = (int (*)[16]) 0, (*p4a_var_finger_mat1)[64][16] = (int (*)[64][16]) 0, (*p4a_var_symbole_flow_user10)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user10, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_finger_mat1, sizeof(int)*1024);
         P4A_accel_malloc((void **) &p4a_var_coeff20, sizeof(int)*16);
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user10);
         P4A_copy_to_accel_2d(sizeof(int), 64, 16, 64, 16, 0, 0, &finger_mat[0][0], *p4a_var_finger_mat1);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);

         p4a_launcher_main_2(*p4a_var_coeff20, *p4a_var_finger_mat1, *p4a_var_symbole_flow_user10);
         P4A_copy_from_accel_1d(sizeof(int), 16, 16, 0, &coeff2[0], *p4a_var_coeff20);
         P4A_accel_free(p4a_var_symbole_flow_user10);
         P4A_accel_free(p4a_var_finger_mat1);
         P4A_accel_free(p4a_var_coeff20);
      }
      p4a_launcher_main_3();
      
      //calculating max power received
      max = 0;
      for(j = 0; j <= 15; j += 1)
         if (coeff2[j]>max)
            max = coeff2[j];
      
      //max=max*100/(SF*NB_SYMBOL*80);
      
      if (max>=16*64) {
      }
      else {
         goto l99999;
      }
      j = 0;
l99997:      ;
      //retroaction
      if (!(j<16)) goto _break_13;
      if (retro_loop_count>16) goto _break_13;
      if (coeff2[j]>=max) goto l99998;
      j++;
      goto l99997;
l99998:      ;
      coeff[j]++;
      {
         //PIPS generated variable
         int (*p4a_var_inv_qpsk_user11)[j+1023+1] = (int (*)[j+1023+1]) 0, (*p4a_var_ovsf_code_ref1)[16] = (int (*)[16]) 0, (*p4a_var_symbole_flow_user11)[64] = (int (*)[64]) 0;
         P4A_accel_malloc((void **) &p4a_var_symbole_flow_user11, sizeof(int)*64);
         P4A_accel_malloc((void **) &p4a_var_ovsf_code_ref1, sizeof(int)*16);
         P4A_accel_malloc((void **) &p4a_var_inv_qpsk_user11, sizeof(int)*(j+1024));
         P4A_copy_to_accel_1d(sizeof(int), 64, 64, 0, &symbole_flow_user1[0], *p4a_var_symbole_flow_user11);
         P4A_copy_to_accel_1d(sizeof(int), 16, 16, 0, &ovsf_code_ref[0], *p4a_var_ovsf_code_ref1);
         P4A_copy_to_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);

         p4a_launcher_main_4(*p4a_var_inv_qpsk_user11, j, *p4a_var_ovsf_code_ref1, *p4a_var_symbole_flow_user11);
         P4A_copy_from_accel_1d(sizeof(int), 1040, j+1024, 0, &inv_qpsk_user1[0], *p4a_var_inv_qpsk_user11);
         P4A_accel_free(p4a_var_symbole_flow_user11);
         P4A_accel_free(p4a_var_ovsf_code_ref1);
         P4A_accel_free(p4a_var_inv_qpsk_user11);
      }

      retro_loop_count++;
      goto estimation;
_break_13:      ;
l99999:      ;
   }
   return 0;
}

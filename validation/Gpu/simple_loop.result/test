
"After COARSE_GRAIN_PARALLELIZATION"

int main()
{
   int i;

#pragma omp parallel for 
   for(i = 0; i <= 9999; i += 1)
      a[i] = b[i]+c[i];

   return 0;
}

"After GPU_IFY"

int main()
{
   int i;
   p4a_launcher_main(N, a, b, c);

   return 0;
}
void p4a_launcher_main(int N, double a[N], double b[N], double c[N])
{
   // Declared by Pass Outlining
   int i;

   for(i = 0; i <= 9999; i += 1)
      p4a_wrapper_main(N, a, b, c, i);
}
void p4a_wrapper_main(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_main(N, a, b, c, i);
}
void p4a_kernel_main(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}

"After KERNEL_LOAD_STORE"

int main()
{
   int i;
   {
      //PIPS generated variable
      double (*a0)[10000] = (double (*)[10000]) 0, (*b0)[10000] = (double (*)[10000]) 0, (*c0)[10000] = (double (*)[10000]) 0;
      P4A_accel_malloc((void **) &c0, sizeof(double)*10000);
      P4A_accel_malloc((void **) &b0, sizeof(double)*10000);
      P4A_accel_malloc((void **) &a0, sizeof(double)*10000);
      P4A_copy_to_accel_1d(sizeof(double), 10000, 10000, 0, &c[0], *c0);
      P4A_copy_to_accel_1d(sizeof(double), 10000, 10000, 0, &b[0], *b0);

      p4a_launcher_main(N, *a0, *b0, *c0);
      P4A_copy_from_accel_1d(sizeof(double), 10000, 10000, 0, &a[0], *a0);
      P4A_accel_free(c0);
      P4A_accel_free(b0);
      P4A_accel_free(a0);
   }

   return 0;
}
void p4a_launcher_main(int N, double a[N], double b[N], double c[N])
{
   // Declared by Pass Outlining
   int i;

   for(i = 0; i <= 9999; i += 1)
      p4a_wrapper_main(N, a, b, c, i);
}
void p4a_wrapper_main(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_main(N, a, b, c, i);
}
void p4a_kernel_main(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
[after unsplit and recovering]
/*
 * file for simple_loop.c
 */
enum {N=10000};

double a[N], b[N], c[N];

extern int main();
//PIPS generated variable
void p4a_kernel_main(int N, double a[N], double b[N], double c[N], int i);
//PIPS generated variable
void p4a_wrapper_main(int N, double a[N], double b[N], double c[N], int i);
//PIPS generated variable
void p4a_launcher_main(int N, double a[N], double b[N], double c[N]);
//PIPS generated variable
typedef unsigned long int size_t;
//PIPS generated variable
void P4A_accel_malloc(void **address, size_t size);
//PIPS generated variable
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, const void *host_address, void *accel_address);
//PIPS generated variable
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, const void *accel_address);
//PIPS generated variable
void P4A_accel_free(void *address);
void p4a_launcher_main(int N, double a[N], double b[N], double c[N])
{
   // Declared by Pass Outlining
   int i;

   for(i = 0; i <= 9999; i += 1)
      p4a_wrapper_main(N, a, b, c, i);
}
void p4a_wrapper_main(int N, double a[N], double b[N], double c[N], int i)
{
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_main(N, a, b, c, i);
}
void p4a_kernel_main(int N, double a[N], double b[N], double c[N], int i)
{
   a[i] = b[i]+c[i];
}
int main()
{
   int i;
   {
      //PIPS generated variable
      double (*a0)[10000] = (double (*)[10000]) 0, (*b0)[10000] = (double (*)[10000]) 0, (*c0)[10000] = (double (*)[10000]) 0;
      P4A_accel_malloc((void **) &c0, sizeof(double)*10000);
      P4A_accel_malloc((void **) &b0, sizeof(double)*10000);
      P4A_accel_malloc((void **) &a0, sizeof(double)*10000);
      P4A_copy_to_accel_1d(sizeof(double), 10000, 10000, 0, &c[0], *c0);
      P4A_copy_to_accel_1d(sizeof(double), 10000, 10000, 0, &b[0], *b0);

      p4a_launcher_main(N, *a0, *b0, *c0);
      P4A_copy_from_accel_1d(sizeof(double), 10000, 10000, 0, &a[0], *a0);
      P4A_accel_free(c0);
      P4A_accel_free(b0);
      P4A_accel_free(a0);
   }

   return 0;
}

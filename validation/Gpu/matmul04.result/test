/* C pretty print for module P4A_KERNEL_MATMUL04. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_kernel_matmul04 (int n, int a[n * n - 0], int b[n * n - 0], int i, int j)
{

  if ((j <= n) && (i <= n))
    {
      a[(i + ((j - 1) * n)) - 1] = 1;
      b[(i + ((j - 1) * n)) - 1] = 1;
    }
  return;
}
/* C pretty print for module P4A_KERNEL_MATMUL04_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_kernel_matmul04_1 (int n, int a[n * n - 0], int b[n * n - 0],
		       int c[n * n - 0], int i, int j, int x)
{
  int k;

  if ((j <= n) && (i <= n))
    {
      x = 0;
      for (k = 1; k <= n; k++)
	{
	  x = (x + (a[(i + ((k - 1) * n)) - 1] * b[(k + ((j - 1) * n)) - 1]));
	}
      c[(i + ((j - 1) * n)) - 1] = x;
    }
  return;
}
/* C pretty print for module P4A_WRAPPER_MATMUL04. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_wrapper_matmul04 (int n, int a[n * n - 0], int b[n * n - 0], int i, int j)
{

  p4a_kernel_matmul04 (&n, a, b, &i, &j);
  return;
}
/* C pretty print for module P4A_WRAPPER_MATMUL04_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_wrapper_matmul04_1 (int n, int a[n * n - 0], int b[n * n - 0],
			int c[n * n - 0], int i, int j, int x)
{

  p4a_kernel_matmul04_1 (&n, a, b, c, &i, &j, &x);
  return;
}
/* C pretty print for module P4A_LAUNCHER_MATMUL04. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_launcher_matmul04 (int n, int a[n - 0][n - 0], int b[n - 0][n - 0])
{
  int j;
  int i;

  for (j = 1; j <= n; j++)
    {
      for (i = 1; i <= n; i++)
	{
	  p4a_wrapper_matmul04 (&n, a, b, &i, &j);
	}
    }
  return;
}
/* C pretty print for module P4A_LAUNCHER_MATMUL04_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_launcher_matmul04_1 (int n, int a[n - 0][n - 0], int b[n - 0][n - 0],
			 int c[n - 0][n - 0])
{
  int x;
  int k;
  int j;
  int i;

  for (j = 1; j <= n; j++)
    {
      for (i = 1; i <= n; i++)
	{
	  p4a_wrapper_matmul04_1 (&n, a, b, c, &i, &j, &x);
	}
    }
  return;
}

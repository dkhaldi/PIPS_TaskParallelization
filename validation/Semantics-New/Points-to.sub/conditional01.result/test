
Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i = 0, j = -1;

// Points To: none

   int *p;

// Points To:
// p -> undefined , EXACT

   p = &i;

// Points To:
// p -> i , EXACT

   j = (*p = 0)?0:1;

// Points To:
// p -> i , EXACT


   return j;
}

PROPER  EFFECTS

int main()
{
//             <    is written>: i j
   int i = 0, j = -1;
   int *p;
//             <    is written>: p
   p = &i;
//             <    is read   >: p
//             <    is written>: i j
   j = (*p = 0)?0:1;
//             <    is read   >: j

   return j;
}

Transformers with point-to


//  T(main) {0<=main, main<=1}

int main()
{

//  T(i,j) {i==0, j==-1}

   int i = 0, j = -1;

//  T(p) {i==0, j==-1}

   int *p;

//  T(p) {&i==p, i==0, j==-1}

   p = &i;

//  T(i,j,p) {&i==p#init, i#init==0, j#init==-1, 0<=j, j<=1}

   j = (*p = 0)?0:1;

//  T(main) {j==main, 0<=j, j<=1}


   return j;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   int i = 0, j = -1;

//  P(i,j) {i==0, j==-1}

   int *p;

//  P(i,j,p) {i==0, j==-1}

   p = &i;

//  P(i,j,p) {&i==p, i==0, j==-1}

   j = (*p = 0)?0:1;

//  P(i,j,p) {0<=j, j<=1}


   return j;
}

Warnings

TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (any_scalar_assign_to_transformer_without_effect) Variable 0`j in lhs is uselessly updated by the rhs '(*p = 0)?0:1'
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (any_scalar_assign_to_transformer_without_effect) Variable 0`j in lhs is uselessly updated by the rhs '(*p = 0)?0:1'

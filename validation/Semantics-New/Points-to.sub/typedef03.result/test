
Points-to


Transformers with point-to


//  T(main) {main==0}

int main()
{

//  T() {}

   BYTE a[10], b[10];

//  T() {}

   P_BYTE p0, q1;

//  T() {}

   BYTE *q0, *p1;

//  T(p0) {}


   p0 = a;

//  T(q0) {p0+sizeof(BYTE)==q0}

   q0 = p0+1;

//  T() {p0+sizeof(BYTE)==q0}


   *p0 = 0;

//  T() {p0+sizeof(BYTE)==q0}

   *q0 = 0;

//  T(p1) {p0+sizeof(BYTE)==q0}

   
   
   p1 = b;

//  T(q1) {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}

   q1 = p1+1;

//  T() {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}


   *p1 = 0;

//  T() {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}

   *q1 = 0;

//  T(main) {main==0, p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)
//    ==q1}


   return 0;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   BYTE a[10], b[10];

//  P() {}

   P_BYTE p0, q1;

//  P() {}

   BYTE *q0, *p1;

//  P() {}


   p0 = a;

//  P(p0) {}

   q0 = p0+1;

//  P(p0,q0) {p0+sizeof(BYTE)==q0}


   *p0 = 0;

//  P(p0,q0) {p0+sizeof(BYTE)==q0}

   *q0 = 0;

//  P(p0,q0) {p0+sizeof(BYTE)==q0}

   
   
   p1 = b;

//  P(p0,p1,q0) {p0+sizeof(BYTE)==q0}

   q1 = p1+1;

//  P(p0,p1,q0,q1) {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}


   *p1 = 0;

//  P(p0,p1,q0,q1) {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}

   *q1 = 0;

//  P(p0,p1,q0,q1) {p0+sizeof(BYTE)==q0, p1+sizeof(unsigned char)==q1}


   return 0;
}

Warnings

TRANSFORMERS_INTER_FULL[main] (have_null_value_in_pointer_expression_p) line 13 
at statement:

	q0 = p0+1;


TODO : Need to check if p0 is indirectly NULL
TRANSFORMERS_INTER_FULL[main] (pointer_binary_operation_to_transformer) line 13 
at statement:

	q0 = p0+1;


Operator TOP-LEVEL:+C not analyzed
TRANSFORMERS_INTER_FULL[main] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.
TRANSFORMERS_INTER_FULL[main] (have_null_value_in_pointer_expression_p) line 20 
at statement:

	q1 = p1+1;


TODO : Need to check if p1 is indirectly NULL
TRANSFORMERS_INTER_FULL[main] (pointer_binary_operation_to_transformer) line 20 
at statement:

	q1 = p1+1;


Operator TOP-LEVEL:+C not analyzed
TRANSFORMERS_INTER_FULL[main] (have_null_value_in_pointer_expression_p) line 13 
at statement:

	q0 = p0+1;


TODO : Need to check if p0 is indirectly NULL
TRANSFORMERS_INTER_FULL[main] (pointer_binary_operation_to_transformer) line 13 
at statement:

	q0 = p0+1;


Operator TOP-LEVEL:+C not analyzed
TRANSFORMERS_INTER_FULL[main] (have_null_value_in_pointer_expression_p) line 20 
at statement:

	q1 = p1+1;


TODO : Need to check if p1 is indirectly NULL
TRANSFORMERS_INTER_FULL[main] (pointer_binary_operation_to_transformer) line 20 
at statement:

	q1 = p1+1;


Operator TOP-LEVEL:+C not analyzed

void alignbits()
{
   if (outcnt!=8)
      putbits(0, outcnt);
}
int bitcount()
{
   return 8*bytecnt+(8-outcnt);
}
void calcSNR(unsigned char *org[3], unsigned char *rec[3])
{
   int w, h, offs;
   double v, e;
   w = horizontal_size;
   h = pict_struct==3?vertical_size:vertical_size>>1;
   offs = pict_struct==2?width:0;
   calcSNR1(org[0]+offs, rec[0]+offs, width2, w, h, &v, &e);
   fprintf(statfile, "Y: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
   if (chroma_format!=3) {
      w >>= 1;
      offs >>= 1;
   }
   if (chroma_format==1)
      h >>= 1;
   calcSNR1(org[1]+offs, rec[1]+offs, chrom_width2, w, h, &v, &e);
   fprintf(statfile, "U: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
   calcSNR1(org[2]+offs, rec[2]+offs, chrom_width2, w, h, &v, &e);
   fprintf(statfile, "V: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
}
void calc_vbv_delay()
{
   double picture_delay;
   static double next_ip_delay;
   /* due to frame reordering delay */
   static double decoding_time;
   /* number of 1/90000 s ticks until next picture is to be decoded */
   if (pict_type==3)
      if (prog_seq)
         if (!repeatfirst)
            picture_delay = 90000.0/frame_rate;
         else if (!topfirst)
            picture_delay = 90000.0*2.0/frame_rate;
         else
            picture_delay = 90000.0*3.0/frame_rate;
      else
         /* interlaced */
         if (fieldpic)
            picture_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
            picture_delay = 90000.0*2.0/(2.0*frame_rate);
         else
            picture_delay = 90000.0*3.0/(2.0*frame_rate);
   else {
      /* I or P picture */
      if (fieldpic)
         if (topfirst==(pict_struct==1))
            /* first field */
            picture_delay = 90000.0/(2.0*frame_rate);
         else
            /* second field */
            /* take frame reordering delay into account */
            picture_delay = next_ip_delay-90000.0/(2.0*frame_rate);
      else
         /* frame picture */
         /* take frame reordering delay into account*/
         picture_delay = next_ip_delay;
      if (!fieldpic||topfirst!=(pict_struct==1))
         /* frame picture or second field */
         if (prog_seq)
            if (!repeatfirst)
               next_ip_delay = 90000.0/frame_rate;
            else if (!topfirst)
               next_ip_delay = 90000.0*2.0/frame_rate;
            else
               next_ip_delay = 90000.0*3.0/frame_rate;
         else if (fieldpic)
            next_ip_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
            next_ip_delay = 90000.0*2.0/(2.0*frame_rate);
         else
            next_ip_delay = 90000.0*3.0/(2.0*frame_rate);
   }
   if (decoding_time==0.0) {
      /* first call of calc_vbv_delay */
      /* we start with a 7/8 filled VBV buffer (12.5% back-off) */
      picture_delay = vbv_buffer_size*16384*7/8*90000.0/bit_rate;
      if (fieldpic)
         next_ip_delay = (int) (90000.0/frame_rate+0.5);
   }
   if (!low_delay&&decoding_time<bitcnt_EOP*90000.0/bit_rate)
      /* picture not completely in buffer at intended decoding time */
      /* VBV checks */
      /* check for underflow (previous picture) */
      if (!quiet)
         fprintf(stderr, "vbv_delay underflow! (decoding_time=%.1f, t_EOP=%.1f\n)", decoding_time, bitcnt_EOP*90000.0/bit_rate);
   /* when to decode current frame */
   decoding_time += picture_delay;
   /* warning: bitcount() may overflow (e.g. after 9 min. at 8 Mbit/s */
   vbv_delay = (int) (decoding_time-bitcount()*90000.0/bit_rate);
   if (decoding_time-bitcnt_EOP*90000.0/bit_rate>vbv_buffer_size*16384*90000.0/bit_rate)
      /* check for overflow (current picture) */
      if (!quiet)
         fprintf(stderr, "vbv_delay overflow!\n");
   fprintf(statfile, "\nvbv_delay=%d (bitcount=%d, decoding_time=%.2f, bitcnt_EOP=%d)\n", vbv_delay, bitcount(), decoding_time, bitcnt_EOP);
   if (vbv_delay<0) {
      if (!quiet)
         fprintf(stderr, "vbv_delay underflow: %d\n", vbv_delay);
      vbv_delay = 0;
   }
   if (vbv_delay>65535) {
      if (!quiet)
         fprintf(stderr, "vbv_delay overflow: %d\n", vbv_delay);
      vbv_delay = 65535;
   }
}
void dct_type_estimation(unsigned char *pred, unsigned char *cur, struct mbinfo *mbi)
{
   short blk0[128], blk1[128];
   int i, j, i0, j0, k, offs, s0, s1, sq0, sq1, s01;
   double d, r;
   k = 0;
   for(j0 = 0; j0 <= height2-1; j0 += 16)
      for(i0 = 0; i0 <= width-1; i0 += 16) {
         if (frame_pred_dct||pict_struct!=3)
            mbi[k].dct_type = 0;
         else {
            /* interlaced frame picture */
            /*
                     * calculate prediction error (cur-pred) for top (blk0)
                     * and bottom field (blk1)
                     */
            for(j = 0; j <= 7; j += 1) {
               offs = width*((j<<1)+j0)+i0;
               for(i = 0; i <= 15; i += 1) {
                  blk0[16*j+i] = cur[offs]-pred[offs];
                  blk1[16*j+i] = cur[offs+width]-pred[offs+width];
                  offs++;
               }
            }
            /* correlate fields */
            s0 = s1 = sq0 = sq1 = s01 = 0;
            for(i = 0; i <= 127; i += 1) {
               s0 += blk0[i];
               sq0 += blk0[i]*blk0[i];
               s1 += blk1[i];
               sq1 += blk1[i]*blk1[i];
               s01 += blk0[i]*blk1[i];
            }
            d = (sq0-s0*s0/128.0)*(sq1-s1*s1/128.0);
            if (d>0.0) {
               r = (s01-s0*s1/128.0)/sqrt(d);
               if (r>0.5)
                  mbi[k].dct_type = 0;
               else
                  mbi[k].dct_type = 1;
            }
            else
               mbi[k].dct_type = 1;
         }
         k++;
      }
}
void error(char *text)
{
   fprintf(stderr, text);
   _IO_putc('\n', stderr);
   exit(1);
}
void fdct(short *block)
{
   int i, j, k;
   double s;
   double tmp[64];
   for(i = 0; i <= 7; i += 1)
      for(j = 0; j <= 7; j += 1) {
         s = 0.0;
         for(k = 0; k <= 7; k += 1)
            s += c[j][k]*block[8*i+k];
         tmp[8*i+j] = s;
      }
   for(j = 0; j <= 7; j += 1)
      for(i = 0; i <= 7; i += 1) {
         s = 0.0;
         for(k = 0; k <= 7; k += 1)
            s += c[i][k]*tmp[8*k+j];
         block[8*i+j] = (int) floor(s+0.499999);
      }
}
void idct(short *block)
{
   int i;
   for(i = 0; i <= 7; i += 1)
      idctrow(block+8*i);
   for(i = 0; i <= 7; i += 1)
      idctcol(block+i);
}
static void idctcol(short *blk)
{
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
   /* shortcut */
   if (!((x1 = blk[8*4]<<8)|(x2 = blk[8*6])|(x3 = blk[8*2])|(x4 = blk[8*1])|(x5 = blk[8*7])|(x6 = blk[8*5])|(x7 = blk[8*3]))) {
      blk[8*0] = blk[8*1] = blk[8*2] = blk[8*3] = blk[8*4] = blk[8*5] = blk[8*6] = blk[8*7] = iclp[blk[8*0]+32>>6];
      return;
   }
   x0 = (blk[8*0]<<8)+8192;
   /* first stage */
   x8 = 565*(x4+x5)+4;
   x4 = x8+(2841-565)*x4>>3;
   x5 = x8-(2841+565)*x5>>3;
   x8 = 2408*(x6+x7)+4;
   x6 = x8-(2408-1609)*x6>>3;
   x7 = x8-(2408+1609)*x7>>3;
   /* second stage */
   x8 = x0+x1;
   x0 -= x1;
   x1 = 1108*(x3+x2)+4;
   x2 = x1-(2676+1108)*x2>>3;
   x3 = x1+(2676-1108)*x3>>3;
   x1 = x4+x6;
   x4 -= x6;
   x6 = x5+x7;
   x5 -= x7;
   /* third stage */
   x7 = x8+x3;
   x8 -= x3;
   x3 = x0+x2;
   x0 -= x2;
   x2 = 181*(x4+x5)+128>>8;
   x4 = 181*(x4-x5)+128>>8;
   /* fourth stage */
   blk[8*0] = iclp[x7+x1>>14];
   blk[8*1] = iclp[x3+x2>>14];
   blk[8*2] = iclp[x0+x4>>14];
   blk[8*3] = iclp[x8+x6>>14];
   blk[8*4] = iclp[x8-x6>>14];
   blk[8*5] = iclp[x0-x4>>14];
   blk[8*6] = iclp[x3-x2>>14];
   blk[8*7] = iclp[x7-x1>>14];
}
static void idctrow(short *blk)
{
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
   /* shortcut */
   if (!((x1 = blk[4]<<11)|(x2 = blk[6])|(x3 = blk[2])|(x4 = blk[1])|(x5 = blk[7])|(x6 = blk[5])|(x7 = blk[3]))) {
      blk[0] = blk[1] = blk[2] = blk[3] = blk[4] = blk[5] = blk[6] = blk[7] = blk[0]<<3;
      return;
   }
   x0 = (blk[0]<<11)+128;
   /* for proper rounding in the fourth stage */
   /* first stage */
   x8 = 565*(x4+x5);
   x4 = x8+(2841-565)*x4;
   x5 = x8-(2841+565)*x5;
   x8 = 2408*(x6+x7);
   x6 = x8-(2408-1609)*x6;
   x7 = x8-(2408+1609)*x7;
   /* second stage */
   x8 = x0+x1;
   x0 -= x1;
   x1 = 1108*(x3+x2);
   x2 = x1-(2676+1108)*x2;
   x3 = x1+(2676-1108)*x3;
   x1 = x4+x6;
   x4 -= x6;
   x6 = x5+x7;
   x5 -= x7;
   /* third stage */
   x7 = x8+x3;
   x8 -= x3;
   x3 = x0+x2;
   x0 -= x2;
   x2 = 181*(x4+x5)+128>>8;
   x4 = 181*(x4-x5)+128>>8;
   /* fourth stage */
   blk[0] = x7+x1>>8;
   blk[1] = x3+x2>>8;
   blk[2] = x0+x4>>8;
   blk[3] = x8+x6>>8;
   blk[4] = x8-x6>>8;
   blk[5] = x0-x4>>8;
   blk[6] = x3-x2>>8;
   blk[7] = x7-x1>>8;
}
void init_fdct()
{
   int i, j;
   double s;
   for(i = 0; i <= 7; i += 1) {
      s = i==0?sqrt(0.125):0.5;
      for(j = 0; j <= 7; j += 1)
         c[i][j] = s*cos(3.14159265358979323846/8.0*i*(j+0.5));
   }
}
void init_idct()
{
   int i;
   iclp = iclip+512;
   for(i = -512; i <= 511; i += 1)
      iclp[i] = i<-256?-256:i>255?255:i;
}
void initbits()
{
   outcnt = 8;
   bytecnt = 0;
}
void iquant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
   int i, val, sum;
   if (mpeg1)
      iquant1_intra(src, dst, dc_prec, quant_mat, mquant);
   else {
      sum = dst[0] = src[0]<<3-dc_prec;
      for(i = 1; i <= 63; i += 1) {
         val = (int) (src[i]*quant_mat[i]*mquant)/16;
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
      /* mismatch control */
      if ((sum&1)==0)
         dst[63] ^= 1;
   }
}
void iquant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
   int i, val, sum;
   if (mpeg1)
      iquant1_non_intra(src, dst, quant_mat, mquant);
   else {
      sum = 0;
      for(i = 0; i <= 63; i += 1) {
         val = src[i];
         if (val!=0)
            val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
      /* mismatch control */
      if ((sum&1)==0)
         dst[63] ^= 1;
   }
}
void itransform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
   int i, j, i1, j1, k, n, cc, offs, lx;
   k = 0;
   for(j = 0; j <= height2-1; j += 16)
      for(i = 0; i <= width-1; i += 16) {
         for(n = 0; n <= block_count-1; n += 1) {
            cc = n<4?0:(n&1)+1;
            /* color component index */
            if (cc==0) {
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
                  lx = width<<1;
               }
               else {
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
                  lx = width2;
               }
               if (pict_struct==2)
                  offs += width;
            }
            else {
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
               j1 = chroma_format!=1?j:j>>1;
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
                  lx = chrom_width<<1;
               }
               else {
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
                  lx = chrom_width2;
               }
               if (pict_struct==2)
                  offs += chrom_width;
            }
            idct(blocks[k*block_count+n]);
            add_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
         }
         k++;
      }
}
int main(int argc, char *argv[])
{
   if (1) {
      if (argc!=3) {
         printf("\n%s, %s\n", version, author);
         printf("Usage: mpeg2encode in.par out.m2v\n");
         exit(0);
      }
      /* read parameter file */
      readparmfile(argv[1]);
      /* read quantization matrices */
      readquantmat();
      /* open output file */
      if (!(outfile = fopen(argv[2], "wb"))) {
         sprintf(errortext, "Couldn't create output file %s", argv[2]);
         error(errortext);
      }
      init();
      putseq();
      fclose(outfile);
      fclose(statfile);
   }
   return 0;
}
static int bdist1(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
   int i, j;
   int s, v;
   pfa = pf+hxf;
   pfb = pf+lx*hyf;
   pfc = pfb+hxf;
   pba = pb+hxb;
   pbb = pb+lx*hyb;
   pbc = pbb+hxb;
   s = 0;
   for(j = 0; j <= h-1; j += 1) {
      for(i = 0; i <= 15; i += 1) {
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
         if (v>=0)
            s += v;
         else
            s -= v;
      }
      p2 += lx-16;
      pf += lx-16;
      pfa += lx-16;
      pfb += lx-16;
      pfc += lx-16;
      pb += lx-16;
      pba += lx-16;
      pbb += lx-16;
      pbc += lx-16;
   }
   return s;
}
static int bdist2(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
   int i, j;
   int s, v;
   pfa = pf+hxf;
   pfb = pf+lx*hyf;
   pfc = pfb+hxf;
   pba = pb+hxb;
   pbb = pb+lx*hyb;
   pbc = pbb+hxb;
   s = 0;
   for(j = 0; j <= h-1; j += 1) {
      for(i = 0; i <= 15; i += 1) {
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
         s += v*v;
      }
      p2 += lx-16;
      pf += lx-16;
      pfa += lx-16;
      pfb += lx-16;
      pfc += lx-16;
      pb += lx-16;
      pba += lx-16;
      pbb += lx-16;
      pbc += lx-16;
   }
   return s;
}
static int dist1(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h, int distlim)
{
   unsigned char *p1, *p1a, *p2;
   int i, j;
   int s, v;
   s = 0;
   p1 = blk1;
   p2 = blk2;
   if (!hx&&!hy) {
      j = 0;
l99999:      ;
      if (!(j<h)) goto _break_1;
      if ((v = p1[0]-p2[0])<0)
         v = -v;
      s += v;
      if ((v = p1[1]-p2[1])<0)
         v = -v;
      s += v;
      if ((v = p1[2]-p2[2])<0)
         v = -v;
      s += v;
      if ((v = p1[3]-p2[3])<0)
         v = -v;
      s += v;
      if ((v = p1[4]-p2[4])<0)
         v = -v;
      s += v;
      if ((v = p1[5]-p2[5])<0)
         v = -v;
      s += v;
      if ((v = p1[6]-p2[6])<0)
         v = -v;
      s += v;
      if ((v = p1[7]-p2[7])<0)
         v = -v;
      s += v;
      if ((v = p1[8]-p2[8])<0)
         v = -v;
      s += v;
      if ((v = p1[9]-p2[9])<0)
         v = -v;
      s += v;
      if ((v = p1[10]-p2[10])<0)
         v = -v;
      s += v;
      if ((v = p1[11]-p2[11])<0)
         v = -v;
      s += v;
      if ((v = p1[12]-p2[12])<0)
         v = -v;
      s += v;
      if ((v = p1[13]-p2[13])<0)
         v = -v;
      s += v;
      if ((v = p1[14]-p2[14])<0)
         v = -v;
      s += v;
      if ((v = p1[15]-p2[15])<0)
         v = -v;
      s += v;
      if (s>=distlim) goto _break_1;
      p1 += lx;
      p2 += lx;
      j++;
      goto l99999;
_break_1:      ;
   }
   else if (hx&&!hy)
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
            if (v>=0)
               s += v;
            else
               s -= v;
         }
         p1 += lx;
         p2 += lx;
      }
   else if (!hx&&hy) {
      p1a = p1+lx;
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
            if (v>=0)
               s += v;
            else
               s -= v;
         }
         p1 = p1a;
         p1a += lx;
         p2 += lx;
      }
   }
   else {
      p1a = p1+lx;
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
            if (v>=0)
               s += v;
            else
               s -= v;
         }
         p1 = p1a;
         p1a += lx;
         p2 += lx;
      }
   }
   return s;
}
static int dist2(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h)
{
   unsigned char *p1, *p1a, *p2;
   int i, j;
   int s, v;
   s = 0;
   p1 = blk1;
   p2 = blk2;
   if (!hx&&!hy)
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = p1[i]-p2[i];
            s += v*v;
         }
         p1 += lx;
         p2 += lx;
      }
   else if (hx&&!hy)
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
            s += v*v;
         }
         p1 += lx;
         p2 += lx;
      }
   else if (!hx&&hy) {
      p1a = p1+lx;
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
            s += v*v;
         }
         p1 = p1a;
         p1a += lx;
         p2 += lx;
      }
   }
   else {
      p1a = p1+lx;
      for(j = 0; j <= h-1; j += 1) {
         for(i = 0; i <= 15; i += 1) {
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
            s += v*v;
         }
         p1 = p1a;
         p1a += lx;
         p2 += lx;
      }
   }
   return s;
}
static void dpfield_estimate(unsigned char *topref, unsigned char *botref, unsigned char *mb, int i, int j, int imins, int jmins, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
   unsigned char *sameref, *oppref;
   int io0, jo0, io, jo, delta_x, delta_y, mvxs, mvys, mvxo0, mvyo0;
   int imino, jmino, imindmv, jmindmv, vmc_dp, local_dist;
   /* Calculate Dual Prime distortions for 9 delta candidates */
   /* Note: only for P pictures! */
   /* Assign opposite and same reference pointer */
   if (pict_struct==1) {
      sameref = topref;
      oppref = botref;
   }
   else {
      sameref = botref;
      oppref = topref;
   }
   /* convert Cartesian absolute to relative motion vector
      * values (wrt current macroblock address (i,j)
      */
   mvxs = imins-(i<<1);
   mvys = jmins-(j<<1);
   /* vector for prediction from field of opposite 'parity' */
   mvxo0 = mvxs+(mvxs>0)>>1;
   /* mvxs // 2 */
   mvyo0 = mvys+(mvys>0)>>1;
   /* mvys // 2 */
   /* vertical field shift correction */
   if (pict_struct==1)
      mvyo0--;
   else
      mvyo0++;
   /* convert back to absolute coordinates */
   io0 = mvxo0+(i<<1);
   jo0 = mvyo0+(j<<1);
   /* initialize minimum dual prime distortion to large value */
   vmc_dp = 1<<30;
   for(delta_y = -1; delta_y <= 1; delta_y += 1)
      for(delta_x = -1; delta_x <= 1; delta_x += 1) {
         /* opposite field coordinates */
         io = io0+delta_x;
         jo = jo0+delta_y;
         if (io>=0&&io<=width-16<<1&&jo>=0&&jo<=height2-16<<1) {
            /* current mb location */
            /* adjacent line distance */
            /* half-pel flags */
            /* compute prediction error */
            local_dist = bdist2(sameref+(imins>>1)+width2*(jmins>>1), oppref+(io>>1)+width2*(jo>>1), mb, width2, imins&1, jmins&1, io&1, jo&1, 16);
            /* block height */
            /* update delta with least distortion vector */
            if (local_dist<vmc_dp) {
               imino = io;
               jmino = jo;
               imindmv = delta_x;
               jmindmv = delta_y;
               vmc_dp = local_dist;
            }
         }
      }
   /* current mb location */
   /* adjacent line distance */
   /* half-pel flags */
   /* end delta y loop */
   /* Compute L1 error for decision purposes */
   *dmcp = bdist1(sameref+(imins>>1)+width2*(jmins>>1), oppref+(imino>>1)+width2*(jmino>>1), mb, width2, imins&1, jmins&1, imino&1, jmino&1, 16);
   /* block height */
   *imindmvp = imindmv;
   *jmindmvp = jmindmv;
   *vmcp = vmc_dp;
}
static void dpframe_estimate(unsigned char *ref, unsigned char *mb, int i, int j, int iminf[2][2], int jminf[2][2], int *iminp, int *jminp, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
   int pref, ppred, delta_x, delta_y;
   int is, js, it, jt, ib, jb, it0, jt0, ib0, jb0;
   int imins, jmins, imint, jmint, iminb, jminb, imindmv, jmindmv;
   int vmc, local_dist;
   /* Calculate Dual Prime distortions for 9 delta candidates
      * for each of the four minimum field vectors
      * Note: only for P pictures!
      */
   /* initialize minimum dual prime distortion to large value */
   vmc = 1<<30;
   for(pref = 0; pref <= 1; pref += 1)
      for(ppred = 0; ppred <= 1; ppred += 1) {
         /* convert Cartesian absolute to relative motion vector
                * values (wrt current macroblock address (i,j)
                */
         is = iminf[pref][ppred]-(i<<1);
         js = jminf[pref][ppred]-(j<<1);
         if (pref!=ppred) goto l99999;
l99998:         ;
         /* vector for prediction from field of opposite 'parity' */
         if (topfirst) {
            /* vector for prediction of top field from bottom field */
            it0 = is+(is>0)>>1;
            jt0 = (js+(js>0)>>1)-1;
            /* vector for prediction of bottom field from top field */
            ib0 = 3*is+(is>0)>>1;
            jb0 = (3*js+(js>0)>>1)+1;
         }
         else {
            /* vector for prediction of top field from bottom field */
            it0 = 3*is+(is>0)>>1;
            jt0 = (3*js+(js>0)>>1)-1;
            /* vector for prediction of bottom field from top field */
            ib0 = is+(is>0)>>1;
            jb0 = (js+(js>0)>>1)+1;
         }
         /* convert back to absolute half-pel field picture coordinates */
         is += i<<1;
         js += j<<1;
         it0 += i<<1;
         jt0 += j<<1;
         ib0 += i<<1;
         jb0 += j<<1;
         if (is>=0&&is<=width-16<<1&&js>=0&&js<=height-16)
            for(delta_y = -1; delta_y <= 1; delta_y += 1)
               for(delta_x = -1; delta_x <= 1; delta_x += 1) {
                  /* opposite field coordinates */
                  it = it0+delta_x;
                  jt = jt0+delta_y;
                  ib = ib0+delta_x;
                  jb = jb0+delta_y;
                  if (it>=0&&it<=width-16<<1&&jt>=0&&jt<=height-16&&ib>=0&&ib<=width-16<<1&&jb>=0&&jb<=height-16) {
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* compute prediction error */
                     local_dist = bdist2(ref+(is>>1)+(width<<1)*(js>>1), ref+width+(it>>1)+(width<<1)*(jt>>1), mb, width<<1, is&1, js&1, it&1, jt&1, 8);
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* block height */
                     local_dist += bdist2(ref+width+(is>>1)+(width<<1)*(js>>1), ref+(ib>>1)+(width<<1)*(jb>>1), mb+width, width<<1, is&1, js&1, ib&1, jb&1, 8);
                     /* block height */
                     /* update delta with least distortion vector */
                     if (local_dist<vmc) {
                        imins = is;
                        jmins = js;
                        imint = it;
                        jmint = jt;
                        iminb = ib;
                        jminb = jb;
                        imindmv = delta_x;
                        jmindmv = delta_y;
                        vmc = local_dist;
                     }
                  }
               }
         goto _loop_end_2;
l99999:         ;
         /* vertical field shift adjustment */
         if (ppred==0)
            js++;
         else
            js--;
         /* mvxs and mvys scaling*/
         is <<= 1;
         js <<= 1;
         if (topfirst==ppred) {
         }
         else {
            goto _loop_end_2;
         }
         /* second field: scale by 1/3 */
         is = is>=0?(is+1)/3:-(((-is)+1)/3);
         js = js>=0?(js+1)/3:-(((-js)+1)/3);
         goto l99998;
_loop_end_2:         ;
      }
   /* Compute L1 error for decision purposes */
   local_dist = bdist1(ref+(imins>>1)+(width<<1)*(jmins>>1), ref+width+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imins&1, jmins&1, imint&1, jmint&1, 8);
   local_dist += bdist1(ref+width+(imins>>1)+(width<<1)*(jmins>>1), ref+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, imins&1, jmins&1, iminb&1, jminb&1, 8);
   *dmcp = local_dist;
   *iminp = imins;
   *jminp = jmins;
   *imindmvp = imindmv;
   *jmindmvp = jmindmv;
   *vmcp = vmc;
}
static void field_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
   int w2;
   unsigned char *mb, *toporg, *topref, *botorg, *botref;
   int var, vmc, v0, dmc, dmcfieldi, dmc8i;
   int imin, jmin, imin8u, jmin8u, imin8l, jmin8l, dmcfield, dmc8, sel, sel8u, sel8l;
   int iminf, jminf, imin8uf, jmin8uf, imin8lf, jmin8lf, dmcfieldf, dmc8f, self, sel8uf, sel8lf;
   int iminr, jminr, imin8ur, jmin8ur, imin8lr, jmin8lr, dmcfieldr, dmc8r, selr, sel8ur, sel8lr;
   int imins, jmins, ds, imindmv, jmindmv, vmc_dp, dmc_dp;
   w2 = width<<1;
   mb = cur+i+w2*j;
   if (pict_struct==2)
      mb += width;
   var = variance(mb, w2);
   if (pict_type==1)
      mbi->mb_type = 1;
   else if (pict_type==2) {
      toporg = oldorg;
      topref = oldref;
      botorg = oldorg+width;
      botref = oldref+width;
      if (secondfield)
         /* opposite parity field is in same frame */
         if (pict_struct==1) {
            /* current is top field */
            botorg = cur+width;
            botref = curref+width;
         }
         else {
            /* current is bottom field */
            toporg = cur;
            topref = curref;
         }
      field_estimate(toporg, topref, botorg, botref, mb, i, j, sxf, syf, ipflag, &imin, &jmin, &imin8u, &jmin8u, &imin8l, &jmin8l, &dmcfield, &dmc8, &sel, &sel8u, &sel8l, &imins, &jmins, &ds);
      if (M==1&&!ipflag)
         /* generic condition which permits Dual Prime */
         dpfield_estimate(topref, botref, mb, i, j, imins, jmins, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
      /* select between dual prime, field and 16x8 prediction */
      if (M==1&&!ipflag&&dmc_dp<dmc8&&dmc_dp<dmcfield) {
         /* Dual Prime prediction */
         mbi->motion_type = 3;
         dmc = dmc_dp;
         /* L1 metric */
         vmc = vmc_dp;
      }
      else if (dmc8<dmcfield) {
         /* 16x8 prediction */
         mbi->motion_type = 2;
         /* upper half block */
         vmc = dist2((sel8u?botref:topref)+(imin8u>>1)+w2*(jmin8u>>1), mb, w2, imin8u&1, jmin8u&1, 8);
         /* lower half block */
         vmc += dist2((sel8l?botref:topref)+(imin8l>>1)+w2*(jmin8l>>1), mb+8*w2, w2, imin8l&1, jmin8l&1, 8);
      }
      else {
         /* field prediction */
         mbi->motion_type = 1;
         vmc = dist2((sel?botref:topref)+(imin>>1)+w2*(jmin>>1), mb, w2, imin&1, jmin&1, 16);
      }
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
         mbi->mb_type = 1;
      else {
         /* zero MV field prediction from same parity ref. field
                * (not allowed if ipflag is set)
                */
         if (!ipflag)
            v0 = dist2((pict_struct==2?botref:topref)+i+w2*j, mb, w2, 0, 0, 16);
         if (ipflag||4*v0>5*vmc&&v0>=9*256) {
            var = vmc;
            mbi->mb_type = 8;
            if (mbi->motion_type==1) {
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
               ((mbi->mv_field_sel)[0])[0] = sel;
            }
            else if (mbi->motion_type==3) {
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imins-(i<<1);
               (((mbi->MV)[0])[0])[1] = jmins-(j<<1);
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
               (((mbi->MV)[0])[0])[0] = imin8u-(i<<1);
               (((mbi->MV)[0])[0])[1] = jmin8u-(j<<1);
               (((mbi->MV)[1])[0])[0] = imin8l-(i<<1);
               (((mbi->MV)[1])[0])[1] = jmin8l-(j+8<<1);
               ((mbi->mv_field_sel)[0])[0] = sel8u;
               ((mbi->mv_field_sel)[1])[0] = sel8l;
            }
         }
         else {
            /* No MC */
            var = v0;
            mbi->mb_type = 0;
            mbi->motion_type = 1;
            (((mbi->MV)[0])[0])[0] = 0;
            (((mbi->MV)[0])[0])[1] = 0;
            ((mbi->mv_field_sel)[0])[0] = pict_struct==2;
         }
      }
   }
   else {
      /* forward prediction */
      field_estimate(oldorg, oldref, oldorg+width, oldref+width, mb, i, j, sxf, syf, 0, &iminf, &jminf, &imin8uf, &jmin8uf, &imin8lf, &jmin8lf, &dmcfieldf, &dmc8f, &self, &sel8uf, &sel8lf, &imins, &jmins, &ds);
      /* backward prediction */
      field_estimate(neworg, newref, neworg+width, newref+width, mb, i, j, sxb, syb, 0, &iminr, &jminr, &imin8ur, &jmin8ur, &imin8lr, &jmin8lr, &dmcfieldr, &dmc8r, &selr, &sel8ur, &sel8lr, &imins, &jmins, &ds);
      /* calculate distances for bidirectional prediction */
      /* field */
      dmcfieldi = bdist1(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
      /* 16x8 upper half block */
      dmc8i = bdist1(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
      /* 16x8 lower half block */
      dmc8i += bdist1(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
      /* select prediction type of minimum distance */
      if (dmcfieldi<dmc8i&&dmcfieldi<dmcfieldf&&dmcfieldi<dmc8f&&dmcfieldi<dmcfieldr&&dmcfieldi<dmc8r) {
         /* field, interpolated */
         mbi->mb_type = 8|4;
         mbi->motion_type = 1;
         vmc = bdist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
      }
      else if (dmc8i<dmcfieldf&&dmc8i<dmc8f&&dmc8i<dmcfieldr&&dmc8i<dmc8r) {
         /* 16x8, interpolated */
         mbi->mb_type = 8|4;
         mbi->motion_type = 2;
         /* upper half block */
         vmc = bdist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
         /* lower half block */
         vmc += bdist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
      }
      else if (dmcfieldf<dmc8f&&dmcfieldf<dmcfieldr&&dmcfieldf<dmc8r) {
         /* field, forward */
         mbi->mb_type = 8;
         mbi->motion_type = 1;
         vmc = dist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), mb, w2, iminf&1, jminf&1, 16);
      }
      else if (dmc8f<dmcfieldr&&dmc8f<dmc8r) {
         /* 16x8, forward */
         mbi->mb_type = 8;
         mbi->motion_type = 2;
         /* upper half block */
         vmc = dist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), mb, w2, imin8uf&1, jmin8uf&1, 8);
         /* lower half block */
         vmc += dist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, 8);
      }
      else if (dmcfieldr<dmc8r) {
         /* field, backward */
         mbi->mb_type = 4;
         mbi->motion_type = 1;
         vmc = dist2(newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminr&1, jminr&1, 16);
      }
      else {
         /* 16x8, backward */
         mbi->mb_type = 4;
         mbi->motion_type = 2;
         /* upper half block */
         vmc = dist2(newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8ur&1, jmin8ur&1, 8);
         /* lower half block */
         vmc += dist2(newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lr&1, jmin8lr&1, 8);
      }
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
         mbi->mb_type = 1;
      else {
         var = vmc;
         if (mbi->motion_type==1) {
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
            ((mbi->mv_field_sel)[0])[0] = self;
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
            ((mbi->mv_field_sel)[0])[1] = selr;
         }
         else {
            /* forward */
            (((mbi->MV)[0])[0])[0] = imin8uf-(i<<1);
            (((mbi->MV)[0])[0])[1] = jmin8uf-(j<<1);
            ((mbi->mv_field_sel)[0])[0] = sel8uf;
            (((mbi->MV)[1])[0])[0] = imin8lf-(i<<1);
            (((mbi->MV)[1])[0])[1] = jmin8lf-(j+8<<1);
            ((mbi->mv_field_sel)[1])[0] = sel8lf;
            /* backward */
            (((mbi->MV)[0])[1])[0] = imin8ur-(i<<1);
            (((mbi->MV)[0])[1])[1] = jmin8ur-(j<<1);
            ((mbi->mv_field_sel)[0])[1] = sel8ur;
            (((mbi->MV)[1])[1])[0] = imin8lr-(i<<1);
            (((mbi->MV)[1])[1])[1] = jmin8lr-(j+8<<1);
            ((mbi->mv_field_sel)[1])[1] = sel8lr;
         }
      }
   }
   mbi->var = var;
}
static void field_estimate(unsigned char *toporg, unsigned char *topref, unsigned char *botorg, unsigned char *botref, unsigned char *mb, int i, int j, int sx, int sy, int ipflag, int *iminp, int *jminp, int *imin8up, int *jmin8up, int *imin8lp, int *jmin8lp, int *dfieldp, int *d8p, int *selp, int *sel8up, int *sel8lp, int *iminsp, int *jminsp, int *dsp)
{
   int dt, db, imint, jmint, iminb, jminb, notop, nobot;
   /* if ipflag is set, predict from field of opposite parity only */
   notop = ipflag&&pict_struct==1;
   nobot = ipflag&&pict_struct==2;
   /* field prediction */
   /* predict current field from top field */
   if (notop)
      dt = 65536;
   else
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &imint, &jmint);
   /* predict current field from bottom field */
   if (nobot)
      db = 65536;
   else
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &iminb, &jminb);
   /* same parity prediction (only valid if ipflag==0) */
   if (pict_struct==1) {
      *iminsp = imint;
      *jminsp = jmint;
      *dsp = dt;
   }
   else {
      *iminsp = iminb;
      *jminsp = jminb;
      *dsp = db;
   }
   /* select field prediction */
   if (dt<=db) {
      *dfieldp = dt;
      *iminp = imint;
      *jminp = jmint;
      *selp = 0;
   }
   else {
      *dfieldp = db;
      *iminp = iminb;
      *jminp = jminb;
      *selp = 1;
   }
   /* 16x8 motion compensation */
   /* predict upper half field from top field */
   if (notop)
      dt = 65536;
   else
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
   /* predict upper half field from bottom field */
   if (nobot)
      db = 65536;
   else
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
   /* select prediction for upper half field */
   if (dt<=db) {
      *d8p = dt;
      *imin8up = imint;
      *jmin8up = jmint;
      *sel8up = 0;
   }
   else {
      *d8p = db;
      *imin8up = iminb;
      *jmin8up = jminb;
      *sel8up = 1;
   }
   /* predict lower half field from top field */
   if (notop)
      dt = 65536;
   else
      dt = fullsearch(toporg, topref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
   /* predict lower half field from bottom field */
   if (nobot)
      db = 65536;
   else
      db = fullsearch(botorg, botref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
   /* select prediction for lower half field */
   if (dt<=db) {
      *d8p += dt;
      *imin8lp = imint;
      *jmin8lp = jmint;
      *sel8lp = 0;
   }
   else {
      *d8p += db;
      *imin8lp = iminb;
      *jmin8lp = jminb;
      *sel8lp = 1;
   }
}
static void frame_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi)
{
   int imin, jmin, iminf, jminf, iminr, jminr;
   int imint, jmint, iminb, jminb;
   int imintf, jmintf, iminbf, jminbf;
   int imintr, jmintr, iminbr, jminbr;
   int var, v0;
   int dmc, dmcf, dmcr, dmci, vmc, vmcf, vmcr, vmci;
   int dmcfield, dmcfieldf, dmcfieldr, dmcfieldi;
   int tsel, bsel, tself, bself, tselr, bselr;
   unsigned char *mb;
   int imins[2][2], jmins[2][2];
   int imindp, jmindp, imindmv, jmindmv, dmc_dp, vmc_dp;
   mb = cur+i+width*j;
   var = variance(mb, width);
   if (pict_type==1)
      mbi->mb_type = 1;
   else if (pict_type==2) {
      if (frame_pred_dct) {
         dmc = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &imin, &jmin);
         vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
         mbi->motion_type = 2;
      }
      else {
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &imin, &jmin, &imint, &jmint, &iminb, &jminb, &dmc, &dmcfield, &tsel, &bsel, imins, jmins);
         if (M==1)
            dpframe_estimate(oldref, mb, i, j>>1, imins, jmins, &imindp, &jmindp, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
         /* select between dual prime, frame and field prediction */
         if (M==1&&dmc_dp<dmc&&dmc_dp<dmcfield) {
            mbi->motion_type = 3;
            dmc = dmc_dp;
            vmc = vmc_dp;
         }
         else if (dmc<=dmcfield) {
            mbi->motion_type = 2;
            vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
         }
         else {
            mbi->motion_type = 1;
            dmc = dmcfield;
            vmc = dist2(oldref+(tsel?width:0)+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imint&1, jmint&1, 8);
            vmc += dist2(oldref+(bsel?width:0)+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, iminb&1, jminb&1, 8);
         }
      }
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
         mbi->mb_type = 1;
      else {
         /* select between MC / No-MC
                *
                * use No-MC if var(No-MC) <= 1.25*var(MC)
                * (i.e slightly biased towards No-MC)
                *
                * blocks with small prediction error are always coded as No-MC
                * (requires no motion vectors, allows skipping)
                */
         v0 = dist2(oldref+i+width*j, mb, width, 0, 0, 16);
         if (4*v0>5*vmc&&v0>=9*256) {
            /* use MC */
            var = vmc;
            mbi->mb_type = 8;
            if (mbi->motion_type==2) {
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
            }
            else if (mbi->motion_type==3) {
               /* these are FRAME vectors */
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imindp-(i<<1);
               (((mbi->MV)[0])[0])[1] = (jmindp<<1)-(j<<1);
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
               /* these are FRAME vectors */
               (((mbi->MV)[0])[0])[0] = imint-(i<<1);
               (((mbi->MV)[0])[0])[1] = (jmint<<1)-(j<<1);
               (((mbi->MV)[1])[0])[0] = iminb-(i<<1);
               (((mbi->MV)[1])[0])[1] = (jminb<<1)-(j<<1);
               ((mbi->mv_field_sel)[0])[0] = tsel;
               ((mbi->mv_field_sel)[1])[0] = bsel;
            }
         }
         else {
            /* No-MC */
            var = v0;
            mbi->mb_type = 0;
            mbi->motion_type = 2;
            (((mbi->MV)[0])[0])[0] = 0;
            (((mbi->MV)[0])[0])[1] = 0;
         }
      }
   }
   else {
      if (frame_pred_dct) {
         /* forward */
         dmcf = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &iminf, &jminf);
         vmcf = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
         /* backward */
         dmcr = fullsearch(neworg, newref, mb, width, i, j, sxb, syb, 16, width, height, &iminr, &jminr);
         vmcr = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
         /* interpolated (bidirectional) */
         vmci = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
         /* decisions */
         /* select between forward/backward/interpolated prediction:
                * use the one with smallest mean sqaured prediction error
                */
         if (vmcf<=vmcr&&vmcf<=vmci) {
            vmc = vmcf;
            mbi->mb_type = 8;
         }
         else if (vmcr<=vmci) {
            vmc = vmcr;
            mbi->mb_type = 4;
         }
         else {
            vmc = vmci;
            mbi->mb_type = 8|4;
         }
         mbi->motion_type = 2;
      }
      else {
         /* forward prediction */
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &iminf, &jminf, &imintf, &jmintf, &iminbf, &jminbf, &dmcf, &dmcfieldf, &tself, &bself, imins, jmins);
         /* backward prediction */
         frame_estimate(neworg, newref, mb, i, j, sxb, syb, &iminr, &jminr, &imintr, &jmintr, &iminbr, &jminbr, &dmcr, &dmcfieldr, &tselr, &bselr, imins, jmins);
         /* calculate interpolated distance */
         /* frame */
         dmci = bdist1(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
         /* top field */
         dmcfieldi = bdist1(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
         /* bottom field */
         dmcfieldi += bdist1(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
         /* select prediction type of minimum distance from the
                * six candidates (field/frame * forward/backward/interpolated)
                */
         if (dmci<dmcfieldi&&dmci<dmcf&&dmci<dmcfieldf&&dmci<dmcr&&dmci<dmcfieldr) {
            /* frame, interpolated */
            mbi->mb_type = 8|4;
            mbi->motion_type = 2;
            vmc = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
         }
         else if (dmcfieldi<dmcf&&dmcfieldi<dmcfieldf&&dmcfieldi<dmcr&&dmcfieldi<dmcfieldr) {
            /* field, interpolated */
            mbi->mb_type = 8|4;
            mbi->motion_type = 1;
            vmc = bdist2(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
            vmc += bdist2(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
         }
         else if (dmcf<dmcfieldf&&dmcf<dmcr&&dmcf<dmcfieldr) {
            /* frame, forward */
            mbi->mb_type = 8;
            mbi->motion_type = 2;
            vmc = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
         }
         else if (dmcfieldf<dmcr&&dmcfieldf<dmcfieldr) {
            /* field, forward */
            mbi->mb_type = 8;
            mbi->motion_type = 1;
            vmc = dist2(oldref+(tself?width:0)+(imintf>>1)+(width<<1)*(jmintf>>1), mb, width<<1, imintf&1, jmintf&1, 8);
            vmc += dist2(oldref+(bself?width:0)+(iminbf>>1)+(width<<1)*(jminbf>>1), mb+width, width<<1, iminbf&1, jminbf&1, 8);
         }
         else if (dmcr<dmcfieldr) {
            /* frame, backward */
            mbi->mb_type = 4;
            mbi->motion_type = 2;
            vmc = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
         }
         else {
            /* field, backward */
            mbi->mb_type = 4;
            mbi->motion_type = 1;
            vmc = dist2(newref+(tselr?width:0)+(imintr>>1)+(width<<1)*(jmintr>>1), mb, width<<1, imintr&1, jmintr&1, 8);
            vmc += dist2(newref+(bselr?width:0)+(iminbr>>1)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbr&1, jminbr&1, 8);
         }
      }
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
         mbi->mb_type = 1;
      else {
         var = vmc;
         if (mbi->motion_type==2) {
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
         }
         else {
            /* these are FRAME vectors */
            /* forward */
            (((mbi->MV)[0])[0])[0] = imintf-(i<<1);
            (((mbi->MV)[0])[0])[1] = (jmintf<<1)-(j<<1);
            (((mbi->MV)[1])[0])[0] = iminbf-(i<<1);
            (((mbi->MV)[1])[0])[1] = (jminbf<<1)-(j<<1);
            ((mbi->mv_field_sel)[0])[0] = tself;
            ((mbi->mv_field_sel)[1])[0] = bself;
            /* backward */
            (((mbi->MV)[0])[1])[0] = imintr-(i<<1);
            (((mbi->MV)[0])[1])[1] = (jmintr<<1)-(j<<1);
            (((mbi->MV)[1])[1])[0] = iminbr-(i<<1);
            (((mbi->MV)[1])[1])[1] = (jminbr<<1)-(j<<1);
            ((mbi->mv_field_sel)[0])[1] = tselr;
            ((mbi->mv_field_sel)[1])[1] = bselr;
         }
      }
   }
   mbi->var = var;
}
static void frame_estimate(unsigned char *org, unsigned char *ref, unsigned char *mb, int i, int j, int sx, int sy, int *iminp, int *jminp, int *imintp, int *jmintp, int *iminbp, int *jminbp, int *dframep, int *dfieldp, int *tselp, int *bselp, int imins[2][2], int jmins[2][2])
{
   int dt, db, dmint, dminb;
   int imint, iminb, jmint, jminb;
   /* frame prediction */
   *dframep = fullsearch(org, ref, mb, width, i, j, sx, sy, 16, width, height, iminp, jminp);
   /* predict top field from top field */
   dt = fullsearch(org, ref, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
   /* predict top field from bottom field */
   db = fullsearch(org+width, ref+width, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
   imins[0][0] = imint;
   jmins[0][0] = jmint;
   imins[1][0] = iminb;
   jmins[1][0] = jminb;
   /* select prediction for top field */
   if (dt<=db) {
      dmint = dt;
      *imintp = imint;
      *jmintp = jmint;
      *tselp = 0;
   }
   else {
      dmint = db;
      *imintp = iminb;
      *jmintp = jminb;
      *tselp = 1;
   }
   /* predict bottom field from top field */
   dt = fullsearch(org, ref, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
   /* predict bottom field from bottom field */
   db = fullsearch(org+width, ref+width, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
   imins[0][1] = imint;
   jmins[0][1] = jmint;
   imins[1][1] = iminb;
   jmins[1][1] = jminb;
   /* select prediction for bottom field */
   if (db<=dt) {
      dminb = db;
      *iminbp = iminb;
      *jminbp = jminb;
      *bselp = 1;
   }
   else {
      dminb = dt;
      *iminbp = imint;
      *jminbp = jmint;
      *bselp = 0;
   }
   *dfieldp = dmint+dminb;
}
static int fullsearch(unsigned char *org, unsigned char *ref, unsigned char *blk, int lx, int i0, int j0, int sx, int sy, int h, int xmax, int ymax, int *iminp, int *jminp)
{
   int i, j, imin, jmin, ilow, ihigh, jlow, jhigh;
   int d, dmin;
   int k, l, sxy;
   ilow = i0-sx;
   ihigh = i0+sx;
   if (ilow<0)
      ilow = 0;
   if (ihigh>xmax-16)
      ihigh = xmax-16;
   jlow = j0-sy;
   jhigh = j0+sy;
   if (jlow<0)
      jlow = 0;
   if (jhigh>ymax-h)
      jhigh = ymax-h;
   /* full pel search, spiraling outwards */
   imin = i0;
   jmin = j0;
   dmin = dist1(org+imin+lx*jmin, blk, lx, 0, 0, h, 65536);
   sxy = sx>sy?sx:sy;
   for(l = 1; l <= sxy; l += 1) {
      i = i0-l;
      j = j0-l;
      for(k = 0; k <= 8*l-1; k += 1) {
         if (i>=ilow&&i<=ihigh&&j>=jlow&&j<=jhigh) {
            d = dist1(org+i+lx*j, blk, lx, 0, 0, h, dmin);
            if (d<dmin) {
               dmin = d;
               imin = i;
               jmin = j;
            }
         }
         if (k<2*l)
            i++;
         else if (k<4*l)
            j++;
         else if (k<6*l)
            i--;
         else
            j--;
      }
   }
   /* half pel */
   dmin = 65536;
   imin <<= 1;
   jmin <<= 1;
   ilow = imin-(imin>0);
   ihigh = imin+(imin<xmax-16<<1);
   jlow = jmin-(jmin>0);
   jhigh = jmin+(jmin<ymax-h<<1);
   for(j = jlow; j <= jhigh; j += 1)
      for(i = ilow; i <= ihigh; i += 1) {
         d = dist1(ref+(i>>1)+lx*(j>>1), blk, lx, i&1, j&1, h, dmin);
         if (d<dmin) {
            dmin = d;
            imin = i;
            jmin = j;
         }
      }
   *iminp = imin;
   *jminp = jmin;
   return dmin;
}
static int variance(unsigned char *p, int lx)
{
   int i, j;
   unsigned int v, s, s2;
   s = s2 = 0;
   for(j = 0; j <= 15; j += 1) {
      for(i = 0; i <= 15; i += 1) {
         v = *p++;
         s += v;
         s2 += v*v;
      }
      p += lx-16;
   }
   return s2-s*s/256;
}
void motion_estimation(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
   int i, j;
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16) {
      for(i = 0; i <= width-1; i += 16) {
         if (pict_struct==3)
            frame_ME(oldorg, neworg, oldref, newref, cur, i, j, sxf, syf, sxb, syb, mbi);
         else
            field_ME(oldorg, neworg, oldref, newref, cur, curref, i, j, sxf, syf, sxb, syb, mbi, secondfield, ipflag);
         mbi++;
      }
      if (!quiet) {
         _IO_putc('.', stderr);
         fflush(stderr);
      }
   }
   if (!quiet)
      _IO_putc('\n', stderr);
}
static void init()
{
   int i, size;
   static int block_count_tab[3] = {6, 8, 12};
   initbits();
   init_fdct();
   init_idct();
   /* round picture dimensions to nearest multiple of 16 or 32 */
   mb_width = (horizontal_size+15)/16;
   mb_height = prog_seq?(vertical_size+15)/16:2*((vertical_size+31)/32);
   mb_height2 = fieldpic?mb_height>>1:mb_height;
   /* for field pictures */
   width = 16*mb_width;
   height = 16*mb_height;
   chrom_width = chroma_format==3?width:width>>1;
   chrom_height = chroma_format!=1?height:height>>1;
   height2 = fieldpic?height>>1:height;
   width2 = fieldpic?width<<1:width;
   chrom_width2 = fieldpic?chrom_width<<1:chrom_width;
   block_count = block_count_tab[chroma_format-1];
   /* clip table */
   if (!(clp = (unsigned char *) malloc(1024)))
      error("malloc failed\n");
   clp += 384;
   for(i = -384; i <= 639; i += 1)
      clp[i] = i<0?0:i>255?255:i;
   for(i = 0; i <= 2; i += 1) {
      size = i==0?width*height:chrom_width*chrom_height;
      if (!(newrefframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(oldrefframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(auxframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(neworgframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(oldorgframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(auxorgframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
      if (!(predframe[i] = (unsigned char *) malloc(size)))
         error("malloc failed\n");
   }
   mbinfo = (struct mbinfo *) malloc(mb_width*mb_height2*sizeof(struct mbinfo ));
   if (!mbinfo)
      error("malloc failed\n");
   blocks = (short (*)[64]) malloc(mb_width*mb_height2*block_count*sizeof(short[64]));
   if (!blocks)
      error("malloc failed\n");
   /* open statistics output file */
   if (statname[0]=='-')
      statfile = stdout;
   else if (!(statfile = fopen(statname, "w"))) {
      sprintf(errortext, "Couldn't create statistics output file %s", statname);
      error(errortext);
   }
}
static void readparmfile(char *fname)
{
   int i;
   int h, m, s, f;
   FILE *fd;
   char line[256];
   static double ratetab[8] = {24000.0/1001.0, 24.0, 25.0, 30000.0/1001.0, 30.0, 50.0, 60000.0/1001.0, 60.0};
   extern int r, Xi, Xb, Xp, d0i, d0p, d0b;
   /* rate control */
   extern double avg_act;
   /* rate control */
   if (!(fd = fopen(fname, "r"))) {
      sprintf(errortext, "Couldn't open parameter file %s", fname);
      error(errortext);
   }
   fgets(id_string, 254, fd);
   fgets(line, 254, fd);
   sscanf(line, "%s", tplorg);
   fgets(line, 254, fd);
   sscanf(line, "%s", tplref);
   fgets(line, 254, fd);
   sscanf(line, "%s", iqname);
   fgets(line, 254, fd);
   sscanf(line, "%s", niqname);
   fgets(line, 254, fd);
   sscanf(line, "%s", statname);
   fgets(line, 254, fd);
   sscanf(line, "%d", &inputtype);
   fgets(line, 254, fd);
   sscanf(line, "%d", &nframes);
   fgets(line, 254, fd);
   sscanf(line, "%d", &frame0);
   fgets(line, 254, fd);
   sscanf(line, "%d:%d:%d:%d", &h, &m, &s, &f);
   fgets(line, 254, fd);
   sscanf(line, "%d", &N);
   fgets(line, 254, fd);
   sscanf(line, "%d", &M);
   fgets(line, 254, fd);
   sscanf(line, "%d", &mpeg1);
   fgets(line, 254, fd);
   sscanf(line, "%d", &fieldpic);
   fgets(line, 254, fd);
   sscanf(line, "%d", &horizontal_size);
   fgets(line, 254, fd);
   sscanf(line, "%d", &vertical_size);
   fgets(line, 254, fd);
   sscanf(line, "%d", &aspectratio);
   fgets(line, 254, fd);
   sscanf(line, "%d", &frame_rate_code);
   fgets(line, 254, fd);
   sscanf(line, "%lf", &bit_rate);
   fgets(line, 254, fd);
   sscanf(line, "%d", &vbv_buffer_size);
   fgets(line, 254, fd);
   sscanf(line, "%d", &low_delay);
   fgets(line, 254, fd);
   sscanf(line, "%d", &constrparms);
   fgets(line, 254, fd);
   sscanf(line, "%d", &profile);
   fgets(line, 254, fd);
   sscanf(line, "%d", &level);
   fgets(line, 254, fd);
   sscanf(line, "%d", &prog_seq);
   fgets(line, 254, fd);
   sscanf(line, "%d", &chroma_format);
   fgets(line, 254, fd);
   sscanf(line, "%d", &video_format);
   fgets(line, 254, fd);
   sscanf(line, "%d", &color_primaries);
   fgets(line, 254, fd);
   sscanf(line, "%d", &transfer_characteristics);
   fgets(line, 254, fd);
   sscanf(line, "%d", &matrix_coefficients);
   fgets(line, 254, fd);
   sscanf(line, "%d", &display_horizontal_size);
   fgets(line, 254, fd);
   sscanf(line, "%d", &display_vertical_size);
   fgets(line, 254, fd);
   sscanf(line, "%d", &dc_prec);
   fgets(line, 254, fd);
   sscanf(line, "%d", &topfirst);
   fgets(line, 254, fd);
   sscanf(line, "%d %d %d", frame_pred_dct_tab, frame_pred_dct_tab+1, frame_pred_dct_tab+2);
   fgets(line, 254, fd);
   sscanf(line, "%d %d %d", conceal_tab, conceal_tab+1, conceal_tab+2);
   fgets(line, 254, fd);
   sscanf(line, "%d %d %d", qscale_tab, qscale_tab+1, qscale_tab+2);
   fgets(line, 254, fd);
   sscanf(line, "%d %d %d", intravlc_tab, intravlc_tab+1, intravlc_tab+2);
   fgets(line, 254, fd);
   sscanf(line, "%d %d %d", altscan_tab, altscan_tab+1, altscan_tab+2);
   fgets(line, 254, fd);
   sscanf(line, "%d", &repeatfirst);
   fgets(line, 254, fd);
   sscanf(line, "%d", &prog_frame);
   /* intra slice interval refresh period */
   fgets(line, 254, fd);
   sscanf(line, "%d", &P);
   fgets(line, 254, fd);
   sscanf(line, "%d", &r);
   fgets(line, 254, fd);
   sscanf(line, "%lf", &avg_act);
   fgets(line, 254, fd);
   sscanf(line, "%d", &Xi);
   fgets(line, 254, fd);
   sscanf(line, "%d", &Xp);
   fgets(line, 254, fd);
   sscanf(line, "%d", &Xb);
   fgets(line, 254, fd);
   sscanf(line, "%d", &d0i);
   fgets(line, 254, fd);
   sscanf(line, "%d", &d0p);
   fgets(line, 254, fd);
   sscanf(line, "%d", &d0b);
   if (N<1)
      error("N must be positive");
   if (M<1)
      error("M must be positive");
   if (N%M!=0)
      error("N must be an integer multiple of M");
   motion_data = (struct motion_data *) malloc(M*sizeof(struct motion_data ));
   if (!motion_data)
      error("malloc failed\n");
   for(i = 0; i <= M-1; i += 1) {
      fgets(line, 254, fd);
      sscanf(line, "%d %d %d %d", &motion_data[i].forw_hor_f_code, &motion_data[i].forw_vert_f_code, &motion_data[i].sxf, &motion_data[i].syf);
      if (i!=0) {
         fgets(line, 254, fd);
         sscanf(line, "%d %d %d %d", &motion_data[i].back_hor_f_code, &motion_data[i].back_vert_f_code, &motion_data[i].sxb, &motion_data[i].syb);
      }
   }
   fclose(fd);
   /* make flags boolean (x!=0 -> x=1) */
   mpeg1 = !!mpeg1;
   fieldpic = !!fieldpic;
   low_delay = !!low_delay;
   constrparms = !!constrparms;
   prog_seq = !!prog_seq;
   topfirst = !!topfirst;
   for(i = 0; i <= 2; i += 1) {
      frame_pred_dct_tab[i] = !!frame_pred_dct_tab[i];
      conceal_tab[i] = !!conceal_tab[i];
      qscale_tab[i] = !!qscale_tab[i];
      intravlc_tab[i] = !!intravlc_tab[i];
      altscan_tab[i] = !!altscan_tab[i];
   }
   repeatfirst = !!repeatfirst;
   prog_frame = !!prog_frame;
   /* make sure MPEG specific parameters are valid */
   range_checks();
   frame_rate = ratetab[frame_rate_code-1];
   /* timecode -> frame number */
   tc0 = h;
   tc0 = 60*tc0+m;
   tc0 = 60*tc0+s;
   tc0 = (int) (frame_rate+0.5)*tc0+f;
   if (!mpeg1)
      profile_and_level_checks();
   else {
      /* MPEG-1 */
      if (constrparms)
         if (horizontal_size>768||vertical_size>576||(horizontal_size+15)/16*((vertical_size+15)/16)>396||(horizontal_size+15)/16*((vertical_size+15)/16)*frame_rate>396*25.0||frame_rate>30.0) {
            if (!quiet)
               fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
            constrparms = 0;
         }
      if (constrparms) {
         i = 0;
l99996:         ;
         if (!(i<M)) goto _break_3;
         if (motion_data[i].forw_hor_f_code>4) goto l99999;
         if (motion_data[i].forw_vert_f_code>4) goto l99998;
         if (i!=0) goto l99997;
l99994:         ;
         i++;
         goto l99996;
l99997:         ;
         if (motion_data[i].back_hor_f_code>4) goto l99995;
         if (motion_data[i].back_vert_f_code>4) {
         }
         else {
            goto l99994;
         }
         if (!quiet)
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
         constrparms = 0;
         goto _break_3;
l99995:         ;
         if (!quiet)
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
         constrparms = 0;
         goto _break_3;
l99998:         ;
         if (!quiet)
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
         constrparms = 0;
         goto _break_3;
l99999:         ;
         if (!quiet)
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
         constrparms = 0;
_break_3:         ;
      }
   }
   /* relational checks */
   if (mpeg1) {
      if (!prog_seq) {
         if (!quiet)
            fprintf(stderr, "Warning: setting progressive_sequence = 1\n");
         prog_seq = 1;
      }
      if (chroma_format!=1) {
         if (!quiet)
            fprintf(stderr, "Warning: setting chroma_format = 1 (4:2:0)\n");
         chroma_format = 1;
      }
      if (dc_prec!=0) {
         if (!quiet)
            fprintf(stderr, "Warning: setting intra_dc_precision = 0\n");
         dc_prec = 0;
      }
      for(i = 0; i <= 2; i += 1)
         if (qscale_tab[i]) {
            if (!quiet)
               fprintf(stderr, "Warning: setting qscale_tab[%d] = 0\n", i);
            qscale_tab[i] = 0;
         }
      for(i = 0; i <= 2; i += 1)
         if (intravlc_tab[i]) {
            if (!quiet)
               fprintf(stderr, "Warning: setting intravlc_tab[%d] = 0\n", i);
            intravlc_tab[i] = 0;
         }
      for(i = 0; i <= 2; i += 1)
         if (altscan_tab[i]) {
            if (!quiet)
               fprintf(stderr, "Warning: setting altscan_tab[%d] = 0\n", i);
            altscan_tab[i] = 0;
         }
   }
   if (!mpeg1&&constrparms) {
      if (!quiet)
         fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
      constrparms = 0;
   }
   if (prog_seq&&!prog_frame) {
      if (!quiet)
         fprintf(stderr, "Warning: setting progressive_frame = 1\n");
      prog_frame = 1;
   }
   if (prog_frame&&fieldpic) {
      if (!quiet)
         fprintf(stderr, "Warning: setting field_pictures = 0\n");
      fieldpic = 0;
   }
   if (!prog_frame&&repeatfirst) {
      if (!quiet)
         fprintf(stderr, "Warning: setting repeat_first_field = 0\n");
      repeatfirst = 0;
   }
   if (prog_frame)
      for(i = 0; i <= 2; i += 1)
         if (!frame_pred_dct_tab[i]) {
            if (!quiet)
               fprintf(stderr, "Warning: setting frame_pred_frame_dct[%d] = 1\n", i);
            frame_pred_dct_tab[i] = 1;
         }
   if (prog_seq&&!repeatfirst&&topfirst) {
      if (!quiet)
         fprintf(stderr, "Warning: setting top_field_first = 0\n");
      topfirst = 0;
   }
   /* search windows */
   for(i = 0; i <= M-1; i += 1) {
      if (motion_data[i].sxf>(4<<motion_data[i].forw_hor_f_code)-1) {
         if (!quiet)
            fprintf(stderr, "Warning: reducing forward horizontal search width to %d\n", (4<<motion_data[i].forw_hor_f_code)-1);
         motion_data[i].sxf = (4<<motion_data[i].forw_hor_f_code)-1;
      }
      if (motion_data[i].syf>(4<<motion_data[i].forw_vert_f_code)-1) {
         if (!quiet)
            fprintf(stderr, "Warning: reducing forward vertical search width to %d\n", (4<<motion_data[i].forw_vert_f_code)-1);
         motion_data[i].syf = (4<<motion_data[i].forw_vert_f_code)-1;
      }
      if (i!=0) {
         if (motion_data[i].sxb>(4<<motion_data[i].back_hor_f_code)-1) {
            if (!quiet)
               fprintf(stderr, "Warning: reducing backward horizontal search width to %d\n", (4<<motion_data[i].back_hor_f_code)-1);
            motion_data[i].sxb = (4<<motion_data[i].back_hor_f_code)-1;
         }
         if (motion_data[i].syb>(4<<motion_data[i].back_vert_f_code)-1) {
            if (!quiet)
               fprintf(stderr, "Warning: reducing backward vertical search width to %d\n", (4<<motion_data[i].back_vert_f_code)-1);
            motion_data[i].syb = (4<<motion_data[i].back_vert_f_code)-1;
         }
      }
   }
}
static void readquantmat()
{
   int i, v;
   FILE *fd;
   if (iqname[0]=='-') {
      /* use default intra matrix */
      load_iquant = 0;
      for(i = 0; i <= 63; i += 1)
         intra_q[i] = default_intra_quantizer_matrix[i];
   }
   else {
      /* read customized intra matrix */
      load_iquant = 1;
      if (!(fd = fopen(iqname, "r"))) {
         sprintf(errortext, "Couldn't open quant matrix file %s", iqname);
         error(errortext);
      }
      for(i = 0; i <= 63; i += 1) {
         fscanf(fd, "%d", &v);
         if (v<1||v>255)
            error("invalid value in quant matrix");
         intra_q[i] = v;
      }
      fclose(fd);
   }
   if (niqname[0]=='-') {
      /* use default non-intra matrix */
      load_niquant = 0;
      for(i = 0; i <= 63; i += 1)
         inter_q[i] = 16;
   }
   else {
      /* read customized non-intra matrix */
      load_niquant = 1;
      if (!(fd = fopen(niqname, "r"))) {
         sprintf(errortext, "Couldn't open quant matrix file %s", niqname);
         error(errortext);
      }
      for(i = 0; i <= 63; i += 1) {
         fscanf(fd, "%d", &v);
         if (v<1||v>255)
            error("invalid value in quant matrix");
         inter_q[i] = v;
      }
      fclose(fd);
   }
}
char pbm_getc(FILE *file)
{
   char ch;
   ch = _IO_getc(file);
   if (ch=='#')
      do {
         ch = _IO_getc(file);
      }
      while (ch!='\n'&&ch!='\r');
   return ch;
}
int pbm_getint(FILE *file)
{
   char ch;
   int i;
   do {
      ch = pbm_getc(file);
   }
   while (ch==' '||ch=='\t'||ch=='\n'||ch=='\r');
   i = 0;
   do {
      i = i*10+ch-'0';
      ch = pbm_getc(file);
   }
   while (ch>='0'&&ch<='9');
   return i;
}
void predict(unsigned char *reff[], unsigned char *refb[], unsigned char *cur[3], int secondfield, struct mbinfo *mbi)
{
   int i, j, k;
   k = 0;
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16)
      for(i = 0; i <= width-1; i += 16) {
         predict_mb(reff, refb, cur, width, i, j, pict_type, pict_struct, mbi[k].mb_type, mbi[k].motion_type, secondfield, mbi[k].MV, mbi[k].mv_field_sel, mbi[k].dmvector);
         k++;
      }
}
static void calc_DMV(int DMV[][2], int *dmvector, int mvx, int mvy)
{
   if (pict_struct==3)
      if (topfirst) {
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
         DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1]-1;
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
         DMV[1][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
      else {
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
         DMV[0][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]-1;
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (mvx+(mvx>0)>>1)+dmvector[0];
         DMV[1][1] = (mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
   else {
      /* vector for prediction from field of opposite 'parity' */
      DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
      DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1];
      /* correct for vertical field shift */
      if (pict_struct==1)
         DMV[0][1]--;
      else
         DMV[0][1]++;
   }
}
static void clearblock(unsigned char *cur[], int i0, int j0)
{
   int i, j, w, h;
   unsigned char *p;
   p = cur[0]+(pict_struct==2?width:0)+i0+width2*j0;
   for(j = 0; j <= 15; j += 1) {
      for(i = 0; i <= 15; i += 1)
         p[i] = 128;
      p += width2;
   }
   w = h = 16;
   if (chroma_format!=3) {
      i0 >>= 1;
      w >>= 1;
   }
   if (chroma_format==1) {
      j0 >>= 1;
      h >>= 1;
   }
   p = cur[1]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
   for(j = 0; j <= h-1; j += 1) {
      for(i = 0; i <= w-1; i += 1)
         p[i] = 128;
      p += chrom_width2;
   }
   p = cur[2]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
   for(j = 0; j <= h-1; j += 1) {
      for(i = 0; i <= w-1; i += 1)
         p[i] = 128;
      p += chrom_width2;
   }
}
static void pred(unsigned char *src[], int sfield, unsigned char *dst[], int dfield, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
   int cc;
   for(cc = 0; cc <= 2; cc += 1) {
      if (cc==1) {
         /* scale for color components */
         if (chroma_format==1) {
            /* vertical */
            h >>= 1;
            y >>= 1;
            dy /= 2;
         }
         if (chroma_format!=3) {
            /* horizontal */
            w >>= 1;
            x >>= 1;
            dx /= 2;
            lx >>= 1;
         }
      }
      pred_comp(src[cc]+(sfield?lx>>1:0), dst[cc]+(dfield?lx>>1:0), lx, w, h, x, y, dx, dy, addflag);
   }
}
static void pred_comp(unsigned char *src, unsigned char *dst, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
   int xint, xh, yint, yh;
   int i, j;
   unsigned char *s, *d;
   /* half pel scaling */
   xint = dx>>1;
   /* integer part */
   xh = dx&1;
   /* half pel flag */
   yint = dy>>1;
   yh = dy&1;
   /* origins */
   s = src+lx*(y+yint)+(x+xint);
   /* motion vector */
   d = dst+lx*y+x;
   if (!xh&&!yh)
      if (addflag)
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = (unsigned int) (d[i]+s[i]+1)>>1;
            s += lx;
            d += lx;
         }
      else
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = s[i];
            s += lx;
            d += lx;
         }
   else if (!xh&&yh)
      if (addflag)
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = d[i]+((unsigned int) (s[i]+s[i+lx]+1)>>1)+1>>1;
            s += lx;
            d += lx;
         }
      else
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = (unsigned int) (s[i]+s[i+lx]+1)>>1;
            s += lx;
            d += lx;
         }
   else if (xh&&!yh)
      if (addflag)
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+1)>>1)+1>>1;
            s += lx;
            d += lx;
         }
      else
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = (unsigned int) (s[i]+s[i+1]+1)>>1;
            s += lx;
            d += lx;
         }
   else
      /* if (xh && yh) */
      if (addflag)
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2)+1>>1;
            s += lx;
            d += lx;
         }
      else
         for(j = 0; j <= h-1; j += 1) {
            for(i = 0; i <= w-1; i += 1)
               d[i] = (unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2;
            s += lx;
            d += lx;
         }
}
static void predict_mb(unsigned char *oldref[], unsigned char *newref[], unsigned char *cur[], int lx, int bx, int by, int pict_type, int pict_struct, int mb_type, int motion_type, int secondfield, int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2])
{
   int addflag, currentfield;
   unsigned char **predframe;
   int DMV[2][2];
   if (mb_type&1) {
      clearblock(cur, bx, by);
      return;
   }
   addflag = 0;
   if (mb_type&8||pict_type==2) {
      /* forward prediction, including zero MV in P pictures */
      if (pict_struct==3)
         if (motion_type==2||!(mb_type&8))
            /* frame-based prediction in frame picture */
            pred(oldref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==1) {
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][0][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(oldref, mv_field_sel[0][0], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
            /* bottom field prediction */
            pred(oldref, mv_field_sel[1][0], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][0][0], PMV[1][0][1]>>1, 0);
         }
         else if (motion_type==3) {
            /* dual prime prediction */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]>>1);
            /* predict top field from top field */
            pred(oldref, 0, cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
            /* predict bottom field from bottom field */
            pred(oldref, 1, cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
            /* predict and add to top field from bottom field */
            pred(oldref, 1, cur, 0, lx<<1, 16, 8, bx, by>>1, DMV[0][0], DMV[0][1], 1);
            /* predict and add to bottom field from top field */
            pred(oldref, 0, cur, 1, lx<<1, 16, 8, bx, by>>1, DMV[1][0], DMV[1][1], 1);
         }
         else
            /* invalid motion_type in frame picture */
            /* first prediction is stored, second is added and averaged */
            /* frame picture */
            if (!quiet)
               fprintf(stderr, "invalid motion_type\n");
      else {
         /* field picture */
         currentfield = pict_struct==2;
         /* determine which frame to use for prediction */
         if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[0][0])
            predframe = newref;
         else
            predframe = oldref;
         if (motion_type==1||!(mb_type&8))
            /* field-based prediction in field picture */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==2) {
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
            /* previous frame */
            /* determine which frame to use for lower half prediction */
            if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[1][0])
               predframe = newref;
            else
               predframe = oldref;
            /* previous frame */
            /* lower half */
            pred(predframe, mv_field_sel[1][0], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][0][0], PMV[1][0][1], 0);
         }
         else if (motion_type==3) {
            /* dual prime prediction */
            /* determine which frame to use for prediction */
            if (secondfield)
               predframe = newref;
            else
               predframe = oldref;
            /* previous frame */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]);
            /* predict from field of same parity */
            pred(oldref, currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
            /* predict from field of opposite parity */
            pred(predframe, !currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, DMV[0][0], DMV[0][1], 1);
         }
         else
            /* invalid motion_type in field picture */
            if (!quiet)
               fprintf(stderr, "invalid motion_type\n");
      }
      addflag = 1;
   }
   if (mb_type&4)
      /* backward prediction */
      if (pict_struct==3)
         /* frame picture */
         if (motion_type==2)
            /* frame-based prediction in frame picture */
            pred(newref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else {
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][1][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(newref, mv_field_sel[0][1], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][1][0], PMV[0][1][1]>>1, addflag);
            /* bottom field prediction */
            pred(newref, mv_field_sel[1][1], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][1][0], PMV[1][1][1]>>1, addflag);
         }
      else {
         /* field picture */
         currentfield = pict_struct==2;
         if (motion_type==1)
            /* field-based prediction in field picture */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else if (motion_type==2) {
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
            /* lower half */
            pred(newref, mv_field_sel[1][1], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][1][0], PMV[1][1][1], addflag);
         }
         else
            /* invalid motion_type in field picture */
            if (!quiet)
               fprintf(stderr, "invalid motion_type\n");
      }
}
void profile_and_level_checks()
{
   int i;
   struct level_limits *maxval;
   if (profile<0||profile>15)
      error("profile must be between 0 and 15");
   if (level<0||level>15)
      error("level must be between 0 and 15");
   if (profile>=8) {
      if (!quiet)
         fprintf(stderr, "Warning: profile uses a reserved value, conformance checks skipped\n");
      return;
   }
   if (profile<1||profile>5)
      error("undefined Profile");
   if (profile==3||profile==2)
      error("This encoder currently generates no scalable bitstreams");
   if (level<4||level>10||level&1)
      error("undefined Level");
   maxval = &maxval_tab[level-4>>1];
   /* check profile@level combination */
   if (!profile_level_defined[profile-1][level-4>>1])
      error("undefined profile@level combination");
   /* profile (syntax) constraints */
   if (profile==5&&M!=1)
      error("Simple Profile does not allow B pictures");
   if (profile!=1&&chroma_format!=1)
      error("chroma format must be 4:2:0 in specified Profile");
   if (profile==1&&chroma_format==3)
      error("chroma format must be 4:2:0 or 4:2:2 in High Profile");
   if (profile>=4) {
      if (frame_rate_code<=2&&repeatfirst)
         error("repeat_first_first must be zero");
      if (frame_rate_code<=6&&prog_seq&&repeatfirst)
         error("repeat_first_first must be zero");
   }
   if (profile!=1&&dc_prec==3)
      error("11 bit DC precision only allowed in High Profile");
   /* level (parameter value) constraints */
   /* Table 8-8 */
   if (frame_rate_code>5&&level>=8)
      error("Picture rate greater than permitted in specified Level");
   for(i = 0; i <= M-1; i += 1) {
      if (motion_data[i].forw_hor_f_code>maxval->hor_f_code)
         error("forward horizontal f_code greater than permitted in specified Level");
      if (motion_data[i].forw_vert_f_code>maxval->vert_f_code)
         error("forward vertical f_code greater than permitted in specified Level");
      if (i!=0) {
         if (motion_data[i].back_hor_f_code>maxval->hor_f_code)
            error("backward horizontal f_code greater than permitted in specified Level");
         if (motion_data[i].back_vert_f_code>maxval->vert_f_code)
            error("backward vertical f_code greater than permitted in specified Level");
      }
   }
   /* Table 8-10 */
   if (horizontal_size>maxval->hor_size)
      error("Horizontal size is greater than permitted in specified Level");
   if (vertical_size>maxval->vert_size)
      error("Horizontal size is greater than permitted in specified Level");
   /* Table 8-11 */
   if (horizontal_size*vertical_size*frame_rate>maxval->sample_rate)
      error("Sample rate is greater than permitted in specified Level");
   /* Table 8-12 */
   if (bit_rate>1.0e6*maxval->bit_rate)
      error("Bit rate is greater than permitted in specified Level");
   /* Table 8-13 */
   if (vbv_buffer_size>maxval->vbv_buffer_size)
      error("vbv_buffer_size exceeds High Level limit");
}
void putAC(int run, int signed_level, int vlcformat)
{
   int level, len;
   VLCtable *ptab;
   level = signed_level<0?-signed_level:signed_level;
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>2047||mpeg1&&level>255) {
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
      error(errortext);
   }
   len = 0;
   if (run<2&&level<41) {
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
         ptab = &dct_code_tab1a[run][level-1];
      else
         ptab = &dct_code_tab1[run][level-1];
      len = ptab->len;
   }
   else if (run<32&&level<6) {
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
         ptab = &dct_code_tab2a[run-2][level-1];
      else
         ptab = &dct_code_tab2[run-2][level-1];
      len = ptab->len;
   }
   if (len!=0) {
      putbits(ptab->code, len);
      putbits(signed_level<0, 1);
   }
   else {
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
      /* Escape */
      putbits(run, 6);
      /* 6 bit code for run */
      if (mpeg1) {
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
            putbits(0, 8);
         if (signed_level<-127)
            putbits(128, 8);
         putbits(signed_level, 8);
      }
      else
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
void putACfirst(int run, int val)
{
   if (run==0&&(val==1||val==-1))
      /* these are treated differently */
      putbits(2|val<0, 2);
   else
      putAC(run, val, 0);
}
void putDCchrom(int val)
{
   putDC(DCchromtab, val);
}
void putDClum(int val)
{
   putDC(DClumtab, val);
}
void putaddrinc(int addrinc)
{
   while (addrinc>33) {
      putbits(0x08, 11);
      /* macroblock_escape */
      addrinc -= 33;
   }
   putbits(addrinctab[addrinc-1].code, addrinctab[addrinc-1].len);
}
void putbits(int val, int n)
{
   int i;
   unsigned int mask;
   mask = 1<<n-1;
   /* selects first (leftmost) bit */
   for(i = 0; i <= n-1; i += 1) {
      outbfr <<= 1;
      if (val&mask)
         outbfr |= 1;
      mask >>= 1;
      /* select next bit */
      outcnt--;
      if (outcnt==0) {
         _IO_putc(outbfr, outfile);
         outcnt = 8;
         bytecnt++;
      }
   }
}
void putcbp(int cbp)
{
   putbits(cbptable[cbp].code, cbptable[cbp].len);
}
void putdmv(int dmv)
{
   if (dmv==0)
      putbits(0, 1);
   else if (dmv>0)
      putbits(2, 2);
   else
      putbits(3, 2);
}
void putgophdr(int frame, int closed_gop)
{
   int tc;
   alignbits();
   putbits(0x1B8L, 32);
   /* group_start_code */
   tc = frametotc(tc0+frame);
   putbits(tc, 25);
   /* time_code */
   putbits(closed_gop, 1);
   /* closed_gop */
   putbits(0, 1);
}
static int frametotc(int frame)
{
   int fps, pict, sec, minute, hour, tc;
   fps = (int) (frame_rate+0.5);
   pict = frame%fps;
   frame = (frame-pict)/fps;
   sec = frame%60;
   frame = (frame-sec)/60;
   minute = frame%60;
   frame = (frame-minute)/60;
   hour = frame%24;
   tc = hour<<19|minute<<13|1<<12|sec<<6|pict;
   return tc;
}
void putintrablk(short *blk, int cc)
{
   int n, dct_diff, run, signed_level;
   /* DC coefficient (7.2.1) */
   dct_diff = blk[0]-dc_dct_pred[cc];
   /* difference to previous block */
   dc_dct_pred[cc] = blk[0];
   if (cc==0)
      putDClum(dct_diff);
   else
      putDCchrom(dct_diff);
   /* AC coefficients (7.2.2) */
   run = 0;
   for(n = 1; n <= 63; n += 1) {
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
      if (signed_level!=0) {
         putAC(run, signed_level, intravlc);
         run = 0;
      }
      else
         run++;
   }
   /* End of Block -- normative block punctuation */
   if (intravlc)
      putbits(6, 4);
   else
      putbits(2, 2);
}
void putmbtype(int pict_type, int mb_type)
{
   putbits(mbtypetab[pict_type-1][mb_type].code, mbtypetab[pict_type-1][mb_type].len);
}
void putmotioncode(int motion_code)
{
   int abscode;
   abscode = motion_code>=0?motion_code:-motion_code;
   /* abs(motion_code) */
   putbits(motionvectab[abscode].code, motionvectab[abscode].len);
   if (motion_code!=0)
      putbits(motion_code<0, 1);
}
void putmv(int dmv, int f_code)
{
   int r_size, f, vmin, vmax, dv, temp, motion_code, motion_residual;
   r_size = f_code-1;
   /* number of fixed length code ('residual') bits */
   f = 1<<r_size;
   vmin = -16*f;
   /* lower range limit */
   vmax = 16*f-1;
   /* upper range limit */
   dv = 32*f;
   /* fold vector difference into [vmin...vmax] */
   if (dmv>vmax)
      dmv -= dv;
   else if (dmv<vmin)
      dmv += dv;
   /* check value */
   if (dmv<vmin||dmv>vmax)
      if (!quiet)
         fprintf(stderr, "invalid motion vector\n");
   /* split dmv into motion_code and motion_residual */
   temp = (dmv<0?-dmv:dmv)+f-1;
   motion_code = temp>>r_size;
   if (dmv<0)
      motion_code = -motion_code;
   motion_residual = temp&f-1;
   putmotioncode(motion_code);
   /* variable length code */
   if (r_size!=0&&motion_code!=0)
      putbits(motion_residual, r_size);
}
void putnonintrablk(short *blk)
{
   int n, run, signed_level, first;
   run = 0;
   first = 1;
   for(n = 0; n <= 63; n += 1) {
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
      if (signed_level!=0) {
         if (first) {
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
            first = 0;
         }
         else
            putAC(run, signed_level, 0);
         run = 0;
      }
      else
         run++;
   }
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
static void putmvs(int MV[2][2][2], int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2], int s, int motion_type, int hor_f_code, int vert_f_code)
{
   if (pict_struct==3)
      if (motion_type==2) {
         /* frame prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==1) {
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
         putbits(mv_field_sel[1][s], 1);
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
         putmv((MV[1][s][1]>>1)-(PMV[1][s][1]>>1), vert_f_code);
         PMV[0][s][0] = MV[0][s][0];
         PMV[0][s][1] = MV[0][s][1];
         PMV[1][s][0] = MV[1][s][0];
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putdmv(dmvector[0]);
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
         putdmv(dmvector[1]);
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
   else
      /* field picture */
      if (motion_type==1) {
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==2) {
         /* 16x8 prediction */
         putbits(mv_field_sel[0][s], 1);
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
         putbits(mv_field_sel[1][s], 1);
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
         putmv(MV[1][s][1]-PMV[1][s][1], vert_f_code);
         PMV[0][s][0] = MV[0][s][0];
         PMV[0][s][1] = MV[0][s][1];
         PMV[1][s][0] = MV[1][s][0];
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
         putdmv(dmvector[0]);
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
         putdmv(dmvector[1]);
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
}
void putpict(unsigned char *frame)
{
   int i, j, k, comp, cc;
   int mb_type;
   int PMV[2][2][2];
   int prev_mquant;
   int cbp, MBAinc;
   rc_init_pict(frame);
   /* set up rate control */
   /* picture header and picture coding extension */
   putpicthdr();
   if (!mpeg1)
      putpictcodext();
   prev_mquant = rc_start_mb();
   /* initialize quantization parameter */
   k = 0;
   for(j = 0; j <= mb_height2-1; j += 1)
      /* macroblock row loop */
      for(i = 0; i <= mb_width-1; i += 1) {
         /* macroblock loop */
         if (i==0) {
            /* slice header (6.2.4) */
            alignbits();
            if (mpeg1||vertical_size<=2800)
               putbits(0x101L+j, 32);
            else {
               putbits(0x101L+(j&127), 32);
               /* slice_start_code */
               putbits(j>>7, 3);
            }
            /* quantiser_scale_code */
            putbits(q_scale_type?map_non_linear_mquant[prev_mquant]:prev_mquant>>1, 5);
            putbits(0, 1);
            /* extra_bit_slice */
            /* reset predictors */
            for(cc = 0; cc <= 2; cc += 1)
               dc_dct_pred[cc] = 0;
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
            MBAinc = i+1;
         }
         mb_type = mbinfo[k].mb_type;
         /* determine mquant (rate control) */
         mbinfo[k].mquant = rc_calc_mquant(k);
         /* quantize macroblock */
         if (mb_type&1) {
            for(comp = 0; comp <= block_count-1; comp += 1)
               quant_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], dc_prec, intra_q, mbinfo[k].mquant);
            mbinfo[k].cbp = cbp = (1<<block_count)-1;
         }
         else {
            cbp = 0;
            for(comp = 0; comp <= block_count-1; comp += 1)
               cbp = cbp<<1|quant_non_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], inter_q, mbinfo[k].mquant);
            mbinfo[k].cbp = cbp;
            if (cbp)
               mb_type |= 2;
         }
         /* output mquant if it has changed */
         if (cbp&&prev_mquant!=mbinfo[k].mquant)
            mb_type |= 16;
/* check if macroblock can be skipped */
         if (i!=0&&i!=mb_width-1&&!cbp) goto l99999;
l99996:         ;
         /* macroblock cannot be skipped */
         mbinfo[k].skipped = 0;
         /* there's no VLC for 'No MC, Not Coded':
                * we have to transmit (0,0) motion vectors
                */
         if (pict_type==2&&!cbp&&!(mb_type&8))
            mb_type |= 8;
         putaddrinc(MBAinc);
         /* macroblock_address_increment */
         MBAinc = 1;
         putmbtype(pict_type, mb_type);
         /* macroblock type */
         if (mb_type&(8|4)&&!frame_pred_dct)
            putbits(mbinfo[k].motion_type, 2);
         if (pict_struct==3&&cbp&&!frame_pred_dct)
            putbits(mbinfo[k].dct_type, 1);
         if (mb_type&16) {
            putbits(q_scale_type?map_non_linear_mquant[mbinfo[k].mquant]:mbinfo[k].mquant>>1, 5);
            prev_mquant = mbinfo[k].mquant;
         }
         if (mb_type&8)
            /* forward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 0, mbinfo[k].motion_type, forw_hor_f_code, forw_vert_f_code);
         if (mb_type&4)
            /* backward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 1, mbinfo[k].motion_type, back_hor_f_code, back_vert_f_code);
         if (mb_type&2) {
            putcbp(cbp>>block_count-6&63);
            if (chroma_format!=1)
               putbits(cbp, block_count-6);
         }
         for(comp = 0; comp <= block_count-1; comp += 1)
            if (cbp&1<<block_count-1-comp)
               /* block loop */
               if (mb_type&1) {
                  cc = comp<4?0:(comp&1)+1;
                  putintrablk(blocks[k*block_count+comp], cc);
               }
               else
                  putnonintrablk(blocks[k*block_count+comp]);
         /* reset predictors */
         if (!(mb_type&1))
            for(cc = 0; cc <= 2; cc += 1)
               dc_dct_pred[cc] = 0;
         if (mb_type&1||pict_type==2&&!(mb_type&8)) {
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         }
         mbinfo[k].mb_type = mb_type;
         k++;
         goto _loop_end_2;
l99999:         ;
/* no DCT coefficients and neither first nor last macroblock of slice */
         if (pict_type==2&&!(mb_type&8)) goto l99998;
         if (pict_type==3&&pict_struct==3&&mbinfo[k].motion_type==2&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1])&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1])) goto l99997;
         if (pict_type==3&&pict_struct!=3&&mbinfo[k].motion_type==1&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1]&&((mbinfo[k].mv_field_sel)[0])[0]==(pict_struct==2))&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1]&&((mbinfo[k].mv_field_sel)[0])[1]==(pict_struct==2))) {
         }
         else {
            goto l99996;
         }
         /* conditions for skipping in B field pictures:
                    * - must be field predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    * - relevant motion_vertical_field_selects have to be of same
                    *   parity as current field
                    */
         mbinfo[k].mb_type = mb_type;
         mbinfo[k].skipped = 1;
         MBAinc++;
         k++;
         goto _loop_end_2;
l99997:         ;
         /* conditions for skipping in B frame pictures:
                    * - must be frame predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    */
         mbinfo[k].mb_type = mb_type;
         mbinfo[k].skipped = 1;
         MBAinc++;
         k++;
         goto _loop_end_2;
l99998:         ;
         /* P picture, no motion vectors -> skip */
         /* reset predictors */
         for(cc = 0; cc <= 2; cc += 1)
            dc_dct_pred[cc] = 0;
         PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
         PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         mbinfo[k].mb_type = mb_type;
         mbinfo[k].skipped = 1;
         MBAinc++;
         k++;
_loop_end_2:         ;
      }
   rc_update_pict();
   vbv_end_of_picture();
}
void putpictcodext()
{
   alignbits();
   putbits(0x1B5L, 32);
   /* extension_start_code */
   putbits(8, 4);
   /* extension_start_code_identifier */
   putbits(forw_hor_f_code, 4);
   /* forward_horizontal_f_code */
   putbits(forw_vert_f_code, 4);
   /* forward_vertical_f_code */
   putbits(back_hor_f_code, 4);
   /* backward_horizontal_f_code */
   putbits(back_vert_f_code, 4);
   /* backward_vertical_f_code */
   putbits(dc_prec, 2);
   /* intra_dc_precision */
   putbits(pict_struct, 2);
   /* picture_structure */
   putbits(pict_struct==3?topfirst:0, 1);
   /* top_field_first */
   putbits(frame_pred_dct, 1);
   /* frame_pred_frame_dct */
   putbits(0, 1);
   /* concealment_motion_vectors  -- currently not implemented */
   putbits(q_scale_type, 1);
   /* q_scale_type */
   putbits(intravlc, 1);
   /* intra_vlc_format */
   putbits(altscan, 1);
   /* alternate_scan */
   putbits(repeatfirst, 1);
   /* repeat_first_field */
   putbits(prog_frame, 1);
   /* chroma_420_type */
   putbits(prog_frame, 1);
   /* progressive_frame */
   putbits(0, 1);
}
void putpicthdr()
{
   alignbits();
   putbits(0x100L, 32);
   /* picture_start_code */
   calc_vbv_delay();
   putbits(temp_ref, 10);
   /* temporal_reference */
   putbits(pict_type, 3);
   /* picture_coding_type */
   putbits(vbv_delay, 16);
   /* vbv_delay */
   if (pict_type==2||pict_type==3) {
      putbits(0, 1);
      /* full_pel_forward_vector */
      if (mpeg1)
         putbits(forw_hor_f_code, 3);
      else
         putbits(7, 3);
   }
   if (pict_type==3) {
      putbits(0, 1);
      /* full_pel_backward_vector */
      if (mpeg1)
         putbits(back_hor_f_code, 3);
      else
         putbits(7, 3);
   }
   putbits(0, 1);
}
void putseq()
{
   /* this routine assumes (N % M) == 0 */
   int i, j, k, f, f0, n, np, nb, sxf, syf, sxb, syb;
   int ipflag;
   FILE *fd;
   char name[256];
   unsigned char *neworg[3], *newref[3];
   static char ipb[5] = {' ', 'I', 'P', 'B', 'D'};
   rc_init_seq();
   /* initialize rate control */
   /* sequence header, sequence extension and sequence display extension */
   putseqhdr();
   if (!mpeg1) {
      putseqext();
      putseqdispext();
   }
   /* optionally output some text data (description, copyright or whatever) */
   if (strlen(id_string)>1)
      putuserdata(id_string);
   /* loop through all frames in encoding/decoding order */
   for(i = 0; i <= nframes-1; i += 1) {
      if (!quiet) {
         fprintf(stderr, "Encoding frame %d ", i);
         fflush(stderr);
      }
      /* f0: lowest frame number in current GOP
           *
           * first GOP contains N-(M-1) frames,
           * all other GOPs contain N frames
           */
      f0 = N*((i+(M-1))/N)-(M-1);
      if (f0<0)
         f0 = 0;
      if (i==0||(i-1)%M==0) {
         /* I or P frame */
         for(j = 0; j <= 2; j += 1) {
            /* shuffle reference frames */
            neworg[j] = oldorgframe[j];
            newref[j] = oldrefframe[j];
            oldorgframe[j] = neworgframe[j];
            oldrefframe[j] = newrefframe[j];
            neworgframe[j] = neworg[j];
            newrefframe[j] = newref[j];
         }
         /* f: frame number in display order */
         f = i==0?0:i+M-1;
         if (f>=nframes)
            f = nframes-1;
         if (i==f0) {
            /* I frame */
            pict_type = 1;
            forw_hor_f_code = forw_vert_f_code = 15;
            back_hor_f_code = back_vert_f_code = 15;
            /* n: number of frames in current GOP
                     *
                     * first GOP contains (M-1) less (B) frames
                     */
            n = i==0?N-(M-1):N;
            /* last GOP may contain less frames */
            if (n>nframes-f0)
               n = nframes-f0;
            /* number of P frames */
            if (i==0)
               np = (n+2*(M-1))/M-1;
            else
               np = (n+(M-1))/M-1;
            /* number of B frames */
            nb = n-np-1;
            rc_init_GOP(np, nb);
            putgophdr(f0, i==0);
         }
         else {
            /* P frame */
            pict_type = 2;
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
            back_hor_f_code = back_vert_f_code = 15;
            sxf = motion_data[0].sxf;
            syf = motion_data[0].syf;
         }
      }
      else {
         /* B frame */
         for(j = 0; j <= 2; j += 1) {
            neworg[j] = auxorgframe[j];
            newref[j] = auxframe[j];
         }
         /* f: frame number in display order */
         f = i-1;
         pict_type = 3;
         n = (i-2)%M+1;
         /* first B: n=1, second B: n=2, ... */
         forw_hor_f_code = motion_data[n].forw_hor_f_code;
         forw_vert_f_code = motion_data[n].forw_vert_f_code;
         back_hor_f_code = motion_data[n].back_hor_f_code;
         back_vert_f_code = motion_data[n].back_vert_f_code;
         sxf = motion_data[n].sxf;
         syf = motion_data[n].syf;
         sxb = motion_data[n].sxb;
         syb = motion_data[n].syb;
      }
      temp_ref = f-f0;
      frame_pred_dct = frame_pred_dct_tab[pict_type-1];
      q_scale_type = qscale_tab[pict_type-1];
      intravlc = intravlc_tab[pict_type-1];
      altscan = altscan_tab[pict_type-1];
      fprintf(statfile, "\nFrame %d (#%d in display order):\n", i, f);
      fprintf(statfile, " picture_type=%c\n", ipb[pict_type]);
      fprintf(statfile, " temporal_reference=%d\n", temp_ref);
      fprintf(statfile, " frame_pred_frame_dct=%d\n", frame_pred_dct);
      fprintf(statfile, " q_scale_type=%d\n", q_scale_type);
      fprintf(statfile, " intra_vlc_format=%d\n", intravlc);
      fprintf(statfile, " alternate_scan=%d\n", altscan);
      if (pict_type!=1) {
         fprintf(statfile, " forward search window: %d...%d / %d...%d\n", -sxf, sxf, -syf, syf);
         fprintf(statfile, " forward vector range: %d...%d.5 / %d...%d.5\n", -(4<<forw_hor_f_code), (4<<forw_hor_f_code)-1, -(4<<forw_vert_f_code), (4<<forw_vert_f_code)-1);
      }
      if (pict_type==3) {
         fprintf(statfile, " backward search window: %d...%d / %d...%d\n", -sxb, sxb, -syb, syb);
         fprintf(statfile, " backward vector range: %d...%d.5 / %d...%d.5\n", -(4<<back_hor_f_code), (4<<back_hor_f_code)-1, -(4<<back_vert_f_code), (4<<back_vert_f_code)-1);
      }
      sprintf(name, tplorg, f+frame0);
      readframe(name, neworg);
      if (fieldpic) {
         if (!quiet) {
            fprintf(stderr, "\nfirst field  (%s) ", topfirst?"top":"bot");
            fflush(stderr);
         }
         pict_struct = topfirst?1:2;
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
         transform(predframe, neworg, mbinfo, blocks);
         putpict(neworg[0]);
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
            if (mbinfo[k].mb_type&1)
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
         itransform(predframe, newref, mbinfo, blocks);
         calcSNR(neworg, newref);
         stats();
         if (!quiet) {
            fprintf(stderr, "second field (%s) ", topfirst?"bot":"top");
            fflush(stderr);
         }
         pict_struct = topfirst?2:1;
         ipflag = pict_type==1;
         if (ipflag) {
            /* first field = I, second field = P */
            pict_type = 2;
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
            back_hor_f_code = back_vert_f_code = 15;
            sxf = motion_data[0].sxf;
            syf = motion_data[0].syf;
         }
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 1, ipflag);
         predict(oldrefframe, newrefframe, predframe, 1, mbinfo);
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
         transform(predframe, neworg, mbinfo, blocks);
         putpict(neworg[0]);
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
            if (mbinfo[k].mb_type&1)
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
         itransform(predframe, newref, mbinfo, blocks);
         calcSNR(neworg, newref);
         stats();
      }
      else {
         pict_struct = 3;
         /* do motion_estimation
                *
                * uses source frames (...orgframe) for full pel search
                * and reconstructed frames (...refframe) for half pel search
                */
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
         transform(predframe, neworg, mbinfo, blocks);
         putpict(neworg[0]);
         for(k = 0; k <= mb_height*mb_width-1; k += 1)
            if (mbinfo[k].mb_type&1)
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
               for(j = 0; j <= block_count-1; j += 1)
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
         itransform(predframe, newref, mbinfo, blocks);
         calcSNR(neworg, newref);
         stats();
      }
      sprintf(name, tplref, f+frame0);
      writeframe(name, newref);
   }
   putseqend();
}
void putseqdispext()
{
   alignbits();
   putbits(0x1B5L, 32);
   /* extension_start_code */
   putbits(2, 4);
   /* extension_start_code_identifier */
   putbits(video_format, 3);
   /* video_format */
   putbits(1, 1);
   /* colour_description */
   putbits(color_primaries, 8);
   /* colour_primaries */
   putbits(transfer_characteristics, 8);
   /* transfer_characteristics */
   putbits(matrix_coefficients, 8);
   /* matrix_coefficients */
   putbits(display_horizontal_size, 14);
   /* display_horizontal_size */
   putbits(1, 1);
   /* marker_bit */
   putbits(display_vertical_size, 14);
}
void putseqend()
{
   alignbits();
   putbits(0x1B7L, 32);
}
void putseqext()
{
   alignbits();
   putbits(0x1B5L, 32);
   /* extension_start_code */
   putbits(1, 4);
   /* extension_start_code_identifier */
   putbits(profile<<4|level, 8);
   /* profile_and_level_indication */
   putbits(prog_seq, 1);
   /* progressive sequence */
   putbits(chroma_format, 2);
   /* chroma_format */
   putbits(horizontal_size>>12, 2);
   /* horizontal_size_extension */
   putbits(vertical_size>>12, 2);
   /* vertical_size_extension */
   putbits((int) ceil(bit_rate/400.0)>>18, 12);
   /* bit_rate_extension */
   putbits(1, 1);
   /* marker_bit */
   putbits(vbv_buffer_size>>10, 8);
   /* vbv_buffer_size_extension */
   putbits(0, 1);
   /* low_delay  -- currently not implemented */
   putbits(0, 2);
   /* frame_rate_extension_n */
   putbits(0, 5);
}
void putseqhdr()
{
   int i;
   alignbits();
   putbits(0x1B3L, 32);
   /* sequence_header_code */
   putbits(horizontal_size, 12);
   /* horizontal_size_value */
   putbits(vertical_size, 12);
   /* vertical_size_value */
   putbits(aspectratio, 4);
   /* aspect_ratio_information */
   putbits(frame_rate_code, 4);
   /* frame_rate_code */
   putbits((int) ceil(bit_rate/400.0), 18);
   /* bit_rate_value */
   putbits(1, 1);
   /* marker_bit */
   putbits(vbv_buffer_size, 10);
   /* vbv_buffer_size_value */
   putbits(constrparms, 1);
   /* constrained_parameters_flag */
   putbits(load_iquant, 1);
   /* load_intra_quantizer_matrix */
   if (load_iquant)
      for(i = 0; i <= 63; i += 1)
         /* matrices are always downloaded in zig-zag order */
         putbits(intra_q[zig_zag_scan[i]], 8);
   /* intra_quantizer_matrix */
   putbits(load_niquant, 1);
   /* load_non_intra_quantizer_matrix */
   if (load_niquant)
      for(i = 0; i <= 63; i += 1)
         putbits(inter_q[zig_zag_scan[i]], 8);
}
void putuserdata(char *userdata)
{
   alignbits();
   putbits(0x1B2L, 32);
   /* user_data_start_code */
   while (*userdata)
      putbits(*userdata++, 8);
}
static void putDC(sVLCtable *tab, int val)
{
   int absval, size;
   absval = val<0?-val:val;
   /* abs(val) */
   if (absval>2047||mpeg1&&absval>255) {
      /* should never happen */
      sprintf(errortext, "DC value out of range (%d)\n", val);
      error(errortext);
   }
   /* compute dct_dc_size */
   size = 0;
   while (absval) {
      absval >>= 1;
      size++;
   }
   /* generate VLC for dct_dc_size (Table B-12 or B-13) */
   putbits(tab[size].code, tab[size].len);
   /* append fixed length code (dc_dct_differential) */
   if (size!=0) {
      if (val>=0)
         absval = val;
      else
         absval = val+(1<<size)-1;
      /* val + (2 ^ size) - 1 */
      putbits(absval, size);
   }
}
int quant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
   int i;
   int x, y, d;
   x = src[0];
   d = 8>>dc_prec;
   /* intra_dc_mult */
   dst[0] = x>=0?(x+(d>>1))/d:-(((-x)+(d>>1))/d);
   /* round(x/d) */
   for(i = 1; i <= 63; i += 1) {
      x = src[i];
      d = quant_mat[i];
      y = (32*(x>=0?x:-x)+(d>>1))/d;
      /* round(32*x/quant_mat) */
      d = 3*mquant+2>>2;
      y = (y+d)/(2*mquant);
      /* (y+0.75*mquant) / (2*mquant) */
      /* clip to syntax limits */
      if (y>255)
         if (mpeg1)
            y = 255;
         else if (y>2047)
            y = 2047;
      dst[i] = x>=0?y:-y;
   }
   return 1;
}
int quant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
   int i;
   int x, y, d;
   int nzflag;
   nzflag = 0;
   for(i = 0; i <= 63; i += 1) {
      x = src[i];
      d = quant_mat[i];
      y = (32*(x>=0?x:-x)+(d>>1))/d;
      /* round(32*x/quant_mat) */
      y /= 2*mquant;
      /* clip to syntax limits */
      if (y>255)
         if (mpeg1)
            y = 255;
         else if (y>2047)
            y = 2047;
      if ((dst[i] = x>=0?y:-y)!=0)
         nzflag = 1;
   }
   return nzflag;
}
static void iquant1_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
   int i, val;
   dst[0] = src[0]<<3-dc_prec;
   for(i = 1; i <= 63; i += 1) {
      val = (int) (src[i]*quant_mat[i]*mquant)/16;
      /* mismatch control */
      if ((val&1)==0&&val!=0)
         val += val>0?-1:1;
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
static void iquant1_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
   int i, val;
   for(i = 0; i <= 63; i += 1) {
      val = src[i];
      if (val!=0) {
         val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
         /* mismatch control */
         if ((val&1)==0&&val!=0)
            val += val>0?-1:1;
      }
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
void range_checks()
{
   int i;
   /* range and value checks */
   if (horizontal_size<1||horizontal_size>16383)
      error("horizontal_size must be between 1 and 16383");
   if (mpeg1&&horizontal_size>4095)
      error("horizontal_size must be less than 4096 (MPEG-1)");
   if ((horizontal_size&4095)==0)
      error("horizontal_size must not be a multiple of 4096");
   if (chroma_format!=3&&horizontal_size%2!=0)
      error("horizontal_size must be a even (4:2:0 / 4:2:2)");
   if (vertical_size<1||vertical_size>16383)
      error("vertical_size must be between 1 and 16383");
   if (mpeg1&&vertical_size>4095)
      error("vertical size must be less than 4096 (MPEG-1)");
   if ((vertical_size&4095)==0)
      error("vertical_size must not be a multiple of 4096");
   if (chroma_format==1&&vertical_size%2!=0)
      error("vertical_size must be a even (4:2:0)");
   if (fieldpic) {
      if (vertical_size%2!=0)
         error("vertical_size must be a even (field pictures)");
      if (chroma_format==1&&vertical_size%4!=0)
         error("vertical_size must be a multiple of 4 (4:2:0 field pictures)");
   }
   if (mpeg1) {
      if (aspectratio<1||aspectratio>14)
         error("pel_aspect_ratio must be between 1 and 14 (MPEG-1)");
   }
   else if (aspectratio<1||aspectratio>4)
      error("aspect_ratio_information must be 1, 2, 3 or 4");
   if (frame_rate_code<1||frame_rate_code>8)
      error("frame_rate code must be between 1 and 8");
   if (bit_rate<=0.0)
      error("bit_rate must be positive");
   if (bit_rate>((1<<30)-1)*400.0)
      error("bit_rate must be less than 429 Gbit/s");
   if (mpeg1&&bit_rate>((1<<18)-1)*400.0)
      error("bit_rate must be less than 104 Mbit/s (MPEG-1)");
   if (vbv_buffer_size<1||vbv_buffer_size>0x3ffff)
      error("vbv_buffer_size must be in range 1..(2^18-1)");
   if (mpeg1&&vbv_buffer_size>=1024)
      error("vbv_buffer_size must be less than 1024 (MPEG-1)");
   if (chroma_format<1||chroma_format>3)
      error("chroma_format must be in range 1...3");
   if (video_format<0||video_format>4)
      error("video_format must be in range 0...4");
   if (color_primaries<1||color_primaries>7||color_primaries==3)
      error("color_primaries must be in range 1...2 or 4...7");
   if (transfer_characteristics<1||transfer_characteristics>7||transfer_characteristics==3)
      error("transfer_characteristics must be in range 1...2 or 4...7");
   if (matrix_coefficients<1||matrix_coefficients>7||matrix_coefficients==3)
      error("matrix_coefficients must be in range 1...2 or 4...7");
   if (display_horizontal_size<0||display_horizontal_size>16383)
      error("display_horizontal_size must be in range 0...16383");
   if (display_vertical_size<0||display_vertical_size>16383)
      error("display_vertical_size must be in range 0...16383");
   if (dc_prec<0||dc_prec>3)
      error("intra_dc_precision must be in range 0...3");
   for(i = 0; i <= M-1; i += 1) {
      if (motion_data[i].forw_hor_f_code<1||motion_data[i].forw_hor_f_code>9)
         error("f_code must be between 1 and 9");
      if (motion_data[i].forw_vert_f_code<1||motion_data[i].forw_vert_f_code>9)
         error("f_code must be between 1 and 9");
      if (mpeg1&&motion_data[i].forw_hor_f_code>7)
         error("f_code must be le less than 8");
      if (mpeg1&&motion_data[i].forw_vert_f_code>7)
         error("f_code must be le less than 8");
      if (motion_data[i].sxf<=0)
         error("search window must be positive");
      /* doesn't belong here */
      if (motion_data[i].syf<=0)
         error("search window must be positive");
      if (i!=0) {
         if (motion_data[i].back_hor_f_code<1||motion_data[i].back_hor_f_code>9)
            error("f_code must be between 1 and 9");
         if (motion_data[i].back_vert_f_code<1||motion_data[i].back_vert_f_code>9)
            error("f_code must be between 1 and 9");
         if (mpeg1&&motion_data[i].back_hor_f_code>7)
            error("f_code must be le less than 8");
         if (mpeg1&&motion_data[i].back_vert_f_code>7)
            error("f_code must be le less than 8");
         if (motion_data[i].sxb<=0)
            error("search window must be positive");
         if (motion_data[i].syb<=0)
            error("search window must be positive");
      }
   }
}
static void calc_actj(unsigned char *frame)
{
   int i, j, k;
   unsigned char *p;
   double actj, var;
   k = 0;
   for(j = 0; j <= height2-1; j += 16)
      for(i = 0; i <= width-1; i += 16) {
         p = frame+(pict_struct==2?width:0)+i+width2*j;
         /* take minimum spatial activity measure of luminance blocks */
         actj = var_sblk(p, width2);
         var = var_sblk(p+8, width2);
         if (var<actj)
            actj = var;
         var = var_sblk(p+8*width2, width2);
         if (var<actj)
            actj = var;
         var = var_sblk(p+8*width2+8, width2);
         if (var<actj)
            actj = var;
         if (!fieldpic&&!prog_seq) {
            /* field */
            var = var_sblk(p, width<<1);
            if (var<actj)
               actj = var;
            var = var_sblk(p+8, width<<1);
            if (var<actj)
               actj = var;
            var = var_sblk(p+width, width<<1);
            if (var<actj)
               actj = var;
            var = var_sblk(p+width+8, width<<1);
            if (var<actj)
               actj = var;
         }
         actj += 1.0;
         mbinfo[k++].act = actj;
      }
}
static double var_sblk(unsigned char *p, int lx)
{
   int i, j;
   unsigned int v, s, s2;
   s = s2 = 0;
   for(j = 0; j <= 7; j += 1) {
      for(i = 0; i <= 7; i += 1) {
         v = *p++;
         s += v;
         s2 += v*v;
      }
      p += lx-8;
   }
   return s2/64.0-s/64.0*s/64.0;
}
int rc_calc_mquant(int j)
{
   int mquant;
   double dj, Qj, actj, N_actj;
   /* measure virtual buffer discrepancy from uniform distribution model */
   dj = d+(bitcount()-S)-j*(T/(mb_width*mb_height2));
   /* scale against dynamic range of mquant and the bits/picture count */
   Qj = dj*31.0/r;
   /*Qj = dj*(q_scale_type ? 56.0 : 31.0)/r;  */
   actj = mbinfo[j].act;
   actsum += actj;
   /* compute normalized activity */
   N_actj = (2.0*actj+avg_act)/(actj+2.0*avg_act);
   if (q_scale_type) {
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(2.0*Qj*N_actj+0.5);
      /* clip mquant to legal (linear) range */
      if (mquant<1)
         mquant = 1;
      if (mquant>112)
         mquant = 112;
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(Qj*N_actj+0.5);
      mquant <<= 1;
      /* clip mquant to legal (linear) range */
      if (mquant<2)
         mquant = 2;
      if (mquant>62)
         mquant = 62;
      /* ignore small changes in mquant */
      if (mquant>=8&&mquant-prev_mquant>=-4&&mquant-prev_mquant<=4)
         mquant = prev_mquant;
      prev_mquant = mquant;
   }
   Q += mquant;
   /* for calculation of average mquant */
   /*
     fprintf(statfile,"rc_calc_mquant(%d): ",j);
     fprintf(statfile,"bitcount=%d, dj=%f, Qj=%f, actj=%f, N_actj=%f, mquant=%d\n",
       bitcount(),dj,Qj,actj,N_actj,mquant);
   */
   return mquant;
}
void rc_init_GOP(int np, int nb)
{
   R += (int) floor((1+np+nb)*bit_rate/frame_rate+0.5);
   Np = fieldpic?2*np+1:np;
   Nb = fieldpic?2*nb:nb;
   fprintf(statfile, "\nrate control: new group of pictures (GOP)\n");
   fprintf(statfile, " target number of bits for GOP: R=%d\n", R);
   fprintf(statfile, " number of P pictures in GOP: Np=%d\n", Np);
   fprintf(statfile, " number of B pictures in GOP: Nb=%d\n", Nb);
}
void rc_init_pict(unsigned char *frame)
{
   double Tmin;
   if (pict_type==1) goto _switch_1_case_1;
   if (pict_type==2) goto _switch_1_case_2;
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
_switch_1_case_3:   ;
   T = (int) floor(R/(Nb+Np*1.4*Xp/(1.0*Xb))+0.5);
   d = d0b;
   goto _break_1;
_switch_1_case_2:   ;
   T = (int) floor(R/(Np+Nb*1.0*Xb/(1.4*Xp))+0.5);
   d = d0p;
   goto _break_1;
_switch_1_case_1:   ;
   T = (int) floor(R/(1.0+Np*Xp/(Xi*1.0)+Nb*Xb/(Xi*1.4))+0.5);
   d = d0i;
_break_1:   ;
   Tmin = (int) floor(bit_rate/(8.0*frame_rate)+0.5);
   if (T<Tmin)
      T = Tmin;
   S = bitcount();
   Q = 0;
   calc_actj(frame);
   actsum = 0.0;
   fprintf(statfile, "\nrate control: start of picture\n");
   fprintf(statfile, " target number of bits: T=%d\n", T);
}
void rc_init_seq()
{
   /* reaction parameter (constant) */
   if (r==0)
      r = (int) floor(2.0*bit_rate/frame_rate+0.5);
   /* average activity */
   if (avg_act==0.0)
      avg_act = 400.0;
   /* remaining # of bits in GOP */
   R = 0;
   /* global complexity measure */
   if (Xi==0)
      Xi = (int) floor(160.0*bit_rate/115.0+0.5);
   if (Xp==0)
      Xp = (int) floor(60.0*bit_rate/115.0+0.5);
   if (Xb==0)
      Xb = (int) floor(42.0*bit_rate/115.0+0.5);
   /* virtual buffer fullness */
   if (d0i==0)
      d0i = (int) floor(10.0*r/31.0+0.5);
   if (d0p==0)
      d0p = (int) floor(10.0*r/31.0+0.5);
   if (d0b==0)
      d0b = (int) floor(1.4*10.0*r/31.0+0.5);
   /*
     if (d0i==0) d0i = (int)floor(10.0*r/(qscale_tab[0] ? 56.0 : 31.0) + 0.5);
     if (d0p==0) d0p = (int)floor(10.0*r/(qscale_tab[1] ? 56.0 : 31.0) + 0.5);
     if (d0b==0) d0b = (int)floor(1.4*10.0*r/(qscale_tab[2] ? 56.0 : 31.0) + 0.5);
   */
   fprintf(statfile, "\nrate control: sequence initialization\n");
   fprintf(statfile, " initial global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
   fprintf(statfile, " reaction parameter: r=%d\n", r);
   fprintf(statfile, " initial virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
   fprintf(statfile, " initial average activity: avg_act=%.1f\n", avg_act);
}
int rc_start_mb()
{
   int mquant;
   if (q_scale_type) {
      mquant = (int) floor(2.0*d*31.0/r+0.5);
      /* clip mquant to legal (linear) range */
      if (mquant<1)
         mquant = 1;
      if (mquant>112)
         mquant = 112;
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
      mquant = (int) floor(d*31.0/r+0.5);
      mquant <<= 1;
      /* clip mquant to legal (linear) range */
      if (mquant<2)
         mquant = 2;
      if (mquant>62)
         mquant = 62;
      prev_mquant = mquant;
   }
   /*
     fprintf(statfile,"rc_start_mb:\n");
     fprintf(statfile,"mquant=%d\n",mquant);
   */
   return mquant;
}
void rc_update_pict()
{
   double X;
   S = bitcount()-S;
   /* total # of bits in picture */
   R -= S;
   /* remaining # of bits in GOP */
   X = (int) floor(S*0.5*(double) Q/(mb_width*mb_height2)+0.5);
   d += S-T;
   avg_act = actsum/(mb_width*mb_height2);
   if (pict_type==1) goto _switch_1_case_1;
   if (pict_type==2) goto _switch_1_case_2;
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
_switch_1_case_3:   ;
   Xb = X;
   d0b = d;
   Nb--;
   goto _break_1;
_switch_1_case_2:   ;
   Xp = X;
   d0p = d;
   Np--;
   goto _break_1;
_switch_1_case_1:   ;
   Xi = X;
   d0i = d;
_break_1:   ;
   fprintf(statfile, "\nrate control: end of picture\n");
   fprintf(statfile, " actual number of bits: S=%d\n", S);
   fprintf(statfile, " average quantization parameter Q=%.1f\n", (double) Q/(mb_width*mb_height2));
   fprintf(statfile, " remaining number of bits in GOP: R=%d\n", R);
   fprintf(statfile, " global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
   fprintf(statfile, " virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
   fprintf(statfile, " remaining number of P pictures in GOP: Np=%d\n", Np);
   fprintf(statfile, " remaining number of B pictures in GOP: Nb=%d\n", Nb);
   fprintf(statfile, " average activity: avg_act=%.1f\n", avg_act);
}
void readframe(char *fname, unsigned char *frame[])
{
   if (inputtype==0) goto _switch_1_case_0;
   if (inputtype==1) goto _switch_1_case_1;
   if (inputtype==2) goto _switch_1_case_2;
_switch_1_default:   ;
   goto _break_1;
_switch_1_case_2:   ;
   read_ppm(fname, frame);
   goto _break_1;
_switch_1_case_1:   ;
   read_yuv(fname, frame);
   goto _break_1;
_switch_1_case_0:   ;
   read_y_u_v(fname, frame);
_break_1:   ;
}
static void border_extend(unsigned char *frame, int w1, int h1, int w2, int h2)
{
   int i, j;
   unsigned char *fp;
   /* horizontal pixel replication (right border) */
   for(j = 0; j <= h1-1; j += 1) {
      fp = frame+j*w2;
      for(i = w1; i <= w2-1; i += 1)
         fp[i] = fp[i-1];
   }
   /* vertical pixel replication (bottom border) */
   for(j = h1; j <= h2-1; j += 1) {
      fp = frame+j*w2;
      for(i = 0; i <= w2-1; i += 1)
         fp[i] = fp[i-w2];
   }
}
static void conv422to420(unsigned char *src, unsigned char *dst)
{
   int w, i, j, jm6, jm5, jm4, jm3, jm2, jm1;
   int jp1, jp2, jp3, jp4, jp5, jp6;
   w = width>>1;
   if (prog_frame)
      /* intra frame */
      for(i = 0; i <= w-1; i += 1) {
         for(j = 0; j <= height-1; j += 2) {
            jm5 = j<5?0:j-5;
            jm4 = j<4?0:j-4;
            jm3 = j<3?0:j-3;
            jm2 = j<2?0:j-2;
            jm1 = j<1?0:j-1;
            jp1 = j<height-1?j+1:height-1;
            jp2 = j<height-2?j+2:height-1;
            jp3 = j<height-3?j+3:height-1;
            jp4 = j<height-4?j+4:height-1;
            jp5 = j<height-5?j+5:height-1;
            jp6 = j<height-5?j+6:height-1;
            /* FIR filter with 0.5 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (228*(src[w*j]+src[w*jp1])+70*(src[w*jm1]+src[w*jp2])-37*(src[w*jm2]+src[w*jp3])-21*(src[w*jm3]+src[w*jp4])+11*(src[w*jm4]+src[w*jp5])+5*(src[w*jm5]+src[w*jp6])+256)>>9];
         }
         src++;
         dst++;
      }
   else
      /* intra field */
      for(i = 0; i <= w-1; i += 1) {
         for(j = 0; j <= height-1; j += 4) {
            /* top field */
            jm5 = j<10?0:j-10;
            jm4 = j<8?0:j-8;
            jm3 = j<6?0:j-6;
            jm2 = j<4?0:j-4;
            jm1 = j<2?0:j-2;
            jp1 = j<height-2?j+2:height-2;
            jp2 = j<height-4?j+4:height-2;
            jp3 = j<height-6?j+6:height-2;
            jp4 = j<height-8?j+8:height-2;
            jp5 = j<height-10?j+10:height-2;
            jp6 = j<height-12?j+12:height-2;
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (8*src[w*jm5]+5*src[w*jm4]-30*src[w*jm3]-18*src[w*jm2]+113*src[w*jm1]+242*src[w*j]+192*src[w*jp1]+35*src[w*jp2]-38*src[w*jp3]-10*src[w*jp4]+11*src[w*jp5]+2*src[w*jp6]+256)>>9];
            /* bottom field */
            jm6 = j<9?1:j-9;
            jm5 = j<7?1:j-7;
            jm4 = j<5?1:j-5;
            jm3 = j<3?1:j-3;
            jm2 = j<1?1:j-1;
            jm1 = j<height-1?j+1:height-1;
            jp1 = j<height-3?j+3:height-1;
            jp2 = j<height-5?j+5:height-1;
            jp3 = j<height-7?j+7:height-1;
            jp4 = j<height-9?j+9:height-1;
            jp5 = j<height-11?j+11:height-1;
            jp6 = j<height-13?j+13:height-1;
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*((j>>1)+1)] = clp[(int) (8*src[w*jp6]+5*src[w*jp5]-30*src[w*jp4]-18*src[w*jp3]+113*src[w*jp2]+242*src[w*jp1]+192*src[w*jm1]+35*src[w*jm2]-38*src[w*jm3]-10*src[w*jm4]+11*src[w*jm5]+2*src[w*jm6]+256)>>9];
         }
         src++;
         dst++;
      }
}
static void conv444to422(unsigned char *src, unsigned char *dst)
{
   int i, j, im5, im4, im3, im2, im1, ip1, ip2, ip3, ip4, ip5, ip6;
   if (mpeg1)
      for(j = 0; j <= height-1; j += 1) {
         for(i = 0; i <= width-1; i += 2) {
            im5 = i<5?0:i-5;
            im4 = i<4?0:i-4;
            im3 = i<3?0:i-3;
            im2 = i<2?0:i-2;
            im1 = i<1?0:i-1;
            ip1 = i<width-1?i+1:width-1;
            ip2 = i<width-2?i+2:width-1;
            ip3 = i<width-3?i+3:width-1;
            ip4 = i<width-4?i+4:width-1;
            ip5 = i<width-5?i+5:width-1;
            ip6 = i<width-5?i+6:width-1;
            /* FIR filter with 0.5 sample interval phase shift */
            dst[i>>1] = clp[(int) (228*(src[i]+src[ip1])+70*(src[im1]+src[ip2])-37*(src[im2]+src[ip3])-21*(src[im3]+src[ip4])+11*(src[im4]+src[ip5])+5*(src[im5]+src[ip6])+256)>>9];
         }
         src += width;
         dst += width>>1;
      }
   else
      /* MPEG-2 */
      for(j = 0; j <= height-1; j += 1) {
         for(i = 0; i <= width-1; i += 2) {
            im5 = i<5?0:i-5;
            im3 = i<3?0:i-3;
            im1 = i<1?0:i-1;
            ip1 = i<width-1?i+1:width-1;
            ip3 = i<width-3?i+3:width-1;
            ip5 = i<width-5?i+5:width-1;
            /* FIR filter coefficients (*512): 22 0 -52 0 159 256 159 0 -52 0 22 */
            dst[i>>1] = clp[(int) (22*(src[im5]+src[ip5])-52*(src[im3]+src[ip3])+159*(src[im1]+src[ip1])+256*src[i]+256)>>9];
         }
         src += width;
         dst += width>>1;
      }
}
static void read_ppm(char *fname, unsigned char *frame[])
{
   int i, j;
   int r, g, b;
   double y, u, v;
   double cr, cg, cb, cu, cv;
   char name[128];
   FILE *fd;
   unsigned char *yp, *up, *vp;
   static unsigned char *u444, *v444, *u422, *v422;
   /* ITU-R Rec. 709 (1990) */
   /* unspecified */
   /* reserved */
   /* FCC */
   /* ITU-R Rec. 624-4 System B, G */
   /* SMPTE 170M */
   static double coef[7][3] = {{0.2125, 0.7154, 0.0721}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.30, 0.59, 0.11}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.212, 0.701, 0.087}};
   /* SMPTE 240M (1987) */
   i = matrix_coefficients;
   if (i>8)
      i = 3;
   cr = coef[i-1][0];
   cg = coef[i-1][1];
   cb = coef[i-1][2];
   cu = 0.5/(1.0-cb);
   cv = 0.5/(1.0-cr);
   if (chroma_format==3) {
      u444 = frame[1];
      v444 = frame[2];
   }
   else if (!u444) {
      if (!(u444 = (unsigned char *) malloc(width*height)))
         error("malloc failed");
      if (!(v444 = (unsigned char *) malloc(width*height)))
         error("malloc failed");
      if (chroma_format==1) {
         if (!(u422 = (unsigned char *) malloc((width>>1)*height)))
            error("malloc failed");
         if (!(v422 = (unsigned char *) malloc((width>>1)*height)))
            error("malloc failed");
      }
   }
   sprintf(name, "%s.ppm", fname);
   if (!(fd = fopen(name, "rb"))) {
      sprintf(errortext, "Couldn't open %s\n", name);
      error(errortext);
   }
   /* skip header */
   _IO_getc(fd);
   _IO_getc(fd);
   /* magic number (P6) */
   pbm_getint(fd);
   pbm_getint(fd);
   pbm_getint(fd);
   /* width height maxcolors */
   for(i = 0; i <= vertical_size-1; i += 1) {
      yp = frame[0]+i*width;
      up = u444+i*width;
      vp = v444+i*width;
      for(j = 0; j <= horizontal_size-1; j += 1) {
         r = _IO_getc(fd);
         g = _IO_getc(fd);
         b = _IO_getc(fd);
         /* convert to YUV */
         y = cr*r+cg*g+cb*b;
         u = cu*(b-y);
         v = cv*(r-y);
         yp[j] = 219.0/256.0*y+16.5;
         /* nominal range: 16..235 */
         up[j] = 224.0/256.0*u+128.5;
         /* 16..240 */
         vp[j] = 224.0/256.0*v+128.5;
      }
   }
   fclose(fd);
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
   border_extend(u444, horizontal_size, vertical_size, width, height);
   border_extend(v444, horizontal_size, vertical_size, width, height);
   if (chroma_format==2) {
      conv444to422(u444, frame[1]);
      conv444to422(v444, frame[2]);
   }
   if (chroma_format==1) {
      conv444to422(u444, u422);
      conv444to422(v444, v422);
      conv422to420(u422, frame[1]);
      conv422to420(v422, frame[2]);
   }
}
static void read_y_u_v(char *fname, unsigned char *frame[])
{
   int i;
   int chrom_hsize, chrom_vsize;
   char name[128];
   FILE *fd;
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
   sprintf(name, "%s.Y", fname);
   if (!(fd = fopen(name, "rb"))) {
      sprintf(errortext, "Couldn't open %s\n", name);
      error(errortext);
   }
   for(i = 0; i <= vertical_size-1; i += 1)
      fread(frame[0]+i*width, 1, horizontal_size, fd);
   fclose(fd);
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
   sprintf(name, "%s.U", fname);
   if (!(fd = fopen(name, "rb"))) {
      sprintf(errortext, "Couldn't open %s\n", name);
      error(errortext);
   }
   for(i = 0; i <= chrom_vsize-1; i += 1)
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
   fclose(fd);
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
   sprintf(name, "%s.V", fname);
   if (!(fd = fopen(name, "rb"))) {
      sprintf(errortext, "Couldn't open %s\n", name);
      error(errortext);
   }
   for(i = 0; i <= chrom_vsize-1; i += 1)
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
   fclose(fd);
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
}
static void read_yuv(char *fname, unsigned char *frame[])
{
   int i;
   int chrom_hsize, chrom_vsize;
   char name[128];
   FILE *fd;
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
   sprintf(name, "%s.yuv", fname);
   if (!(fd = fopen(name, "rb"))) {
      sprintf(errortext, "Couldn't open %s\n", name);
      error(errortext);
   }
   /* Y */
   for(i = 0; i <= vertical_size-1; i += 1)
      fread(frame[0]+i*width, 1, horizontal_size, fd);
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
   /* Cb */
   for(i = 0; i <= chrom_vsize-1; i += 1)
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
   /* Cr */
   for(i = 0; i <= chrom_vsize-1; i += 1)
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
   fclose(fd);
}
void stats()
{
   int i, j, k, nmb, mb_type;
   int n_skipped, n_intra, n_ncoded, n_blocks, n_interp, n_forward, n_backward;
   struct mbinfo *mbi;
   nmb = mb_width*mb_height2;
   n_skipped = n_intra = n_ncoded = n_blocks = n_interp = n_forward = n_backward = 0;
   for(k = 0; k <= nmb-1; k += 1) {
      mbi = mbinfo+k;
      if (mbi->skipped)
         n_skipped++;
      else if (mbi->mb_type&1)
         n_intra++;
      else if (!(mbi->mb_type&2))
         n_ncoded++;
      for(i = 0; i <= block_count-1; i += 1)
         if (mbi->cbp&1<<i)
            n_blocks++;
      if (mbi->mb_type&8)
         if (mbi->mb_type&4)
            n_interp++;
         else
            n_forward++;
      else if (mbi->mb_type&4)
         n_backward++;
   }
   fprintf(statfile, "\npicture statistics:\n");
   fprintf(statfile, " # of intra coded macroblocks:  %4d (%.1f%%)\n", n_intra, 100.0*(double) n_intra/nmb);
   fprintf(statfile, " # of coded blocks:             %4d (%.1f%%)\n", n_blocks, 100.0*(double) n_blocks/(block_count*nmb));
   fprintf(statfile, " # of not coded macroblocks:    %4d (%.1f%%)\n", n_ncoded, 100.0*(double) n_ncoded/nmb);
   fprintf(statfile, " # of skipped macroblocks:      %4d (%.1f%%)\n", n_skipped, 100.0*(double) n_skipped/nmb);
   fprintf(statfile, " # of forw. pred. macroblocks:  %4d (%.1f%%)\n", n_forward, 100.0*(double) n_forward/nmb);
   fprintf(statfile, " # of backw. pred. macroblocks: %4d (%.1f%%)\n", n_backward, 100.0*(double) n_backward/nmb);
   fprintf(statfile, " # of interpolated macroblocks: %4d (%.1f%%)\n", n_interp, 100.0*(double) n_interp/nmb);
   fprintf(statfile, "\nmacroblock_type map:\n");
   k = 0;
   for(j = 0; j <= mb_height2-1; j += 1) {
      for(i = 0; i <= mb_width-1; i += 1) {
         mbi = mbinfo+k;
         mb_type = mbi->mb_type;
         if (mbi->skipped)
            _IO_putc('S', statfile);
         else if (mb_type&1)
            _IO_putc('I', statfile);
         else {
            if ((mb_type&(8|4))==8) goto _switch_5_case_8;
            if ((mb_type&(8|4))==4) goto _switch_5_case_4;
            if ((mb_type&(8|4))==(8|4)) goto _switch_5_case_12;
_switch_5_default:            ;
            _IO_putc('0', statfile);
            goto _break_5;
_switch_5_case_12:            ;
            _IO_putc(mbi->motion_type==1?'d':'D', statfile);
            goto _break_5;
_switch_5_case_4:            ;
            _IO_putc(mbi->motion_type==1?'b':'B', statfile);
            goto _break_5;
_switch_5_case_8:            ;
            _IO_putc(mbi->motion_type==1?'f':mbi->motion_type==3?'p':'F', statfile);
_break_5:            ;
         }
         if (mb_type&16)
            _IO_putc('Q', statfile);
         else if (mb_type&(2|1))
            _IO_putc(' ', statfile);
         else
            _IO_putc('N', statfile);
         _IO_putc(' ', statfile);
         k++;
      }
      _IO_putc('\n', statfile);
   }
   fprintf(statfile, "\nmquant map:\n");
   k = 0;
   for(j = 0; j <= mb_height2-1; j += 1) {
      for(i = 0; i <= mb_width-1; i += 1) {
         if (i==0||mbinfo[k].mquant!=mbinfo[k-1].mquant)
            fprintf(statfile, "%3d", mbinfo[k].mquant);
         else
            fprintf(statfile, "   ");
         k++;
      }
      _IO_putc('\n', statfile);
   }
}
static void calcSNR1(unsigned char *org, unsigned char *rec, int lx, int w, int h, double *pv, double *pe)
{
   int i, j;
   double v1, s1, s2, e2;
   s1 = s2 = e2 = 0.0;
   for(j = 0; j <= h-1; j += 1) {
      for(i = 0; i <= w-1; i += 1) {
         v1 = org[i];
         s1 += v1;
         s2 += v1*v1;
         v1 -= rec[i];
         e2 += v1*v1;
      }
      org += lx;
      rec += lx;
   }
   s1 /= w*h;
   s2 /= w*h;
   e2 /= w*h;
   /* prevent division by zero in calcSNR() */
   if (e2==0.0)
      e2 = 0.00001;
   *pv = s2-s1*s1;
   /* variance */
   *pe = e2;
}
void transform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
   int i, j, i1, j1, k, n, cc, offs, lx;
   k = 0;
   for(j = 0; j <= height2-1; j += 16)
      for(i = 0; i <= width-1; i += 16) {
         for(n = 0; n <= block_count-1; n += 1) {
            cc = n<4?0:(n&1)+1;
            /* color component index */
            if (cc==0) {
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
                  lx = width<<1;
               }
               else {
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
                  lx = width2;
               }
               if (pict_struct==2)
                  offs += width;
            }
            else {
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
               j1 = chroma_format!=1?j:j>>1;
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
                  lx = chrom_width<<1;
               }
               else {
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
                  lx = chrom_width2;
               }
               if (pict_struct==2)
                  offs += chrom_width;
            }
            sub_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
            fdct(blocks[k*block_count+n]);
         }
         k++;
      }
}
static void add_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
   int i, j;
   for(j = 0; j <= 7; j += 1) {
      for(i = 0; i <= 7; i += 1)
         cur[i] = clp[blk[i]+pred[i]];
      blk += 8;
      cur += lx;
      pred += lx;
   }
}
static void sub_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
   int i, j;
   for(j = 0; j <= 7; j += 1) {
      for(i = 0; i <= 7; i += 1)
         blk[i] = cur[i]-pred[i];
      blk += 8;
      cur += lx;
      pred += lx;
   }
}
void vbv_end_of_picture()
{
   bitcnt_EOP = bitcount();
   bitcnt_EOP = bitcnt_EOP+7&~7;
}
void writeframe(char *fname, unsigned char *frame[])
{
   int chrom_hsize, chrom_vsize;
   char name[128];
   FILE *fd;
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
   if (fname[0]=='-')
      return;
   /* Y */
   sprintf(name, "%s.Y", fname);
   if (!(fd = fopen(name, "wb"))) {
      sprintf(errortext, "Couldn't create %s\n", name);
      error(errortext);
   }
   fwrite(frame[0], 1, horizontal_size*vertical_size, fd);
   fclose(fd);
   /* Cb */
   sprintf(name, "%s.U", fname);
   if (!(fd = fopen(name, "wb"))) {
      sprintf(errortext, "Couldn't create %s\n", name);
      error(errortext);
   }
   fwrite(frame[1], 1, chrom_hsize*chrom_vsize, fd);
   fclose(fd);
   /* Cr */
   sprintf(name, "%s.V", fname);
   if (!(fd = fopen(name, "wb"))) {
      sprintf(errortext, "Couldn't create %s\n", name);
      error(errortext);
   }
   fwrite(frame[2], 1, chrom_hsize*chrom_vsize, fd);
   fclose(fd);
}
accurate analysis
void putnonintrablk(short *blk)
{
   int n, run, signed_level, first;
   run = 0;
   first = 1;
   for(n = 0; n <= 63; n += 1) {
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
      if (signed_level!=0) {
         if (first) {
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
            first = 0;
         }
         else
            putAC(run, signed_level, 0);
         run = 0;
      }
      else
         run++;
   }
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
void putAC(int run, int signed_level, int vlcformat)
{
   int level, len;
   VLCtable *ptab;
   level = signed_level<0?-signed_level:signed_level;
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>(int) sqrt(2048*2048)-1||mpeg1&&level>255) {
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
      error(errortext);
   }
   len = 0;
   if (run<2&&level<41) {
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
         ptab = &dct_code_tab1a[run][level-1];
      else
         ptab = &dct_code_tab1[run][level-1];
      len = ptab->len;
   }
   else if (run<32&&level<6) {
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
         ptab = &dct_code_tab2a[run-2][level-1];
      else
         ptab = &dct_code_tab2[run-2][level-1];
      len = ptab->len;
   }
   if (len!=0) {
      putbits(ptab->code, len);
      putbits(signed_level<0, 1);
   }
   else {
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
      /* Escape */
      putbits(run, 6);
      /* 6 bit code for run */
      if (mpeg1) {
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
            putbits(0, 8);
         if (signed_level<-127)
            putbits(128, 8);
         putbits(signed_level, 8);
      }
      else
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
restructuring
Transformers for "error"
//  T() {0==-1}
void error(char *text)
{
//  T() {}
   fprintf(stderr, text);
//  T() {}
   _IO_putc('\n', stderr);
//  T() {0==-1}
   exit(1);
}
Cumulated effects for "putAC"
//             <may be read   >: errortext[*] outfile outfile[0] 
//                               stderr stderr[0] vlcformat 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: errortext[*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: mpeg1 run signed_level
void putAC(int run, int signed_level, int vlcformat)
{
   int level, len;
   VLCtable *ptab;
//             <    is read   >: signed_level
//             <    is written>: 0`level
   level = signed_level<0?-signed_level:signed_level;
//             <may be read   >: errortext[*] signed_level stderr 
//                               stderr[0] __IO_EFFECTS:LUNS[2]
//             <may be written>: errortext[*] stderr[0] 
//                               __IO_EFFECTS:LUNS[2]
//             <    is read   >: 0`level mpeg1 run
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>(int) sqrt(2048*2048)-1||mpeg1&&level>255) {
//             <may be written>: errortext[*]
//             <    is read   >: run signed_level
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
//             <may be read   >: errortext[*] stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
      error(errortext);
   }
//             <    is written>: len
   len = 0;
//             <may be read   >: ptab ptab[0].len vlcformat
//             <may be written>: len ptab
//             <    is read   >: 0`level run
   if (run<2&&level<41) {
//             <    is read   >: 0`level run vlcformat
//             <    is written>: ptab
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//             <    is read   >: 0`level run
//             <    is written>: ptab
         ptab = &dct_code_tab1a[run][level-1];
      else
//             <    is read   >: 0`level run
//             <    is written>: ptab
         ptab = &dct_code_tab1[run][level-1];
//             <    is read   >: ptab ptab[0].len
//             <    is written>: len
      len = ptab->len;
   }
   else if (run<32&&level<6) {
//             <    is read   >: 0`level run vlcformat
//             <    is written>: ptab
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//             <    is read   >: 0`level run
//             <    is written>: ptab
         ptab = &dct_code_tab2a[run-2][level-1];
      else
//             <    is read   >: 0`level run
//             <    is written>: ptab
         ptab = &dct_code_tab2[run-2][level-1];
//             <    is read   >: ptab ptab[0].len
//             <    is written>: len
      len = ptab->len;
   }
//             <may be read   >: mpeg1 outfile outfile[0] ptab 
//                               ptab[0].code run __IO_EFFECTS:LUNS[*]
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: len signed_level
   if (len!=0) {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: len ptab ptab[0].code
      putbits(ptab->code, len);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: signed_level
      putbits(signed_level<0, 1);
   }
   else {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: run
      /* Escape */
      putbits(run, 6);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mpeg1 signed_level
      /* 6 bit code for run */
      if (mpeg1) {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: signed_level
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
            putbits(0, 8);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: signed_level
         if (signed_level<-127)
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
            putbits(128, 8);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: signed_level
         putbits(signed_level, 8);
      }
      else
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: signed_level
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
Transformers for "putAC"
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
void putAC(int run, int signed_level, int vlcformat)
{
//  T(0`level,len) {}
   int level, len;
//  T() {}
   VLCtable *ptab;
//  T(0`level) {0<=0`level+signed_level, signed_level<=0`level}
   level = signed_level<0?-signed_level:signed_level;
//  T() {0<=run, run<=63}
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>(int) sqrt(2048*2048)-1||mpeg1&&level>255) {
//  T() {}
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
//  T() {0==-1}
      error(errortext);
   }
//  T(len) {len==0}
   len = 0;
//  T(len) {}
   if (run<2&&level<41) {
//  T() {}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  T() {}
         ptab = &dct_code_tab1a[run][level-1];
      else
//  T() {}
         ptab = &dct_code_tab1[run][level-1];
//  T(len) {}
      len = ptab->len;
   }
   else if (run<32&&level<6) {
//  T() {}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  T() {}
         ptab = &dct_code_tab2a[run-2][level-1];
      else
//  T() {}
         ptab = &dct_code_tab2[run-2][level-1];
//  T(len) {}
      len = ptab->len;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len+8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt
//    +putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (len!=0) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len+8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(ptab->code, len);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(signed_level<0, 1);
   }
   else {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+6<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+6<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* Escape */
      putbits(run, 6);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* 6 bit code for run */
      if (mpeg1) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
            putbits(0, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         if (signed_level<-127)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
            putbits(128, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(signed_level, 8);
      }
      else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
Transformers for "putACfirst"
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
void putACfirst(int run, int val)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
   if (run==0&&(val==1||val==-1))
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* these are treated differently */
      putbits(2|val<0, 2);
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
      putAC(run, val, 0);
}
Transformers for "putbits"
//  T(bytecnt,outbfr,outcnt)
//    {n+outcnt+8putbits!:bytecnt#init<=8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt}
void putbits(int val, int n)
{
//  T(i) {}
   int i;
//  T(mask) {}
   unsigned int mask;
//  T(mask) {0<=mask}
   mask = 1<<n-1;
//  T(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
   /* selects first (leftmost) bit */
   for(i = 0; i <= n-1; i += 1) {
//  T(outbfr) {outbfr==2putbits!:outbfr#init}
      outbfr <<= 1;
//  T(outbfr) {}
      if (val&mask)
//  T(outbfr) {}
         outbfr |= 1;
//  T(mask) {2mask<=mask#init, mask#init<=2mask+1}
      mask >>= 1;
//  T(outcnt) {outcnt==putbits!:outcnt#init-1}
      /* select next bit */
      outcnt--;
//  T(bytecnt,outcnt)
//    {8bytecnt+putbits!:outcnt#init==outcnt+8putbits!:bytecnt#init,
//    putbits!:bytecnt#init<=bytecnt,
//    bytecnt<=putbits!:bytecnt#init+1}
      if (outcnt==0) {
//  T() {}
         _IO_putc(outbfr, outfile);
//  T(outcnt) {outcnt==8}
         outcnt = 8;
//  T(bytecnt) {bytecnt==putbits!:bytecnt#init+1}
         bytecnt++;
      }
   }
}
Cumulated effects for "putnonintrablk"
//             <may be read   >: alternate_scan[*] blk[*] errortext[*]
//                               mpeg1 outfile outfile[0] stderr 
//                               stderr[0] zig_zag_scan[*] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: errortext[*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: altscan blk
void putnonintrablk(short *blk)
{
   int n, run, signed_level, first;
//             <    is written>: run
   run = 0;
//             <    is written>: first
   first = 1;
//             <may be read   >: alternate_scan[*] blk[*] errortext[*]
//                               first mpeg1 outfile outfile[0] stderr
//                               stderr[0] zig_zag_scan[*] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: errortext[*] first outfile[0] 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: altscan blk n run signed_level
//             <    is written>: n run signed_level
   for(n = 0; n <= 63; n += 1) {
//             <may be read   >: alternate_scan[*] blk[*] 
//                               zig_zag_scan[*]
//             <    is read   >: altscan blk n
//             <    is written>: signed_level
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//             <may be read   >: errortext[*] first mpeg1 outfile 
//                               outfile[0] stderr stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: errortext[*] first outfile[0] 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: run signed_level
//             <    is written>: run
      if (signed_level!=0) {
//             <may be read   >: errortext[*] mpeg1 outfile outfile[0]
//                               stderr stderr[0] __IO_EFFECTS:LUNS[*]
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: errortext[*] first outfile[0] 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: first run signed_level
         if (first) {
//             <may be read   >: errortext[*] mpeg1 outfile outfile[0]
//                               stderr stderr[0] __IO_EFFECTS:LUNS[*]
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: errortext[*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: run signed_level
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
//             <    is written>: first
            first = 0;
         }
         else
//             <may be read   >: errortext[*] outfile outfile[0] 
//                               stderr stderr[0] __IO_EFFECTS:LUNS[*]
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: errortext[*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: mpeg1 run signed_level
            putAC(run, signed_level, 0);
//             <    is written>: run
         run = 0;
      }
      else
//             <    is read   >: run
//             <    is written>: run
         run++;
   }
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
Transformers for "putnonintrablk"
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+4<=23putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+2<=22putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putnonintrablk(short *blk)
{
//  T(first,n,run,signed_level) {}
   int n, run, signed_level, first;
//  T(run) {run==0}
   run = 0;
//  T(first) {first==1}
   first = 1;
//  T(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+run#init<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run#init<=63n+run,
//    run<=n+run#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   for(n = 0; n <= 63; n += 1) {
//  T(signed_level) {}
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//  T(first,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+run#init+1<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run#init<=run+63,
//    run<=run#init+1}
      if (signed_level!=0) {
//  T(first,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {first==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         if (first) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
//  T(first) {first==0}
            first = 0;
         }
         else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
            putAC(run, signed_level, 0);
//  T(run) {run==0}
         run = 0;
      }
      else
//  T(run) {run==run#init+1}
         run++;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
Cumulated effects for "putpict"
//             <may be read   >: stderr stderr[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: stderr[0] *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
void putpict(unsigned char *frame)
{
   int i, j, k, comp, cc;
   int mb_type;
   int PMV[2][2][2];
   int prev_mquant;
   int cbp, MBAinc;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
   rc_init_pict(frame);
//             <may be read   >: back_hor_f_code fieldpic 
//                               forw_hor_f_code frame_rate mpeg1 
//                               outfile outfile[0] pict_struct 
//                               prog_seq quiet repeatfirst 
//                               statfile[0] stderr stderr[0] topfirst
//                               __IO_EFFECTS:LUNS[*] 
//                               calc_vbv_delay:0`next_ip_delay 
//                               putbits!:outbfr
//             <may be written>: outfile[0] statfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] 
//                               calc_vbv_delay:0`next_ip_delay 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: bit_rate low_delay pict_type statfile
//                               temp_ref vbv_buffer_size vbv_delay 
//                               calc_vbv_delay:0`decoding_time 
//                               putbits!:bytecnt putbits!:outcnt 
//                               ratectl!:bitcnt_EOP
//             <    is written>: vbv_delay 
//                               calc_vbv_delay:0`decoding_time
   /* set up rate control */
   /* picture header and picture coding extension */
   putpicthdr();
//             <may be read   >: altscan back_hor_f_code 
//                               back_vert_f_code dc_prec 
//                               forw_hor_f_code forw_vert_f_code 
//                               frame_pred_dct intravlc outfile 
//                               outfile[0] pict_struct prog_frame 
//                               q_scale_type repeatfirst topfirst 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mpeg1
   if (!mpeg1)
//             <may be read   >: outfile outfile[0] topfirst 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: altscan back_hor_f_code 
//                               back_vert_f_code dc_prec 
//                               forw_hor_f_code forw_vert_f_code 
//                               frame_pred_dct intravlc pict_struct 
//                               prog_frame q_scale_type repeatfirst 
//                               putbits!:outcnt
      putpictcodext();
//             <may be read   >: map_non_linear_mquant[*] 
//                               non_linear_mquant_table[*]
//             <may be written>: ratectl!:prev_mquant
//             <    is read   >: q_scale_type r ratectl!:d
//             <    is written>: prev_mquant
   prev_mquant = rc_start_mb();
//             <    is written>: k
   /* initialize quantization parameter */
   k = 0;
//             <may be read   >: MBAinc PMV[*][*][*] alternate_scan[*]
//                               altscan avg_act back_hor_f_code 
//                               back_vert_f_code block_count blocks 
//                               cbp cc chroma_format comp 
//                               dc_dct_pred[*] dc_prec errortext[*] 
//                               forw_hor_f_code forw_vert_f_code 
//                               frame_pred_dct i inter_q[*] 
//                               intra_q[*] intravlc j k 
//                               map_non_linear_mquant[*] mb_type 
//                               mb_width mbinfo mbinfo[*].MV[*][*][*]
//                               mbinfo[*].dct_type 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].mb_type 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mquant 
//                               mbinfo[*].mv_field_sel[*][*] 
//                               mbinfo[*].act mpeg1 
//                               non_linear_mquant_table[*] outfile 
//                               outfile[0] pict_struct pict_type 
//                               prev_mquant q_scale_type quiet r 
//                               stderr stderr[0] vertical_size 
//                               zig_zag_scan[*] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len 
//                               putvlc!:addrinctab[*].code 
//                               putvlc!:addrinctab[*].len 
//                               putvlc!:cbptable[*].code 
//                               putvlc!:cbptable[*].len 
//                               putvlc!:mbtypetab[*][*].code 
//                               putvlc!:mbtypetab[*][*].len 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len 
//                               ratectl!:Q ratectl!:S ratectl!:T 
//                               ratectl!:actsum ratectl!:d 
//                               ratectl!:prev_mquant
//             <may be written>: MBAinc PMV[*][*][*] cbp cc comp 
//                               dc_dct_pred[*] errortext[*] i k 
//                               mb_type mbinfo[*].cbp 
//                               mbinfo[*].mb_type mbinfo[*].mquant 
//                               mbinfo[*].skipped outfile[0] 
//                               prev_mquant stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               ratectl!:Q ratectl!:actsum 
//                               ratectl!:prev_mquant
//             <    is read   >: mb_height2
//             <    is written>: j
   for(j = 0; j <= mb_height2-1; j += 1)
//             <may be read   >: MBAinc PMV[*][*][*] alternate_scan[*]
//                               altscan avg_act back_hor_f_code 
//                               back_vert_f_code block_count blocks 
//                               cbp cc chroma_format comp 
//                               dc_dct_pred[*] dc_prec errortext[*] 
//                               forw_hor_f_code forw_vert_f_code 
//                               frame_pred_dct i inter_q[*] 
//                               intra_q[*] intravlc j k 
//                               map_non_linear_mquant[*] mb_type 
//                               mbinfo mbinfo[*].MV[*][*][*] 
//                               mbinfo[*].dct_type 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].mb_type 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mquant 
//                               mbinfo[*].mv_field_sel[*][*] 
//                               mbinfo[*].act mpeg1 
//                               non_linear_mquant_table[*] outfile 
//                               outfile[0] pict_struct pict_type 
//                               prev_mquant q_scale_type quiet r 
//                               stderr stderr[0] vertical_size 
//                               zig_zag_scan[*] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len 
//                               putvlc!:addrinctab[*].code 
//                               putvlc!:addrinctab[*].len 
//                               putvlc!:cbptable[*].code 
//                               putvlc!:cbptable[*].len 
//                               putvlc!:mbtypetab[*][*].code 
//                               putvlc!:mbtypetab[*][*].len 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len 
//                               ratectl!:Q ratectl!:S ratectl!:T 
//                               ratectl!:actsum ratectl!:d 
//                               ratectl!:prev_mquant
//             <may be written>: MBAinc PMV[*][*][*] cbp cc comp 
//                               dc_dct_pred[*] errortext[*] k mb_type
//                               mbinfo[*].cbp mbinfo[*].mb_type 
//                               mbinfo[*].mquant mbinfo[*].skipped 
//                               outfile[0] prev_mquant stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               ratectl!:Q ratectl!:actsum 
//                               ratectl!:prev_mquant
//             <    is read   >: mb_height2 mb_width
//             <    is written>: i
      /* macroblock row loop */
      for(i = 0; i <= mb_width-1; i += 1) {
//             <may be read   >: cc j map_non_linear_mquant[*] mpeg1 
//                               outfile outfile[0] prev_mquant 
//                               q_scale_type vertical_size 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: MBAinc PMV[*][*][*] cc dc_dct_pred[*]
//                               outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: i mb_height2 mb_width
         /* macroblock loop */
         if (i==0) {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mb_height2 mb_width putbits!:outcnt
            /* slice header (6.2.4) */
            alignbits();
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: j mb_height2 mb_width mpeg1 
//                               vertical_size
            if (mpeg1||vertical_size<=2800)
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: j mb_height2 mb_width
               putbits(0x101L+j, 32);
            else {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: j mb_height2 mb_width
               putbits(0x101L+(j&127), 32);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: j mb_height2 mb_width
               /* slice_start_code */
               putbits(j>>7, 3);
            }
//             <may be read   >: map_non_linear_mquant[*] outfile 
//                               outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mb_height2 mb_width prev_mquant 
//                               q_scale_type
            /* quantiser_scale_code */
            putbits(q_scale_type?map_non_linear_mquant[prev_mquant]:prev_mquant>>1, 5);
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mb_height2 mb_width
            putbits(0, 1);
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
//             <    is written>: cc
            /* extra_bit_slice */
            /* reset predictors */
            for(cc = 0; cc <= 2; cc += 1)
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
               dc_dct_pred[cc] = 0;
//             <may be written>: PMV[*][0][*]
//             <    is read   >: mb_height2 mb_width
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//             <may be written>: PMV[*][1][*]
//             <    is read   >: mb_height2 mb_width
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//             <    is read   >: i mb_height2 mb_width
//             <    is written>: MBAinc
            MBAinc = i+1;
         }
//             <may be read   >: mbinfo[*].mb_type
//             <    is read   >: k mb_height2 mb_width mbinfo
//             <    is written>: mb_type
         mb_type = mbinfo[k].mb_type;
//             <may be read   >: map_non_linear_mquant[*] 
//                               mbinfo[*].act 
//                               non_linear_mquant_table[*] 
//                               ratectl!:prev_mquant
//             <may be written>: mbinfo[*].mquant ratectl!:prev_mquant
//             <    is read   >: avg_act k mb_height2 mb_width mbinfo 
//                               q_scale_type r putbits!:bytecnt 
//                               putbits!:outcnt ratectl!:Q ratectl!:S
//                               ratectl!:T ratectl!:actsum ratectl!:d
//             <    is written>: ratectl!:Q ratectl!:actsum
         /* determine mquant (rate control) */
         mbinfo[k].mquant = rc_calc_mquant(k);
//             <may be read   >: blocks cbp comp dc_prec inter_q[*] 
//                               intra_q[*] mbinfo[*].mquant mpeg1
//             <may be written>: mb_type mbinfo[*].cbp
//             <    is read   >: block_count k mb_height2 mb_type 
//                               mb_width mbinfo
//             <    is written>: cbp comp
         /* quantize macroblock */
         if (mb_type&1) {
//             <may be read   >: blocks comp dc_prec intra_q[*] k 
//                               mbinfo mbinfo[*].mquant mpeg1
//             <    is read   >: block_count mb_height2 mb_width
//             <    is written>: comp
            for(comp = 0; comp <= block_count-1; comp += 1)
//             <may be read   >: intra_q[*] mbinfo[*].mquant mpeg1
//             <    is read   >: block_count blocks comp dc_prec k 
//                               mb_height2 mb_width mbinfo
               quant_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], dc_prec, intra_q, mbinfo[k].mquant);
//             <may be written>: mbinfo[*].cbp
//             <    is read   >: block_count k mb_height2 mb_width 
//                               mbinfo
//             <    is written>: cbp
            mbinfo[k].cbp = cbp = (1<<block_count)-1;
         }
         else {
//             <    is read   >: mb_height2 mb_width
//             <    is written>: cbp
            cbp = 0;
//             <may be read   >: blocks cbp comp inter_q[*] k mbinfo 
//                               mbinfo[*].mquant mpeg1
//             <may be written>: cbp
//             <    is read   >: block_count mb_height2 mb_width
//             <    is written>: comp
            for(comp = 0; comp <= block_count-1; comp += 1)
//             <may be read   >: inter_q[*] mbinfo[*].mquant mpeg1
//             <    is read   >: block_count blocks cbp comp k 
//                               mb_height2 mb_width mbinfo
//             <    is written>: cbp
               cbp = cbp<<1|quant_non_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], inter_q, mbinfo[k].mquant);
//             <may be written>: mbinfo[*].cbp
//             <    is read   >: cbp k mb_height2 mb_width mbinfo
            mbinfo[k].cbp = cbp;
//             <may be read   >: mb_type
//             <may be written>: mb_type
//             <    is read   >: cbp mb_height2 mb_width
            if (cbp)
//             <    is read   >: mb_height2 mb_type mb_width
//             <    is written>: mb_type
               mb_type |= 2;
         }
//             <may be read   >: mb_type mbinfo[*].mquant
//             <may be written>: mb_type
//             <    is read   >: cbp k mb_height2 mb_width mbinfo 
//                               prev_mquant
         /* output mquant if it has changed */
         if (cbp&&prev_mquant!=mbinfo[k].mquant)
//             <    is read   >: mb_height2 mb_type mb_width
//             <    is written>: mb_type
            mb_type |= 16;
//             <    is read   >: cbp i mb_height2 mb_width
/* check if macroblock can be skipped */
         if (i!=0&&i!=mb_width-1&&!cbp) goto l99999;
l99996:         ;
//             <may be written>: mbinfo[*].skipped
//             <    is read   >: k mb_height2 mb_width mbinfo
         /* macroblock cannot be skipped */
         mbinfo[k].skipped = 0;
//             <may be written>: mb_type
//             <    is read   >: cbp mb_height2 mb_type mb_width 
//                               pict_type
         /* there's no VLC for 'No MC, Not Coded':
                * we have to transmit (0,0) motion vectors
                */
         if (pict_type==2&&!cbp&&!(mb_type&8))
//             <    is read   >: mb_height2 mb_type mb_width
//             <    is written>: mb_type
            mb_type |= 8;
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:addrinctab[*].code 
//                               putvlc!:addrinctab[*].len
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: MBAinc mb_height2 mb_width
         putaddrinc(MBAinc);
//             <    is read   >: mb_height2 mb_width
//             <    is written>: MBAinc
         /* macroblock_address_increment */
         MBAinc = 1;
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:mbtypetab[*][*].code 
//                               putvlc!:mbtypetab[*][*].len
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mb_height2 mb_type mb_width pict_type
         putmbtype(pict_type, mb_type);
//             <may be read   >: k mbinfo mbinfo[*].motion_type 
//                               outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: frame_pred_dct mb_height2 mb_type 
//                               mb_width
         /* macroblock type */
         if (mb_type&(8|4)&&!frame_pred_dct)
//             <may be read   >: mbinfo[*].motion_type outfile 
//                               outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: k mb_height2 mb_width mbinfo
            putbits(mbinfo[k].motion_type, 2);
//             <may be read   >: k mbinfo mbinfo[*].dct_type outfile 
//                               outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: cbp frame_pred_dct mb_height2 
//                               mb_width pict_struct
         if (pict_struct==3&&cbp&&!frame_pred_dct)
//             <may be read   >: mbinfo[*].dct_type outfile outfile[0]
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: k mb_height2 mb_width mbinfo
            putbits(mbinfo[k].dct_type, 1);
//             <may be read   >: k map_non_linear_mquant[*] mbinfo 
//                               mbinfo[*].mquant outfile outfile[0] 
//                               q_scale_type __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: outfile[0] prev_mquant 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: mb_height2 mb_type mb_width
         if (mb_type&16) {
//             <may be read   >: map_non_linear_mquant[*] 
//                               mbinfo[*].mquant outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: k mb_height2 mb_width mbinfo 
//                               q_scale_type
            putbits(q_scale_type?map_non_linear_mquant[mbinfo[k].mquant]:mbinfo[k].mquant>>1, 5);
//             <may be read   >: mbinfo[*].mquant
//             <    is read   >: k mb_height2 mb_width mbinfo
//             <    is written>: prev_mquant
            prev_mquant = mbinfo[k].mquant;
         }
//             <may be read   >: PMV[*][*][*] forw_hor_f_code 
//                               forw_vert_f_code k mbinfo 
//                               mbinfo[*].MV[*][*][*] 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mv_field_sel[*][*] outfile 
//                               outfile[0] pict_struct quiet stderr 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len
//             <may be written>: PMV[*][*][*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: mb_height2 mb_type mb_width
         if (mb_type&8)
//             <may be read   >: PMV[*][*][*] mbinfo[*].MV[*][*][*] 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mv_field_sel[*][*] outfile 
//                               outfile[0] quiet stderr stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len
//             <may be written>: PMV[*][*][*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: forw_hor_f_code forw_vert_f_code k 
//                               mb_height2 mb_width mbinfo 
//                               pict_struct
            /* forward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 0, mbinfo[k].motion_type, forw_hor_f_code, forw_vert_f_code);
//             <may be read   >: PMV[*][*][*] back_hor_f_code 
//                               back_vert_f_code k mbinfo 
//                               mbinfo[*].MV[*][*][*] 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mv_field_sel[*][*] outfile 
//                               outfile[0] pict_struct quiet stderr 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len
//             <may be written>: PMV[*][*][*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: mb_height2 mb_type mb_width
         if (mb_type&4)
//             <may be read   >: PMV[*][*][*] mbinfo[*].MV[*][*][*] 
//                               mbinfo[*].dmvector[*] 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mv_field_sel[*][*] outfile 
//                               outfile[0] quiet stderr stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:motionvectab[*].code 
//                               putvlc!:motionvectab[*].len
//             <may be written>: PMV[*][*][*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: back_hor_f_code back_vert_f_code k 
//                               mb_height2 mb_width mbinfo 
//                               pict_struct
            /* backward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 1, mbinfo[k].motion_type, back_hor_f_code, back_vert_f_code);
//             <may be read   >: block_count cbp chroma_format outfile
//                               outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:cbptable[*].code 
//                               putvlc!:cbptable[*].len
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: mb_height2 mb_type mb_width
         if (mb_type&2) {
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:cbptable[*].code 
//                               putvlc!:cbptable[*].len
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: block_count cbp mb_height2 mb_width
            putcbp(cbp>>block_count-6&63);
//             <may be read   >: block_count cbp outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: chroma_format mb_height2 mb_width
            if (chroma_format!=1)
//             <may be read   >: outfile outfile[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <    is read   >: block_count cbp mb_height2 mb_width
               putbits(cbp, block_count-6);
         }
//             <may be read   >: alternate_scan[*] altscan blocks cbp 
//                               cc comp dc_dct_pred[*] errortext[*] 
//                               intravlc k mb_type mpeg1 outfile 
//                               outfile[0] stderr stderr[0] 
//                               zig_zag_scan[*] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len
//             <may be written>: cc dc_dct_pred[*] errortext[*] 
//                               outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: block_count mb_height2 mb_width
//             <    is written>: comp
         for(comp = 0; comp <= block_count-1; comp += 1)
//             <may be read   >: alternate_scan[*] altscan blocks cc 
//                               dc_dct_pred[*] errortext[*] intravlc 
//                               k mb_type mpeg1 outfile outfile[0] 
//                               stderr stderr[0] zig_zag_scan[*] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len
//             <may be written>: cc dc_dct_pred[*] errortext[*] 
//                               outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: block_count cbp comp mb_height2 
//                               mb_width
            if (cbp&1<<block_count-1-comp)
//             <may be read   >: alternate_scan[*] cc dc_dct_pred[*] 
//                               errortext[*] intravlc mpeg1 outfile 
//                               outfile[0] stderr stderr[0] 
//                               zig_zag_scan[*] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len
//             <may be written>: cc dc_dct_pred[*] errortext[*] 
//                               outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: altscan block_count blocks comp k 
//                               mb_height2 mb_type mb_width
               /* block loop */
               if (mb_type&1) {
//             <    is read   >: block_count comp mb_height2 mb_width
//             <    is written>: cc
                  cc = comp<4?0:(comp&1)+1;
//             <may be read   >: alternate_scan[*] dc_dct_pred[*] 
//                               errortext[*] outfile outfile[0] 
//                               stderr stderr[0] zig_zag_scan[*] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt 
//                               putvlc!:DCchromtab[*].code 
//                               putvlc!:DCchromtab[*].len 
//                               putvlc!:DClumtab[*].code 
//                               putvlc!:DClumtab[*].len
//             <may be written>: dc_dct_pred[*] errortext[*] 
//                               outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: altscan block_count blocks cc comp 
//                               intravlc k mb_height2 mb_width mpeg1
                  putintrablk(blocks[k*block_count+comp], cc);
               }
               else
//             <may be read   >: alternate_scan[*] errortext[*] mpeg1 
//                               outfile outfile[0] stderr stderr[0] 
//                               zig_zag_scan[*] __IO_EFFECTS:LUNS[*] 
//                               putbits!:bytecnt putbits!:outbfr 
//                               putbits!:outcnt
//             <may be written>: errortext[*] outfile[0] stderr[0] 
//                               __IO_EFFECTS:LUNS[*] putbits!:bytecnt
//                               putbits!:outbfr putbits!:outcnt
//             <    is read   >: altscan block_count blocks comp k 
//                               mb_height2 mb_width
                  putnonintrablk(blocks[k*block_count+comp]);
//             <may be read   >: cc
//             <may be written>: cc dc_dct_pred[*]
//             <    is read   >: mb_height2 mb_type mb_width
         /* reset predictors */
         if (!(mb_type&1))
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
//             <    is written>: cc
            for(cc = 0; cc <= 2; cc += 1)
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
               dc_dct_pred[cc] = 0;
//             <may be written>: PMV[*][*][*]
//             <    is read   >: mb_height2 mb_type mb_width pict_type
         if (mb_type&1||pict_type==2&&!(mb_type&8)) {
//             <may be written>: PMV[*][0][*]
//             <    is read   >: mb_height2 mb_width
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//             <may be written>: PMV[*][1][*]
//             <    is read   >: mb_height2 mb_width
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         }
//             <may be written>: mbinfo[*].mb_type
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo
         mbinfo[k].mb_type = mb_type;
//             <    is read   >: k mb_height2 mb_width
//             <    is written>: k
         k++;
         goto _loop_end_2;
l99999:         ;
//             <    is read   >: mb_height2 mb_type mb_width pict_type
/* no DCT coefficients and neither first nor last macroblock of slice */
         if (pict_type==2&&!(mb_type&8)) goto l99998;
//             <may be read   >: PMV[0][*][*] mbinfo[*].MV[0][*][*] 
//                               mbinfo[*].mb_type 
//                               mbinfo[*].motion_type
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo 
//                               pict_struct pict_type
         if (pict_type==3&&pict_struct==3&&mbinfo[k].motion_type==2&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1])&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1])) goto l99997;
//             <may be read   >: PMV[0][*][*] mbinfo[*].MV[0][*][*] 
//                               mbinfo[*].mb_type 
//                               mbinfo[*].motion_type 
//                               mbinfo[*].mv_field_sel[0][*]
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo 
//                               pict_struct pict_type
         if (pict_type==3&&pict_struct!=3&&mbinfo[k].motion_type==1&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1]&&((mbinfo[k].mv_field_sel)[0])[0]==(pict_struct==2))&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1]&&((mbinfo[k].mv_field_sel)[0])[1]==(pict_struct==2))) {
         }
         else {
            goto l99996;
         }
//             <may be written>: mbinfo[*].mb_type
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo
         /* conditions for skipping in B field pictures:
                    * - must be field predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    * - relevant motion_vertical_field_selects have to be of same
                    *   parity as current field
                    */
         mbinfo[k].mb_type = mb_type;
//             <may be written>: mbinfo[*].skipped
//             <    is read   >: k mb_height2 mb_width mbinfo
         mbinfo[k].skipped = 1;
//             <    is read   >: MBAinc mb_height2 mb_width
//             <    is written>: MBAinc
         MBAinc++;
//             <    is read   >: k mb_height2 mb_width
//             <    is written>: k
         k++;
         goto _loop_end_2;
l99997:         ;
//             <may be written>: mbinfo[*].mb_type
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo
         /* conditions for skipping in B frame pictures:
                    * - must be frame predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    */
         mbinfo[k].mb_type = mb_type;
//             <may be written>: mbinfo[*].skipped
//             <    is read   >: k mb_height2 mb_width mbinfo
         mbinfo[k].skipped = 1;
//             <    is read   >: MBAinc mb_height2 mb_width
//             <    is written>: MBAinc
         MBAinc++;
//             <    is read   >: k mb_height2 mb_width
//             <    is written>: k
         k++;
         goto _loop_end_2;
l99998:         ;
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
//             <    is written>: cc
         /* P picture, no motion vectors -> skip */
         /* reset predictors */
         for(cc = 0; cc <= 2; cc += 1)
//             <may be written>: dc_dct_pred[*]
//             <    is read   >: cc mb_height2 mb_width
            dc_dct_pred[cc] = 0;
//             <may be written>: PMV[*][0][*]
//             <    is read   >: mb_height2 mb_width
         PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//             <may be written>: PMV[*][1][*]
//             <    is read   >: mb_height2 mb_width
         PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//             <may be written>: mbinfo[*].mb_type
//             <    is read   >: k mb_height2 mb_type mb_width mbinfo
         mbinfo[k].mb_type = mb_type;
//             <may be written>: mbinfo[*].skipped
//             <    is read   >: k mb_height2 mb_width mbinfo
         mbinfo[k].skipped = 1;
//             <    is read   >: MBAinc mb_height2 mb_width
//             <    is written>: MBAinc
         MBAinc++;
//             <    is read   >: k mb_height2 mb_width
//             <    is written>: k
         k++;
//             <    is read   >: mb_height2 mb_width
_loop_end_2:         ;
      }
//             <may be read   >: pict_type statfile[0] 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: Xb Xi Xp d0b d0i d0p statfile[0] 
//                               __IO_EFFECTS:LUNS[*] ratectl!:Nb 
//                               ratectl!:Np
//             <    is read   >: Xb Xi Xp avg_act d0b d0i d0p 
//                               mb_height2 mb_width statfile 
//                               putbits!:bytecnt putbits!:outcnt 
//                               ratectl!:Nb ratectl!:Np ratectl!:Q 
//                               ratectl!:R ratectl!:S ratectl!:T 
//                               ratectl!:actsum ratectl!:d
//             <    is written>: avg_act ratectl!:R ratectl!:S 
//                               ratectl!:d
   rc_update_pict();
//             <    is read   >: putbits!:bytecnt putbits!:outcnt 
//                               ratectl!:bitcnt_EOP
//             <    is written>: ratectl!:bitcnt_EOP
   vbv_end_of_picture();
}
Transformers for "putpict"
//  T() {}
void putpict(unsigned char *frame)
{
//  T(cc,comp,i,j,k) {}
   int i, j, k, comp, cc;
//  T(mb_type) {}
   int mb_type;
//  T() {}
   int PMV[2][2][2];
//  T(prev_mquant) {}
   int prev_mquant;
//  T(MBAinc,cbp) {}
   int cbp, MBAinc;
//  T(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   rc_init_pict(frame);
//  T() {}
   /* set up rate control */
   /* picture header and picture coding extension */
   putpicthdr();
//  T() {}
   if (!mpeg1)
//  T() {}
      putpictcodext();
//  T(prev_mquant) {}
   prev_mquant = rc_start_mb();
//  T(k) {k==0}
   /* initialize quantization parameter */
   k = 0;
//  T(MBAinc,cbp,cc,comp,i,j,k,mb_type,prev_mquant) {0<=j,
//    j+1<=mb_height2, k#init<=k}
   for(j = 0; j <= mb_height2-1; j += 1)
//  T(MBAinc,cbp,cc,comp,i,k,mb_type,prev_mquant) {i+k#init==k, 0<=i,
//    i+1<=mb_width}
      /* macroblock row loop */
      for(i = 0; i <= mb_width-1; i += 1) {
//  T(MBAinc,cc) {}
         /* macroblock loop */
         if (i==0) {
//  T() {}
            /* slice header (6.2.4) */
            alignbits();
//  T() {}
            if (mpeg1||vertical_size<=2800)
//  T() {}
               putbits(0x101L+j, 32);
            else {
//  T() {}
               putbits(0x101L+(j&127), 32);
//  T() {}
               /* slice_start_code */
               putbits(j>>7, 3);
            }
//  T() {}
            /* quantiser_scale_code */
            putbits(q_scale_type?map_non_linear_mquant[prev_mquant]:prev_mquant>>1, 5);
//  T() {}
            putbits(0, 1);
//  T(cc) {0<=cc, cc<=2}
            /* extra_bit_slice */
            /* reset predictors */
            for(cc = 0; cc <= 2; cc += 1)
//  T() {}
               dc_dct_pred[cc] = 0;
//  T() {}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  T(MBAinc) {MBAinc==i+1}
            MBAinc = i+1;
         }
//  T(mb_type) {}
         mb_type = mbinfo[k].mb_type;
//  T() {}
         /* determine mquant (rate control) */
         mbinfo[k].mquant = rc_calc_mquant(k);
//  T(cbp,comp,mb_type) {block_count<=comp, 0<=comp}
         /* quantize macroblock */
         if (mb_type&1) {
//  T(comp) {comp+1<=block_count, 0<=comp}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  T() {}
               quant_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], dc_prec, intra_q, mbinfo[k].mquant);
//  T(cbp) {0<=cbp+1}
            mbinfo[k].cbp = cbp = (1<<block_count)-1;
         }
         else {
//  T(cbp) {cbp==0}
            cbp = 0;
//  T(cbp,comp) {comp+1<=block_count, 0<=comp}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  T(cbp) {}
               cbp = cbp<<1|quant_non_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], inter_q, mbinfo[k].mquant);
//  T() {}
            mbinfo[k].cbp = cbp;
//  T(mb_type) {}
            if (cbp)
//  T(mb_type) {}
               mb_type |= 2;
         }
//  T(mb_type) {}
         /* output mquant if it has changed */
         if (cbp&&prev_mquant!=mbinfo[k].mquant)
//  T(mb_type) {}
            mb_type |= 16;
//  T() {}
/* check if macroblock can be skipped */
         if (i!=0&&i!=mb_width-1&&!cbp) goto l99999;
l99996:         ;
//  T() {}
         /* macroblock cannot be skipped */
         mbinfo[k].skipped = 0;
//  T(mb_type) {}
         /* there's no VLC for 'No MC, Not Coded':
                * we have to transmit (0,0) motion vectors
                */
         if (pict_type==2&&!cbp&&!(mb_type&8))
//  T(mb_type) {}
            mb_type |= 8;
//  T() {}
         putaddrinc(MBAinc);
//  T(MBAinc) {MBAinc==1}
         /* macroblock_address_increment */
         MBAinc = 1;
//  T() {}
         putmbtype(pict_type, mb_type);
//  T() {}
         /* macroblock type */
         if (mb_type&(8|4)&&!frame_pred_dct)
//  T() {}
            putbits(mbinfo[k].motion_type, 2);
//  T() {}
         if (pict_struct==3&&cbp&&!frame_pred_dct)
//  T() {}
            putbits(mbinfo[k].dct_type, 1);
//  T(prev_mquant) {}
         if (mb_type&16) {
//  T() {}
            putbits(q_scale_type?map_non_linear_mquant[mbinfo[k].mquant]:mbinfo[k].mquant>>1, 5);
//  T(prev_mquant) {}
            prev_mquant = mbinfo[k].mquant;
         }
//  T() {}
         if (mb_type&8)
//  T() {}
            /* forward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 0, mbinfo[k].motion_type, forw_hor_f_code, forw_vert_f_code);
//  T() {}
         if (mb_type&4)
//  T() {}
            /* backward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 1, mbinfo[k].motion_type, back_hor_f_code, back_vert_f_code);
//  T() {}
         if (mb_type&2) {
//  T() {}
            putcbp(cbp>>block_count-6&63);
//  T() {}
            if (chroma_format!=1)
//  T() {}
               putbits(cbp, block_count-6);
         }
//  T(cc,comp) {comp+1<=block_count, 0<=comp}
         for(comp = 0; comp <= block_count-1; comp += 1)
//  T(cc) {}
            if (cbp&1<<block_count-1-comp)
//  T(cc) {}
               /* block loop */
               if (mb_type&1) {
//  T(cc) {}
                  cc = comp<4?0:(comp&1)+1;
//  T() {}
                  putintrablk(blocks[k*block_count+comp], cc);
               }
               else
//  T() {}
                  putnonintrablk(blocks[k*block_count+comp]);
//  T(cc) {}
         /* reset predictors */
         if (!(mb_type&1))
//  T(cc) {0<=cc, cc<=2}
            for(cc = 0; cc <= 2; cc += 1)
//  T() {}
               dc_dct_pred[cc] = 0;
//  T() {}
         if (mb_type&1||pict_type==2&&!(mb_type&8)) {
//  T() {}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         }
//  T() {}
         mbinfo[k].mb_type = mb_type;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99999:         ;
//  T() {}
/* no DCT coefficients and neither first nor last macroblock of slice */
         if (pict_type==2&&!(mb_type&8)) goto l99998;
//  T() {}
         if (pict_type==3&&pict_struct==3&&mbinfo[k].motion_type==2&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1])&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1])) goto l99997;
//  T() {}
         if (pict_type==3&&pict_struct!=3&&mbinfo[k].motion_type==1&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1]&&((mbinfo[k].mv_field_sel)[0])[0]==(pict_struct==2))&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1]&&((mbinfo[k].mv_field_sel)[0])[1]==(pict_struct==2))) {
         }
         else {
            goto l99996;
         }
//  T() {}
         /* conditions for skipping in B field pictures:
                    * - must be field predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    * - relevant motion_vertical_field_selects have to be of same
                    *   parity as current field
                    */
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99997:         ;
//  T() {}
         /* conditions for skipping in B frame pictures:
                    * - must be frame predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    */
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99998:         ;
//  T(cc) {0<=cc, cc<=2}
         /* P picture, no motion vectors -> skip */
         /* reset predictors */
         for(cc = 0; cc <= 2; cc += 1)
//  T() {}
            dc_dct_pred[cc] = 0;
//  T() {}
         PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
         PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  T() {}
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
//  T() {}
_loop_end_2:         ;
      }
//  T() {}
   rc_update_pict();
//  T() {}
   vbv_end_of_picture();
}
Cumulated effects for "calcSNR1"
//             <may be read   >: lx org org[*] rec rec[*]
//             <    is read   >: h pe pv w
//             <    is written>: pe[0] pv[0]
static void calcSNR1(unsigned char *org, unsigned char *rec, int lx, int w, int h, double *pv, double *pe)
{
   int i, j;
   double v1, s1, s2, e2;
//             <    is written>: e2 s1 s2
   s1 = s2 = e2 = 0.0;
//             <may be read   >: e2 i lx org org[*] rec rec[*] s1 s2 
//                               v1 w
//             <may be written>: e2 i org rec s1 s2 v1
//             <    is read   >: h
//             <    is written>: j
   for(j = 0; j <= h-1; j += 1) {
//             <may be read   >: e2 i org org[*] rec rec[*] s1 s2 v1
//             <may be written>: e2 s1 s2 v1
//             <    is read   >: h w
//             <    is written>: i
      for(i = 0; i <= w-1; i += 1) {
//             <may be read   >: org[*]
//             <    is read   >: h i org w
//             <    is written>: v1
         v1 = org[i];
//             <    is read   >: h s1 v1 w
//             <    is written>: s1
         s1 += v1;
//             <    is read   >: h s2 v1 w
//             <    is written>: s2
         s2 += v1*v1;
//             <may be read   >: rec[*]
//             <    is read   >: h i rec v1 w
//             <    is written>: v1
         v1 -= rec[i];
//             <    is read   >: e2 h v1 w
//             <    is written>: e2
         e2 += v1*v1;
      }
//             <    is read   >: h lx org
//             <    is written>: org
      org += lx;
//             <    is read   >: h lx rec
//             <    is written>: rec
      rec += lx;
   }
//             <    is read   >: h s1 w
//             <    is written>: s1
   s1 /= w*h;
//             <    is read   >: h s2 w
//             <    is written>: s2
   s2 /= w*h;
//             <    is read   >: e2 h w
//             <    is written>: e2
   e2 /= w*h;
//             <may be written>: e2
//             <    is read   >: e2
   /* prevent division by zero in calcSNR() */
   if (e2==0.0)
//             <    is written>: e2
      e2 = 0.00001;
//             <    is read   >: pv s1 s2
//             <    is written>: pv[0]
   *pv = s2-s1*s1;
//             <    is read   >: e2 pe
//             <    is written>: pe[0]
   /* variance */
   *pe = e2;
}
Cumulated effects for "calcSNR"
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
void calcSNR(unsigned char *org[3], unsigned char *rec[3])
{
   int w, h, offs;
   double v, e;
//             <    is read   >: horizontal_size
//             <    is written>: w
   w = horizontal_size;
//             <    is read   >: pict_struct vertical_size
//             <    is written>: h
   h = pict_struct==3?vertical_size:vertical_size>>1;
//             <may be read   >: width
//             <    is read   >: pict_struct
//             <    is written>: offs
   offs = pict_struct==2?width:0;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   calcSNR1(org[0]+offs, rec[0]+offs, width2, w, h, &v, &e);
//             <may be read   >: statfile[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: statfile[0] __IO_EFFECTS:LUNS[*]
//             <    is read   >: e statfile v
   fprintf(statfile, "Y: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//             <may be read   >: offs w
//             <may be written>: offs w
//             <    is read   >: chroma_format
   if (chroma_format!=3) {
//             <    is read   >: w
//             <    is written>: w
      w >>= 1;
//             <    is read   >: offs
//             <    is written>: offs
      offs >>= 1;
   }
//             <may be read   >: h
//             <may be written>: h
//             <    is read   >: chroma_format
   if (chroma_format==1)
//             <    is read   >: h
//             <    is written>: h
      h >>= 1;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   calcSNR1(org[1]+offs, rec[1]+offs, chrom_width2, w, h, &v, &e);
//             <may be read   >: statfile[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: statfile[0] __IO_EFFECTS:LUNS[*]
//             <    is read   >: e statfile v
   fprintf(statfile, "U: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
   calcSNR1(org[2]+offs, rec[2]+offs, chrom_width2, w, h, &v, &e);
//             <may be read   >: statfile[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: statfile[0] __IO_EFFECTS:LUNS[*]
//             <    is read   >: e statfile v
   fprintf(statfile, "V: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
}
Transformers for "calcSNR"
//  T() {}
void calcSNR(unsigned char *org[3], unsigned char *rec[3])
{
//  T(h,offs,w) {}
   int w, h, offs;
//  T() {}
   double v, e;
//  T(w) {horizontal_size==w}
   w = horizontal_size;
//  T(h) {}
   h = pict_struct==3?vertical_size:vertical_size>>1;
//  T(offs) {}
   offs = pict_struct==2?width:0;
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[0]+offs, rec[0]+offs, width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "Y: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  T(offs,w) {}
   if (chroma_format!=3) {
//  T(w) {2w<=w#init, w#init<=2w+1}
      w >>= 1;
//  T(offs) {2offs<=offs#init, offs#init<=2offs+1}
      offs >>= 1;
   }
//  T(h) {}
   if (chroma_format==1)
//  T(h) {2h<=h#init, h#init<=2h+1}
      h >>= 1;
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[1]+offs, rec[1]+offs, chrom_width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "U: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[2]+offs, rec[2]+offs, chrom_width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "V: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
}
Cumulated effects for "main"
//             <may be read   >: stderr stderr[0] stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: stderr[0] stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
int main(int argc, char *argv[])
{
//             <may be read   >: stderr stderr[0] stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: stderr[0] stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
   if (1) {
//             <may be read   >: author[*] stdout stdout[0] version[*]
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: argc
      if (argc!=3) {
//             <may be read   >: author[*] stdout[0] version[*]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("\n%s, %s\n", version, author);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("Usage: mpeg2encode in.par out.m2v\n");
         exit(0);
      }
//             <may be read   >: altscan_tab[*] argv[1][*] 
//                               conceal_tab[*] errortext[*] 
//                               frame_pred_dct_tab[*] intravlc_tab[*]
//                               level motion_data[*].back_hor_f_code 
//                               motion_data[*].back_vert_f_code 
//                               motion_data[*].forw_hor_f_code 
//                               motion_data[*].forw_vert_f_code 
//                               motion_data[*].sxb motion_data[*].sxf
//                               motion_data[*].syb motion_data[*].syf
//                               motion_data[*].back_hor_f_code 
//                               motion_data[*].back_vert_f_code 
//                               motion_data[*].forw_hor_f_code 
//                               motion_data[*].forw_vert_f_code 
//                               motion_data[*].sxb motion_data[*].sxf
//                               motion_data[*].syb motion_data[*].syf
//                               profile qscale_tab[*] quiet stderr 
//                               stderr[0] __IO_EFFECTS:LUNS[*] 
//                               conform!:profile_level_defined[*][*] 
//                               mpeg2enc!readparmfile:0`ratetab[*]
//             <may be written>: stderr[0] *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <    is read   >: M N argv[1] aspectratio bit_rate 
//                               chroma_format color_primaries 
//                               constrparms dc_prec 
//                               display_horizontal_size 
//                               display_vertical_size fieldpic 
//                               frame_rate frame_rate_code 
//                               horizontal_size low_delay 
//                               matrix_coefficients motion_data mpeg1
//                               prog_frame prog_seq repeatfirst tc0 
//                               topfirst transfer_characteristics 
//                               vbv_buffer_size vertical_size 
//                               video_format _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      /* read parameter file */
      readparmfile(argv[1]);
//             <may be read   >: default_intra_quantizer_matrix[*] 
//                               errortext[*] iqname[*] niqname[*] 
//                               stderr stderr[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: errortext[*] inter_q[*] intra_q[*] 
//                               stderr[0] __IO_EFFECTS:LUNS[*]
//             <    is written>: load_iquant load_niquant
      /* read quantization matrices */
      readquantmat();
//             <may be read   >: argv[2][*] errortext[*] stderr 
//                               stderr[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: errortext[*] stderr[0] 
//                               __IO_EFFECTS:LUNS[*]
//             <    is read   >: argv[2]
//             <    is written>: outfile
      /* open output file */
      if (!(outfile = fopen(argv[2], "wb"))) {
//             <may be read   >: argv[2][*]
//             <may be written>: errortext[*]
//             <    is read   >: argv[2]
         sprintf(errortext, "Couldn't create output file %s", argv[2]);
//             <may be read   >: errortext[*] stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
         error(errortext);
      }
//             <may be read   >: chrom_height errortext[*] statname[*]
//                               stderr stderr[0] stdout 
//                               __IO_EFFECTS:LUNS[*] 
//                               mpeg2enc!init:0`block_count_tab[*]
//             <may be written>: auxframe[*] auxorgframe[*] clp[*] 
//                               errortext[*] neworgframe[*] 
//                               newrefframe[*] oldorgframe[*] 
//                               oldrefframe[*] predframe[*] stderr[0]
//                               __IO_EFFECTS:LUNS[*] fdctref!:c[*][*]
//                               idct!:iclp[*]
//             <    is read   >: block_count blocks chrom_width 
//                               chroma_format clp fieldpic height 
//                               horizontal_size mb_height mb_height2 
//                               mb_width mbinfo prog_seq 
//                               vertical_size width 
//                               _MALLOC_EFFECTS:_MALLOC_ idct!:iclp
//             <    is written>: block_count blocks chrom_height 
//                               chrom_width chrom_width2 clp height 
//                               height2 mb_height mb_height2 mb_width
//                               mbinfo statfile width width2 
//                               _MALLOC_EFFECTS:_MALLOC_ idct!:iclp 
//                               putbits!:bytecnt putbits!:outcnt
      init();
//             <may be read   >: stderr stderr[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: stderr[0] *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[*]
      putseq();
//             <may be read   >: outfile[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: outfile[0] __IO_EFFECTS:LUNS[*]
//             <    is read   >: outfile
      fclose(outfile);
//             <may be read   >: statfile[0] __IO_EFFECTS:LUNS[*]
//             <may be written>: statfile[0] __IO_EFFECTS:LUNS[*]
//             <    is read   >: statfile
      fclose(statfile);
   }
   return 0;
}
Transformers for "main"
//  T(main) {main==0}
int main(int argc, char *argv[])
{
//  T(argc) {argc#init==3}
   if (1) {
//  T() {argc==3}
      if (argc!=3) {
//  T() {}
         printf("\n%s, %s\n", version, author);
//  T() {}
         printf("Usage: mpeg2encode in.par out.m2v\n");
//  T() {0==-1}
         exit(0);
      }
//  T(argc) {}
      /* read parameter file */
      readparmfile(argv[1]);
//  T() {}
      /* read quantization matrices */
      readquantmat();
//  T() {}
      /* open output file */
      if (!(outfile = fopen(argv[2], "wb"))) {
//  T() {}
         sprintf(errortext, "Couldn't create output file %s", argv[2]);
//  T() {0==-1}
         error(errortext);
      }
//  T() {}
      init();
//  T(argc) {}
      putseq();
//  T() {}
      fclose(outfile);
//  T() {}
      fclose(statfile);
   }
//  T(main) {main==0}
   return 0;
}
Transformers for %ALLFUNC
//  T(bytecnt,outbfr,outcnt)
//    {outcnt+8putbits!:bytecnt#init<=8bytecnt+8,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt}
void alignbits(void)
{
//  T(bytecnt,outbfr,outcnt)
//    {outcnt+8putbits!:bytecnt#init<=8bytecnt+8,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt}
   if (outcnt!=8)
//  T(bytecnt,outbfr,outcnt) {outcnt+8putbits!:bytecnt#init<=8bytecnt,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt}
      putbits(0, outcnt);
}
//  T(bitcount) {bitcount+outcnt==8bytecnt+8}
int bitcount(void)
{
//  T(bitcount) {bitcount+outcnt==8bytecnt+8}
   return 8*bytecnt+(8-outcnt);
}
//  T() {}
void calcSNR(unsigned char *org[3], unsigned char *rec[3])
{
//  T(h,offs,w) {}
   int w, h, offs;
//  T() {}
   double v, e;
//  T(w) {horizontal_size==w}
   w = horizontal_size;
//  T(h) {}
   h = pict_struct==3?vertical_size:vertical_size>>1;
//  T(offs) {}
   offs = pict_struct==2?width:0;
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[0]+offs, rec[0]+offs, width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "Y: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  T(offs,w) {}
   if (chroma_format!=3) {
//  T(w) {2w<=w#init, w#init<=2w+1}
      w >>= 1;
//  T(offs) {2offs<=offs#init, offs#init<=2offs+1}
      offs >>= 1;
   }
//  T(h) {}
   if (chroma_format==1)
//  T(h) {2h<=h#init, h#init<=2h+1}
      h >>= 1;
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[1]+offs, rec[1]+offs, chrom_width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "U: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  T(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[2]+offs, rec[2]+offs, chrom_width2, w, h, &v, &e);
//  T() {}
   fprintf(statfile, "V: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
}
//  T(vbv_delay) {vbv_delay<=65535}
void calc_vbv_delay(void)
{
//  T() {}
   double picture_delay;
//  T() {}
   static double next_ip_delay;
   /* due to frame reordering delay */
//  T() {}
   static double decoding_time;
//  T() {}
   /* number of 1/90000 s ticks until next picture is to be decoded */
   if (pict_type==3)
//  T() {}
      if (prog_seq)
//  T() {}
         if (!repeatfirst)
//  T() {}
            picture_delay = 90000.0/frame_rate;
         else if (!topfirst)
//  T() {}
            picture_delay = 90000.0*2.0/frame_rate;
         else
//  T() {}
            picture_delay = 90000.0*3.0/frame_rate;
      else
//  T() {}
         /* interlaced */
         if (fieldpic)
//  T() {}
            picture_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
//  T() {}
            picture_delay = 90000.0*2.0/(2.0*frame_rate);
         else
//  T() {}
            picture_delay = 90000.0*3.0/(2.0*frame_rate);
   else {
//  T() {}
      /* I or P picture */
      if (fieldpic)
//  T() {}
         if (topfirst==(pict_struct==1))
//  T() {}
            /* first field */
            picture_delay = 90000.0/(2.0*frame_rate);
         else
//  T() {}
            /* second field */
            /* take frame reordering delay into account */
            picture_delay = next_ip_delay-90000.0/(2.0*frame_rate);
      else
//  T() {}
         /* frame picture */
         /* take frame reordering delay into account*/
         picture_delay = next_ip_delay;
//  T() {}
      if (!fieldpic||topfirst!=(pict_struct==1))
//  T() {}
         /* frame picture or second field */
         if (prog_seq)
//  T() {}
            if (!repeatfirst)
//  T() {}
               next_ip_delay = 90000.0/frame_rate;
            else if (!topfirst)
//  T() {}
               next_ip_delay = 90000.0*2.0/frame_rate;
            else
//  T() {}
               next_ip_delay = 90000.0*3.0/frame_rate;
         else if (fieldpic)
//  T() {}
            next_ip_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
//  T() {}
            next_ip_delay = 90000.0*2.0/(2.0*frame_rate);
         else
//  T() {}
            next_ip_delay = 90000.0*3.0/(2.0*frame_rate);
   }
//  T() {}
   if (decoding_time==0.0) {
//  T() {}
      /* first call of calc_vbv_delay */
      /* we start with a 7/8 filled VBV buffer (12.5% back-off) */
      picture_delay = vbv_buffer_size*16384*7/8*90000.0/bit_rate;
//  T() {}
      if (fieldpic)
//  T() {}
         next_ip_delay = (int) (90000.0/frame_rate+0.5);
   }
//  T() {}
   if (!low_delay&&decoding_time<bitcnt_EOP*90000.0/bit_rate)
//  T() {}
      /* picture not completely in buffer at intended decoding time */
      /* VBV checks */
      /* check for underflow (previous picture) */
      if (!quiet)
//  T() {}
         fprintf(stderr, "vbv_delay underflow! (decoding_time=%.1f, t_EOP=%.1f\n)", decoding_time, bitcnt_EOP*90000.0/bit_rate);
//  T() {}
   /* when to decode current frame */
   decoding_time += picture_delay;
//  T(vbv_delay) {}
   /* warning: bitcount() may overflow (e.g. after 9 min. at 8 Mbit/s */
   vbv_delay = (int) (decoding_time-bitcount()*90000.0/bit_rate);
//  T() {}
   if (decoding_time-bitcnt_EOP*90000.0/bit_rate>vbv_buffer_size*16384*90000.0/bit_rate)
//  T() {}
      /* check for overflow (current picture) */
      if (!quiet)
//  T() {}
         fprintf(stderr, "vbv_delay overflow!\n");
//  T() {}
   fprintf(statfile, "\nvbv_delay=%d (bitcount=%d, decoding_time=%.2f, bitcnt_EOP=%d)\n", vbv_delay, bitcount(), decoding_time, bitcnt_EOP);
//  T(vbv_delay) {0<=vbv_delay, vbv_delay#init<=vbv_delay}
   if (vbv_delay<0) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "vbv_delay underflow: %d\n", vbv_delay);
//  T(vbv_delay) {vbv_delay==0}
      vbv_delay = 0;
   }
//  T(vbv_delay) {vbv_delay<=65535, vbv_delay<=vbv_delay#init}
   if (vbv_delay>65535) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "vbv_delay overflow: %d\n", vbv_delay);
//  T(vbv_delay) {vbv_delay==65535}
      vbv_delay = 65535;
   }
}
//  T() {}
void dct_type_estimation(unsigned char *pred, unsigned char *cur, struct mbinfo *mbi)
{
//  T() {}
   short blk0[128], blk1[128];
//  T(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {}
   int i, j, i0, j0, k, offs, s0, s1, sq0, sq1, s01;
//  T() {}
   double d, r;
//  T(k) {k==0}
   k = 0;
//  T(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {0<=0`j0, 0`j0+1<=height2,
//    k#init<=k}
   for(j0 = 0; j0 <= height2-1; j0 += 16)
//  T(i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i0+16k#init==16k, i0+1<=width,
//    k#init<=k}
      for(i0 = 0; i0 <= width-1; i0 += 16) {
//  T(i,j,offs,s0,s01,s1,sq0,sq1) {}
         if (frame_pred_dct||pict_struct!=3)
//  T() {}
            mbi[k].dct_type = 0;
         else {
//  T(i,j,offs) {0<=j, j<=7}
            /* interlaced frame picture */
            /*
                     * calculate prediction error (cur-pred) for top (blk0)
                     * and bottom field (blk1)
                     */
            for(j = 0; j <= 7; j += 1) {
//  T(offs) {}
               offs = width*((j<<1)+j0)+i0;
//  T(i,offs) {i+offs#init==offs, 0<=i, i<=15}
               for(i = 0; i <= 15; i += 1) {
//  T() {}
                  blk0[16*j+i] = cur[offs]-pred[offs];
//  T() {}
                  blk1[16*j+i] = cur[offs+width]-pred[offs+width];
//  T(offs) {offs==offs#init+1}
                  offs++;
               }
            }
//  T(s0,s01,s1,sq0,sq1) {s0==0, s01==0, s1==0, sq0==0, sq1==0}
            /* correlate fields */
            s0 = s1 = sq0 = sq1 = s01 = 0;
//  T(i,s0,s01,s1,sq0,sq1) {0<=i, i<=127, sq0#init<=sq0,
//    sq1#init<=sq1}
            for(i = 0; i <= 127; i += 1) {
//  T(s0) {}
               s0 += blk0[i];
//  T(sq0) {sq0#init<=sq0}
               sq0 += blk0[i]*blk0[i];
//  T(s1) {}
               s1 += blk1[i];
//  T(sq1) {sq1#init<=sq1}
               sq1 += blk1[i]*blk1[i];
//  T(s01) {}
               s01 += blk0[i]*blk1[i];
            }
//  T() {}
            d = (sq0-s0*s0/128.0)*(sq1-s1*s1/128.0);
//  T() {}
            if (d>0.0) {
//  T() {}
               r = (s01-s0*s1/128.0)/sqrt(d);
//  T() {}
               if (r>0.5)
//  T() {}
                  mbi[k].dct_type = 0;
               else
//  T() {}
                  mbi[k].dct_type = 1;
            }
            else
//  T() {}
               mbi[k].dct_type = 1;
         }
//  T(k) {k==k#init+1}
         k++;
      }
}
//  T() {0==-1}
void error(char *text)
{
//  T() {}
   fprintf(stderr, text);
//  T() {}
   _IO_putc('\n', stderr);
//  T() {0==-1}
   exit(1);
}
//  T() {}
void fdct(short *block)
{
//  T(i,j,k) {}
   int i, j, k;
//  T() {}
   double s;
//  T() {}
   double tmp[64];
//  T(i,j,k) {0<=i, i<=7}
   for(i = 0; i <= 7; i += 1)
//  T(j,k) {0<=j, j<=7}
      for(j = 0; j <= 7; j += 1) {
//  T() {}
         s = 0.0;
//  T(k) {0<=k, k<=7}
         for(k = 0; k <= 7; k += 1)
//  T() {}
            s += c[j][k]*block[8*i+k];
//  T() {}
         tmp[8*i+j] = s;
      }
//  T(i,j,k) {0<=j, j<=7}
   for(j = 0; j <= 7; j += 1)
//  T(i,k) {0<=i, i<=7}
      for(i = 0; i <= 7; i += 1) {
//  T() {}
         s = 0.0;
//  T(k) {0<=k, k<=7}
         for(k = 0; k <= 7; k += 1)
//  T() {}
            s += c[i][k]*tmp[8*k+j];
//  T() {}
         block[8*i+j] = (int) floor(s+0.499999);
      }
}
//  T() {}
void idct(short *block)
{
//  T(i) {}
   int i;
//  T(i) {}
   for(i = 0; i <= 7; i += 1)
//  T(i) {}
      idctrow(block+8*i);
//  T(i) {}
   for(i = 0; i <= 7; i += 1)
//  T(i) {}
      idctcol(block+i);
}
//  T() {}
static void idctcol(short *blk)
{
//  T(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
//  T(x1,x2,x3,x4,x5,x6,x7) {}
   /* shortcut */
   if (!((x1 = blk[8*4]<<8)|(x2 = blk[8*6])|(x3 = blk[8*2])|(x4 = blk[8*1])|(x5 = blk[8*7])|(x6 = blk[8*5])|(x7 = blk[8*3]))) {
//  T() {}
      blk[8*0] = blk[8*1] = blk[8*2] = blk[8*3] = blk[8*4] = blk[8*5] = blk[8*6] = blk[8*7] = iclp[blk[8*0]+32>>6];
//  T() {}
      return;
   }
//  T(x0) {}
   x0 = (blk[8*0]<<8)+8192;
//  T(x8) {565x4+565x5==x8-4}
   /* first stage */
   x8 = 565*(x4+x5)+4;
//  T(x4) {8x4<=2276x4#init+x8, 2276x4#init+x8<=8x4+7}
   x4 = x8+(2841-565)*x4>>3;
//  T(x5) {8x5+3406x5#init<=x8, x8<=8x5+3406x5#init+7}
   x5 = x8-(2841+565)*x5>>3;
//  T(x8) {2408x6+2408x7==x8-4}
   x8 = 2408*(x6+x7)+4;
//  T(x6) {8x6+799x6#init<=x8, x8<=8x6+799x6#init+7}
   x6 = x8-(2408-1609)*x6>>3;
//  T(x7) {8x7+4017x7#init<=x8, x8<=8x7+4017x7#init+7}
   x7 = x8-(2408+1609)*x7>>3;
//  T(x8) {x0+x1==x8}
   /* second stage */
   x8 = x0+x1;
//  T(x0) {x0+x1==x0#init}
   x0 -= x1;
//  T(x1) {1108x2+1108x3==x1-4}
   x1 = 1108*(x3+x2)+4;
//  T(x2) {8x2+3784x2#init<=x1, x1<=8x2+3784x2#init+7}
   x2 = x1-(2676+1108)*x2>>3;
//  T(x3) {8x3<=x1+1568x3#init, x1+1568x3#init<=8x3+7}
   x3 = x1+(2676-1108)*x3>>3;
//  T(x1) {x4+x6==x1}
   x1 = x4+x6;
//  T(x4) {x4+x6==x4#init}
   x4 -= x6;
//  T(x6) {x5+x7==x6}
   x6 = x5+x7;
//  T(x5) {x5+x7==x5#init}
   x5 -= x7;
//  T(x7) {x3+x8==x7}
   /* third stage */
   x7 = x8+x3;
//  T(x8) {x3+x8==x8#init}
   x8 -= x3;
//  T(x3) {x0+x2==x3}
   x3 = x0+x2;
//  T(x0) {x0+x2==x0#init}
   x0 -= x2;
//  T(x2) {181x4+181x5<=256x2+127, 256x2<=181x4+181x5+128}
   x2 = 181*(x4+x5)+128>>8;
//  T(x4) {181x4#init<=256x4+181x5+127, 256x4+181x5<=181x4#init+128}
   x4 = 181*(x4-x5)+128>>8;
//  T() {}
   /* fourth stage */
   blk[8*0] = iclp[x7+x1>>14];
//  T() {}
   blk[8*1] = iclp[x3+x2>>14];
//  T() {}
   blk[8*2] = iclp[x0+x4>>14];
//  T() {}
   blk[8*3] = iclp[x8+x6>>14];
//  T() {}
   blk[8*4] = iclp[x8-x6>>14];
//  T() {}
   blk[8*5] = iclp[x0-x4>>14];
//  T() {}
   blk[8*6] = iclp[x3-x2>>14];
//  T() {}
   blk[8*7] = iclp[x7-x1>>14];
}
//  T() {}
static void idctrow(short *blk)
{
//  T(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
//  T(x1,x2,x3,x4,x5,x6,x7) {}
   /* shortcut */
   if (!((x1 = blk[4]<<11)|(x2 = blk[6])|(x3 = blk[2])|(x4 = blk[1])|(x5 = blk[7])|(x6 = blk[5])|(x7 = blk[3]))) {
//  T() {}
      blk[0] = blk[1] = blk[2] = blk[3] = blk[4] = blk[5] = blk[6] = blk[7] = blk[0]<<3;
//  T() {}
      return;
   }
//  T(x0) {}
   x0 = (blk[0]<<11)+128;
//  T(x8) {565x4+565x5==x8}
   /* for proper rounding in the fourth stage */
   /* first stage */
   x8 = 565*(x4+x5);
//  T(x4) {2276x4#init+x8==x4}
   x4 = x8+(2841-565)*x4;
//  T(x5) {x5+3406x5#init==x8}
   x5 = x8-(2841+565)*x5;
//  T(x8) {2408x6+2408x7==x8}
   x8 = 2408*(x6+x7);
//  T(x6) {x6+799x6#init==x8}
   x6 = x8-(2408-1609)*x6;
//  T(x7) {x7+4017x7#init==x8}
   x7 = x8-(2408+1609)*x7;
//  T(x8) {x0+x1==x8}
   /* second stage */
   x8 = x0+x1;
//  T(x0) {x0+x1==x0#init}
   x0 -= x1;
//  T(x1) {1108x2+1108x3==x1}
   x1 = 1108*(x3+x2);
//  T(x2) {x2+3784x2#init==x1}
   x2 = x1-(2676+1108)*x2;
//  T(x3) {x1+1568x3#init==x3}
   x3 = x1+(2676-1108)*x3;
//  T(x1) {x4+x6==x1}
   x1 = x4+x6;
//  T(x4) {x4+x6==x4#init}
   x4 -= x6;
//  T(x6) {x5+x7==x6}
   x6 = x5+x7;
//  T(x5) {x5+x7==x5#init}
   x5 -= x7;
//  T(x7) {x3+x8==x7}
   /* third stage */
   x7 = x8+x3;
//  T(x8) {x3+x8==x8#init}
   x8 -= x3;
//  T(x3) {x0+x2==x3}
   x3 = x0+x2;
//  T(x0) {x0+x2==x0#init}
   x0 -= x2;
//  T(x2) {181x4+181x5<=256x2+127, 256x2<=181x4+181x5+128}
   x2 = 181*(x4+x5)+128>>8;
//  T(x4) {181x4#init<=256x4+181x5+127, 256x4+181x5<=181x4#init+128}
   x4 = 181*(x4-x5)+128>>8;
//  T() {}
   /* fourth stage */
   blk[0] = x7+x1>>8;
//  T() {}
   blk[1] = x3+x2>>8;
//  T() {}
   blk[2] = x0+x4>>8;
//  T() {}
   blk[3] = x8+x6>>8;
//  T() {}
   blk[4] = x8-x6>>8;
//  T() {}
   blk[5] = x0-x4>>8;
//  T() {}
   blk[6] = x3-x2>>8;
//  T() {}
   blk[7] = x7-x1>>8;
}
//  T() {}
void init_fdct(void)
{
//  T(i,j) {}
   int i, j;
//  T() {}
   double s;
//  T(i,j) {0<=i, i<=7}
   for(i = 0; i <= 7; i += 1) {
//  T() {}
      s = i==0?sqrt(0.125):0.5;
//  T(j) {0<=j, j<=7}
      for(j = 0; j <= 7; j += 1)
//  T() {}
         c[i][j] = s*cos(3.14159265358979323846/8.0*i*(j+0.5));
   }
}
//  T() {}
void init_idct(void)
{
//  T(i) {}
   int i;
//  T() {}
   iclp = iclip+512;
//  T(i) {0<=i+512, i<=511}
   for(i = -512; i <= 511; i += 1)
//  T() {}
      iclp[i] = i<-256?-256:i>255?255:i;
}
//  T(bytecnt,outcnt) {bytecnt==0, outcnt==8}
void initbits(void)
{
//  T(outcnt) {outcnt==8}
   outcnt = 8;
//  T(bytecnt) {bytecnt==0}
   bytecnt = 0;
}
//  T() {}
void iquant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  T(i,sum,val) {}
   int i, val, sum;
//  T(i,sum,val) {}
   if (mpeg1)
//  T() {}
      iquant1_intra(src, dst, dc_prec, quant_mat, mquant);
   else {
//  T(sum) {}
      sum = dst[0] = src[0]<<3-dc_prec;
//  T(i,sum,val) {1<=i, i<=63}
      for(i = 1; i <= 63; i += 1) {
//  T(val) {}
         val = (int) (src[i]*quant_mat[i]*mquant)/16;
//  T(sum) {}
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
//  T() {}
      /* mismatch control */
      if ((sum&1)==0)
//  T() {}
         dst[63] ^= 1;
   }
}
//  T() {}
void iquant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  T(i,sum,val) {}
   int i, val, sum;
//  T(i,sum,val) {}
   if (mpeg1)
//  T() {}
      iquant1_non_intra(src, dst, quant_mat, mquant);
   else {
//  T(sum) {sum==0}
      sum = 0;
//  T(i,sum,val) {0<=i, i<=63}
      for(i = 0; i <= 63; i += 1) {
//  T(val) {}
         val = src[i];
//  T(val) {}
         if (val!=0)
//  T(val) {}
            val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
//  T(sum) {}
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
//  T() {}
      /* mismatch control */
      if ((sum&1)==0)
//  T() {}
         dst[63] ^= 1;
   }
}
//  T() {}
void itransform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
//  T(0`j1,cc,i,i1,j,k,lx,n,offs) {}
   int i, j, i1, j1, k, n, cc, offs, lx;
//  T(k) {k==0}
   k = 0;
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
   for(j = 0; j <= height2-1; j += 16)
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
      for(i = 0; i <= width-1; i += 16) {
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
         for(n = 0; n <= block_count-1; n += 1) {
//  T(cc) {}
            cc = n<4?0:(n&1)+1;
//  T(0`j1,i1,lx,offs) {}
            /* color component index */
            if (cc==0) {
//  T(lx,offs) {}
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
//  T(offs) {}
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
//  T(lx) {lx==2width}
                  lx = width<<1;
               }
               else {
//  T(offs) {}
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
//  T(lx) {lx==width2}
                  lx = width2;
               }
//  T(offs) {}
               if (pict_struct==2)
//  T(offs) {offs#init+width==offs}
                  offs += width;
            }
            else {
//  T(i1) {}
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
//  T(0`j1) {}
               j1 = chroma_format!=1?j:j>>1;
//  T(lx,offs) {}
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
//  T(offs) {}
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
//  T(lx) {2chrom_width==lx}
                  lx = chrom_width<<1;
               }
               else {
//  T(offs) {}
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
//  T(lx) {chrom_width2==lx}
                  lx = chrom_width2;
               }
//  T(offs) {}
               if (pict_struct==2)
//  T(offs) {chrom_width+offs#init==offs}
                  offs += chrom_width;
            }
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
            idct(blocks[k*block_count+n]);
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
            add_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
         }
//  T(k) {k==k#init+1}
         k++;
      }
}
//  T(main) {main==0}
int main(int argc, char *argv[])
{
//  T(argc) {argc#init==3}
   if (1) {
//  T() {argc==3}
      if (argc!=3) {
//  T() {}
         printf("\n%s, %s\n", version, author);
//  T() {}
         printf("Usage: mpeg2encode in.par out.m2v\n");
//  T() {0==-1}
         exit(0);
      }
//  T(argc) {}
      /* read parameter file */
      readparmfile(argv[1]);
//  T() {}
      /* read quantization matrices */
      readquantmat();
//  T() {}
      /* open output file */
      if (!(outfile = fopen(argv[2], "wb"))) {
//  T() {}
         sprintf(errortext, "Couldn't create output file %s", argv[2]);
//  T() {0==-1}
         error(errortext);
      }
//  T() {}
      init();
//  T(argc) {}
      putseq();
//  T() {}
      fclose(outfile);
//  T() {}
      fclose(statfile);
   }
//  T(main) {main==0}
   return 0;
}
//  T(motion!bdist1) {0<=motion!bdist1}
static int bdist1(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
//  T() {}
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
//  T(i,j) {}
   int i, j;
//  T(s,v) {}
   int s, v;
//  T() {}
   pfa = pf+hxf;
//  T() {}
   pfb = pf+lx*hyf;
//  T() {}
   pfc = pfb+hxf;
//  T() {}
   pba = pb+hxb;
//  T() {}
   pbb = pb+lx*hyb;
//  T() {}
   pbc = pbb+hxb;
//  T(s) {s==0}
   s = 0;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
   for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
      for(i = 0; i <= 15; i += 1) {
//  T(v) {}
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
//  T(s) {s#init<=s+v, s#init+v<=s}
         if (v>=0)
//  T(s) {s#init+v==s}
            s += v;
         else
//  T(s) {s+v==s#init}
            s -= v;
      }
//  T() {}
      p2 += lx-16;
//  T() {}
      pf += lx-16;
//  T() {}
      pfa += lx-16;
//  T() {}
      pfb += lx-16;
//  T() {}
      pfc += lx-16;
//  T() {}
      pb += lx-16;
//  T() {}
      pba += lx-16;
//  T() {}
      pbb += lx-16;
//  T() {}
      pbc += lx-16;
   }
//  T(motion!bdist1) {motion!bdist1==s}
   return s;
}
//  T(motion!bdist2) {0<=motion!bdist2}
static int bdist2(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
//  T() {}
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
//  T(i,j) {}
   int i, j;
//  T(s,v) {}
   int s, v;
//  T() {}
   pfa = pf+hxf;
//  T() {}
   pfb = pf+lx*hyf;
//  T() {}
   pfc = pfb+hxf;
//  T() {}
   pba = pb+hxb;
//  T() {}
   pbb = pb+lx*hyb;
//  T() {}
   pbc = pbb+hxb;
//  T(s) {s==0}
   s = 0;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
   for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
      for(i = 0; i <= 15; i += 1) {
//  T(v) {}
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
//  T(s) {s#init<=s}
         s += v*v;
      }
//  T() {}
      p2 += lx-16;
//  T() {}
      pf += lx-16;
//  T() {}
      pfa += lx-16;
//  T() {}
      pfb += lx-16;
//  T() {}
      pfc += lx-16;
//  T() {}
      pb += lx-16;
//  T() {}
      pba += lx-16;
//  T() {}
      pbb += lx-16;
//  T() {}
      pbc += lx-16;
   }
//  T(motion!bdist2) {motion!bdist2==s}
   return s;
}
//  T(motion!dist1) {0<=motion!dist1}
static int dist1(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h, int distlim)
{
//  T() {}
   unsigned char *p1, *p1a, *p2;
//  T(i,j) {}
   int i, j;
//  T(s,v) {}
   int s, v;
//  T(s) {s==0}
   s = 0;
//  T() {}
   p1 = blk1;
//  T() {}
   p2 = blk2;
//  T(i,j,s,v) {0<=j, s#init<=s}
   if (!hx&&!hy) {
//  T(j) {j==0}
      j = 0;
l99999:      ;
//  T() {}
      if (!(j<h)) goto _break_1;
//  T(v) {0<=v}
      if ((v = p1[0]-p2[0])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[1]-p2[1])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[2]-p2[2])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[3]-p2[3])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[4]-p2[4])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[5]-p2[5])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[6]-p2[6])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[7]-p2[7])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[8]-p2[8])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[9]-p2[9])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[10]-p2[10])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[11]-p2[11])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[12]-p2[12])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[13]-p2[13])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[14]-p2[14])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T(v) {0<=v}
      if ((v = p1[15]-p2[15])<0)
//  T(v) {v+v#init==0}
         v = -v;
//  T(s) {s#init+v==s}
      s += v;
//  T() {}
      if (s>=distlim) goto _break_1;
//  T() {}
      p1 += lx;
//  T() {}
      p2 += lx;
//  T(j) {j==j#init+1}
      j++;
      goto l99999;
//  T() {}
_break_1:      ;
   }
   else if (hx&&!hy)
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
//  T(s) {s#init<=s+v, s#init+v<=s}
            if (v>=0)
//  T(s) {s#init+v==s}
               s += v;
            else
//  T(s) {s+v==s#init}
               s -= v;
         }
//  T() {}
         p1 += lx;
//  T() {}
         p2 += lx;
      }
   else if (!hx&&hy) {
//  T() {}
      p1a = p1+lx;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
//  T(s) {s#init<=s+v, s#init+v<=s}
            if (v>=0)
//  T(s) {s#init+v==s}
               s += v;
            else
//  T(s) {s+v==s#init}
               s -= v;
         }
//  T() {}
         p1 = p1a;
//  T() {}
         p1a += lx;
//  T() {}
         p2 += lx;
      }
   }
   else {
//  T() {}
      p1a = p1+lx;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
//  T(s) {s#init<=s+v, s#init+v<=s}
            if (v>=0)
//  T(s) {s#init+v==s}
               s += v;
            else
//  T(s) {s+v==s#init}
               s -= v;
         }
//  T() {}
         p1 = p1a;
//  T() {}
         p1a += lx;
//  T() {}
         p2 += lx;
      }
   }
//  T(motion!dist1) {motion!dist1==s}
   return s;
}
//  T(motion!dist2) {0<=motion!dist2}
static int dist2(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h)
{
//  T() {}
   unsigned char *p1, *p1a, *p2;
//  T(i,j) {}
   int i, j;
//  T(s,v) {}
   int s, v;
//  T(s) {s==0}
   s = 0;
//  T() {}
   p1 = blk1;
//  T() {}
   p2 = blk2;
//  T(i,j,s,v) {h<=j, 0<=j, s#init<=s}
   if (!hx&&!hy)
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = p1[i]-p2[i];
//  T(s) {s#init<=s}
            s += v*v;
         }
//  T() {}
         p1 += lx;
//  T() {}
         p2 += lx;
      }
   else if (hx&&!hy)
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
//  T(s) {s#init<=s}
            s += v*v;
         }
//  T() {}
         p1 += lx;
//  T() {}
         p2 += lx;
      }
   else if (!hx&&hy) {
//  T() {}
      p1a = p1+lx;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
//  T(s) {s#init<=s}
            s += v*v;
         }
//  T() {}
         p1 = p1a;
//  T() {}
         p1a += lx;
//  T() {}
         p2 += lx;
      }
   }
   else {
//  T() {}
      p1a = p1+lx;
//  T(i,j,s,v) {j+1<=h, 0<=j, s#init<=s}
      for(j = 0; j <= h-1; j += 1) {
//  T(i,s,v) {0<=i, i<=15, s#init<=s}
         for(i = 0; i <= 15; i += 1) {
//  T(v) {}
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
//  T(s) {s#init<=s}
            s += v*v;
         }
//  T() {}
         p1 = p1a;
//  T() {}
         p1a += lx;
//  T() {}
         p2 += lx;
      }
   }
//  T(motion!dist2) {motion!dist2==s}
   return s;
}
//  T() {}
static void dpfield_estimate(unsigned char *topref, unsigned char *botref, unsigned char *mb, int i, int j, int imins, int jmins, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
//  T() {}
   unsigned char *sameref, *oppref;
//  T(delta_x,delta_y,io,io0,jo,jo0,mvxo0,mvxs,mvyo0,mvys) {}
   int io0, jo0, io, jo, delta_x, delta_y, mvxs, mvys, mvxo0, mvyo0;
//  T(imindmv,imino,jmindmv,jmino,local_dist,vmc_dp) {}
   int imino, jmino, imindmv, jmindmv, vmc_dp, local_dist;
//  T() {}
   /* Calculate Dual Prime distortions for 9 delta candidates */
   /* Note: only for P pictures! */
   /* Assign opposite and same reference pointer */
   if (pict_struct==1) {
//  T() {}
      sameref = topref;
//  T() {}
      oppref = botref;
   }
   else {
//  T() {}
      sameref = botref;
//  T() {}
      oppref = topref;
   }
//  T(mvxs) {2i+mvxs==imins}
   /* convert Cartesian absolute to relative motion vector
      * values (wrt current macroblock address (i,j)
      */
   mvxs = imins-(i<<1);
//  T(mvys) {2j+mvys==jmins}
   mvys = jmins-(j<<1);
//  T(mvxo0) {}
   /* vector for prediction from field of opposite 'parity' */
   mvxo0 = mvxs+(mvxs>0)>>1;
//  T(mvyo0) {}
   /* mvxs // 2 */
   mvyo0 = mvys+(mvys>0)>>1;
//  T(mvyo0) {mvyo0#init<=mvyo0+1, mvyo0<=mvyo0#init+1}
   /* mvys // 2 */
   /* vertical field shift correction */
   if (pict_struct==1)
//  T(mvyo0) {mvyo0==mvyo0#init-1}
      mvyo0--;
   else
//  T(mvyo0) {mvyo0==mvyo0#init+1}
      mvyo0++;
//  T(io0) {2i+mvxo0==io0}
   /* convert back to absolute coordinates */
   io0 = mvxo0+(i<<1);
//  T(jo0) {2j+mvyo0==jo0}
   jo0 = mvyo0+(j<<1);
//  T(vmc_dp) {vmc_dp==1073741824}
   /* initialize minimum dual prime distortion to large value */
   vmc_dp = 1<<30;
//  T(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
   for(delta_y = -1; delta_y <= 1; delta_y += 1)
//  T(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
      for(delta_x = -1; delta_x <= 1; delta_x += 1) {
//  T(io) {delta_x+io0==io}
         /* opposite field coordinates */
         io = io0+delta_x;
//  T(jo) {delta_y+jo0==jo}
         jo = jo0+delta_y;
//  T(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
         if (io>=0&&io<=width-16<<1&&jo>=0&&jo<=height2-16<<1) {
//  T(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
            /* current mb location */
            /* adjacent line distance */
            /* half-pel flags */
            /* compute prediction error */
            local_dist = bdist2(sameref+(imins>>1)+width2*(jmins>>1), oppref+(io>>1)+width2*(jo>>1), mb, width2, imins&1, jmins&1, io&1, jo&1, 16);
//  T(imindmv,imino,jmindmv,jmino,vmc_dp) {vmc_dp<=local_dist,
//    vmc_dp<=vmc_dp#init}
            /* block height */
            /* update delta with least distortion vector */
            if (local_dist<vmc_dp) {
//  T(imino) {imino==io}
               imino = io;
//  T(jmino) {jmino==jo}
               jmino = jo;
//  T(imindmv) {delta_x==imindmv}
               imindmv = delta_x;
//  T(jmindmv) {delta_y==jmindmv}
               jmindmv = delta_y;
//  T(vmc_dp) {local_dist==vmc_dp}
               vmc_dp = local_dist;
            }
         }
      }
//  T(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
   /* current mb location */
   /* adjacent line distance */
   /* half-pel flags */
   /* end delta y loop */
   /* Compute L1 error for decision purposes */
   *dmcp = bdist1(sameref+(imins>>1)+width2*(jmins>>1), oppref+(imino>>1)+width2*(jmino>>1), mb, width2, imins&1, jmins&1, imino&1, jmino&1, 16);
//  T() {}
   /* block height */
   *imindmvp = imindmv;
//  T() {}
   *jmindmvp = jmindmv;
//  T() {}
   *vmcp = vmc_dp;
}
//  T() {}
static void dpframe_estimate(unsigned char *ref, unsigned char *mb, int i, int j, int iminf[2][2], int jminf[2][2], int *iminp, int *jminp, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
//  T(delta_x,delta_y,ppred,pref) {}
   int pref, ppred, delta_x, delta_y;
//  T(ib,ib0,is,it,it0,jb,jb0,js,jt,jt0) {}
   int is, js, it, jt, ib, jb, it0, jt0, ib0, jb0;
//  T(iminb,imindmv,imins,imint,jminb,jmindmv,jmins,jmint) {}
   int imins, jmins, imint, jmint, iminb, jminb, imindmv, jmindmv;
//  T(local_dist,vmc) {}
   int vmc, local_dist;
//  T(vmc) {vmc==1073741824}
   /* Calculate Dual Prime distortions for 9 delta candidates
      * for each of the four minimum field vectors
      * Note: only for P pictures!
      */
   /* initialize minimum dual prime distortion to large value */
   vmc = 1<<30;
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   for(pref = 0; pref <= 1; pref += 1)
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
      for(ppred = 0; ppred <= 1; ppred += 1) {
//  T(is) {}
         /* convert Cartesian absolute to relative motion vector
                * values (wrt current macroblock address (i,j)
                */
         is = iminf[pref][ppred]-(i<<1);
//  T(js) {}
         js = jminf[pref][ppred]-(j<<1);
//  T() {}
         if (pref!=ppred) goto l99999;
l99998:         ;
//  T(ib0,it0,jb0,jt0) {}
         /* vector for prediction from field of opposite 'parity' */
         if (topfirst) {
//  T(it0) {}
            /* vector for prediction of top field from bottom field */
            it0 = is+(is>0)>>1;
//  T(jt0) {}
            jt0 = (js+(js>0)>>1)-1;
//  T(ib0) {}
            /* vector for prediction of bottom field from top field */
            ib0 = 3*is+(is>0)>>1;
//  T(jb0) {}
            jb0 = (3*js+(js>0)>>1)+1;
         }
         else {
//  T(it0) {}
            /* vector for prediction of top field from bottom field */
            it0 = 3*is+(is>0)>>1;
//  T(jt0) {}
            jt0 = (3*js+(js>0)>>1)-1;
//  T(ib0) {}
            /* vector for prediction of bottom field from top field */
            ib0 = is+(is>0)>>1;
//  T(jb0) {}
            jb0 = (js+(js>0)>>1)+1;
         }
//  T(is) {2i+is#init==is}
         /* convert back to absolute half-pel field picture coordinates */
         is += i<<1;
//  T(js) {2j+js#init==js}
         js += j<<1;
//  T(it0) {2i+it0#init==it0}
         it0 += i<<1;
//  T(jt0) {2j+jt0#init==jt0}
         jt0 += j<<1;
//  T(ib0) {2i+ib0#init==ib0}
         ib0 += i<<1;
//  T(jb0) {2j+jb0#init==jb0}
         jb0 += j<<1;
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
         if (is>=0&&is<=width-16<<1&&js>=0&&js<=height-16)
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
            for(delta_y = -1; delta_y <= 1; delta_y += 1)
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
               for(delta_x = -1; delta_x <= 1; delta_x += 1) {
//  T(it) {delta_x+it0==it}
                  /* opposite field coordinates */
                  it = it0+delta_x;
//  T(jt) {delta_y+jt0==jt}
                  jt = jt0+delta_y;
//  T(ib) {delta_x+ib0==ib}
                  ib = ib0+delta_x;
//  T(jb) {delta_y+jb0==jb}
                  jb = jb0+delta_y;
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
                  if (it>=0&&it<=width-16<<1&&jt>=0&&jt<=height-16&&ib>=0&&ib<=width-16<<1&&jb>=0&&jb<=height-16) {
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* compute prediction error */
                     local_dist = bdist2(ref+(is>>1)+(width<<1)*(js>>1), ref+width+(it>>1)+(width<<1)*(jt>>1), mb, width<<1, is&1, js&1, it&1, jt&1, 8);
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* block height */
                     local_dist += bdist2(ref+width+(is>>1)+(width<<1)*(js>>1), ref+(ib>>1)+(width<<1)*(jb>>1), mb+width, width<<1, is&1, js&1, ib&1, jb&1, 8);
//  T(iminb,imindmv,imins,imint,jminb,jmindmv,jmins,jmint,vmc)
//    {vmc<=local_dist, vmc<=vmc#init}
                     /* block height */
                     /* update delta with least distortion vector */
                     if (local_dist<vmc) {
//  T(imins) {imins==is}
                        imins = is;
//  T(jmins) {jmins==js}
                        jmins = js;
//  T(imint) {imint==it}
                        imint = it;
//  T(jmint) {jmint==jt}
                        jmint = jt;
//  T(iminb) {ib==iminb}
                        iminb = ib;
//  T(jminb) {jb==jminb}
                        jminb = jb;
//  T(imindmv) {delta_x==imindmv}
                        imindmv = delta_x;
//  T(jmindmv) {delta_y==jmindmv}
                        jmindmv = delta_y;
//  T(vmc) {local_dist==vmc}
                        vmc = local_dist;
                     }
                  }
               }
         goto _loop_end_2;
l99999:         ;
//  T(js) {js#init<=js+1, js<=js#init+1}
         /* vertical field shift adjustment */
         if (ppred==0)
//  T(js) {js==js#init+1}
            js++;
         else
//  T(js) {js==js#init-1}
            js--;
//  T(is) {is==2is#init}
         /* mvxs and mvys scaling*/
         is <<= 1;
//  T(js) {js==2js#init}
         js <<= 1;
//  T() {}
         if (topfirst==ppred) {
         }
         else {
            goto _loop_end_2;
         }
//  T(is) {is#init<=3is+1, 3is<=is#init+1}
         /* second field: scale by 1/3 */
         is = is>=0?(is+1)/3:-(((-is)+1)/3);
//  T(js) {js#init<=3js+1, 3js<=js#init+1}
         js = js>=0?(js+1)/3:-(((-js)+1)/3);
         goto l99998;
//  T() {}
_loop_end_2:         ;
      }
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   /* Compute L1 error for decision purposes */
   local_dist = bdist1(ref+(imins>>1)+(width<<1)*(jmins>>1), ref+width+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imins&1, jmins&1, imint&1, jmint&1, 8);
//  T(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   local_dist += bdist1(ref+width+(imins>>1)+(width<<1)*(jmins>>1), ref+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, imins&1, jmins&1, iminb&1, jminb&1, 8);
//  T() {}
   *dmcp = local_dist;
//  T() {}
   *iminp = imins;
//  T() {}
   *jminp = jmins;
//  T() {}
   *imindmvp = imindmv;
//  T() {}
   *jmindmvp = jmindmv;
//  T() {}
   *vmcp = vmc;
}
//  T() {}
static void field_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
//  T(w2) {}
   int w2;
//  T() {}
   unsigned char *mb, *toporg, *topref, *botorg, *botref;
//  T(dmc,dmc8i,dmcfieldi,v0,var,vmc) {}
   int var, vmc, v0, dmc, dmcfieldi, dmc8i;
//  T(dmc8,dmcfield,imin,imin8l,imin8u,jmin,jmin8l,jmin8u,sel,sel8l,
//    sel8u) {}
   int imin, jmin, imin8u, jmin8u, imin8l, jmin8l, dmcfield, dmc8, sel, sel8u, sel8l;
//  T(dmc8f,dmcfieldf,imin8lf,imin8uf,iminf,jmin8lf,jmin8uf,jminf,
//    sel8lf,sel8uf,self) {}
   int iminf, jminf, imin8uf, jmin8uf, imin8lf, jmin8lf, dmcfieldf, dmc8f, self, sel8uf, sel8lf;
//  T(dmc8r,dmcfieldr,imin8lr,imin8ur,iminr,jmin8lr,jmin8ur,jminr,
//    sel8lr,sel8ur,selr) {}
   int iminr, jminr, imin8ur, jmin8ur, imin8lr, jmin8lr, dmcfieldr, dmc8r, selr, sel8ur, sel8lr;
//  T(dmc_dp,ds,imindmv,imins,jmindmv,jmins,vmc_dp) {}
   int imins, jmins, ds, imindmv, jmindmv, vmc_dp, dmc_dp;
//  T(w2) {w2==2width}
   w2 = width<<1;
//  T() {}
   mb = cur+i+w2*j;
//  T() {}
   if (pict_struct==2)
//  T() {}
      mb += width;
//  T(var) {}
   var = variance(mb, w2);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
   if (pict_type==1)
//  T() {}
      mbi->mb_type = 1;
   else if (pict_type==2) {
//  T() {}
      toporg = oldorg;
//  T() {}
      topref = oldref;
//  T() {}
      botorg = oldorg+width;
//  T() {}
      botref = oldref+width;
//  T() {}
      if (secondfield)
//  T() {}
         /* opposite parity field is in same frame */
         if (pict_struct==1) {
//  T() {}
            /* current is top field */
            botorg = cur+width;
//  T() {}
            botref = curref+width;
         }
         else {
//  T() {}
            /* current is bottom field */
            toporg = cur;
//  T() {}
            topref = curref;
         }
//  T() {}
      field_estimate(toporg, topref, botorg, botref, mb, i, j, sxf, syf, ipflag, &imin, &jmin, &imin8u, &jmin8u, &imin8l, &jmin8l, &dmcfield, &dmc8, &sel, &sel8u, &sel8l, &imins, &jmins, &ds);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      if (M==1&&!ipflag)
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         /* generic condition which permits Dual Prime */
         dpfield_estimate(topref, botref, mb, i, j, imins, jmins, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
//  T(dmc,vmc) {}
      /* select between dual prime, field and 16x8 prediction */
      if (M==1&&!ipflag&&dmc_dp<dmc8&&dmc_dp<dmcfield) {
//  T() {}
         /* Dual Prime prediction */
         mbi->motion_type = 3;
//  T(dmc) {dmc==dmc_dp}
         dmc = dmc_dp;
//  T(vmc) {vmc==vmc_dp}
         /* L1 metric */
         vmc = vmc_dp;
      }
      else if (dmc8<dmcfield) {
//  T() {}
         /* 16x8 prediction */
         mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
         /* upper half block */
         vmc = dist2((sel8u?botref:topref)+(imin8u>>1)+w2*(jmin8u>>1), mb, w2, imin8u&1, jmin8u&1, 8);
//  T(vmc) {vmc#init<=vmc}
         /* lower half block */
         vmc += dist2((sel8l?botref:topref)+(imin8l>>1)+w2*(jmin8l>>1), mb+8*w2, w2, imin8l&1, jmin8l&1, 8);
      }
      else {
//  T() {}
         /* field prediction */
         mbi->motion_type = 1;
//  T(vmc) {0<=vmc}
         vmc = dist2((sel?botref:topref)+(imin>>1)+w2*(jmin>>1), mb, w2, imin&1, jmin&1, 16);
      }
//  T(v0,var) {}
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
//  T() {}
         mbi->mb_type = 1;
      else {
//  T(v0) {}
         /* zero MV field prediction from same parity ref. field
                * (not allowed if ipflag is set)
                */
         if (!ipflag)
//  T(v0) {0<=v0}
            v0 = dist2((pict_struct==2?botref:topref)+i+w2*j, mb, w2, 0, 0, 16);
//  T(var) {}
         if (ipflag||4*v0>5*vmc&&v0>=9*256) {
//  T(var) {var==vmc}
            var = vmc;
//  T() {}
            mbi->mb_type = 8;
//  T() {}
            if (mbi->motion_type==1) {
//  T() {}
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
//  T() {}
               ((mbi->mv_field_sel)[0])[0] = sel;
            }
            else if (mbi->motion_type==3) {
//  T() {}
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imins-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = jmins-(j<<1);
//  T() {}
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
//  T() {}
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
//  T() {}
               (((mbi->MV)[0])[0])[0] = imin8u-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = jmin8u-(j<<1);
//  T() {}
               (((mbi->MV)[1])[0])[0] = imin8l-(i<<1);
//  T() {}
               (((mbi->MV)[1])[0])[1] = jmin8l-(j+8<<1);
//  T() {}
               ((mbi->mv_field_sel)[0])[0] = sel8u;
//  T() {}
               ((mbi->mv_field_sel)[1])[0] = sel8l;
            }
         }
         else {
//  T(var) {v0==var}
            /* No MC */
            var = v0;
//  T() {}
            mbi->mb_type = 0;
//  T() {}
            mbi->motion_type = 1;
//  T() {}
            (((mbi->MV)[0])[0])[0] = 0;
//  T() {}
            (((mbi->MV)[0])[0])[1] = 0;
//  T() {}
            ((mbi->mv_field_sel)[0])[0] = pict_struct==2;
         }
      }
   }
   else {
//  T() {}
      /* forward prediction */
      field_estimate(oldorg, oldref, oldorg+width, oldref+width, mb, i, j, sxf, syf, 0, &iminf, &jminf, &imin8uf, &jmin8uf, &imin8lf, &jmin8lf, &dmcfieldf, &dmc8f, &self, &sel8uf, &sel8lf, &imins, &jmins, &ds);
//  T() {}
      /* backward prediction */
      field_estimate(neworg, newref, neworg+width, newref+width, mb, i, j, sxb, syb, 0, &iminr, &jminr, &imin8ur, &jmin8ur, &imin8lr, &jmin8lr, &dmcfieldr, &dmc8r, &selr, &sel8ur, &sel8lr, &imins, &jmins, &ds);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* calculate distances for bidirectional prediction */
      /* field */
      dmcfieldi = bdist1(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* 16x8 upper half block */
      dmc8i = bdist1(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* 16x8 lower half block */
      dmc8i += bdist1(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* select prediction type of minimum distance */
      if (dmcfieldi<dmc8i&&dmcfieldi<dmcfieldf&&dmcfieldi<dmc8f&&dmcfieldi<dmcfieldr&&dmcfieldi<dmc8r) {
//  T() {}
         /* field, interpolated */
         mbi->mb_type = 8|4;
//  T() {}
         mbi->motion_type = 1;
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         vmc = bdist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
      }
      else if (dmc8i<dmcfieldf&&dmc8i<dmc8f&&dmc8i<dmcfieldr&&dmc8i<dmc8r) {
//  T() {}
         /* 16x8, interpolated */
         mbi->mb_type = 8|4;
//  T() {}
         mbi->motion_type = 2;
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         /* upper half block */
         vmc = bdist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
//  T(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         /* lower half block */
         vmc += bdist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
      }
      else if (dmcfieldf<dmc8f&&dmcfieldf<dmcfieldr&&dmcfieldf<dmc8r) {
//  T() {}
         /* field, forward */
         mbi->mb_type = 8;
//  T() {}
         mbi->motion_type = 1;
//  T(vmc) {0<=vmc}
         vmc = dist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), mb, w2, iminf&1, jminf&1, 16);
      }
      else if (dmc8f<dmcfieldr&&dmc8f<dmc8r) {
//  T() {}
         /* 16x8, forward */
         mbi->mb_type = 8;
//  T() {}
         mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
         /* upper half block */
         vmc = dist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), mb, w2, imin8uf&1, jmin8uf&1, 8);
//  T(vmc) {vmc#init<=vmc}
         /* lower half block */
         vmc += dist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, 8);
      }
      else if (dmcfieldr<dmc8r) {
//  T() {}
         /* field, backward */
         mbi->mb_type = 4;
//  T() {}
         mbi->motion_type = 1;
//  T(vmc) {0<=vmc}
         vmc = dist2(newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminr&1, jminr&1, 16);
      }
      else {
//  T() {}
         /* 16x8, backward */
         mbi->mb_type = 4;
//  T() {}
         mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
         /* upper half block */
         vmc = dist2(newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8ur&1, jmin8ur&1, 8);
//  T(vmc) {vmc#init<=vmc}
         /* lower half block */
         vmc += dist2(newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lr&1, jmin8lr&1, 8);
      }
//  T(var) {var<=vmc}
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
//  T() {}
         mbi->mb_type = 1;
      else {
//  T(var) {var==vmc}
         var = vmc;
//  T() {}
         if (mbi->motion_type==1) {
//  T() {}
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
//  T() {}
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[0] = self;
//  T() {}
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
//  T() {}
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[1] = selr;
         }
         else {
//  T() {}
            /* forward */
            (((mbi->MV)[0])[0])[0] = imin8uf-(i<<1);
//  T() {}
            (((mbi->MV)[0])[0])[1] = jmin8uf-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[0] = sel8uf;
//  T() {}
            (((mbi->MV)[1])[0])[0] = imin8lf-(i<<1);
//  T() {}
            (((mbi->MV)[1])[0])[1] = jmin8lf-(j+8<<1);
//  T() {}
            ((mbi->mv_field_sel)[1])[0] = sel8lf;
//  T() {}
            /* backward */
            (((mbi->MV)[0])[1])[0] = imin8ur-(i<<1);
//  T() {}
            (((mbi->MV)[0])[1])[1] = jmin8ur-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[1] = sel8ur;
//  T() {}
            (((mbi->MV)[1])[1])[0] = imin8lr-(i<<1);
//  T() {}
            (((mbi->MV)[1])[1])[1] = jmin8lr-(j+8<<1);
//  T() {}
            ((mbi->mv_field_sel)[1])[1] = sel8lr;
         }
      }
   }
//  T() {}
   mbi->var = var;
}
//  T() {}
static void field_estimate(unsigned char *toporg, unsigned char *topref, unsigned char *botorg, unsigned char *botref, unsigned char *mb, int i, int j, int sx, int sy, int ipflag, int *iminp, int *jminp, int *imin8up, int *jmin8up, int *imin8lp, int *jmin8lp, int *dfieldp, int *d8p, int *selp, int *sel8up, int *sel8lp, int *iminsp, int *jminsp, int *dsp)
{
//  T(db,dt,iminb,imint,jminb,jmint,nobot,notop) {}
   int dt, db, imint, jmint, iminb, jminb, notop, nobot;
//  T(notop) {}
   /* if ipflag is set, predict from field of opposite parity only */
   notop = ipflag&&pict_struct==1;
//  T(nobot) {}
   nobot = ipflag&&pict_struct==2;
//  T(dt) {dt<=65536}
   /* field prediction */
   /* predict current field from top field */
   if (notop)
//  T(dt) {dt==65536}
      dt = 65536;
   else
//  T(dt) {dt<=65536}
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &imint, &jmint);
//  T(db) {db<=65536}
   /* predict current field from bottom field */
   if (nobot)
//  T(db) {db==65536}
      db = 65536;
   else
//  T(db) {db<=65536}
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &iminb, &jminb);
//  T() {}
   /* same parity prediction (only valid if ipflag==0) */
   if (pict_struct==1) {
//  T() {}
      *iminsp = imint;
//  T() {}
      *jminsp = jmint;
//  T() {}
      *dsp = dt;
   }
   else {
//  T() {}
      *iminsp = iminb;
//  T() {}
      *jminsp = jminb;
//  T() {}
      *dsp = db;
   }
//  T() {}
   /* select field prediction */
   if (dt<=db) {
//  T() {}
      *dfieldp = dt;
//  T() {}
      *iminp = imint;
//  T() {}
      *jminp = jmint;
//  T() {}
      *selp = 0;
   }
   else {
//  T() {}
      *dfieldp = db;
//  T() {}
      *iminp = iminb;
//  T() {}
      *jminp = jminb;
//  T() {}
      *selp = 1;
   }
//  T(dt) {dt<=65536}
   /* 16x8 motion compensation */
   /* predict upper half field from top field */
   if (notop)
//  T(dt) {dt==65536}
      dt = 65536;
   else
//  T(dt) {dt<=65536}
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  T(db) {db<=65536}
   /* predict upper half field from bottom field */
   if (nobot)
//  T(db) {db==65536}
      db = 65536;
   else
//  T(db) {db<=65536}
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  T() {}
   /* select prediction for upper half field */
   if (dt<=db) {
//  T() {}
      *d8p = dt;
//  T() {}
      *imin8up = imint;
//  T() {}
      *jmin8up = jmint;
//  T() {}
      *sel8up = 0;
   }
   else {
//  T() {}
      *d8p = db;
//  T() {}
      *imin8up = iminb;
//  T() {}
      *jmin8up = jminb;
//  T() {}
      *sel8up = 1;
   }
//  T(dt) {dt<=65536}
   /* predict lower half field from top field */
   if (notop)
//  T(dt) {dt==65536}
      dt = 65536;
   else
//  T(dt) {dt<=65536}
      dt = fullsearch(toporg, topref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  T(db) {db<=65536}
   /* predict lower half field from bottom field */
   if (nobot)
//  T(db) {db==65536}
      db = 65536;
   else
//  T(db) {db<=65536}
      db = fullsearch(botorg, botref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  T() {}
   /* select prediction for lower half field */
   if (dt<=db) {
//  T() {}
      *d8p += dt;
//  T() {}
      *imin8lp = imint;
//  T() {}
      *jmin8lp = jmint;
//  T() {}
      *sel8lp = 0;
   }
   else {
//  T() {}
      *d8p += db;
//  T() {}
      *imin8lp = iminb;
//  T() {}
      *jmin8lp = jminb;
//  T() {}
      *sel8lp = 1;
   }
}
//  T() {}
static void frame_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi)
{
//  T(imin,iminf,iminr,jmin,jminf,jminr) {}
   int imin, jmin, iminf, jminf, iminr, jminr;
//  T(iminb,imint,jminb,jmint) {}
   int imint, jmint, iminb, jminb;
//  T(iminbf,imintf,jminbf,jmintf) {}
   int imintf, jmintf, iminbf, jminbf;
//  T(iminbr,imintr,jminbr,jmintr) {}
   int imintr, jmintr, iminbr, jminbr;
//  T(v0,var) {}
   int var, v0;
//  T(dmc,dmcf,dmci,dmcr,vmc,vmcf,vmci,vmcr) {}
   int dmc, dmcf, dmcr, dmci, vmc, vmcf, vmcr, vmci;
//  T(dmcfield,dmcfieldf,dmcfieldi,dmcfieldr) {}
   int dmcfield, dmcfieldf, dmcfieldr, dmcfieldi;
//  T(bsel,bself,bselr,tsel,tself,tselr) {}
   int tsel, bsel, tself, bself, tselr, bselr;
//  T() {}
   unsigned char *mb;
//  T() {}
   int imins[2][2], jmins[2][2];
//  T(dmc_dp,imindmv,imindp,jmindmv,jmindp,vmc_dp) {}
   int imindp, jmindp, imindmv, jmindmv, dmc_dp, vmc_dp;
//  T() {}
   mb = cur+i+width*j;
//  T(var) {}
   var = variance(mb, width);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
   if (pict_type==1)
//  T() {}
      mbi->mb_type = 1;
   else if (pict_type==2) {
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
      if (frame_pred_dct) {
//  T(dmc) {dmc<=65536}
         dmc = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &imin, &jmin);
//  T(vmc) {0<=vmc}
         vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
//  T() {}
         mbi->motion_type = 2;
      }
      else {
//  T() {}
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &imin, &jmin, &imint, &jmint, &iminb, &jminb, &dmc, &dmcfield, &tsel, &bsel, imins, jmins);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         if (M==1)
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
            dpframe_estimate(oldref, mb, i, j>>1, imins, jmins, &imindp, &jmindp, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
//  T(dmc,vmc) {dmc<=dmc#init, dmc<=dmcfield}
         /* select between dual prime, frame and field prediction */
         if (M==1&&dmc_dp<dmc&&dmc_dp<dmcfield) {
//  T() {}
            mbi->motion_type = 3;
//  T(dmc) {dmc==dmc_dp}
            dmc = dmc_dp;
//  T(vmc) {vmc==vmc_dp}
            vmc = vmc_dp;
         }
         else if (dmc<=dmcfield) {
//  T() {}
            mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
            vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
         }
         else {
//  T() {}
            mbi->motion_type = 1;
//  T(dmc) {dmc==dmcfield}
            dmc = dmcfield;
//  T(vmc) {0<=vmc}
            vmc = dist2(oldref+(tsel?width:0)+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imint&1, jmint&1, 8);
//  T(vmc) {vmc#init<=vmc}
            vmc += dist2(oldref+(bsel?width:0)+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, iminb&1, jminb&1, 8);
         }
      }
//  T(v0,var) {}
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
//  T() {}
         mbi->mb_type = 1;
      else {
//  T(v0) {0<=v0}
         /* select between MC / No-MC
                *
                * use No-MC if var(No-MC) <= 1.25*var(MC)
                * (i.e slightly biased towards No-MC)
                *
                * blocks with small prediction error are always coded as No-MC
                * (requires no motion vectors, allows skipping)
                */
         v0 = dist2(oldref+i+width*j, mb, width, 0, 0, 16);
//  T(var) {var<=v0}
         if (4*v0>5*vmc&&v0>=9*256) {
//  T(var) {var==vmc}
            /* use MC */
            var = vmc;
//  T() {}
            mbi->mb_type = 8;
//  T() {}
            if (mbi->motion_type==2) {
//  T() {}
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
            }
            else if (mbi->motion_type==3) {
//  T() {}
               /* these are FRAME vectors */
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imindp-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = (jmindp<<1)-(j<<1);
//  T() {}
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
//  T() {}
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
//  T() {}
               /* these are FRAME vectors */
               (((mbi->MV)[0])[0])[0] = imint-(i<<1);
//  T() {}
               (((mbi->MV)[0])[0])[1] = (jmint<<1)-(j<<1);
//  T() {}
               (((mbi->MV)[1])[0])[0] = iminb-(i<<1);
//  T() {}
               (((mbi->MV)[1])[0])[1] = (jminb<<1)-(j<<1);
//  T() {}
               ((mbi->mv_field_sel)[0])[0] = tsel;
//  T() {}
               ((mbi->mv_field_sel)[1])[0] = bsel;
            }
         }
         else {
//  T(var) {v0==var}
            /* No-MC */
            var = v0;
//  T() {}
            mbi->mb_type = 0;
//  T() {}
            mbi->motion_type = 2;
//  T() {}
            (((mbi->MV)[0])[0])[0] = 0;
//  T() {}
            (((mbi->MV)[0])[0])[1] = 0;
         }
      }
   }
   else {
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
      if (frame_pred_dct) {
//  T(dmcf) {dmcf<=65536}
         /* forward */
         dmcf = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &iminf, &jminf);
//  T(vmcf) {0<=vmcf}
         vmcf = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
//  T(dmcr) {dmcr<=65536}
         /* backward */
         dmcr = fullsearch(neworg, newref, mb, width, i, j, sxb, syb, 16, width, height, &iminr, &jminr);
//  T(vmcr) {0<=vmcr}
         vmcr = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* interpolated (bidirectional) */
         vmci = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  T(vmc) {vmc<=vmci, vmc<=vmcr}
         /* decisions */
         /* select between forward/backward/interpolated prediction:
                * use the one with smallest mean sqaured prediction error
                */
         if (vmcf<=vmcr&&vmcf<=vmci) {
//  T(vmc) {vmc==vmcf}
            vmc = vmcf;
//  T() {}
            mbi->mb_type = 8;
         }
         else if (vmcr<=vmci) {
//  T(vmc) {vmc==vmcr}
            vmc = vmcr;
//  T() {}
            mbi->mb_type = 4;
         }
         else {
//  T(vmc) {vmc==vmci}
            vmc = vmci;
//  T() {}
            mbi->mb_type = 8|4;
         }
//  T() {}
         mbi->motion_type = 2;
      }
      else {
//  T() {}
         /* forward prediction */
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &iminf, &jminf, &imintf, &jmintf, &iminbf, &jminbf, &dmcf, &dmcfieldf, &tself, &bself, imins, jmins);
//  T() {}
         /* backward prediction */
         frame_estimate(neworg, newref, mb, i, j, sxb, syb, &iminr, &jminr, &imintr, &jmintr, &iminbr, &jminbr, &dmcr, &dmcfieldr, &tselr, &bselr, imins, jmins);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* calculate interpolated distance */
         /* frame */
         dmci = bdist1(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* top field */
         dmcfieldi = bdist1(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* bottom field */
         dmcfieldi += bdist1(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* select prediction type of minimum distance from the
                * six candidates (field/frame * forward/backward/interpolated)
                */
         if (dmci<dmcfieldi&&dmci<dmcf&&dmci<dmcfieldf&&dmci<dmcr&&dmci<dmcfieldr) {
//  T() {}
            /* frame, interpolated */
            mbi->mb_type = 8|4;
//  T() {}
            mbi->motion_type = 2;
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
            vmc = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
         }
         else if (dmcfieldi<dmcf&&dmcfieldi<dmcfieldf&&dmcfieldi<dmcr&&dmcfieldi<dmcfieldr) {
//  T() {}
            /* field, interpolated */
            mbi->mb_type = 8|4;
//  T() {}
            mbi->motion_type = 1;
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
            vmc = bdist2(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
//  T(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
            vmc += bdist2(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
         }
         else if (dmcf<dmcfieldf&&dmcf<dmcr&&dmcf<dmcfieldr) {
//  T() {}
            /* frame, forward */
            mbi->mb_type = 8;
//  T() {}
            mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
            vmc = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
         }
         else if (dmcfieldf<dmcr&&dmcfieldf<dmcfieldr) {
//  T() {}
            /* field, forward */
            mbi->mb_type = 8;
//  T() {}
            mbi->motion_type = 1;
//  T(vmc) {0<=vmc}
            vmc = dist2(oldref+(tself?width:0)+(imintf>>1)+(width<<1)*(jmintf>>1), mb, width<<1, imintf&1, jmintf&1, 8);
//  T(vmc) {vmc#init<=vmc}
            vmc += dist2(oldref+(bself?width:0)+(iminbf>>1)+(width<<1)*(jminbf>>1), mb+width, width<<1, iminbf&1, jminbf&1, 8);
         }
         else if (dmcr<dmcfieldr) {
//  T() {}
            /* frame, backward */
            mbi->mb_type = 4;
//  T() {}
            mbi->motion_type = 2;
//  T(vmc) {0<=vmc}
            vmc = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
         }
         else {
//  T() {}
            /* field, backward */
            mbi->mb_type = 4;
//  T() {}
            mbi->motion_type = 1;
//  T(vmc) {0<=vmc}
            vmc = dist2(newref+(tselr?width:0)+(imintr>>1)+(width<<1)*(jmintr>>1), mb, width<<1, imintr&1, jmintr&1, 8);
//  T(vmc) {vmc#init<=vmc}
            vmc += dist2(newref+(bselr?width:0)+(iminbr>>1)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbr&1, jminbr&1, 8);
         }
      }
//  T(var) {var<=vmc}
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
//  T() {}
         mbi->mb_type = 1;
      else {
//  T(var) {var==vmc}
         var = vmc;
//  T() {}
         if (mbi->motion_type==2) {
//  T() {}
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
//  T() {}
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
//  T() {}
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
//  T() {}
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
         }
         else {
//  T() {}
            /* these are FRAME vectors */
            /* forward */
            (((mbi->MV)[0])[0])[0] = imintf-(i<<1);
//  T() {}
            (((mbi->MV)[0])[0])[1] = (jmintf<<1)-(j<<1);
//  T() {}
            (((mbi->MV)[1])[0])[0] = iminbf-(i<<1);
//  T() {}
            (((mbi->MV)[1])[0])[1] = (jminbf<<1)-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[0] = tself;
//  T() {}
            ((mbi->mv_field_sel)[1])[0] = bself;
//  T() {}
            /* backward */
            (((mbi->MV)[0])[1])[0] = imintr-(i<<1);
//  T() {}
            (((mbi->MV)[0])[1])[1] = (jmintr<<1)-(j<<1);
//  T() {}
            (((mbi->MV)[1])[1])[0] = iminbr-(i<<1);
//  T() {}
            (((mbi->MV)[1])[1])[1] = (jminbr<<1)-(j<<1);
//  T() {}
            ((mbi->mv_field_sel)[0])[1] = tselr;
//  T() {}
            ((mbi->mv_field_sel)[1])[1] = bselr;
         }
      }
   }
//  T() {}
   mbi->var = var;
}
//  T() {}
static void frame_estimate(unsigned char *org, unsigned char *ref, unsigned char *mb, int i, int j, int sx, int sy, int *iminp, int *jminp, int *imintp, int *jmintp, int *iminbp, int *jminbp, int *dframep, int *dfieldp, int *tselp, int *bselp, int imins[2][2], int jmins[2][2])
{
//  T(db,dminb,dmint,dt) {}
   int dt, db, dmint, dminb;
//  T(iminb,imint,jminb,jmint) {}
   int imint, iminb, jmint, jminb;
//  T() {}
   /* frame prediction */
   *dframep = fullsearch(org, ref, mb, width, i, j, sx, sy, 16, width, height, iminp, jminp);
//  T(dt) {dt<=65536}
   /* predict top field from top field */
   dt = fullsearch(org, ref, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  T(db) {db<=65536}
   /* predict top field from bottom field */
   db = fullsearch(org+width, ref+width, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  T() {}
   imins[0][0] = imint;
//  T() {}
   jmins[0][0] = jmint;
//  T() {}
   imins[1][0] = iminb;
//  T() {}
   jmins[1][0] = jminb;
//  T(dmint) {dmint<=db, dmint<=dt}
   /* select prediction for top field */
   if (dt<=db) {
//  T(dmint) {dmint==dt}
      dmint = dt;
//  T() {}
      *imintp = imint;
//  T() {}
      *jmintp = jmint;
//  T() {}
      *tselp = 0;
   }
   else {
//  T(dmint) {db==dmint}
      dmint = db;
//  T() {}
      *imintp = iminb;
//  T() {}
      *jmintp = jminb;
//  T() {}
      *tselp = 1;
   }
//  T(dt) {dt<=65536}
   /* predict bottom field from top field */
   dt = fullsearch(org, ref, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  T(db) {db<=65536}
   /* predict bottom field from bottom field */
   db = fullsearch(org+width, ref+width, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  T() {}
   imins[0][1] = imint;
//  T() {}
   jmins[0][1] = jmint;
//  T() {}
   imins[1][1] = iminb;
//  T() {}
   jmins[1][1] = jminb;
//  T(dminb) {dminb<=db, dminb<=dt}
   /* select prediction for bottom field */
   if (db<=dt) {
//  T(dminb) {db==dminb}
      dminb = db;
//  T() {}
      *iminbp = iminb;
//  T() {}
      *jminbp = jminb;
//  T() {}
      *bselp = 1;
   }
   else {
//  T(dminb) {dminb==dt}
      dminb = dt;
//  T() {}
      *iminbp = imint;
//  T() {}
      *jminbp = jmint;
//  T() {}
      *bselp = 0;
   }
//  T() {}
   *dfieldp = dmint+dminb;
}
//  T(motion!fullsearch) {motion!fullsearch<=65536}
static int fullsearch(unsigned char *org, unsigned char *ref, unsigned char *blk, int lx, int i0, int j0, int sx, int sy, int h, int xmax, int ymax, int *iminp, int *jminp)
{
//  T(i,ihigh,ilow,imin,j,jhigh,jlow,jmin) {}
   int i, j, imin, jmin, ilow, ihigh, jlow, jhigh;
//  T(d,dmin) {}
   int d, dmin;
//  T(k,l,sxy) {}
   int k, l, sxy;
//  T(ilow) {ilow+sx==i0}
   ilow = i0-sx;
//  T(ihigh) {i0+sx==ihigh}
   ihigh = i0+sx;
//  T(ilow) {0<=ilow, ilow#init<=ilow}
   if (ilow<0)
//  T(ilow) {ilow==0}
      ilow = 0;
//  T(ihigh) {ihigh<=ihigh#init, ihigh+16<=xmax}
   if (ihigh>xmax-16)
//  T(ihigh) {ihigh==xmax-16}
      ihigh = xmax-16;
//  T(jlow) {jlow+sy==j0}
   jlow = j0-sy;
//  T(jhigh) {j0+sy==jhigh}
   jhigh = j0+sy;
//  T(jlow) {0<=jlow, jlow#init<=jlow}
   if (jlow<0)
//  T(jlow) {jlow==0}
      jlow = 0;
//  T(jhigh) {h+jhigh<=ymax, jhigh<=jhigh#init}
   if (jhigh>ymax-h)
//  T(jhigh) {h+jhigh==ymax}
      jhigh = ymax-h;
//  T(imin) {i0==imin}
   /* full pel search, spiraling outwards */
   imin = i0;
//  T(jmin) {j0==jmin}
   jmin = j0;
//  T(dmin) {0<=dmin}
   dmin = dist1(org+imin+lx*jmin, blk, lx, 0, 0, h, 65536);
//  T(sxy) {sx<=sxy, sy<=sxy}
   sxy = sx>sy?sx:sy;
//  T(d,dmin,i,imin,j,jmin,k,l) {dmin<=dmin#init, 1<=l, l<=sxy}
   for(l = 1; l <= sxy; l += 1) {
//  T(i) {i+l==i0}
      i = i0-l;
//  T(j) {j+l==j0}
      j = j0-l;
//  T(d,dmin,i,imin,j,jmin,k) {dmin<=dmin#init, i#init+j#init<=i+j+k,
//    i#init+j<=i+j#init+k, i+j#init<=i#init+j+k,
//    i+j<=i#init+j#init+k, 0<=k, k+1<=8l}
      for(k = 0; k <= 8*l-1; k += 1) {
//  T(d,dmin,imin,jmin) {dmin<=dmin#init}
         if (i>=ilow&&i<=ihigh&&j>=jlow&&j<=jhigh) {
//  T(d) {0<=d}
            d = dist1(org+i+lx*j, blk, lx, 0, 0, h, dmin);
//  T(dmin,imin,jmin) {dmin<=d, dmin<=dmin#init}
            if (d<dmin) {
//  T(dmin) {d==dmin}
               dmin = d;
//  T(imin) {i==imin}
               imin = i;
//  T(jmin) {j==jmin}
               jmin = j;
            }
         }
//  T(i,j) {i#init+j#init<=i+j+1, i#init+j<=i+j#init+1,
//    i+j#init<=i#init+j+1, i+j<=i#init+j#init+1}
         if (k<2*l)
//  T(i) {i==i#init+1}
            i++;
         else if (k<4*l)
//  T(j) {j==j#init+1}
            j++;
         else if (k<6*l)
//  T(i) {i==i#init-1}
            i--;
         else
//  T(j) {j==j#init-1}
            j--;
      }
   }
//  T(dmin) {dmin==65536}
   /* half pel */
   dmin = 65536;
//  T(imin) {imin==2imin#init}
   imin <<= 1;
//  T(jmin) {jmin==2jmin#init}
   jmin <<= 1;
//  T(ilow) {}
   ilow = imin-(imin>0);
//  T(ihigh) {}
   ihigh = imin+(imin<xmax-16<<1);
//  T(jlow) {}
   jlow = jmin-(jmin>0);
//  T(jhigh) {}
   jhigh = jmin+(jmin<ymax-h<<1);
//  T(d,dmin,i,imin,j,jmin) {dmin<=dmin#init, j<=jhigh, jlow<=j}
   for(j = jlow; j <= jhigh; j += 1)
//  T(d,dmin,i,imin,jmin) {dmin<=dmin#init, i<=ihigh, ilow<=i}
      for(i = ilow; i <= ihigh; i += 1) {
//  T(d) {0<=d}
         d = dist1(ref+(i>>1)+lx*(j>>1), blk, lx, i&1, j&1, h, dmin);
//  T(dmin,imin,jmin) {dmin<=d, dmin<=dmin#init}
         if (d<dmin) {
//  T(dmin) {d==dmin}
            dmin = d;
//  T(imin) {i==imin}
            imin = i;
//  T(jmin) {j==jmin}
            jmin = j;
         }
      }
//  T() {}
   *iminp = imin;
//  T() {}
   *jminp = jmin;
//  T(motion!fullsearch) {dmin==motion!fullsearch}
   return dmin;
}
//  T(motion!variance) {}
static int variance(unsigned char *p, int lx)
{
//  T(i,j) {}
   int i, j;
//  T(s,s2,v) {}
   unsigned int v, s, s2;
//  T(s,s2) {s==0, s2==0}
   s = s2 = 0;
//  T(i,j,s,s2,v) {0<=j, j<=15, s2#init<=s2}
   for(j = 0; j <= 15; j += 1) {
//  T(i,s,s2,v) {0<=i, i<=15, s2#init<=s2}
      for(i = 0; i <= 15; i += 1) {
//  T(v) {}
         v = *p++;
//  T(s) {s#init+v==s}
         s += v;
//  T(s2) {s2#init<=s2}
         s2 += v*v;
      }
//  T() {}
      p += lx-16;
   }
//  T(motion!variance) {}
   return s2-s*s/256;
}
//  T() {}
void motion_estimation(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
//  T(i,j) {}
   int i, j;
//  T(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16) {
//  T(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
      for(i = 0; i <= width-1; i += 16) {
//  T(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
         if (pict_struct==3)
//  T(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
            frame_ME(oldorg, neworg, oldref, newref, cur, i, j, sxf, syf, sxb, syb, mbi);
         else
//  T(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
            field_ME(oldorg, neworg, oldref, newref, cur, curref, i, j, sxf, syf, sxb, syb, mbi, secondfield, ipflag);
//  T() {}
         mbi++;
      }
//  T() {}
      if (!quiet) {
//  T() {}
         _IO_putc('.', stderr);
//  T() {}
         fflush(stderr);
      }
   }
//  T() {}
   if (!quiet)
//  T() {}
      _IO_putc('\n', stderr);
}
//  T(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
static void init()
{
//  T(i,size) {}
   int i, size;
//  T() {}
   static int block_count_tab[3] = {6, 8, 12};
//  T(putbits!:bytecnt,putbits!:outcnt) {putbits!:bytecnt==0,
//    putbits!:outcnt==8}
   initbits();
//  T() {}
   init_fdct();
//  T() {}
   init_idct();
//  T(mb_width) {horizontal_size<=16mb_width,
//    16mb_width<=horizontal_size+15}
   /* round picture dimensions to nearest multiple of 16 or 32 */
   mb_width = (horizontal_size+15)/16;
//  T(mb_height) {vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
   mb_height = prog_seq?(vertical_size+15)/16:2*((vertical_size+31)/32);
//  T(mb_height2) {}
   mb_height2 = fieldpic?mb_height>>1:mb_height;
//  T(width) {16mb_width==width}
   /* for field pictures */
   width = 16*mb_width;
//  T(height) {height==16mb_height}
   height = 16*mb_height;
//  T(chrom_width) {}
   chrom_width = chroma_format==3?width:width>>1;
//  T(chrom_height) {}
   chrom_height = chroma_format!=1?height:height>>1;
//  T(height2) {}
   height2 = fieldpic?height>>1:height;
//  T(width2) {}
   width2 = fieldpic?width<<1:width;
//  T(chrom_width2) {}
   chrom_width2 = fieldpic?chrom_width<<1:chrom_width;
//  T(block_count) {}
   block_count = block_count_tab[chroma_format-1];
//  T() {}
   /* clip table */
   if (!(clp = (unsigned char *) malloc(1024)))
//  T() {0==-1}
      error("malloc failed\n");
//  T() {}
   clp += 384;
//  T(i) {0<=i+384, i<=639}
   for(i = -384; i <= 639; i += 1)
//  T() {}
      clp[i] = i<0?0:i>255?255:i;
//  T(i,size) {0<=i, i<=2}
   for(i = 0; i <= 2; i += 1) {
//  T(size) {}
      size = i==0?width*height:chrom_width*chrom_height;
//  T() {}
      if (!(newrefframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(oldrefframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(auxframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(neworgframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(oldorgframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(auxorgframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
//  T() {}
      if (!(predframe[i] = (unsigned char *) malloc(size)))
//  T() {0==-1}
         error("malloc failed\n");
   }
//  T() {}
   mbinfo = (struct mbinfo *) malloc(mb_width*mb_height2*sizeof(struct mbinfo ));
//  T() {}
   if (!mbinfo)
//  T() {0==-1}
      error("malloc failed\n");
//  T() {}
   blocks = (short (*)[64]) malloc(mb_width*mb_height2*block_count*sizeof(short[64]));
//  T() {}
   if (!blocks)
//  T() {0==-1}
      error("malloc failed\n");
//  T() {}
   /* open statistics output file */
   if (statname[0]=='-')
//  T() {}
      statfile = stdout;
   else if (!(statfile = fopen(statname, "w"))) {
//  T() {}
      sprintf(errortext, "Couldn't create statistics output file %s", statname);
//  T() {0==-1}
      error(errortext);
   }
}
//  T(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    dc_prec,display_horizontal_size,display_vertical_size,fieldpic,
//    frame_rate_code,horizontal_size,level,low_delay,
//    matrix_coefficients,mpeg1,profile,prog_frame,prog_seq,quiet,
//    repeatfirst,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    0<=prog_seq, repeatfirst<=1, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
static void readparmfile(char *fname)
{
//  T(i) {}
   int i;
//  T(f,h,m,s) {}
   int h, m, s, f;
//  T() {}
   FILE *fd;
//  T() {}
   char line[256];
//  T() {}
   static double ratetab[8] = {24000.0/1001.0, 24.0, 25.0, 30000.0/1001.0, 30.0, 50.0, 60000.0/1001.0, 60.0};
//  T() {}
   extern int r, Xi, Xb, Xp, d0i, d0p, d0b;
   /* rate control */
//  T() {}
   extern double avg_act;
//  T() {}
   /* rate control */
   if (!(fd = fopen(fname, "r"))) {
//  T() {}
      sprintf(errortext, "Couldn't open parameter file %s", fname);
//  T() {0==-1}
      error(errortext);
   }
//  T() {}
   fgets(id_string, 254, fd);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%s", tplorg);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%s", tplref);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%s", iqname);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%s", niqname);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%s", statname);
//  T() {}
   fgets(line, 254, fd);
//  T(inputtype) {}
   sscanf(line, "%d", &inputtype);
//  T() {}
   fgets(line, 254, fd);
//  T(nframes) {}
   sscanf(line, "%d", &nframes);
//  T() {}
   fgets(line, 254, fd);
//  T(frame0) {}
   sscanf(line, "%d", &frame0);
//  T() {}
   fgets(line, 254, fd);
//  T(f,h,m,s) {}
   sscanf(line, "%d:%d:%d:%d", &h, &m, &s, &f);
//  T() {}
   fgets(line, 254, fd);
//  T(N) {}
   sscanf(line, "%d", &N);
//  T() {}
   fgets(line, 254, fd);
//  T(M) {}
   sscanf(line, "%d", &M);
//  T() {}
   fgets(line, 254, fd);
//  T(mpeg1) {}
   sscanf(line, "%d", &mpeg1);
//  T() {}
   fgets(line, 254, fd);
//  T(fieldpic) {}
   sscanf(line, "%d", &fieldpic);
//  T() {}
   fgets(line, 254, fd);
//  T(horizontal_size) {}
   sscanf(line, "%d", &horizontal_size);
//  T() {}
   fgets(line, 254, fd);
//  T(vertical_size) {}
   sscanf(line, "%d", &vertical_size);
//  T() {}
   fgets(line, 254, fd);
//  T(aspectratio) {}
   sscanf(line, "%d", &aspectratio);
//  T() {}
   fgets(line, 254, fd);
//  T(frame_rate_code) {}
   sscanf(line, "%d", &frame_rate_code);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%lf", &bit_rate);
//  T() {}
   fgets(line, 254, fd);
//  T(vbv_buffer_size) {}
   sscanf(line, "%d", &vbv_buffer_size);
//  T() {}
   fgets(line, 254, fd);
//  T(low_delay) {}
   sscanf(line, "%d", &low_delay);
//  T() {}
   fgets(line, 254, fd);
//  T(constrparms) {}
   sscanf(line, "%d", &constrparms);
//  T() {}
   fgets(line, 254, fd);
//  T(profile) {}
   sscanf(line, "%d", &profile);
//  T() {}
   fgets(line, 254, fd);
//  T(level) {}
   sscanf(line, "%d", &level);
//  T() {}
   fgets(line, 254, fd);
//  T(prog_seq) {}
   sscanf(line, "%d", &prog_seq);
//  T() {}
   fgets(line, 254, fd);
//  T(chroma_format) {}
   sscanf(line, "%d", &chroma_format);
//  T() {}
   fgets(line, 254, fd);
//  T(video_format) {}
   sscanf(line, "%d", &video_format);
//  T() {}
   fgets(line, 254, fd);
//  T(color_primaries) {}
   sscanf(line, "%d", &color_primaries);
//  T() {}
   fgets(line, 254, fd);
//  T(transfer_characteristics) {}
   sscanf(line, "%d", &transfer_characteristics);
//  T() {}
   fgets(line, 254, fd);
//  T(matrix_coefficients) {}
   sscanf(line, "%d", &matrix_coefficients);
//  T() {}
   fgets(line, 254, fd);
//  T(display_horizontal_size) {}
   sscanf(line, "%d", &display_horizontal_size);
//  T() {}
   fgets(line, 254, fd);
//  T(display_vertical_size) {}
   sscanf(line, "%d", &display_vertical_size);
//  T() {}
   fgets(line, 254, fd);
//  T(dc_prec) {}
   sscanf(line, "%d", &dc_prec);
//  T() {}
   fgets(line, 254, fd);
//  T(topfirst) {}
   sscanf(line, "%d", &topfirst);
//  T() {}
   fgets(line, 254, fd);
//  T(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", frame_pred_dct_tab, frame_pred_dct_tab+1, frame_pred_dct_tab+2);
//  T() {}
   fgets(line, 254, fd);
//  T(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", conceal_tab, conceal_tab+1, conceal_tab+2);
//  T() {}
   fgets(line, 254, fd);
//  T(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", qscale_tab, qscale_tab+1, qscale_tab+2);
//  T() {}
   fgets(line, 254, fd);
//  T(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", intravlc_tab, intravlc_tab+1, intravlc_tab+2);
//  T() {}
   fgets(line, 254, fd);
//  T(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", altscan_tab, altscan_tab+1, altscan_tab+2);
//  T() {}
   fgets(line, 254, fd);
//  T(repeatfirst) {}
   sscanf(line, "%d", &repeatfirst);
//  T() {}
   fgets(line, 254, fd);
//  T(prog_frame) {}
   sscanf(line, "%d", &prog_frame);
//  T() {}
   /* intra slice interval refresh period */
   fgets(line, 254, fd);
//  T(P) {}
   sscanf(line, "%d", &P);
//  T() {}
   fgets(line, 254, fd);
//  T(r) {}
   sscanf(line, "%d", &r);
//  T() {}
   fgets(line, 254, fd);
//  T() {}
   sscanf(line, "%lf", &avg_act);
//  T() {}
   fgets(line, 254, fd);
//  T(Xi) {}
   sscanf(line, "%d", &Xi);
//  T() {}
   fgets(line, 254, fd);
//  T(Xp) {}
   sscanf(line, "%d", &Xp);
//  T() {}
   fgets(line, 254, fd);
//  T(Xb) {}
   sscanf(line, "%d", &Xb);
//  T() {}
   fgets(line, 254, fd);
//  T(d0i) {}
   sscanf(line, "%d", &d0i);
//  T() {}
   fgets(line, 254, fd);
//  T(d0p) {}
   sscanf(line, "%d", &d0p);
//  T() {}
   fgets(line, 254, fd);
//  T(d0b) {}
   sscanf(line, "%d", &d0b);
//  T() {1<=N}
   if (N<1)
//  T() {0==-1}
      error("N must be positive");
//  T() {1<=M}
   if (M<1)
//  T() {0==-1}
      error("M must be positive");
//  T() {}
   if (N%M!=0)
//  T() {0==-1}
      error("N must be an integer multiple of M");
//  T() {}
   motion_data = (struct motion_data *) malloc(M*sizeof(struct motion_data ));
//  T() {}
   if (!motion_data)
//  T() {0==-1}
      error("malloc failed\n");
//  T(i) {i+1<=M, 0<=i}
   for(i = 0; i <= M-1; i += 1) {
//  T() {}
      fgets(line, 254, fd);
//  T() {}
      sscanf(line, "%d %d %d %d", &motion_data[i].forw_hor_f_code, &motion_data[i].forw_vert_f_code, &motion_data[i].sxf, &motion_data[i].syf);
//  T() {}
      if (i!=0) {
//  T() {}
         fgets(line, 254, fd);
//  T() {}
         sscanf(line, "%d %d %d %d", &motion_data[i].back_hor_f_code, &motion_data[i].back_vert_f_code, &motion_data[i].sxb, &motion_data[i].syb);
      }
   }
//  T() {}
   fclose(fd);
//  T(mpeg1) {0<=mpeg1, mpeg1<=1}
   /* make flags boolean (x!=0 -> x=1) */
   mpeg1 = !!mpeg1;
//  T(fieldpic) {0<=fieldpic, fieldpic<=1}
   fieldpic = !!fieldpic;
//  T(low_delay) {0<=low_delay, low_delay<=1}
   low_delay = !!low_delay;
//  T(constrparms) {0<=constrparms, constrparms<=1}
   constrparms = !!constrparms;
//  T(prog_seq) {0<=prog_seq, prog_seq<=1}
   prog_seq = !!prog_seq;
//  T(topfirst) {0<=topfirst, topfirst<=1}
   topfirst = !!topfirst;
//  T(i) {0<=i, i<=2}
   for(i = 0; i <= 2; i += 1) {
//  T() {}
      frame_pred_dct_tab[i] = !!frame_pred_dct_tab[i];
//  T() {}
      conceal_tab[i] = !!conceal_tab[i];
//  T() {}
      qscale_tab[i] = !!qscale_tab[i];
//  T() {}
      intravlc_tab[i] = !!intravlc_tab[i];
//  T() {}
      altscan_tab[i] = !!altscan_tab[i];
   }
//  T(repeatfirst) {0<=repeatfirst, repeatfirst<=1}
   repeatfirst = !!repeatfirst;
//  T(prog_frame) {0<=prog_frame, prog_frame<=1}
   prog_frame = !!prog_frame;
//  T() {1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=dc_prec, dc_prec<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   /* make sure MPEG specific parameters are valid */
   range_checks();
//  T() {}
   frame_rate = ratetab[frame_rate_code-1];
//  T(tc0) {h==tc0}
   /* timecode -> frame number */
   tc0 = h;
//  T(tc0) {m+60tc0#init==tc0}
   tc0 = 60*tc0+m;
//  T(tc0) {s+60tc0#init==tc0}
   tc0 = 60*tc0+s;
//  T(tc0) {}
   tc0 = (int) (frame_rate+0.5)*tc0+f;
//  T(constrparms,i) {}
   if (!mpeg1)
//  T() {4<=level, level<=10, 1<=profile, profile<=5}
      profile_and_level_checks();
   else {
//  T(constrparms) {}
      /* MPEG-1 */
      if (constrparms)
//  T(constrparms) {}
         if (horizontal_size>768||vertical_size>576||(horizontal_size+15)/16*((vertical_size+15)/16)>396||(horizontal_size+15)/16*((vertical_size+15)/16)*frame_rate>396*25.0||frame_rate>30.0) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
            constrparms = 0;
         }
//  T(constrparms,i) {}
      if (constrparms) {
//  T(i) {i==0}
         i = 0;
l99996:         ;
//  T() {}
         if (!(i<M)) goto _break_3;
//  T() {}
         if (motion_data[i].forw_hor_f_code>4) goto l99999;
//  T() {}
         if (motion_data[i].forw_vert_f_code>4) goto l99998;
//  T() {}
         if (i!=0) goto l99997;
l99994:         ;
//  T(i) {i==i#init+1}
         i++;
         goto l99996;
l99997:         ;
//  T() {}
         if (motion_data[i].back_hor_f_code>4) goto l99995;
//  T() {}
         if (motion_data[i].back_vert_f_code>4) {
         }
         else {
            goto l99994;
         }
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
         constrparms = 0;
         goto _break_3;
l99995:         ;
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
         constrparms = 0;
         goto _break_3;
l99998:         ;
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
         constrparms = 0;
         goto _break_3;
l99999:         ;
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
         constrparms = 0;
//  T() {}
_break_3:         ;
      }
   }
//  T(chroma_format,dc_prec,i,prog_seq) {prog_seq#init<=prog_seq}
   /* relational checks */
   if (mpeg1) {
//  T(prog_seq) {1<=prog_seq, prog_seq#init<=prog_seq}
      if (!prog_seq) {
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting progressive_sequence = 1\n");
//  T(prog_seq) {prog_seq==1}
         prog_seq = 1;
      }
//  T(chroma_format) {chroma_format==1}
      if (chroma_format!=1) {
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting chroma_format = 1 (4:2:0)\n");
//  T(chroma_format) {chroma_format==1}
         chroma_format = 1;
      }
//  T(dc_prec) {dc_prec==0}
      if (dc_prec!=0) {
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: setting intra_dc_precision = 0\n");
//  T(dc_prec) {dc_prec==0}
         dc_prec = 0;
      }
//  T(i) {0<=i, i<=2}
      for(i = 0; i <= 2; i += 1)
//  T() {}
         if (qscale_tab[i]) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: setting qscale_tab[%d] = 0\n", i);
//  T() {}
            qscale_tab[i] = 0;
         }
//  T(i) {0<=i, i<=2}
      for(i = 0; i <= 2; i += 1)
//  T() {}
         if (intravlc_tab[i]) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: setting intravlc_tab[%d] = 0\n", i);
//  T() {}
            intravlc_tab[i] = 0;
         }
//  T(i) {0<=i, i<=2}
      for(i = 0; i <= 2; i += 1)
//  T() {}
         if (altscan_tab[i]) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: setting altscan_tab[%d] = 0\n", i);
//  T() {}
            altscan_tab[i] = 0;
         }
   }
//  T(constrparms) {constrparms<=constrparms#init}
   if (!mpeg1&&constrparms) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  T(constrparms) {constrparms==0}
      constrparms = 0;
   }
//  T(prog_frame) {prog_frame#init<=prog_frame}
   if (prog_seq&&!prog_frame) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: setting progressive_frame = 1\n");
//  T(prog_frame) {prog_frame==1}
      prog_frame = 1;
   }
//  T(fieldpic) {fieldpic<=fieldpic#init}
   if (prog_frame&&fieldpic) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: setting field_pictures = 0\n");
//  T(fieldpic) {fieldpic==0}
      fieldpic = 0;
   }
//  T(repeatfirst) {repeatfirst<=repeatfirst#init}
   if (!prog_frame&&repeatfirst) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: setting repeat_first_field = 0\n");
//  T(repeatfirst) {repeatfirst==0}
      repeatfirst = 0;
   }
//  T(i) {}
   if (prog_frame)
//  T(i) {0<=i, i<=2}
      for(i = 0; i <= 2; i += 1)
//  T() {}
         if (!frame_pred_dct_tab[i]) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: setting frame_pred_frame_dct[%d] = 1\n", i);
//  T() {}
            frame_pred_dct_tab[i] = 1;
         }
//  T(topfirst) {topfirst<=topfirst#init}
   if (prog_seq&&!repeatfirst&&topfirst) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: setting top_field_first = 0\n");
//  T(topfirst) {topfirst==0}
      topfirst = 0;
   }
//  T(i) {i+1<=M, 0<=i}
   /* search windows */
   for(i = 0; i <= M-1; i += 1) {
//  T() {}
      if (motion_data[i].sxf>(4<<motion_data[i].forw_hor_f_code)-1) {
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: reducing forward horizontal search width to %d\n", (4<<motion_data[i].forw_hor_f_code)-1);
//  T() {}
         motion_data[i].sxf = (4<<motion_data[i].forw_hor_f_code)-1;
      }
//  T() {}
      if (motion_data[i].syf>(4<<motion_data[i].forw_vert_f_code)-1) {
//  T() {}
         if (!quiet)
//  T() {}
            fprintf(stderr, "Warning: reducing forward vertical search width to %d\n", (4<<motion_data[i].forw_vert_f_code)-1);
//  T() {}
         motion_data[i].syf = (4<<motion_data[i].forw_vert_f_code)-1;
      }
//  T() {}
      if (i!=0) {
//  T() {}
         if (motion_data[i].sxb>(4<<motion_data[i].back_hor_f_code)-1) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: reducing backward horizontal search width to %d\n", (4<<motion_data[i].back_hor_f_code)-1);
//  T() {}
            motion_data[i].sxb = (4<<motion_data[i].back_hor_f_code)-1;
         }
//  T() {}
         if (motion_data[i].syb>(4<<motion_data[i].back_vert_f_code)-1) {
//  T() {}
            if (!quiet)
//  T() {}
               fprintf(stderr, "Warning: reducing backward vertical search width to %d\n", (4<<motion_data[i].back_vert_f_code)-1);
//  T() {}
            motion_data[i].syb = (4<<motion_data[i].back_vert_f_code)-1;
         }
      }
   }
}
//  T(load_iquant,load_niquant) {0<=load_iquant, load_iquant<=1,
//    0<=load_niquant, load_niquant<=1}
static void readquantmat()
{
//  T(i,v) {}
   int i, v;
//  T() {}
   FILE *fd;
//  T(i,load_iquant,v) {i==64, 0<=load_iquant, load_iquant<=1}
   if (iqname[0]=='-') {
//  T(load_iquant) {load_iquant==0}
      /* use default intra matrix */
      load_iquant = 0;
//  T(i) {0<=i, i<=63}
      for(i = 0; i <= 63; i += 1)
//  T() {}
         intra_q[i] = default_intra_quantizer_matrix[i];
   }
   else {
//  T(load_iquant) {load_iquant==1}
      /* read customized intra matrix */
      load_iquant = 1;
//  T() {}
      if (!(fd = fopen(iqname, "r"))) {
//  T() {}
         sprintf(errortext, "Couldn't open quant matrix file %s", iqname);
//  T() {0==-1}
         error(errortext);
      }
//  T(i,v) {0<=i, i<=63}
      for(i = 0; i <= 63; i += 1) {
//  T(v) {}
         fscanf(fd, "%d", &v);
//  T() {1<=v, v<=255}
         if (v<1||v>255)
//  T() {0==-1}
            error("invalid value in quant matrix");
//  T() {}
         intra_q[i] = v;
      }
//  T() {}
      fclose(fd);
   }
//  T(i,load_niquant,v) {i==64, 0<=load_niquant, load_niquant<=1}
   if (niqname[0]=='-') {
//  T(load_niquant) {load_niquant==0}
      /* use default non-intra matrix */
      load_niquant = 0;
//  T(i) {0<=i, i<=63}
      for(i = 0; i <= 63; i += 1)
//  T() {}
         inter_q[i] = 16;
   }
   else {
//  T(load_niquant) {load_niquant==1}
      /* read customized non-intra matrix */
      load_niquant = 1;
//  T() {}
      if (!(fd = fopen(niqname, "r"))) {
//  T() {}
         sprintf(errortext, "Couldn't open quant matrix file %s", niqname);
//  T() {0==-1}
         error(errortext);
      }
//  T(i,v) {0<=i, i<=63}
      for(i = 0; i <= 63; i += 1) {
//  T(v) {}
         fscanf(fd, "%d", &v);
//  T() {1<=v, v<=255}
         if (v<1||v>255)
//  T() {0==-1}
            error("invalid value in quant matrix");
//  T() {}
         inter_q[i] = v;
      }
//  T() {}
      fclose(fd);
   }
}
//  T(pbm_getc) {}
char pbm_getc(FILE *file)
{
//  T(ch) {}
   char ch;
//  T(ch) {}
   ch = _IO_getc(file);
//  T(ch) {ch#init<=ch, ch<=ch#init+79}
   if (ch=='#')
//  T(ch) {}
      do {
//  T(ch) {}
         ch = _IO_getc(file);
      }
      while (ch!='\n'&&ch!='\r');
//  T(pbm_getc) {ch==pbm_getc}
   return ch;
}
//  T(pbm_getint) {}
int pbm_getint(FILE *file)
{
//  T(ch) {}
   char ch;
//  T(i) {}
   int i;
//  T(ch) {}
   do {
//  T(ch) {}
      ch = pbm_getc(file);
   }
   while (ch==' '||ch=='\t'||ch=='\n'||ch=='\r');
//  T(i) {i==0}
   i = 0;
//  T(ch,i) {}
   do {
//  T(i) {ch+10i#init==i+48}
      i = i*10+ch-'0';
//  T(ch) {}
      ch = pbm_getc(file);
   }
   while (ch>='0'&&ch<='9');
//  T(pbm_getint) {i==pbm_getint}
   return i;
}
//  T() {}
void predict(unsigned char *reff[], unsigned char *refb[], unsigned char *cur[3], int secondfield, struct mbinfo *mbi)
{
//  T(i,j,k) {}
   int i, j, k;
//  T(k) {k==0}
   k = 0;
//  T(i,j,k) {j+1<=height2, 0<=j, k#init<=k}
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16)
//  T(i,k) {i+16k#init==16k, i+1<=width, k#init<=k}
      for(i = 0; i <= width-1; i += 16) {
//  T() {}
         predict_mb(reff, refb, cur, width, i, j, pict_type, pict_struct, mbi[k].mb_type, mbi[k].motion_type, secondfield, mbi[k].MV, mbi[k].mv_field_sel, mbi[k].dmvector);
//  T(k) {k==k#init+1}
         k++;
      }
}
//  T() {}
static void calc_DMV(int DMV[][2], int *dmvector, int mvx, int mvy)
{
//  T() {}
   if (pict_struct==3)
//  T() {}
      if (topfirst) {
//  T() {}
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  T() {}
         DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1]-1;
//  T() {}
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
//  T() {}
         DMV[1][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
      else {
//  T() {}
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
//  T() {}
         DMV[0][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]-1;
//  T() {}
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  T() {}
         DMV[1][1] = (mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
   else {
//  T() {}
      /* vector for prediction from field of opposite 'parity' */
      DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  T() {}
      DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1];
//  T() {}
      /* correct for vertical field shift */
      if (pict_struct==1)
//  T() {}
         DMV[0][1]--;
      else
//  T() {}
         DMV[0][1]++;
   }
}
//  T() {}
static void clearblock(unsigned char *cur[], int i0, int j0)
{
//  T(h,i,j,w) {}
   int i, j, w, h;
//  T() {}
   unsigned char *p;
//  T() {}
   p = cur[0]+(pict_struct==2?width:0)+i0+width2*j0;
//  T(i,j) {0<=j, j<=15}
   for(j = 0; j <= 15; j += 1) {
//  T(i) {0<=i, i<=15}
      for(i = 0; i <= 15; i += 1)
//  T() {}
         p[i] = 128;
//  T() {}
      p += width2;
   }
//  T(h,w) {h==16, w==16}
   w = h = 16;
//  T(i0,w) {}
   if (chroma_format!=3) {
//  T(i0) {2i0<=i0#init, i0#init<=2i0+1}
      i0 >>= 1;
//  T(w) {2w<=w#init, w#init<=2w+1}
      w >>= 1;
   }
//  T(h,j0) {}
   if (chroma_format==1) {
//  T(j0) {2j0<=j0#init, j0#init<=2j0+1}
      j0 >>= 1;
//  T(h) {2h<=h#init, h#init<=2h+1}
      h >>= 1;
   }
//  T() {}
   p = cur[1]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
//  T(i,j) {j+1<=h, 0<=j}
   for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
      for(i = 0; i <= w-1; i += 1)
//  T() {}
         p[i] = 128;
//  T() {}
      p += chrom_width2;
   }
//  T() {}
   p = cur[2]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
//  T(i,j) {j+1<=h, 0<=j}
   for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
      for(i = 0; i <= w-1; i += 1)
//  T() {}
         p[i] = 128;
//  T() {}
      p += chrom_width2;
   }
}
//  T() {}
static void pred(unsigned char *src[], int sfield, unsigned char *dst[], int dfield, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
//  T(cc) {}
   int cc;
//  T(cc,dx,dy,h,lx,w,x,y) {0<=cc, cc<=2}
   for(cc = 0; cc <= 2; cc += 1) {
//  T(dx,dy,h,lx,w,x,y) {}
      if (cc==1) {
//  T(dy,h,y) {}
         /* scale for color components */
         if (chroma_format==1) {
//  T(h) {2h<=h#init, h#init<=2h+1}
            /* vertical */
            h >>= 1;
//  T(y) {2y<=y#init, y#init<=2y+1}
            y >>= 1;
//  T(dy) {2dy<=dy#init, dy#init<=2dy+1}
            dy /= 2;
         }
//  T(dx,lx,w,x) {}
         if (chroma_format!=3) {
//  T(w) {2w<=w#init, w#init<=2w+1}
            /* horizontal */
            w >>= 1;
//  T(x) {2x<=x#init, x#init<=2x+1}
            x >>= 1;
//  T(dx) {2dx<=dx#init, dx#init<=2dx+1}
            dx /= 2;
//  T(lx) {2lx<=lx#init, lx#init<=2lx+1}
            lx >>= 1;
         }
      }
//  T() {}
      pred_comp(src[cc]+(sfield?lx>>1:0), dst[cc]+(dfield?lx>>1:0), lx, w, h, x, y, dx, dy, addflag);
   }
}
//  T() {}
static void pred_comp(unsigned char *src, unsigned char *dst, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
//  T(xh,xint,yh,yint) {}
   int xint, xh, yint, yh;
//  T(i,j) {}
   int i, j;
//  T() {}
   unsigned char *s, *d;
//  T(xint) {2xint<=dx, dx<=2xint+1}
   /* half pel scaling */
   xint = dx>>1;
//  T(xh) {}
   /* integer part */
   xh = dx&1;
//  T(yint) {2yint<=dy, dy<=2yint+1}
   /* half pel flag */
   yint = dy>>1;
//  T(yh) {}
   yh = dy&1;
//  T() {}
   /* origins */
   s = src+lx*(y+yint)+(x+xint);
//  T() {}
   /* motion vector */
   d = dst+lx*y+x;
//  T(i,j) {h<=j, 0<=j}
   if (!xh&&!yh)
//  T(i,j) {h<=j, 0<=j}
      if (addflag)
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = (unsigned int) (d[i]+s[i]+1)>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
      else
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = s[i];
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
   else if (!xh&&yh)
//  T(i,j) {h<=j, 0<=j}
      if (addflag)
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+lx]+1)>>1)+1>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
      else
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = (unsigned int) (s[i]+s[i+lx]+1)>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
   else if (xh&&!yh)
//  T(i,j) {h<=j, 0<=j}
      if (addflag)
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+1)>>1)+1>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
      else
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = (unsigned int) (s[i]+s[i+1]+1)>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
   else
//  T(i,j) {h<=j, 0<=j}
      /* if (xh && yh) */
      if (addflag)
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2)+1>>1;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
      else
//  T(i,j) {j+1<=h, 0<=j}
         for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
            for(i = 0; i <= w-1; i += 1)
//  T() {}
               d[i] = (unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2;
//  T() {}
            s += lx;
//  T() {}
            d += lx;
         }
}
//  T() {}
static void predict_mb(unsigned char *oldref[], unsigned char *newref[], unsigned char *cur[], int lx, int bx, int by, int pict_type, int pict_struct, int mb_type, int motion_type, int secondfield, int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2])
{
//  T(addflag,currentfield) {}
   int addflag, currentfield;
//  T() {}
   unsigned char **predframe;
//  T() {}
   int DMV[2][2];
//  T() {}
   if (mb_type&1) {
//  T() {}
      clearblock(cur, bx, by);
//  T() {}
      return;
   }
//  T(addflag) {addflag==0}
   addflag = 0;
//  T(addflag,currentfield) {}
   if (mb_type&8||pict_type==2) {
//  T(currentfield) {}
      /* forward prediction, including zero MV in P pictures */
      if (pict_struct==3)
//  T() {}
         if (motion_type==2||!(mb_type&8))
//  T() {}
            /* frame-based prediction in frame picture */
            pred(oldref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==1) {
//  T() {}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][0][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(oldref, mv_field_sel[0][0], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  T() {}
            /* bottom field prediction */
            pred(oldref, mv_field_sel[1][0], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][0][0], PMV[1][0][1]>>1, 0);
         }
         else if (motion_type==3) {
//  T() {}
            /* dual prime prediction */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]>>1);
//  T() {}
            /* predict top field from top field */
            pred(oldref, 0, cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  T() {}
            /* predict bottom field from bottom field */
            pred(oldref, 1, cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  T() {}
            /* predict and add to top field from bottom field */
            pred(oldref, 1, cur, 0, lx<<1, 16, 8, bx, by>>1, DMV[0][0], DMV[0][1], 1);
//  T() {}
            /* predict and add to bottom field from top field */
            pred(oldref, 0, cur, 1, lx<<1, 16, 8, bx, by>>1, DMV[1][0], DMV[1][1], 1);
         }
         else
//  T() {}
            /* invalid motion_type in frame picture */
            /* first prediction is stored, second is added and averaged */
            /* frame picture */
            if (!quiet)
//  T() {}
               fprintf(stderr, "invalid motion_type\n");
      else {
//  T(currentfield) {}
         /* field picture */
         currentfield = pict_struct==2;
//  T() {}
         /* determine which frame to use for prediction */
         if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[0][0])
//  T() {}
            predframe = newref;
         else
//  T() {}
            predframe = oldref;
//  T() {}
         if (motion_type==1||!(mb_type&8))
//  T() {}
            /* field-based prediction in field picture */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==2) {
//  T() {}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  T() {}
            /* previous frame */
            /* determine which frame to use for lower half prediction */
            if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[1][0])
//  T() {}
               predframe = newref;
            else
//  T() {}
               predframe = oldref;
//  T() {}
            /* previous frame */
            /* lower half */
            pred(predframe, mv_field_sel[1][0], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][0][0], PMV[1][0][1], 0);
         }
         else if (motion_type==3) {
//  T() {}
            /* dual prime prediction */
            /* determine which frame to use for prediction */
            if (secondfield)
//  T() {}
               predframe = newref;
            else
//  T() {}
               predframe = oldref;
//  T() {}
            /* previous frame */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]);
//  T() {}
            /* predict from field of same parity */
            pred(oldref, currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  T() {}
            /* predict from field of opposite parity */
            pred(predframe, !currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, DMV[0][0], DMV[0][1], 1);
         }
         else
//  T() {}
            /* invalid motion_type in field picture */
            if (!quiet)
//  T() {}
               fprintf(stderr, "invalid motion_type\n");
      }
//  T(addflag) {addflag==1}
      addflag = 1;
   }
//  T(currentfield) {}
   if (mb_type&4)
//  T(currentfield) {}
      /* backward prediction */
      if (pict_struct==3)
//  T() {}
         /* frame picture */
         if (motion_type==2)
//  T() {}
            /* frame-based prediction in frame picture */
            pred(newref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else {
//  T() {}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][1][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(newref, mv_field_sel[0][1], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][1][0], PMV[0][1][1]>>1, addflag);
//  T() {}
            /* bottom field prediction */
            pred(newref, mv_field_sel[1][1], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][1][0], PMV[1][1][1]>>1, addflag);
         }
      else {
//  T(currentfield) {}
         /* field picture */
         currentfield = pict_struct==2;
//  T() {}
         if (motion_type==1)
//  T() {}
            /* field-based prediction in field picture */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else if (motion_type==2) {
//  T() {}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
//  T() {}
            /* lower half */
            pred(newref, mv_field_sel[1][1], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][1][0], PMV[1][1][1], addflag);
         }
         else
//  T() {}
            /* invalid motion_type in field picture */
            if (!quiet)
//  T() {}
               fprintf(stderr, "invalid motion_type\n");
      }
}
//  T() {4<=level, level<=10, 1<=profile, profile<=5}
void profile_and_level_checks()
{
//  T(i) {}
   int i;
//  T() {}
   struct level_limits *maxval;
//  T() {0<=profile, profile<=15}
   if (profile<0||profile>15)
//  T() {0==-1}
      error("profile must be between 0 and 15");
//  T() {0<=level, level<=15}
   if (level<0||level>15)
//  T() {0==-1}
      error("level must be between 0 and 15");
//  T() {}
   if (profile>=8) {
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "Warning: profile uses a reserved value, conformance checks skipped\n");
//  T() {}
      return;
   }
//  T() {1<=profile, profile<=5}
   if (profile<1||profile>5)
//  T() {0==-1}
      error("undefined Profile");
//  T() {}
   if (profile==3||profile==2)
//  T() {0==-1}
      error("This encoder currently generates no scalable bitstreams");
//  T() {4<=level, level<=10}
   if (level<4||level>10||level&1)
//  T() {0==-1}
      error("undefined Level");
//  T() {}
   maxval = &maxval_tab[level-4>>1];
//  T() {}
   /* check profile@level combination */
   if (!profile_level_defined[profile-1][level-4>>1])
//  T() {0==-1}
      error("undefined profile@level combination");
//  T() {}
   /* profile (syntax) constraints */
   if (profile==5&&M!=1)
//  T() {0==-1}
      error("Simple Profile does not allow B pictures");
//  T() {}
   if (profile!=1&&chroma_format!=1)
//  T() {0==-1}
      error("chroma format must be 4:2:0 in specified Profile");
//  T() {}
   if (profile==1&&chroma_format==3)
//  T() {0==-1}
      error("chroma format must be 4:2:0 or 4:2:2 in High Profile");
//  T() {}
   if (profile>=4) {
//  T() {}
      if (frame_rate_code<=2&&repeatfirst)
//  T() {0==-1}
         error("repeat_first_first must be zero");
//  T() {}
      if (frame_rate_code<=6&&prog_seq&&repeatfirst)
//  T() {0==-1}
         error("repeat_first_first must be zero");
   }
//  T() {}
   if (profile!=1&&dc_prec==3)
//  T() {0==-1}
      error("11 bit DC precision only allowed in High Profile");
//  T() {}
   /* level (parameter value) constraints */
   /* Table 8-8 */
   if (frame_rate_code>5&&level>=8)
//  T() {0==-1}
      error("Picture rate greater than permitted in specified Level");
//  T(i) {i+1<=M, 0<=i}
   for(i = 0; i <= M-1; i += 1) {
//  T() {}
      if (motion_data[i].forw_hor_f_code>maxval->hor_f_code)
//  T() {0==-1}
         error("forward horizontal f_code greater than permitted in specified Level");
//  T() {}
      if (motion_data[i].forw_vert_f_code>maxval->vert_f_code)
//  T() {0==-1}
         error("forward vertical f_code greater than permitted in specified Level");
//  T() {}
      if (i!=0) {
//  T() {}
         if (motion_data[i].back_hor_f_code>maxval->hor_f_code)
//  T() {0==-1}
            error("backward horizontal f_code greater than permitted in specified Level");
//  T() {}
         if (motion_data[i].back_vert_f_code>maxval->vert_f_code)
//  T() {0==-1}
            error("backward vertical f_code greater than permitted in specified Level");
      }
   }
//  T() {}
   /* Table 8-10 */
   if (horizontal_size>maxval->hor_size)
//  T() {0==-1}
      error("Horizontal size is greater than permitted in specified Level");
//  T() {}
   if (vertical_size>maxval->vert_size)
//  T() {0==-1}
      error("Horizontal size is greater than permitted in specified Level");
//  T() {}
   /* Table 8-11 */
   if (horizontal_size*vertical_size*frame_rate>maxval->sample_rate)
//  T() {0==-1}
      error("Sample rate is greater than permitted in specified Level");
//  T() {}
   /* Table 8-12 */
   if (bit_rate>1.0e6*maxval->bit_rate)
//  T() {0==-1}
      error("Bit rate is greater than permitted in specified Level");
//  T() {}
   /* Table 8-13 */
   if (vbv_buffer_size>maxval->vbv_buffer_size)
//  T() {0==-1}
      error("vbv_buffer_size exceeds High Level limit");
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
void putAC(int run, int signed_level, int vlcformat)
{
//  T(0`level,len) {}
   int level, len;
//  T() {}
   VLCtable *ptab;
//  T(0`level) {0<=0`level+signed_level, signed_level<=0`level}
   level = signed_level<0?-signed_level:signed_level;
//  T() {0<=run, run<=63}
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>(int) sqrt(2048*2048)-1||mpeg1&&level>255) {
//  T() {}
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
//  T() {0==-1}
      error(errortext);
   }
//  T(len) {len==0}
   len = 0;
//  T(len) {}
   if (run<2&&level<41) {
//  T() {}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  T() {}
         ptab = &dct_code_tab1a[run][level-1];
      else
//  T() {}
         ptab = &dct_code_tab1[run][level-1];
//  T(len) {}
      len = ptab->len;
   }
   else if (run<32&&level<6) {
//  T() {}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  T() {}
         ptab = &dct_code_tab2a[run-2][level-1];
      else
//  T() {}
         ptab = &dct_code_tab2[run-2][level-1];
//  T(len) {}
      len = ptab->len;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len+8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt
//    +putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (len!=0) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len+8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(ptab->code, len);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(signed_level<0, 1);
   }
   else {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+6<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+6<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* Escape */
      putbits(run, 6);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* 6 bit code for run */
      if (mpeg1) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
            putbits(0, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         if (signed_level<-127)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
            putbits(128, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(signed_level, 8);
      }
      else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
void putACfirst(int run, int val)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
   if (run==0&&(val==1||val==-1))
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* these are treated differently */
      putbits(2|val<0, 2);
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
      putAC(run, val, 0);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=val+2047, val<=2047}
void putDCchrom(int val)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=val+2047, val<=2047}
   putDC(DCchromtab, val);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=val+2047, val<=2047}
void putDClum(int val)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=val+2047, val<=2047}
   putDC(DClumtab, val);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {addrinc+24putbits!:bytecnt#init+3putbits!:outcnt<=24
//    putbits!:bytecnt+3putbits!:outcnt#init+33,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
void putaddrinc(int addrinc)
{
//  T(addrinc,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {34<=addrinc, addrinc<=addrinc#init,
//    addrinc#init+24putbits!:bytecnt#init+3putbits!:outcnt<=addrinc+
//    24putbits!:bytecnt+3putbits!:outcnt#init, 34<=addrinc#init,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   while (addrinc>33) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+11<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(0x08, 11);
//  T(addrinc) {addrinc==addrinc#init-33}
      /* macroblock_escape */
      addrinc -= 33;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(addrinctab[addrinc-1].code, addrinctab[addrinc-1].len);
}
//  T(bytecnt,outbfr,outcnt)
//    {n+outcnt+8putbits!:bytecnt#init<=8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt}
void putbits(int val, int n)
{
//  T(i) {}
   int i;
//  T(mask) {}
   unsigned int mask;
//  T(mask) {0<=mask}
   mask = 1<<n-1;
//  T(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
   /* selects first (leftmost) bit */
   for(i = 0; i <= n-1; i += 1) {
//  T(outbfr) {outbfr==2putbits!:outbfr#init}
      outbfr <<= 1;
//  T(outbfr) {}
      if (val&mask)
//  T(outbfr) {}
         outbfr |= 1;
//  T(mask) {2mask<=mask#init, mask#init<=2mask+1}
      mask >>= 1;
//  T(outcnt) {outcnt==putbits!:outcnt#init-1}
      /* select next bit */
      outcnt--;
//  T(bytecnt,outcnt)
//    {8bytecnt+putbits!:outcnt#init==outcnt+8putbits!:bytecnt#init,
//    putbits!:bytecnt#init<=bytecnt,
//    bytecnt<=putbits!:bytecnt#init+1}
      if (outcnt==0) {
//  T() {}
         _IO_putc(outbfr, outfile);
//  T(outcnt) {outcnt==8}
         outcnt = 8;
//  T(bytecnt) {bytecnt==putbits!:bytecnt#init+1}
         bytecnt++;
      }
   }
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
void putcbp(int cbp)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(cbptable[cbp].code, cbptable[cbp].len);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putdmv(int dmv)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (dmv==0)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(0, 1);
   else if (dmv>0)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(2, 2);
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(3, 2);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+51<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+112<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+104<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+78<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+59<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putgophdr(int frame, int closed_gop)
{
//  T(tc) {}
   int tc;
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B8L, 32);
//  T(tc) {}
   /* group_start_code */
   tc = frametotc(tc0+frame);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+25<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(tc, 25);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* time_code */
   putbits(closed_gop, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* closed_gop */
   putbits(0, 1);
}
//  T(puthdr!frametotc) {}
static int frametotc(int frame)
{
//  T(fps,hour,minute,pict,sec,tc) {}
   int fps, pict, sec, minute, hour, tc;
//  T(fps) {}
   fps = (int) (frame_rate+0.5);
//  T(pict) {}
   pict = frame%fps;
//  T(frame) {}
   frame = (frame-pict)/fps;
//  T(sec) {0<=sec+59, sec<=59}
   sec = frame%60;
//  T(frame) {60frame+sec<=frame#init, frame#init<=60frame+sec+59}
   frame = (frame-sec)/60;
//  T(minute) {0<=minute+59, minute<=59}
   minute = frame%60;
//  T(frame) {60frame+minute<=frame#init,
//    frame#init<=60frame+minute+59}
   frame = (frame-minute)/60;
//  T(hour) {0<=hour+23, hour<=23}
   hour = frame%24;
//  T(tc) {}
   tc = hour<<19|minute<<13|1<<12|sec<<6|pict;
//  T(puthdr!frametotc) {puthdr!frametotc==tc}
   return tc;
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+8<=53putbits!:bytecnt+7
//    putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+6<=52putbits!:bytecnt+7
//    putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+6<=38putbits!:bytecnt+5
//    putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+4<=37putbits!:bytecnt+5
//    putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+6<=31putbits!:bytecnt+4
//    putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+2<=29putbits!:bytecnt+4
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+4<=23putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+2<=22putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putintrablk(short *blk, int cc)
{
//  T(dct_diff,n,run,signed_level) {}
   int n, dct_diff, run, signed_level;
//  T(dct_diff) {}
   /* DC coefficient (7.2.1) */
   dct_diff = blk[0]-dc_dct_pred[cc];
//  T() {}
   /* difference to previous block */
   dc_dct_pred[cc] = blk[0];
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (cc==0)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putDClum(dct_diff);
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putDCchrom(dct_diff);
//  T(run) {run==0}
   /* AC coefficients (7.2.2) */
   run = 0;
//  T(n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {1<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+run#init<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run+1,
//    run#init+63<=63n+run, run+1<=n+run#init,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   for(n = 1; n <= 63; n += 1) {
//  T(signed_level) {}
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+run#init+1<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run#init<=run+63,
//    run<=run#init+1}
      if (signed_level!=0) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         putAC(run, signed_level, intravlc);
//  T(run) {run==0}
         run = 0;
      }
      else
//  T(run) {run==run#init+1}
         run++;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* End of Block -- normative block punctuation */
   if (intravlc)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(6, 4);
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(2, 2);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
void putmbtype(int pict_type, int mb_type)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(mbtypetab[pict_type-1][mb_type].code, mbtypetab[pict_type-1][mb_type].len);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
void putmotioncode(int motion_code)
{
//  T(abscode) {}
   int abscode;
//  T(abscode) {0<=abscode+motion_code, motion_code<=abscode}
   abscode = motion_code>=0?motion_code:-motion_code;
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* abs(motion_code) */
   putbits(motionvectab[abscode].code, motionvectab[abscode].len);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (motion_code!=0)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(motion_code<0, 1);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
void putmv(int dmv, int f_code)
{
//  T(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin) {}
   int r_size, f, vmin, vmax, dv, temp, motion_code, motion_residual;
//  T(r_size) {f_code==r_size+1}
   r_size = f_code-1;
//  T(f) {0<=f}
   /* number of fixed length code ('residual') bits */
   f = 1<<r_size;
//  T(vmin) {16f+vmin==0}
   vmin = -16*f;
//  T(vmax) {16f==vmax+1}
   /* lower range limit */
   vmax = 16*f-1;
//  T(dv) {dv==32f}
   /* upper range limit */
   dv = 32*f;
//  T(dmv) {}
   /* fold vector difference into [vmin...vmax] */
   if (dmv>vmax)
//  T(dmv) {dmv+dv==dmv#init}
      dmv -= dv;
   else if (dmv<vmin)
//  T(dmv) {dmv#init+dv==dmv}
      dmv += dv;
//  T() {}
   /* check value */
   if (dmv<vmin||dmv>vmax)
//  T() {}
      if (!quiet)
//  T() {}
         fprintf(stderr, "invalid motion vector\n");
//  T(temp) {f<=dmv+temp+1, dmv+f<=temp+1}
   /* split dmv into motion_code and motion_residual */
   temp = (dmv<0?-dmv:dmv)+f-1;
//  T(motion_code) {}
   motion_code = temp>>r_size;
//  T(motion_code) {}
   if (dmv<0)
//  T(motion_code) {motion_code+motion_code#init==0}
      motion_code = -motion_code;
//  T(motion_residual) {}
   motion_residual = temp&f-1;
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putmotioncode(motion_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* variable length code */
   if (r_size!=0&&motion_code!=0)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+r_size<=8putbits!:bytecnt
//    +putbits!:outcnt#init}
      putbits(motion_residual, r_size);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+4<=23putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+2<=22putbits!:bytecnt+3
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putnonintrablk(short *blk)
{
//  T(first,n,run,signed_level) {}
   int n, run, signed_level, first;
//  T(run) {run==0}
   run = 0;
//  T(first) {first==1}
   first = 1;
//  T(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+run#init<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run#init<=63n+run,
//    run<=n+run#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   for(n = 0; n <= 63; n += 1) {
//  T(signed_level) {}
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//  T(first,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+run#init+1<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run#init<=run+63,
//    run<=run#init+1}
      if (signed_level!=0) {
//  T(first,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {first==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         if (first) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
//  T(first) {first==0}
            first = 0;
         }
         else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
            putAC(run, signed_level, 0);
//  T(run) {run==0}
         run = 0;
      }
      else
//  T(run) {run==run#init+1}
         run++;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
static void putmvs(int MV[2][2][2], int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2], int s, int motion_type, int hor_f_code, int vert_f_code)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (pict_struct==3)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      if (motion_type==2) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* frame prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  T() {}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==1) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(mv_field_sel[1][s], 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv((MV[1][s][1]>>1)-(PMV[1][s][1]>>1), vert_f_code);
//  T() {}
         PMV[0][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = MV[0][s][1];
//  T() {}
         PMV[1][s][0] = MV[1][s][0];
//  T() {}
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putdmv(dmvector[0]);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putdmv(dmvector[1]);
//  T() {}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
   else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* field picture */
      if (motion_type==1) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  T() {}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==2) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* 16x8 prediction */
         putbits(mv_field_sel[0][s], 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(mv_field_sel[1][s], 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[1][s][1]-PMV[1][s][1], vert_f_code);
//  T() {}
         PMV[0][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = MV[0][s][1];
//  T() {}
         PMV[1][s][0] = MV[1][s][0];
//  T() {}
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putdmv(dmvector[0]);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putdmv(dmvector[1]);
//  T() {}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  T() {}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
}
//  T() {}
void putpict(unsigned char *frame)
{
//  T(cc,comp,i,j,k) {}
   int i, j, k, comp, cc;
//  T(mb_type) {}
   int mb_type;
//  T() {}
   int PMV[2][2][2];
//  T(prev_mquant) {}
   int prev_mquant;
//  T(MBAinc,cbp) {}
   int cbp, MBAinc;
//  T(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   rc_init_pict(frame);
//  T() {}
   /* set up rate control */
   /* picture header and picture coding extension */
   putpicthdr();
//  T() {}
   if (!mpeg1)
//  T() {}
      putpictcodext();
//  T(prev_mquant) {}
   prev_mquant = rc_start_mb();
//  T(k) {k==0}
   /* initialize quantization parameter */
   k = 0;
//  T(MBAinc,cbp,cc,comp,i,j,k,mb_type,prev_mquant) {0<=j,
//    j+1<=mb_height2, k#init<=k}
   for(j = 0; j <= mb_height2-1; j += 1)
//  T(MBAinc,cbp,cc,comp,i,k,mb_type,prev_mquant) {i+k#init==k, 0<=i,
//    i+1<=mb_width}
      /* macroblock row loop */
      for(i = 0; i <= mb_width-1; i += 1) {
//  T(MBAinc,cc) {}
         /* macroblock loop */
         if (i==0) {
//  T() {}
            /* slice header (6.2.4) */
            alignbits();
//  T() {}
            if (mpeg1||vertical_size<=2800)
//  T() {}
               putbits(0x101L+j, 32);
            else {
//  T() {}
               putbits(0x101L+(j&127), 32);
//  T() {}
               /* slice_start_code */
               putbits(j>>7, 3);
            }
//  T() {}
            /* quantiser_scale_code */
            putbits(q_scale_type?map_non_linear_mquant[prev_mquant]:prev_mquant>>1, 5);
//  T() {}
            putbits(0, 1);
//  T(cc) {0<=cc, cc<=2}
            /* extra_bit_slice */
            /* reset predictors */
            for(cc = 0; cc <= 2; cc += 1)
//  T() {}
               dc_dct_pred[cc] = 0;
//  T() {}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  T(MBAinc) {MBAinc==i+1}
            MBAinc = i+1;
         }
//  T(mb_type) {}
         mb_type = mbinfo[k].mb_type;
//  T() {}
         /* determine mquant (rate control) */
         mbinfo[k].mquant = rc_calc_mquant(k);
//  T(cbp,comp,mb_type) {block_count<=comp, 0<=comp}
         /* quantize macroblock */
         if (mb_type&1) {
//  T(comp) {comp+1<=block_count, 0<=comp}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  T() {}
               quant_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], dc_prec, intra_q, mbinfo[k].mquant);
//  T(cbp) {0<=cbp+1}
            mbinfo[k].cbp = cbp = (1<<block_count)-1;
         }
         else {
//  T(cbp) {cbp==0}
            cbp = 0;
//  T(cbp,comp) {comp+1<=block_count, 0<=comp}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  T(cbp) {}
               cbp = cbp<<1|quant_non_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], inter_q, mbinfo[k].mquant);
//  T() {}
            mbinfo[k].cbp = cbp;
//  T(mb_type) {}
            if (cbp)
//  T(mb_type) {}
               mb_type |= 2;
         }
//  T(mb_type) {}
         /* output mquant if it has changed */
         if (cbp&&prev_mquant!=mbinfo[k].mquant)
//  T(mb_type) {}
            mb_type |= 16;
//  T() {}
/* check if macroblock can be skipped */
         if (i!=0&&i!=mb_width-1&&!cbp) goto l99999;
l99996:         ;
//  T() {}
         /* macroblock cannot be skipped */
         mbinfo[k].skipped = 0;
//  T(mb_type) {}
         /* there's no VLC for 'No MC, Not Coded':
                * we have to transmit (0,0) motion vectors
                */
         if (pict_type==2&&!cbp&&!(mb_type&8))
//  T(mb_type) {}
            mb_type |= 8;
//  T() {}
         putaddrinc(MBAinc);
//  T(MBAinc) {MBAinc==1}
         /* macroblock_address_increment */
         MBAinc = 1;
//  T() {}
         putmbtype(pict_type, mb_type);
//  T() {}
         /* macroblock type */
         if (mb_type&(8|4)&&!frame_pred_dct)
//  T() {}
            putbits(mbinfo[k].motion_type, 2);
//  T() {}
         if (pict_struct==3&&cbp&&!frame_pred_dct)
//  T() {}
            putbits(mbinfo[k].dct_type, 1);
//  T(prev_mquant) {}
         if (mb_type&16) {
//  T() {}
            putbits(q_scale_type?map_non_linear_mquant[mbinfo[k].mquant]:mbinfo[k].mquant>>1, 5);
//  T(prev_mquant) {}
            prev_mquant = mbinfo[k].mquant;
         }
//  T() {}
         if (mb_type&8)
//  T() {}
            /* forward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 0, mbinfo[k].motion_type, forw_hor_f_code, forw_vert_f_code);
//  T() {}
         if (mb_type&4)
//  T() {}
            /* backward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 1, mbinfo[k].motion_type, back_hor_f_code, back_vert_f_code);
//  T() {}
         if (mb_type&2) {
//  T() {}
            putcbp(cbp>>block_count-6&63);
//  T() {}
            if (chroma_format!=1)
//  T() {}
               putbits(cbp, block_count-6);
         }
//  T(cc,comp) {comp+1<=block_count, 0<=comp}
         for(comp = 0; comp <= block_count-1; comp += 1)
//  T(cc) {}
            if (cbp&1<<block_count-1-comp)
//  T(cc) {}
               /* block loop */
               if (mb_type&1) {
//  T(cc) {}
                  cc = comp<4?0:(comp&1)+1;
//  T() {}
                  putintrablk(blocks[k*block_count+comp], cc);
               }
               else
//  T() {}
                  putnonintrablk(blocks[k*block_count+comp]);
//  T(cc) {}
         /* reset predictors */
         if (!(mb_type&1))
//  T(cc) {0<=cc, cc<=2}
            for(cc = 0; cc <= 2; cc += 1)
//  T() {}
               dc_dct_pred[cc] = 0;
//  T() {}
         if (mb_type&1||pict_type==2&&!(mb_type&8)) {
//  T() {}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         }
//  T() {}
         mbinfo[k].mb_type = mb_type;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99999:         ;
//  T() {}
/* no DCT coefficients and neither first nor last macroblock of slice */
         if (pict_type==2&&!(mb_type&8)) goto l99998;
//  T() {}
         if (pict_type==3&&pict_struct==3&&mbinfo[k].motion_type==2&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1])&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1])) goto l99997;
//  T() {}
         if (pict_type==3&&pict_struct!=3&&mbinfo[k].motion_type==1&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1]&&((mbinfo[k].mv_field_sel)[0])[0]==(pict_struct==2))&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1]&&((mbinfo[k].mv_field_sel)[0])[1]==(pict_struct==2))) {
         }
         else {
            goto l99996;
         }
//  T() {}
         /* conditions for skipping in B field pictures:
                    * - must be field predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    * - relevant motion_vertical_field_selects have to be of same
                    *   parity as current field
                    */
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99997:         ;
//  T() {}
         /* conditions for skipping in B frame pictures:
                    * - must be frame predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    */
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
         goto _loop_end_2;
l99998:         ;
//  T(cc) {0<=cc, cc<=2}
         /* P picture, no motion vectors -> skip */
         /* reset predictors */
         for(cc = 0; cc <= 2; cc += 1)
//  T() {}
            dc_dct_pred[cc] = 0;
//  T() {}
         PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  T() {}
         PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  T() {}
         mbinfo[k].mb_type = mb_type;
//  T() {}
         mbinfo[k].skipped = 1;
//  T(MBAinc) {MBAinc==MBAinc#init+1}
         MBAinc++;
//  T(k) {k==k#init+1}
         k++;
//  T() {}
_loop_end_2:         ;
      }
//  T() {}
   rc_update_pict();
//  T() {}
   vbv_end_of_picture();
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+58<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+584<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+568<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+584<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+568<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+352<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+320<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+352<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+344<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+328<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+320<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+154<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+146<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+224<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+208<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+224<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+208<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+172<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+164<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+92<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+124<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+154<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+146<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+132<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+124<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+116<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+66<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+58<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+92<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+66<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+58<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+66<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putpictcodext(void)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(8, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(forw_hor_f_code, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* forward_horizontal_f_code */
   putbits(forw_vert_f_code, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* forward_vertical_f_code */
   putbits(back_hor_f_code, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* backward_horizontal_f_code */
   putbits(back_vert_f_code, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* backward_vertical_f_code */
   putbits(dc_prec, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_dc_precision */
   putbits(pict_struct, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* picture_structure */
   putbits(pict_struct==3?topfirst:0, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* top_field_first */
   putbits(frame_pred_dct, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_pred_frame_dct */
   putbits(0, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* concealment_motion_vectors  -- currently not implemented */
   putbits(q_scale_type, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* q_scale_type */
   putbits(intravlc, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_vlc_format */
   putbits(altscan, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* alternate_scan */
   putbits(repeatfirst, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* repeat_first_field */
   putbits(prog_frame, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* chroma_420_type */
   putbits(prog_frame, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* progressive_frame */
   putbits(0, 1);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+136<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+128<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+84<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+136<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+84<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
void putpicthdr(void)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x100L, 32);
//  T(vbv_delay) {vbv_delay<=65535}
   /* picture_start_code */
   calc_vbv_delay();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+10<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(temp_ref, 10);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* temporal_reference */
   putbits(pict_type, 3);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+16<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* picture_coding_type */
   putbits(vbv_delay, 16);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vbv_delay */
   if (pict_type==2||pict_type==3) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(0, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* full_pel_forward_vector */
      if (mpeg1)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(forw_hor_f_code, 3);
      else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(7, 3);
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (pict_type==3) {
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(0, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* full_pel_backward_vector */
      if (mpeg1)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(back_hor_f_code, 3);
      else
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(7, 3);
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0, 1);
}
//  T() {}
void putseq(void)
{
   /* this routine assumes (N % M) == 0 */
//  T(f,f0,i,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   int i, j, k, f, f0, n, np, nb, sxf, syf, sxb, syb;
//  T(ipflag) {}
   int ipflag;
//  T() {}
   FILE *fd;
//  T() {}
   char name[256];
//  T() {}
   unsigned char *neworg[3], *newref[3];
//  T() {}
   static char ipb[5] = {' ', 'I', 'P', 'B', 'D'};
//  T() {}
   rc_init_seq();
//  T() {}
   /* initialize rate control */
   /* sequence header, sequence extension and sequence display extension */
   putseqhdr();
//  T() {}
   if (!mpeg1) {
//  T() {}
      putseqext();
//  T() {}
      putseqdispext();
   }
//  T() {}
   /* optionally output some text data (description, copyright or whatever) */
   if (strlen(id_string)>1)
//  T() {}
      putuserdata(id_string);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
   /* loop through all frames in encoding/decoding order */
   for(i = 0; i <= nframes-1; i += 1) {
//  T() {}
      if (!quiet) {
//  T() {}
         fprintf(stderr, "Encoding frame %d ", i);
//  T() {}
         fflush(stderr);
      }
//  T(f0) {}
      /* f0: lowest frame number in current GOP
           *
           * first GOP contains N-(M-1) frames,
           * all other GOPs contain N frames
           */
      f0 = N*((i+(M-1))/N)-(M-1);
//  T(f0) {0<=f0, f0#init<=f0}
      if (f0<0)
//  T(f0) {f0==0}
         f0 = 0;
//  T(back_hor_f_code,back_vert_f_code,f,forw_hor_f_code,
//    forw_vert_f_code,j,n,nb,np,pict_type,sxb,sxf,syb,syf) {j==3,
//    1<=pict_type, pict_type<=3}
      if (i==0||(i-1)%M==0) {
//  T(j) {0<=j, j<=2}
         /* I or P frame */
         for(j = 0; j <= 2; j += 1) {
//  T() {}
            /* shuffle reference frames */
            neworg[j] = oldorgframe[j];
//  T() {}
            newref[j] = oldrefframe[j];
//  T() {}
            oldorgframe[j] = neworgframe[j];
//  T() {}
            oldrefframe[j] = newrefframe[j];
//  T() {}
            neworgframe[j] = neworg[j];
//  T() {}
            newrefframe[j] = newref[j];
         }
//  T(f) {}
         /* f: frame number in display order */
         f = i==0?0:i+M-1;
//  T(f) {f<=f#init, f+1<=nframes}
         if (f>=nframes)
//  T(f) {f==nframes-1}
            f = nframes-1;
//  T(back_hor_f_code,back_vert_f_code,forw_hor_f_code,
//    forw_vert_f_code,n,nb,np,pict_type,sxf,syf)
//    {back_hor_f_code==15, back_vert_f_code==15, 1<=pict_type,
//    pict_type<=2}
         if (i==f0) {
//  T(pict_type) {pict_type==1}
            /* I frame */
            pict_type = 1;
//  T(forw_hor_f_code,forw_vert_f_code) {forw_hor_f_code==15,
//    forw_vert_f_code==15}
            forw_hor_f_code = forw_vert_f_code = 15;
//  T(back_hor_f_code,back_vert_f_code) {back_hor_f_code==15,
//    back_vert_f_code==15}
            back_hor_f_code = back_vert_f_code = 15;
//  T(n) {}
            /* n: number of frames in current GOP
                     *
                     * first GOP contains (M-1) less (B) frames
                     */
            n = i==0?N-(M-1):N;
//  T(n) {f0+n<=nframes, n<=n#init}
            /* last GOP may contain less frames */
            if (n>nframes-f0)
//  T(n) {f0+n==nframes}
               n = nframes-f0;
//  T(np) {}
            /* number of P frames */
            if (i==0)
//  T(np) {}
               np = (n+2*(M-1))/M-1;
            else
//  T(np) {}
               np = (n+(M-1))/M-1;
//  T(nb) {nb+np==n-1}
            /* number of B frames */
            nb = n-np-1;
//  T() {}
            rc_init_GOP(np, nb);
//  T() {}
            putgophdr(f0, i==0);
         }
         else {
//  T(pict_type) {pict_type==2}
            /* P frame */
            pict_type = 2;
//  T(forw_hor_f_code) {}
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
//  T(forw_vert_f_code) {}
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
//  T(back_hor_f_code,back_vert_f_code) {back_hor_f_code==15,
//    back_vert_f_code==15}
            back_hor_f_code = back_vert_f_code = 15;
//  T(sxf) {}
            sxf = motion_data[0].sxf;
//  T(syf) {}
            syf = motion_data[0].syf;
         }
      }
      else {
//  T(j) {0<=j, j<=2}
         /* B frame */
         for(j = 0; j <= 2; j += 1) {
//  T() {}
            neworg[j] = auxorgframe[j];
//  T() {}
            newref[j] = auxframe[j];
         }
//  T(f) {f==i-1}
         /* f: frame number in display order */
         f = i-1;
//  T(pict_type) {pict_type==3}
         pict_type = 3;
//  T(n) {}
         n = (i-2)%M+1;
//  T(forw_hor_f_code) {}
         /* first B: n=1, second B: n=2, ... */
         forw_hor_f_code = motion_data[n].forw_hor_f_code;
//  T(forw_vert_f_code) {}
         forw_vert_f_code = motion_data[n].forw_vert_f_code;
//  T(back_hor_f_code) {}
         back_hor_f_code = motion_data[n].back_hor_f_code;
//  T(back_vert_f_code) {}
         back_vert_f_code = motion_data[n].back_vert_f_code;
//  T(sxf) {}
         sxf = motion_data[n].sxf;
//  T(syf) {}
         syf = motion_data[n].syf;
//  T(sxb) {}
         sxb = motion_data[n].sxb;
//  T(syb) {}
         syb = motion_data[n].syb;
      }
//  T(temp_ref) {f0+temp_ref==f}
      temp_ref = f-f0;
//  T(frame_pred_dct) {}
      frame_pred_dct = frame_pred_dct_tab[pict_type-1];
//  T(q_scale_type) {}
      q_scale_type = qscale_tab[pict_type-1];
//  T(intravlc) {}
      intravlc = intravlc_tab[pict_type-1];
//  T(altscan) {}
      altscan = altscan_tab[pict_type-1];
//  T() {}
      fprintf(statfile, "\nFrame %d (#%d in display order):\n", i, f);
//  T() {}
      fprintf(statfile, " picture_type=%c\n", ipb[pict_type]);
//  T() {}
      fprintf(statfile, " temporal_reference=%d\n", temp_ref);
//  T() {}
      fprintf(statfile, " frame_pred_frame_dct=%d\n", frame_pred_dct);
//  T() {}
      fprintf(statfile, " q_scale_type=%d\n", q_scale_type);
//  T() {}
      fprintf(statfile, " intra_vlc_format=%d\n", intravlc);
//  T() {}
      fprintf(statfile, " alternate_scan=%d\n", altscan);
//  T() {}
      if (pict_type!=1) {
//  T() {}
         fprintf(statfile, " forward search window: %d...%d / %d...%d\n", -sxf, sxf, -syf, syf);
//  T() {}
         fprintf(statfile, " forward vector range: %d...%d.5 / %d...%d.5\n", -(4<<forw_hor_f_code), (4<<forw_hor_f_code)-1, -(4<<forw_vert_f_code), (4<<forw_vert_f_code)-1);
      }
//  T() {}
      if (pict_type==3) {
//  T() {}
         fprintf(statfile, " backward search window: %d...%d / %d...%d\n", -sxb, sxb, -syb, syb);
//  T() {}
         fprintf(statfile, " backward vector range: %d...%d.5 / %d...%d.5\n", -(4<<back_hor_f_code), (4<<back_hor_f_code)-1, -(4<<back_vert_f_code), (4<<back_vert_f_code)-1);
      }
//  T() {}
      sprintf(name, tplorg, f+frame0);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
      readframe(name, neworg);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
      if (fieldpic) {
//  T() {}
         if (!quiet) {
//  T() {}
            fprintf(stderr, "\nfirst field  (%s) ", topfirst?"top":"bot");
//  T() {}
            fflush(stderr);
         }
//  T(pict_struct) {1<=pict_struct, pict_struct<=2}
         pict_struct = topfirst?1:2;
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
//  T() {}
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
//  T() {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  T(j,k) {0<=k}
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
//  T(j) {block_count<=j, 0<=j}
            if (mbinfo[k].mb_type&1)
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         itransform(predframe, newref, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  T() {}
         stats();
//  T() {}
         if (!quiet) {
//  T() {}
            fprintf(stderr, "second field (%s) ", topfirst?"bot":"top");
//  T() {}
            fflush(stderr);
         }
//  T(pict_struct) {1<=pict_struct, pict_struct<=2}
         pict_struct = topfirst?2:1;
//  T(ipflag) {}
         ipflag = pict_type==1;
//  T(back_hor_f_code,back_vert_f_code,forw_hor_f_code,
//    forw_vert_f_code,pict_type,sxf,syf) {}
         if (ipflag) {
//  T(pict_type) {pict_type==2}
            /* first field = I, second field = P */
            pict_type = 2;
//  T(forw_hor_f_code) {}
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
//  T(forw_vert_f_code) {}
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
//  T(back_hor_f_code,back_vert_f_code) {back_hor_f_code==15,
//    back_vert_f_code==15}
            back_hor_f_code = back_vert_f_code = 15;
//  T(sxf) {}
            sxf = motion_data[0].sxf;
//  T(syf) {}
            syf = motion_data[0].syf;
         }
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 1, ipflag);
//  T() {}
         predict(oldrefframe, newrefframe, predframe, 1, mbinfo);
//  T() {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  T(j,k) {0<=k}
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
//  T(j) {block_count<=j, 0<=j}
            if (mbinfo[k].mb_type&1)
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         itransform(predframe, newref, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  T() {}
         stats();
      }
      else {
//  T(pict_struct) {pict_struct==3}
         pict_struct = 3;
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         /* do motion_estimation
                *
                * uses source frames (...orgframe) for full pel search
                * and reconstructed frames (...refframe) for half pel search
                */
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
//  T() {}
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
//  T() {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  T(j,k) {0<=k}
         for(k = 0; k <= mb_height*mb_width-1; k += 1)
//  T(j) {block_count<=j, 0<=j}
            if (mbinfo[k].mb_type&1)
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  T(j) {j+1<=block_count, 0<=j}
               for(j = 0; j <= block_count-1; j += 1)
//  T() {}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         itransform(predframe, newref, mbinfo, blocks);
//  T(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  T() {}
         stats();
      }
//  T() {}
      sprintf(name, tplref, f+frame0);
//  T() {}
      writeframe(name, newref);
   }
//  T() {}
   putseqend();
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+85<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+235<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+227<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+146<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+93<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putseqdispext(void)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(2, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+3<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(video_format, 3);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* video_format */
   putbits(1, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* colour_description */
   putbits(color_primaries, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* colour_primaries */
   putbits(transfer_characteristics, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* transfer_characteristics */
   putbits(matrix_coefficients, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+14<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* matrix_coefficients */
   putbits(display_horizontal_size, 14);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* display_horizontal_size */
   putbits(1, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+14<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(display_vertical_size, 14);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putseqend(void)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B7L, 32);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+72<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+196<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+188<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+120<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+80<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putseqext(void)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(1, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(profile<<4|level, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* profile_and_level_indication */
   putbits(prog_seq, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* progressive sequence */
   putbits(chroma_format, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* chroma_format */
   putbits(horizontal_size>>12, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* horizontal_size_extension */
   putbits(vertical_size>>12, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vertical_size_extension */
   putbits((int) ceil(bit_rate/400.0)>>18, 12);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* bit_rate_extension */
   putbits(1, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(vbv_buffer_size>>10, 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vbv_buffer_size_extension */
   putbits(0, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* low_delay  -- currently not implemented */
   putbits(0, 2);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+5<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_rate_extension_n */
   putbits(0, 5);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+88<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+236<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+228<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+152<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+236<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+228<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+152<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+96<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+88<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+96<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putseqhdr(void)
{
//  T(i) {}
   int i;
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B3L, 32);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* sequence_header_code */
   putbits(horizontal_size, 12);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* horizontal_size_value */
   putbits(vertical_size, 12);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vertical_size_value */
   putbits(aspectratio, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+4<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* aspect_ratio_information */
   putbits(frame_rate_code, 4);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+18<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_rate_code */
   putbits((int) ceil(bit_rate/400.0), 18);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* bit_rate_value */
   putbits(1, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+10<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(vbv_buffer_size, 10);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vbv_buffer_size_value */
   putbits(constrparms, 1);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* constrained_parameters_flag */
   putbits(load_iquant, 1);
//  T(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* load_intra_quantizer_matrix */
   if (load_iquant)
//  T(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt) {0<=i,
//    i<=63,
//    8i+8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      for(i = 0; i <= 63; i += 1)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* matrices are always downloaded in zig-zag order */
         putbits(intra_q[zig_zag_scan[i]], 8);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_quantizer_matrix */
   putbits(load_niquant, 1);
//  T(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* load_non_intra_quantizer_matrix */
   if (load_niquant)
//  T(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt) {0<=i,
//    i<=63,
//    8i+8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      for(i = 0; i <= 63; i += 1)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(inter_q[zig_zag_scan[i]], 8);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
void putuserdata(char *userdata)
{
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   alignbits();
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B2L, 32);
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* user_data_start_code */
   while (*userdata)
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+8<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(*userdata++, 8);
}
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=val+2047, val<=2047}
static void putDC(sVLCtable *tab, int val)
{
//  T(absval,size) {}
   int absval, size;
//  T(absval) {0<=absval+val, val<=absval}
   absval = val<0?-val:val;
//  T() {absval<=2047}
   /* abs(val) */
   if (absval>2047||mpeg1&&absval>255) {
//  T() {}
      /* should never happen */
      sprintf(errortext, "DC value out of range (%d)\n", val);
//  T() {0==-1}
      error(errortext);
   }
//  T(size) {size==0}
   /* compute dct_dc_size */
   size = 0;
//  T(absval,size) {size#init<=size}
   while (absval) {
//  T(absval) {2absval<=absval#init, absval#init<=2absval+1}
      absval >>= 1;
//  T(size) {size==size#init+1}
      size++;
   }
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* generate VLC for dct_dc_size (Table B-12 or B-13) */
   putbits(tab[size].code, tab[size].len);
//  T(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+size<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* append fixed length code (dc_dct_differential) */
   if (size!=0) {
//  T(absval) {val<=absval+1}
      if (val>=0)
//  T(absval) {absval==val}
         absval = val;
      else
//  T(absval) {val<=absval+1}
         absval = val+(1<<size)-1;
//  T(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+size<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* val + (2 ^ size) - 1 */
      putbits(absval, size);
   }
}
//  T(quant_intra) {quant_intra==1}
int quant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  T(i) {}
   int i;
//  T(d,x,y) {}
   int x, y, d;
//  T(x) {}
   x = src[0];
//  T(d) {}
   d = 8>>dc_prec;
//  T() {}
   /* intra_dc_mult */
   dst[0] = x>=0?(x+(d>>1))/d:-(((-x)+(d>>1))/d);
//  T(d,i,x,y) {1<=i, i<=63}
   /* round(x/d) */
   for(i = 1; i <= 63; i += 1) {
//  T(x) {}
      x = src[i];
//  T(d) {}
      d = quant_mat[i];
//  T(y) {}
      y = (32*(x>=0?x:-x)+(d>>1))/d;
//  T(d) {3mquant<=4d+1, 4d<=3mquant+2}
      /* round(32*x/quant_mat) */
      d = 3*mquant+2>>2;
//  T(y) {}
      y = (y+d)/(2*mquant);
//  T(y) {y<=2047, y<=y#init+1791}
      /* (y+0.75*mquant) / (2*mquant) */
      /* clip to syntax limits */
      if (y>255)
//  T(y) {y<=2047}
         if (mpeg1)
//  T(y) {y==255}
            y = 255;
         else if (y>2047)
//  T(y) {y==2047}
            y = 2047;
//  T() {}
      dst[i] = x>=0?y:-y;
   }
//  T(quant_intra) {quant_intra==1}
   return 1;
}
//  T(quant_non_intra) {}
int quant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  T(i) {}
   int i;
//  T(d,x,y) {}
   int x, y, d;
//  T(nzflag) {}
   int nzflag;
//  T(nzflag) {nzflag==0}
   nzflag = 0;
//  T(d,i,nzflag,x,y) {0<=i, i<=63}
   for(i = 0; i <= 63; i += 1) {
//  T(x) {}
      x = src[i];
//  T(d) {}
      d = quant_mat[i];
//  T(y) {}
      y = (32*(x>=0?x:-x)+(d>>1))/d;
//  T(y) {}
      /* round(32*x/quant_mat) */
      y /= 2*mquant;
//  T(y) {y<=2047, y<=y#init+1791}
      /* clip to syntax limits */
      if (y>255)
//  T(y) {y<=2047}
         if (mpeg1)
//  T(y) {y==255}
            y = 255;
         else if (y>2047)
//  T(y) {y==2047}
            y = 2047;
//  T(nzflag) {}
      if ((dst[i] = x>=0?y:-y)!=0)
//  T(nzflag) {nzflag==1}
         nzflag = 1;
   }
//  T(quant_non_intra) {nzflag==quant_non_intra}
   return nzflag;
}
//  T() {}
static void iquant1_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  T(i,val) {}
   int i, val;
//  T() {}
   dst[0] = src[0]<<3-dc_prec;
//  T(i,val) {1<=i, i<=63}
   for(i = 1; i <= 63; i += 1) {
//  T(val) {}
      val = (int) (src[i]*quant_mat[i]*mquant)/16;
//  T(val) {val#init<=val+1, val<=val#init+1}
      /* mismatch control */
      if ((val&1)==0&&val!=0)
//  T(val) {val#init<=val+1, val<=val#init+1}
         val += val>0?-1:1;
//  T() {}
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
//  T() {}
static void iquant1_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  T(i,val) {}
   int i, val;
//  T(i,val) {0<=i, i<=63}
   for(i = 0; i <= 63; i += 1) {
//  T(val) {}
      val = src[i];
//  T(val) {}
      if (val!=0) {
//  T(val) {}
         val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
//  T(val) {val#init<=val+1, val<=val#init+1}
         /* mismatch control */
         if ((val&1)==0&&val!=0)
//  T(val) {val#init<=val+1, val<=val#init+1}
            val += val>0?-1:1;
      }
//  T() {}
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
//  T() {1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=dc_prec, dc_prec<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
void range_checks(void)
{
//  T(i) {}
   int i;
//  T() {1<=horizontal_size, horizontal_size<=16383}
   /* range and value checks */
   if (horizontal_size<1||horizontal_size>16383)
//  T() {0==-1}
      error("horizontal_size must be between 1 and 16383");
//  T() {}
   if (mpeg1&&horizontal_size>4095)
//  T() {0==-1}
      error("horizontal_size must be less than 4096 (MPEG-1)");
//  T() {}
   if ((horizontal_size&4095)==0)
//  T() {0==-1}
      error("horizontal_size must not be a multiple of 4096");
//  T() {}
   if (chroma_format!=3&&horizontal_size%2!=0)
//  T() {0==-1}
      error("horizontal_size must be a even (4:2:0 / 4:2:2)");
//  T() {1<=vertical_size, vertical_size<=16383}
   if (vertical_size<1||vertical_size>16383)
//  T() {0==-1}
      error("vertical_size must be between 1 and 16383");
//  T() {}
   if (mpeg1&&vertical_size>4095)
//  T() {0==-1}
      error("vertical size must be less than 4096 (MPEG-1)");
//  T() {}
   if ((vertical_size&4095)==0)
//  T() {0==-1}
      error("vertical_size must not be a multiple of 4096");
//  T() {}
   if (chroma_format==1&&vertical_size%2!=0)
//  T() {0==-1}
      error("vertical_size must be a even (4:2:0)");
//  T() {}
   if (fieldpic) {
//  T() {}
      if (vertical_size%2!=0)
//  T() {0==-1}
         error("vertical_size must be a even (field pictures)");
//  T() {}
      if (chroma_format==1&&vertical_size%4!=0)
//  T() {0==-1}
         error("vertical_size must be a multiple of 4 (4:2:0 field pictures)");
   }
//  T() {1<=aspectratio, aspectratio<=14}
   if (mpeg1) {
//  T() {1<=aspectratio, aspectratio<=14}
      if (aspectratio<1||aspectratio>14)
//  T() {0==-1}
         error("pel_aspect_ratio must be between 1 and 14 (MPEG-1)");
   }
   else if (aspectratio<1||aspectratio>4)
//  T() {0==-1}
      error("aspect_ratio_information must be 1, 2, 3 or 4");
//  T() {1<=frame_rate_code, frame_rate_code<=8}
   if (frame_rate_code<1||frame_rate_code>8)
//  T() {0==-1}
      error("frame_rate code must be between 1 and 8");
//  T() {}
   if (bit_rate<=0.0)
//  T() {0==-1}
      error("bit_rate must be positive");
//  T() {}
   if (bit_rate>((1<<30)-1)*400.0)
//  T() {0==-1}
      error("bit_rate must be less than 429 Gbit/s");
//  T() {}
   if (mpeg1&&bit_rate>((1<<18)-1)*400.0)
//  T() {0==-1}
      error("bit_rate must be less than 104 Mbit/s (MPEG-1)");
//  T() {1<=vbv_buffer_size, vbv_buffer_size<=262143}
   if (vbv_buffer_size<1||vbv_buffer_size>0x3ffff)
//  T() {0==-1}
      error("vbv_buffer_size must be in range 1..(2^18-1)");
//  T() {}
   if (mpeg1&&vbv_buffer_size>=1024)
//  T() {0==-1}
      error("vbv_buffer_size must be less than 1024 (MPEG-1)");
//  T() {1<=chroma_format, chroma_format<=3}
   if (chroma_format<1||chroma_format>3)
//  T() {0==-1}
      error("chroma_format must be in range 1...3");
//  T() {0<=video_format, video_format<=4}
   if (video_format<0||video_format>4)
//  T() {0==-1}
      error("video_format must be in range 0...4");
//  T() {1<=color_primaries, color_primaries<=7}
   if (color_primaries<1||color_primaries>7||color_primaries==3)
//  T() {0==-1}
      error("color_primaries must be in range 1...2 or 4...7");
//  T() {1<=transfer_characteristics, transfer_characteristics<=7}
   if (transfer_characteristics<1||transfer_characteristics>7||transfer_characteristics==3)
//  T() {0==-1}
      error("transfer_characteristics must be in range 1...2 or 4...7");
//  T() {1<=matrix_coefficients, matrix_coefficients<=7}
   if (matrix_coefficients<1||matrix_coefficients>7||matrix_coefficients==3)
//  T() {0==-1}
      error("matrix_coefficients must be in range 1...2 or 4...7");
//  T() {0<=display_horizontal_size, display_horizontal_size<=16383}
   if (display_horizontal_size<0||display_horizontal_size>16383)
//  T() {0==-1}
      error("display_horizontal_size must be in range 0...16383");
//  T() {0<=display_vertical_size, display_vertical_size<=16383}
   if (display_vertical_size<0||display_vertical_size>16383)
//  T() {0==-1}
      error("display_vertical_size must be in range 0...16383");
//  T() {0<=dc_prec, dc_prec<=3}
   if (dc_prec<0||dc_prec>3)
//  T() {0==-1}
      error("intra_dc_precision must be in range 0...3");
//  T(i) {i+1<=M, 0<=i}
   for(i = 0; i <= M-1; i += 1) {
//  T() {}
      if (motion_data[i].forw_hor_f_code<1||motion_data[i].forw_hor_f_code>9)
//  T() {0==-1}
         error("f_code must be between 1 and 9");
//  T() {}
      if (motion_data[i].forw_vert_f_code<1||motion_data[i].forw_vert_f_code>9)
//  T() {0==-1}
         error("f_code must be between 1 and 9");
//  T() {}
      if (mpeg1&&motion_data[i].forw_hor_f_code>7)
//  T() {0==-1}
         error("f_code must be le less than 8");
//  T() {}
      if (mpeg1&&motion_data[i].forw_vert_f_code>7)
//  T() {0==-1}
         error("f_code must be le less than 8");
//  T() {}
      if (motion_data[i].sxf<=0)
//  T() {0==-1}
         error("search window must be positive");
//  T() {}
      /* doesn't belong here */
      if (motion_data[i].syf<=0)
//  T() {0==-1}
         error("search window must be positive");
//  T() {}
      if (i!=0) {
//  T() {}
         if (motion_data[i].back_hor_f_code<1||motion_data[i].back_hor_f_code>9)
//  T() {0==-1}
            error("f_code must be between 1 and 9");
//  T() {}
         if (motion_data[i].back_vert_f_code<1||motion_data[i].back_vert_f_code>9)
//  T() {0==-1}
            error("f_code must be between 1 and 9");
//  T() {}
         if (mpeg1&&motion_data[i].back_hor_f_code>7)
//  T() {0==-1}
            error("f_code must be le less than 8");
//  T() {}
         if (mpeg1&&motion_data[i].back_vert_f_code>7)
//  T() {0==-1}
            error("f_code must be le less than 8");
//  T() {}
         if (motion_data[i].sxb<=0)
//  T() {0==-1}
            error("search window must be positive");
//  T() {}
         if (motion_data[i].syb<=0)
//  T() {0==-1}
            error("search window must be positive");
      }
   }
}
//  T() {}
static void calc_actj(unsigned char *frame)
{
//  T(i,j,k) {}
   int i, j, k;
//  T() {}
   unsigned char *p;
//  T() {}
   double actj, var;
//  T(k) {k==0}
   k = 0;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
   for(j = 0; j <= height2-1; j += 16)
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
      for(i = 0; i <= width-1; i += 16) {
//  T() {}
         p = frame+(pict_struct==2?width:0)+i+width2*j;
//  T() {}
         /* take minimum spatial activity measure of luminance blocks */
         actj = var_sblk(p, width2);
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         var = var_sblk(p+8, width2);
//  T() {}
         if (var<actj)
//  T() {}
            actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         var = var_sblk(p+8*width2, width2);
//  T() {}
         if (var<actj)
//  T() {}
            actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         var = var_sblk(p+8*width2+8, width2);
//  T() {}
         if (var<actj)
//  T() {}
            actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         if (!fieldpic&&!prog_seq) {
//  T() {}
            /* field */
            var = var_sblk(p, width<<1);
//  T() {}
            if (var<actj)
//  T() {}
               actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            var = var_sblk(p+8, width<<1);
//  T() {}
            if (var<actj)
//  T() {}
               actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            var = var_sblk(p+width, width<<1);
//  T() {}
            if (var<actj)
//  T() {}
               actj = var;
//  T(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            var = var_sblk(p+width+8, width<<1);
//  T() {}
            if (var<actj)
//  T() {}
               actj = var;
         }
//  T() {}
         actj += 1.0;
//  T(k) {k==k#init+1}
         mbinfo[k++].act = actj;
      }
}
//  T() {}
static double var_sblk(unsigned char *p, int lx)
{
//  T(i,j) {}
   int i, j;
//  T(s,s2,v) {}
   unsigned int v, s, s2;
//  T(s,s2) {s==0, s2==0}
   s = s2 = 0;
//  T(i,j,s,s2,v) {0<=j, j<=7, s2#init<=s2}
   for(j = 0; j <= 7; j += 1) {
//  T(i,s,s2,v) {0<=i, i<=7, s2#init<=s2}
      for(i = 0; i <= 7; i += 1) {
//  T(v) {}
         v = *p++;
//  T(s) {s#init+v==s}
         s += v;
//  T(s2) {s2#init<=s2}
         s2 += v*v;
      }
//  T() {}
      p += lx-8;
   }
//  T() {}
   return s2/64.0-s/64.0*s/64.0;
}
//  T(Q,prev_mquant,rc_calc_mquant)
//    {ratectl!:Q#init+rc_calc_mquant==Q}
int rc_calc_mquant(int j)
{
//  T(mquant) {}
   int mquant;
//  T() {}
   double dj, Qj, actj, N_actj;
//  T() {}
   /* measure virtual buffer discrepancy from uniform distribution model */
   dj = d+(bitcount()-S)-j*(T/(mb_width*mb_height2));
//  T() {}
   /* scale against dynamic range of mquant and the bits/picture count */
   Qj = dj*31.0/r;
//  T() {}
   /*Qj = dj*(q_scale_type ? 56.0 : 31.0)/r;  */
   actj = mbinfo[j].act;
//  T() {}
   actsum += actj;
//  T() {}
   /* compute normalized activity */
   N_actj = (2.0*actj+avg_act)/(actj+2.0*avg_act);
//  T(mquant,prev_mquant) {}
   if (q_scale_type) {
//  T(mquant) {}
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(2.0*Qj*N_actj+0.5);
//  T(mquant) {1<=mquant, mquant#init<=mquant}
      /* clip mquant to legal (linear) range */
      if (mquant<1)
//  T(mquant) {mquant==1}
         mquant = 1;
//  T(mquant) {mquant<=112, mquant<=mquant#init}
      if (mquant>112)
//  T(mquant) {mquant==112}
         mquant = 112;
//  T(mquant) {}
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
//  T(mquant) {}
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(Qj*N_actj+0.5);
//  T(mquant) {mquant==2mquant#init}
      mquant <<= 1;
//  T(mquant) {2<=mquant, mquant#init<=mquant}
      /* clip mquant to legal (linear) range */
      if (mquant<2)
//  T(mquant) {mquant==2}
         mquant = 2;
//  T(mquant) {mquant<=62, mquant<=mquant#init}
      if (mquant>62)
//  T(mquant) {mquant==62}
         mquant = 62;
//  T(mquant) {mquant#init<=mquant+4, mquant<=mquant#init+4}
      /* ignore small changes in mquant */
      if (mquant>=8&&mquant-prev_mquant>=-4&&mquant-prev_mquant<=4)
//  T(mquant) {mquant==prev_mquant}
         mquant = prev_mquant;
//  T(prev_mquant) {mquant==prev_mquant}
      prev_mquant = mquant;
   }
//  T(Q) {mquant+ratectl!:Q#init==Q}
   Q += mquant;
//  T(rc_calc_mquant) {mquant==rc_calc_mquant}
   /* for calculation of average mquant */
   /*
     fprintf(statfile,"rc_calc_mquant(%d): ",j);
     fprintf(statfile,"bitcount=%d, dj=%f, Qj=%f, actj=%f, N_actj=%f, mquant=%d\n",
       bitcount(),dj,Qj,actj,N_actj,mquant);
   */
   return mquant;
}
//  T(Nb,Np,R) {}
void rc_init_GOP(int np, int nb)
{
//  T(R) {}
   R += (int) floor((1+np+nb)*bit_rate/frame_rate+0.5);
//  T(Np) {}
   Np = fieldpic?2*np+1:np;
//  T(Nb) {}
   Nb = fieldpic?2*nb:nb;
//  T() {}
   fprintf(statfile, "\nrate control: new group of pictures (GOP)\n");
//  T() {}
   fprintf(statfile, " target number of bits for GOP: R=%d\n", R);
//  T() {}
   fprintf(statfile, " number of P pictures in GOP: Np=%d\n", Np);
//  T() {}
   fprintf(statfile, " number of B pictures in GOP: Nb=%d\n", Nb);
}
//  T() {}
void rc_init_pict(unsigned char *frame)
{
//  T() {}
   double Tmin;
//  T() {}
   if (pict_type==1) goto _switch_1_case_1;
//  T() {}
   if (pict_type==2) goto _switch_1_case_2;
//  T() {}
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
//  T() {}
_switch_1_case_3:   ;
//  T(T) {}
   T = (int) floor(R/(Nb+Np*1.4*Xp/(1.0*Xb))+0.5);
//  T(d) {d==d0b}
   d = d0b;
   goto _break_1;
//  T() {}
_switch_1_case_2:   ;
//  T(T) {}
   T = (int) floor(R/(Np+Nb*1.0*Xb/(1.4*Xp))+0.5);
//  T(d) {d==d0p}
   d = d0p;
   goto _break_1;
//  T() {}
_switch_1_case_1:   ;
//  T(T) {}
   T = (int) floor(R/(1.0+Np*Xp/(Xi*1.0)+Nb*Xb/(Xi*1.4))+0.5);
//  T(d) {d==d0i}
   d = d0i;
//  T() {}
_break_1:   ;
//  T() {}
   Tmin = (int) floor(bit_rate/(8.0*frame_rate)+0.5);
//  T(T) {}
   if (T<Tmin)
//  T(T) {}
      T = Tmin;
//  T(S) {}
   S = bitcount();
//  T(Q) {Q==0}
   Q = 0;
//  T(Nb,Np,Q,R,S,T,Xb,Xi,Xp,d,d0b,d0i,d0p,pict_type) {}
   calc_actj(frame);
//  T() {}
   actsum = 0.0;
//  T() {}
   fprintf(statfile, "\nrate control: start of picture\n");
//  T() {}
   fprintf(statfile, " target number of bits: T=%d\n", T);
}
//  T(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
void rc_init_seq(void)
{
//  T(r) {}
   /* reaction parameter (constant) */
   if (r==0)
//  T(r) {}
      r = (int) floor(2.0*bit_rate/frame_rate+0.5);
//  T() {}
   /* average activity */
   if (avg_act==0.0)
//  T() {}
      avg_act = 400.0;
//  T(R) {R==0}
   /* remaining # of bits in GOP */
   R = 0;
//  T(Xi) {}
   /* global complexity measure */
   if (Xi==0)
//  T(Xi) {}
      Xi = (int) floor(160.0*bit_rate/115.0+0.5);
//  T(Xp) {}
   if (Xp==0)
//  T(Xp) {}
      Xp = (int) floor(60.0*bit_rate/115.0+0.5);
//  T(Xb) {}
   if (Xb==0)
//  T(Xb) {}
      Xb = (int) floor(42.0*bit_rate/115.0+0.5);
//  T(d0i) {}
   /* virtual buffer fullness */
   if (d0i==0)
//  T(d0i) {}
      d0i = (int) floor(10.0*r/31.0+0.5);
//  T(d0p) {}
   if (d0p==0)
//  T(d0p) {}
      d0p = (int) floor(10.0*r/31.0+0.5);
//  T(d0b) {}
   if (d0b==0)
//  T(d0b) {}
      d0b = (int) floor(1.4*10.0*r/31.0+0.5);
//  T() {}
   /*
     if (d0i==0) d0i = (int)floor(10.0*r/(qscale_tab[0] ? 56.0 : 31.0) + 0.5);
     if (d0p==0) d0p = (int)floor(10.0*r/(qscale_tab[1] ? 56.0 : 31.0) + 0.5);
     if (d0b==0) d0b = (int)floor(1.4*10.0*r/(qscale_tab[2] ? 56.0 : 31.0) + 0.5);
   */
   fprintf(statfile, "\nrate control: sequence initialization\n");
//  T() {}
   fprintf(statfile, " initial global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
//  T() {}
   fprintf(statfile, " reaction parameter: r=%d\n", r);
//  T() {}
   fprintf(statfile, " initial virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
//  T() {}
   fprintf(statfile, " initial average activity: avg_act=%.1f\n", avg_act);
}
//  T(prev_mquant,rc_start_mb) {}
int rc_start_mb(void)
{
//  T(mquant) {}
   int mquant;
//  T(mquant,prev_mquant) {}
   if (q_scale_type) {
//  T(mquant) {}
      mquant = (int) floor(2.0*d*31.0/r+0.5);
//  T(mquant) {1<=mquant, mquant#init<=mquant}
      /* clip mquant to legal (linear) range */
      if (mquant<1)
//  T(mquant) {mquant==1}
         mquant = 1;
//  T(mquant) {mquant<=112, mquant<=mquant#init}
      if (mquant>112)
//  T(mquant) {mquant==112}
         mquant = 112;
//  T(mquant) {}
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
//  T(mquant) {}
      mquant = (int) floor(d*31.0/r+0.5);
//  T(mquant) {mquant==2mquant#init}
      mquant <<= 1;
//  T(mquant) {2<=mquant, mquant#init<=mquant}
      /* clip mquant to legal (linear) range */
      if (mquant<2)
//  T(mquant) {mquant==2}
         mquant = 2;
//  T(mquant) {mquant<=62, mquant<=mquant#init}
      if (mquant>62)
//  T(mquant) {mquant==62}
         mquant = 62;
//  T(prev_mquant) {mquant==prev_mquant}
      prev_mquant = mquant;
   }
//  T(rc_start_mb) {mquant==rc_start_mb}
   /*
     fprintf(statfile,"rc_start_mb:\n");
     fprintf(statfile,"mquant=%d\n",mquant);
   */
   return mquant;
}
//  T(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
void rc_update_pict(void)
{
//  T() {}
   double X;
//  T(S) {S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   S = bitcount()-S;
//  T(R) {R+S==ratectl!:R#init}
   /* total # of bits in picture */
   R -= S;
//  T() {}
   /* remaining # of bits in GOP */
   X = (int) floor(S*0.5*(double) Q/(mb_width*mb_height2)+0.5);
//  T(d) {S+ratectl!:d#init==T+d}
   d += S-T;
//  T() {}
   avg_act = actsum/(mb_width*mb_height2);
//  T() {}
   if (pict_type==1) goto _switch_1_case_1;
//  T() {}
   if (pict_type==2) goto _switch_1_case_2;
//  T() {}
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
//  T() {}
_switch_1_case_3:   ;
//  T(Xb) {}
   Xb = X;
//  T(d0b) {d==d0b}
   d0b = d;
//  T(Nb) {Nb==ratectl!:Nb#init-1}
   Nb--;
   goto _break_1;
//  T() {}
_switch_1_case_2:   ;
//  T(Xp) {}
   Xp = X;
//  T(d0p) {d==d0p}
   d0p = d;
//  T(Np) {Np==ratectl!:Np#init-1}
   Np--;
   goto _break_1;
//  T() {}
_switch_1_case_1:   ;
//  T(Xi) {}
   Xi = X;
//  T(d0i) {d==d0i}
   d0i = d;
//  T() {}
_break_1:   ;
//  T() {}
   fprintf(statfile, "\nrate control: end of picture\n");
//  T() {}
   fprintf(statfile, " actual number of bits: S=%d\n", S);
//  T() {}
   fprintf(statfile, " average quantization parameter Q=%.1f\n", (double) Q/(mb_width*mb_height2));
//  T() {}
   fprintf(statfile, " remaining number of bits in GOP: R=%d\n", R);
//  T() {}
   fprintf(statfile, " global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
//  T() {}
   fprintf(statfile, " virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
//  T() {}
   fprintf(statfile, " remaining number of P pictures in GOP: Np=%d\n", Np);
//  T() {}
   fprintf(statfile, " remaining number of B pictures in GOP: Nb=%d\n", Nb);
//  T() {}
   fprintf(statfile, " average activity: avg_act=%.1f\n", avg_act);
}
//  T(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    vertical_size,width) {}
void readframe(char *fname, unsigned char *frame[])
{
//  T() {}
   if (inputtype==0) goto _switch_1_case_0;
//  T() {}
   if (inputtype==1) goto _switch_1_case_1;
//  T() {}
   if (inputtype==2) goto _switch_1_case_2;
//  T() {}
_switch_1_default:   ;
   goto _break_1;
//  T() {}
_switch_1_case_2:   ;
//  T() {}
   read_ppm(fname, frame);
   goto _break_1;
//  T() {}
_switch_1_case_1:   ;
//  T(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    inputtype,matrix_coefficients,mpeg1,prog_frame,vertical_size,
//    width) {}
   read_yuv(fname, frame);
   goto _break_1;
//  T() {}
_switch_1_case_0:   ;
//  T(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    inputtype,matrix_coefficients,mpeg1,prog_frame,vertical_size,
//    width) {}
   read_y_u_v(fname, frame);
//  T() {}
_break_1:   ;
}
//  T() {}
static void border_extend(unsigned char *frame, int w1, int h1, int w2, int h2)
{
//  T(i,j) {}
   int i, j;
//  T() {}
   unsigned char *fp;
//  T(i,j) {j+1<=h1, 0<=j}
   /* horizontal pixel replication (right border) */
   for(j = 0; j <= h1-1; j += 1) {
//  T() {}
      fp = frame+j*w2;
//  T(i) {w1<=i, i+1<=w2}
      for(i = w1; i <= w2-1; i += 1)
//  T() {}
         fp[i] = fp[i-1];
   }
//  T(i,j) {h1<=j, j+1<=h2}
   /* vertical pixel replication (bottom border) */
   for(j = h1; j <= h2-1; j += 1) {
//  T() {}
      fp = frame+j*w2;
//  T(i) {0<=i, i+1<=w2}
      for(i = 0; i <= w2-1; i += 1)
//  T() {}
         fp[i] = fp[i-w2];
   }
}
//  T() {}
static void conv422to420(unsigned char *src, unsigned char *dst)
{
//  T(i,j,jm1,jm2,jm3,jm4,jm5,jm6,w) {}
   int w, i, j, jm6, jm5, jm4, jm3, jm2, jm1;
//  T(jp1,jp2,jp3,jp4,jp5,jp6) {}
   int jp1, jp2, jp3, jp4, jp5, jp6;
//  T(w) {2w<=width, width<=2w+1}
   w = width>>1;
//  T(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6) {0<=i,
//    w<=i}
   if (prog_frame)
//  T(i,j,jm1,jm2,jm3,jm4,jm5,jp1,jp2,jp3,jp4,jp5,jp6) {0<=i, i+1<=w}
      /* intra frame */
      for(i = 0; i <= w-1; i += 1) {
//  T(j,jm1,jm2,jm3,jm4,jm5,jp1,jp2,jp3,jp4,jp5,jp6) {j+1<=height,
//    0<=j}
         for(j = 0; j <= height-1; j += 2) {
//  T(jm5) {j<=jm5+5, 0<=jm5}
            jm5 = j<5?0:j-5;
//  T(jm4) {j<=jm4+4, 0<=jm4}
            jm4 = j<4?0:j-4;
//  T(jm3) {j<=jm3+3, 0<=jm3}
            jm3 = j<3?0:j-3;
//  T(jm2) {j<=jm2+2, 0<=jm2}
            jm2 = j<2?0:j-2;
//  T(jm1) {j<=jm1+1, 0<=jm1}
            jm1 = j<1?0:j-1;
//  T(jp1) {jp1+1<=height, jp1<=j+1}
            jp1 = j<height-1?j+1:height-1;
//  T(jp2) {jp2+1<=height, jp2<=j+2}
            jp2 = j<height-2?j+2:height-1;
//  T(jp3) {jp3+1<=height, jp3<=j+3}
            jp3 = j<height-3?j+3:height-1;
//  T(jp4) {jp4+1<=height, jp4<=j+4}
            jp4 = j<height-4?j+4:height-1;
//  T(jp5) {jp5+1<=height, jp5<=j+5}
            jp5 = j<height-5?j+5:height-1;
//  T(jp6) {jp6<=height, jp6<=j+6}
            jp6 = j<height-5?j+6:height-1;
//  T() {}
            /* FIR filter with 0.5 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (228*(src[w*j]+src[w*jp1])+70*(src[w*jm1]+src[w*jp2])-37*(src[w*jm2]+src[w*jp3])-21*(src[w*jm3]+src[w*jp4])+11*(src[w*jm4]+src[w*jp5])+5*(src[w*jm5]+src[w*jp6])+256)>>9];
         }
//  T() {}
         src++;
//  T() {}
         dst++;
      }
   else
//  T(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6) {0<=i,
//    i+1<=w}
      /* intra field */
      for(i = 0; i <= w-1; i += 1) {
//  T(j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6) {j+1<=height,
//    0<=j}
         for(j = 0; j <= height-1; j += 4) {
//  T(jm5) {j<=jm5+10, 0<=jm5}
            /* top field */
            jm5 = j<10?0:j-10;
//  T(jm4) {j<=jm4+8, 0<=jm4}
            jm4 = j<8?0:j-8;
//  T(jm3) {j<=jm3+6, 0<=jm3}
            jm3 = j<6?0:j-6;
//  T(jm2) {j<=jm2+4, 0<=jm2}
            jm2 = j<4?0:j-4;
//  T(jm1) {j<=jm1+2, 0<=jm1}
            jm1 = j<2?0:j-2;
//  T(jp1) {jp1+1<=height, jp1<=j+2}
            jp1 = j<height-2?j+2:height-2;
//  T(jp2) {jp2+1<=height, jp2<=j+4}
            jp2 = j<height-4?j+4:height-2;
//  T(jp3) {jp3+1<=height, jp3<=j+6}
            jp3 = j<height-6?j+6:height-2;
//  T(jp4) {jp4+1<=height, jp4<=j+8}
            jp4 = j<height-8?j+8:height-2;
//  T(jp5) {jp5+1<=height, jp5<=j+10}
            jp5 = j<height-10?j+10:height-2;
//  T(jp6) {jp6+1<=height, jp6<=j+12}
            jp6 = j<height-12?j+12:height-2;
//  T() {}
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (8*src[w*jm5]+5*src[w*jm4]-30*src[w*jm3]-18*src[w*jm2]+113*src[w*jm1]+242*src[w*j]+192*src[w*jp1]+35*src[w*jp2]-38*src[w*jp3]-10*src[w*jp4]+11*src[w*jp5]+2*src[w*jp6]+256)>>9];
//  T(jm6) {j<=jm6+9, 0<=jm6}
            /* bottom field */
            jm6 = j<9?1:j-9;
//  T(jm5) {j<=jm5+7, 0<=jm5}
            jm5 = j<7?1:j-7;
//  T(jm4) {j<=jm4+5, 0<=jm4}
            jm4 = j<5?1:j-5;
//  T(jm3) {j<=jm3+3, 0<=jm3}
            jm3 = j<3?1:j-3;
//  T(jm2) {j<=jm2+1, 0<=jm2}
            jm2 = j<1?1:j-1;
//  T(jm1) {jm1+1<=height, jm1<=j+1}
            jm1 = j<height-1?j+1:height-1;
//  T(jp1) {jp1+1<=height, jp1<=j+3}
            jp1 = j<height-3?j+3:height-1;
//  T(jp2) {jp2+1<=height, jp2<=j+5}
            jp2 = j<height-5?j+5:height-1;
//  T(jp3) {jp3+1<=height, jp3<=j+7}
            jp3 = j<height-7?j+7:height-1;
//  T(jp4) {jp4+1<=height, jp4<=j+9}
            jp4 = j<height-9?j+9:height-1;
//  T(jp5) {jp5+1<=height, jp5<=j+11}
            jp5 = j<height-11?j+11:height-1;
//  T(jp6) {jp6+1<=height, jp6<=j+13}
            jp6 = j<height-13?j+13:height-1;
//  T() {}
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*((j>>1)+1)] = clp[(int) (8*src[w*jp6]+5*src[w*jp5]-30*src[w*jp4]-18*src[w*jp3]+113*src[w*jp2]+242*src[w*jp1]+192*src[w*jm1]+35*src[w*jm2]-38*src[w*jm3]-10*src[w*jm4]+11*src[w*jm5]+2*src[w*jm6]+256)>>9];
         }
//  T() {}
         src++;
//  T() {}
         dst++;
      }
}
//  T() {}
static void conv444to422(unsigned char *src, unsigned char *dst)
{
//  T(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {}
   int i, j, im5, im4, im3, im2, im1, ip1, ip2, ip3, ip4, ip5, ip6;
//  T(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {height<=j,
//    0<=j}
   if (mpeg1)
//  T(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=j}
      for(j = 0; j <= height-1; j += 1) {
//  T(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6) {0<=i,
//    i+1<=width}
         for(i = 0; i <= width-1; i += 2) {
//  T(im5) {i<=im5+5, 0<=im5}
            im5 = i<5?0:i-5;
//  T(im4) {i<=im4+4, 0<=im4}
            im4 = i<4?0:i-4;
//  T(im3) {i<=im3+3, 0<=im3}
            im3 = i<3?0:i-3;
//  T(im2) {i<=im2+2, 0<=im2}
            im2 = i<2?0:i-2;
//  T(im1) {i<=im1+1, 0<=im1}
            im1 = i<1?0:i-1;
//  T(ip1) {ip1<=i+1, ip1+1<=width}
            ip1 = i<width-1?i+1:width-1;
//  T(ip2) {ip2<=i+2, ip2+1<=width}
            ip2 = i<width-2?i+2:width-1;
//  T(ip3) {ip3<=i+3, ip3+1<=width}
            ip3 = i<width-3?i+3:width-1;
//  T(ip4) {ip4<=i+4, ip4+1<=width}
            ip4 = i<width-4?i+4:width-1;
//  T(ip5) {ip5<=i+5, ip5+1<=width}
            ip5 = i<width-5?i+5:width-1;
//  T(ip6) {ip6<=i+6, ip6<=width}
            ip6 = i<width-5?i+6:width-1;
//  T() {}
            /* FIR filter with 0.5 sample interval phase shift */
            dst[i>>1] = clp[(int) (228*(src[i]+src[ip1])+70*(src[im1]+src[ip2])-37*(src[im2]+src[ip3])-21*(src[im3]+src[ip4])+11*(src[im4]+src[ip5])+5*(src[im5]+src[ip6])+256)>>9];
         }
//  T() {}
         src += width;
//  T() {}
         dst += width>>1;
      }
   else
//  T(i,im1,im3,im5,ip1,ip3,ip5,j) {j+1<=height, 0<=j}
      /* MPEG-2 */
      for(j = 0; j <= height-1; j += 1) {
//  T(i,im1,im3,im5,ip1,ip3,ip5) {0<=i, i+1<=width}
         for(i = 0; i <= width-1; i += 2) {
//  T(im5) {i<=im5+5, 0<=im5}
            im5 = i<5?0:i-5;
//  T(im3) {i<=im3+3, 0<=im3}
            im3 = i<3?0:i-3;
//  T(im1) {i<=im1+1, 0<=im1}
            im1 = i<1?0:i-1;
//  T(ip1) {ip1<=i+1, ip1+1<=width}
            ip1 = i<width-1?i+1:width-1;
//  T(ip3) {ip3<=i+3, ip3+1<=width}
            ip3 = i<width-3?i+3:width-1;
//  T(ip5) {ip5<=i+5, ip5+1<=width}
            ip5 = i<width-5?i+5:width-1;
//  T() {}
            /* FIR filter coefficients (*512): 22 0 -52 0 159 256 159 0 -52 0 22 */
            dst[i>>1] = clp[(int) (22*(src[im5]+src[ip5])-52*(src[im3]+src[ip3])+159*(src[im1]+src[ip1])+256*src[i]+256)>>9];
         }
//  T() {}
         src += width;
//  T() {}
         dst += width>>1;
      }
}
//  T() {}
static void read_ppm(char *fname, unsigned char *frame[])
{
//  T(i,j) {}
   int i, j;
//  T(b,g,r) {}
   int r, g, b;
//  T() {}
   double y, u, v;
//  T() {}
   double cr, cg, cb, cu, cv;
//  T() {}
   char name[128];
//  T() {}
   FILE *fd;
//  T() {}
   unsigned char *yp, *up, *vp;
//  T() {}
   static unsigned char *u444, *v444, *u422, *v422;
   /* ITU-R Rec. 709 (1990) */
   /* unspecified */
   /* reserved */
   /* FCC */
   /* ITU-R Rec. 624-4 System B, G */
   /* SMPTE 170M */
//  T() {}
   static double coef[7][3] = {{0.2125, 0.7154, 0.0721}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.30, 0.59, 0.11}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.212, 0.701, 0.087}};
//  T(i) {i==matrix_coefficients}
   /* SMPTE 240M (1987) */
   i = matrix_coefficients;
//  T(i) {i<=8, i<=i#init}
   if (i>8)
//  T(i) {i==3}
      i = 3;
//  T() {}
   cr = coef[i-1][0];
//  T() {}
   cg = coef[i-1][1];
//  T() {}
   cb = coef[i-1][2];
//  T() {}
   cu = 0.5/(1.0-cb);
//  T() {}
   cv = 0.5/(1.0-cr);
//  T() {}
   if (chroma_format==3) {
//  T() {}
      u444 = frame[1];
//  T() {}
      v444 = frame[2];
   }
   else if (!u444) {
//  T() {}
      if (!(u444 = (unsigned char *) malloc(width*height)))
//  T() {0==-1}
         error("malloc failed");
//  T() {}
      if (!(v444 = (unsigned char *) malloc(width*height)))
//  T() {0==-1}
         error("malloc failed");
//  T() {}
      if (chroma_format==1) {
//  T() {}
         if (!(u422 = (unsigned char *) malloc((width>>1)*height)))
//  T() {0==-1}
            error("malloc failed");
//  T() {}
         if (!(v422 = (unsigned char *) malloc((width>>1)*height)))
//  T() {0==-1}
            error("malloc failed");
      }
   }
//  T() {}
   sprintf(name, "%s.ppm", fname);
//  T() {}
   if (!(fd = fopen(name, "rb"))) {
//  T() {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T() {}
   /* skip header */
   _IO_getc(fd);
//  T() {}
   _IO_getc(fd);
//  T() {}
   /* magic number (P6) */
   pbm_getint(fd);
//  T() {}
   pbm_getint(fd);
//  T() {}
   pbm_getint(fd);
//  T(b,g,i,j,r) {0<=i, i+1<=vertical_size}
   /* width height maxcolors */
   for(i = 0; i <= vertical_size-1; i += 1) {
//  T() {}
      yp = frame[0]+i*width;
//  T() {}
      up = u444+i*width;
//  T() {}
      vp = v444+i*width;
//  T(b,g,j,r) {j+1<=horizontal_size, 0<=j}
      for(j = 0; j <= horizontal_size-1; j += 1) {
//  T(r) {}
         r = _IO_getc(fd);
//  T(g) {}
         g = _IO_getc(fd);
//  T(b) {}
         b = _IO_getc(fd);
//  T() {}
         /* convert to YUV */
         y = cr*r+cg*g+cb*b;
//  T() {}
         u = cu*(b-y);
//  T() {}
         v = cv*(r-y);
//  T() {}
         yp[j] = 219.0/256.0*y+16.5;
//  T() {}
         /* nominal range: 16..235 */
         up[j] = 224.0/256.0*u+128.5;
//  T() {}
         /* 16..240 */
         vp[j] = 224.0/256.0*v+128.5;
      }
   }
//  T() {}
   fclose(fd);
//  T() {}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  T() {}
   border_extend(u444, horizontal_size, vertical_size, width, height);
//  T() {}
   border_extend(v444, horizontal_size, vertical_size, width, height);
//  T() {}
   if (chroma_format==2) {
//  T() {}
      conv444to422(u444, frame[1]);
//  T() {}
      conv444to422(v444, frame[2]);
   }
//  T() {}
   if (chroma_format==1) {
//  T() {}
      conv444to422(u444, u422);
//  T() {}
      conv444to422(v444, v422);
//  T() {}
      conv422to420(u422, frame[1]);
//  T() {}
      conv422to420(v422, frame[2]);
   }
}
//  T(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    vertical_size,width) {}
static void read_y_u_v(char *fname, unsigned char *frame[])
{
//  T(i) {}
   int i;
//  T(chrom_hsize,chrom_vsize) {}
   int chrom_hsize, chrom_vsize;
//  T() {}
   char name[128];
//  T() {}
   FILE *fd;
//  T(chrom_hsize) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  T(chrom_vsize) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  T() {}
   sprintf(name, "%s.Y", fname);
//  T() {}
   if (!(fd = fopen(name, "rb"))) {
//  T() {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   for(i = 0; i <= vertical_size-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[0]+i*width, 1, horizontal_size, fd);
//  T() {}
   fclose(fd);
//  T() {}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  T() {}
   sprintf(name, "%s.U", fname);
//  T() {}
   if (!(fd = fopen(name, "rb"))) {
//  T() {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
//  T() {}
   fclose(fd);
//  T() {}
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  T() {}
   sprintf(name, "%s.V", fname);
//  T() {}
   if (!(fd = fopen(name, "rb"))) {
//  T() {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
//  T() {}
   fclose(fd);
//  T() {}
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
}
//  T(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    vertical_size,width) {}
static void read_yuv(char *fname, unsigned char *frame[])
{
//  T(i) {}
   int i;
//  T(chrom_hsize,chrom_vsize) {}
   int chrom_hsize, chrom_vsize;
//  T() {}
   char name[128];
//  T() {}
   FILE *fd;
//  T(chrom_hsize) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  T(chrom_vsize) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  T() {}
   sprintf(name, "%s.yuv", fname);
//  T() {}
   if (!(fd = fopen(name, "rb"))) {
//  T() {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   /* Y */
   for(i = 0; i <= vertical_size-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[0]+i*width, 1, horizontal_size, fd);
//  T() {}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   /* Cb */
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
//  T() {}
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   /* Cr */
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  T(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
//  T() {}
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  T() {}
   fclose(fd);
}
//  T() {}
void stats(void)
{
//  T(i,j,k,mb_type,nmb) {}
   int i, j, k, nmb, mb_type;
//  T(n_backward,n_blocks,n_forward,n_interp,n_intra,n_ncoded,
//    n_skipped) {}
   int n_skipped, n_intra, n_ncoded, n_blocks, n_interp, n_forward, n_backward;
//  T() {}
   struct mbinfo *mbi;
//  T(nmb) {}
   nmb = mb_width*mb_height2;
//  T(n_backward,n_blocks,n_forward,n_interp,n_intra,n_ncoded,
//    n_skipped) {n_backward==0, n_blocks==0, n_forward==0,
//    n_interp==0, n_intra==0, n_ncoded==0, n_skipped==0}
   n_skipped = n_intra = n_ncoded = n_blocks = n_interp = n_forward = n_backward = 0;
//  T(i,k,n_backward,n_blocks,n_forward,n_interp,n_intra,n_ncoded,
//    n_skipped) {0<=k,
//    n_backward+n_forward+n_interp<=k+n_backward#init+n_forward#init+
//    n_interp#init,
//    n_intra+n_ncoded+n_skipped<=k+n_intra#init+n_ncoded#init+
//    n_skipped#init, k+1<=nmb, n_backward#init<=n_backward,
//    n_blocks#init<=n_blocks, n_forward#init<=n_forward,
//    n_interp#init<=n_interp, n_intra#init<=n_intra,
//    n_ncoded#init<=n_ncoded, n_skipped#init<=n_skipped}
   for(k = 0; k <= nmb-1; k += 1) {
//  T() {}
      mbi = mbinfo+k;
//  T(n_intra,n_ncoded,n_skipped) {n_intra#init<=n_intra,
//    n_intra+n_ncoded+n_skipped<=n_intra#init+n_ncoded#init+
//    n_skipped#init+1, n_ncoded#init<=n_ncoded,
//    n_skipped#init<=n_skipped}
      if (mbi->skipped)
//  T(n_skipped) {n_skipped==n_skipped#init+1}
         n_skipped++;
      else if (mbi->mb_type&1)
//  T(n_intra) {n_intra==n_intra#init+1}
         n_intra++;
      else if (!(mbi->mb_type&2))
//  T(n_ncoded) {n_ncoded==n_ncoded#init+1}
         n_ncoded++;
//  T(i,n_blocks) {i+1<=block_count, 0<=i, n_blocks<=i+n_blocks#init,
//    n_blocks#init<=n_blocks}
      for(i = 0; i <= block_count-1; i += 1)
//  T(n_blocks) {n_blocks#init<=n_blocks, n_blocks<=n_blocks#init+1}
         if (mbi->cbp&1<<i)
//  T(n_blocks) {n_blocks==n_blocks#init+1}
            n_blocks++;
//  T(n_backward,n_forward,n_interp) {n_backward#init<=n_backward,
//    n_backward+n_forward+n_interp<=n_backward#init+n_forward#init+
//    n_interp#init+1, n_forward#init<=n_forward,
//    n_interp#init<=n_interp}
      if (mbi->mb_type&8)
//  T(n_forward,n_interp)
//    {n_forward+n_interp==n_forward#init+n_interp#init+1,
//    n_interp#init<=n_interp, n_interp<=n_interp#init+1}
         if (mbi->mb_type&4)
//  T(n_interp) {n_interp==n_interp#init+1}
            n_interp++;
         else
//  T(n_forward) {n_forward==n_forward#init+1}
            n_forward++;
      else if (mbi->mb_type&4)
//  T(n_backward) {n_backward==n_backward#init+1}
         n_backward++;
   }
//  T() {}
   fprintf(statfile, "\npicture statistics:\n");
//  T() {}
   fprintf(statfile, " # of intra coded macroblocks:  %4d (%.1f%%)\n", n_intra, 100.0*(double) n_intra/nmb);
//  T() {}
   fprintf(statfile, " # of coded blocks:             %4d (%.1f%%)\n", n_blocks, 100.0*(double) n_blocks/(block_count*nmb));
//  T() {}
   fprintf(statfile, " # of not coded macroblocks:    %4d (%.1f%%)\n", n_ncoded, 100.0*(double) n_ncoded/nmb);
//  T() {}
   fprintf(statfile, " # of skipped macroblocks:      %4d (%.1f%%)\n", n_skipped, 100.0*(double) n_skipped/nmb);
//  T() {}
   fprintf(statfile, " # of forw. pred. macroblocks:  %4d (%.1f%%)\n", n_forward, 100.0*(double) n_forward/nmb);
//  T() {}
   fprintf(statfile, " # of backw. pred. macroblocks: %4d (%.1f%%)\n", n_backward, 100.0*(double) n_backward/nmb);
//  T() {}
   fprintf(statfile, " # of interpolated macroblocks: %4d (%.1f%%)\n", n_interp, 100.0*(double) n_interp/nmb);
//  T() {}
   fprintf(statfile, "\nmacroblock_type map:\n");
//  T(k) {k==0}
   k = 0;
//  T(i,j,k,mb_type) {0<=j, j+1<=mb_height2, k#init<=k}
   for(j = 0; j <= mb_height2-1; j += 1) {
//  T(i,k,mb_type) {i+k#init==k, 0<=i, i+1<=mb_width}
      for(i = 0; i <= mb_width-1; i += 1) {
//  T() {}
         mbi = mbinfo+k;
//  T(mb_type) {}
         mb_type = mbi->mb_type;
//  T() {}
         if (mbi->skipped)
//  T() {}
            _IO_putc('S', statfile);
         else if (mb_type&1)
//  T() {}
            _IO_putc('I', statfile);
         else {
//  T() {}
            if ((mb_type&(8|4))==8) goto _switch_5_case_8;
//  T() {}
            if ((mb_type&(8|4))==4) goto _switch_5_case_4;
//  T() {}
            if ((mb_type&(8|4))==(8|4)) goto _switch_5_case_12;
//  T() {}
_switch_5_default:            ;
//  T() {}
            _IO_putc('0', statfile);
            goto _break_5;
//  T() {}
_switch_5_case_12:            ;
//  T() {}
            _IO_putc(mbi->motion_type==1?'d':'D', statfile);
            goto _break_5;
//  T() {}
_switch_5_case_4:            ;
//  T() {}
            _IO_putc(mbi->motion_type==1?'b':'B', statfile);
            goto _break_5;
//  T() {}
_switch_5_case_8:            ;
//  T() {}
            _IO_putc(mbi->motion_type==1?'f':mbi->motion_type==3?'p':'F', statfile);
//  T() {}
_break_5:            ;
         }
//  T() {}
         if (mb_type&16)
//  T() {}
            _IO_putc('Q', statfile);
         else if (mb_type&(2|1))
//  T() {}
            _IO_putc(' ', statfile);
         else
//  T() {}
            _IO_putc('N', statfile);
//  T() {}
         _IO_putc(' ', statfile);
//  T(k) {k==k#init+1}
         k++;
      }
//  T() {}
      _IO_putc('\n', statfile);
   }
//  T() {}
   fprintf(statfile, "\nmquant map:\n");
//  T(k) {k==0}
   k = 0;
//  T(i,j,k) {0<=j, j+1<=mb_height2, k#init<=k}
   for(j = 0; j <= mb_height2-1; j += 1) {
//  T(i,k) {i+k#init==k, 0<=i, i+1<=mb_width}
      for(i = 0; i <= mb_width-1; i += 1) {
//  T() {}
         if (i==0||mbinfo[k].mquant!=mbinfo[k-1].mquant)
//  T() {}
            fprintf(statfile, "%3d", mbinfo[k].mquant);
         else
//  T() {}
            fprintf(statfile, "   ");
//  T(k) {k==k#init+1}
         k++;
      }
//  T() {}
      _IO_putc('\n', statfile);
   }
}
//  T() {}
static void calcSNR1(unsigned char *org, unsigned char *rec, int lx, int w, int h, double *pv, double *pe)
{
//  T(i,j) {}
   int i, j;
//  T() {}
   double v1, s1, s2, e2;
//  T() {}
   s1 = s2 = e2 = 0.0;
//  T(i,j) {j+1<=h, 0<=j}
   for(j = 0; j <= h-1; j += 1) {
//  T(i) {0<=i, i+1<=w}
      for(i = 0; i <= w-1; i += 1) {
//  T() {}
         v1 = org[i];
//  T() {}
         s1 += v1;
//  T() {}
         s2 += v1*v1;
//  T() {}
         v1 -= rec[i];
//  T() {}
         e2 += v1*v1;
      }
//  T() {}
      org += lx;
//  T() {}
      rec += lx;
   }
//  T() {}
   s1 /= w*h;
//  T() {}
   s2 /= w*h;
//  T() {}
   e2 /= w*h;
//  T() {}
   /* prevent division by zero in calcSNR() */
   if (e2==0.0)
//  T() {}
      e2 = 0.00001;
//  T() {}
   *pv = s2-s1*s1;
//  T() {}
   /* variance */
   *pe = e2;
}
//  T() {}
void transform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
//  T(0`j1,cc,i,i1,j,k,lx,n,offs) {}
   int i, j, i1, j1, k, n, cc, offs, lx;
//  T(k) {k==0}
   k = 0;
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
   for(j = 0; j <= height2-1; j += 16)
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
      for(i = 0; i <= width-1; i += 16) {
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
         for(n = 0; n <= block_count-1; n += 1) {
//  T(cc) {}
            cc = n<4?0:(n&1)+1;
//  T(0`j1,i1,lx,offs) {}
            /* color component index */
            if (cc==0) {
//  T(lx,offs) {}
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
//  T(offs) {}
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
//  T(lx) {lx==2width}
                  lx = width<<1;
               }
               else {
//  T(offs) {}
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
//  T(lx) {lx==width2}
                  lx = width2;
               }
//  T(offs) {}
               if (pict_struct==2)
//  T(offs) {offs#init+width==offs}
                  offs += width;
            }
            else {
//  T(i1) {}
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
//  T(0`j1) {}
               j1 = chroma_format!=1?j:j>>1;
//  T(lx,offs) {}
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
//  T(offs) {}
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
//  T(lx) {2chrom_width==lx}
                  lx = chrom_width<<1;
               }
               else {
//  T(offs) {}
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
//  T(lx) {chrom_width2==lx}
                  lx = chrom_width2;
               }
//  T(offs) {}
               if (pict_struct==2)
//  T(offs) {chrom_width+offs#init==offs}
                  offs += chrom_width;
            }
//  T(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
            sub_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
//  T() {}
            fdct(blocks[k*block_count+n]);
         }
//  T(k) {k==k#init+1}
         k++;
      }
}
//  T() {}
static void add_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
//  T(i,j) {}
   int i, j;
//  T(i,j) {0<=j, j<=7}
   for(j = 0; j <= 7; j += 1) {
//  T(i) {0<=i, i<=7}
      for(i = 0; i <= 7; i += 1)
//  T() {}
         cur[i] = clp[blk[i]+pred[i]];
//  T() {}
      blk += 8;
//  T() {}
      cur += lx;
//  T() {}
      pred += lx;
   }
}
//  T() {}
static void sub_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
//  T(i,j) {}
   int i, j;
//  T(i,j) {0<=j, j<=7}
   for(j = 0; j <= 7; j += 1) {
//  T(i) {0<=i, i<=7}
      for(i = 0; i <= 7; i += 1)
//  T() {}
         blk[i] = cur[i]-pred[i];
//  T() {}
      blk += 8;
//  T() {}
      cur += lx;
//  T() {}
      pred += lx;
   }
}
//  T(bitcnt_EOP) {}
void vbv_end_of_picture(void)
{
//  T(bitcnt_EOP) {bitcnt_EOP+putbits!:outcnt==8putbits!:bytecnt+8}
   bitcnt_EOP = bitcount();
//  T(bitcnt_EOP) {}
   bitcnt_EOP = bitcnt_EOP+7&~7;
}
//  T() {}
void writeframe(char *fname, unsigned char *frame[])
{
//  T(chrom_hsize,chrom_vsize) {}
   int chrom_hsize, chrom_vsize;
//  T() {}
   char name[128];
//  T() {}
   FILE *fd;
//  T(chrom_hsize) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  T(chrom_vsize) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  T() {}
   if (fname[0]=='-')
//  T() {}
      return;
//  T() {}
   /* Y */
   sprintf(name, "%s.Y", fname);
//  T() {}
   if (!(fd = fopen(name, "wb"))) {
//  T() {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T() {}
   fwrite(frame[0], 1, horizontal_size*vertical_size, fd);
//  T() {}
   fclose(fd);
//  T() {}
   /* Cb */
   sprintf(name, "%s.U", fname);
//  T() {}
   if (!(fd = fopen(name, "wb"))) {
//  T() {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T() {}
   fwrite(frame[1], 1, chrom_hsize*chrom_vsize, fd);
//  T() {}
   fclose(fd);
//  T() {}
   /* Cr */
   sprintf(name, "%s.V", fname);
//  T() {}
   if (!(fd = fopen(name, "wb"))) {
//  T() {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  T() {0==-1}
      error(errortext);
   }
//  T() {}
   fwrite(frame[2], 1, chrom_hsize*chrom_vsize, fd);
//  T() {}
   fclose(fd);
}
Preconditions for "predict!predict_mb"
//  P() {lx==width, pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
static void predict_mb(unsigned char *oldref[], unsigned char *newref[], unsigned char *cur[], int lx, int bx, int by, int pict_type, int pict_struct, int mb_type, int motion_type, int secondfield, int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2])
{
//  P() {lx==width, pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
   int addflag, currentfield;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   unsigned char **predframe;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   int DMV[2][2];
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   if (mb_type&1) {
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
      clearblock(cur, bx, by);
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
      return;
   }
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   addflag = 0;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
   if (mb_type&8||pict_type==2) {
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
      /* forward prediction, including zero MV in P pictures */
      if (pict_struct==3)
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         if (motion_type==2||!(mb_type&8))
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* frame-based prediction in frame picture */
            pred(oldref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==1) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==1,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][0][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(oldref, mv_field_sel[0][0], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==1,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* bottom field prediction */
            pred(oldref, mv_field_sel[1][0], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][0][0], PMV[1][0][1]>>1, 0);
         }
         else if (motion_type==3) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* dual prime prediction */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]>>1);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict top field from top field */
            pred(oldref, 0, cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict bottom field from bottom field */
            pred(oldref, 1, cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict and add to top field from bottom field */
            pred(oldref, 1, cur, 0, lx<<1, 16, 8, bx, by>>1, DMV[0][0], DMV[0][1], 1);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict and add to bottom field from top field */
            pred(oldref, 0, cur, 1, lx<<1, 16, 8, bx, by>>1, DMV[1][0], DMV[1][1], 1);
         }
         else
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* invalid motion_type in frame picture */
            /* first prediction is stored, second is added and averaged */
            /* frame picture */
            if (!quiet)
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      else {
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* field picture */
         currentfield = pict_struct==2;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* determine which frame to use for prediction */
         if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[0][0])
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, pict_type==2, secondfield==1, 0<=bx,
//    bx+1<=lx, 0<=by}
            predframe = newref;
         else
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         if (motion_type==1||!(mb_type&8))
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in field picture */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==2) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* determine which frame to use for lower half prediction */
            if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[1][0])
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, pict_type==2, secondfield==1, 0<=bx,
//    bx+1<=lx, 0<=by}
               predframe = newref;
            else
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
               predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* lower half */
            pred(predframe, mv_field_sel[1][0], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][0][0], PMV[1][0][1], 0);
         }
         else if (motion_type==3) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* dual prime prediction */
            /* determine which frame to use for prediction */
            if (secondfield)
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, secondfield==1, 0<=bx, bx+1<=lx,
//    0<=by}
               predframe = newref;
            else
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, secondfield==0, 0<=bx, bx+1<=lx,
//    0<=by}
               predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict from field of same parity */
            pred(oldref, currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict from field of opposite parity */
            pred(predframe, !currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, DMV[0][0], DMV[0][1], 1);
         }
         else
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* invalid motion_type in field picture */
            if (!quiet)
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      }
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
      addflag = 1;
   }
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
   if (mb_type&4)
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
      /* backward prediction */
      if (pict_struct==3)
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* frame picture */
         if (motion_type==2)
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==3, pict_struct==3, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* frame-based prediction in frame picture */
            pred(newref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else {
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][1][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(newref, mv_field_sel[0][1], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][1][0], PMV[0][1][1]>>1, addflag);
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* bottom field prediction */
            pred(newref, mv_field_sel[1][1], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][1][0], PMV[1][1][1]>>1, addflag);
         }
      else {
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         /* field picture */
         currentfield = pict_struct==2;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         if (motion_type==1)
//  P(addflag,currentfield) {lx==width, motion_type==1,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* field-based prediction in field picture */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else if (motion_type==2) {
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* lower half */
            pred(newref, mv_field_sel[1][1], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][1][0], PMV[1][1][1], addflag);
         }
         else
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* invalid motion_type in field picture */
            if (!quiet)
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      }
}
Preconditions for %ALLFUNC
//  P() {}
void alignbits(void)
{
//  P() {}
   if (outcnt!=8)
//  P() {}
      putbits(0, outcnt);
}
//  P() {}
int bitcount(void)
{
//  P() {}
   return 8*bytecnt+(8-outcnt);
}
//  P() {}
void calcSNR(unsigned char *org[3], unsigned char *rec[3])
{
//  P() {}
   int w, h, offs;
//  P(h,offs,w) {}
   double v, e;
//  P(h,offs,w) {}
   w = horizontal_size;
//  P(h,offs,w) {horizontal_size==w}
   h = pict_struct==3?vertical_size:vertical_size>>1;
//  P(h,offs,w) {horizontal_size==w}
   offs = pict_struct==2?width:0;
//  P(h,offs,w) {horizontal_size==w}
   calcSNR1(org[0]+offs, rec[0]+offs, width2, w, h, &v, &e);
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   fprintf(statfile, "Y: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   if (chroma_format!=3) {
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
      w >>= 1;
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
      offs >>= 1;
   }
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   if (chroma_format==1)
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {chroma_format==1}
      h >>= 1;
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[1]+offs, rec[1]+offs, chrom_width2, w, h, &v, &e);
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   fprintf(statfile, "U: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   calcSNR1(org[2]+offs, rec[2]+offs, chrom_width2, w, h, &v, &e);
//  P(chrom_width2,chroma_format,h,horizontal_size,offs,pict_struct,
//    vertical_size,w,width,width2) {}
   fprintf(statfile, "V: variance=%4.4g, MSE=%3.3g (%3.3g dB), SNR=%3.3g dB\n", v, e, 10.0*log10(255.0*255.0/e), 10.0*log10(v/e));
}
//  P() {}
void calc_vbv_delay(void)
{
//  P() {}
   double picture_delay;
//  P() {}
   static double next_ip_delay;
   /* due to frame reordering delay */
//  P() {}
   static double decoding_time;
//  P() {}
   /* number of 1/90000 s ticks until next picture is to be decoded */
   if (pict_type==3)
//  P() {pict_type==3}
      if (prog_seq)
//  P() {pict_type==3}
         if (!repeatfirst)
//  P() {pict_type==3, repeatfirst<=0}
            picture_delay = 90000.0/frame_rate;
         else if (!topfirst)
//  P() {pict_type==3, 1<=repeatfirst, topfirst<=0}
            picture_delay = 90000.0*2.0/frame_rate;
         else
//  P() {pict_type==3, 1<=repeatfirst, 1<=topfirst}
            picture_delay = 90000.0*3.0/frame_rate;
      else
//  P() {pict_type==3, prog_seq==0}
         /* interlaced */
         if (fieldpic)
//  P() {pict_type==3, prog_seq==0}
            picture_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
//  P() {fieldpic==0, pict_type==3, prog_seq==0, repeatfirst<=0}
            picture_delay = 90000.0*2.0/(2.0*frame_rate);
         else
//  P() {fieldpic==0, pict_type==3, prog_seq==0, 1<=repeatfirst}
            picture_delay = 90000.0*3.0/(2.0*frame_rate);
   else {
//  P() {}
      /* I or P picture */
      if (fieldpic)
//  P() {}
         if (topfirst==(pict_struct==1))
//  P() {}
            /* first field */
            picture_delay = 90000.0/(2.0*frame_rate);
         else
//  P() {}
            /* second field */
            /* take frame reordering delay into account */
            picture_delay = next_ip_delay-90000.0/(2.0*frame_rate);
      else
//  P() {fieldpic==0}
         /* frame picture */
         /* take frame reordering delay into account*/
         picture_delay = next_ip_delay;
//  P() {}
      if (!fieldpic||topfirst!=(pict_struct==1))
//  P() {}
         /* frame picture or second field */
         if (prog_seq)
//  P() {}
            if (!repeatfirst)
//  P() {repeatfirst<=0}
               next_ip_delay = 90000.0/frame_rate;
            else if (!topfirst)
//  P() {1<=repeatfirst, topfirst<=0}
               next_ip_delay = 90000.0*2.0/frame_rate;
            else
//  P() {1<=repeatfirst, 1<=topfirst}
               next_ip_delay = 90000.0*3.0/frame_rate;
         else if (fieldpic)
//  P() {prog_seq==0}
            next_ip_delay = 90000.0/(2.0*frame_rate);
         else if (!repeatfirst)
//  P() {fieldpic==0, prog_seq==0, repeatfirst<=0}
            next_ip_delay = 90000.0*2.0/(2.0*frame_rate);
         else
//  P() {fieldpic==0, prog_seq==0, 1<=repeatfirst}
            next_ip_delay = 90000.0*3.0/(2.0*frame_rate);
   }
//  P() {}
   if (decoding_time==0.0) {
//  P() {}
      /* first call of calc_vbv_delay */
      /* we start with a 7/8 filled VBV buffer (12.5% back-off) */
      picture_delay = vbv_buffer_size*16384*7/8*90000.0/bit_rate;
//  P() {}
      if (fieldpic)
//  P() {}
         next_ip_delay = (int) (90000.0/frame_rate+0.5);
   }
//  P() {}
   if (!low_delay&&decoding_time<bitcnt_EOP*90000.0/bit_rate)
//  P() {low_delay<=0}
      /* picture not completely in buffer at intended decoding time */
      /* VBV checks */
      /* check for underflow (previous picture) */
      if (!quiet)
//  P() {low_delay<=0, quiet<=0}
         fprintf(stderr, "vbv_delay underflow! (decoding_time=%.1f, t_EOP=%.1f\n)", decoding_time, bitcnt_EOP*90000.0/bit_rate);
//  P() {}
   /* when to decode current frame */
   decoding_time += picture_delay;
//  P() {}
   /* warning: bitcount() may overflow (e.g. after 9 min. at 8 Mbit/s */
   vbv_delay = (int) (decoding_time-bitcount()*90000.0/bit_rate);
//  P(vbv_delay) {}
   if (decoding_time-bitcnt_EOP*90000.0/bit_rate>vbv_buffer_size*16384*90000.0/bit_rate)
//  P(vbv_delay) {}
      /* check for overflow (current picture) */
      if (!quiet)
//  P(vbv_delay) {quiet<=0}
         fprintf(stderr, "vbv_delay overflow!\n");
//  P(vbv_delay) {}
   fprintf(statfile, "\nvbv_delay=%d (bitcount=%d, decoding_time=%.2f, bitcnt_EOP=%d)\n", vbv_delay, bitcount(), decoding_time, bitcnt_EOP);
//  P(vbv_delay) {}
   if (vbv_delay<0) {
//  P(vbv_delay) {vbv_delay+1<=0}
      if (!quiet)
//  P(vbv_delay) {quiet<=0, vbv_delay+1<=0}
         fprintf(stderr, "vbv_delay underflow: %d\n", vbv_delay);
//  P(vbv_delay) {vbv_delay+1<=0}
      vbv_delay = 0;
   }
//  P(vbv_delay) {0<=vbv_delay}
   if (vbv_delay>65535) {
//  P(vbv_delay) {65536<=vbv_delay}
      if (!quiet)
//  P(vbv_delay) {quiet<=0, 65536<=vbv_delay}
         fprintf(stderr, "vbv_delay overflow: %d\n", vbv_delay);
//  P(vbv_delay) {65536<=vbv_delay}
      vbv_delay = 65535;
   }
}
//  P() {}
void dct_type_estimation(unsigned char *pred, unsigned char *cur, struct mbinfo *mbi)
{
//  P() {}
   short blk0[128], blk1[128];
//  P() {}
   int i, j, i0, j0, k, offs, s0, s1, sq0, sq1, s01;
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {}
   double d, r;
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {}
   k = 0;
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {k==0}
   for(j0 = 0; j0 <= height2-1; j0 += 16)
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {0<=0`j0, 0`j0+1<=height2,
//    0<=k}
      for(i0 = 0; i0 <= width-1; i0 += 16) {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {0<=0`j0, 0`j0+1<=height2,
//    0<=i0, i0<=16k, i0+1<=width}
         if (frame_pred_dct||pict_struct!=3)
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {0<=0`j0, 0`j0+1<=height2,
//    0<=i0, i0<=16k, i0+1<=width}
            mbi[k].dct_type = 0;
         else {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i0, i0<=16k, i0+1<=width}
            /* interlaced frame picture */
            /*
                     * calculate prediction error (cur-pred) for top (blk0)
                     * and bottom field (blk1)
                     */
            for(j = 0; j <= 7; j += 1) {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i0, i0<=16k, i0+1<=width,
//    0<=j, j<=7}
               offs = width*((j<<1)+j0)+i0;
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i0, i0<=16k, i0+1<=width,
//    0<=j, j<=7}
               for(i = 0; i <= 15; i += 1) {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=15, 0<=i0, i0<=16k,
//    i0+1<=width, 0<=j, j<=7}
                  blk0[16*j+i] = cur[offs]-pred[offs];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=15, 0<=i0, i0<=16k,
//    i0+1<=width, 0<=j, j<=7}
                  blk1[16*j+i] = cur[offs+width]-pred[offs+width];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {pict_struct==3, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=15, 0<=i0, i0<=16k,
//    i0+1<=width, 0<=j, j<=7}
                  offs++;
               }
            }
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==16, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width}
            /* correlate fields */
            s0 = s1 = sq0 = sq1 = s01 = 0;
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==16, j==8,
//    pict_struct==3, s0==0, s01==0, s1==0, sq0==0, sq1==0, 0<=0`j0,
//    0`j0+1<=height2, frame_pred_dct<=0, 0<=i0, i0<=16k, i0+1<=width}
            for(i = 0; i <= 127; i += 1) {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {j==8, pict_struct==3,
//    0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=127,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               s0 += blk0[i];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {j==8, pict_struct==3,
//    0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=127,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               sq0 += blk0[i]*blk0[i];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {j==8, pict_struct==3,
//    0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=127,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               s1 += blk1[i];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {j==8, pict_struct==3,
//    0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=127,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               sq1 += blk1[i]*blk1[i];
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {j==8, pict_struct==3,
//    0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0, 0<=i, i<=127,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               s01 += blk0[i]*blk1[i];
            }
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
            d = (sq0-s0*s0/128.0)*(sq1-s1*s1/128.0);
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
            if (d>0.0) {
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               r = (s01-s0*s1/128.0)/sqrt(d);
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               if (r>0.5)
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
                  mbi[k].dct_type = 0;
               else
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
                  mbi[k].dct_type = 1;
            }
            else
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {i==128, j==8,
//    pict_struct==3, 0<=0`j0, 0`j0+1<=height2, frame_pred_dct<=0,
//    0<=i0, i0<=16k, i0+1<=width, 0<=sq0, 0<=sq1}
               mbi[k].dct_type = 1;
         }
//  P(0`j0,i,i0,j,k,offs,s0,s01,s1,sq0,sq1) {0<=0`j0, 0`j0+1<=height2,
//    0<=i0, i0<=16k, i0+1<=width}
         k++;
      }
}
//  P() {}
void error(char *text)
{
//  P() {}
   fprintf(stderr, text);
//  P() {}
   _IO_putc('\n', stderr);
//  P() {}
   exit(1);
}
//  P() {}
void fdct(short *block)
{
//  P() {}
   int i, j, k;
//  P(i,j,k) {}
   double s;
//  P(i,j,k) {}
   double tmp[64];
//  P(i,j,k) {}
   for(i = 0; i <= 7; i += 1)
//  P(i,j,k) {0<=i, i<=7}
      for(j = 0; j <= 7; j += 1) {
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7}
         s = 0.0;
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7}
         for(k = 0; k <= 7; k += 1)
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7, 0<=k, k<=7}
            s += c[j][k]*block[8*i+k];
//  P(i,j,k) {k==8, 0<=i, i<=7, 0<=j, j<=7}
         tmp[8*i+j] = s;
      }
//  P(i,j,k) {i==8, j==8, k==8}
   for(j = 0; j <= 7; j += 1)
//  P(i,j,k) {0<=j, j<=7}
      for(i = 0; i <= 7; i += 1) {
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7}
         s = 0.0;
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7}
         for(k = 0; k <= 7; k += 1)
//  P(i,j,k) {0<=i, i<=7, 0<=j, j<=7, 0<=k, k<=7}
            s += c[i][k]*tmp[8*k+j];
//  P(i,j,k) {k==8, 0<=i, i<=7, 0<=j, j<=7}
         block[8*i+j] = (int) floor(s+0.499999);
      }
}
//  P() {}
void idct(short *block)
{
//  P() {}
   int i;
//  P(i) {}
   for(i = 0; i <= 7; i += 1)
//  P(i) {0<=i, i<=7}
      idctrow(block+8*i);
//  P(i) {i==8}
   for(i = 0; i <= 7; i += 1)
//  P(i) {0<=i, i<=7}
      idctcol(block+i);
}
//  P() {}
static void idctcol(short *blk)
{
//  P() {}
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   /* shortcut */
   if (!((x1 = blk[8*4]<<8)|(x2 = blk[8*6])|(x3 = blk[8*2])|(x4 = blk[8*1])|(x5 = blk[8*7])|(x6 = blk[8*5])|(x7 = blk[8*3]))) {
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
      blk[8*0] = blk[8*1] = blk[8*2] = blk[8*3] = blk[8*4] = blk[8*5] = blk[8*6] = blk[8*7] = iclp[blk[8*0]+32>>6];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
      return;
   }
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   x0 = (blk[8*0]<<8)+8192;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   /* first stage */
   x8 = 565*(x4+x5)+4;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {565x4+565x5==x8-4}
   x4 = x8+(2841-565)*x4>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {2841x8<=4520x4+1285940x5+13059,
//    4520x4+1285940x5+9104<=2841x8}
   x5 = x8-(2841+565)*x5>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8)
//    {5143760x5+4195253x8<=7697560x4+22239477,
//    7697560x4+11003322<=5143760x5+4195253x8}
   x8 = 2408*(x6+x7)+4;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {2408x6+2408x7==x8-4}
   x6 = x8-(2408-1609)*x6>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {1923992x7+1609x8<=19264x6+13660,
//    19264x6<=1923992x7+1609x8+3196}
   x7 = x8-(2408+1609)*x7>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8)
//    {8387345x8<=77383488x6+15391936x7+68340164,
//    77383488x6+15391936x7<=8387345x8+12838332}
   /* second stage */
   x8 = x0+x1;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+x1==x8}
   x0 -= x1;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+2x1==x8}
   x1 = 1108*(x3+x2)+4;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {1108x2+1108x3==x1-4}
   x2 = x1-(2676+1108)*x2>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {1048168x3+1845<=669x1+2216x2,
//    669x1+2216x2<=1048168x3+3784}
   x3 = x1+(2676-1108)*x3>>3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8)
//    {1048168x3+361620<=262145x1+434336x2,
//    262145x1+434336x2<=1048168x3+1658811}
   x1 = x4+x6;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x4+x6==x1}
   x4 -= x6;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x4+2x6==x1}
   x6 = x5+x7;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x5+x7==x6}
   x5 -= x7;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x5+2x7==x6}
   /* third stage */
   x7 = x8+x3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x3+x8==x7}
   x8 -= x3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {2x3+x8==x7}
   x3 = x0+x2;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+x2==x3}
   x0 -= x2;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+2x2==x3}
   x2 = 181*(x4+x5)+128>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {181x4+181x5<=256x2+127,
//    256x2<=181x4+181x5+128}
   x4 = 181*(x4-x5)+128>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   /* fourth stage */
   blk[8*0] = iclp[x7+x1>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*1] = iclp[x3+x2>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*2] = iclp[x0+x4>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*3] = iclp[x8+x6>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*4] = iclp[x8-x6>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*5] = iclp[x0-x4>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*6] = iclp[x3-x2>>14];
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[8*7] = iclp[x7-x1>>14];
}
//  P() {}
static void idctrow(short *blk)
{
//  P() {}
   int x0, x1, x2, x3, x4, x5, x6, x7, x8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   /* shortcut */
   if (!((x1 = blk[4]<<11)|(x2 = blk[6])|(x3 = blk[2])|(x4 = blk[1])|(x5 = blk[7])|(x6 = blk[5])|(x7 = blk[3]))) {
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
      blk[0] = blk[1] = blk[2] = blk[3] = blk[4] = blk[5] = blk[6] = blk[7] = blk[0]<<3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
      return;
   }
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   x0 = (blk[0]<<11)+128;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {}
   /* for proper rounding in the fourth stage */
   /* first stage */
   x8 = 565*(x4+x5);
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {565x4+565x5==x8}
   x4 = x8+(2841-565)*x4;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {565x4+1285940x5==2841x8}
   x5 = x8-(2841+565)*x5;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {642970x5+4195253x8==962195x4}
   x8 = 2408*(x6+x7);
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {2408x6+2408x7==x8}
   x6 = x8-(2408-1609)*x6;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {1923992x7+1609x8==2408x6}
   x7 = x8-(2408+1609)*x7;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {9672936x6+1923992x7==8387345x8}
   /* second stage */
   x8 = x0+x1;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+x1==x8}
   x0 -= x1;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+2x1==x8}
   x1 = 1108*(x3+x2);
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {1108x2+1108x3==x1}
   x2 = x1-(2676+1108)*x2;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {669x1+277x2==1048168x3}
   x3 = x1+(2676-1108)*x3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {262145x1+54292x2==131021x3}
   x1 = x4+x6;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x4+x6==x1}
   x4 -= x6;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x4+2x6==x1}
   x6 = x5+x7;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x5+x7==x6}
   x5 -= x7;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x5+2x7==x6}
   /* third stage */
   x7 = x8+x3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x3+x8==x7}
   x8 -= x3;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {2x3+x8==x7}
   x3 = x0+x2;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+x2==x3}
   x0 -= x2;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {x0+2x2==x3}
   x2 = 181*(x4+x5)+128>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {181x4+181x5<=256x2+127,
//    256x2<=181x4+181x5+128}
   x4 = 181*(x4-x5)+128>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   /* fourth stage */
   blk[0] = x7+x1>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[1] = x3+x2>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[2] = x0+x4>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[3] = x8+x6>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[4] = x8-x6>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[5] = x0-x4>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[6] = x3-x2>>8;
//  P(x0,x1,x2,x3,x4,x5,x6,x7,x8) {128x4+181x5<=128x2+127,
//    128x2<=128x4+181x5+127}
   blk[7] = x7-x1>>8;
}
//  P() {}
void init_fdct(void)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   double s;
//  P(i,j) {}
   for(i = 0; i <= 7; i += 1) {
//  P(i,j) {0<=i, i<=7}
      s = i==0?sqrt(0.125):0.5;
//  P(i,j) {0<=i, i<=7}
      for(j = 0; j <= 7; j += 1)
//  P(i,j) {0<=i, i<=7, 0<=j, j<=7}
         c[i][j] = s*cos(3.14159265358979323846/8.0*i*(j+0.5));
   }
}
//  P() {}
void init_idct(void)
{
//  P() {}
   int i;
//  P(i) {}
   iclp = iclip+512;
//  P(i) {}
   for(i = -512; i <= 511; i += 1)
//  P(i) {0<=i+512, i<=511}
      iclp[i] = i<-256?-256:i>255?255:i;
}
//  P() {}
void initbits(void)
{
//  P() {}
   outcnt = 8;
//  P(outcnt) {outcnt==8}
   bytecnt = 0;
}
//  P() {}
void iquant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i, val, sum;
//  P(i,sum,val) {}
   if (mpeg1)
//  P(i,sum,val) {}
      iquant1_intra(src, dst, dc_prec, quant_mat, mquant);
   else {
//  P(i,sum,val) {mpeg1==0}
      sum = dst[0] = src[0]<<3-dc_prec;
//  P(i,sum,val) {mpeg1==0}
      for(i = 1; i <= 63; i += 1) {
//  P(i,sum,val) {mpeg1==0, 1<=i, i<=63}
         val = (int) (src[i]*quant_mat[i]*mquant)/16;
//  P(i,sum,val) {mpeg1==0, 1<=i, i<=63}
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
//  P(i,sum,val) {i==64, mpeg1==0}
      /* mismatch control */
      if ((sum&1)==0)
//  P(i,sum,val) {i==64, mpeg1==0}
         dst[63] ^= 1;
   }
}
//  P() {}
void iquant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i, val, sum;
//  P(i,sum,val) {}
   if (mpeg1)
//  P(i,sum,val) {}
      iquant1_non_intra(src, dst, quant_mat, mquant);
   else {
//  P(i,sum,val) {mpeg1==0}
      sum = 0;
//  P(i,sum,val) {mpeg1==0, sum==0}
      for(i = 0; i <= 63; i += 1) {
//  P(i,sum,val) {mpeg1==0, 0<=i, i<=63}
         val = src[i];
//  P(i,sum,val) {mpeg1==0, 0<=i, i<=63}
         if (val!=0)
//  P(i,sum,val) {mpeg1==0, 0<=i, i<=63}
            val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
//  P(i,sum,val) {mpeg1==0, 0<=i, i<=63}
         sum += dst[i] = val>2047?2047:val<-2048?-2048:val;
      }
//  P(i,sum,val) {i==64, mpeg1==0}
      /* mismatch control */
      if ((sum&1)==0)
//  P(i,sum,val) {i==64, mpeg1==0}
         dst[63] ^= 1;
   }
}
//  P() {}
void itransform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
//  P() {}
   int i, j, i1, j1, k, n, cc, offs, lx;
//  P(0`j1,cc,i,i1,j,k,lx,n,offs) {}
   k = 0;
//  P(0`j1,cc,i,i1,j,k,lx,n,offs) {k==0}
   for(j = 0; j <= height2-1; j += 16)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=j}
      for(i = 0; i <= width-1; i += 16) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=i}
         for(n = 0; n <= block_count-1; n += 1) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            cc = n<4?0:(n&1)+1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            /* color component index */
            if (cc==0) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==3, 0<=n}
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==3, 0<=n}
                  lx = width<<1;
               }
               else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
                  lx = width2;
               }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
               if (pict_struct==2)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==2, 0<=n}
                  offs += width;
            }
            else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               j1 = chroma_format!=1?j:j>>1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==3, 0<=n}
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==3, 0<=n}
                  lx = chrom_width<<1;
               }
               else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
                  lx = chrom_width2;
               }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               if (pict_struct==2)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==2, 0<=n}
                  offs += chrom_width;
            }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            idct(blocks[k*block_count+n]);
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
            add_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
         }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
         k++;
      }
}
//  P() {}
int main(int argc, char *argv[])
{
//  P() {}
   if (1) {
//  P() {}
      if (argc!=3) {
//  P() {}
         printf("\n%s, %s\n", version, author);
//  P() {}
         printf("Usage: mpeg2encode in.par out.m2v\n");
//  P() {}
         exit(0);
      }
//  P() {argc==3}
      /* read parameter file */
      readparmfile(argv[1]);
//  P(argc) {}
      /* read quantization matrices */
      readquantmat();
//  P(argc) {}
      /* open output file */
      if (!(outfile = fopen(argv[2], "wb"))) {
//  P(argc) {}
         sprintf(errortext, "Couldn't create output file %s", argv[2]);
//  P(argc) {}
         error(errortext);
      }
//  P(argc) {}
      init();
//  P(argc) {}
      putseq();
//  P(argc) {}
      fclose(outfile);
//  P(argc) {}
      fclose(statfile);
   }
//  P(argc) {}
   return 0;
}
//  P() {8<=h, h<=16}
static int bdist1(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
//  P() {8<=h, h<=16}
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
//  P() {8<=h, h<=16}
   int i, j;
//  P(i,j) {8<=h, h<=16}
   int s, v;
//  P(i,j,s,v) {8<=h, h<=16}
   pfa = pf+hxf;
//  P(i,j,s,v) {8<=h, h<=16}
   pfb = pf+lx*hyf;
//  P(i,j,s,v) {8<=h, h<=16}
   pfc = pfb+hxf;
//  P(i,j,s,v) {8<=h, h<=16}
   pba = pb+hxb;
//  P(i,j,s,v) {8<=h, h<=16}
   pbb = pb+lx*hyb;
//  P(i,j,s,v) {8<=h, h<=16}
   pbc = pbb+hxb;
//  P(i,j,s,v) {8<=h, h<=16}
   s = 0;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
         if (v>=0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s, 0<=v}
            s += v;
         else
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s, v+1<=0}
            s -= v;
      }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      p2 += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pf += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pfa += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pfb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pfc += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pba += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pbb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
      pbc += lx-16;
   }
//  P(i,j,s,v) {h==j, i==16, 8<=h, h<=16, 0<=s+v, v<=s}
   return s;
}
//  P() {8<=h, h<=16}
static int bdist2(unsigned char *pf, unsigned char *pb, unsigned char *p2, int lx, int hxf, int hyf, int hxb, int hyb, int h)
{
//  P() {8<=h, h<=16}
   unsigned char *pfa, *pfb, *pfc, *pba, *pbb, *pbc;
//  P() {8<=h, h<=16}
   int i, j;
//  P(i,j) {8<=h, h<=16}
   int s, v;
//  P(i,j,s,v) {8<=h, h<=16}
   pfa = pf+hxf;
//  P(i,j,s,v) {8<=h, h<=16}
   pfb = pf+lx*hyf;
//  P(i,j,s,v) {8<=h, h<=16}
   pfc = pfb+hxf;
//  P(i,j,s,v) {8<=h, h<=16}
   pba = pb+hxb;
//  P(i,j,s,v) {8<=h, h<=16}
   pbb = pb+lx*hyb;
//  P(i,j,s,v) {8<=h, h<=16}
   pbc = pbb+hxb;
//  P(i,j,s,v) {8<=h, h<=16}
   s = 0;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
         v = (((unsigned int) (*pf++ +*pfa++ +*pfb++ +*pfc++ +2)>>2)+((unsigned int) (*pb++ +*pba++ +*pbb++ +*pbc++ +2)>>2)+1>>1)-*p2++;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
         s += v*v;
      }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      p2 += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pf += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pfa += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pfb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pfc += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pba += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pbb += lx-16;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
      pbc += lx-16;
   }
//  P(i,j,s,v) {h==j, i==16, 8<=h, h<=16, 0<=s}
   return s;
}
//  P() {8<=h, h<=16}
static int dist1(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h, int distlim)
{
//  P() {8<=h, h<=16}
   unsigned char *p1, *p1a, *p2;
//  P() {8<=h, h<=16}
   int i, j;
//  P(i,j) {8<=h, h<=16}
   int s, v;
//  P(i,j,s,v) {8<=h, h<=16}
   s = 0;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   p1 = blk1;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   p2 = blk2;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   if (!hx&&!hy) {
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, hy<=0}
      j = 0;
l99999:      ;
//  P(i,j,s,v) {8<=h, h<=16, j<=h, hx<=0, hy<=0, 0<=j, 0<=s}
      if (!(j<h)) goto _break_1;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s}
      if ((v = p1[0]-p2[0])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[1]-p2[1])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[2]-p2[2])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[3]-p2[3])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[4]-p2[4])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[5]-p2[5])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[6]-p2[6])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[7]-p2[7])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[8]-p2[8])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[9]-p2[9])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[10]-p2[10])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[11]-p2[11])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[12]-p2[12])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[13]-p2[13])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[14]-p2[14])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if ((v = p1[15]-p2[15])<0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, v+1<=0}
         v = -v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s, 0<=v}
      s += v;
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, v<=s, 0<=v}
      if (s>=distlim) goto _break_1;
//  P(i,j,s,v) {s+1<=distlim, 8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j,
//    v<=s, 0<=v}
      p1 += lx;
//  P(i,j,s,v) {s+1<=distlim, 8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j,
//    v<=s, 0<=v}
      p2 += lx;
//  P(i,j,s,v) {s+1<=distlim, 8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j,
//    v<=s, 0<=v}
      j++;
      goto l99999;
//  P(i,j,s,v) {8<=h, h<=16, j<=h, hx<=0, hy<=0, 0<=j, 0<=s}
_break_1:      ;
   }
   else if (hx&&!hy)
//  P(i,j,s,v) {s==0, 8<=h, h<=16, 1<=hx, hy<=0}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            if (v>=0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s, 0<=v}
               s += v;
            else
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s, v+1<=0}
               s -= v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j,
//    0<=s+v, v<=s}
         p1 += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j,
//    0<=s+v, v<=s}
         p2 += lx;
      }
   else if (!hx&&hy) {
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, 1<=hy}
      p1a = p1+lx;
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, 1<=hy}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s}
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s}
            if (v>=0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s, 0<=v}
               s += v;
            else
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s, v+1<=0}
               s -= v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j,
//    0<=s+v, v<=s}
         p1 = p1a;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j,
//    0<=s+v, v<=s}
         p1a += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j,
//    0<=s+v, v<=s}
         p2 += lx;
      }
   }
   else {
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
      p1a = p1+lx;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
            if (v>=0)
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s, 0<=v}
               s += v;
            else
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s, v+1<=0}
               s -= v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
         p1 = p1a;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
         p1a += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s+v, v<=s}
         p2 += lx;
      }
   }
//  P(i,j,s,v) {8<=h, h<=16, j<=h, 0<=j, 0<=s}
   return s;
}
//  P() {8<=h, h<=16}
static int dist2(unsigned char *blk1, unsigned char *blk2, int lx, int hx, int hy, int h)
{
//  P() {8<=h, h<=16}
   unsigned char *p1, *p1a, *p2;
//  P() {8<=h, h<=16}
   int i, j;
//  P(i,j) {8<=h, h<=16}
   int s, v;
//  P(i,j,s,v) {8<=h, h<=16}
   s = 0;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   p1 = blk1;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   p2 = blk2;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
   if (!hx&&!hy)
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, hy<=0}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            v = p1[i]-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            s += v*v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s}
         p1 += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, hy<=0, 0<=j, 0<=s}
         p2 += lx;
      }
   else if (hx&&!hy)
//  P(i,j,s,v) {s==0, 8<=h, h<=16, 1<=hx, hy<=0}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            v = ((unsigned int) (p1[i]+p1[i+1]+1)>>1)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=i, i<=15, 0<=j,
//    0<=s}
            s += v*v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j, 0<=s}
         p1 += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 1<=hx, hy<=0, 0<=j, 0<=s}
         p2 += lx;
      }
   else if (!hx&&hy) {
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, 1<=hy}
      p1a = p1+lx;
//  P(i,j,s,v) {s==0, 8<=h, h<=16, hx<=0, 1<=hy}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s}
            v = ((unsigned int) (p1[i]+p1a[i]+1)>>1)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=i, i<=15, 0<=j,
//    0<=s}
            s += v*v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j, 0<=s}
         p1 = p1a;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j, 0<=s}
         p1a += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, hx<=0, 1<=hy, 0<=j, 0<=s}
         p2 += lx;
      }
   }
   else {
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
      p1a = p1+lx;
//  P(i,j,s,v) {s==0, 8<=h, h<=16}
      for(j = 0; j <= h-1; j += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
         for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
            v = ((unsigned int) (p1[i]+p1[i+1]+p1a[i]+p1a[i+1]+2)>>2)-p2[i];
//  P(i,j,s,v) {8<=h, h<=16, j+1<=h, 0<=i, i<=15, 0<=j, 0<=s}
            s += v*v;
         }
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
         p1 = p1a;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
         p1a += lx;
//  P(i,j,s,v) {i==16, 8<=h, h<=16, j+1<=h, 0<=j, 0<=s}
         p2 += lx;
      }
   }
//  P(i,j,s,v) {h==j, i==16, 8<=h, h<=16, 0<=s}
   return s;
}
//  P() {0<=i}
static void dpfield_estimate(unsigned char *topref, unsigned char *botref, unsigned char *mb, int i, int j, int imins, int jmins, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
//  P() {0<=i}
   unsigned char *sameref, *oppref;
//  P() {0<=i}
   int io0, jo0, io, jo, delta_x, delta_y, mvxs, mvys, mvxo0, mvyo0;
//  P(delta_x,delta_y,io,io0,jo,jo0,mvxo0,mvxs,mvyo0,mvys) {0<=i}
   int imino, jmino, imindmv, jmindmv, vmc_dp, local_dist;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {0<=i}
   /* Calculate Dual Prime distortions for 9 delta candidates */
   /* Note: only for P pictures! */
   /* Assign opposite and same reference pointer */
   if (pict_struct==1) {
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {pict_struct==1, 0<=i}
      sameref = topref;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {pict_struct==1, 0<=i}
      oppref = botref;
   }
   else {
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {0<=i}
      sameref = botref;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {0<=i}
      oppref = topref;
   }
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {0<=i}
   /* convert Cartesian absolute to relative motion vector
      * values (wrt current macroblock address (i,j)
      */
   mvxs = imins-(i<<1);
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins, 0<=i}
   mvys = jmins-(j<<1);
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, 0<=i}
   /* vector for prediction from field of opposite 'parity' */
   mvxo0 = mvxs+(mvxs>0)>>1;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, 0<=i}
   /* mvxs // 2 */
   mvyo0 = mvys+(mvys>0)>>1;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, 0<=i}
   /* mvys // 2 */
   /* vertical field shift correction */
   if (pict_struct==1)
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, pict_struct==1, 0<=i}
      mvyo0--;
   else
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, 0<=i}
      mvyo0++;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2j+mvys==jmins, 0<=i}
   /* convert back to absolute coordinates */
   io0 = mvxo0+(i<<1);
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2i+mvxo0==io0, 2j+mvys==jmins, 0<=i}
   jo0 = mvyo0+(j<<1);
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2i+mvxo0==io0, 2j+mvys==jmins, 2j+mvyo0==jo0, 0<=i}
   /* initialize minimum dual prime distortion to large value */
   vmc_dp = 1<<30;
//  P(delta_x,delta_y,imindmv,imino,io,io0,jmindmv,jmino,jo,jo0,
//    local_dist,mvxo0,mvxs,mvyo0,mvys,vmc_dp) {2i+mvxs==imins,
//    2i+mvxo0==io0, 2j+mvys==jmins, 2j+mvyo0==jo0,
//    vmc_dp==1073741824, 0<=i}
   for(delta_y = -1; delta_y <= 1; delta_y += 1)
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {0<=delta_y+1, delta_y<=1}
      for(delta_x = -1; delta_x <= 1; delta_x += 1) {
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {0<=delta_x+1, delta_x<=1}
         /* opposite field coordinates */
         io = io0+delta_x;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x+io0==io, 0<=delta_x+1, delta_x<=1}
         jo = jo0+delta_y;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x+io0==io, delta_y+jo0==jo,
//    0<=delta_x+1, delta_x<=1}
         if (io>=0&&io<=width-16<<1&&jo>=0&&jo<=height2-16<<1) {
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x+io0==io, delta_y+jo0==jo,
//    0<=delta_x+1, delta_x<=1, jo+32<=2height2, 0<=io, io+32<=2width,
//    0<=jo}
            /* current mb location */
            /* adjacent line distance */
            /* half-pel flags */
            /* compute prediction error */
            local_dist = bdist2(sameref+(imins>>1)+width2*(jmins>>1), oppref+(io>>1)+width2*(jo>>1), mb, width2, imins&1, jmins&1, io&1, jo&1, 16);
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
            /* block height */
            /* update delta with least distortion vector */
            if (local_dist<vmc_dp) {
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {local_dist+1<=vmc_dp}
               imino = io;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {imino==io, local_dist+1<=vmc_dp}
               jmino = jo;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {imino==io, jmino==jo,
//    local_dist+1<=vmc_dp}
               imindmv = delta_x;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x==imindmv, imino==io, jmino==jo,
//    local_dist+1<=vmc_dp}
               jmindmv = delta_y;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x==imindmv, delta_y==jmindmv,
//    imino==io, jmino==jo, local_dist+1<=vmc_dp}
               vmc_dp = local_dist;
            }
         }
      }
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {delta_x==2, delta_y==2}
   /* current mb location */
   /* adjacent line distance */
   /* half-pel flags */
   /* end delta y loop */
   /* Compute L1 error for decision purposes */
   *dmcp = bdist1(sameref+(imins>>1)+width2*(jmins>>1), oppref+(imino>>1)+width2*(jmino>>1), mb, width2, imins&1, jmins&1, imino&1, jmino&1, 16);
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
   /* block height */
   *imindmvp = imindmv;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
   *jmindmvp = jmindmv;
//  P(delta_x,delta_y,height2,i,imindmv,imino,imins,io,io0,j,jmindmv,
//    jmino,jmins,jo,jo0,local_dist,mvxo0,mvxs,mvyo0,mvys,pict_struct,
//    vmc_dp,width,width2) {}
   *vmcp = vmc_dp;
}
//  P() {0<=i}
static void dpframe_estimate(unsigned char *ref, unsigned char *mb, int i, int j, int iminf[2][2], int jminf[2][2], int *iminp, int *jminp, int *imindmvp, int *jmindmvp, int *dmcp, int *vmcp)
{
//  P() {0<=i}
   int pref, ppred, delta_x, delta_y;
//  P(delta_x,delta_y,ppred,pref) {0<=i}
   int is, js, it, jt, ib, jb, it0, jt0, ib0, jb0;
//  P(delta_x,delta_y,ib,ib0,is,it,it0,jb,jb0,js,jt,jt0,ppred,pref)
//    {0<=i}
   int imins, jmins, imint, jmint, iminb, jminb, imindmv, jmindmv;
//  P(delta_x,delta_y,ib,ib0,iminb,imindmv,imins,imint,is,it,it0,jb,
//    jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,ppred,pref) {0<=i}
   int vmc, local_dist;
//  P(delta_x,delta_y,ib,ib0,iminb,imindmv,imins,imint,is,it,it0,jb,
//    jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,ppred,pref,
//    vmc) {0<=i}
   /* Calculate Dual Prime distortions for 9 delta candidates
      * for each of the four minimum field vectors
      * Note: only for P pictures!
      */
   /* initialize minimum dual prime distortion to large value */
   vmc = 1<<30;
//  P(delta_x,delta_y,ib,ib0,iminb,imindmv,imins,imint,is,it,it0,jb,
//    jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,ppred,pref,
//    vmc) {vmc==1073741824, 0<=i}
   for(pref = 0; pref <= 1; pref += 1)
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=pref, pref<=1}
      for(ppred = 0; ppred <= 1; ppred += 1) {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         /* convert Cartesian absolute to relative motion vector
                * values (wrt current macroblock address (i,j)
                */
         is = iminf[pref][ppred]-(i<<1);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         js = jminf[pref][ppred]-(j<<1);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         if (pref!=ppred) goto l99999;
l99998:         ;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         /* vector for prediction from field of opposite 'parity' */
         if (topfirst) {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
            /* vector for prediction of top field from bottom field */
            it0 = is+(is>0)>>1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
            jt0 = (js+(js>0)>>1)-1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
            /* vector for prediction of bottom field from top field */
            ib0 = 3*is+(is>0)>>1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
            jb0 = (3*js+(js>0)>>1)+1;
         }
         else {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {topfirst==0, 0<=ppred, ppred<=1}
            /* vector for prediction of top field from bottom field */
            it0 = 3*is+(is>0)>>1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {topfirst==0, 0<=ppred, ppred<=1}
            jt0 = (3*js+(js>0)>>1)-1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {topfirst==0, 0<=ppred, ppred<=1}
            /* vector for prediction of bottom field from top field */
            ib0 = is+(is>0)>>1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {topfirst==0, 0<=ppred, ppred<=1}
            jb0 = (js+(js>0)>>1)+1;
         }
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         /* convert back to absolute half-pel field picture coordinates */
         is += i<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         js += j<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         it0 += i<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         jt0 += j<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         ib0 += i<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         jb0 += j<<1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         if (is>=0&&is<=width-16<<1&&js>=0&&js<=height-16)
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {js+16<=height, 0<=is,
//    is+32<=2width, 0<=js, 0<=ppred, ppred<=1}
            for(delta_y = -1; delta_y <= 1; delta_y += 1)
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=delta_y+1, delta_y<=1}
               for(delta_x = -1; delta_x <= 1; delta_x += 1) {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=delta_x+1, delta_x<=1}
                  /* opposite field coordinates */
                  it = it0+delta_x;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x+it0==it, 0<=delta_x+1,
//    delta_x<=1}
                  jt = jt0+delta_y;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x+it0==it,
//    delta_y+jt0==jt, 0<=delta_x+1, delta_x<=1}
                  ib = ib0+delta_x;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x+ib0==ib,
//    delta_x+it0==it, delta_y+jt0==jt, 0<=delta_x+1, delta_x<=1}
                  jb = jb0+delta_y;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x+ib0==ib,
//    delta_x+it0==it, delta_y+jb0==jb, delta_y+jt0==jt, 0<=delta_x+1,
//    delta_x<=1}
                  if (it>=0&&it<=width-16<<1&&jt>=0&&jt<=height-16&&ib>=0&&ib<=width-16<<1&&jb>=0&&jb<=height-16) {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x+ib0==ib,
//    delta_x+it0==it, delta_y+jb0==jb, delta_y+jt0==jt, 0<=delta_x+1,
//    delta_x<=1, jb+16<=height, jt+16<=height, 0<=ib, ib+32<=2width,
//    0<=it, it+32<=2width, 0<=jb, 0<=jt}
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* compute prediction error */
                     local_dist = bdist2(ref+(is>>1)+(width<<1)*(js>>1), ref+width+(it>>1)+(width<<1)*(jt>>1), mb, width<<1, is&1, js&1, it&1, jt&1, 8);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
                     /* current mb location */
                     /* adjacent line distance */
                     /* half-pel flags */
                     /* block height */
                     local_dist += bdist2(ref+width+(is>>1)+(width<<1)*(js>>1), ref+(ib>>1)+(width<<1)*(jb>>1), mb+width, width<<1, is&1, js&1, ib&1, jb&1, 8);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
                     /* block height */
                     /* update delta with least distortion vector */
                     if (local_dist<vmc) {
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {local_dist+1<=vmc}
                        imins = is;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {imins==is, local_dist+1<=vmc}
                        jmins = js;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {imins==is, jmins==js,
//    local_dist+1<=vmc}
                        imint = it;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {imins==is, imint==it, jmins==js,
//    local_dist+1<=vmc}
                        jmint = jt;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {imins==is, imint==it, jmins==js,
//    jmint==jt, local_dist+1<=vmc}
                        iminb = ib;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ib==iminb, imins==is, imint==it,
//    jmins==js, jmint==jt, local_dist+1<=vmc}
                        jminb = jb;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ib==iminb, imins==is, imint==it,
//    jb==jminb, jmins==js, jmint==jt, local_dist+1<=vmc}
                        imindmv = delta_x;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x==imindmv, ib==iminb,
//    imins==is, imint==it, jb==jminb, jmins==js, jmint==jt,
//    local_dist+1<=vmc}
                        jmindmv = delta_y;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {delta_x==imindmv,
//    delta_y==jmindmv, ib==iminb, imins==is, imint==it, jb==jminb,
//    jmins==js, jmint==jt, local_dist+1<=vmc}
                        vmc = local_dist;
                     }
                  }
               }
         goto _loop_end_2;
l99999:         ;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         /* vertical field shift adjustment */
         if (ppred==0)
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ppred==0}
            js++;
         else
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ppred==1}
            js--;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         /* mvxs and mvys scaling*/
         is <<= 1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         js <<= 1;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {0<=ppred, ppred<=1}
         if (topfirst==ppred) {
         }
         else {
            goto _loop_end_2;
         }
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ppred==topfirst, 0<=ppred,
//    ppred<=1}
         /* second field: scale by 1/3 */
         is = is>=0?(is+1)/3:-(((-is)+1)/3);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ppred==topfirst, 0<=ppred,
//    ppred<=1}
         js = js>=0?(js+1)/3:-(((-js)+1)/3);
         goto l99998;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
_loop_end_2:         ;
      }
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {ppred==2, pref==2}
   /* Compute L1 error for decision purposes */
   local_dist = bdist1(ref+(imins>>1)+(width<<1)*(jmins>>1), ref+width+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imins&1, jmins&1, imint&1, jmint&1, 8);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   local_dist += bdist1(ref+width+(imins>>1)+(width<<1)*(jmins>>1), ref+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, imins&1, jmins&1, iminb&1, jminb&1, 8);
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *dmcp = local_dist;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *iminp = imins;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *jminp = jmins;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *imindmvp = imindmv;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *jmindmvp = jmindmv;
//  P(delta_x,delta_y,height,i,ib,ib0,iminb,imindmv,imins,imint,is,it,
//    it0,j,jb,jb0,jminb,jmindmv,jmins,jmint,js,jt,jt0,local_dist,
//    ppred,pref,topfirst,vmc,width) {}
   *vmcp = vmc;
}
//  P() {0<=i}
static void field_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
//  P() {0<=i}
   int w2;
//  P(w2) {0<=i}
   unsigned char *mb, *toporg, *topref, *botorg, *botref;
//  P(w2) {0<=i}
   int var, vmc, v0, dmc, dmcfieldi, dmc8i;
//  P(dmc,dmc8i,dmcfieldi,v0,var,vmc,w2) {0<=i}
   int imin, jmin, imin8u, jmin8u, imin8l, jmin8l, dmcfield, dmc8, sel, sel8u, sel8l;
//  P(dmc,dmc8,dmc8i,dmcfield,dmcfieldi,imin,imin8l,imin8u,jmin,
//    jmin8l,jmin8u,sel,sel8l,sel8u,v0,var,vmc,w2) {0<=i}
   int iminf, jminf, imin8uf, jmin8uf, imin8lf, jmin8lf, dmcfieldf, dmc8f, self, sel8uf, sel8lf;
//  P(dmc,dmc8,dmc8f,dmc8i,dmcfield,dmcfieldf,dmcfieldi,imin,imin8l,
//    imin8lf,imin8u,imin8uf,iminf,jmin,jmin8l,jmin8lf,jmin8u,jmin8uf,
//    jminf,sel,sel8l,sel8lf,sel8u,sel8uf,self,v0,var,vmc,w2) {0<=i}
   int iminr, jminr, imin8ur, jmin8ur, imin8lr, jmin8lr, dmcfieldr, dmc8r, selr, sel8ur, sel8lr;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    iminf,iminr,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,
//    jminf,jminr,sel,sel8l,sel8lf,sel8lr,sel8u,sel8uf,sel8ur,self,
//    selr,v0,var,vmc,w2) {0<=i}
   int imins, jmins, ds, imindmv, jmindmv, vmc_dp, dmc_dp;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {0<=i}
   w2 = width<<1;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
   mb = cur+i+w2*j;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
   if (pict_struct==2)
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_struct==2, w2==2width, 0<=i}
      mb += width;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
   var = variance(mb, w2);
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
   if (pict_type==1)
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==1, w2==2width, 0<=i}
      mbi->mb_type = 1;
   else if (pict_type==2) {
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      toporg = oldorg;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      topref = oldref;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      botorg = oldorg+width;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      botref = oldref+width;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      if (secondfield)
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
         /* opposite parity field is in same frame */
         if (pict_struct==1) {
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_struct==1, pict_type==2, w2==2width, 0<=i}
            /* current is top field */
            botorg = cur+width;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_struct==1, pict_type==2, w2==2width, 0<=i}
            botref = curref+width;
         }
         else {
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
            /* current is bottom field */
            toporg = cur;
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
            topref = curref;
         }
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      field_estimate(toporg, topref, botorg, botref, mb, i, j, sxf, syf, ipflag, &imin, &jmin, &imin8u, &jmin8u, &imin8l, &jmin8l, &dmcfield, &dmc8, &sel, &sel8u, &sel8l, &imins, &jmins, &ds);
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {pict_type==2, w2==2width, 0<=i}
      if (M==1&&!ipflag)
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {M==1, pict_type==2, w2==2width, 0<=i, ipflag<=0}
         /* generic condition which permits Dual Prime */
         dpfield_estimate(topref, botref, mb, i, j, imins, jmins, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* select between dual prime, field and 16x8 prediction */
      if (M==1&&!ipflag&&dmc_dp<dmc8&&dmc_dp<dmcfield) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {M==1, dmc_dp+1<=dmc8, dmc_dp+1<=dmcfield, ipflag<=0}
         /* Dual Prime prediction */
         mbi->motion_type = 3;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {M==1, dmc_dp+1<=dmc8, dmc_dp+1<=dmcfield, ipflag<=0}
         dmc = dmc_dp;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {M==1, dmc==dmc_dp, dmc+1<=dmc8, dmc+1<=dmcfield,
//    ipflag<=0}
         /* L1 metric */
         vmc = vmc_dp;
      }
      else if (dmc8<dmcfield) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8+1<=dmcfield}
         /* 16x8 prediction */
         mbi->motion_type = 2;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8+1<=dmcfield}
         /* upper half block */
         vmc = dist2((sel8u?botref:topref)+(imin8u>>1)+w2*(jmin8u>>1), mb, w2, imin8u&1, jmin8u&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8+1<=dmcfield, 0<=vmc}
         /* lower half block */
         vmc += dist2((sel8l?botref:topref)+(imin8l>>1)+w2*(jmin8l>>1), mb+8*w2, w2, imin8l&1, jmin8l&1, 8);
      }
      else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfield<=dmc8}
         /* field prediction */
         mbi->motion_type = 1;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfield<=dmc8}
         vmc = dist2((sel?botref:topref)+(imin>>1)+w2*(jmin>>1), mb, w2, imin&1, jmin&1, 16);
      }
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var+1<=vmc, 2304<=vmc}
         mbi->mb_type = 1;
      else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         /* zero MV field prediction from same parity ref. field
                * (not allowed if ipflag is set)
                */
         if (!ipflag)
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {ipflag<=0}
            v0 = dist2((pict_struct==2?botref:topref)+i+w2*j, mb, w2, 0, 0, 16);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         if (ipflag||4*v0>5*vmc&&v0>=9*256) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
            var = vmc;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            mbi->mb_type = 8;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            if (mbi->motion_type==1) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               ((mbi->mv_field_sel)[0])[0] = sel;
            }
            else if (mbi->motion_type==3) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imins-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[0])[0])[1] = jmins-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[0])[0])[0] = imin8u-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[0])[0])[1] = jmin8u-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[1])[0])[0] = imin8l-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               (((mbi->MV)[1])[0])[1] = jmin8l-(j+8<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               ((mbi->mv_field_sel)[0])[0] = sel8u;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
               ((mbi->mv_field_sel)[1])[0] = sel8l;
            }
         }
         else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {ipflag<=0}
            /* No MC */
            var = v0;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {v0==var, ipflag<=0}
            mbi->mb_type = 0;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {v0==var, ipflag<=0}
            mbi->motion_type = 1;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {v0==var, ipflag<=0}
            (((mbi->MV)[0])[0])[0] = 0;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {v0==var, ipflag<=0}
            (((mbi->MV)[0])[0])[1] = 0;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {v0==var, ipflag<=0}
            ((mbi->mv_field_sel)[0])[0] = pict_struct==2;
         }
      }
   }
   else {
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
      /* forward prediction */
      field_estimate(oldorg, oldref, oldorg+width, oldref+width, mb, i, j, sxf, syf, 0, &iminf, &jminf, &imin8uf, &jmin8uf, &imin8lf, &jmin8lf, &dmcfieldf, &dmc8f, &self, &sel8uf, &sel8lf, &imins, &jmins, &ds);
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
      /* backward prediction */
      field_estimate(neworg, newref, neworg+width, newref+width, mb, i, j, sxb, syb, 0, &iminr, &jminr, &imin8ur, &jmin8ur, &imin8lr, &jmin8lr, &dmcfieldr, &dmc8r, &selr, &sel8ur, &sel8lr, &imins, &jmins, &ds);
//  P(dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,ds,imin,imin8l,imin8lf,imin8lr,imin8u,imin8uf,imin8ur,
//    imindmv,iminf,iminr,imins,jmin,jmin8l,jmin8lf,jmin8lr,jmin8u,
//    jmin8uf,jmin8ur,jmindmv,jminf,jminr,jmins,sel,sel8l,sel8lf,
//    sel8lr,sel8u,sel8uf,sel8ur,self,selr,v0,var,vmc,vmc_dp,w2)
//    {w2==2width, 0<=i}
      /* calculate distances for bidirectional prediction */
      /* field */
      dmcfieldi = bdist1(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* 16x8 upper half block */
      dmc8i = bdist1(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* 16x8 lower half block */
      dmc8i += bdist1(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* select prediction type of minimum distance */
      if (dmcfieldi<dmc8i&&dmcfieldi<dmcfieldf&&dmcfieldi<dmc8f&&dmcfieldi<dmcfieldr&&dmcfieldi<dmc8r) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldi+1<=dmc8f, dmcfieldi+1<=dmc8i,
//    dmcfieldi+1<=dmc8r, dmcfieldi+1<=dmcfieldf,
//    dmcfieldi+1<=dmcfieldr}
         /* field, interpolated */
         mbi->mb_type = 8|4;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldi+1<=dmc8f, dmcfieldi+1<=dmc8i,
//    dmcfieldi+1<=dmc8r, dmcfieldi+1<=dmcfieldf,
//    dmcfieldi+1<=dmcfieldr}
         mbi->motion_type = 1;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldi+1<=dmc8f, dmcfieldi+1<=dmc8i,
//    dmcfieldi+1<=dmc8r, dmcfieldi+1<=dmcfieldf,
//    dmcfieldi+1<=dmcfieldr}
         vmc = bdist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminf&1, jminf&1, iminr&1, jminr&1, 16);
      }
      else if (dmc8i<dmcfieldf&&dmc8i<dmc8f&&dmc8i<dmcfieldr&&dmc8i<dmc8r) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8i+1<=dmc8f, dmc8i+1<=dmc8r, dmc8i+1<=dmcfieldf,
//    dmc8i+1<=dmcfieldr}
         /* 16x8, interpolated */
         mbi->mb_type = 8|4;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8i+1<=dmc8f, dmc8i+1<=dmc8r, dmc8i+1<=dmcfieldf,
//    dmc8i+1<=dmcfieldr}
         mbi->motion_type = 2;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8i+1<=dmc8f, dmc8i+1<=dmc8r, dmc8i+1<=dmcfieldf,
//    dmc8i+1<=dmcfieldr}
         /* upper half block */
         vmc = bdist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8uf&1, jmin8uf&1, imin8ur&1, jmin8ur&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         /* lower half block */
         vmc += bdist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, imin8lr&1, jmin8lr&1, 8);
      }
      else if (dmcfieldf<dmc8f&&dmcfieldf<dmcfieldr&&dmcfieldf<dmc8r) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldf+1<=dmc8f, dmcfieldf+1<=dmc8r,
//    dmcfieldf+1<=dmcfieldr}
         /* field, forward */
         mbi->mb_type = 8;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldf+1<=dmc8f, dmcfieldf+1<=dmc8r,
//    dmcfieldf+1<=dmcfieldr}
         mbi->motion_type = 1;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldf+1<=dmc8f, dmcfieldf+1<=dmc8r,
//    dmcfieldf+1<=dmcfieldr}
         vmc = dist2(oldref+(self?width:0)+(iminf>>1)+w2*(jminf>>1), mb, w2, iminf&1, jminf&1, 16);
      }
      else if (dmc8f<dmcfieldr&&dmc8f<dmc8r) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8f+1<=dmc8r, dmc8f+1<=dmcfieldr}
         /* 16x8, forward */
         mbi->mb_type = 8;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8f+1<=dmc8r, dmc8f+1<=dmcfieldr}
         mbi->motion_type = 2;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8f+1<=dmc8r, dmc8f+1<=dmcfieldr}
         /* upper half block */
         vmc = dist2(oldref+(sel8uf?width:0)+(imin8uf>>1)+w2*(jmin8uf>>1), mb, w2, imin8uf&1, jmin8uf&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8f+1<=dmc8r, dmc8f+1<=dmcfieldr, 0<=vmc}
         /* lower half block */
         vmc += dist2(oldref+(sel8lf?width:0)+(imin8lf>>1)+w2*(jmin8lf>>1), mb+8*w2, w2, imin8lf&1, jmin8lf&1, 8);
      }
      else if (dmcfieldr<dmc8r) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldr+1<=dmc8r}
         /* field, backward */
         mbi->mb_type = 4;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldr+1<=dmc8r}
         mbi->motion_type = 1;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmcfieldr+1<=dmc8r}
         vmc = dist2(newref+(selr?width:0)+(iminr>>1)+w2*(jminr>>1), mb, w2, iminr&1, jminr&1, 16);
      }
      else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8r<=dmcfieldr}
         /* 16x8, backward */
         mbi->mb_type = 4;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8r<=dmcfieldr}
         mbi->motion_type = 2;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8r<=dmcfieldr}
         /* upper half block */
         vmc = dist2(newref+(sel8ur?width:0)+(imin8ur>>1)+w2*(jmin8ur>>1), mb, w2, imin8ur&1, jmin8ur&1, 8);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {dmc8r<=dmcfieldr, 0<=vmc}
         /* lower half block */
         vmc += dist2(newref+(sel8lr?width:0)+(imin8lr>>1)+w2*(jmin8lr>>1), mb+8*w2, w2, imin8lr&1, jmin8lr&1, 8);
      }
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
      /* select between intra and non-intra coding */
      if (vmc>var&&vmc>=9*256)
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var+1<=vmc, 2304<=vmc}
         mbi->mb_type = 1;
      else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
         var = vmc;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
         if (mbi->motion_type==1) {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[0] = self;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[1] = selr;
         }
         else {
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            /* forward */
            (((mbi->MV)[0])[0])[0] = imin8uf-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[0])[0])[1] = jmin8uf-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[0] = sel8uf;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[1])[0])[0] = imin8lf-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[1])[0])[1] = jmin8lf-(j+8<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[1])[0] = sel8lf;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            /* backward */
            (((mbi->MV)[0])[1])[0] = imin8ur-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[0])[1])[1] = jmin8ur-(j<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[1] = sel8ur;
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[1])[1])[0] = imin8lr-(i<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            (((mbi->MV)[1])[1])[1] = jmin8lr-(j+8<<1);
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {var==vmc}
            ((mbi->mv_field_sel)[1])[1] = sel8lr;
         }
      }
   }
//  P(M,dmc,dmc8,dmc8f,dmc8i,dmc8r,dmc_dp,dmcfield,dmcfieldf,
//    dmcfieldi,dmcfieldr,ds,i,imin,imin8l,imin8lf,imin8lr,imin8u,
//    imin8uf,imin8ur,imindmv,iminf,iminr,imins,ipflag,j,jmin,jmin8l,
//    jmin8lf,jmin8lr,jmin8u,jmin8uf,jmin8ur,jmindmv,jminf,jminr,
//    jmins,pict_struct,pict_type,secondfield,sel,sel8l,sel8lf,sel8lr,
//    sel8u,sel8uf,sel8ur,self,selr,sxb,sxf,syb,syf,v0,var,vmc,vmc_dp,
//    w2,width) {}
   mbi->var = var;
}
//  P() {0<=i}
static void field_estimate(unsigned char *toporg, unsigned char *topref, unsigned char *botorg, unsigned char *botref, unsigned char *mb, int i, int j, int sx, int sy, int ipflag, int *iminp, int *jminp, int *imin8up, int *jmin8up, int *imin8lp, int *jmin8lp, int *dfieldp, int *d8p, int *selp, int *sel8up, int *sel8lp, int *iminsp, int *jminsp, int *dsp)
{
//  P() {0<=i}
   int dt, db, imint, jmint, iminb, jminb, notop, nobot;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {0<=i}
   /* if ipflag is set, predict from field of opposite parity only */
   notop = ipflag&&pict_struct==1;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {0<=i}
   nobot = ipflag&&pict_struct==2;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {0<=i}
   /* field prediction */
   /* predict current field from top field */
   if (notop)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {0<=i}
      dt = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {notop==0, 0<=i}
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &imint, &jmint);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {dt<=65536, 0<=i}
   /* predict current field from bottom field */
   if (nobot)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {dt<=65536, 0<=i}
      db = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {nobot==0, dt<=65536,
//    0<=i}
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 16, width, height>>1, &iminb, &jminb);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* same parity prediction (only valid if ipflag==0) */
   if (pict_struct==1) {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {pict_struct==1,
//    db<=65536, dt<=65536, 0<=i}
      *iminsp = imint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {pict_struct==1,
//    db<=65536, dt<=65536, 0<=i}
      *jminsp = jmint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {pict_struct==1,
//    db<=65536, dt<=65536, 0<=i}
      *dsp = dt;
   }
   else {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      *iminsp = iminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      *jminsp = jminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      *dsp = db;
   }
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* select field prediction */
   if (dt<=db) {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *dfieldp = dt;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *iminp = imint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *jminp = jmint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *selp = 0;
   }
   else {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *dfieldp = db;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *iminp = iminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *jminp = jminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *selp = 1;
   }
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* 16x8 motion compensation */
   /* predict upper half field from top field */
   if (notop)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      dt = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {notop==0, db<=65536,
//    dt<=65536, 0<=i}
      dt = fullsearch(toporg, topref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* predict upper half field from bottom field */
   if (nobot)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      db = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {nobot==0, db<=65536,
//    dt<=65536, 0<=i}
      db = fullsearch(botorg, botref, mb, width<<1, i, j, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* select prediction for upper half field */
   if (dt<=db) {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *d8p = dt;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *imin8up = imint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *jmin8up = jmint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *sel8up = 0;
   }
   else {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *d8p = db;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *imin8up = iminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *jmin8up = jminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *sel8up = 1;
   }
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* predict lower half field from top field */
   if (notop)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      dt = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {notop==0, db<=65536,
//    dt<=65536, 0<=i}
      dt = fullsearch(toporg, topref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* predict lower half field from bottom field */
   if (nobot)
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
      db = 65536;
   else
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {nobot==0, db<=65536,
//    dt<=65536, 0<=i}
      db = fullsearch(botorg, botref, mb+(width<<4), width<<1, i, j+8, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536,
//    dt<=65536, 0<=i}
   /* select prediction for lower half field */
   if (dt<=db) {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *d8p += dt;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *imin8lp = imint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *jmin8lp = jmint;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      *sel8lp = 0;
   }
   else {
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *d8p += db;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *imin8lp = iminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *jmin8lp = jminb;
//  P(db,dt,iminb,imint,jminb,jmint,nobot,notop) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      *sel8lp = 1;
   }
}
//  P() {0<=i}
static void frame_ME(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, int i, int j, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi)
{
//  P() {0<=i}
   int imin, jmin, iminf, jminf, iminr, jminr;
//  P(imin,iminf,iminr,jmin,jminf,jminr) {0<=i}
   int imint, jmint, iminb, jminb;
//  P(imin,iminb,iminf,iminr,imint,jmin,jminb,jminf,jminr,jmint)
//    {0<=i}
   int imintf, jmintf, iminbf, jminbf;
//  P(imin,iminb,iminbf,iminf,iminr,imint,imintf,jmin,jminb,jminbf,
//    jminf,jminr,jmint,jmintf) {0<=i}
   int imintr, jmintr, iminbr, jminbr;
//  P(imin,iminb,iminbf,iminbr,iminf,iminr,imint,imintf,imintr,jmin,
//    jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,jmintr) {0<=i}
   int var, v0;
//  P(imin,iminb,iminbf,iminbr,iminf,iminr,imint,imintf,imintr,jmin,
//    jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,jmintr,v0,var)
//    {0<=i}
   int dmc, dmcf, dmcr, dmci, vmc, vmcf, vmcr, vmci;
//  P(dmc,dmcf,dmci,dmcr,imin,iminb,iminbf,iminbr,iminf,iminr,imint,
//    imintf,imintr,jmin,jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,
//    jmintr,v0,var,vmc,vmcf,vmci,vmcr) {0<=i}
   int dmcfield, dmcfieldf, dmcfieldr, dmcfieldi;
//  P(dmc,dmcf,dmcfield,dmcfieldf,dmcfieldi,dmcfieldr,dmci,dmcr,imin,
//    iminb,iminbf,iminbr,iminf,iminr,imint,imintf,imintr,jmin,jminb,
//    jminbf,jminbr,jminf,jminr,jmint,jmintf,jmintr,v0,var,vmc,vmcf,
//    vmci,vmcr) {0<=i}
   int tsel, bsel, tself, bself, tselr, bselr;
//  P(bsel,bself,bselr,dmc,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,iminf,iminr,imint,
//    imintf,imintr,jmin,jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,
//    jmintr,tsel,tself,tselr,v0,var,vmc,vmcf,vmci,vmcr) {0<=i}
   unsigned char *mb;
//  P(bsel,bself,bselr,dmc,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,iminf,iminr,imint,
//    imintf,imintr,jmin,jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,
//    jmintr,tsel,tself,tselr,v0,var,vmc,vmcf,vmci,vmcr) {0<=i}
   int imins[2][2], jmins[2][2];
//  P(bsel,bself,bselr,dmc,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,iminf,iminr,imint,
//    imintf,imintr,jmin,jminb,jminbf,jminbr,jminf,jminr,jmint,jmintf,
//    jmintr,tsel,tself,tselr,v0,var,vmc,vmcf,vmci,vmcr) {0<=i}
   int imindp, jmindp, imindmv, jmindmv, dmc_dp, vmc_dp;
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {0<=i}
   mb = cur+i+width*j;
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {0<=i}
   var = variance(mb, width);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {0<=i}
   if (pict_type==1)
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {pict_type==1, 0<=i}
      mbi->mb_type = 1;
   else if (pict_type==2) {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {pict_type==2, 0<=i}
      if (frame_pred_dct) {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {pict_type==2, 0<=i}
         dmc = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &imin, &jmin);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {pict_type==2, dmc<=65536,
//    0<=i}
         vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {pict_type==2, dmc<=65536,
//    0<=i, 0<=vmc}
         mbi->motion_type = 2;
      }
      else {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {frame_pred_dct==0,
//    pict_type==2, 0<=i}
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &imin, &jmin, &imint, &jmint, &iminb, &jminb, &dmc, &dmcfield, &tsel, &bsel, imins, jmins);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {frame_pred_dct==0,
//    pict_type==2, 0<=i}
         if (M==1)
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {M==1, frame_pred_dct==0,
//    pict_type==2, 0<=i}
            dpframe_estimate(oldref, mb, i, j>>1, imins, jmins, &imindp, &jmindp, &imindmv, &jmindmv, &dmc_dp, &vmc_dp);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* select between dual prime, frame and field prediction */
         if (M==1&&dmc_dp<dmc&&dmc_dp<dmcfield) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {M==1, dmc_dp+1<=dmc,
//    dmc_dp+1<=dmcfield}
            mbi->motion_type = 3;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {M==1, dmc_dp+1<=dmc,
//    dmc_dp+1<=dmcfield}
            dmc = dmc_dp;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {M==1, dmc==dmc_dp,
//    dmc+1<=dmcfield}
            vmc = vmc_dp;
         }
         else if (dmc<=dmcfield) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmc<=dmcfield}
            mbi->motion_type = 2;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmc<=dmcfield}
            vmc = dist2(oldref+(imin>>1)+width*(jmin>>1), mb, width, imin&1, jmin&1, 16);
         }
         else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfield+1<=dmc}
            mbi->motion_type = 1;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfield+1<=dmc}
            dmc = dmcfield;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmc==dmcfield}
            vmc = dist2(oldref+(tsel?width:0)+(imint>>1)+(width<<1)*(jmint>>1), mb, width<<1, imint&1, jmint&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmc==dmcfield, 0<=vmc}
            vmc += dist2(oldref+(bsel?width:0)+(iminb>>1)+(width<<1)*(jminb>>1), mb+width, width<<1, iminb&1, jminb&1, 8);
         }
      }
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var+1<=vmc, 2304<=vmc}
         mbi->mb_type = 1;
      else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* select between MC / No-MC
                *
                * use No-MC if var(No-MC) <= 1.25*var(MC)
                * (i.e slightly biased towards No-MC)
                *
                * blocks with small prediction error are always coded as No-MC
                * (requires no motion vectors, allows skipping)
                */
         v0 = dist2(oldref+i+width*j, mb, width, 0, 0, 16);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {0<=v0}
         if (4*v0>5*vmc&&v0>=9*256) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {2304<=v0, 5vmc+1<=4v0}
            /* use MC */
            var = vmc;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
            mbi->mb_type = 8;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
            if (mbi->motion_type==2) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[0])[0])[0] = imin-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[0])[0])[1] = jmin-(j<<1);
            }
            else if (mbi->motion_type==3) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               /* these are FRAME vectors */
               /* same parity vector */
               (((mbi->MV)[0])[0])[0] = imindp-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[0])[0])[1] = (jmindp<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               /* opposite parity vector */
               (mbi->dmvector)[0] = imindmv;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (mbi->dmvector)[1] = jmindmv;
            }
            else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               /* these are FRAME vectors */
               (((mbi->MV)[0])[0])[0] = imint-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[0])[0])[1] = (jmint<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[1])[0])[0] = iminb-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               (((mbi->MV)[1])[0])[1] = (jminb<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               ((mbi->mv_field_sel)[0])[0] = tsel;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc, 2304<=v0, 5var+1<=4v0}
               ((mbi->mv_field_sel)[1])[0] = bsel;
            }
         }
         else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {0<=v0}
            /* No-MC */
            var = v0;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {v0==var, 0<=v0}
            mbi->mb_type = 0;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {v0==var, 0<=v0}
            mbi->motion_type = 2;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {v0==var, 0<=v0}
            (((mbi->MV)[0])[0])[0] = 0;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {v0==var, 0<=v0}
            (((mbi->MV)[0])[0])[1] = 0;
         }
      }
   }
   else {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {0<=i}
      if (frame_pred_dct) {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {0<=i}
         /* forward */
         dmcf = fullsearch(oldorg, oldref, mb, width, i, j, sxf, syf, 16, width, height, &iminf, &jminf);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {dmcf<=65536, 0<=i}
         vmcf = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {dmcf<=65536, 0<=i, 0<=vmcf}
         /* backward */
         dmcr = fullsearch(neworg, newref, mb, width, i, j, sxb, syb, 16, width, height, &iminr, &jminr);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {dmcf<=65536, dmcr<=65536,
//    0<=i, 0<=vmcf}
         vmcr = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {dmcf<=65536, dmcr<=65536,
//    0<=i, 0<=vmcf, 0<=vmcr}
         /* interpolated (bidirectional) */
         vmci = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* decisions */
         /* select between forward/backward/interpolated prediction:
                * use the one with smallest mean sqaured prediction error
                */
         if (vmcf<=vmcr&&vmcf<=vmci) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmcf<=vmci, vmcf<=vmcr}
            vmc = vmcf;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmc==vmcf, vmc<=vmci, vmc<=vmcr}
            mbi->mb_type = 8;
         }
         else if (vmcr<=vmci) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmcr<=vmci}
            vmc = vmcr;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmc==vmcr, vmc<=vmci}
            mbi->mb_type = 4;
         }
         else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmci+1<=vmcr}
            vmc = vmci;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmc==vmci, vmc+1<=vmcr}
            mbi->mb_type = 8|4;
         }
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {vmc<=vmci, vmc<=vmcr}
         mbi->motion_type = 2;
      }
      else {
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {frame_pred_dct==0, 0<=i}
         /* forward prediction */
         frame_estimate(oldorg, oldref, mb, i, j, sxf, syf, &iminf, &jminf, &imintf, &jmintf, &iminbf, &jminbf, &dmcf, &dmcfieldf, &tself, &bself, imins, jmins);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {frame_pred_dct==0, 0<=i}
         /* backward prediction */
         frame_estimate(neworg, newref, mb, i, j, sxb, syb, &iminr, &jminr, &imintr, &jmintr, &iminbr, &jminbr, &dmcr, &dmcfieldr, &tselr, &bselr, imins, jmins);
//  P(bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,imin,iminb,iminbf,iminbr,imindmv,imindp,
//    iminf,iminr,imint,imintf,imintr,jmin,jminb,jminbf,jminbr,
//    jmindmv,jmindp,jminf,jminr,jmint,jmintf,jmintr,tsel,tself,tselr,
//    v0,var,vmc,vmc_dp,vmcf,vmci,vmcr) {frame_pred_dct==0, 0<=i}
         /* calculate interpolated distance */
         /* frame */
         dmci = bdist1(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* top field */
         dmcfieldi = bdist1(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* bottom field */
         dmcfieldi += bdist1(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         /* select prediction type of minimum distance from the
                * six candidates (field/frame * forward/backward/interpolated)
                */
         if (dmci<dmcfieldi&&dmci<dmcf&&dmci<dmcfieldf&&dmci<dmcr&&dmci<dmcfieldr) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmci+1<=dmcf, dmci+1<=dmcfieldf,
//    dmci+1<=dmcfieldi, dmci+1<=dmcfieldr, dmci+1<=dmcr}
            /* frame, interpolated */
            mbi->mb_type = 8|4;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmci+1<=dmcf, dmci+1<=dmcfieldf,
//    dmci+1<=dmcfieldi, dmci+1<=dmcfieldr, dmci+1<=dmcr}
            mbi->motion_type = 2;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmci+1<=dmcf, dmci+1<=dmcfieldf,
//    dmci+1<=dmcfieldi, dmci+1<=dmcfieldr, dmci+1<=dmcr}
            vmc = bdist2(oldref+(iminf>>1)+width*(jminf>>1), newref+(iminr>>1)+width*(jminr>>1), mb, width, iminf&1, jminf&1, iminr&1, jminr&1, 16);
         }
         else if (dmcfieldi<dmcf&&dmcfieldi<dmcfieldf&&dmcfieldi<dmcr&&dmcfieldi<dmcfieldr) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldi+1<=dmcf,
//    dmcfieldi+1<=dmcfieldf, dmcfieldi+1<=dmcfieldr,
//    dmcfieldi+1<=dmcr}
            /* field, interpolated */
            mbi->mb_type = 8|4;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldi+1<=dmcf,
//    dmcfieldi+1<=dmcfieldf, dmcfieldi+1<=dmcfieldr,
//    dmcfieldi+1<=dmcr}
            mbi->motion_type = 1;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldi+1<=dmcf,
//    dmcfieldi+1<=dmcfieldf, dmcfieldi+1<=dmcfieldr,
//    dmcfieldi+1<=dmcr}
            vmc = bdist2(oldref+(imintf>>1)+(tself?width:0)+(width<<1)*(jmintf>>1), newref+(imintr>>1)+(tselr?width:0)+(width<<1)*(jmintr>>1), mb, width<<1, imintf&1, jmintf&1, imintr&1, jmintr&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
            vmc += bdist2(oldref+(iminbf>>1)+(bself?width:0)+(width<<1)*(jminbf>>1), newref+(iminbr>>1)+(bselr?width:0)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbf&1, jminbf&1, iminbr&1, jminbr&1, 8);
         }
         else if (dmcf<dmcfieldf&&dmcf<dmcr&&dmcf<dmcfieldr) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcf+1<=dmcfieldf,
//    dmcf+1<=dmcfieldr, dmcf+1<=dmcr}
            /* frame, forward */
            mbi->mb_type = 8;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcf+1<=dmcfieldf,
//    dmcf+1<=dmcfieldr, dmcf+1<=dmcr}
            mbi->motion_type = 2;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcf+1<=dmcfieldf,
//    dmcf+1<=dmcfieldr, dmcf+1<=dmcr}
            vmc = dist2(oldref+(iminf>>1)+width*(jminf>>1), mb, width, iminf&1, jminf&1, 16);
         }
         else if (dmcfieldf<dmcr&&dmcfieldf<dmcfieldr) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldf+1<=dmcfieldr,
//    dmcfieldf+1<=dmcr}
            /* field, forward */
            mbi->mb_type = 8;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldf+1<=dmcfieldr,
//    dmcfieldf+1<=dmcr}
            mbi->motion_type = 1;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldf+1<=dmcfieldr,
//    dmcfieldf+1<=dmcr}
            vmc = dist2(oldref+(tself?width:0)+(imintf>>1)+(width<<1)*(jmintf>>1), mb, width<<1, imintf&1, jmintf&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldf+1<=dmcfieldr,
//    dmcfieldf+1<=dmcr, 0<=vmc}
            vmc += dist2(oldref+(bself?width:0)+(iminbf>>1)+(width<<1)*(jminbf>>1), mb+width, width<<1, iminbf&1, jminbf&1, 8);
         }
         else if (dmcr<dmcfieldr) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcr+1<=dmcfieldr}
            /* frame, backward */
            mbi->mb_type = 4;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcr+1<=dmcfieldr}
            mbi->motion_type = 2;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcr+1<=dmcfieldr}
            vmc = dist2(newref+(iminr>>1)+width*(jminr>>1), mb, width, iminr&1, jminr&1, 16);
         }
         else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldr<=dmcr}
            /* field, backward */
            mbi->mb_type = 4;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldr<=dmcr}
            mbi->motion_type = 1;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldr<=dmcr}
            vmc = dist2(newref+(tselr?width:0)+(imintr>>1)+(width<<1)*(jmintr>>1), mb, width<<1, imintr&1, jmintr&1, 8);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {dmcfieldr<=dmcr, 0<=vmc}
            vmc += dist2(newref+(bselr?width:0)+(iminbr>>1)+(width<<1)*(jminbr>>1), mb+width, width<<1, iminbr&1, jminbr&1, 8);
         }
      }
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
      /* select between intra or non-intra coding:
           *
           * selection is based on intra block variance (var) vs.
           * prediction error variance (vmc)
           *
           * blocks with small prediction error are always coded non-intra
           * even if variance is smaller (is this reasonable?)
           */
      if (vmc>var&&vmc>=9*256)
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var+1<=vmc, 2304<=vmc}
         mbi->mb_type = 1;
      else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
         var = vmc;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
         if (mbi->motion_type==2) {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            /* forward */
            (((mbi->MV)[0])[0])[0] = iminf-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[0])[0])[1] = jminf-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            /* backward */
            (((mbi->MV)[0])[1])[0] = iminr-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[0])[1])[1] = jminr-(j<<1);
         }
         else {
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            /* these are FRAME vectors */
            /* forward */
            (((mbi->MV)[0])[0])[0] = imintf-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[0])[0])[1] = (jmintf<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[1])[0])[0] = iminbf-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[1])[0])[1] = (jminbf<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[0] = tself;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            ((mbi->mv_field_sel)[1])[0] = bself;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            /* backward */
            (((mbi->MV)[0])[1])[0] = imintr-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[0])[1])[1] = (jmintr<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[1])[1])[0] = iminbr-(i<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            (((mbi->MV)[1])[1])[1] = (jminbr<<1)-(j<<1);
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            ((mbi->mv_field_sel)[0])[1] = tselr;
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {var==vmc}
            ((mbi->mv_field_sel)[1])[1] = bselr;
         }
      }
   }
//  P(M,bsel,bself,bselr,dmc,dmc_dp,dmcf,dmcfield,dmcfieldf,dmcfieldi,
//    dmcfieldr,dmci,dmcr,frame_pred_dct,height,i,imin,iminb,iminbf,
//    iminbr,imindmv,imindp,iminf,iminr,imint,imintf,imintr,j,jmin,
//    jminb,jminbf,jminbr,jmindmv,jmindp,jminf,jminr,jmint,jmintf,
//    jmintr,pict_type,sxb,sxf,syb,syf,tsel,tself,tselr,v0,var,vmc,
//    vmc_dp,vmcf,vmci,vmcr,width) {}
   mbi->var = var;
}
//  P() {0<=i}
static void frame_estimate(unsigned char *org, unsigned char *ref, unsigned char *mb, int i, int j, int sx, int sy, int *iminp, int *jminp, int *imintp, int *jmintp, int *iminbp, int *jminbp, int *dframep, int *dfieldp, int *tselp, int *bselp, int imins[2][2], int jmins[2][2])
{
//  P() {0<=i}
   int dt, db, dmint, dminb;
//  P(db,dminb,dmint,dt) {0<=i}
   int imint, iminb, jmint, jminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {0<=i}
   /* frame prediction */
   *dframep = fullsearch(org, ref, mb, width, i, j, sx, sy, 16, width, height, iminp, jminp);
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {0<=i}
   /* predict top field from top field */
   dt = fullsearch(org, ref, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dt<=65536, 0<=i}
   /* predict top field from bottom field */
   db = fullsearch(org+width, ref+width, mb, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dt<=65536, 0<=i}
   imins[0][0] = imint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dt<=65536, 0<=i}
   jmins[0][0] = jmint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dt<=65536, 0<=i}
   imins[1][0] = iminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dt<=65536, 0<=i}
   jmins[1][0] = jminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dt<=65536, 0<=i}
   /* select prediction for top field */
   if (dt<=db) {
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536, dt<=db,
//    dt<=65536, 0<=i}
      dmint = dt;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dmint==dt,
//    db<=65536, dmint<=db, dmint<=65536, 0<=i}
      *imintp = imint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dmint==dt,
//    db<=65536, dmint<=db, dmint<=65536, 0<=i}
      *jmintp = jmint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dmint==dt,
//    db<=65536, dmint<=db, dmint<=65536, 0<=i}
      *tselp = 0;
   }
   else {
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536, db+1<=dt,
//    dt<=65536, 0<=i}
      dmint = db;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dmint,
//    db<=65536, db+1<=dt, dt<=65536, 0<=i}
      *imintp = iminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dmint,
//    db<=65536, db+1<=dt, dt<=65536, 0<=i}
      *jmintp = jminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dmint,
//    db<=65536, db+1<=dt, dt<=65536, 0<=i}
      *tselp = 1;
   }
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dmint<=db,
//    db+dt<=dmint+65536, dmint<=dt, 0<=i}
   /* predict bottom field from top field */
   dt = fullsearch(org, ref, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &imint, &jmint);
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=db, dt<=65536, 0<=i}
   /* predict bottom field from bottom field */
   db = fullsearch(org+width, ref+width, mb+width, width<<1, i, j>>1, sx, sy>>1, 8, width, height>>1, &iminb, &jminb);
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=65536, dt<=65536, 0<=i}
   imins[0][1] = imint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=65536, dt<=65536, 0<=i}
   jmins[0][1] = jmint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=65536, dt<=65536, 0<=i}
   imins[1][1] = iminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=65536, dt<=65536, 0<=i}
   jmins[1][1] = jminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536,
//    dmint<=65536, dt<=65536, 0<=i}
   /* select prediction for bottom field */
   if (db<=dt) {
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536, db<=dt,
//    dmint<=65536, dt<=65536, 0<=i}
      dminb = db;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dminb,
//    db<=65536, db<=dt, dmint<=65536, dt<=65536, 0<=i}
      *iminbp = iminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dminb,
//    db<=65536, db<=dt, dmint<=65536, dt<=65536, 0<=i}
      *jminbp = jminb;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db==dminb,
//    db<=65536, db<=dt, dmint<=65536, dt<=65536, 0<=i}
      *bselp = 1;
   }
   else {
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {db<=65536, dt+1<=db,
//    dmint<=65536, dt<=65536, 0<=i}
      dminb = dt;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dminb==dt,
//    db<=65536, dminb+1<=db, dminb<=65536, dmint<=65536, 0<=i}
      *iminbp = imint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dminb==dt,
//    db<=65536, dminb+1<=db, dminb<=65536, dmint<=65536, 0<=i}
      *jminbp = jmint;
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dminb==dt,
//    db<=65536, dminb+1<=db, dminb<=65536, dmint<=65536, 0<=i}
      *bselp = 0;
   }
//  P(db,dminb,dmint,dt,iminb,imint,jminb,jmint) {dminb<=db,
//    db+dt<=dminb+65536, dminb<=dt, dmint<=65536, 0<=i}
   *dfieldp = dmint+dminb;
}
//  P() {8<=h, h<=16, 0<=i0}
static int fullsearch(unsigned char *org, unsigned char *ref, unsigned char *blk, int lx, int i0, int j0, int sx, int sy, int h, int xmax, int ymax, int *iminp, int *jminp)
{
//  P() {8<=h, h<=16, 0<=i0}
   int i, j, imin, jmin, ilow, ihigh, jlow, jhigh;
//  P(i,ihigh,ilow,imin,j,jhigh,jlow,jmin) {8<=h, h<=16, 0<=i0}
   int d, dmin;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin) {8<=h, h<=16, 0<=i0}
   int k, l, sxy;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, 0<=i0}
   ilow = i0-sx;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {ilow+sx==i0, 8<=h, h<=16, 0<=i0}
   ihigh = i0+sx;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {i0+sx==ihigh, ilow+sx==i0, 8<=h, h<=16, 0<=i0}
   if (ilow<0)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {i0+sx==ihigh, ilow+sx==i0, 8<=h, h<=16, 0<=i0, ilow+1<=0}
      ilow = 0;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {i0+sx==ihigh, 8<=h, h<=16, 0<=i0, 2i0<=ihigh+ilow, 0<=ilow}
   if (ihigh>xmax-16)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {i0+sx==ihigh, 8<=h, h<=16, 0<=i0, 2i0<=ihigh+ilow,
//    xmax<=ihigh+15, 0<=ilow}
      ihigh = xmax-16;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax,
//    0<=ilow}
   jlow = j0-sy;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {jlow+sy==j0, 8<=h, h<=16, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow}
   jhigh = j0+sy;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {j0+sy==jhigh, jlow+sy==j0, 8<=h, h<=16, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow}
   if (jlow<0)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {j0+sy==jhigh, jlow+sy==j0, 8<=h, h<=16, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jlow+1<=0}
      jlow = 0;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {j0+sy==jhigh, 8<=h, h<=16, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow, 2j0<=jhigh+jlow, 0<=jlow}
   if (jhigh>ymax-h)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {j0+sy==jhigh, 8<=h, h<=16, ymax+1<=h+jhigh, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow,
//    2j0<=jhigh+jlow, 0<=jlow}
      jhigh = ymax-h;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow}
   /* full pel search, spiraling outwards */
   imin = i0;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i0==imin,
//    8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow}
   jmin = j0;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i0==imin,
//    j0==jmin, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow}
   dmin = dist1(org+imin+lx*jmin, blk, lx, 0, 0, h, 65536);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i0==imin,
//    j0==jmin, 0<=dmin, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow,
//    jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow}
   sxy = sx>sy?sx:sy;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i0==imin,
//    j0==jmin, 0<=dmin, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow,
//    jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow, sx<=sxy, sy<=sxy}
   for(l = 1; l <= sxy; l += 1) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow,
//    1<=l, l<=sxy, sx<=sxy, sy<=sxy}
      i = i0-l;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i+l==i0,
//    8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow,
//    1<=l, l<=sxy, sx<=sxy, sy<=sxy}
      j = j0-l;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {i+l==i0,
//    j+l==j0, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
      for(k = 0; k <= 8*l-1; k += 1) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 0<=k, k+1<=8l, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
         if (i>=ilow&&i<=ihigh&&j>=jlow&&j<=jhigh) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, i<=ihigh, ilow<=i, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, j<=jhigh,
//    jlow<=j, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow, 0<=k, k+1<=8l,
//    1<=l, l<=sxy, sx<=sxy, sy<=sxy}
            d = dist1(org+i+lx*j, blk, lx, 0, 0, h, dmin);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {0<=d, 8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, i<=ihigh, ilow<=i, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, j<=jhigh,
//    jlow<=j, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow, 0<=k, k+1<=8l,
//    1<=l, l<=sxy, sx<=sxy, sy<=sxy}
            if (d<dmin) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {0<=d,
//    d+1<=dmin, 8<=h, h<=16, h+jhigh<=ymax, i0+j<=i+j0+k,
//    i+j0<=i0+j+k, i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, i<=ihigh,
//    ilow<=i, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax,
//    0<=ilow, j<=jhigh, jlow<=j, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow,
//    0<=k, k+1<=8l, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
               dmin = d;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {d==dmin,
//    0<=d, 8<=h, h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, i<=ihigh, ilow<=i, 0<=i0,
//    ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, j<=jhigh,
//    jlow<=j, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow, 0<=k, k+1<=8l,
//    1<=l, l<=sxy, sx<=sxy, sy<=sxy}
               imin = i;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {d==dmin,
//    i==imin, 0<=d, 8<=h, h<=16, h+jhigh<=ymax, i0+j<=i+j0+k,
//    i+j0<=i0+j+k, i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, i<=ihigh,
//    ilow<=i, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx, ihigh+16<=xmax,
//    0<=ilow, j<=jhigh, jlow<=j, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow,
//    0<=k, k+1<=8l, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
               jmin = j;
            }
         }
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, k+1<=8l, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
         if (k<2*l)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, k+1<=8l, k+1<=2l, 1<=l, l<=sxy, sx<=sxy, sy<=sxy}
            i++;
         else if (k<4*l)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 2l<=k, k+1<=8l, k+1<=4l, 1<=l, l<=sxy, sx<=sxy,
//    sy<=sxy}
            j++;
         else if (k<6*l)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 2l<=k, 4l<=k, k+1<=8l, k+1<=6l, 1<=l, l<=sxy, sx<=sxy,
//    sy<=sxy}
            i--;
         else
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, i0+j<=i+j0+k, i+j0<=i0+j+k,
//    i0+j0<=i+j+k+2l, i+j+2l<=i0+j0+k, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, 0<=ilow, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 2l<=k, 4l<=k, 6l<=k, k+1<=8l, 1<=l, l<=sxy, sx<=sxy,
//    sy<=sxy}
            j--;
      }
   }
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {8<=h,
//    h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx, i0<=ilow+sx,
//    ihigh+16<=xmax, l<=ilow+sxy+1, jhigh<=j0+sy, j0<=jlow+sy,
//    0<=jlow, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   /* half pel */
   dmin = 65536;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, l<=ilow+sxy+1, jhigh<=j0+sy,
//    j0<=jlow+sy, 0<=jlow, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   imin <<= 1;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, l<=ilow+sxy+1, jhigh<=j0+sy,
//    j0<=jlow+sy, 0<=jlow, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   jmin <<= 1;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    i0<=ilow+sx, ihigh+16<=xmax, l<=ilow+sxy+1, jhigh<=j0+sy,
//    j0<=jlow+sy, 0<=jlow, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   ilow = imin-(imin>0);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, ihigh<=i0+sx,
//    ihigh+16<=xmax, jhigh<=j0+sy, j0<=jlow+sy, 0<=jlow, 1<=l,
//    sxy+1<=l, sx<=sxy, sy<=sxy}
   ihigh = imin+(imin<xmax-16<<1);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, jhigh<=j0+sy,
//    j0<=jlow+sy, 0<=jlow, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   jlow = jmin-(jmin>0);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, h+jhigh<=ymax, 0<=i0, jhigh<=j0+sy,
//    1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
   jhigh = jmin+(jmin<ymax-h<<1);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin==65536, 8<=h, h<=16, 0<=i0, 1<=l, sxy+1<=l, sx<=sxy,
//    sy<=sxy}
   for(j = jlow; j <= jhigh; j += 1)
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin<=65536, 8<=h, h<=16, 0<=i0, j<=jhigh, jlow<=j, 1<=l,
//    sxy+1<=l, sx<=sxy, sy<=sxy}
      for(i = ilow; i <= ihigh; i += 1) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin<=65536, 8<=h, h<=16, i<=ihigh, ilow<=i, 0<=i0, j<=jhigh,
//    jlow<=j, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
         d = dist1(ref+(i>>1)+lx*(j>>1), blk, lx, i&1, j&1, h, dmin);
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {0<=d,
//    dmin<=65536, 8<=h, h<=16, i<=ihigh, ilow<=i, 0<=i0, j<=jhigh,
//    jlow<=j, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
         if (d<dmin) {
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {0<=d,
//    d+1<=dmin, dmin<=65536, 8<=h, h<=16, i<=ihigh, ilow<=i, 0<=i0,
//    j<=jhigh, jlow<=j, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
            dmin = d;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {d==dmin,
//    0<=d, d<=65535, 8<=h, h<=16, i<=ihigh, ilow<=i, 0<=i0, j<=jhigh,
//    jlow<=j, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
            imin = i;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy) {d==dmin,
//    i==imin, 0<=d, d<=65535, 8<=h, h<=16, i<=ihigh, ilow<=i, 0<=i0,
//    j<=jhigh, jlow<=j, 1<=l, sxy+1<=l, sx<=sxy, sy<=sxy}
            jmin = j;
         }
      }
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin<=65536, 8<=h, h<=16, 0<=i0, jhigh+1<=j, jlow<=j, 1<=l,
//    sxy+1<=l, sx<=sxy, sy<=sxy}
   *iminp = imin;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin<=65536, 8<=h, h<=16, 0<=i0, jhigh+1<=j, jlow<=j, 1<=l,
//    sxy+1<=l, sx<=sxy, sy<=sxy}
   *jminp = jmin;
//  P(d,dmin,i,ihigh,ilow,imin,j,jhigh,jlow,jmin,k,l,sxy)
//    {dmin<=65536, 8<=h, h<=16, 0<=i0, jhigh+1<=j, jlow<=j, 1<=l,
//    sxy+1<=l, sx<=sxy, sy<=sxy}
   return dmin;
}
//  P() {}
static int variance(unsigned char *p, int lx)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   unsigned int v, s, s2;
//  P(i,j,s,s2,v) {}
   s = s2 = 0;
//  P(i,j,s,s2,v) {s==0, s2==0}
   for(j = 0; j <= 15; j += 1) {
//  P(i,j,s,s2,v) {0<=j, j<=15, 0<=s2}
      for(i = 0; i <= 15; i += 1) {
//  P(i,j,s,s2,v) {0<=i, i<=15, 0<=j, j<=15, 0<=s2}
         v = *p++;
//  P(i,j,s,s2,v) {0<=i, i<=15, 0<=j, j<=15, 0<=s2}
         s += v;
//  P(i,j,s,s2,v) {0<=i, i<=15, 0<=j, j<=15, 0<=s2}
         s2 += v*v;
      }
//  P(i,j,s,s2,v) {i==16, 0<=j, j<=15, 0<=s2}
      p += lx-16;
   }
//  P(i,j,s,s2,v) {i==16, j==16, 0<=s2}
   return s2-s*s/256;
}
//  P() {0<=secondfield, secondfield<=1}
void motion_estimation(unsigned char *oldorg, unsigned char *neworg, unsigned char *oldref, unsigned char *newref, unsigned char *cur, unsigned char *curref, int sxf, int syf, int sxb, int syb, struct mbinfo *mbi, int secondfield, int ipflag)
{
//  P() {0<=secondfield, secondfield<=1}
   int i, j;
//  P(i,j) {0<=secondfield, secondfield<=1}
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16) {
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {0<=j}
      for(i = 0; i <= width-1; i += 16) {
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {0<=i}
         if (pict_struct==3)
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {pict_struct==3, 0<=i}
            frame_ME(oldorg, neworg, oldref, newref, cur, i, j, sxf, syf, sxb, syb, mbi);
         else
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {0<=i}
            field_ME(oldorg, neworg, oldref, newref, cur, curref, i, j, sxf, syf, sxb, syb, mbi, secondfield, ipflag);
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
         mbi++;
      }
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
      if (!quiet) {
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {quiet<=0}
         _IO_putc('.', stderr);
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {quiet<=0}
         fflush(stderr);
      }
   }
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {}
   if (!quiet)
//  P(height2,i,ipflag,j,pict_struct,quiet,secondfield,sxb,sxf,syb,
//    syf,width) {quiet<=0}
      _IO_putc('\n', stderr);
}
//  P() {}
static void init()
{
//  P() {}
   int i, size;
//  P(i,size) {}
   static int block_count_tab[3] = {6, 8, 12};
//  P(i,size) {}
   initbits();
//  P(i,putbits!:bytecnt,putbits!:outcnt,size) {putbits!:bytecnt==0,
//    putbits!:outcnt==8}
   init_fdct();
//  P(i,putbits!:bytecnt,putbits!:outcnt,size) {putbits!:bytecnt==0,
//    putbits!:outcnt==8}
   init_idct();
//  P(i,putbits!:bytecnt,putbits!:outcnt,size) {putbits!:bytecnt==0,
//    putbits!:outcnt==8}
   /* round picture dimensions to nearest multiple of 16 or 32 */
   mb_width = (horizontal_size+15)/16;
//  P(i,mb_width,putbits!:bytecnt,putbits!:outcnt,size)
//    {putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15}
   mb_height = prog_seq?(vertical_size+15)/16:2*((vertical_size+31)/32);
//  P(i,mb_height,mb_width,putbits!:bytecnt,putbits!:outcnt,size)
//    {putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   mb_height2 = fieldpic?mb_height>>1:mb_height;
//  P(i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size) {putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   /* for field pictures */
   width = 16*mb_width;
//  P(i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width) {16mb_width==width,
//    putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   height = 16*mb_height;
//  P(height,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   chrom_width = chroma_format==3?width:width>>1;
//  P(chrom_width,height,i,mb_height,mb_height2,mb_width,
//    putbits!:bytecnt,putbits!:outcnt,size,width)
//    {height==16mb_height, 16mb_width==width, putbits!:bytecnt==0,
//    putbits!:outcnt==8, horizontal_size<=16mb_width,
//    16mb_width<=horizontal_size+15, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
   chrom_height = chroma_format!=1?height:height>>1;
//  P(chrom_height,chrom_width,height,i,mb_height,mb_height2,mb_width,
//    putbits!:bytecnt,putbits!:outcnt,size,width)
//    {height==16mb_height, 16mb_width==width, putbits!:bytecnt==0,
//    putbits!:outcnt==8, horizontal_size<=16mb_width,
//    16mb_width<=horizontal_size+15, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
   height2 = fieldpic?height>>1:height;
//  P(chrom_height,chrom_width,height,height2,i,mb_height,mb_height2,
//    mb_width,putbits!:bytecnt,putbits!:outcnt,size,width)
//    {height==16mb_height, 16mb_width==width, putbits!:bytecnt==0,
//    putbits!:outcnt==8, horizontal_size<=16mb_width,
//    16mb_width<=horizontal_size+15, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
   width2 = fieldpic?width<<1:width;
//  P(chrom_height,chrom_width,height,height2,i,mb_height,mb_height2,
//    mb_width,putbits!:bytecnt,putbits!:outcnt,size,width,width2)
//    {height==16mb_height, 16mb_width==width, putbits!:bytecnt==0,
//    putbits!:outcnt==8, horizontal_size<=16mb_width,
//    16mb_width<=horizontal_size+15, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
   chrom_width2 = fieldpic?chrom_width<<1:chrom_width;
//  P(chrom_height,chrom_width,chrom_width2,height,height2,i,
//    mb_height,mb_height2,mb_width,putbits!:bytecnt,putbits!:outcnt,
//    size,width,width2) {height==16mb_height, 16mb_width==width,
//    putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   block_count = block_count_tab[chroma_format-1];
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   /* clip table */
   if (!(clp = (unsigned char *) malloc(1024)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   clp += 384;
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   for(i = -384; i <= 639; i += 1)
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i+384, i<=639, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      clp[i] = i<0?0:i>255?255:i;
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==640,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   for(i = 0; i <= 2; i += 1) {
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      size = i==0?width*height:chrom_width*chrom_height;
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(newrefframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(oldrefframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(auxframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(neworgframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(oldorgframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(auxorgframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
      if (!(predframe[i] = (unsigned char *) malloc(size)))
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    0<=i, i<=2, vertical_size<=16mb_height,
//    16mb_height<=vertical_size+31}
         error("malloc failed\n");
   }
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   mbinfo = (struct mbinfo *) malloc(mb_width*mb_height2*sizeof(struct mbinfo ));
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   if (!mbinfo)
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   blocks = (short (*)[64]) malloc(mb_width*mb_height2*block_count*sizeof(short[64]));
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   if (!blocks)
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      error("malloc failed\n");
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
   /* open statistics output file */
   if (statname[0]=='-')
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      statfile = stdout;
   else if (!(statfile = fopen(statname, "w"))) {
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      sprintf(errortext, "Couldn't create statistics output file %s", statname);
//  P(block_count,chrom_height,chrom_width,chrom_width2,height,
//    height2,i,mb_height,mb_height2,mb_width,putbits!:bytecnt,
//    putbits!:outcnt,size,width,width2) {height==16mb_height, i==3,
//    16mb_width==width, putbits!:bytecnt==0, putbits!:outcnt==8,
//    horizontal_size<=16mb_width, 16mb_width<=horizontal_size+15,
//    vertical_size<=16mb_height, 16mb_height<=vertical_size+31}
      error(errortext);
   }
}
//  P() {}
static void readparmfile(char *fname)
{
//  P() {}
   int i;
//  P(i) {}
   int h, m, s, f;
//  P(f,h,i,m,s) {}
   FILE *fd;
//  P(f,h,i,m,s) {}
   char line[256];
//  P(f,h,i,m,s) {}
   static double ratetab[8] = {24000.0/1001.0, 24.0, 25.0, 30000.0/1001.0, 30.0, 50.0, 60000.0/1001.0, 60.0};
//  P(f,h,i,m,s) {}
   extern int r, Xi, Xb, Xp, d0i, d0p, d0b;
   /* rate control */
//  P(f,h,i,m,s) {}
   extern double avg_act;
//  P(f,h,i,m,s) {}
   /* rate control */
   if (!(fd = fopen(fname, "r"))) {
//  P(f,h,i,m,s) {}
      sprintf(errortext, "Couldn't open parameter file %s", fname);
//  P(f,h,i,m,s) {}
      error(errortext);
   }
//  P(f,h,i,m,s) {}
   fgets(id_string, 254, fd);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%s", tplorg);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%s", tplref);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%s", iqname);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%s", niqname);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%s", statname);
//  P(f,h,i,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,m,s) {}
   sscanf(line, "%d", &inputtype);
//  P(f,h,i,inputtype,m,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,inputtype,m,s) {}
   sscanf(line, "%d", &nframes);
//  P(f,h,i,inputtype,m,nframes,s) {}
   fgets(line, 254, fd);
//  P(f,h,i,inputtype,m,nframes,s) {}
   sscanf(line, "%d", &frame0);
//  P(f,frame0,h,i,inputtype,m,nframes,s) {}
   fgets(line, 254, fd);
//  P(f,frame0,h,i,inputtype,m,nframes,s) {}
   sscanf(line, "%d:%d:%d:%d", &h, &m, &s, &f);
//  P(f,frame0,h,i,inputtype,m,nframes,s) {}
   fgets(line, 254, fd);
//  P(f,frame0,h,i,inputtype,m,nframes,s) {}
   sscanf(line, "%d", &N);
//  P(N,f,frame0,h,i,inputtype,m,nframes,s) {}
   fgets(line, 254, fd);
//  P(N,f,frame0,h,i,inputtype,m,nframes,s) {}
   sscanf(line, "%d", &M);
//  P(M,N,f,frame0,h,i,inputtype,m,nframes,s) {}
   fgets(line, 254, fd);
//  P(M,N,f,frame0,h,i,inputtype,m,nframes,s) {}
   sscanf(line, "%d", &mpeg1);
//  P(M,N,f,frame0,h,i,inputtype,m,mpeg1,nframes,s) {}
   fgets(line, 254, fd);
//  P(M,N,f,frame0,h,i,inputtype,m,mpeg1,nframes,s) {}
   sscanf(line, "%d", &fieldpic);
//  P(M,N,f,fieldpic,frame0,h,i,inputtype,m,mpeg1,nframes,s) {}
   fgets(line, 254, fd);
//  P(M,N,f,fieldpic,frame0,h,i,inputtype,m,mpeg1,nframes,s) {}
   sscanf(line, "%d", &horizontal_size);
//  P(M,N,f,fieldpic,frame0,h,horizontal_size,i,inputtype,m,mpeg1,
//    nframes,s) {}
   fgets(line, 254, fd);
//  P(M,N,f,fieldpic,frame0,h,horizontal_size,i,inputtype,m,mpeg1,
//    nframes,s) {}
   sscanf(line, "%d", &vertical_size);
//  P(M,N,f,fieldpic,frame0,h,horizontal_size,i,inputtype,m,mpeg1,
//    nframes,s,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,f,fieldpic,frame0,h,horizontal_size,i,inputtype,m,mpeg1,
//    nframes,s,vertical_size) {}
   sscanf(line, "%d", &aspectratio);
//  P(M,N,aspectratio,f,fieldpic,frame0,h,horizontal_size,i,inputtype,
//    m,mpeg1,nframes,s,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,f,fieldpic,frame0,h,horizontal_size,i,inputtype,
//    m,mpeg1,nframes,s,vertical_size) {}
   sscanf(line, "%d", &frame_rate_code);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vertical_size) {}
   sscanf(line, "%lf", &bit_rate);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vertical_size) {}
   sscanf(line, "%d", &vbv_buffer_size);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vbv_buffer_size,
//    vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,m,mpeg1,nframes,s,vbv_buffer_size,
//    vertical_size) {}
   sscanf(line, "%d", &low_delay);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,s,
//    vbv_buffer_size,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,s,
//    vbv_buffer_size,vertical_size) {}
   sscanf(line, "%d", &constrparms);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,s,
//    vbv_buffer_size,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,s,
//    vbv_buffer_size,vertical_size) {}
   sscanf(line, "%d", &profile);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,profile,s,
//    vbv_buffer_size,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,low_delay,m,mpeg1,nframes,profile,s,
//    vbv_buffer_size,vertical_size) {}
   sscanf(line, "%d", &level);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,mpeg1,nframes,
//    profile,s,vbv_buffer_size,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,mpeg1,nframes,
//    profile,s,vbv_buffer_size,vertical_size) {}
   sscanf(line, "%d", &prog_seq);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,mpeg1,nframes,
//    profile,prog_seq,s,vbv_buffer_size,vertical_size) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,constrparms,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,mpeg1,nframes,
//    profile,prog_seq,s,vbv_buffer_size,vertical_size) {}
   sscanf(line, "%d", &chroma_format);
//  P(M,N,aspectratio,chroma_format,constrparms,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    mpeg1,nframes,profile,prog_seq,s,vbv_buffer_size,vertical_size)
//    {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,constrparms,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    mpeg1,nframes,profile,prog_seq,s,vbv_buffer_size,vertical_size)
//    {}
   sscanf(line, "%d", &video_format);
//  P(M,N,aspectratio,chroma_format,constrparms,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    mpeg1,nframes,profile,prog_seq,s,vbv_buffer_size,vertical_size,
//    video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,constrparms,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    mpeg1,nframes,profile,prog_seq,s,vbv_buffer_size,vertical_size,
//    video_format) {}
   sscanf(line, "%d", &color_primaries);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,mpeg1,nframes,profile,prog_seq,s,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,mpeg1,nframes,profile,prog_seq,s,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &transfer_characteristics);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   sscanf(line, "%d", &matrix_coefficients);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   sscanf(line, "%d", &display_horizontal_size);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    display_horizontal_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    display_horizontal_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   sscanf(line, "%d", &display_vertical_size);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    display_horizontal_size,display_vertical_size,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    display_horizontal_size,display_vertical_size,f,fieldpic,frame0,
//    frame_rate_code,h,horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_seq,s,
//    transfer_characteristics,vbv_buffer_size,vertical_size,
//    video_format) {}
   sscanf(line, "%d", &dc_prec);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    dc_prec,display_horizontal_size,display_vertical_size,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    dc_prec,display_horizontal_size,display_vertical_size,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   sscanf(line, "%d", &topfirst);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    dc_prec,display_horizontal_size,display_vertical_size,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,topfirst,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,aspectratio,chroma_format,color_primaries,constrparms,
//    dc_prec,display_horizontal_size,display_vertical_size,f,
//    fieldpic,frame0,frame_rate_code,h,horizontal_size,i,inputtype,
//    level,low_delay,m,matrix_coefficients,mpeg1,nframes,profile,
//    prog_seq,s,topfirst,transfer_characteristics,vbv_buffer_size,
//    vertical_size,video_format) {}
   sscanf(line, "%d %d %d", frame_pred_dct_tab, frame_pred_dct_tab+1, frame_pred_dct_tab+2);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", conceal_tab, conceal_tab+1, conceal_tab+2);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", qscale_tab, qscale_tab+1, qscale_tab+2);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", intravlc_tab, intravlc_tab+1, intravlc_tab+2);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d %d %d", altscan_tab, altscan_tab+1, altscan_tab+2);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &repeatfirst);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &prog_frame);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   /* intra slice interval refresh period */
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &P);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &r);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%lf", &avg_act);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &Xi);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &Xp);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &Xb);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &d0i);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &d0p);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   sscanf(line, "%d", &d0b);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {}
   if (N<1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {N<=0}
      error("N must be positive");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=N}
   if (M<1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M<=0, 1<=N}
      error("M must be positive");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
   if (N%M!=0)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
      error("N must be an integer multiple of M");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
   motion_data = (struct motion_data *) malloc(M*sizeof(struct motion_data ));
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
   if (!motion_data)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
      error("malloc failed\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N}
   for(i = 0; i <= M-1; i += 1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    0<=i}
      fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    0<=i}
      sscanf(line, "%d %d %d %d", &motion_data[i].forw_hor_f_code, &motion_data[i].forw_vert_f_code, &motion_data[i].sxf, &motion_data[i].syf);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    0<=i}
      if (i!=0) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=i}
         fgets(line, 254, fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=i}
         sscanf(line, "%d %d %d %d", &motion_data[i].back_hor_f_code, &motion_data[i].back_vert_f_code, &motion_data[i].sxb, &motion_data[i].syb);
      }
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N}
   fclose(fd);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N}
   /* make flags boolean (x!=0 -> x=1) */
   mpeg1 = !!mpeg1;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=mpeg1, mpeg1<=1}
   fieldpic = !!fieldpic;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=fieldpic, fieldpic<=1, 0<=mpeg1, mpeg1<=1}
   low_delay = !!low_delay;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=fieldpic, fieldpic<=1, 0<=low_delay, low_delay<=1, 0<=mpeg1,
//    mpeg1<=1}
   constrparms = !!constrparms;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1}
   prog_seq = !!prog_seq;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1, 0<=prog_seq,
//    prog_seq<=1}
   topfirst = !!topfirst;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {M==i, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1, 0<=prog_seq,
//    prog_seq<=1, 0<=topfirst, topfirst<=1}
   for(i = 0; i <= 2; i += 1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1, 0<=i,
//    i<=2, 0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1,
//    0<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1}
      frame_pred_dct_tab[i] = !!frame_pred_dct_tab[i];
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1, 0<=i,
//    i<=2, 0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1,
//    0<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1}
      conceal_tab[i] = !!conceal_tab[i];
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1, 0<=i,
//    i<=2, 0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1,
//    0<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1}
      qscale_tab[i] = !!qscale_tab[i];
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1, 0<=i,
//    i<=2, 0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1,
//    0<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1}
      intravlc_tab[i] = !!intravlc_tab[i];
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1, 0<=i,
//    i<=2, 0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1,
//    0<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1}
      altscan_tab[i] = !!altscan_tab[i];
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1, 0<=prog_seq,
//    prog_seq<=1, 0<=topfirst, topfirst<=1}
   repeatfirst = !!repeatfirst;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1}
   prog_frame = !!prog_frame;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    0<=constrparms, constrparms<=1, 0<=fieldpic, fieldpic<=1,
//    0<=low_delay, low_delay<=1, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1}
   /* make sure MPEG specific parameters are valid */
   range_checks();
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   frame_rate = ratetab[frame_rate_code-1];
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   /* timecode -> frame number */
   tc0 = h;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {h==tc0, i==3, 1<=M,
//    1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   tc0 = 60*tc0+m;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {60h+m==tc0, i==3,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   tc0 = 60*tc0+s;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {3600h+60m+s==tc0,
//    i==3, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1, 0<=dc_prec,
//    dc_prec<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=prog_frame, prog_frame<=1, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
   tc0 = (int) (frame_rate+0.5)*tc0+f;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, 1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1, 0<=prog_frame,
//    prog_frame<=1, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (!mpeg1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, mpeg1==0,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      profile_and_level_checks();
   else {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, mpeg1==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      /* MPEG-1 */
      if (constrparms)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    i==3, mpeg1==1, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (horizontal_size>768||vertical_size>576||(horizontal_size+15)/16*((vertical_size+15)/16)>396||(horizontal_size+15)/16*((vertical_size+15)/16)*frame_rate>396*25.0||frame_rate>30.0) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    i==3, mpeg1==1, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    i==3, mpeg1==1, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    i==3, mpeg1==1, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            constrparms = 0;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i==3, mpeg1==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, 0<=low_delay,
//    low_delay<=1, 1<=matrix_coefficients, matrix_coefficients<=7,
//    0<=prog_frame, prog_frame<=1, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    0<=video_format, video_format<=4}
      if (constrparms) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    i==3, mpeg1==1, 1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         i = 0;
l99996:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (!(i<M)) goto _break_3;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (motion_data[i].forw_hor_f_code>4) goto l99999;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (motion_data[i].forw_vert_f_code>4) goto l99998;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (i!=0) goto l99997;
l99994:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         i++;
         goto l99996;
l99997:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (motion_data[i].back_hor_f_code>4) goto l99995;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (motion_data[i].back_vert_f_code>4) {
         }
         else {
            goto l99994;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=576, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         constrparms = 0;
         goto _break_3;
l99995:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=576, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    1<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         constrparms = 0;
         goto _break_3;
l99998:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=576, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         constrparms = 0;
         goto _break_3;
l99999:         ;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=576, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==1, 1<=M, i+1<=M, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
         constrparms = 0;
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    i+1<=M+constrparms, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    constrparms<=i, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=768,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=576,
//    0<=video_format, video_format<=4}
_break_3:         ;
      }
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M,
//    2constrparms+i+2mpeg1<=M+4, i<=M+2, 1<=N, 1<=aspectratio,
//    aspectratio<=14, 1<=chroma_format, chroma_format<=3,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1,
//    5205constrparms+horizontal_size+5205mpeg1<=5205i+5973,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    constrparms+2<=i+2mpeg1,
//    5269constrparms+5269mpeg1+vertical_size<=5269i+5845,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, horizontal_size<=5205i+768, 3<=i+3mpeg1,
//    vertical_size<=5269i+576, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=prog_frame, prog_frame<=1, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
   /* relational checks */
   if (mpeg1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1, 1<=M,
//    2constrparms+i<=M+2, i<=M+2, 1<=N, 1<=aspectratio,
//    aspectratio<=14, 1<=chroma_format, chroma_format<=3,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1, 15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (!prog_seq) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==0, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==0, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting progressive_sequence = 1\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==0, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         prog_seq = 1;
      }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (chroma_format!=1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 2<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 2<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting chroma_format = 1 (4:2:0)\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {mpeg1==1,
//    prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 2<=chroma_format,
//    chroma_format<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         chroma_format = 1;
      }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    mpeg1==1, prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (dc_prec!=0) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    mpeg1==1, prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 1<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    mpeg1==1, prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 1<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: setting intra_dc_precision = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    mpeg1==1, prog_seq==1, 1<=M, 2constrparms+i<=M+2, i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383, 1<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         dc_prec = 0;
      }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M, 2constrparms+i<=M+2,
//    i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1, 15615constrparms+horizontal_size<=16383,
//    5205constrparms+horizontal_size<=5205i+768, constrparms<=i,
//    5269constrparms+vertical_size<=5269i+576,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    horizontal_size<=5205i+768, 0<=i, vertical_size<=5269i+576,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      for(i = 0; i <= 2; i += 1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (qscale_tab[i]) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: setting qscale_tab[%d] = 0\n", i);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            qscale_tab[i] = 0;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, i==3, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      for(i = 0; i <= 2; i += 1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (intravlc_tab[i]) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: setting intravlc_tab[%d] = 0\n", i);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            intravlc_tab[i] = 0;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, i==3, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      for(i = 0; i <= 2; i += 1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (altscan_tab[i]) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: setting altscan_tab[%d] = 0\n", i);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {chroma_format==1,
//    dc_prec==0, mpeg1==1, prog_seq==1, 1<=M,
//    5205constrparms+horizontal_size<=5205M+11178,
//    10410constrparms+horizontal_size<=5205M+11178,
//    15615constrparms+horizontal_size<=5205M+11178,
//    5269constrparms+vertical_size<=5269M+11114,
//    10538constrparms+vertical_size<=5269M+11114,
//    15807constrparms+vertical_size<=5269M+11114, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size<=16383,
//    15807constrparms+vertical_size<=16383,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, i<=2, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            altscan_tab[i] = 0;
         }
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (!mpeg1&&constrparms) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==0, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==0, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         fprintf(stderr, "Warning: setting constrained_parameters_flag = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {constrparms==1,
//    mpeg1==0, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=prog_frame, prog_frame<=1,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      constrparms = 0;
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (prog_seq&&!prog_frame) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    prog_seq==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    prog_seq==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         fprintf(stderr, "Warning: setting progressive_frame = 1\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    prog_seq==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      prog_frame = 1;
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (prog_frame&&fieldpic) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {fieldpic==1,
//    prog_frame==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {fieldpic==1,
//    prog_frame==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=prog_seq, prog_seq<=1,
//    quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         fprintf(stderr, "Warning: setting field_pictures = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {fieldpic==1,
//    prog_frame==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    3<=i, 0<=low_delay, low_delay<=1, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      fieldpic = 0;
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (!prog_frame&&repeatfirst) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    repeatfirst==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    repeatfirst==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, quiet<=0, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         fprintf(stderr, "Warning: setting repeat_first_field = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==0,
//    repeatfirst==1, i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format+2mpeg1<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      repeatfirst = 0;
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (prog_frame)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==1,
//    i<=M+2, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      for(i = 0; i <= 2; i += 1)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, i<=2, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (!frame_pred_dct_tab[i]) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, i<=2, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, i<=2, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, quiet<=0, 0<=repeatfirst,
//    repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: setting frame_pred_frame_dct[%d] = 1\n", i);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_frame==1,
//    1<=M, 1<=N, 1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, i<=2, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    0<=topfirst, topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            frame_pred_dct_tab[i] = 1;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (prog_seq&&!repeatfirst&&topfirst) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_seq==1,
//    repeatfirst==0, topfirst==1, i<=M+2, 1<=N, 1<=aspectratio,
//    aspectratio<=14, 1<=chroma_format, chroma_format+2mpeg1<=3,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=prog_frame, prog_frame<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_seq==1,
//    repeatfirst==0, topfirst==1, i<=M+2, 1<=N, 1<=aspectratio,
//    aspectratio<=14, 1<=chroma_format, chroma_format+2mpeg1<=3,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=prog_frame, prog_frame<=1, quiet<=0,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         fprintf(stderr, "Warning: setting top_field_first = 0\n");
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {prog_seq==1,
//    repeatfirst==0, topfirst==1, i<=M+2, 1<=N, 1<=aspectratio,
//    aspectratio<=14, 1<=chroma_format, chroma_format+2mpeg1<=3,
//    1<=color_primaries, color_primaries<=7, 0<=constrparms,
//    constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 0<=prog_frame, prog_frame<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      topfirst = 0;
   }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {i<=M+2, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 3<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   /* search windows */
   for(i = 0; i <= M-1; i += 1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (motion_data[i].sxf>(4<<motion_data[i].forw_hor_f_code)-1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: reducing forward horizontal search width to %d\n", (4<<motion_data[i].forw_hor_f_code)-1);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         motion_data[i].sxf = (4<<motion_data[i].forw_hor_f_code)-1;
      }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (motion_data[i].syf>(4<<motion_data[i].forw_vert_f_code)-1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            fprintf(stderr, "Warning: reducing forward vertical search width to %d\n", (4<<motion_data[i].forw_vert_f_code)-1);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         motion_data[i].syf = (4<<motion_data[i].forw_vert_f_code)-1;
      }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      if (i!=0) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (motion_data[i].sxb>(4<<motion_data[i].back_hor_f_code)-1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: reducing backward horizontal search width to %d\n", (4<<motion_data[i].back_hor_f_code)-1);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            motion_data[i].sxb = (4<<motion_data[i].back_hor_f_code)-1;
         }
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         if (motion_data[i].syb>(4<<motion_data[i].back_vert_f_code)-1) {
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            if (!quiet)
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    quiet<=0, 0<=repeatfirst, repeatfirst<=1, 0<=topfirst,
//    topfirst<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
               fprintf(stderr, "Warning: reducing backward vertical search width to %d\n", (4<<motion_data[i].back_vert_f_code)-1);
//  P(M,N,P,Xb,Xi,Xp,aspectratio,chroma_format,color_primaries,
//    constrparms,d0b,d0i,d0p,dc_prec,display_horizontal_size,
//    display_vertical_size,f,fieldpic,frame0,frame_rate_code,h,
//    horizontal_size,i,inputtype,level,low_delay,m,
//    matrix_coefficients,mpeg1,nframes,profile,prog_frame,prog_seq,
//    quiet,r,repeatfirst,s,tc0,topfirst,transfer_characteristics,
//    vbv_buffer_size,vertical_size,video_format) {1<=M, i+1<=M, 1<=N,
//    1<=aspectratio, aspectratio<=14, 1<=chroma_format,
//    chroma_format+2mpeg1<=3, 1<=color_primaries, color_primaries<=7,
//    0<=constrparms, constrparms<=1,
//    15615constrparms+horizontal_size+15615mpeg1<=31998,
//    15807constrparms+15807mpeg1+vertical_size<=32190, 0<=dc_prec,
//    dc_prec+3mpeg1<=3, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 0<=low_delay, low_delay<=1,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=prog_seq, 0<=prog_frame, prog_frame<=1, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 0<=topfirst, topfirst<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            motion_data[i].syb = (4<<motion_data[i].back_vert_f_code)-1;
         }
      }
   }
}
//  P() {}
static void readquantmat()
{
//  P() {}
   int i, v;
//  P(i,v) {}
   FILE *fd;
//  P(i,v) {}
   if (iqname[0]=='-') {
//  P(i,v) {}
      /* use default intra matrix */
      load_iquant = 0;
//  P(i,load_iquant,v) {load_iquant==0}
      for(i = 0; i <= 63; i += 1)
//  P(i,load_iquant,v) {load_iquant==0, 0<=i, i<=63}
         intra_q[i] = default_intra_quantizer_matrix[i];
   }
   else {
//  P(i,v) {}
      /* read customized intra matrix */
      load_iquant = 1;
//  P(i,load_iquant,v) {load_iquant==1}
      if (!(fd = fopen(iqname, "r"))) {
//  P(i,load_iquant,v) {load_iquant==1}
         sprintf(errortext, "Couldn't open quant matrix file %s", iqname);
//  P(i,load_iquant,v) {load_iquant==1}
         error(errortext);
      }
//  P(i,load_iquant,v) {load_iquant==1}
      for(i = 0; i <= 63; i += 1) {
//  P(i,load_iquant,v) {load_iquant==1, 0<=i, i<=63}
         fscanf(fd, "%d", &v);
//  P(i,load_iquant,v) {load_iquant==1, 0<=i, i<=63}
         if (v<1||v>255)
//  P(i,load_iquant,v) {load_iquant==1, 0<=i, i<=63}
            error("invalid value in quant matrix");
//  P(i,load_iquant,v) {load_iquant==1, 0<=i, i<=63, 1<=v, v<=255}
         intra_q[i] = v;
      }
//  P(i,load_iquant,v) {i==64, load_iquant==1, 1<=v, v<=255}
      fclose(fd);
   }
//  P(i,load_iquant,v) {i==64, 0<=load_iquant, load_iquant<=1}
   if (niqname[0]=='-') {
//  P(i,load_iquant,v) {i==64, 0<=load_iquant, load_iquant<=1}
      /* use default non-intra matrix */
      load_niquant = 0;
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==0,
//    0<=load_iquant, load_iquant<=1}
      for(i = 0; i <= 63; i += 1)
//  P(i,load_iquant,load_niquant,v) {load_niquant==0, 0<=i, i<=63,
//    0<=load_iquant, load_iquant<=1}
         inter_q[i] = 16;
   }
   else {
//  P(i,load_iquant,v) {i==64, 0<=load_iquant, load_iquant<=1}
      /* read customized non-intra matrix */
      load_niquant = 1;
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==1,
//    0<=load_iquant, load_iquant<=1}
      if (!(fd = fopen(niqname, "r"))) {
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==1,
//    0<=load_iquant, load_iquant<=1}
         sprintf(errortext, "Couldn't open quant matrix file %s", niqname);
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==1,
//    0<=load_iquant, load_iquant<=1}
         error(errortext);
      }
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==1,
//    0<=load_iquant, load_iquant<=1}
      for(i = 0; i <= 63; i += 1) {
//  P(i,load_iquant,load_niquant,v) {load_niquant==1, 0<=i, i<=63,
//    0<=load_iquant, load_iquant<=1}
         fscanf(fd, "%d", &v);
//  P(i,load_iquant,load_niquant,v) {load_niquant==1, 0<=i, i<=63,
//    0<=load_iquant, load_iquant<=1}
         if (v<1||v>255)
//  P(i,load_iquant,load_niquant,v) {load_niquant==1, 0<=i, i<=63,
//    0<=load_iquant, load_iquant<=1}
            error("invalid value in quant matrix");
//  P(i,load_iquant,load_niquant,v) {load_niquant==1, 0<=i, i<=63,
//    0<=load_iquant, load_iquant<=1, 1<=v, v<=255}
         inter_q[i] = v;
      }
//  P(i,load_iquant,load_niquant,v) {i==64, load_niquant==1,
//    0<=load_iquant, load_iquant<=1, 1<=v, v<=255}
      fclose(fd);
   }
}
//  P() {}
char pbm_getc(FILE *file)
{
//  P() {}
   char ch;
//  P(ch) {}
   ch = _IO_getc(file);
//  P(ch) {}
   if (ch=='#')
//  P(ch) {ch==35}
      do {
//  P(ch) {}
         ch = _IO_getc(file);
      }
      while (ch!='\n'&&ch!='\r');
//  P(ch) {}
   return ch;
}
//  P() {}
int pbm_getint(FILE *file)
{
//  P() {}
   char ch;
//  P(ch) {}
   int i;
//  P(ch,i) {}
   do {
//  P(ch,i) {}
      ch = pbm_getc(file);
   }
   while (ch==' '||ch=='\t'||ch=='\n'||ch=='\r');
//  P(ch,i) {}
   i = 0;
//  P(ch,i) {i==0}
   do {
//  P(ch,i) {}
      i = i*10+ch-'0';
//  P(ch,i) {}
      ch = pbm_getc(file);
   }
   while (ch>='0'&&ch<='9');
//  P(ch,i) {}
   return i;
}
//  P() {0<=secondfield, secondfield<=1}
void predict(unsigned char *reff[], unsigned char *refb[], unsigned char *cur[3], int secondfield, struct mbinfo *mbi)
{
//  P() {0<=secondfield, secondfield<=1}
   int i, j, k;
//  P(i,j,k) {0<=secondfield, secondfield<=1}
   k = 0;
//  P(i,j,k) {k==0, 0<=secondfield, secondfield<=1}
   /* loop through all macroblocks of the picture */
   for(j = 0; j <= height2-1; j += 16)
//  P(i,j,k) {j+1<=height2, 0<=j, 0<=k, 0<=secondfield,
//    secondfield<=1}
      for(i = 0; i <= width-1; i += 16) {
//  P(i,j,k) {j+1<=height2, 0<=i, i<=16k, i+1<=width, 0<=j,
//    0<=secondfield, secondfield<=1}
         predict_mb(reff, refb, cur, width, i, j, pict_type, pict_struct, mbi[k].mb_type, mbi[k].motion_type, secondfield, mbi[k].MV, mbi[k].mv_field_sel, mbi[k].dmvector);
//  P(i,j,k) {j+1<=height2, 0<=i, i<=16k, i+1<=width, 0<=j,
//    0<=secondfield, secondfield<=1}
         k++;
      }
}
//  P() {}
static void calc_DMV(int DMV[][2], int *dmvector, int mvx, int mvy)
{
//  P() {}
   if (pict_struct==3)
//  P() {pict_struct==3}
      if (topfirst) {
//  P() {pict_struct==3}
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  P() {pict_struct==3}
         DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1]-1;
//  P() {pict_struct==3}
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
//  P() {pict_struct==3}
         DMV[1][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
      else {
//  P() {pict_struct==3, topfirst==0}
         /* vector for prediction of top field from bottom field */
         DMV[0][0] = (3*mvx+(mvx>0)>>1)+dmvector[0];
//  P() {pict_struct==3, topfirst==0}
         DMV[0][1] = (3*mvy+(mvy>0)>>1)+dmvector[1]-1;
//  P() {pict_struct==3, topfirst==0}
         /* vector for prediction of bottom field from top field */
         DMV[1][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  P() {pict_struct==3, topfirst==0}
         DMV[1][1] = (mvy+(mvy>0)>>1)+dmvector[1]+1;
      }
   else {
//  P() {}
      /* vector for prediction from field of opposite 'parity' */
      DMV[0][0] = (mvx+(mvx>0)>>1)+dmvector[0];
//  P() {}
      DMV[0][1] = (mvy+(mvy>0)>>1)+dmvector[1];
//  P() {}
      /* correct for vertical field shift */
      if (pict_struct==1)
//  P() {pict_struct==1}
         DMV[0][1]--;
      else
//  P() {}
         DMV[0][1]++;
   }
}
//  P() {0<=i0, i0+1<=width, 0<=j0}
static void clearblock(unsigned char *cur[], int i0, int j0)
{
//  P() {0<=i0, i0+1<=width, 0<=j0}
   int i, j, w, h;
//  P(h,i,j,w) {0<=i0, i0+1<=width, 0<=j0}
   unsigned char *p;
//  P(h,i,j,w) {0<=i0, i0+1<=width, 0<=j0}
   p = cur[0]+(pict_struct==2?width:0)+i0+width2*j0;
//  P(h,i,j,w) {0<=i0, i0+1<=width, 0<=j0}
   for(j = 0; j <= 15; j += 1) {
//  P(h,i,j,w) {0<=i0, i0+1<=width, 0<=j, j<=15, 0<=j0}
      for(i = 0; i <= 15; i += 1)
//  P(h,i,j,w) {0<=i, i<=15, 0<=i0, i0+1<=width, 0<=j, j<=15, 0<=j0}
         p[i] = 128;
//  P(h,i,j,w) {i==16, 0<=i0, i0+1<=width, 0<=j, j<=15, 0<=j0}
      p += width2;
   }
//  P(h,i,j,w) {i==16, j==16, 0<=i0, i0+1<=width, 0<=j0}
   w = h = 16;
//  P(h,i,j,w) {h==16, i==16, j==16, w==16, 0<=i0, i0+1<=width, 0<=j0}
   if (chroma_format!=3) {
//  P(h,i,j,w) {h==16, i==16, j==16, w==16, 0<=i0, i0+1<=width, 0<=j0}
      i0 >>= 1;
//  P(h,i,i0,j,w) {h==16, i==16, j==16, w==16, 0<=i0, 2i0+1<=width,
//    0<=j0, 1<=width}
      w >>= 1;
   }
//  P(h,i,i0,j,w) {h==16, i==16, j==16, 0<=i0, i0+1<=width, 0<=j0,
//    8<=w, w<=16, 1<=width}
   if (chroma_format==1) {
//  P(h,i,i0,j,w) {chroma_format==1, h==16, i==16, j==16, 0<=i0,
//    i0+1<=width, 0<=j0, 8<=w, w<=16, 1<=width}
      j0 >>= 1;
//  P(h,i,i0,j,j0,w) {chroma_format==1, h==16, i==16, j==16, 0<=i0,
//    i0+1<=width, 0<=j0, 8<=w, w<=16, 1<=width}
      h >>= 1;
   }
//  P(h,i,i0,j,j0,w) {i==16, j==16, 8<=h, h<=16, 0<=i0, i0+1<=width,
//    0<=j0, 8<=w, w<=16, 1<=width}
   p = cur[1]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
//  P(h,i,i0,j,j0,w) {i==16, j==16, 8<=h, h<=16, 0<=i0, i0+1<=width,
//    0<=j0, 8<=w, w<=16, 1<=width}
   for(j = 0; j <= h-1; j += 1) {
//  P(h,i,i0,j,j0,w) {8<=h, h<=16, j+1<=h, 0<=i0, i0+1<=width, 0<=j,
//    0<=j0, 8<=w, w<=16, 1<=width}
      for(i = 0; i <= w-1; i += 1)
//  P(h,i,i0,j,j0,w) {8<=h, h<=16, j+1<=h, 0<=i, i+1<=w, 0<=i0,
//    i0+1<=width, 0<=j, 0<=j0, 8<=w, w<=16, 1<=width}
         p[i] = 128;
//  P(h,i,i0,j,j0,w) {i==w, 8<=h, h<=16, j+1<=h, 8<=i, i<=16, 0<=i0,
//    i0+1<=width, 0<=j, 0<=j0, 1<=width}
      p += chrom_width2;
   }
//  P(h,i,i0,j,j0,w) {h==j, i==w, 8<=h, h<=16, 8<=i, i<=16, 0<=i0,
//    i0+1<=width, 0<=j0, 1<=width}
   p = cur[2]+(pict_struct==2?chrom_width:0)+i0+chrom_width2*j0;
//  P(h,i,i0,j,j0,w) {h==j, i==w, 8<=h, h<=16, 8<=i, i<=16, 0<=i0,
//    i0+1<=width, 0<=j0, 1<=width}
   for(j = 0; j <= h-1; j += 1) {
//  P(h,i,i0,j,j0,w) {8<=h, h<=16, j+1<=h, 0<=i0, i0+1<=width, 0<=j,
//    0<=j0, 8<=w, w<=16, 1<=width}
      for(i = 0; i <= w-1; i += 1)
//  P(h,i,i0,j,j0,w) {8<=h, h<=16, j+1<=h, 0<=i, i+1<=w, 0<=i0,
//    i0+1<=width, 0<=j, 0<=j0, 8<=w, w<=16, 1<=width}
         p[i] = 128;
//  P(h,i,i0,j,j0,w) {i==w, 8<=h, h<=16, j+1<=h, 8<=i, i<=16, 0<=i0,
//    i0+1<=width, 0<=j, 0<=j0, 1<=width}
      p += chrom_width2;
   }
}
//  P() {w==16, 0<=addflag, addflag<=1, 8<=h, h<=16, 8x+24<=h+8lx,
//    0<=x, 0<=y}
static void pred(unsigned char *src[], int sfield, unsigned char *dst[], int dfield, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
//  P() {w==16, 0<=addflag, addflag<=1, 8<=h, h<=16, 8x+24<=h+8lx,
//    0<=x, 0<=y}
   int cc;
//  P(cc) {w==16, 0<=addflag, addflag<=1, 8<=h, h<=16, 8x+24<=h+8lx,
//    0<=x, 0<=y}
   for(cc = 0; cc <= 2; cc += 1) {
//  P(cc,dx,dy,h,lx,w,x,y) {0<=addflag, addflag<=1, 0<=cc, cc<=2}
      if (cc==1) {
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
         /* scale for color components */
         if (chroma_format==1) {
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, chroma_format==1, 0<=addflag,
//    addflag<=1}
            /* vertical */
            h >>= 1;
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, chroma_format==1, 0<=addflag,
//    addflag<=1}
            y >>= 1;
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, chroma_format==1, 0<=addflag,
//    addflag<=1}
            dy /= 2;
         }
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
         if (chroma_format!=3) {
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
            /* horizontal */
            w >>= 1;
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
            x >>= 1;
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
            dx /= 2;
//  P(cc,dx,dy,h,lx,w,x,y) {cc==1, 0<=addflag, addflag<=1}
            lx >>= 1;
         }
      }
//  P(cc,dx,dy,h,lx,w,x,y) {0<=addflag, addflag<=1, 0<=cc, cc<=2}
      pred_comp(src[cc]+(sfield?lx>>1:0), dst[cc]+(dfield?lx>>1:0), lx, w, h, x, y, dx, dy, addflag);
   }
}
//  P() {0<=addflag, addflag<=1}
static void pred_comp(unsigned char *src, unsigned char *dst, int lx, int w, int h, int x, int y, int dx, int dy, int addflag)
{
//  P() {0<=addflag, addflag<=1}
   int xint, xh, yint, yh;
//  P(xh,xint,yh,yint) {0<=addflag, addflag<=1}
   int i, j;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1}
   unsigned char *s, *d;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1}
   /* half pel scaling */
   xint = dx>>1;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1}
   /* integer part */
   xh = dx&1;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1}
   /* half pel flag */
   yint = dy>>1;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1}
   yh = dy&1;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1}
   /* origins */
   s = src+lx*(y+yint)+(x+xint);
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1}
   /* motion vector */
   d = dst+lx*y+x;
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1}
   if (!xh&&!yh)
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1, xh<=0, yh<=0}
      if (addflag)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, xh<=0, yh<=0}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, xh<=0, yh<=0}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, xh<=0,
//    yh<=0}
               d[i] = (unsigned int) (d[i]+s[i]+1)>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, yh<=0}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, yh<=0}
            d += lx;
         }
      else
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, xh<=0, yh<=0}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, xh<=0, yh<=0}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, xh<=0,
//    yh<=0}
               d[i] = s[i];
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, yh<=0}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, yh<=0}
            d += lx;
         }
   else if (!xh&&yh)
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1, xh<=0, 1<=yh}
      if (addflag)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, xh<=0, 1<=yh}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, xh<=0, 1<=yh}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, xh<=0,
//    1<=yh}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+lx]+1)>>1)+1>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, 1<=yh}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, 1<=yh}
            d += lx;
         }
      else
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, xh<=0, 1<=yh}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, xh<=0, 1<=yh}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, xh<=0,
//    1<=yh}
               d[i] = (unsigned int) (s[i]+s[i+lx]+1)>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, 1<=yh}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, xh<=0, 1<=yh}
            d += lx;
         }
   else if (xh&&!yh)
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1, 1<=xh, yh<=0}
      if (addflag)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, 1<=xh, yh<=0}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, 1<=xh, yh<=0}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, 1<=xh,
//    yh<=0}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+1)>>1)+1>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, 1<=xh, yh<=0}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, 1<=xh, yh<=0}
            d += lx;
         }
      else
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, 1<=xh, yh<=0}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j, 1<=xh, yh<=0}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j, 1<=xh,
//    yh<=0}
               d[i] = (unsigned int) (s[i]+s[i+1]+1)>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, 1<=xh, yh<=0}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j, 1<=xh, yh<=0}
            d += lx;
         }
   else
//  P(i,j,xh,xint,yh,yint) {0<=addflag, addflag<=1, 2xint<=dx,
//    dx<=2xint+1, 2yint<=dy, dy<=2yint+1}
      /* if (xh && yh) */
      if (addflag)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j}
               d[i] = d[i]+((unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2)+1>>1;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==1, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j}
            d += lx;
         }
      else
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1}
         for(j = 0; j <= h-1; j += 1) {
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=j}
            for(i = 0; i <= w-1; i += 1)
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, i+1<=w, 0<=j}
               d[i] = (unsigned int) (s[i]+s[i+1]+s[i+lx]+s[i+lx+1]+2)>>2;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j}
            s += lx;
//  P(i,j,xh,xint,yh,yint) {addflag==0, 2xint<=dx, dx<=2xint+1,
//    2yint<=dy, dy<=2yint+1, j+1<=h, 0<=i, w<=i, 0<=j}
            d += lx;
         }
}
//  P() {lx==width, pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
static void predict_mb(unsigned char *oldref[], unsigned char *newref[], unsigned char *cur[], int lx, int bx, int by, int pict_type, int pict_struct, int mb_type, int motion_type, int secondfield, int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2])
{
//  P() {lx==width, pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
   int addflag, currentfield;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   unsigned char **predframe;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   int DMV[2][2];
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   if (mb_type&1) {
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
      clearblock(cur, bx, by);
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
      return;
   }
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=bx, bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
   addflag = 0;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
   if (mb_type&8||pict_type==2) {
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
      /* forward prediction, including zero MV in P pictures */
      if (pict_struct==3)
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         if (motion_type==2||!(mb_type&8))
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* frame-based prediction in frame picture */
            pred(oldref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==1) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==1,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][0][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(oldref, mv_field_sel[0][0], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==1,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* bottom field prediction */
            pred(oldref, mv_field_sel[1][0], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][0][0], PMV[1][0][1]>>1, 0);
         }
         else if (motion_type==3) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* dual prime prediction */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]>>1);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict top field from top field */
            pred(oldref, 0, cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict bottom field from bottom field */
            pred(oldref, 1, cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[0][0][0], PMV[0][0][1]>>1, 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict and add to top field from bottom field */
            pred(oldref, 1, cur, 0, lx<<1, 16, 8, bx, by>>1, DMV[0][0], DMV[0][1], 1);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==3, pict_struct==3, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict and add to bottom field from top field */
            pred(oldref, 0, cur, 1, lx<<1, 16, 8, bx, by>>1, DMV[1][0], DMV[1][1], 1);
         }
         else
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* invalid motion_type in frame picture */
            /* first prediction is stored, second is added and averaged */
            /* frame picture */
            if (!quiet)
//  P(addflag,currentfield) {addflag==0, lx==width, pict_struct==3,
//    pict_struct==3, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      else {
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* field picture */
         currentfield = pict_struct==2;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* determine which frame to use for prediction */
         if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[0][0])
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, pict_type==2, secondfield==1, 0<=bx,
//    bx+1<=lx, 0<=by}
            predframe = newref;
         else
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         if (motion_type==1||!(mb_type&8))
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in field picture */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
         else if (motion_type==2) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(predframe, mv_field_sel[0][0], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* determine which frame to use for lower half prediction */
            if (pict_type==2&&secondfield&&currentfield!=mv_field_sel[1][0])
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, pict_type==2, secondfield==1, 0<=bx,
//    bx+1<=lx, 0<=by}
               predframe = newref;
            else
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
               predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* lower half */
            pred(predframe, mv_field_sel[1][0], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][0][0], PMV[1][0][1], 0);
         }
         else if (motion_type==3) {
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* dual prime prediction */
            /* determine which frame to use for prediction */
            if (secondfield)
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, secondfield==1, 0<=bx, bx+1<=lx,
//    0<=by}
               predframe = newref;
            else
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, secondfield==0, 0<=bx, bx+1<=lx,
//    0<=by}
               predframe = oldref;
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* previous frame */
            /* calculate derived motion vectors */
            calc_DMV(DMV, dmvector, PMV[0][0][0], PMV[0][0][1]);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict from field of same parity */
            pred(oldref, currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][0][0], PMV[0][0][1], 0);
//  P(addflag,currentfield) {addflag==0, lx==width, motion_type==3,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* predict from field of opposite parity */
            pred(predframe, !currentfield, cur, currentfield, lx<<1, 16, 16, bx, by, DMV[0][0], DMV[0][1], 1);
         }
         else
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* invalid motion_type in field picture */
            if (!quiet)
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      }
//  P(addflag,currentfield) {addflag==0, lx==width,
//    pict_struct==pict_struct, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
      addflag = 1;
   }
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
   if (mb_type&4)
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
      /* backward prediction */
      if (pict_struct==3)
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
         /* frame picture */
         if (motion_type==2)
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==3, pict_struct==3, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* frame-based prediction in frame picture */
            pred(newref, 0, cur, 0, lx, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else {
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* field-based prediction in frame picture
                     *
                     * note scaling of the vertical coordinates (by, PMV[][1][1])
                     * from frame to field!
                     */
            /* top field prediction */
            pred(newref, mv_field_sel[0][1], cur, 0, lx<<1, 16, 8, bx, by>>1, PMV[0][1][0], PMV[0][1][1]>>1, addflag);
//  P(addflag,currentfield) {lx==width, pict_struct==3,
//    pict_struct==3, 0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by,
//    0<=secondfield, secondfield<=1}
            /* bottom field prediction */
            pred(newref, mv_field_sel[1][1], cur, 1, lx<<1, 16, 8, bx, by>>1, PMV[1][1][0], PMV[1][1][1]>>1, addflag);
         }
      else {
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         /* field picture */
         currentfield = pict_struct==2;
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
         if (motion_type==1)
//  P(addflag,currentfield) {lx==width, motion_type==1,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* field-based prediction in field picture */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 16, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
         else if (motion_type==2) {
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* 16 x 8 motion compensation in field picture */
            /* upper half */
            pred(newref, mv_field_sel[0][1], cur, currentfield, lx<<1, 16, 8, bx, by, PMV[0][1][0], PMV[0][1][1], addflag);
//  P(addflag,currentfield) {lx==width, motion_type==2,
//    pict_struct==pict_struct, 0<=addflag, addflag<=1, 0<=bx,
//    bx+1<=lx, 0<=by, 0<=secondfield, secondfield<=1}
            /* lower half */
            pred(newref, mv_field_sel[1][1], cur, currentfield, lx<<1, 16, 8, bx, by+8, PMV[1][1][0], PMV[1][1][1], addflag);
         }
         else
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, 0<=secondfield,
//    secondfield<=1}
            /* invalid motion_type in field picture */
            if (!quiet)
//  P(addflag,currentfield) {lx==width, pict_struct==pict_struct,
//    0<=addflag, addflag<=1, 0<=bx, bx+1<=lx, 0<=by, quiet<=0,
//    0<=secondfield, secondfield<=1}
               fprintf(stderr, "invalid motion_type\n");
      }
}
//  P() {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
void profile_and_level_checks()
{
//  P() {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   int i;
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   struct level_limits *maxval;
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile<0||profile>15)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("profile must be between 0 and 15");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=profile,
//    profile<=15, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 1<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
   if (level<0||level>15)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=profile,
//    profile<=15, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 1<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
      error("level must be between 0 and 15");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    0<=profile, profile<=15, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile>=8) {
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    8<=profile, profile<=15, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      if (!quiet)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    8<=profile, profile<=15, 0<=prog_seq, prog_seq<=1, quiet<=0,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
         fprintf(stderr, "Warning: profile uses a reserved value, conformance checks skipped\n");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    8<=profile, profile<=15, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      return;
   }
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    0<=profile, profile<=15, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile<1||profile>5)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    0<=profile, profile<=15, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("undefined Profile");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile==3||profile==2)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    2<=profile, profile<=3, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("This encoder currently generates no scalable bitstreams");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (level<4||level>10||level&1)
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=level, level<=15,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("undefined Level");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   maxval = &maxval_tab[level-4>>1];
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   /* check profile@level combination */
   if (!profile_level_defined[profile-1][level-4>>1])
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("undefined profile@level combination");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   /* profile (syntax) constraints */
   if (profile==5&&M!=1)
//  P(i) {profile==5, 2<=M, 1<=chroma_format, chroma_format<=3,
//    0<=dc_prec, dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Simple Profile does not allow B pictures");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile!=1&&chroma_format!=1)
//  P(i) {1<=M, 2<=chroma_format, chroma_format<=3, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    2<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("chroma format must be 4:2:0 in specified Profile");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    profile<=5, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 1<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
   if (profile==1&&chroma_format==3)
//  P(i) {chroma_format==3, profile==1, 1<=M, 0<=dc_prec, dc_prec<=3,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 0<=prog_seq,
//    prog_seq<=1, 0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("chroma format must be 4:2:0 or 4:2:2 in High Profile");
//  P(i) {1<=M, 1<=chroma_format, chroma_format<=3,
//    2chroma_format<=profile+3, 2chroma_format+profile<=7,
//    0<=dc_prec, dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    1<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    0<=repeatfirst, repeatfirst<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (profile>=4) {
//  P(i) {chroma_format==1, 1<=M, 0<=dc_prec, dc_prec<=3,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 4<=profile,
//    profile<=5, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 1<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
      if (frame_rate_code<=2&&repeatfirst)
//  P(i) {chroma_format==1, repeatfirst==1, 1<=M, 0<=dc_prec,
//    dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=2,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    4<=profile, profile<=5, 0<=prog_seq, prog_seq<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
         error("repeat_first_first must be zero");
//  P(i) {chroma_format==1, 1<=M, 0<=dc_prec, dc_prec<=3,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 4<=profile,
//    profile<=5, 0<=prog_seq, prog_seq<=1, 0<=repeatfirst,
//    repeatfirst<=1, 1<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
      if (frame_rate_code<=6&&prog_seq&&repeatfirst)
//  P(i) {chroma_format==1, prog_seq==1, repeatfirst==1, 1<=M,
//    0<=dc_prec, dc_prec<=3, 1<=frame_rate_code, frame_rate_code<=6,
//    1<=horizontal_size, horizontal_size<=16383, 4<=level, level<=10,
//    4<=profile, profile<=5, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
         error("repeat_first_first must be zero");
   }
//  P(i) {1<=M, 1<=chroma_format, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   if (profile!=1&&dc_prec==3)
//  P(i) {dc_prec==3, 1<=M, 1<=chroma_format,
//    2chroma_format<=profile+3, 2chroma_format+profile<=7,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 2<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("11 bit DC precision only allowed in High Profile");
//  P(i) {1<=M, 1<=chroma_format, 2chroma_format+2dc_prec+profile<=11,
//    2chroma_format<=profile+3, 2chroma_format+profile<=7,
//    0<=dc_prec, dc_prec<=3, 4dc_prec+profile<=13,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   /* level (parameter value) constraints */
   /* Table 8-8 */
   if (frame_rate_code>5&&level>=8)
//  P(i) {1<=M, 1<=chroma_format, 2chroma_format+2dc_prec+profile<=11,
//    2chroma_format<=profile+3, 2chroma_format+profile<=7,
//    0<=dc_prec, dc_prec<=3, 4dc_prec+profile<=13,
//    6<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 8<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Picture rate greater than permitted in specified Level");
//  P(i) {1<=M, 1<=chroma_format, 2chroma_format+2dc_prec+profile<=11,
//    2chroma_format<=profile+3, 2chroma_format+profile<=7,
//    0<=dc_prec, dc_prec<=3, 4dc_prec+profile<=13,
//    1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   for(i = 0; i <= M-1; i += 1) {
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      if (motion_data[i].forw_hor_f_code>maxval->hor_f_code)
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
         error("forward horizontal f_code greater than permitted in specified Level");
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      if (motion_data[i].forw_vert_f_code>maxval->vert_f_code)
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
         error("forward vertical f_code greater than permitted in specified Level");
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      if (i!=0) {
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
         if (motion_data[i].back_hor_f_code>maxval->hor_f_code)
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
            error("backward horizontal f_code greater than permitted in specified Level");
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
         if (motion_data[i].back_vert_f_code>maxval->vert_f_code)
//  P(i) {1<=M, i+1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=i, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
            error("backward vertical f_code greater than permitted in specified Level");
      }
   }
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   /* Table 8-10 */
   if (horizontal_size>maxval->hor_size)
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Horizontal size is greater than permitted in specified Level");
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   if (vertical_size>maxval->vert_size)
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Horizontal size is greater than permitted in specified Level");
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   /* Table 8-11 */
   if (horizontal_size*vertical_size*frame_rate>maxval->sample_rate)
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Sample rate is greater than permitted in specified Level");
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   /* Table 8-12 */
   if (bit_rate>1.0e6*maxval->bit_rate)
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("Bit rate is greater than permitted in specified Level");
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   /* Table 8-13 */
   if (vbv_buffer_size>maxval->vbv_buffer_size)
//  P(i) {M==i, 1<=M, 1<=chroma_format,
//    2chroma_format+2dc_prec+profile<=11, 2chroma_format<=profile+3,
//    2chroma_format+profile<=7, 0<=dc_prec, dc_prec<=3,
//    4dc_prec+profile<=13, 1<=frame_rate_code, frame_rate_code<=8,
//    frame_rate_code+level<=15, 1<=horizontal_size,
//    horizontal_size<=16383, 4<=level, level<=10, 1<=profile,
//    0<=prog_seq, prog_seq<=1, 0<=repeatfirst, repeatfirst<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("vbv_buffer_size exceeds High Level limit");
}
//  P() {0<=run+3969, run<=63}
void putAC(int run, int signed_level, int vlcformat)
{
//  P() {0<=run+3969, run<=63}
   int level, len;
//  P(0`level,len) {0<=run+3969, run<=63}
   VLCtable *ptab;
//  P(0`level,len) {0<=run+3969, run<=63}
   level = signed_level<0?-signed_level:signed_level;
//  P(0`level,len) {0<=0`level+signed_level, signed_level<=0`level,
//    0<=run+3969, run<=63}
   /* abs(signed_level) */
   /* make sure run and level are valid */
   if (run<0||run>63||level==0||level>(int) sqrt(2048*2048)-1||mpeg1&&level>255) {
//  P(0`level,len) {0<=0`level+signed_level, signed_level<=0`level,
//    0<=run+3969, run<=63}
      sprintf(errortext, "AC value out of range (run=%d, signed_level=%d)\n", run, signed_level);
//  P(0`level,len) {0<=0`level+signed_level, signed_level<=0`level,
//    0<=run+3969, run<=63}
      error(errortext);
   }
//  P(0`level,len) {1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, 0<=run, run<=63}
   len = 0;
//  P(0`level,len) {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, 0<=run, run<=63}
   if (run<2&&level<41) {
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=40,
//    0<=0`level+signed_level, signed_level<=0`level, 0<=run, run<=1}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=40,
//    0<=0`level+signed_level, signed_level<=0`level, 0<=run, run<=1}
         ptab = &dct_code_tab1a[run][level-1];
      else
//  P(0`level,len) {len==0, vlcformat==0, 1<=0`level, 0`level<=40,
//    0<=0`level+signed_level, signed_level<=0`level, 0<=run, run<=1}
         ptab = &dct_code_tab1[run][level-1];
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=40,
//    0<=0`level+signed_level, signed_level<=0`level, 0<=run, run<=1}
      len = ptab->len;
   }
   else if (run<32&&level<6) {
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=5,
//    0<=0`level+signed_level, signed_level<=0`level, 2<=run, run<=31}
      /* vlcformat selects either of Table B-14 / B-15 */
      if (vlcformat)
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=5,
//    0<=0`level+signed_level, signed_level<=0`level, 2<=run, run<=31}
         ptab = &dct_code_tab2a[run-2][level-1];
      else
//  P(0`level,len) {len==0, vlcformat==0, 1<=0`level, 0`level<=5,
//    0<=0`level+signed_level, signed_level<=0`level, 2<=run, run<=31}
         ptab = &dct_code_tab2[run-2][level-1];
//  P(0`level,len) {len==0, 1<=0`level, 0`level<=5,
//    0<=0`level+signed_level, signed_level<=0`level, 2<=run, run<=31}
      len = ptab->len;
   }
//  P(0`level,len) {1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, 0<=run, run<=63}
   if (len!=0) {
//  P(0`level,len) {1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, 0<=run, run<=63}
      putbits(ptab->code, len);
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {1<=0`level, 0<=0`level+signed_level, signed_level<=0`level,
//    len+8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
      putbits(signed_level<0, 1);
   }
   else {
//  P(0`level,len) {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, 0<=run, run<=63}
      /* no VLC for this (run, level) combination: use escape coding (7.2.2.3) */
      putbits(1l, 6);
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+6<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
      /* Escape */
      putbits(run, 6);
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+12<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
      /* 6 bit code for run */
      if (mpeg1) {
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+12<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         /* ISO/IEC 11172-2 uses a 8 or 16 bit code */
         if (signed_level>127)
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, signed_level<=0`level,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+12<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63, 128<=signed_level}
            putbits(0, 8);
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         if (signed_level<-127)
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63, signed_level+128<=0}
            putbits(128, 8);
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         putbits(signed_level, 8);
      }
      else
//  P(0`level,len,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {len==0, mpeg1==0, 1<=0`level, 0<=0`level+signed_level,
//    signed_level<=0`level, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+12<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+12<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         /* ISO/IEC 13818-2 uses a 12 bit code, Table B-16 */
         putbits(signed_level, 12);
   }
}
//  P() {0<=run+3969, run<=63}
void putACfirst(int run, int val)
{
//  P() {0<=run+3969, run<=63}
   if (run==0&&(val==1||val==-1))
//  P() {run==0, 0<=val+1, val<=1}
      /* these are treated differently */
      putbits(2|val<0, 2);
   else
//  P() {0<=run+3969, run<=63}
      putAC(run, val, 0);
}
//  P() {}
void putDCchrom(int val)
{
//  P() {}
   putDC(DCchromtab, val);
}
//  P() {}
void putDClum(int val)
{
//  P() {}
   putDC(DClumtab, val);
}
//  P() {}
void putaddrinc(int addrinc)
{
//  P() {}
   while (addrinc>33) {
//  P(addrinc,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {34<=addrinc, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(0x08, 11);
//  P(addrinc,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {34<=addrinc, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+11<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+11<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* macroblock_escape */
      addrinc -= 33;
   }
//  P(addrinc,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {addrinc<=33, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(addrinctab[addrinc-1].code, addrinctab[addrinc-1].len);
}
//  P() {}
void putbits(int val, int n)
{
//  P() {}
   int i;
//  P(i) {}
   unsigned int mask;
//  P(i,mask) {}
   mask = 1<<n-1;
//  P(i,mask) {0<=mask}
   /* selects first (leftmost) bit */
   for(i = 0; i <= n-1; i += 1) {
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
      outbfr <<= 1;
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
      if (val&mask)
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
         outbfr |= 1;
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
      mask >>= 1;
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init,
//    outcnt+7putbits!:bytecnt#init<=7bytecnt+putbits!:outcnt#init,
//    putbits!:bytecnt#init<=bytecnt, 0<=i, i+1<=n}
      /* select next bit */
      outcnt--;
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {i+outcnt+8putbits!:bytecnt#init==8bytecnt+putbits!:outcnt#init
//    -1, outcnt+7putbits!:bytecnt#init+1<=7bytecnt+
//    putbits!:outcnt#init, putbits!:bytecnt#init<=bytecnt, 0<=i,
//    i+1<=n}
      if (outcnt==0) {
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {8bytecnt+putbits!:outcnt#init==i+8putbits!:bytecnt#init+1,
//    outcnt==0, putbits!:bytecnt#init<=bytecnt,
//    7putbits!:bytecnt#init+1<=7bytecnt+putbits!:outcnt#init, 0<=i,
//    i+1<=n}
         _IO_putc(outbfr, outfile);
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {8bytecnt+putbits!:outcnt#init==i+8putbits!:bytecnt#init+1,
//    outcnt==0, putbits!:bytecnt#init<=bytecnt,
//    7putbits!:bytecnt#init+1<=7bytecnt+putbits!:outcnt#init, 0<=i,
//    i+1<=n}
         outcnt = 8;
//  P(bytecnt,i,mask,outbfr,outcnt)
//    {8bytecnt+putbits!:outcnt#init==i+8putbits!:bytecnt#init+1,
//    outcnt==8, putbits!:bytecnt#init<=bytecnt,
//    7putbits!:bytecnt#init+1<=7bytecnt+putbits!:outcnt#init, 0<=i,
//    i+1<=n}
         bytecnt++;
      }
   }
}
//  P() {}
void putcbp(int cbp)
{
//  P() {}
   putbits(cbptable[cbp].code, cbptable[cbp].len);
}
//  P() {}
void putdmv(int dmv)
{
//  P() {}
   if (dmv==0)
//  P() {dmv==0}
      putbits(0, 1);
   else if (dmv>0)
//  P() {1<=dmv}
      putbits(2, 2);
   else
//  P() {dmv<=0}
      putbits(3, 2);
}
//  P() {0<=frame}
void putgophdr(int frame, int closed_gop)
{
//  P() {0<=frame}
   int tc;
//  P(tc) {0<=frame}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,tc) {0<=frame,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B8L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,tc) {0<=frame,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* group_start_code */
   tc = frametotc(tc0+frame);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,tc) {0<=frame,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(tc, 25);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,tc) {0<=frame,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+49<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+106<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+98<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+49<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+74<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+57<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+49<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+57<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* time_code */
   putbits(closed_gop, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,tc) {0<=frame,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+50<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+316<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+308<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+292<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+276<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+224<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+216<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+208<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+200<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+166<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+150<=52putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+192<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+176<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+158<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+166<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+158<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+150<=38putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+108<=37putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+100<=37putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+166<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+158<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+150<=31putbits!:bytecnt
//    +putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+108<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+50<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+109<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+101<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+116<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+108<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+100<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+58<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+50<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+76<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+58<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+50<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+58<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* closed_gop */
   putbits(0, 1);
}
//  P() {}
static int frametotc(int frame)
{
//  P() {}
   int fps, pict, sec, minute, hour, tc;
//  P(fps,hour,minute,pict,sec,tc) {}
   fps = (int) (frame_rate+0.5);
//  P(fps,hour,minute,pict,sec,tc) {}
   pict = frame%fps;
//  P(fps,hour,minute,pict,sec,tc) {}
   frame = (frame-pict)/fps;
//  P(fps,frame,hour,minute,pict,sec,tc) {}
   sec = frame%60;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=sec+59, sec<=59}
   frame = (frame-sec)/60;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=sec+59, sec<=59}
   minute = frame%60;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=minute+59, minute<=59,
//    0<=sec+59, sec<=59}
   frame = (frame-minute)/60;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=minute+59, minute<=59,
//    0<=sec+59, sec<=59}
   hour = frame%24;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=hour+23, hour<=23,
//    0<=minute+59, minute<=59, 0<=sec+59, sec<=59}
   tc = hour<<19|minute<<13|1<<12|sec<<6|pict;
//  P(fps,frame,hour,minute,pict,sec,tc) {0<=hour+23, hour<=23,
//    0<=minute+59, minute<=59, 0<=sec+59, sec<=59}
   return tc;
}
//  P() {}
void putintrablk(short *blk, int cc)
{
//  P() {}
   int n, dct_diff, run, signed_level;
//  P(dct_diff,n,run,signed_level) {}
   /* DC coefficient (7.2.1) */
   dct_diff = blk[0]-dc_dct_pred[cc];
//  P(dct_diff,n,run,signed_level) {}
   /* difference to previous block */
   dc_dct_pred[cc] = blk[0];
//  P(dct_diff,n,run,signed_level) {}
   if (cc==0)
//  P(dct_diff,n,run,signed_level) {cc==0}
      putDClum(dct_diff);
   else
//  P(dct_diff,n,run,signed_level) {}
      putDCchrom(dct_diff);
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* AC coefficients (7.2.2) */
   run = 0;
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {run==0, 0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   for(n = 1; n <= 63; n += 1) {
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=dct_diff+2047, dct_diff<=2047, 1<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run+1,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run+1, 63<=63n+run,
//    run+1<=n, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=dct_diff+2047, dct_diff<=2047, 1<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run+1,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run+1, 63<=63n+run,
//    run+1<=n, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      if (signed_level!=0) {
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=dct_diff+2047, dct_diff<=2047, 1<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run+1,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run+1, 63<=63n+run,
//    run+1<=n, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         putAC(run, signed_level, intravlc);
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=dct_diff+2047, dct_diff<=2047, 1<=n, n<=63,
//    n+1472putbits!:bytecnt#init+192putbits!:outcnt+127<=1472
//    putbits!:bytecnt+192putbits!:outcnt#init+run,
//    n+1408putbits!:bytecnt#init+192putbits!:outcnt+63<=1408
//    putbits!:bytecnt+192putbits!:outcnt#init+run,
//    n+1024putbits!:bytecnt#init+128putbits!:outcnt+127<=1024
//    putbits!:bytecnt+128putbits!:outcnt#init+run,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt+63<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run,
//    n+736putbits!:bytecnt#init+96putbits!:outcnt+63<=736
//    putbits!:bytecnt+96putbits!:outcnt#init+run,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+63<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run+1<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+1<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         run = 0;
      }
      else
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {signed_level==0, 0<=dct_diff+2047,
//    dct_diff<=2047, 1<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run+1,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run+1, 63<=63n+run,
//    run+1<=n, putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         run++;
   }
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {n==64, 0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+63<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init+run+3843, 0<=run+3905, run<=63}
   /* End of Block -- normative block punctuation */
   if (intravlc)
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {n==64, 0<=dct_diff+2047, dct_diff<=2047,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+63<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init+run+3843, 0<=run+3905, run<=63}
      putbits(6, 4);
   else
//  P(dct_diff,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {intravlc==0, n==64, 0<=dct_diff+2047,
//    dct_diff<=2047, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+63<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init+run+3843, 0<=run+3905, run<=63}
      putbits(2, 2);
}
//  P() {}
void putmbtype(int pict_type, int mb_type)
{
//  P() {}
   putbits(mbtypetab[pict_type-1][mb_type].code, mbtypetab[pict_type-1][mb_type].len);
}
//  P() {}
void putmotioncode(int motion_code)
{
//  P() {}
   int abscode;
//  P(abscode) {}
   abscode = motion_code>=0?motion_code:-motion_code;
//  P(abscode) {0<=abscode+motion_code, motion_code<=abscode}
   /* abs(motion_code) */
   putbits(motionvectab[abscode].code, motionvectab[abscode].len);
//  P(abscode,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {0<=abscode+motion_code, motion_code<=abscode,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   if (motion_code!=0)
//  P(abscode,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {1<=abscode, 0<=abscode+motion_code, motion_code<=abscode,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(motion_code<0, 1);
}
//  P() {}
void putmv(int dmv, int f_code)
{
//  P() {}
   int r_size, f, vmin, vmax, dv, temp, motion_code, motion_residual;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin) {}
   r_size = f_code-1;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {f_code==r_size+1}
   /* number of fixed length code ('residual') bits */
   f = 1<<r_size;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {f_code==r_size+1, 0<=f}
   vmin = -16*f;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {16f+vmin==0, f_code==r_size+1, 0<=f}
   /* lower range limit */
   vmax = 16*f-1;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f}
   /* upper range limit */
   dv = 32*f;
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f}
   /* fold vector difference into [vmin...vmax] */
   if (dmv>vmax)
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 16f<=dmv,
//    0<=f}
      dmv -= dv;
   else if (dmv<vmin)
//  P(dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1,
//    dmv+1<=16f, dmv+16f+1<=0, 0<=f}
      dmv += dv;
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f}
   /* check value */
   if (dmv<vmin||dmv>vmax)
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f}
      if (!quiet)
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f,
//    quiet<=0}
         fprintf(stderr, "invalid motion vector\n");
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, 0<=f}
   /* split dmv into motion_code and motion_residual */
   temp = (dmv<0?-dmv:dmv)+f-1;
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1,
//    f<=dmv+temp+1, dmv+f<=temp+1, 0<=f}
   motion_code = temp>>r_size;
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1,
//    f<=dmv+temp+1, dmv+f<=temp+1, 0<=f}
   if (dmv<0)
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1, dmv+1<=0,
//    f<=dmv+temp+1, dmv+f<=temp+1, 0<=f}
      motion_code = -motion_code;
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1,
//    f<=dmv+temp+1, dmv+f<=temp+1, 0<=f}
   motion_residual = temp&f-1;
//  P(dmv,dv,f,motion_code,motion_residual,r_size,temp,vmax,vmin)
//    {dv==32f, 16f==vmax+1, 16f+vmin==0, f_code==r_size+1,
//    f<=dmv+temp+1, dmv+f<=temp+1, 0<=f}
   putmotioncode(motion_code);
//  P(dmv,dv,f,motion_code,motion_residual,putbits!:bytecnt,
//    putbits!:outbfr,putbits!:outcnt,r_size,temp,vmax,vmin) {dv==32f,
//    16f==vmax+1, 16f+vmin==0, f_code==r_size+1, f<=dmv+temp+1,
//    dmv+f<=temp+1, 0<=f, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* variable length code */
   if (r_size!=0&&motion_code!=0)
//  P(dmv,dv,f,motion_code,motion_residual,putbits!:bytecnt,
//    putbits!:outbfr,putbits!:outcnt,r_size,temp,vmax,vmin) {dv==32f,
//    16f==vmax+1, 16f+vmin==0, f_code==r_size+1, f<=dmv+temp+1,
//    dmv+f<=temp+1, 0<=f, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(motion_residual, r_size);
}
//  P() {}
void putnonintrablk(short *blk)
{
//  P() {}
   int n, run, signed_level, first;
//  P(first,n,run,signed_level) {}
   run = 0;
//  P(first,n,run,signed_level) {run==0}
   first = 1;
//  P(first,n,run,signed_level) {first==1, run==0}
   for(n = 0; n <= 63; n += 1) {
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      /* use appropriate entropy scanning pattern */
      signed_level = blk[(altscan?alternate_scan:zig_zag_scan)[n]];
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
      if (signed_level!=0) {
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         if (first) {
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
            /* first coefficient in non-intra block */
            putACfirst(run, signed_level);
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {0<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt+64<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+64<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
            first = 0;
         }
         else
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {first==0, 0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
            putAC(run, signed_level, 0);
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {first==0, 0<=n, n<=63,
//    n+960putbits!:bytecnt#init+128putbits!:outcnt+64<=960
//    putbits!:bytecnt+128putbits!:outcnt#init+run,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt+64<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=run, run<=63}
         run = 0;
      }
      else
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {signed_level==0, 0<=n, n<=63,
//    n+512putbits!:bytecnt#init+64putbits!:outcnt<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run, 0<=63n+run, run<=n,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
         run++;
   }
//  P(first,n,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,run,
//    signed_level) {n==64, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    512putbits!:bytecnt#init+64putbits!:outcnt+64<=512
//    putbits!:bytecnt+64putbits!:outcnt#init+run,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+
//    putbits!:outcnt#init+run+3905, 0<=run+3968, run<=64}
   /* End of Block -- normative block punctuation  */
   putbits(2, 2);
}
//  P() {0<=s, s<=1}
static void putmvs(int MV[2][2][2], int PMV[2][2][2], int mv_field_sel[2][2], int dmvector[2], int s, int motion_type, int hor_f_code, int vert_f_code)
{
//  P() {0<=s, s<=1}
   if (pict_struct==3)
//  P() {pict_struct==3, 0<=s, s<=1}
      if (motion_type==2) {
//  P() {motion_type==2, pict_struct==3, 0<=s, s<=1}
         /* frame prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==1) {
//  P() {motion_type==1, pict_struct==3, 0<=s, s<=1}
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putbits(mv_field_sel[1][s], 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv((MV[1][s][1]>>1)-(PMV[1][s][1]>>1), vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = MV[0][s][1];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[1][s][0] = MV[1][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, pict_struct==3,
//    putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
//  P() {pict_struct==3, 0<=s, s<=1}
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {pict_struct==3, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putdmv(dmvector[0]);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {pict_struct==3, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv((MV[0][s][1]>>1)-(PMV[0][s][1]>>1), vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {pict_struct==3, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putdmv(dmvector[1]);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {pict_struct==3, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {pict_struct==3, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
   else
//  P() {0<=s, s<=1}
      /* field picture */
      if (motion_type==1) {
//  P() {motion_type==1, 0<=s, s<=1}
         /* field prediction */
         putbits(mv_field_sel[0][s], 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==1, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
      else if (motion_type==2) {
//  P() {motion_type==2, 0<=s, s<=1}
         /* 16x8 prediction */
         putbits(mv_field_sel[0][s], 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putbits(mv_field_sel[1][s], 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[1][s][0]-PMV[1][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[1][s][1]-PMV[1][s][1], vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = MV[0][s][1];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[1][s][0] = MV[1][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {motion_type==2, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[1][s][1] = MV[1][s][1];
      }
      else {
//  P() {0<=s, s<=1}
         /* dual prime prediction */
         putmv(MV[0][s][0]-PMV[0][s][0], hor_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putdmv(dmvector[0]);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putmv(MV[0][s][1]-PMV[0][s][1], vert_f_code);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+1<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         putdmv(dmvector[1]);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][0] = PMV[1][s][0] = MV[0][s][0];
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+2<=15putbits!:bytecnt+2
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+2<=8putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=s, s<=1}
         PMV[0][s][1] = PMV[1][s][1] = MV[0][s][1];
      }
}
//  P() {}
void putpict(unsigned char *frame)
{
//  P() {}
   int i, j, k, comp, cc;
//  P(cc,comp,i,j,k) {}
   int mb_type;
//  P(cc,comp,i,j,k,mb_type) {}
   int PMV[2][2][2];
//  P(cc,comp,i,j,k,mb_type) {}
   int prev_mquant;
//  P(cc,comp,i,j,k,mb_type,prev_mquant) {}
   int cbp, MBAinc;
//  P(MBAinc,cbp,cc,comp,i,j,k,mb_type,prev_mquant) {}
   rc_init_pict(frame);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   /* set up rate control */
   /* picture header and picture coding extension */
   putpicthdr();
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   if (!mpeg1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {mpeg1<=0}
      putpictcodext();
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   prev_mquant = rc_start_mb();
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size) {}
   /* initialize quantization parameter */
   k = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {k==0}
   for(j = 0; j <= mb_height2-1; j += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=j, j+1<=mb_height2, 0<=k}
      /* macroblock row loop */
      for(i = 0; i <= mb_width-1; i += 1) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
         /* macroblock loop */
         if (i==0) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            /* slice header (6.2.4) */
            alignbits();
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            if (mpeg1||vertical_size<=2800)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
               putbits(0x101L+j, 32);
            else {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width, mpeg1<=0,
//    2801<=vertical_size}
               putbits(0x101L+(j&127), 32);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width, mpeg1<=0,
//    2801<=vertical_size}
               /* slice_start_code */
               putbits(j>>7, 3);
            }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            /* quantiser_scale_code */
            putbits(q_scale_type?map_non_linear_mquant[prev_mquant]:prev_mquant>>1, 5);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            putbits(0, 1);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            /* extra_bit_slice */
            /* reset predictors */
            for(cc = 0; cc <= 2; cc += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {i==0, 0<=cc, cc<=2, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
               dc_dct_pred[cc] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, i==0, 0<=j, j+1<=mb_height2, 0<=k, 1<=mb_width}
            MBAinc = i+1;
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
         mb_type = mbinfo[k].mb_type;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
         /* determine mquant (rate control) */
         mbinfo[k].mquant = rc_calc_mquant(k);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
         /* quantize macroblock */
         if (mb_type&1) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {comp+1<=block_count, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
               quant_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], dc_prec, intra_q, mbinfo[k].mquant);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
            mbinfo[k].cbp = cbp = (1<<block_count)-1;
         }
         else {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
            cbp = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cbp==0, 0<=i, i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
            for(comp = 0; comp <= block_count-1; comp += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {comp+1<=block_count, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
               cbp = cbp<<1|quant_non_intra(blocks[k*block_count+comp], blocks[k*block_count+comp], inter_q, mbinfo[k].mquant);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
            mbinfo[k].cbp = cbp;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
            if (cbp)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
               mb_type |= 2;
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
         /* output mquant if it has changed */
         if (cbp&&prev_mquant!=mbinfo[k].mquant)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 1<=cbp, 0<=comp, 0<=i, i<=k, i+1<=mb_width,
//    0<=j, j+1<=mb_height2}
            mb_type |= 16;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
/* check if macroblock can be skipped */
         if (i!=0&&i!=mb_width-1&&!cbp) goto l99999;
l99996:         ;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
         /* macroblock cannot be skipped */
         mbinfo[k].skipped = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
         /* there's no VLC for 'No MC, Not Coded':
                * we have to transmit (0,0) motion vectors
                */
         if (pict_type==2&&!cbp&&!(mb_type&8))
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            mb_type |= 8;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
         putaddrinc(MBAinc);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
         /* macroblock_address_increment */
         MBAinc = 1;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         putmbtype(pict_type, mb_type);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         /* macroblock type */
         if (mb_type&(8|4)&&!frame_pred_dct)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, frame_pred_dct<=0, 0<=i,
//    i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
            putbits(mbinfo[k].motion_type, 2);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (pict_struct==3&&cbp&&!frame_pred_dct)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, pict_struct==3, block_count<=comp, 1<=cbp, 0<=comp,
//    frame_pred_dct<=0, 0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
            putbits(mbinfo[k].dct_type, 1);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (mb_type&16) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            putbits(q_scale_type?map_non_linear_mquant[mbinfo[k].mquant]:mbinfo[k].mquant>>1, 5);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            prev_mquant = mbinfo[k].mquant;
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (mb_type&8)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            /* forward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 0, mbinfo[k].motion_type, forw_hor_f_code, forw_vert_f_code);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (mb_type&4)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            /* backward motion vectors, update predictors */
            putmvs(mbinfo[k].MV, PMV, mbinfo[k].mv_field_sel, mbinfo[k].dmvector, 1, mbinfo[k].motion_type, back_hor_f_code, back_vert_f_code);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (mb_type&2) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            putcbp(cbp>>block_count-6&63);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            if (chroma_format!=1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
               putbits(cbp, block_count-6);
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         for(comp = 0; comp <= block_count-1; comp += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, comp+1<=block_count, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            if (cbp&1<<block_count-1-comp)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, comp+1<=block_count, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
               /* block loop */
               if (mb_type&1) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, comp+1<=block_count, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
                  cc = comp<4?0:(comp&1)+1;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, comp+1<=block_count, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
                  putintrablk(blocks[k*block_count+comp], cc);
               }
               else
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, comp+1<=block_count, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
                  putnonintrablk(blocks[k*block_count+comp]);
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         /* reset predictors */
         if (!(mb_type&1))
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            for(cc = 0; cc <= 2; cc += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=cc, cc<=2, 0<=comp, 0<=i,
//    i<=k, i+1<=mb_width, 0<=j, j+1<=mb_height2}
               dc_dct_pred[cc] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         if (mb_type&1||pict_type==2&&!(mb_type&8)) {
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
            PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         mbinfo[k].mb_type = mb_type;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {MBAinc==1, block_count<=comp, 0<=comp, 0<=i, i<=k,
//    i+1<=mb_width, 0<=j, j+1<=mb_height2}
         k++;
         goto _loop_end_2;
l99999:         ;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k, i+2<=mb_width,
//    0<=j, j+1<=mb_height2}
/* no DCT coefficients and neither first nor last macroblock of slice */
         if (pict_type==2&&!(mb_type&8)) goto l99998;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k, i+2<=mb_width,
//    0<=j, j+1<=mb_height2}
         if (pict_type==3&&pict_struct==3&&mbinfo[k].motion_type==2&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1])&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1])) goto l99997;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k, i+2<=mb_width,
//    0<=j, j+1<=mb_height2}
         if (pict_type==3&&pict_struct!=3&&mbinfo[k].motion_type==1&&((mbinfo[k-1].mb_type^mb_type)&(8|4))==0&&(!(mb_type&8)||PMV[0][0][0]==(((mbinfo[k].MV)[0])[0])[0]&&PMV[0][0][1]==(((mbinfo[k].MV)[0])[0])[1]&&((mbinfo[k].mv_field_sel)[0])[0]==(pict_struct==2))&&(!(mb_type&4)||PMV[0][1][0]==(((mbinfo[k].MV)[0])[1])[0]&&PMV[0][1][1]==(((mbinfo[k].MV)[0])[1])[1]&&((mbinfo[k].mv_field_sel)[0])[1]==(pict_struct==2))) {
         }
         else {
            goto l99996;
         }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==3, block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k,
//    i+2<=mb_width, 0<=j, j+1<=mb_height2}
         /* conditions for skipping in B field pictures:
                    * - must be field predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    * - relevant motion_vertical_field_selects have to be of same
                    *   parity as current field
                    */
         mbinfo[k].mb_type = mb_type;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==3, block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k,
//    i+2<=mb_width, 0<=j, j+1<=mb_height2}
         mbinfo[k].skipped = 1;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==3, block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k,
//    i+2<=mb_width, 0<=j, j+1<=mb_height2}
         MBAinc++;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==3, block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k,
//    i+2<=mb_width, 0<=j, j+1<=mb_height2}
         k++;
         goto _loop_end_2;
l99997:         ;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_struct==3, pict_type==3, block_count<=comp, cbp<=0,
//    0<=comp, 1<=i, i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         /* conditions for skipping in B frame pictures:
                    * - must be frame predicted
                    * - must be the same prediction type (forward/backward/interp.)
                    *   as previous macroblock
                    * - relevant vectors (forward/backward/both) have to be the same
                    *   as in previous macroblock
                    */
         mbinfo[k].mb_type = mb_type;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_struct==3, pict_type==3, block_count<=comp, cbp<=0,
//    0<=comp, 1<=i, i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         mbinfo[k].skipped = 1;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_struct==3, pict_type==3, block_count<=comp, cbp<=0,
//    0<=comp, 1<=i, i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         MBAinc++;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_struct==3, pict_type==3, block_count<=comp, cbp<=0,
//    0<=comp, 1<=i, i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         k++;
         goto _loop_end_2;
l99998:         ;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i, i<=k,
//    i+2<=mb_width, 0<=j, j+1<=mb_height2}
         /* P picture, no motion vectors -> skip */
         /* reset predictors */
         for(cc = 0; cc <= 2; cc += 1)
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {pict_type==2, block_count<=comp, cbp<=0, 0<=cc, cc<=2, 0<=comp,
//    1<=i, i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
            dc_dct_pred[cc] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         PMV[0][0][0] = PMV[0][0][1] = PMV[1][0][0] = PMV[1][0][1] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         PMV[0][1][0] = PMV[0][1][1] = PMV[1][1][0] = PMV[1][1][1] = 0;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         mbinfo[k].mb_type = mb_type;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         mbinfo[k].skipped = 1;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         MBAinc++;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {cc==3, pict_type==2, block_count<=comp, cbp<=0, 0<=comp, 1<=i,
//    i<=k, i+2<=mb_width, 0<=j, j+1<=mb_height2}
         k++;
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {block_count<=comp, 0<=comp, 0<=i, i+1<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2}
_loop_end_2:         ;
      }
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=j, mb_height2<=j, 0<=k}
   rc_update_pict();
//  P(MBAinc,back_hor_f_code,back_vert_f_code,block_count,cbp,cc,
//    chroma_format,comp,dc_prec,forw_hor_f_code,forw_vert_f_code,
//    frame_pred_dct,i,j,k,mb_height2,mb_type,mb_width,mpeg1,
//    pict_struct,pict_type,prev_mquant,q_scale_type,vertical_size)
//    {0<=j, mb_height2<=j, 0<=k}
   vbv_end_of_picture();
}
//  P() {}
void putpictcodext(void)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(8, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+28<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+64<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+56<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+28<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+32<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+36<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+28<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(forw_hor_f_code, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+208<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+200<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+184<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+168<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+152<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+144<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+136<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+128<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+112<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+96<=52putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+120<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+104<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+104<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+112<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+104<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+96<=38putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+72<=37putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+64<=37putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+112<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+104<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+96<=31putbits!:bytecnt+
//    putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+72<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+32<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+76<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+68<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+80<=23putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+72<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+64<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+40<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+32<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+40<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+40<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+32<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+40<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* forward_horizontal_f_code */
   putbits(forw_vert_f_code, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+88<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+80<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+48<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+44<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* forward_vertical_f_code */
   putbits(back_hor_f_code, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+40<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+100<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+92<=45putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+56<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+100<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+92<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+56<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+48<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+40<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+48<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* backward_horizontal_f_code */
   putbits(back_vert_f_code, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+44<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+416<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+400<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+416<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+400<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+268<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+236<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+268<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+260<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+244<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+236<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+112<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+104<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+168<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+152<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+168<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+152<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+130<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+122<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+64<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+96<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+112<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+104<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+104<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+96<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+88<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+52<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+44<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+64<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+52<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+44<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+52<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* backward_vertical_f_code */
   putbits(dc_prec, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+46<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+118<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+110<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+68<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_dc_precision */
   putbits(pict_struct, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+48<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+124<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+116<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+72<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+124<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+116<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+72<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+56<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+48<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* picture_structure */
   putbits(pict_struct==3?topfirst:0, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+49<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+476<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+460<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+476<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+460<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+298<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+266<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+298<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+290<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+274<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+266<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+127<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+119<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+188<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+172<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+188<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+172<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+145<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+137<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+74<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+106<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+127<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+119<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+114<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+106<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+98<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+57<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+49<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+74<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+57<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+49<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+57<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* top_field_first */
   putbits(frame_pred_dct, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+50<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+130<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+122<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+76<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+58<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_pred_frame_dct */
   putbits(0, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+51<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+133<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+125<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+78<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+133<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+125<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+78<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+59<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+51<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+59<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* concealment_motion_vectors  -- currently not implemented */
   putbits(q_scale_type, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+52<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+512<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+496<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+512<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+496<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+316<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+284<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+316<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+308<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+292<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+284<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+136<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+128<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+200<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+184<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+200<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+184<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+154<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+146<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+80<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+112<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+136<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+120<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+112<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+104<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+60<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+52<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+80<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+60<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+52<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+60<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* q_scale_type */
   putbits(intravlc, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+139<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+131<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+82<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_vlc_format */
   putbits(altscan, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+142<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+134<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+84<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+142<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+134<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+84<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* alternate_scan */
   putbits(repeatfirst, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+55<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+548<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+532<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+548<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+532<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+334<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+302<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+334<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+326<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+310<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+302<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+145<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+137<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+212<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+196<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+212<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+196<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+163<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+155<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+86<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+118<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+145<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+137<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+126<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+118<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+110<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+63<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+55<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+86<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+63<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+55<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+63<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* repeat_first_field */
   putbits(prog_frame, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+148<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+140<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+88<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+64<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* chroma_420_type */
   putbits(prog_frame, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+57<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+151<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+143<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+90<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+151<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+143<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+90<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+65<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+57<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+65<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* progressive_frame */
   putbits(0, 1);
}
//  P() {}
void putpicthdr(void)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x100L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* picture_start_code */
   calc_vbv_delay();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   putbits(temp_ref, 10);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+34<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+76<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+68<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+34<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+44<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+42<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+34<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+42<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   /* temporal_reference */
   putbits(pict_type, 3);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+37<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+238<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+230<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+214<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+198<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+172<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+164<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+156<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+148<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+127<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+111<=52putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+140<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+124<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+119<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+127<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+119<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+111<=38putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+82<=37putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+74<=37putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+127<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+119<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+111<=31putbits!:bytecnt
//    +putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+82<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+37<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+85<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+77<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+90<=23putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+82<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+74<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+45<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+37<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+50<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+45<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+37<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+45<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   /* picture_coding_type */
   putbits(vbv_delay, 16);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+133<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+125<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+82<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   /* vbv_delay */
   if (pict_type==2||pict_type==3) {
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {2<=pict_type, pict_type<=3,
//    8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+133<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+125<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+82<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
      putbits(0, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {2<=pict_type, pict_type<=3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+136<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+128<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+84<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+136<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+84<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
      /* full_pel_forward_vector */
      if (mpeg1)
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {2<=pict_type, pict_type<=3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+136<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+128<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+84<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+136<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+84<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
         putbits(forw_hor_f_code, 3);
      else
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {mpeg1==0, 2<=pict_type, pict_type<=3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+136<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+128<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+84<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+136<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+84<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
         putbits(7, 3);
   }
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   if (pict_type==3) {
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {pict_type==3,
//    8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
      putbits(0, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {pict_type==3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
      /* full_pel_backward_vector */
      if (mpeg1)
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {pict_type==3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
         putbits(back_hor_f_code, 3);
      else
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {mpeg1==0, pict_type==3,
//    8putbits!:bytecnt#init+putbits!:outcnt+54<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+62<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+54<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+62<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
         putbits(7, 3);
   }
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,vbv_delay)
//    {8putbits!:bytecnt#init+putbits!:outcnt+53<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+61<=8putbits!:bytecnt+
//    putbits!:outcnt#init, vbv_delay<=65535}
   putbits(0, 1);
}
//  P() {}
void putseq(void)
{
   /* this routine assumes (N % M) == 0 */
//  P() {}
   int i, j, k, f, f0, n, np, nb, sxf, syf, sxb, syb;
//  P(f,f0,i,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   int ipflag;
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   FILE *fd;
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   char name[256];
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   unsigned char *neworg[3], *newref[3];
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   static char ipb[5] = {' ', 'I', 'P', 'B', 'D'};
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   rc_init_seq();
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   /* initialize rate control */
   /* sequence header, sequence extension and sequence display extension */
   putseqhdr();
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   if (!mpeg1) {
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {mpeg1<=0}
      putseqext();
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {mpeg1<=0}
      putseqdispext();
   }
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   /* optionally output some text data (description, copyright or whatever) */
   if (strlen(id_string)>1)
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
      putuserdata(id_string);
//  P(f,f0,i,ipflag,j,k,n,nb,np,sxb,sxf,syb,syf) {}
   /* loop through all frames in encoding/decoding order */
   for(i = 0; i <= nframes-1; i += 1) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=i}
      if (!quiet) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=i,
//    quiet<=0}
         fprintf(stderr, "Encoding frame %d ", i);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=i,
//    quiet<=0}
         fflush(stderr);
      }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=i}
      /* f0: lowest frame number in current GOP
           *
           * first GOP contains N-(M-1) frames,
           * all other GOPs contain N frames
           */
      f0 = N*((i+(M-1))/N)-(M-1);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=i}
      if (f0<0)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f0+1<=0,
//    0<=i}
         f0 = 0;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i}
      if (i==0||(i-1)%M==0) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i}
         /* I or P frame */
         for(j = 0; j <= 2; j += 1) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            /* shuffle reference frames */
            neworg[j] = oldorgframe[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            newref[j] = oldrefframe[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            oldorgframe[j] = neworgframe[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            oldrefframe[j] = newrefframe[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            neworgframe[j] = neworg[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    0<=i, 0<=j, j<=2}
            newrefframe[j] = newref[j];
         }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    0<=f0, 0<=i}
         /* f: frame number in display order */
         f = i==0?0:i+M-1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    0<=f0, 0<=i}
         if (f>=nframes)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    nframes<=f, 0<=f0, 0<=i}
            f = nframes-1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    f+1<=nframes, 0<=f0, 0<=i}
         if (i==f0) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f0==i,
//    j==3, f+1<=nframes, 0<=f0}
            /* I frame */
            pict_type = 1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f0==i,
//    j==3, pict_type==1, f+1<=nframes, 0<=f0}
            forw_hor_f_code = forw_vert_f_code = 15;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0}
            back_hor_f_code = back_vert_f_code = 15;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0}
            /* n: number of frames in current GOP
                     *
                     * first GOP contains (M-1) less (B) frames
                     */
            n = i==0?N-(M-1):N;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0}
            /* last GOP may contain less frames */
            if (n>nframes-f0)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0, nframes+1<=f0+n}
               n = nframes-f0;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0, f0+n<=nframes}
            /* number of P frames */
            if (i==0)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==0,
//    forw_hor_f_code==15, forw_vert_f_code==15, i==0, j==3,
//    pict_type==1, f+1<=nframes, n<=nframes}
               np = (n+2*(M-1))/M-1;
            else
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 1<=f0, f0+n<=nframes}
               np = (n+(M-1))/M-1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, pict_type==1,
//    f+1<=nframes, 0<=f0, f0+n<=nframes}
            /* number of B frames */
            nb = n-np-1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, nb+np==n-1,
//    pict_type==1, f+1<=nframes, 0<=f0, f0+n<=nframes}
            rc_init_GOP(np, nb);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, f0==i,
//    forw_hor_f_code==15, forw_vert_f_code==15, j==3, nb+np==n-1,
//    pict_type==1, f+1<=nframes, 0<=f0, f0+n<=nframes}
            putgophdr(f0, i==0);
         }
         else {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            /* P frame */
            pict_type = 2;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    pict_type==2, f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    pict_type==2, f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    pict_type==2, f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            back_hor_f_code = back_vert_f_code = 15;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, j==3, pict_type==2,
//    f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            sxf = motion_data[0].sxf;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, j==3, pict_type==2,
//    f+1<=nframes, 0<=f0, 1<=f0+i, 0<=i}
            syf = motion_data[0].syf;
         }
      }
      else {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    1<=i}
         /* B frame */
         for(j = 0; j <= 2; j += 1) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    1<=i, 0<=j, j<=2}
            neworg[j] = auxorgframe[j];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=f0,
//    1<=i, 0<=j, j<=2}
            newref[j] = auxframe[j];
         }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    0<=f0, 1<=i}
         /* f: frame number in display order */
         f = i-1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, 0<=f, 0<=f0}
         pict_type = 3;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         n = (i-2)%M+1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         /* first B: n=1, second B: n=2, ... */
         forw_hor_f_code = motion_data[n].forw_hor_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         forw_vert_f_code = motion_data[n].forw_vert_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         back_hor_f_code = motion_data[n].back_hor_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         back_vert_f_code = motion_data[n].back_vert_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         sxf = motion_data[n].sxf;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         syf = motion_data[n].syf;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         sxb = motion_data[n].sxb;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {f==i-1,
//    j==3, pict_type==3, 0<=f, 0<=f0}
         syb = motion_data[n].syb;
      }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {j==3,
//    0<=f0, pict_type<=f0+2i+1, 0<=i, pict_type<=i+2, 1<=pict_type,
//    pict_type<=3}
      temp_ref = f-f0;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      frame_pred_dct = frame_pred_dct_tab[pict_type-1];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      q_scale_type = qscale_tab[pict_type-1];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      intravlc = intravlc_tab[pict_type-1];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      altscan = altscan_tab[pict_type-1];
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, "\nFrame %d (#%d in display order):\n", i, f);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " picture_type=%c\n", ipb[pict_type]);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " temporal_reference=%d\n", temp_ref);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " frame_pred_frame_dct=%d\n", frame_pred_dct);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " q_scale_type=%d\n", q_scale_type);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " intra_vlc_format=%d\n", intravlc);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      fprintf(statfile, " alternate_scan=%d\n", altscan);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 1<=pict_type, pict_type<=3}
      if (pict_type!=1) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 2<=pict_type, pict_type<=3}
         fprintf(statfile, " forward search window: %d...%d / %d...%d\n", -sxf, sxf, -syf, syf);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, 0<=f0, pict_type<=f0+2i+1, 0<=i,
//    pict_type<=i+2, 2<=pict_type, pict_type<=3}
         fprintf(statfile, " forward vector range: %d...%d.5 / %d...%d.5\n", -(4<<forw_hor_f_code), (4<<forw_hor_f_code)-1, -(4<<forw_vert_f_code), (4<<forw_vert_f_code)-1);
      }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, pict_type+temp_ref<=f+2i+1, temp_ref<=f,
//    0<=i, pict_type<=i+2, 1<=pict_type, pict_type<=3}
      if (pict_type==3) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, pict_type==3, temp_ref+2<=f+2i,
//    temp_ref<=f, 1<=i}
         fprintf(statfile, " backward search window: %d...%d / %d...%d\n", -sxb, sxb, -syb, syb);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, pict_type==3, temp_ref+2<=f+2i,
//    temp_ref<=f, 1<=i}
         fprintf(statfile, " backward vector range: %d...%d.5 / %d...%d.5\n", -(4<<back_hor_f_code), (4<<back_hor_f_code)-1, -(4<<back_vert_f_code), (4<<back_vert_f_code)-1);
      }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, pict_type+temp_ref<=f+2i+1, temp_ref<=f,
//    0<=i, pict_type<=i+2, 1<=pict_type, pict_type<=3}
      sprintf(name, tplorg, f+frame0);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {f0+temp_ref==f, j==3, pict_type+temp_ref<=f+2i+1, temp_ref<=f,
//    0<=i, pict_type<=i+2, 1<=pict_type, pict_type<=3}
      readframe(name, neworg);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
      if (fieldpic) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         if (!quiet) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {quiet<=0}
            fprintf(stderr, "\nfirst field  (%s) ", topfirst?"top":"bot");
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {quiet<=0}
            fflush(stderr);
         }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         pict_struct = topfirst?1:2;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {1<=pict_struct, pict_struct<=2}
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
            if (mbinfo[k].mb_type&1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
         itransform(predframe, newref, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         stats();
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         if (!quiet) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {quiet<=0}
            fprintf(stderr, "second field (%s) ", topfirst?"bot":"top");
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {quiet<=0}
            fflush(stderr);
         }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         pict_struct = topfirst?2:1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {1<=pict_struct, pict_struct<=2}
         ipflag = pict_type==1;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {1<=pict_struct, pict_struct<=2}
         if (ipflag) {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {1<=pict_struct, pict_struct<=2}
            /* first field = I, second field = P */
            pict_type = 2;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {pict_type==2, 1<=pict_struct, pict_struct<=2}
            forw_hor_f_code = motion_data[0].forw_hor_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {pict_type==2, 1<=pict_struct, pict_struct<=2}
            forw_vert_f_code = motion_data[0].forw_vert_f_code;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {pict_type==2, 1<=pict_struct, pict_struct<=2}
            back_hor_f_code = back_vert_f_code = 15;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, pict_type==2,
//    1<=pict_struct, pict_struct<=2}
            sxf = motion_data[0].sxf;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {back_hor_f_code==15, back_vert_f_code==15, pict_type==2,
//    1<=pict_struct, pict_struct<=2}
            syf = motion_data[0].syf;
         }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {1<=pict_struct, pict_struct<=2}
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 1, ipflag);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         predict(oldrefframe, newrefframe, predframe, 1, mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         for(k = 0; k <= mb_height2*mb_width-1; k += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
            if (mbinfo[k].mb_type&1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
         itransform(predframe, newref, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         stats();
      }
      else {
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {fieldpic==0}
         pict_struct = 3;
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {fieldpic==0, pict_struct==3}
         /* do motion_estimation
                *
                * uses source frames (...orgframe) for full pel search
                * and reconstructed frames (...refframe) for half pel search
                */
         motion_estimation(oldorgframe[0], neworgframe[0], oldrefframe[0], newrefframe[0], neworg[0], newref[0], sxf, syf, sxb, syb, mbinfo, 0, 0);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         predict(oldrefframe, newrefframe, predframe, 0, mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         dct_type_estimation(predframe[0], neworg[0], mbinfo);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         transform(predframe, neworg, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         putpict(neworg[0]);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         for(k = 0; k <= mb_height*mb_width-1; k += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
            if (mbinfo[k].mb_type&1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_intra(blocks[k*block_count+j], blocks[k*block_count+j], dc_prec, intra_q, mbinfo[k].mquant);
            else
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
               for(j = 0; j <= block_count-1; j += 1)
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst)
//    {j+1<=block_count, 0<=j, 0<=k}
                  iquant_non_intra(blocks[k*block_count+j], blocks[k*block_count+j], inter_q, mbinfo[k].mquant);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {0<=k}
         itransform(predframe, newref, mbinfo, blocks);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         calcSNR(neworg, newref);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
         stats();
      }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
      sprintf(name, tplref, f+frame0);
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
      writeframe(name, newref);
   }
//  P(M,N,altscan,back_hor_f_code,back_vert_f_code,block_count,
//    dc_prec,f,f0,fieldpic,forw_hor_f_code,forw_vert_f_code,frame0,
//    frame_pred_dct,i,intravlc,ipflag,j,k,mb_height,mb_height2,
//    mb_width,mpeg1,n,nb,nframes,np,pict_struct,pict_type,
//    q_scale_type,quiet,sxb,sxf,syb,syf,temp_ref,topfirst) {}
   putseqend();
}
//  P() {}
void putseqdispext(void)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(2, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+28<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+64<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+56<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+28<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+32<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+36<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+28<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(video_format, 3);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+31<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+202<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+194<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+178<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+162<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+148<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+140<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+132<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+124<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+109<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+93<=52putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+116<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+100<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+101<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+109<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+101<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+93<=38putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+70<=37putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+62<=37putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+109<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+101<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+93<=31putbits!:bytecnt+
//    putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+70<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+31<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+73<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+65<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+78<=23putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+70<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+62<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+39<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+31<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+38<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+39<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+31<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+39<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* video_format */
   putbits(1, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+76<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+68<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+40<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+40<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* colour_description */
   putbits(color_primaries, 8);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+40<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+100<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+92<=45putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+56<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+100<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+92<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+56<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+48<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+40<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+48<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* colour_primaries */
   putbits(transfer_characteristics, 8);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+48<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+464<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+448<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+464<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+448<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+292<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+260<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+292<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+284<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+268<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+260<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+124<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+116<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+184<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+168<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+184<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+168<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+142<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+134<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+72<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+104<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+124<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+116<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+112<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+104<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+96<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+56<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+48<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+72<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+56<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+48<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* transfer_characteristics */
   putbits(matrix_coefficients, 8);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+148<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+140<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+88<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+64<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* matrix_coefficients */
   putbits(display_horizontal_size, 14);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+70<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+190<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+182<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+116<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+190<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+182<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+116<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+78<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+70<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+78<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* display_horizontal_size */
   putbits(1, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+71<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+740<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+724<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+740<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+724<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+430<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+398<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+430<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+422<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+406<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+398<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+193<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+185<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+276<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+260<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+276<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+260<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+211<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+203<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+118<=44putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+150<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+193<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+185<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+158<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+150<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+142<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+79<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+71<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+118<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+79<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+71<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+79<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(display_vertical_size, 14);
}
//  P() {}
void putseqend(void)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B7L, 32);
}
//  P() {}
void putseqext(void)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B5L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code */
   putbits(1, 4);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+28<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+64<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+56<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+28<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+32<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+36<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+28<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* extension_start_code_identifier */
   putbits(profile<<4|level, 8);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+232<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+224<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+208<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+192<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+168<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+160<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+152<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+144<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+124<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+108<=52putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+136<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+120<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+116<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+124<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+116<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+108<=38putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+80<=37putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+72<=37putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+124<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+116<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+108<=31putbits!:bytecnt
//    +putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+80<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+36<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+88<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+80<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+88<=23putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+80<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+72<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+44<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+36<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+48<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+44<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+36<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+44<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* profile_and_level_indication */
   putbits(prog_seq, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+37<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+91<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+83<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+50<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+45<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* progressive sequence */
   putbits(chroma_format, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+39<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+97<=45putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+89<=45putbits!:bytecnt+
//    4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+54<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+97<=24putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+89<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+54<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+47<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+39<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+47<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* chroma_format */
   putbits(horizontal_size>>12, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+41<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+380<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+364<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+380<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+364<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+250<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+218<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+250<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+242<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+226<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+218<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+103<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+95<=66putbits!:bytecnt+
//    7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+156<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+140<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+156<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+140<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+121<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+113<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+58<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+90<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+103<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+95<=24putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+98<=23putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+90<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+82<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+49<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+41<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+58<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+49<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+41<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+49<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* horizontal_size_extension */
   putbits(vertical_size>>12, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+43<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+109<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+101<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+62<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+51<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vertical_size_extension */
   putbits((int) ceil(bit_rate/400.0)>>18, 12);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+55<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+145<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+137<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+86<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+145<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+137<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+86<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+63<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+55<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+63<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* bit_rate_extension */
   putbits(1, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+560<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+544<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+560<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+544<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+340<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+308<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+340<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+332<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+316<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+308<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+148<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+140<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+216<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+200<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+216<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+200<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+166<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+158<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+88<=44putbits!:bytecnt+
//    5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+120<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+148<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+140<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+128<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+120<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+112<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+64<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+56<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+88<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+64<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+56<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+64<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(vbv_buffer_size>>10, 8);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+64<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+172<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+164<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+104<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+72<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vbv_buffer_size_extension */
   putbits(0, 1);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+65<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+175<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+167<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+106<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+175<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+167<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+106<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+73<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+65<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+73<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* low_delay  -- currently not implemented */
   putbits(0, 2);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+67<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+692<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+676<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+692<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+676<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+406<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+374<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+406<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+398<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+382<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+374<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+181<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+173<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+260<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+244<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+260<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+244<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+199<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+191<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+110<=44putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+142<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+181<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+173<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+150<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+142<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+134<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+75<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+67<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+110<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+75<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+67<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+75<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_rate_extension_n */
   putbits(0, 5);
}
//  P() {}
void putseqhdr(void)
{
//  P() {}
   int i;
//  P(i) {}
   alignbits();
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B3L, 32);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* sequence_header_code */
   putbits(horizontal_size, 12);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+36<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+80<=23putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+72<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+36<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+48<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+44<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+36<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+44<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* horizontal_size_value */
   putbits(vertical_size, 12);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+48<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+304<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+296<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+280<=62putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    62putbits!:bytecnt#init+8putbits!:outcnt+264<=62putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+216<=53putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+208<=53putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+200<=53putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    53putbits!:bytecnt#init+7putbits!:outcnt+192<=53putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+160<=52putbits!:bytecnt
//    +6putbits!:outcnt#init,
//    52putbits!:bytecnt#init+7putbits!:outcnt+144<=52putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+184<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+168<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+152<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+160<=38putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+152<=38putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    38putbits!:bytecnt#init+5putbits!:outcnt+144<=38putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+104<=37putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    37putbits!:bytecnt#init+5putbits!:outcnt+96<=37putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+160<=31putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+152<=31putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    31putbits!:bytecnt#init+4putbits!:outcnt+144<=31putbits!:bytecnt
//    +putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+104<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    29putbits!:bytecnt#init+4putbits!:outcnt+48<=29putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+116<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+108<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+112<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+104<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+96<=23putbits!:bytecnt+
//    putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+56<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+48<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+72<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+56<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+48<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vertical_size_value */
   putbits(aspectratio, 4);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+52<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+128<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+120<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+80<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+60<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* aspect_ratio_information */
   putbits(frame_rate_code, 4);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+56<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+140<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+132<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+88<=30putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+140<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+132<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+88<=16putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+64<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+56<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+64<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* frame_rate_code */
   putbits((int) ceil(bit_rate/400.0), 18);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+74<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+760<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+744<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+760<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+744<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+440<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+408<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+440<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+432<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+416<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+408<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+194<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+186<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+288<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+272<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+288<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+272<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+216<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+208<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+124<=44putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+156<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+194<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+186<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+164<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+156<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+148<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+82<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+74<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+124<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+82<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+74<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+82<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* bit_rate_value */
   putbits(1, 1);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+75<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+197<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+189<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+126<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+83<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* marker_bit */
   putbits(vbv_buffer_size, 10);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+85<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+227<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+219<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+146<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+227<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+219<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+146<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+93<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+85<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+93<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* vbv_buffer_size_value */
   putbits(constrparms, 1);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+86<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+904<=180
//    putbits!:bytecnt+19putbits!:outcnt#init,
//    180putbits!:bytecnt#init+24putbits!:outcnt+888<=180
//    putbits!:bytecnt+17putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+904<=138
//    putbits!:bytecnt+13putbits!:outcnt#init,
//    138putbits!:bytecnt#init+18putbits!:outcnt+888<=138
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+512<=90
//    putbits!:bytecnt+11putbits!:outcnt#init,
//    90putbits!:bytecnt#init+12putbits!:outcnt+480<=90
//    putbits!:bytecnt+7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+512<=69putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+504<=69putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+488<=69putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    69putbits!:bytecnt#init+9putbits!:outcnt+480<=69putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+230<=66putbits!:bytecnt
//    +8putbits!:outcnt#init,
//    66putbits!:bytecnt#init+9putbits!:outcnt+222<=66putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+336<=60putbits!:bytecnt
//    +7putbits!:outcnt#init,
//    60putbits!:bytecnt#init+8putbits!:outcnt+320<=60putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+336<=46putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    46putbits!:bytecnt#init+6putbits!:outcnt+320<=46putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+252<=45putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    45putbits!:bytecnt#init+6putbits!:outcnt+244<=45putbits!:bytecnt
//    +4putbits!:outcnt#init,
//    44putbits!:bytecnt#init+6putbits!:outcnt+148<=44putbits!:bytecnt
//    +5putbits!:outcnt#init,
//    30putbits!:bytecnt#init+4putbits!:outcnt+180<=30putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+230<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+222<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+188<=23putbits!:bytecnt
//    +3putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+180<=23putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    23putbits!:bytecnt#init+3putbits!:outcnt+172<=23putbits!:bytecnt
//    +putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+94<=22putbits!:bytecnt+
//    3putbits!:outcnt#init,
//    22putbits!:bytecnt#init+3putbits!:outcnt+86<=22putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+148<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+94<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+86<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+94<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* constrained_parameters_flag */
   putbits(load_iquant, 1);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+87<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+233<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+225<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+150<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+95<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* load_intra_quantizer_matrix */
   if (load_iquant)
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+87<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+233<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+225<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+150<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+95<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      for(i = 0; i <= 63; i += 1)
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt) {0<=i,
//    i<=63, 8i+8putbits!:bytecnt#init+putbits!:outcnt+87<=8
//    putbits!:bytecnt,
//    8i+15putbits!:bytecnt#init+2putbits!:outcnt+95<=15
//    putbits!:bytecnt+2putbits!:outcnt#init,
//    8i+15putbits!:bytecnt#init+2putbits!:outcnt+87<=15
//    putbits!:bytecnt+putbits!:outcnt#init,
//    8i+8putbits!:bytecnt#init+putbits!:outcnt+95<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16i+30putbits!:bytecnt#init+4putbits!:outcnt+150<=30
//    putbits!:bytecnt+3putbits!:outcnt#init,
//    16i+16putbits!:bytecnt#init+2putbits!:outcnt+150<=16
//    putbits!:bytecnt+putbits!:outcnt#init,
//    24i+45putbits!:bytecnt#init+6putbits!:outcnt+233<=45
//    putbits!:bytecnt+5putbits!:outcnt#init,
//    24i+45putbits!:bytecnt#init+6putbits!:outcnt+225<=45
//    putbits!:bytecnt+4putbits!:outcnt#init,
//    24i+24putbits!:bytecnt#init+3putbits!:outcnt+233<=24
//    putbits!:bytecnt+2putbits!:outcnt#init,
//    24i+24putbits!:bytecnt#init+3putbits!:outcnt+225<=24
//    putbits!:bytecnt+putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+87<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+233<=24putbits!:bytecnt
//    +2putbits!:outcnt#init,
//    24putbits!:bytecnt#init+3putbits!:outcnt+225<=24putbits!:bytecnt
//    +putbits!:outcnt#init,
//    16putbits!:bytecnt#init+2putbits!:outcnt+150<=16putbits!:bytecnt
//    +putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+95<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         /* matrices are always downloaded in zig-zag order */
         putbits(intra_q[zig_zag_scan[i]], 8);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+87<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+95<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* intra_quantizer_matrix */
   putbits(load_niquant, 1);
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+88<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+96<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+88<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+96<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* load_non_intra_quantizer_matrix */
   if (load_niquant)
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {8putbits!:bytecnt#init+putbits!:outcnt+88<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+96<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+88<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+96<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      for(i = 0; i <= 63; i += 1)
//  P(i,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt) {0<=i,
//    i<=63, 8i+8putbits!:bytecnt#init+putbits!:outcnt+88<=8
//    putbits!:bytecnt,
//    8i+22putbits!:bytecnt#init+3putbits!:outcnt+96<=22
//    putbits!:bytecnt+3putbits!:outcnt#init,
//    8i+22putbits!:bytecnt#init+3putbits!:outcnt+88<=22
//    putbits!:bytecnt+2putbits!:outcnt#init,
//    8i+15putbits!:bytecnt#init+2putbits!:outcnt+96<=15
//    putbits!:bytecnt+2putbits!:outcnt#init,
//    8i+15putbits!:bytecnt#init+2putbits!:outcnt+88<=15
//    putbits!:bytecnt+putbits!:outcnt#init,
//    8i+8putbits!:bytecnt#init+putbits!:outcnt+96<=8putbits!:bytecnt+
//    putbits!:outcnt#init,
//    16i+30putbits!:bytecnt#init+4putbits!:outcnt+184<=30
//    putbits!:bytecnt+3putbits!:outcnt#init,
//    16i+23putbits!:bytecnt#init+3putbits!:outcnt+192<=23
//    putbits!:bytecnt+3putbits!:outcnt#init,
//    16i+23putbits!:bytecnt#init+3putbits!:outcnt+184<=23
//    putbits!:bytecnt+2putbits!:outcnt#init,
//    16i+23putbits!:bytecnt#init+3putbits!:outcnt+176<=23
//    putbits!:bytecnt+putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+88<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+96<=15putbits!:bytecnt+
//    2putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+88<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+96<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
         putbits(inter_q[zig_zag_scan[i]], 8);
}
//  P() {}
void putuserdata(char *userdata)
{
//  P() {}
   alignbits();
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt<=8putbits!:bytecnt+8,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init}
   putbits(0x1B2L, 32);
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    15putbits!:bytecnt#init+2putbits!:outcnt+24<=15putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
   /* user_data_start_code */
   while (*userdata)
//  P(putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt)
//    {putbits!:bytecnt#init<=putbits!:bytecnt,
//    8putbits!:bytecnt#init+putbits!:outcnt+24<=8putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init,
//    8putbits!:bytecnt#init+putbits!:outcnt+32<=8putbits!:bytecnt+
//    putbits!:outcnt#init}
      putbits(*userdata++, 8);
}
//  P() {}
static void putDC(sVLCtable *tab, int val)
{
//  P() {}
   int absval, size;
//  P(absval,size) {}
   absval = val<0?-val:val;
//  P(absval,size) {0<=absval+val, val<=absval}
   /* abs(val) */
   if (absval>2047||mpeg1&&absval>255) {
//  P(absval,size) {256<=absval, 0<=absval+val, val<=absval}
      /* should never happen */
      sprintf(errortext, "DC value out of range (%d)\n", val);
//  P(absval,size) {256<=absval, 0<=absval+val, val<=absval}
      error(errortext);
   }
//  P(absval,size) {absval<=2047, 0<=absval+val, val<=absval}
   /* compute dct_dc_size */
   size = 0;
//  P(absval,size) {size==0, absval<=2047, 0<=absval+val, val<=absval}
   while (absval) {
//  P(absval,size) {1<=absval, 0<=absval+2046size+val,
//    val<=absval+2046size, 0<=size, 0<=val+2047, val<=2047}
      absval >>= 1;
//  P(absval,size) {0<=absval, 0<=2absval+2046size+val+1,
//    val<=2absval+2046size+1, 0<=size, 0<=val+2047, val<=2047}
      size++;
   }
//  P(absval,size) {absval==0, 0<=2047size+2val, 2val<=2047size,
//    0<=val+2047, val<=2047}
   /* generate VLC for dct_dc_size (Table B-12 or B-13) */
   putbits(tab[size].code, tab[size].len);
//  P(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,size)
//    {absval==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 0<=2047size+2val, 2val<=2047size,
//    0<=val+2047, val<=2047}
   /* append fixed length code (dc_dct_differential) */
   if (size!=0) {
//  P(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,size)
//    {absval==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 1<=size, 0<=2047size+2val, 2val<=2047size,
//    0<=val+2047, val<=2047}
      if (val>=0)
//  P(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,size)
//    {absval==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 1<=size, 2val<=2047size, 0<=val,
//    val<=2047}
         absval = val;
      else
//  P(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,size)
//    {absval==0, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 1<=size, 1<=1024size+val, 0<=val+2047,
//    val+1<=0}
         absval = val+(1<<size)-1;
//  P(absval,putbits!:bytecnt,putbits!:outbfr,putbits!:outcnt,size)
//    {2051val<=2049absval+2047size, 2049val<=2048absval+2047,
//    val<=absval+1, putbits!:bytecnt#init<=putbits!:bytecnt,
//    7putbits!:bytecnt#init+putbits!:outcnt<=7putbits!:bytecnt+
//    putbits!:outcnt#init, 1<=size, 2val<=2047size, 1<=1024size+val,
//    0<=val+2047, val<=2047}
      /* val + (2 ^ size) - 1 */
      putbits(absval, size);
   }
}
//  P() {}
int quant_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i;
//  P(i) {}
   int x, y, d;
//  P(d,i,x,y) {}
   x = src[0];
//  P(d,i,x,y) {}
   d = 8>>dc_prec;
//  P(d,i,x,y) {}
   /* intra_dc_mult */
   dst[0] = x>=0?(x+(d>>1))/d:-(((-x)+(d>>1))/d);
//  P(d,i,x,y) {}
   /* round(x/d) */
   for(i = 1; i <= 63; i += 1) {
//  P(d,i,x,y) {1<=i, i<=63}
      x = src[i];
//  P(d,i,x,y) {1<=i, i<=63}
      d = quant_mat[i];
//  P(d,i,x,y) {1<=i, i<=63}
      y = (32*(x>=0?x:-x)+(d>>1))/d;
//  P(d,i,x,y) {1<=i, i<=63}
      /* round(32*x/quant_mat) */
      d = 3*mquant+2>>2;
//  P(d,i,x,y) {3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63}
      y = (y+d)/(2*mquant);
//  P(d,i,x,y) {3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63}
      /* (y+0.75*mquant) / (2*mquant) */
      /* clip to syntax limits */
      if (y>255)
//  P(d,i,x,y) {3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63, 256<=y}
         if (mpeg1)
//  P(d,i,x,y) {3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63, 256<=y}
            y = 255;
         else if (y>2047)
//  P(d,i,x,y) {mpeg1==0, 3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63,
//    2048<=y}
            y = 2047;
//  P(d,i,x,y) {3mquant<=4d+1, 4d<=3mquant+2, 1<=i, i<=63, y<=2047}
      dst[i] = x>=0?y:-y;
   }
//  P(d,i,x,y) {i==64, 3mquant<=4d+1, 4d<=3mquant+2, y<=2047}
   return 1;
}
//  P() {}
int quant_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i;
//  P(i) {}
   int x, y, d;
//  P(d,i,x,y) {}
   int nzflag;
//  P(d,i,nzflag,x,y) {}
   nzflag = 0;
//  P(d,i,nzflag,x,y) {nzflag==0}
   for(i = 0; i <= 63; i += 1) {
//  P(d,i,nzflag,x,y) {0<=i, i<=63}
      x = src[i];
//  P(d,i,nzflag,x,y) {0<=i, i<=63}
      d = quant_mat[i];
//  P(d,i,nzflag,x,y) {0<=i, i<=63}
      y = (32*(x>=0?x:-x)+(d>>1))/d;
//  P(d,i,nzflag,x,y) {0<=i, i<=63}
      /* round(32*x/quant_mat) */
      y /= 2*mquant;
//  P(d,i,nzflag,x,y) {0<=i, i<=63}
      /* clip to syntax limits */
      if (y>255)
//  P(d,i,nzflag,x,y) {0<=i, i<=63, 256<=y}
         if (mpeg1)
//  P(d,i,nzflag,x,y) {0<=i, i<=63, 256<=y}
            y = 255;
         else if (y>2047)
//  P(d,i,nzflag,x,y) {mpeg1==0, 0<=i, i<=63, 2048<=y}
            y = 2047;
//  P(d,i,nzflag,x,y) {0<=i, i<=63, y<=2047}
      if ((dst[i] = x>=0?y:-y)!=0)
//  P(d,i,nzflag,x,y) {0<=i, i<=63, y<=2047}
         nzflag = 1;
   }
//  P(d,i,nzflag,x,y) {i==64, y<=2047}
   return nzflag;
}
//  P() {}
static void iquant1_intra(short *src, short *dst, int dc_prec, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i, val;
//  P(i,val) {}
   dst[0] = src[0]<<3-dc_prec;
//  P(i,val) {}
   for(i = 1; i <= 63; i += 1) {
//  P(i,val) {1<=i, i<=63}
      val = (int) (src[i]*quant_mat[i]*mquant)/16;
//  P(i,val) {1<=i, i<=63}
      /* mismatch control */
      if ((val&1)==0&&val!=0)
//  P(i,val) {1<=i, i<=63}
         val += val>0?-1:1;
//  P(i,val) {1<=i, i<=63}
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
//  P() {}
static void iquant1_non_intra(short *src, short *dst, unsigned char *quant_mat, int mquant)
{
//  P() {}
   int i, val;
//  P(i,val) {}
   for(i = 0; i <= 63; i += 1) {
//  P(i,val) {0<=i, i<=63}
      val = src[i];
//  P(i,val) {0<=i, i<=63}
      if (val!=0) {
//  P(i,val) {0<=i, i<=63}
         val = (int) ((2*val+(val>0?1:-1))*quant_mat[i]*mquant)/32;
//  P(i,val) {0<=i, i<=63}
         /* mismatch control */
         if ((val&1)==0&&val!=0)
//  P(i,val) {0<=i, i<=63}
            val += val>0?-1:1;
      }
//  P(i,val) {0<=i, i<=63}
      /* saturation */
      dst[i] = val>2047?2047:val<-2048?-2048:val;
   }
}
//  P() {1<=M, 0<=fieldpic, fieldpic<=1, 0<=mpeg1, mpeg1<=1}
void range_checks(void)
{
//  P() {1<=M, 0<=fieldpic, fieldpic<=1, 0<=mpeg1, mpeg1<=1}
   int i;
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 0<=mpeg1, mpeg1<=1}
   /* range and value checks */
   if (horizontal_size<1||horizontal_size>16383)
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 0<=mpeg1, mpeg1<=1}
      error("horizontal_size must be between 1 and 16383");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
   if (mpeg1&&horizontal_size>4095)
//  P(i) {mpeg1==1, 1<=M, 0<=fieldpic, fieldpic<=1,
//    4096<=horizontal_size, horizontal_size<=16383}
      error("horizontal_size must be less than 4096 (MPEG-1)");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
   if ((horizontal_size&4095)==0)
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
      error("horizontal_size must not be a multiple of 4096");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
   if (chroma_format!=3&&horizontal_size%2!=0)
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
      error("horizontal_size must be a even (4:2:0 / 4:2:2)");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
   if (vertical_size<1||vertical_size>16383)
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1}
      error("vertical_size must be between 1 and 16383");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
   if (mpeg1&&vertical_size>4095)
//  P(i) {mpeg1==1, 1<=M, 0<=fieldpic, fieldpic<=1,
//    1<=horizontal_size, horizontal_size<=16383, 4096<=vertical_size,
//    vertical_size<=16383}
      error("vertical size must be less than 4096 (MPEG-1)");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
   if ((vertical_size&4095)==0)
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
      error("vertical_size must not be a multiple of 4096");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
   if (chroma_format==1&&vertical_size%2!=0)
//  P(i) {chroma_format==1, 1<=M, 0<=fieldpic, fieldpic<=1,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
      error("vertical_size must be a even (4:2:0)");
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
   if (fieldpic) {
//  P(i) {fieldpic==1, 1<=M, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
      if (vertical_size%2!=0)
//  P(i) {fieldpic==1, 1<=M, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
         error("vertical_size must be a even (field pictures)");
//  P(i) {fieldpic==1, 1<=M, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
      if (chroma_format==1&&vertical_size%4!=0)
//  P(i) {chroma_format==1, fieldpic==1, 1<=M, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
         error("vertical_size must be a multiple of 4 (4:2:0 field pictures)");
   }
//  P(i) {1<=M, 0<=fieldpic, fieldpic<=1, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vertical_size,
//    vertical_size<=16383}
   if (mpeg1) {
//  P(i) {mpeg1==1, 1<=M, 0<=fieldpic, fieldpic<=1,
//    1<=horizontal_size, horizontal_size<=16383, 1<=vertical_size,
//    vertical_size<=16383}
      if (aspectratio<1||aspectratio>14)
//  P(i) {mpeg1==1, 1<=M, 0<=fieldpic, fieldpic<=1,
//    1<=horizontal_size, horizontal_size<=16383, 1<=vertical_size,
//    vertical_size<=16383}
         error("pel_aspect_ratio must be between 1 and 14 (MPEG-1)");
   }
   else if (aspectratio<1||aspectratio>4)
//  P(i) {mpeg1==0, 1<=M, 0<=fieldpic, fieldpic<=1,
//    1<=horizontal_size, horizontal_size<=16383, 1<=vertical_size,
//    vertical_size<=16383}
      error("aspect_ratio_information must be 1, 2, 3 or 4");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=horizontal_size, horizontal_size<=16383,
//    0<=mpeg1, mpeg1<=1, 1<=vertical_size, vertical_size<=16383}
   if (frame_rate_code<1||frame_rate_code>8)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=horizontal_size, horizontal_size<=16383,
//    0<=mpeg1, mpeg1<=1, 1<=vertical_size, vertical_size<=16383}
      error("frame_rate code must be between 1 and 8");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
   if (bit_rate<=0.0)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
      error("bit_rate must be positive");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
   if (bit_rate>((1<<30)-1)*400.0)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
      error("bit_rate must be less than 429 Gbit/s");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
   if (mpeg1&&bit_rate>((1<<18)-1)*400.0)
//  P(i) {mpeg1==1, 1<=M, 1<=aspectratio, aspectratio<=14,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=vertical_size, vertical_size<=16383}
      error("bit_rate must be less than 104 Mbit/s (MPEG-1)");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
   if (vbv_buffer_size<1||vbv_buffer_size>0x3ffff)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vertical_size, vertical_size<=16383}
      error("vbv_buffer_size must be in range 1..(2^18-1)");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   if (mpeg1&&vbv_buffer_size>=1024)
//  P(i) {mpeg1==1, 1<=M, 1<=aspectratio, aspectratio<=14,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1024<=vbv_buffer_size, vbv_buffer_size<=262143,
//    1<=vertical_size, vertical_size<=16383}
      error("vbv_buffer_size must be less than 1024 (MPEG-1)");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
   if (chroma_format<1||chroma_format>3)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4, 0<=fieldpic,
//    fieldpic<=1, 1<=frame_rate_code, frame_rate_code<=8,
//    1<=horizontal_size, horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383}
      error("chroma_format must be in range 1...3");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
   if (video_format<0||video_format>4)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383}
      error("video_format must be in range 0...4");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
   if (color_primaries<1||color_primaries>7||color_primaries==3)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      error("color_primaries must be in range 1...2 or 4...7");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
   if (transfer_characteristics<1||transfer_characteristics>7||transfer_characteristics==3)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      error("transfer_characteristics must be in range 1...2 or 4...7");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (matrix_coefficients<1||matrix_coefficients>7||matrix_coefficients==3)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      error("matrix_coefficients must be in range 1...2 or 4...7");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (display_horizontal_size<0||display_horizontal_size>16383)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      error("display_horizontal_size must be in range 0...16383");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (display_vertical_size<0||display_vertical_size>16383)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      error("display_vertical_size must be in range 0...16383");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
   if (dc_prec<0||dc_prec>3)
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=display_horizontal_size,
//    display_horizontal_size<=16383, 0<=display_vertical_size,
//    display_vertical_size<=16383, 0<=fieldpic, fieldpic<=1,
//    1<=frame_rate_code, frame_rate_code<=8, 1<=horizontal_size,
//    horizontal_size<=16383, 1<=matrix_coefficients,
//    matrix_coefficients<=7, 0<=mpeg1, mpeg1<=1,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
      error("intra_dc_precision must be in range 0...3");
//  P(i) {1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
   for(i = 0; i <= M-1; i += 1) {
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (motion_data[i].forw_hor_f_code<1||motion_data[i].forw_hor_f_code>9)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         error("f_code must be between 1 and 9");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (motion_data[i].forw_vert_f_code<1||motion_data[i].forw_vert_f_code>9)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         error("f_code must be between 1 and 9");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (mpeg1&&motion_data[i].forw_hor_f_code>7)
//  P(i) {mpeg1==1, 1<=M, i+1<=M, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         error("f_code must be le less than 8");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (mpeg1&&motion_data[i].forw_vert_f_code>7)
//  P(i) {mpeg1==1, 1<=M, i+1<=M, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
         error("f_code must be le less than 8");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (motion_data[i].sxf<=0)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         error("search window must be positive");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      /* doesn't belong here */
      if (motion_data[i].syf<=0)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         error("search window must be positive");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    0<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
      if (i!=0) {
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (motion_data[i].back_hor_f_code<1||motion_data[i].back_hor_f_code>9)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            error("f_code must be between 1 and 9");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (motion_data[i].back_vert_f_code<1||motion_data[i].back_vert_f_code>9)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            error("f_code must be between 1 and 9");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (mpeg1&&motion_data[i].back_hor_f_code>7)
//  P(i) {mpeg1==1, 1<=M, i+1<=M, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            error("f_code must be le less than 8");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (mpeg1&&motion_data[i].back_vert_f_code>7)
//  P(i) {mpeg1==1, 1<=M, i+1<=M, 1<=aspectratio, aspectratio<=14,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7,
//    1<=transfer_characteristics, transfer_characteristics<=7,
//    1<=vbv_buffer_size, vbv_buffer_size<=262143, 1<=vertical_size,
//    vertical_size<=16383, 0<=video_format, video_format<=4}
            error("f_code must be le less than 8");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (motion_data[i].sxb<=0)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            error("search window must be positive");
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
         if (motion_data[i].syb<=0)
//  P(i) {1<=M, i+1<=M, 1<=aspectratio, aspectratio<=10mpeg1+4,
//    1<=chroma_format, chroma_format<=3, 1<=color_primaries,
//    color_primaries<=7, 0<=dc_prec, dc_prec<=3,
//    0<=display_horizontal_size, display_horizontal_size<=16383,
//    0<=display_vertical_size, display_vertical_size<=16383,
//    0<=fieldpic, fieldpic<=1, 1<=frame_rate_code,
//    frame_rate_code<=8, 1<=horizontal_size, horizontal_size<=16383,
//    1<=i, 1<=matrix_coefficients, matrix_coefficients<=7, 0<=mpeg1,
//    mpeg1<=1, 1<=transfer_characteristics,
//    transfer_characteristics<=7, 1<=vbv_buffer_size,
//    vbv_buffer_size<=262143, 1<=vertical_size, vertical_size<=16383,
//    0<=video_format, video_format<=4}
            error("search window must be positive");
      }
   }
}
//  P() {}
static void calc_actj(unsigned char *frame)
{
//  P() {}
   int i, j, k;
//  P(i,j,k) {}
   unsigned char *p;
//  P(i,j,k) {}
   double actj, var;
//  P(i,j,k) {}
   k = 0;
//  P(i,j,k) {k==0}
   for(j = 0; j <= height2-1; j += 16)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {0<=j}
      for(i = 0; i <= width-1; i += 16) {
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {0<=i}
         p = frame+(pict_struct==2?width:0)+i+width2*j;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {0<=i}
         /* take minimum spatial activity measure of luminance blocks */
         actj = var_sblk(p, width2);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {0<=i}
         var = var_sblk(p+8, width2);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         var = var_sblk(p+8*width2, width2);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         var = var_sblk(p+8*width2+8, width2);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         if (!fieldpic&&!prog_seq) {
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2)
//    {fieldpic<=0, prog_seq<=0}
            /* field */
            var = var_sblk(p, width<<1);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2)
//    {fieldpic<=0, prog_seq<=0}
            if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2)
//    {fieldpic<=0, prog_seq<=0}
               actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2)
//    {fieldpic<=0, prog_seq<=0}
            var = var_sblk(p+8, width<<1);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
               actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            var = var_sblk(p+width, width<<1);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
               actj = var;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            var = var_sblk(p+width+8, width<<1);
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
            if (var<actj)
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
               actj = var;
         }
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         actj += 1.0;
//  P(fieldpic,height2,i,j,k,pict_struct,prog_seq,width,width2) {}
         mbinfo[k++].act = actj;
      }
}
//  P() {}
static double var_sblk(unsigned char *p, int lx)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   unsigned int v, s, s2;
//  P(i,j,s,s2,v) {}
   s = s2 = 0;
//  P(i,j,s,s2,v) {s==0, s2==0}
   for(j = 0; j <= 7; j += 1) {
//  P(i,j,s,s2,v) {0<=j, j<=7, 0<=s2}
      for(i = 0; i <= 7; i += 1) {
//  P(i,j,s,s2,v) {0<=i, i<=7, 0<=j, j<=7, 0<=s2}
         v = *p++;
//  P(i,j,s,s2,v) {0<=i, i<=7, 0<=j, j<=7, 0<=s2}
         s += v;
//  P(i,j,s,s2,v) {0<=i, i<=7, 0<=j, j<=7, 0<=s2}
         s2 += v*v;
      }
//  P(i,j,s,s2,v) {i==8, 0<=j, j<=7, 0<=s2}
      p += lx-8;
   }
//  P(i,j,s,s2,v) {i==8, j==8, 0<=s2}
   return s2/64.0-s/64.0*s/64.0;
}
//  P() {0<=j, 1<=mb_height2, 1<=mb_width}
int rc_calc_mquant(int j)
{
//  P() {0<=j, 1<=mb_height2, 1<=mb_width}
   int mquant;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   double dj, Qj, actj, N_actj;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   /* measure virtual buffer discrepancy from uniform distribution model */
   dj = d+(bitcount()-S)-j*(T/(mb_width*mb_height2));
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   /* scale against dynamic range of mquant and the bits/picture count */
   Qj = dj*31.0/r;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   /*Qj = dj*(q_scale_type ? 56.0 : 31.0)/r;  */
   actj = mbinfo[j].act;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   actsum += actj;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   /* compute normalized activity */
   N_actj = (2.0*actj+avg_act)/(actj+2.0*avg_act);
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   if (q_scale_type) {
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(2.0*Qj*N_actj+0.5);
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
      /* clip mquant to legal (linear) range */
      if (mquant<1)
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width, mquant<=0}
         mquant = 1;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width, 1<=mquant}
      if (mquant>112)
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width, 113<=mquant}
         mquant = 112;
//  P(mquant) {0<=j, 1<=mb_height2, 1<=mb_width, 1<=mquant,
//    mquant<=112}
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width}
      /* modulate mquant with combined buffer and local activity measures */
      mquant = (int) floor(Qj*N_actj+0.5);
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width}
      mquant <<= 1;
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width}
      /* clip mquant to legal (linear) range */
      if (mquant<2)
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    mquant<=1}
         mquant = 2;
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    2<=mquant}
      if (mquant>62)
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    63<=mquant}
         mquant = 62;
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    2<=mquant, mquant<=62}
      /* ignore small changes in mquant */
      if (mquant>=8&&mquant-prev_mquant>=-4&&mquant-prev_mquant<=4)
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    8<=mquant, mquant<=62, prev_mquant<=mquant+4,
//    mquant<=prev_mquant+4}
         mquant = prev_mquant;
//  P(mquant) {q_scale_type==0, 0<=j, 1<=mb_height2, 1<=mb_width,
//    2<=mquant, mquant<=66}
      prev_mquant = mquant;
   }
//  P(mquant,prev_mquant) {0<=j, 1<=mb_height2, 1<=mb_width}
   Q += mquant;
//  P(Q,mquant,prev_mquant) {mquant+ratectl!:Q#init==Q, 0<=j,
//    1<=mb_height2, 1<=mb_width}
   /* for calculation of average mquant */
   /*
     fprintf(statfile,"rc_calc_mquant(%d): ",j);
     fprintf(statfile,"bitcount=%d, dj=%f, Qj=%f, actj=%f, N_actj=%f, mquant=%d\n",
       bitcount(),dj,Qj,actj,N_actj,mquant);
   */
   return mquant;
}
//  P() {}
void rc_init_GOP(int np, int nb)
{
//  P() {}
   R += (int) floor((1+np+nb)*bit_rate/frame_rate+0.5);
//  P(R) {}
   Np = fieldpic?2*np+1:np;
//  P(Np,R) {}
   Nb = fieldpic?2*nb:nb;
//  P(Nb,Np,R) {}
   fprintf(statfile, "\nrate control: new group of pictures (GOP)\n");
//  P(Nb,Np,R) {}
   fprintf(statfile, " target number of bits for GOP: R=%d\n", R);
//  P(Nb,Np,R) {}
   fprintf(statfile, " number of P pictures in GOP: Np=%d\n", Np);
//  P(Nb,Np,R) {}
   fprintf(statfile, " number of B pictures in GOP: Nb=%d\n", Nb);
}
//  P() {}
void rc_init_pict(unsigned char *frame)
{
//  P() {}
   double Tmin;
//  P() {}
   if (pict_type==1) goto _switch_1_case_1;
//  P() {}
   if (pict_type==2) goto _switch_1_case_2;
//  P() {}
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
//  P() {pict_type==3}
_switch_1_case_3:   ;
//  P() {pict_type==3}
   T = (int) floor(R/(Nb+Np*1.4*Xp/(1.0*Xb))+0.5);
//  P(T) {pict_type==3}
   d = d0b;
   goto _break_1;
//  P() {pict_type==2}
_switch_1_case_2:   ;
//  P() {pict_type==2}
   T = (int) floor(R/(Np+Nb*1.0*Xb/(1.4*Xp))+0.5);
//  P(T) {pict_type==2}
   d = d0p;
   goto _break_1;
//  P() {pict_type==1}
_switch_1_case_1:   ;
//  P() {pict_type==1}
   T = (int) floor(R/(1.0+Np*Xp/(Xi*1.0)+Nb*Xb/(Xi*1.4))+0.5);
//  P(T) {pict_type==1}
   d = d0i;
//  P(T,d) {}
_break_1:   ;
//  P(T,d) {}
   Tmin = (int) floor(bit_rate/(8.0*frame_rate)+0.5);
//  P(T,d) {}
   if (T<Tmin)
//  P(T,d) {}
      T = Tmin;
//  P(T,d) {}
   S = bitcount();
//  P(S,T,d) {}
   Q = 0;
//  P(Q,S,T,d) {Q==0}
   calc_actj(frame);
//  P(Nb,Np,Q,R,S,T,Xb,Xi,Xp,d,d0b,d0i,d0p,pict_type) {}
   actsum = 0.0;
//  P(Nb,Np,Q,R,S,T,Xb,Xi,Xp,d,d0b,d0i,d0p,pict_type) {}
   fprintf(statfile, "\nrate control: start of picture\n");
//  P(Nb,Np,Q,R,S,T,Xb,Xi,Xp,d,d0b,d0i,d0p,pict_type) {}
   fprintf(statfile, " target number of bits: T=%d\n", T);
}
//  P() {}
void rc_init_seq(void)
{
//  P() {}
   /* reaction parameter (constant) */
   if (r==0)
//  P() {r==0}
      r = (int) floor(2.0*bit_rate/frame_rate+0.5);
//  P(r) {}
   /* average activity */
   if (avg_act==0.0)
//  P(r) {}
      avg_act = 400.0;
//  P(r) {}
   /* remaining # of bits in GOP */
   R = 0;
//  P(R,r) {R==0}
   /* global complexity measure */
   if (Xi==0)
//  P(R,r) {R==0, Xi==0}
      Xi = (int) floor(160.0*bit_rate/115.0+0.5);
//  P(R,Xi,r) {R==0}
   if (Xp==0)
//  P(R,Xi,r) {R==0, Xp==0}
      Xp = (int) floor(60.0*bit_rate/115.0+0.5);
//  P(R,Xi,Xp,r) {R==0}
   if (Xb==0)
//  P(R,Xi,Xp,r) {R==0, Xb==0}
      Xb = (int) floor(42.0*bit_rate/115.0+0.5);
//  P(R,Xb,Xi,Xp,r) {R==0}
   /* virtual buffer fullness */
   if (d0i==0)
//  P(R,Xb,Xi,Xp,r) {R==0, d0i==0}
      d0i = (int) floor(10.0*r/31.0+0.5);
//  P(R,Xb,Xi,Xp,d0i,r) {R==0}
   if (d0p==0)
//  P(R,Xb,Xi,Xp,d0i,r) {R==0, d0p==0}
      d0p = (int) floor(10.0*r/31.0+0.5);
//  P(R,Xb,Xi,Xp,d0i,d0p,r) {R==0}
   if (d0b==0)
//  P(R,Xb,Xi,Xp,d0i,d0p,r) {R==0, d0b==0}
      d0b = (int) floor(1.4*10.0*r/31.0+0.5);
//  P(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
   /*
     if (d0i==0) d0i = (int)floor(10.0*r/(qscale_tab[0] ? 56.0 : 31.0) + 0.5);
     if (d0p==0) d0p = (int)floor(10.0*r/(qscale_tab[1] ? 56.0 : 31.0) + 0.5);
     if (d0b==0) d0b = (int)floor(1.4*10.0*r/(qscale_tab[2] ? 56.0 : 31.0) + 0.5);
   */
   fprintf(statfile, "\nrate control: sequence initialization\n");
//  P(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
   fprintf(statfile, " initial global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
//  P(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
   fprintf(statfile, " reaction parameter: r=%d\n", r);
//  P(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
   fprintf(statfile, " initial virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
//  P(R,Xb,Xi,Xp,d0b,d0i,d0p,r) {R==0}
   fprintf(statfile, " initial average activity: avg_act=%.1f\n", avg_act);
}
//  P() {}
int rc_start_mb(void)
{
//  P() {}
   int mquant;
//  P(mquant) {}
   if (q_scale_type) {
//  P(mquant) {}
      mquant = (int) floor(2.0*d*31.0/r+0.5);
//  P(mquant) {}
      /* clip mquant to legal (linear) range */
      if (mquant<1)
//  P(mquant) {mquant<=0}
         mquant = 1;
//  P(mquant) {1<=mquant}
      if (mquant>112)
//  P(mquant) {113<=mquant}
         mquant = 112;
//  P(mquant) {1<=mquant, mquant<=112}
      /* map to legal quantization level */
      mquant = non_linear_mquant_table[map_non_linear_mquant[mquant]];
   }
   else {
//  P(mquant) {q_scale_type==0}
      mquant = (int) floor(d*31.0/r+0.5);
//  P(mquant) {q_scale_type==0}
      mquant <<= 1;
//  P(mquant) {q_scale_type==0}
      /* clip mquant to legal (linear) range */
      if (mquant<2)
//  P(mquant) {q_scale_type==0, mquant<=1}
         mquant = 2;
//  P(mquant) {q_scale_type==0, 2<=mquant}
      if (mquant>62)
//  P(mquant) {q_scale_type==0, 63<=mquant}
         mquant = 62;
//  P(mquant) {q_scale_type==0, 2<=mquant, mquant<=62}
      prev_mquant = mquant;
   }
//  P(mquant,prev_mquant) {}
   /*
     fprintf(statfile,"rc_start_mb:\n");
     fprintf(statfile,"mquant=%d\n",mquant);
   */
   return mquant;
}
//  P() {}
void rc_update_pict(void)
{
//  P() {}
   double X;
//  P() {}
   S = bitcount()-S;
//  P(S) {S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   /* total # of bits in picture */
   R -= S;
//  P(R,S) {R+S==ratectl!:R#init,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   /* remaining # of bits in GOP */
   X = (int) floor(S*0.5*(double) Q/(mb_width*mb_height2)+0.5);
//  P(R,S) {R+S==ratectl!:R#init,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   d += S-T;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   avg_act = actsum/(mb_width*mb_height2);
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   if (pict_type==1) goto _switch_1_case_1;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   if (pict_type==2) goto _switch_1_case_2;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8}
   if (pict_type==3) {
   }
   else {
      goto _break_1;
   }
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==3}
_switch_1_case_3:   ;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==3}
   Xb = X;
//  P(R,S,Xb,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==3}
   d0b = d;
//  P(R,S,Xb,d,d0b) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8, d==d0b,
//    pict_type==3}
   Nb--;
   goto _break_1;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==2}
_switch_1_case_2:   ;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==2}
   Xp = X;
//  P(R,S,Xp,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==2}
   d0p = d;
//  P(R,S,Xp,d,d0p) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8, d==d0p,
//    pict_type==2}
   Np--;
   goto _break_1;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==1}
_switch_1_case_1:   ;
//  P(R,S,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==1}
   Xi = X;
//  P(R,S,Xi,d) {R+S==ratectl!:R#init, S+ratectl!:d#init==T+d,
//    S+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+8,
//    pict_type==1}
   d0i = d;
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
_break_1:   ;
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, "\nrate control: end of picture\n");
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " actual number of bits: S=%d\n", S);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " average quantization parameter Q=%.1f\n", (double) Q/(mb_width*mb_height2));
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " remaining number of bits in GOP: R=%d\n", R);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " global complexity measures (I,P,B): Xi=%d, Xp=%d, Xb=%d\n", Xi, Xp, Xb);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " virtual buffer fullness (I,P,B): d0i=%d, d0p=%d, d0b=%d\n", d0i, d0p, d0b);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " remaining number of P pictures in GOP: Np=%d\n", Np);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " remaining number of B pictures in GOP: Nb=%d\n", Nb);
//  P(Nb,Np,R,S,Xb,Xi,Xp,d,d0b,d0i,d0p) {R+S==ratectl!:R#init,
//    putbits!:outcnt+ratectl!:R#init+ratectl!:S#init==R+8
//    putbits!:bytecnt+8,
//    T+d+putbits!:outcnt+ratectl!:S#init==8putbits!:bytecnt+
//    ratectl!:d#init+8, ratectl!:Nb#init+ratectl!:Np#init<=Nb+Np+1,
//    Nb<=ratectl!:Nb#init, Np<=ratectl!:Np#init}
   fprintf(statfile, " average activity: avg_act=%.1f\n", avg_act);
}
//  P() {}
void readframe(char *fname, unsigned char *frame[])
{
//  P() {}
   if (inputtype==0) goto _switch_1_case_0;
//  P() {}
   if (inputtype==1) goto _switch_1_case_1;
//  P() {}
   if (inputtype==2) goto _switch_1_case_2;
//  P() {}
_switch_1_default:   ;
   goto _break_1;
//  P() {inputtype==2}
_switch_1_case_2:   ;
//  P() {inputtype==2}
   read_ppm(fname, frame);
   goto _break_1;
//  P() {inputtype==1}
_switch_1_case_1:   ;
//  P() {inputtype==1}
   read_yuv(fname, frame);
   goto _break_1;
//  P() {inputtype==0}
_switch_1_case_0:   ;
//  P() {inputtype==0}
   read_y_u_v(fname, frame);
//  P(chrom_height,chrom_width,chroma_format,height,horizontal_size,
//    inputtype,matrix_coefficients,mpeg1,prog_frame,vertical_size,
//    width) {}
_break_1:   ;
}
//  P() {}
static void border_extend(unsigned char *frame, int w1, int h1, int w2, int h2)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   unsigned char *fp;
//  P(i,j) {}
   /* horizontal pixel replication (right border) */
   for(j = 0; j <= h1-1; j += 1) {
//  P(i,j) {j+1<=h1, 0<=j}
      fp = frame+j*w2;
//  P(i,j) {j+1<=h1, 0<=j}
      for(i = w1; i <= w2-1; i += 1)
//  P(i,j) {j+1<=h1, w1<=i, i+1<=w2, 0<=j}
         fp[i] = fp[i-1];
   }
//  P(i,j) {h1<=j, 0<=j}
   /* vertical pixel replication (bottom border) */
   for(j = h1; j <= h2-1; j += 1) {
//  P(i,j) {h1<=j, j+1<=h2}
      fp = frame+j*w2;
//  P(i,j) {h1<=j, j+1<=h2}
      for(i = 0; i <= w2-1; i += 1)
//  P(i,j) {h1<=j, j+1<=h2, 0<=i, i+1<=w2}
         fp[i] = fp[i-w2];
   }
}
//  P() {}
static void conv422to420(unsigned char *src, unsigned char *dst)
{
//  P() {}
   int w, i, j, jm6, jm5, jm4, jm3, jm2, jm1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,w) {}
   int jp1, jp2, jp3, jp4, jp5, jp6;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w) {}
   w = width>>1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {2w<=width, width<=2w+1}
   if (prog_frame)
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {2w<=width, width<=2w+1}
      /* intra frame */
      for(i = 0; i <= w-1; i += 1) {
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w) {0<=i,
//    i+1<=w, 2w<=width, width<=2w+1}
         for(j = 0; j <= height-1; j += 2) {
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, 2w<=width, width<=2w+1}
            jm5 = j<5?0:j-5;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm5+5, 0<=jm5, 2w<=width,
//    width<=2w+1}
            jm4 = j<4?0:j-4;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm4+4, j<=jm5+5, 0<=jm4,
//    0<=jm5, 2w<=width, width<=2w+1}
            jm3 = j<3?0:j-3;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm3+3, j<=jm4+4, j<=jm5+5,
//    0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jm2 = j<2?0:j-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm2+2, j<=jm3+3, j<=jm4+4,
//    j<=jm5+5, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width,
//    width<=2w+1}
            jm1 = j<1?0:j-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+1, j<=jm2+2, j<=jm3+3,
//    j<=jm4+4, j<=jm5+5, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    2w<=width, width<=2w+1}
            jp1 = j<height-1?j+1:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+1,
//    j<=jm2+2, j<=jm3+3, j<=jm4+4, j<=jm5+5, jp1<=j+1, 0<=jm1,
//    0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp2 = j<height-2?j+2:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, jp2+1<=height, 0<=i, i+1<=w, 0<=j,
//    j<=jm1+1, j<=jm2+2, j<=jm3+3, j<=jm4+4, j<=jm5+5, jp1<=j+1,
//    jp2<=j+2, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width,
//    width<=2w+1}
            jp3 = j<height-3?j+3:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, jp2+1<=height, jp3+1<=height, 0<=i,
//    i+1<=w, 0<=j, j<=jm1+1, j<=jm2+2, j<=jm3+3, j<=jm4+4, j<=jm5+5,
//    jp1<=j+1, jp2<=j+2, jp3<=j+3, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4,
//    0<=jm5, 2w<=width, width<=2w+1}
            jp4 = j<height-4?j+4:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, jp2+1<=height, jp3+1<=height,
//    jp4+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+1, j<=jm2+2, j<=jm3+3,
//    j<=jm4+4, j<=jm5+5, jp1<=j+1, jp2<=j+2, jp3<=j+3, jp4<=j+4,
//    0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp5 = j<height-5?j+5:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, jp2+1<=height, jp3+1<=height,
//    jp4+1<=height, jp5+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+1,
//    j<=jm2+2, j<=jm3+3, j<=jm4+4, j<=jm5+5, jp1<=j+1, jp2<=j+2,
//    jp3<=j+3, jp4<=j+4, jp5<=j+5, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4,
//    0<=jm5, 2w<=width, width<=2w+1}
            jp6 = j<height-5?j+6:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {j+1<=height, jp1+1<=height, jp2+1<=height, jp3+1<=height,
//    jp4+1<=height, jp5+1<=height, jp6<=height, 0<=i, i+1<=w, 0<=j,
//    j<=jm1+1, j<=jm2+2, j<=jm3+3, j<=jm4+4, j<=jm5+5, jp1<=j+1,
//    jp2<=j+2, jp3<=j+3, jp4<=j+4, jp5<=j+5, jp6<=j+6, 0<=jm1,
//    0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            /* FIR filter with 0.5 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (228*(src[w*j]+src[w*jp1])+70*(src[w*jm1]+src[w*jp2])-37*(src[w*jm2]+src[w*jp3])-21*(src[w*jm3]+src[w*jp4])+11*(src[w*jm4]+src[w*jp5])+5*(src[w*jm5]+src[w*jp6])+256)>>9];
         }
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {height<=j, 0<=i, i+1<=w, 0<=j, 2w<=width, width<=2w+1}
         src++;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {height<=j, 0<=i, i+1<=w, 0<=j, 2w<=width, width<=2w+1}
         dst++;
      }
   else
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, 2w<=width, width<=2w+1}
      /* intra field */
      for(i = 0; i <= w-1; i += 1) {
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, 0<=i, i+1<=w, 2w<=width, width<=2w+1}
         for(j = 0; j <= height-1; j += 4) {
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, 2w<=width,
//    width<=2w+1}
            /* top field */
            jm5 = j<10?0:j-10;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm5+10,
//    0<=jm5, 2w<=width, width<=2w+1}
            jm4 = j<8?0:j-8;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm4+8,
//    j<=jm5+10, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jm3 = j<6?0:j-6;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm3+6,
//    j<=jm4+8, j<=jm5+10, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width,
//    width<=2w+1}
            jm2 = j<4?0:j-4;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm2+4,
//    j<=jm3+6, j<=jm4+8, j<=jm5+10, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    2w<=width, width<=2w+1}
            jm1 = j<2?0:j-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+2,
//    j<=jm2+4, j<=jm3+6, j<=jm4+8, j<=jm5+10, 0<=jm1, 0<=jm2, 0<=jm3,
//    0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp1 = j<height-2?j+2:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, 0<=i, i+1<=w, 0<=j,
//    j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8, j<=jm5+10, jp1<=j+2,
//    0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp2 = j<height-4?j+4:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height, 0<=i,
//    i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8, j<=jm5+10,
//    jp1<=j+2, jp2<=j+4, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    2w<=width, width<=2w+1}
            jp3 = j<height-6?j+6:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6,
//    j<=jm4+8, j<=jm5+10, jp1<=j+2, jp2<=j+4, jp3<=j+6, 0<=jm1,
//    0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp4 = j<height-8?j+8:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, 0<=i, i+1<=w, 0<=j, j<=jm1+2,
//    j<=jm2+4, j<=jm3+6, j<=jm4+8, j<=jm5+10, jp1<=j+2, jp2<=j+4,
//    jp3<=j+6, jp4<=j+8, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    2w<=width, width<=2w+1}
            jp5 = j<height-10?j+10:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, 0<=i, i+1<=w, 0<=j,
//    j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8, j<=jm5+10, jp1<=j+2,
//    jp2<=j+4, jp3<=j+6, jp4<=j+8, jp5<=j+10, 0<=jm1, 0<=jm2, 0<=jm3,
//    0<=jm4, 0<=jm5, 2w<=width, width<=2w+1}
            jp6 = j<height-12?j+12:height-2;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8,
//    j<=jm5+10, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8, jp5<=j+10,
//    jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width,
//    width<=2w+1}
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*(j>>1)] = clp[(int) (8*src[w*jm5]+5*src[w*jm4]-30*src[w*jm3]-18*src[w*jm2]+113*src[w*jm1]+242*src[w*j]+192*src[w*jp1]+35*src[w*jp2]-38*src[w*jp3]-10*src[w*jp4]+11*src[w*jp5]+2*src[w*jp6]+256)>>9];
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8,
//    j<=jm5+10, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8, jp5<=j+10,
//    jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5, 2w<=width,
//    width<=2w+1}
            /* bottom field */
            jm6 = j<9?1:j-9;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8,
//    j<=jm5+10, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8,
//    jp5<=j+10, jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jm5 = j<7?1:j-7;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+8,
//    j<=jm5+7, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8,
//    jp5<=j+10, jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jm4 = j<5?1:j-5;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+6, j<=jm4+5,
//    j<=jm5+7, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8,
//    jp5<=j+10, jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jm3 = j<3?1:j-3;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+4, j<=jm3+3, j<=jm4+5,
//    j<=jm5+7, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8,
//    jp5<=j+10, jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jm2 = j<1?1:j-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jp1+1<=height, jp2+1<=height,
//    jp3+1<=height, jp4+1<=height, jp5+1<=height, jp6+1<=height,
//    0<=i, i+1<=w, 0<=j, j<=jm1+2, j<=jm2+1, j<=jm3+3, j<=jm4+5,
//    j<=jm5+7, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6, jp4<=j+8,
//    jp5<=j+10, jp6<=j+12, 0<=jm1, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jm1 = j<height-1?j+1:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+2, jp2<=j+4, jp3<=j+6,
//    jp4<=j+8, jp5<=j+10, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp1 = j<height-3?j+3:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+4, jp3<=j+6,
//    jp4<=j+8, jp5<=j+10, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp2 = j<height-5?j+5:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+5, jp3<=j+6,
//    jp4<=j+8, jp5<=j+10, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp3 = j<height-7?j+7:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+5, jp3<=j+7,
//    jp4<=j+8, jp5<=j+10, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp4 = j<height-9?j+9:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+5, jp3<=j+7,
//    jp4<=j+9, jp5<=j+10, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp5 = j<height-11?j+11:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+5, jp3<=j+7,
//    jp4<=j+9, jp5<=j+11, jp6<=j+12, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            jp6 = j<height-13?j+13:height-1;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, j+1<=height, jm1+1<=height, jp1+1<=height,
//    jp2+1<=height, jp3+1<=height, jp4+1<=height, jp5+1<=height,
//    jp6+1<=height, 0<=i, i+1<=w, 0<=j, jm1<=j+1, j<=jm2+1, j<=jm3+3,
//    j<=jm4+5, j<=jm5+7, j<=jm6+9, jp1<=j+3, jp2<=j+5, jp3<=j+7,
//    jp4<=j+9, jp5<=j+11, jp6<=j+13, 0<=jm2, 0<=jm3, 0<=jm4, 0<=jm5,
//    0<=jm6, 2w<=width, width<=2w+1}
            /* FIR filter with 0.25 sample interval phase shift */
            dst[w*((j>>1)+1)] = clp[(int) (8*src[w*jp6]+5*src[w*jp5]-30*src[w*jp4]-18*src[w*jp3]+113*src[w*jp2]+242*src[w*jp1]+192*src[w*jm1]+35*src[w*jm2]-38*src[w*jm3]-10*src[w*jm4]+11*src[w*jm5]+2*src[w*jm6]+256)>>9];
         }
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, height<=j, 0<=i, i+1<=w, 0<=j, 2w<=width,
//    width<=2w+1}
         src++;
//  P(i,j,jm1,jm2,jm3,jm4,jm5,jm6,jp1,jp2,jp3,jp4,jp5,jp6,w)
//    {prog_frame==0, height<=j, 0<=i, i+1<=w, 0<=j, 2w<=width,
//    width<=2w+1}
         dst++;
      }
}
//  P() {}
static void conv444to422(unsigned char *src, unsigned char *dst)
{
//  P() {}
   int i, j, im5, im4, im3, im2, im1, ip1, ip2, ip3, ip4, ip5, ip6;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {}
   if (mpeg1)
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {}
      for(j = 0; j <= height-1; j += 1) {
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=j}
         for(i = 0; i <= width-1; i += 2) {
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i+1<=width, 0<=j}
            im5 = i<5?0:i-5;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im5+5, i+1<=width, 0<=im5, 0<=j}
            im4 = i<4?0:i-4;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im4+4, i<=im5+5, i+1<=width, 0<=im4, 0<=im5, 0<=j}
            im3 = i<3?0:i-3;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im3+3, i<=im4+4, i<=im5+5, i+1<=width, 0<=im3, 0<=im4,
//    0<=im5, 0<=j}
            im2 = i<2?0:i-2;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5, i+1<=width,
//    0<=im2, 0<=im3, 0<=im4, 0<=im5, 0<=j}
            im1 = i<1?0:i-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    i+1<=width, 0<=im1, 0<=im2, 0<=im3, 0<=im4, 0<=im5, 0<=j}
            ip1 = i<width-1?i+1:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, i+1<=width, 0<=im1, 0<=im2, 0<=im3, 0<=im4, 0<=im5,
//    ip1+1<=width, 0<=j}
            ip2 = i<width-2?i+2:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, ip2<=i+2, i+1<=width, 0<=im1, 0<=im2, 0<=im3, 0<=im4,
//    0<=im5, ip1+1<=width, ip2+1<=width, 0<=j}
            ip3 = i<width-3?i+3:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, ip2<=i+2, ip3<=i+3, i+1<=width, 0<=im1, 0<=im2,
//    0<=im3, 0<=im4, 0<=im5, ip1+1<=width, ip2+1<=width,
//    ip3+1<=width, 0<=j}
            ip4 = i<width-4?i+4:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, ip2<=i+2, ip3<=i+3, ip4<=i+4, i+1<=width, 0<=im1,
//    0<=im2, 0<=im3, 0<=im4, 0<=im5, ip1+1<=width, ip2+1<=width,
//    ip3+1<=width, ip4+1<=width, 0<=j}
            ip5 = i<width-5?i+5:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, ip2<=i+2, ip3<=i+3, ip4<=i+4, ip5<=i+5, i+1<=width,
//    0<=im1, 0<=im2, 0<=im3, 0<=im4, 0<=im5, ip1+1<=width,
//    ip2+1<=width, ip3+1<=width, ip4+1<=width, ip5+1<=width, 0<=j}
            ip6 = i<width-5?i+6:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, i<=im1+1, i<=im2+2, i<=im3+3, i<=im4+4, i<=im5+5,
//    ip1<=i+1, ip2<=i+2, ip3<=i+3, ip4<=i+4, ip5<=i+5, ip6<=i+6,
//    i+1<=width, 0<=im1, 0<=im2, 0<=im3, 0<=im4, 0<=im5,
//    ip1+1<=width, ip2+1<=width, ip3+1<=width, ip4+1<=width,
//    ip5+1<=width, ip6<=width, 0<=j}
            /* FIR filter with 0.5 sample interval phase shift */
            dst[i>>1] = clp[(int) (228*(src[i]+src[ip1])+70*(src[im1]+src[ip2])-37*(src[im2]+src[ip3])-21*(src[im3]+src[ip4])+11*(src[im4]+src[ip5])+5*(src[im5]+src[ip6])+256)>>9];
         }
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, width<=i, 0<=j}
         src += width;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {j+1<=height,
//    0<=i, width<=i, 0<=j}
         dst += width>>1;
      }
   else
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0}
      /* MPEG-2 */
      for(j = 0; j <= height-1; j += 1) {
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=j}
         for(i = 0; i <= width-1; i += 2) {
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i+1<=width, 0<=j}
            im5 = i<5?0:i-5;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im5+5, i+1<=width, 0<=im5, 0<=j}
            im3 = i<3?0:i-3;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im3+3, i<=im5+5, i+1<=width, 0<=im3,
//    0<=im5, 0<=j}
            im1 = i<1?0:i-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im1+1, i<=im3+3, i<=im5+5, i+1<=width,
//    0<=im1, 0<=im3, 0<=im5, 0<=j}
            ip1 = i<width-1?i+1:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im1+1, i<=im3+3, i<=im5+5, ip1<=i+1,
//    i+1<=width, 0<=im1, 0<=im3, 0<=im5, ip1+1<=width, 0<=j}
            ip3 = i<width-3?i+3:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im1+1, i<=im3+3, i<=im5+5, ip1<=i+1,
//    ip3<=i+3, i+1<=width, 0<=im1, 0<=im3, 0<=im5, ip1+1<=width,
//    ip3+1<=width, 0<=j}
            ip5 = i<width-5?i+5:width-1;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, i<=im1+1, i<=im3+3, i<=im5+5, ip1<=i+1,
//    ip3<=i+3, ip5<=i+5, i+1<=width, 0<=im1, 0<=im3, 0<=im5,
//    ip1+1<=width, ip3+1<=width, ip5+1<=width, 0<=j}
            /* FIR filter coefficients (*512): 22 0 -52 0 159 256 159 0 -52 0 22 */
            dst[i>>1] = clp[(int) (22*(src[im5]+src[ip5])-52*(src[im3]+src[ip3])+159*(src[im1]+src[ip1])+256*src[i]+256)>>9];
         }
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, width<=i, 0<=j}
         src += width;
//  P(i,im1,im2,im3,im4,im5,ip1,ip2,ip3,ip4,ip5,ip6,j) {mpeg1==0,
//    j+1<=height, 0<=i, width<=i, 0<=j}
         dst += width>>1;
      }
}
//  P() {}
static void read_ppm(char *fname, unsigned char *frame[])
{
//  P() {}
   int i, j;
//  P(i,j) {}
   int r, g, b;
//  P(b,g,i,j,r) {}
   double y, u, v;
//  P(b,g,i,j,r) {}
   double cr, cg, cb, cu, cv;
//  P(b,g,i,j,r) {}
   char name[128];
//  P(b,g,i,j,r) {}
   FILE *fd;
//  P(b,g,i,j,r) {}
   unsigned char *yp, *up, *vp;
//  P(b,g,i,j,r) {}
   static unsigned char *u444, *v444, *u422, *v422;
   /* ITU-R Rec. 709 (1990) */
   /* unspecified */
   /* reserved */
   /* FCC */
   /* ITU-R Rec. 624-4 System B, G */
   /* SMPTE 170M */
//  P(b,g,i,j,r) {}
   static double coef[7][3] = {{0.2125, 0.7154, 0.0721}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.30, 0.59, 0.11}, {0.299, 0.587, 0.114}, {0.299, 0.587, 0.114}, {0.212, 0.701, 0.087}};
//  P(b,g,i,j,r) {}
   /* SMPTE 240M (1987) */
   i = matrix_coefficients;
//  P(b,g,i,j,r) {i==matrix_coefficients}
   if (i>8)
//  P(b,g,i,j,r) {i==matrix_coefficients, 9<=i}
      i = 3;
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   cr = coef[i-1][0];
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   cg = coef[i-1][1];
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   cb = coef[i-1][2];
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   cu = 0.5/(1.0-cb);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   cv = 0.5/(1.0-cr);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   if (chroma_format==3) {
//  P(b,g,i,j,r) {chroma_format==3, i<=8, i<=matrix_coefficients}
      u444 = frame[1];
//  P(b,g,i,j,r) {chroma_format==3, i<=8, i<=matrix_coefficients}
      v444 = frame[2];
   }
   else if (!u444) {
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
      if (!(u444 = (unsigned char *) malloc(width*height)))
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
         error("malloc failed");
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
      if (!(v444 = (unsigned char *) malloc(width*height)))
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
         error("malloc failed");
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
      if (chroma_format==1) {
//  P(b,g,i,j,r) {chroma_format==1, i<=8, i<=matrix_coefficients}
         if (!(u422 = (unsigned char *) malloc((width>>1)*height)))
//  P(b,g,i,j,r) {chroma_format==1, i<=8, i<=matrix_coefficients}
            error("malloc failed");
//  P(b,g,i,j,r) {chroma_format==1, i<=8, i<=matrix_coefficients}
         if (!(v422 = (unsigned char *) malloc((width>>1)*height)))
//  P(b,g,i,j,r) {chroma_format==1, i<=8, i<=matrix_coefficients}
            error("malloc failed");
      }
   }
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   sprintf(name, "%s.ppm", fname);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   if (!(fd = fopen(name, "rb"))) {
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
      sprintf(errortext, "Couldn't open %s\n", name);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
      error(errortext);
   }
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   /* skip header */
   _IO_getc(fd);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   _IO_getc(fd);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   /* magic number (P6) */
   pbm_getint(fd);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   pbm_getint(fd);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   pbm_getint(fd);
//  P(b,g,i,j,r) {i<=8, i<=matrix_coefficients}
   /* width height maxcolors */
   for(i = 0; i <= vertical_size-1; i += 1) {
//  P(b,g,i,j,r) {0<=i, i+1<=vertical_size}
      yp = frame[0]+i*width;
//  P(b,g,i,j,r) {0<=i, i+1<=vertical_size}
      up = u444+i*width;
//  P(b,g,i,j,r) {0<=i, i+1<=vertical_size}
      vp = v444+i*width;
//  P(b,g,i,j,r) {0<=i, i+1<=vertical_size}
      for(j = 0; j <= horizontal_size-1; j += 1) {
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         r = _IO_getc(fd);
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         g = _IO_getc(fd);
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         b = _IO_getc(fd);
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         /* convert to YUV */
         y = cr*r+cg*g+cb*b;
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         u = cu*(b-y);
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         v = cv*(r-y);
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         yp[j] = 219.0/256.0*y+16.5;
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         /* nominal range: 16..235 */
         up[j] = 224.0/256.0*u+128.5;
//  P(b,g,i,j,r) {j+1<=horizontal_size, 0<=i, i+1<=vertical_size,
//    0<=j}
         /* 16..240 */
         vp[j] = 224.0/256.0*v+128.5;
      }
   }
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   fclose(fd);
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   border_extend(u444, horizontal_size, vertical_size, width, height);
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   border_extend(v444, horizontal_size, vertical_size, width, height);
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   if (chroma_format==2) {
//  P(b,g,i,j,r) {chroma_format==2, 0<=i, vertical_size<=i}
      conv444to422(u444, frame[1]);
//  P(b,g,i,j,r) {chroma_format==2, 0<=i, vertical_size<=i}
      conv444to422(v444, frame[2]);
   }
//  P(b,g,i,j,r) {0<=i, vertical_size<=i}
   if (chroma_format==1) {
//  P(b,g,i,j,r) {chroma_format==1, 0<=i, vertical_size<=i}
      conv444to422(u444, u422);
//  P(b,g,i,j,r) {chroma_format==1, 0<=i, vertical_size<=i}
      conv444to422(v444, v422);
//  P(b,g,i,j,r) {chroma_format==1, 0<=i, vertical_size<=i}
      conv422to420(u422, frame[1]);
//  P(b,g,i,j,r) {chroma_format==1, 0<=i, vertical_size<=i}
      conv422to420(v422, frame[2]);
   }
}
//  P() {}
static void read_y_u_v(char *fname, unsigned char *frame[])
{
//  P() {}
   int i;
//  P(i) {}
   int chrom_hsize, chrom_vsize;
//  P(chrom_hsize,chrom_vsize,i) {}
   char name[128];
//  P(chrom_hsize,chrom_vsize,i) {}
   FILE *fd;
//  P(chrom_hsize,chrom_vsize,i) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  P(chrom_hsize,chrom_vsize,i) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  P(chrom_hsize,chrom_vsize,i) {}
   sprintf(name, "%s.Y", fname);
//  P(chrom_hsize,chrom_vsize,i) {}
   if (!(fd = fopen(name, "rb"))) {
//  P(chrom_hsize,chrom_vsize,i) {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  P(chrom_hsize,chrom_vsize,i) {}
      error(errortext);
   }
//  P(chrom_hsize,chrom_vsize,i) {}
   for(i = 0; i <= vertical_size-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[0]+i*width, 1, horizontal_size, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   fclose(fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   sprintf(name, "%s.U", fname);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   if (!(fd = fopen(name, "rb"))) {
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      error(errortext);
   }
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   fclose(fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   sprintf(name, "%s.V", fname);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   if (!(fd = fopen(name, "rb"))) {
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
      error(errortext);
   }
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   fclose(fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
}
//  P() {}
static void read_yuv(char *fname, unsigned char *frame[])
{
//  P() {}
   int i;
//  P(i) {}
   int chrom_hsize, chrom_vsize;
//  P(chrom_hsize,chrom_vsize,i) {}
   char name[128];
//  P(chrom_hsize,chrom_vsize,i) {}
   FILE *fd;
//  P(chrom_hsize,chrom_vsize,i) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  P(chrom_hsize,chrom_vsize,i) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  P(chrom_hsize,chrom_vsize,i) {}
   sprintf(name, "%s.yuv", fname);
//  P(chrom_hsize,chrom_vsize,i) {}
   if (!(fd = fopen(name, "rb"))) {
//  P(chrom_hsize,chrom_vsize,i) {}
      sprintf(errortext, "Couldn't open %s\n", name);
//  P(chrom_hsize,chrom_vsize,i) {}
      error(errortext);
   }
//  P(chrom_hsize,chrom_vsize,i) {}
   /* Y */
   for(i = 0; i <= vertical_size-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[0]+i*width, 1, horizontal_size, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[0], horizontal_size, vertical_size, width, height);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   /* Cb */
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[1]+i*chrom_width, 1, chrom_hsize, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[1], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   /* Cr */
   for(i = 0; i <= chrom_vsize-1; i += 1)
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {0<=i}
      fread(frame[2]+i*chrom_width, 1, chrom_hsize, fd);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   border_extend(frame[2], chrom_hsize, chrom_vsize, chrom_width, chrom_height);
//  P(chrom_height,chrom_hsize,chrom_vsize,chrom_width,chroma_format,
//    height,horizontal_size,i,vertical_size,width) {}
   fclose(fd);
}
//  P() {}
void stats(void)
{
//  P() {}
   int i, j, k, nmb, mb_type;
//  P(i,j,k,mb_type,nmb) {}
   int n_skipped, n_intra, n_ncoded, n_blocks, n_interp, n_forward, n_backward;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {}
   struct mbinfo *mbi;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {}
   nmb = mb_width*mb_height2;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {}
   n_skipped = n_intra = n_ncoded = n_blocks = n_interp = n_forward = n_backward = 0;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward==0, n_blocks==0,
//    n_forward==0, n_interp==0, n_intra==0, n_ncoded==0,
//    n_skipped==0}
   for(k = 0; k <= nmb-1; k += 1) {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=k, n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
      mbi = mbinfo+k;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=k, n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
      if (mbi->skipped)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=k, n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         n_skipped++;
      else if (mbi->mb_type&1)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=k, n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         n_intra++;
      else if (!(mbi->mb_type&2))
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=k, n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         n_ncoded++;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
      for(i = 0; i <= block_count-1; i += 1)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {i+1<=block_count, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         if (mbi->cbp&1<<i)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {i+1<=block_count, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
            n_blocks++;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {block_count<=i, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
      if (mbi->mb_type&8)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {block_count<=i, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         if (mbi->mb_type&4)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {block_count<=i, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
            n_interp++;
         else
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {block_count<=i, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
            n_forward++;
      else if (mbi->mb_type&4)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {block_count<=i, 0<=i,
//    n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k+1, k+1<=nmb, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
         n_backward++;
   }
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, "\npicture statistics:\n");
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of intra coded macroblocks:  %4d (%.1f%%)\n", n_intra, 100.0*(double) n_intra/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of coded blocks:             %4d (%.1f%%)\n", n_blocks, 100.0*(double) n_blocks/(block_count*nmb));
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of not coded macroblocks:    %4d (%.1f%%)\n", n_ncoded, 100.0*(double) n_ncoded/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of skipped macroblocks:      %4d (%.1f%%)\n", n_skipped, 100.0*(double) n_skipped/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of forw. pred. macroblocks:  %4d (%.1f%%)\n", n_forward, 100.0*(double) n_forward/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of backw. pred. macroblocks: %4d (%.1f%%)\n", n_backward, 100.0*(double) n_backward/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, " # of interpolated macroblocks: %4d (%.1f%%)\n", n_interp, 100.0*(double) n_interp/nmb);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   fprintf(statfile, "\nmacroblock_type map:\n");
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {n_backward+n_forward+n_interp<=k,
//    n_intra+n_ncoded+n_skipped<=k, nmb<=k, 0<=n_backward,
//    0<=n_blocks, 0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   k = 0;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {k==0, 0<=n_backward, 0<=n_blocks,
//    0<=n_forward, 0<=n_interp, 0<=n_intra, 0<=n_ncoded,
//    0<=n_skipped}
   for(j = 0; j <= mb_height2-1; j += 1) {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=j, j+1<=mb_height2, 0<=k,
//    0<=n_backward, 0<=n_blocks, 0<=n_forward, 0<=n_interp,
//    0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
      for(i = 0; i <= mb_width-1; i += 1) {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         mbi = mbinfo+k;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         mb_type = mbi->mb_type;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         if (mbi->skipped)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc('S', statfile);
         else if (mb_type&1)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc('I', statfile);
         else {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            if ((mb_type&(8|4))==8) goto _switch_5_case_8;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            if ((mb_type&(8|4))==4) goto _switch_5_case_4;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            if ((mb_type&(8|4))==(8|4)) goto _switch_5_case_12;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
_switch_5_default:            ;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc('0', statfile);
            goto _break_5;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
_switch_5_case_12:            ;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc(mbi->motion_type==1?'d':'D', statfile);
            goto _break_5;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
_switch_5_case_4:            ;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc(mbi->motion_type==1?'b':'B', statfile);
            goto _break_5;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
_switch_5_case_8:            ;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc(mbi->motion_type==1?'f':mbi->motion_type==3?'p':'F', statfile);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
_break_5:            ;
         }
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         if (mb_type&16)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc('Q', statfile);
         else if (mb_type&(2|1))
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc(' ', statfile);
         else
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            _IO_putc('N', statfile);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         _IO_putc(' ', statfile);
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         k++;
      }
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, mb_width<=i, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
      _IO_putc('\n', statfile);
   }
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=j, mb_height2<=j, 0<=k,
//    0<=n_backward, 0<=n_blocks, 0<=n_forward, 0<=n_interp,
//    0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
   fprintf(statfile, "\nmquant map:\n");
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=j, mb_height2<=j, 0<=k,
//    0<=n_backward, 0<=n_blocks, 0<=n_forward, 0<=n_interp,
//    0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
   k = 0;
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {k==0, 0<=j, mb_height2<=j,
//    0<=n_backward, 0<=n_blocks, 0<=n_forward, 0<=n_interp,
//    0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
   for(j = 0; j <= mb_height2-1; j += 1) {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=j, j+1<=mb_height2, 0<=k,
//    0<=n_backward, 0<=n_blocks, 0<=n_forward, 0<=n_interp,
//    0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
      for(i = 0; i <= mb_width-1; i += 1) {
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         if (i==0||mbinfo[k].mquant!=mbinfo[k-1].mquant)
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            fprintf(statfile, "%3d", mbinfo[k].mquant);
         else
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {1<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
            fprintf(statfile, "   ");
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, i+1<=mb_width, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
         k++;
      }
//  P(i,j,k,mb_type,n_backward,n_blocks,n_forward,n_interp,n_intra,
//    n_ncoded,n_skipped,nmb) {0<=i, i<=k, mb_width<=i, 0<=j,
//    j+1<=mb_height2, 0<=n_backward, 0<=n_blocks, 0<=n_forward,
//    0<=n_interp, 0<=n_intra, 0<=n_ncoded, 0<=n_skipped}
      _IO_putc('\n', statfile);
   }
}
//  P() {}
static void calcSNR1(unsigned char *org, unsigned char *rec, int lx, int w, int h, double *pv, double *pe)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   double v1, s1, s2, e2;
//  P(i,j) {}
   s1 = s2 = e2 = 0.0;
//  P(i,j) {}
   for(j = 0; j <= h-1; j += 1) {
//  P(i,j) {j+1<=h, 0<=j}
      for(i = 0; i <= w-1; i += 1) {
//  P(i,j) {j+1<=h, 0<=i, i+1<=w, 0<=j}
         v1 = org[i];
//  P(i,j) {j+1<=h, 0<=i, i+1<=w, 0<=j}
         s1 += v1;
//  P(i,j) {j+1<=h, 0<=i, i+1<=w, 0<=j}
         s2 += v1*v1;
//  P(i,j) {j+1<=h, 0<=i, i+1<=w, 0<=j}
         v1 -= rec[i];
//  P(i,j) {j+1<=h, 0<=i, i+1<=w, 0<=j}
         e2 += v1*v1;
      }
//  P(i,j) {j+1<=h, 0<=i, w<=i, 0<=j}
      org += lx;
//  P(i,j) {j+1<=h, 0<=i, w<=i, 0<=j}
      rec += lx;
   }
//  P(i,j) {h<=j, 0<=j}
   s1 /= w*h;
//  P(i,j) {h<=j, 0<=j}
   s2 /= w*h;
//  P(i,j) {h<=j, 0<=j}
   e2 /= w*h;
//  P(i,j) {h<=j, 0<=j}
   /* prevent division by zero in calcSNR() */
   if (e2==0.0)
//  P(i,j) {h<=j, 0<=j}
      e2 = 0.00001;
//  P(i,j) {h<=j, 0<=j}
   *pv = s2-s1*s1;
//  P(i,j) {h<=j, 0<=j}
   /* variance */
   *pe = e2;
}
//  P() {}
void transform(unsigned char *pred[], unsigned char *cur[], struct mbinfo *mbi, short blocks[][64])
{
//  P() {}
   int i, j, i1, j1, k, n, cc, offs, lx;
//  P(0`j1,cc,i,i1,j,k,lx,n,offs) {}
   k = 0;
//  P(0`j1,cc,i,i1,j,k,lx,n,offs) {k==0}
   for(j = 0; j <= height2-1; j += 16)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=j}
      for(i = 0; i <= width-1; i += 16) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=i}
         for(n = 0; n <= block_count-1; n += 1) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            cc = n<4?0:(n&1)+1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            /* color component index */
            if (cc==0) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
               /* luminance */
               if (pict_struct==3&&mbi[k].dct_type) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==3, 0<=n}
                  /* field DCT */
                  offs = i+((n&1)<<3)+width*(j+((n&2)>>1));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==3, 0<=n}
                  lx = width<<1;
               }
               else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
                  /* frame DCT */
                  offs = i+((n&1)<<3)+width2*(j+((n&2)<<2));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
                  lx = width2;
               }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    0<=n}
               if (pict_struct==2)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {cc==0,
//    pict_struct==2, 0<=n}
                  offs += width;
            }
            else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               /* chrominance */
               /* scale coordinates */
               i1 = chroma_format==3?i:i>>1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               j1 = chroma_format!=1?j:j>>1;
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               if (pict_struct==3&&mbi[k].dct_type&&chroma_format!=1) {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==3, 0<=n}
                  /* field DCT */
                  offs = i1+(n&8)+chrom_width*(j1+((n&2)>>1));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==3, 0<=n}
                  lx = chrom_width<<1;
               }
               else {
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
                  /* frame DCT */
                  offs = i1+(n&8)+chrom_width2*(j1+((n&2)<<2));
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
                  lx = chrom_width2;
               }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
               if (pict_struct==2)
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2)
//    {pict_struct==2, 0<=n}
                  offs += chrom_width;
            }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {0<=n}
            sub_pred(pred[cc]+offs, cur[cc]+offs, lx, blocks[k*block_count+n]);
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
            fdct(blocks[k*block_count+n]);
         }
//  P(0`j1,block_count,cc,chrom_width,chrom_width2,chroma_format,
//    height2,i,i1,j,k,lx,n,offs,pict_struct,width,width2) {}
         k++;
      }
}
//  P() {}
static void add_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   for(j = 0; j <= 7; j += 1) {
//  P(i,j) {0<=j, j<=7}
      for(i = 0; i <= 7; i += 1)
//  P(i,j) {0<=i, i<=7, 0<=j, j<=7}
         cur[i] = clp[blk[i]+pred[i]];
//  P(i,j) {i==8, 0<=j, j<=7}
      blk += 8;
//  P(i,j) {i==8, 0<=j, j<=7}
      cur += lx;
//  P(i,j) {i==8, 0<=j, j<=7}
      pred += lx;
   }
}
//  P() {}
static void sub_pred(unsigned char *pred, unsigned char *cur, int lx, short *blk)
{
//  P() {}
   int i, j;
//  P(i,j) {}
   for(j = 0; j <= 7; j += 1) {
//  P(i,j) {0<=j, j<=7}
      for(i = 0; i <= 7; i += 1)
//  P(i,j) {0<=i, i<=7, 0<=j, j<=7}
         blk[i] = cur[i]-pred[i];
//  P(i,j) {i==8, 0<=j, j<=7}
      blk += 8;
//  P(i,j) {i==8, 0<=j, j<=7}
      cur += lx;
//  P(i,j) {i==8, 0<=j, j<=7}
      pred += lx;
   }
}
//  P() {}
void vbv_end_of_picture(void)
{
//  P() {}
   bitcnt_EOP = bitcount();
//  P(bitcnt_EOP) {bitcnt_EOP+putbits!:outcnt==8putbits!:bytecnt+8}
   bitcnt_EOP = bitcnt_EOP+7&~7;
}
//  P() {}
void writeframe(char *fname, unsigned char *frame[])
{
//  P() {}
   int chrom_hsize, chrom_vsize;
//  P(chrom_hsize,chrom_vsize) {}
   char name[128];
//  P(chrom_hsize,chrom_vsize) {}
   FILE *fd;
//  P(chrom_hsize,chrom_vsize) {}
   chrom_hsize = chroma_format==3?horizontal_size:horizontal_size>>1;
//  P(chrom_hsize,chrom_vsize) {}
   chrom_vsize = chroma_format!=1?vertical_size:vertical_size>>1;
//  P(chrom_hsize,chrom_vsize) {}
   if (fname[0]=='-')
//  P(chrom_hsize,chrom_vsize) {}
      return;
//  P(chrom_hsize,chrom_vsize) {}
   /* Y */
   sprintf(name, "%s.Y", fname);
//  P(chrom_hsize,chrom_vsize) {}
   if (!(fd = fopen(name, "wb"))) {
//  P(chrom_hsize,chrom_vsize) {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  P(chrom_hsize,chrom_vsize) {}
      error(errortext);
   }
//  P(chrom_hsize,chrom_vsize) {}
   fwrite(frame[0], 1, horizontal_size*vertical_size, fd);
//  P(chrom_hsize,chrom_vsize) {}
   fclose(fd);
//  P(chrom_hsize,chrom_vsize) {}
   /* Cb */
   sprintf(name, "%s.U", fname);
//  P(chrom_hsize,chrom_vsize) {}
   if (!(fd = fopen(name, "wb"))) {
//  P(chrom_hsize,chrom_vsize) {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  P(chrom_hsize,chrom_vsize) {}
      error(errortext);
   }
//  P(chrom_hsize,chrom_vsize) {}
   fwrite(frame[1], 1, chrom_hsize*chrom_vsize, fd);
//  P(chrom_hsize,chrom_vsize) {}
   fclose(fd);
//  P(chrom_hsize,chrom_vsize) {}
   /* Cr */
   sprintf(name, "%s.V", fname);
//  P(chrom_hsize,chrom_vsize) {}
   if (!(fd = fopen(name, "wb"))) {
//  P(chrom_hsize,chrom_vsize) {}
      sprintf(errortext, "Couldn't create %s\n", name);
//  P(chrom_hsize,chrom_vsize) {}
      error(errortext);
   }
//  P(chrom_hsize,chrom_vsize) {}
   fwrite(frame[2], 1, chrom_hsize*chrom_vsize, fd);
//  P(chrom_hsize,chrom_vsize) {}
   fclose(fd);
}

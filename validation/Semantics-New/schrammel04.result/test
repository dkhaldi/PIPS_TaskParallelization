
TRANSFORMERS


//  T() {}

void main()
{

//  T(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2}

   int x1 = foo(), y, x2 = 2-foo(), p = 1;

//  T(y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2, 0<=y, y<=1}

   // With a proper foo() returning a value between 0 and 1, the
   // following assert is useless
   // assert(0<=x1 && 1<=x2 && x1+x2<=2 && p==1);
   y = foo();

//  T(p,x1,x2,y) {p#init==1, 1<=p, p<=20, x1#init+y#init<=x1+y,
//    0<=x1+y, 0<=x1#init, x1#init<=1, 1<=x2#init, x2#init<=2,
//    0<=y#init, y#init<=1}

   while (p<=20) {

//  T() {p<=20}

      printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);

//  T(x1,x2,y) {p<=20, x1#init+y#init<=x1+y}

      if (2*x1+2*x2<=p)

//  T(x1,x2,y) {p<=20, 2x1#init+2x2#init<=p, x1#init+y#init<=x1+y}

         if (1) {
            // The loop is not entered for small values of p because 2x1+2x2
            // >= 2 and p starts with 1, but it is certainly entered for p>=
            // 4, unless x1 has increased to fast during the previous
            // iterations
            //
            // So the internal loop is not entered till p has increased
            // enough. The loop is entered or not entered and a convex hull
            // with the identity transition must be performed
            //
            // Also, we may skip the loop at any time because of y
            //
            // The information published by Bertrand

//  T() {p<=20, 2x1+2x2<=p}

            float z = 0.;

//  T(x1,x2,y) {p<=20, 2x1+2x2<=p, 2x1#init+2x2#init<=p,
//    x1#init+y#init<=x1+y}


            while (2*x1+2*x2<=p&&alea())

//  T(x1,x2,y) {x1#init+x2==x1-1, x2==y#init, p<=20,
//    2x1#init+2x2#init<=p, 0<=y, y<=1}

               if (1) {

//  T(x1) {x1#init+y==x1-1, p<=20, 2x1#init+2x2<=p}

                  x1 = x1+y+1;

//  T(x2) {x2==y, p<=20, 2x1+2x2#init<=p+2x2+2}

                  x2 = y;

//  T(y) {x2==y#init, p<=20, 0<=y, y<=1}

                  y = foo();
               }

//  T() {p<=20}

            // To get the loop postcondition
            //y = y;
            // without generating an indentity transformer
            z = z;
         }
         else

//  T() {0==-1}

            // do nothing at all, not even read y? Read y on every transition
            y = foo();

//  T(p) {p==p#init+1, p<=21}

      p++;
   }

//  T(y) {p==21, y==y#init, 0<=x1+y}

   //
   // Expected result by Schrammel (the third inequality is also the
   // second one):
   // 1<=x1+x2, 0<=x2<=1, 0<=x1
   
   // Also true: 0<=x1<=2
   
   y = y;
}

PRECONDITIONS


//  P() {}

void main()
{

//  P() {}

   int x1 = foo(), y, x2 = 2-foo(), p = 1;

//  P(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2}

   // With a proper foo() returning a value between 0 and 1, the
   // following assert is useless
   // assert(0<=x1 && 1<=x2 && x1+x2<=2 && p==1);
   y = foo();

//  P(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2, 0<=y, y<=1}

   while (p<=20) {

//  P(p,x1,x2,y) {1<=p, p<=20, 0<=x1, 0<=y, y<=1}

      printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);

//  P(p,x1,x2,y) {1<=p, p<=20, 0<=x1, 0<=y, y<=1}

      if (2*x1+2*x2<=p)

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}

         if (1) {
            // The loop is not entered for small values of p because 2x1+2x2
            // >= 2 and p starts with 1, but it is certainly entered for p>=
            // 4, unless x1 has increased to fast during the previous
            // iterations
            //
            // So the internal loop is not entered till p has increased
            // enough. The loop is entered or not entered and a convex hull
            // with the identity transition must be performed
            //
            // Also, we may skip the loop at any time because of y
            //
            // The information published by Bertrand

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}

            float z = 0.;

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}


            while (2*x1+2*x2<=p&&alea())

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}

               if (1) {

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}

                  x1 = x1+y+1;

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p+2y+2, y+1<=x1, 0<=y, y<=1}

                  x2 = y;

//  P(p,x1,x2,y) {x2==y, 1<=p, p<=20, x2+1<=x1, 0<=x2, x2<=1}

                  y = foo();
               }

//  P(p,x1,x2,y) {1<=p, p<=20, 4x2<=2p+x1, 19x2<=9p+10, 0<=x1, 0<=y,
//    y<=1}

            // To get the loop postcondition
            //y = y;
            // without generating an indentity transformer
            z = z;
         }
         else

//  P() {0==-1}

            // do nothing at all, not even read y? Read y on every transition
            y = foo();

//  P(p,x1,x2,y) {1<=p, p<=20, 0<=x1, 0<=y, y<=1}

      p++;
   }

//  P(p,x1,x2,y) {p==21, 0<=x1, 0<=y, y<=1}

   //
   // Expected result by Schrammel (the third inequality is also the
   // second one):
   // 1<=x1+x2, 0<=x2<=1, 0<=x1
   
   // Also true: 0<=x1<=2
   
   y = y;
}

Try to refine the transformers: first refinement


TRANSFORMERS after first refinement


//  T() {}

void main()
{

//  T(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2}

   int x1 = foo(), y, x2 = 2-foo(), p = 1;

//  T(y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2, 0<=y, y<=1}

   // With a proper foo() returning a value between 0 and 1, the
   // following assert is useless
   // assert(0<=x1 && 1<=x2 && x1+x2<=2 && p==1);
   y = foo();

//  T(p,x1,x2,y) {p#init==1, 1<=p, p<=20, 11<=10p+x2,
//    x2#init+10<=10p+x2, y#init+1<=p+y, y+1<=p+y#init, 0<=x1,
//    10x1#init+x2#init<=10x1+x2,
//    10x1#init+x2#init+11y#init<=10x1+x2+11y, x1#init+2y#init<=x1+2y,
//    x1#init+y<=x1+y#init, 1<=10x1+x2, 0<=x1#init, x1#init<=1,
//    1<=x2#init, x2#init<=2, 0<=y, y<=1, 0<=y#init, y#init<=1}

   while (p<=20) {

//  T() {1<=p, p<=20, 0<=x1, 0<=y, y<=1}

      printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);

//  T(x1,x2,y) {1<=p, p<=20, 10x1#init+x2#init<=10x1+x2,
//    10x1#init+x2#init+11y#init<=10x1+x2+11y,
//    x1#init+x2#init+2y#init<=x1+x2+2y+9, x1#init+2y#init<=x1+2y,
//    x1#init+y<=x1+y#init, 0<=x1#init, x2#init<=x2+10, 0<=y, y<=1,
//    0<=y#init, y#init<=1}

      if (2*x1+2*x2<=p)

//  T(x1,x2,y) {1<=p, p<=20, 4x2<=2p+x1, 2x1#init+2x2#init<=p,
//    19x2<=9p+10, 0<=x1, 10x1#init+x2#init<=10x1+x2,
//    10x1#init+x2#init+11y#init<=10x1+x2+11y,
//    x1#init+x2#init+2y#init<=x1+x2+2y+9, x1#init+2y#init<=x1+2y,
//    x1#init+y<=x1+y#init, 0<=x1+2y, y<=x1+1, 0<=x1#init,
//    x2#init<=x2+10, 0<=y, y<=1, y#init<=y+1, y<=y#init+1, 0<=y#init,
//    y#init<=1}

         if (1) {
            // The loop is not entered for small values of p because 2x1+2x2
            // >= 2 and p starts with 1, but it is certainly entered for p>=
            // 4, unless x1 has increased to fast during the previous
            // iterations
            //
            // So the internal loop is not entered till p has increased
            // enough. The loop is entered or not entered and a convex hull
            // with the identity transition must be performed
            //
            // Also, we may skip the loop at any time because of y
            //
            // The information published by Bertrand

//  T() {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 0<=y, y<=1}

            float z = 0.;

//  T(x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 2x1#init+2x2#init<=p, 0<=x1,
//    x1#init<=x1, 10x1#init+x2#init<=10x1+x2,
//    10x1#init+x2#init+11y#init<=10x1+x2+11y, x1#init+2y#init<=x1+2y,
//    x1#init+y<=x1+y#init, 0<=x1#init, 0<=y, y<=1, 0<=y#init,
//    y#init<=1}


            while (2*x1+2*x2<=p&&alea())

//  T(x1,x2,y) {x1#init+x2==x1-1, x2==y#init, 1<=p, p<=20,
//    2x1#init+2x2#init<=p, 0<=x1#init, 0<=x2, x2<=1, 0<=y, y<=1}

               if (1) {

//  T(x1) {x1#init+y==x1-1, 1<=p, p<=20, 2x1#init+2x2<=p, 0<=x1#init,
//    0<=y, y<=1}

                  x1 = x1+y+1;

//  T(x2) {x2==y, 1<=p, p<=20, 2x1+2x2#init<=p+2x2+2, x2+1<=x1, 0<=x2,
//    x2<=1}

                  x2 = y;

//  T(y) {x2==y#init, 1<=p, p<=20, x2+1<=x1, 0<=x2, x2<=1, 0<=y, y<=1}

                  y = foo();
               }

//  T() {1<=p, p<=20, 4x2<=2p+x1, 19x2<=9p+10, 0<=x1, 0<=x1+2y,
//    y<=x1+1, 0<=y, y<=1}

            // To get the loop postcondition
            //y = y;
            // without generating an indentity transformer
            z = z;
         }
         else

//  T() {0==-1}

            // do nothing at all, not even read y? Read y on every transition
            y = foo();

//  T(p) {p==p#init+1, 2<=p, p<=21, 0<=x1, 0<=x1+2y, y<=x1+1, 0<=y,
//    y<=1}

      p++;
   }

//  T(y) {p==21, y==y#init, 0<=x1, 21<=320x1+21x2, 1<=51x1+x2,
//    1<=40x1+x2, 0<=25x1+6x2+989, 1<=25x1+x2, 1<=21x1+x2, 1<=20x1+x2,
//    1<=10x1+x2, 0<=3x1+x2+198, 1<=20x1+x2+31y, 1<=20x1+x2+20y,
//    1<=20x1+x2+y, 10y<=20x1+x2+9, 1<=10x1+x2+11y, 0<=x1+x2+2y+198,
//    0<=x1+2y, y<=x1+1, 0<=x2+199, 0<=y, y<=1}

   //
   // Expected result by Schrammel (the third inequality is also the
   // second one):
   // 1<=x1+x2, 0<=x2<=1, 0<=x1
   
   // Also true: 0<=x1<=2
   
   y = y;
}

PRECONDITIONS after first refinement


//  P() {}

void main()
{

//  P() {}

   int x1 = foo(), y, x2 = 2-foo(), p = 1;

//  P(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2}

   // With a proper foo() returning a value between 0 and 1, the
   // following assert is useless
   // assert(0<=x1 && 1<=x2 && x1+x2<=2 && p==1);
   y = foo();

//  P(p,x1,x2,y) {p==1, 0<=x1, x1<=1, 1<=x2, x2<=2, 0<=y, y<=1}

   while (p<=20) {

//  P(p,x1,x2,y) {p<=20, 1<=x1+x2, 0<=x1+2y, y<=x1+1, 0<=x2, 0<=y,
//    y<=1}

      printf("p=%d, x1=%d, x2=%d\n", p, x1, x2);

//  P(p,x1,x2,y) {1<=p, p<=20, 0<=x1, 1<=x1+x2, 0<=x1+2y, y<=x1+1,
//    0<=x2, 0<=y, y<=1}

      if (2*x1+2*x2<=p)

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 1<=x1+x2, 0<=x1+2y,
//    y<=x1+1, 0<=x2, 0<=y, y<=1}

         if (1) {
            // The loop is not entered for small values of p because 2x1+2x2
            // >= 2 and p starts with 1, but it is certainly entered for p>=
            // 4, unless x1 has increased to fast during the previous
            // iterations
            //
            // So the internal loop is not entered till p has increased
            // enough. The loop is entered or not entered and a convex hull
            // with the identity transition must be performed
            //
            // Also, we may skip the loop at any time because of y
            //
            // The information published by Bertrand

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 1<=x1+x2, 0<=x1+2y,
//    y<=x1+1, 0<=x2, 0<=y, y<=1}

            float z = 0.;

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p, 0<=x1, 1<=x1+x2, 0<=x1+2y,
//    y<=x1+1, 0<=x2, 0<=y, y<=1}


            while (2*x1+2*x2<=p&&alea())

//  P(p,x1,x2,y) {p<=20, 2x1+2x2<=p, 0<=x1, 1<=x1+x2, 0<=x2, 0<=y,
//    y<=1}

               if (1) {

//  P(p,x1,x2,y) {p<=20, 2x1+2x2<=p, 0<=x1, 1<=x1+x2, 0<=x2, 0<=y,
//    y<=1}

                  x1 = x1+y+1;

//  P(p,x1,x2,y) {1<=p, p<=20, 2x1+2x2<=p+2y+2, y+2<=x1+x2, y+1<=x1,
//    0<=x2, 0<=y, y<=1}

                  x2 = y;

//  P(p,x1,x2,y) {x2==y, 2<=p, p<=20, 2x1<=p+2x2+2, x2+1<=x1, 0<=x2,
//    x2<=1}

                  y = foo();
               }

//  P(p,x1,x2,y) {2<=p, p<=20, 6x1+8x2<=3p+20, 2x1<=p+2x2+2, 2x2<=p,
//    0<=x1, 1<=x1+x2, 0<=x2, 0<=y, y<=1}

            // To get the loop postcondition
            //y = y;
            // without generating an indentity transformer
            z = z;
         }
         else

//  P() {0==-1}

            // do nothing at all, not even read y? Read y on every transition
            y = foo();

//  P(p,x1,x2,y) {1<=p, p<=20, 0<=x1, 1<=x1+x2, 0<=x2, 0<=y, y<=1}

      p++;
   }

//  P(p,x1,x2,y) {p==21, 0<=x1, 1<=x1+x2, 0<=x1+2y, y<=x1+1, 0<=x2,
//    0<=y, y<=1}

   //
   // Expected result by Schrammel (the third inequality is also the
   // second one):
   // 1<=x1+x2, 0<=x2<=1, 0<=x1
   
   // Also true: 0<=x1<=2
   
   y = y;
}

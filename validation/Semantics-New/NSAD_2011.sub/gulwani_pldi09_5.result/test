
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int i, m, n, b, j1, j2;

//  T(m) {0<=m}

   m = rand();

//  T(n) {0<=m, 0<=n}

   n = rand();

//  T(b) {0<=b, 0<=m, 0<=n}

   b = rand();

//  T() {0<=b, b<=1, 1<=m, m+1<=n, 0<=n}

   if (!(0<m&&m<n&&b<=1))

//  T() {0==-1}

      deadlock();

//  T(i) {i==m, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   i = m;

//  T(j1,j2) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   j1 = j2 = 0;

//  T() {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

      checking_error();

//  T(i,j1,j2) {i+j1#init+j2==i#init+j1+j2#init, i+j2==j1+m, 0<=b,
//    b<=1, 2b+j1<=2i, 2b+j1+m<=i+n, i+j1+m+2<=2b+2n, j1+2<=2b+n,
//    i+j1#init<=i#init+j1, j1<=i, i<=j1+m, 0<=j1, j1#init<=j1,
//    j1+m<=n, 1<=m, m+1<=n}

   while (rand_b())

//  T(i,j1,j2) {b+j1#init==j1, i+2j1#init==i#init+2j1-1,
//    j1+j2==j1#init+j2#init+1, 2j1<=i+2j1#init, i+2j1#init+2<=2j1+n,
//    j1#init<=j1, j1<=j1#init+1, j1+m<=n, j2<=m, 1<=m, m+1<=n}

      if (rand_b()) {

//  T() {b==1, 1<=i, i+1<=n, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==1))

//  T() {0==-1}

            deadlock();

//  T(i) {b==1, i==i#init+1, 2<=i, i<=n, 1<=m, m+1<=n}

         i++;

//  T(j1) {b==1, j1==j1#init+1, 2<=i, i<=n, 1<=m, m+1<=n}

         j1++;

//  T() {b==1, 2<=i, i<=n, j1+m<=n, j2<=m, 1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {b==0, 1<=i, i+1<=n, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==0))

//  T() {0==-1}

            deadlock();

//  T(i) {b==0, i==i#init-1, 0<=i, i+2<=n, 1<=m, m+1<=n}

         i--;

//  T(j2) {b==0, j2==j2#init+1, 0<=i, i+2<=n, 1<=m, m+1<=n}

         j2++;

//  T() {b==0, 0<=i, i+2<=n, j1+m<=n, j2<=m, 1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int i, m, n, b, j1, j2;

//  T(m) {0<=m}

   m = rand();

//  T(n) {0<=m, 0<=n}

   n = rand();

//  T(b) {0<=b, 0<=m, 0<=n}

   b = rand();

//  T() {0<=b, b<=1, 1<=m, m+1<=n, 0<=n}

   if (!(0<m&&m<n&&b<=1))

//  T() {0==-1}

      deadlock();

//  T(i) {i==m, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   i = m;

//  T(j1,j2) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   j1 = j2 = 0;

//  T() {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

      checking_error();

//  T(i,j1,j2) {i+j2==i#init+j1, i#init==m, j1#init==0, j2#init==0,
//    0<=b, b<=1, i+1<=b+i#init+j1, b+j1<=i, i#init+j1+1<=b+n, b<=j1}

   if (b==1) {

//  T(i,j1) {b==1, i+j1#init==i#init+j1, j1+m==i, j2==0, i#init<=i,
//    m<=i, i+1<=n, 1<=m}

      while (rand_b()) {

//  T() {b==1, j2==0, 1<=i, i+2<=n, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==1&&i<n-1))

//  T() {0==-1}

            deadlock();

//  T(i) {b==1, i==i#init+1, j2==0, 2<=i, i+1<=n, 1<=m, m+1<=n}

         i++;

//  T(j1) {b==1, j1==j1#init+1, j2==0, 2<=i, i+1<=n, 1<=m, m+1<=n}

         j1++;

//  T() {b==1, j2==0, 2<=i, i+1<=n, j1+m<=n, 1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

            checking_error();
      }

//  T() {b==1, j1+m==i, i==n-1, j2==0, 1<=i, m<=i, 1<=m}

      if (!(0<i&&i<n&&b==1&&i==n-1))

//  T() {0==-1}

         deadlock();

//  T(i) {b==1, i==i#init+1, j1+m==i-1, i==n, j2==0, 2<=i, m+1<=i,
//    1<=m}

      i++;

//  T(j1) {b==1, j1+m==i, i==n, j1==j1#init+1, j2==0, 2<=i, m+1<=i,
//    1<=m}

      j1++;

//  T() {b==1, j1+m==i, i==n, j2==0, 2<=i, m+1<=i, 1<=m}

      if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

         checking_error();
   }
   else {

//  T(i,j2) {b==0, i+j2==i#init+j2#init, i+j2==m, j1==0, 1<=i,
//    i<=i#init, i<=m, m+1<=n}

      while (rand_b()) {

//  T() {b==0, j1==0, 2<=i, i+1<=n, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==0&&1<i))

//  T() {0==-1}

            deadlock();

//  T(i) {b==0, i==i#init-1, j1==0, 1<=i, i+2<=n, 1<=m, m+1<=n}

         i--;

//  T(j2) {b==0, j1==0, j2==j2#init+1, 1<=i, i+2<=n, 1<=m, m+1<=n}

         j2++;

//  T() {b==0, j1==0, 1<=i, i+2<=n, j2<=m, 1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

            checking_error();
      }

//  T() {b==0, i==1, j1==0, j2==m-1, 0<=j2, j2+2<=n, 2<=n}

      if (!(0<i&&i<n&&b==0&&1==i))

//  T() {0==-1}

         deadlock();

//  T(i) {b==0, i==0, i#init==1, j1==0, j2==m-1, 0<=j2, j2+2<=n, 2<=n}

      i--;

//  T(j2) {b==0, i==0, j1==0, j2==j2#init+1, j2==m, 1<=j2, j2+1<=n,
//    2<=n}

      j2++;

//  T() {b==0, i==0, j1==0, j2==m, 1<=j2, j2+1<=n, 2<=n}

      if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int i, m, n, b, j1, j2;

//  P() {}

   m = rand();

//  P(m) {0<=m}

   n = rand();

//  P(m,n) {0<=m, 0<=n}

   b = rand();

//  P(b,m,n) {0<=b, 0<=m, 0<=n}

   if (!(0<m&&m<n&&b<=1))

//  P(b,m,n) {0<=b, 0<=m, 0<=n}

      deadlock();

//  P(b,m,n) {0<=b, b<=1, 1<=m, m+1<=n, 0<=n}

   i = m;

//  P(b,i,m,n) {i==m, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   j1 = j2 = 0;

//  P(b,i,j1,j2,m,n) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n,
//    0<=n}

   if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

      checking_error();

//  P(b,i,j1,j2,m,n) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n,
//    0<=n}

   while (rand_b())

//  P(b,i,j1,j2,m,n) {i+j2==j1+m, 0<=b, b<=1, 2b+j2<=i+m,
//    5b+2j2<=i+2m+2, 2i+2j2+3<=5b+m+2n, i+j2+2<=2b+m+n,
//    3i+2j2+3<=5b+3n, 2i+j2+2<=2b+2n, 5b+2j2<=m+n+2, 2b+j2<=n,
//    m<=i+j2, i+j2<=n, 0<=j2, j2<=m, 1<=m, m+1<=n}

      if (rand_b()) {

//  P(b,i,j1,j2,m,n) {i+j2==j1+m, 0<=b, b<=1, 2b+j2<=i+m,
//    5b+2j2<=i+2m+2, 2i+2j2+3<=5b+m+2n, i+j2+2<=2b+m+n,
//    3i+2j2+3<=5b+3n, 2i+j2+2<=2b+2n, 5b+2j2<=m+n+2, 2b+j2<=n,
//    m<=i+j2, i+j2<=n, 0<=j2, j2<=m, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==1))

//  P(b,i,j1,j2,m,n) {i+j2==j1+m, 0<=b, b<=1, 2b+j2<=i+m,
//    5b+2j2<=i+2m+2, 2i+2j2+3<=5b+m+2n, i+j2+2<=2b+m+n,
//    3i+2j2+3<=5b+3n, 2i+j2+2<=2b+2n, b<=j1, 3j1+3m+3<=3b+j2+3n,
//    2j1+m+3<=2b+2n, b+j2<=m, 5b+2j2<=m+n+2, 2b+j2<=n, m<=i+j2,
//    i+j2<=n, 0<=j2, j2<=m, 1<=m, m+1<=n}

            deadlock();

//  P(b,i,j1,j2,m,n) {b==1, i+j2==j1+m, 1<=i, m<=i+j2, j2+2<=i+m,
//    2j2+3<=i+2m, i+j2<=m+n, 2i+2j2<=m+2n+2, i+j2<=n, 2i+j2<=2n,
//    3i+2j2<=3n+2, i+1<=n, 0<=j2, j2<=m, 2j2+3<=m+n, j2+2<=n, 1<=m,
//    m+1<=n}

         i++;

//  P(b,i,j1,j2,m,n) {b==1, i+j2==j1+m+1, 2<=i, m+1<=i+j2, j2+3<=i+m,
//    2j2+4<=i+2m, i+j2<=m+n+1, 2i+2j2<=m+2n+4, i+j2<=n+1,
//    2i+j2<=2n+2, 3i+2j2<=3n+5, i<=n, 0<=j2, j2<=m, 2j2+3<=m+n,
//    j2+2<=n, 1<=m, m+1<=n}

         j1++;

//  P(b,i,j1,j2,m,n) {b==1, i+j2==j1+m, 2<=i, m+1<=i+j2, j2+3<=i+m,
//    2j2+4<=i+2m, i+j2<=m+n+1, 2i+2j2<=m+2n+4, i+j2<=n+1,
//    2i+j2<=2n+2, 3i+2j2<=3n+5, i<=n, 0<=j2, j2<=m, 2j2+3<=m+n,
//    j2+2<=n, 1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P(b,i,j1,j2,m,n) {b==1, i+j2==j1+m, 2<=i, m+1<=i+j2, j2+3<=i+m,
//    2j2+4<=i+2m, i+j2<=m+n+1, 2i+2j2<=m+2n+4, i+j2<=n+1,
//    2i+j2<=2n+2, 3i+2j2<=3n+5, i<=n, 0<=j2, j2<=m, 2j2+3<=m+n,
//    j2+2<=n, 1<=m, m+1<=n}

            checking_error();
      }
      else {

//  P(b,i,j1,j2,m,n) {i+j2==j1+m, 0<=b, b<=1, 2b+j2<=i+m,
//    5b+2j2<=i+2m+2, 2i+2j2+3<=5b+m+2n, i+j2+2<=2b+m+n,
//    3i+2j2+3<=5b+3n, 2i+j2+2<=2b+2n, 5b+2j2<=m+n+2, 2b+j2<=n,
//    m<=i+j2, i+j2<=n, 0<=j2, j2<=m, 1<=m, m+1<=n}

         if (!(0<i&&i<n&&b==0))

//  P(b,i,j1,j2,m,n) {i+j2==j1+m, 0<=b, b<=1, 2b+j2<=i+m,
//    5b+2j2<=i+2m+2, 2i+2j2+3<=5b+m+2n, i+j2+2<=2b+m+n,
//    3i+2j2+3<=5b+3n, 2i+j2+2<=2b+2n, 3b+3j2<=j1+3m, j1+m+1<=b+n,
//    1<=b+j2, 2b+2j2+1<=m+n, 5b+2j2<=m+n+2, 2b+j2<=n, i+j2<=n, 0<=j1,
//    0<=j2, j2<=m, 1<=m, m+1<=n}

            deadlock();

//  P(b,i,j1,j2,m,n) {b==0, i+j2==j1+m, 1<=i, m<=i+j2, j2<=i+m,
//    2j2<=i+2m+2, i+j2+2<=m+n, 2i+2j2+3<=m+2n, i+j2<=n, 2i+j2+2<=2n,
//    3i+2j2+3<=3n, i+1<=n, 0<=j2, j2<=m, 2j2<=m+n+2, j2<=n, 1<=m,
//    m+1<=n}

         i--;

//  P(b,i,j1,j2,m,n) {b==0, i+j2==j1+m-1, 0<=i, m<=i+j2+1, j2<=i+m+1,
//    2j2<=i+2m+3, i+j2+3<=m+n, 2i+2j2+5<=m+2n, i+j2+1<=n,
//    2i+j2+4<=2n, 3i+2j2+6<=3n, i+2<=n, 0<=j2, j2<=m, 2j2<=m+n+2,
//    j2<=n, 1<=m, m+1<=n}

         j2++;

//  P(b,i,j1,j2,m,n) {b==0, i+j2==j1+m, 0<=i, m<=i+j2, j2<=i+m+2,
//    2j2<=i+2m+5, i+j2+2<=m+n, 2i+2j2+3<=m+2n, i+j2<=n, 2i+j2+3<=2n,
//    3i+2j2+4<=3n, i+2<=n, 1<=j2, j2<=m+1, 2j2<=m+n+4, j2<=n+1, 1<=m,
//    m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P(b,i,j1,j2,m,n) {b==0, i+j2==j1+m, 0<=i, j1<=i+1, i+2j1+2m+4<=3n,
//    j2<=i+m+2, 2j2<=i+2m+5, i+j2+2<=m+n, 2i+j2+3<=2n, i+2<=n, 0<=j1,
//    j1+m<=n, 2j1+m+3<=2n, 1<=j2, 2j2<=m+n+4, j2<=n+1, 1<=m, m+1<=n}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int i, m, n, b, j1, j2;

//  P() {}

   m = rand();

//  P(m) {0<=m}

   n = rand();

//  P(m,n) {0<=m, 0<=n}

   b = rand();

//  P(b,m,n) {0<=b, 0<=m, 0<=n}

   if (!(0<m&&m<n&&b<=1))

//  P(b,m,n) {0<=b, 0<=m, 0<=n}

      deadlock();

//  P(b,m,n) {0<=b, b<=1, 1<=m, m+1<=n, 0<=n}

   i = m;

//  P(b,i,m,n) {i==m, 0<=b, b<=1, 1<=i, i+1<=n, 0<=n}

   j1 = j2 = 0;

//  P(b,i,j1,j2,m,n) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n,
//    0<=n}

   if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

      checking_error();

//  P(b,i,j1,j2,m,n) {i==m, j1==0, j2==0, 0<=b, b<=1, 1<=i, i+1<=n,
//    0<=n}

   if (b==1) {

//  P(b,i,j1,j2,m,n) {b==1, i==m, j1==0, j2==0, 1<=i, i+1<=n, 0<=n}

      while (rand_b()) {

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, j2==0, m<=i, i+1<=n, 1<=m}

         if (!(0<i&&i<n&&b==1&&i<n-1))

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, i==n-1, j2==0, m<=i, 1<=m}

            deadlock();

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, j2==0, 1<=i, m<=i, i+2<=n, 1<=m}

         i++;

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i-1, j2==0, 2<=i, m+1<=i, i+1<=n,
//    1<=m, m+1<=n}

         j1++;

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, j2==0, 2<=i, m+1<=i, i+1<=n,
//    1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

            checking_error();
      }

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, j2==0, m<=i, i+1<=n, 1<=m}

      if (!(0<i&&i<n&&b==1&&i==n-1))

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, j2==0, m<=i, i+2<=n, 1<=m}

         deadlock();

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, i==n-1, j2==0, 1<=i, m<=i, 1<=m}

      i++;

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i-1, i==n, j2==0, 2<=i, m+1<=i,
//    1<=m}

      j1++;

//  P(b,i,j1,j2,m,n) {b==1, j1+m==i, i==n, j2==0, 2<=i, m+1<=i, 1<=m}

      if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

         checking_error();
   }
   else {

//  P(b,i,j1,j2,m,n) {b==0, i==m, j1==0, j2==0, 1<=i, i+1<=n, 0<=n}

      while (rand_b()) {

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 1<=i, i<=m, m+1<=n}

         if (!(0<i&&i<n&&b==0&&1<i))

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 1<=i, 0<=j2, m<=j2+1,
//    m+1<=n}

            deadlock();

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 2<=i, i<=m, i+1<=n,
//    m+1<=n}

         i--;

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m-1, j1==0, 1<=i, i+1<=m, i+2<=n,
//    1<=m, m+1<=n}

         j2++;

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 1<=i, i+1<=m, i+2<=n,
//    1<=m, m+1<=n}

         if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

            checking_error();
      }

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 1<=i, i<=m, m+1<=n}

      if (!(0<i&&i<n&&b==0&&1==i))

//  P(b,i,j1,j2,m,n) {b==0, i+j2==m, j1==0, 0<=j2, j2+2<=m, m+1<=n}

         deadlock();

//  P(b,i,j1,j2,m,n) {b==0, i==1, j1==0, j2==m-1, 0<=j2, j2+2<=n,
//    2<=n}

      i--;

//  P(b,i,j1,j2,m,n) {b==0, i==0, j1==0, j2==m-1, 0<=j2, j2+2<=n,
//    2<=n}

      j2++;

//  P(b,i,j1,j2,m,n) {b==0, i==0, j1==0, j2==m, 1<=j2, j2+1<=n, 2<=n}

      if (!(j1<=n-m&&j2<=m&&j1*j2==0))

//  P() {0==-1}

         checking_error();
   }
}

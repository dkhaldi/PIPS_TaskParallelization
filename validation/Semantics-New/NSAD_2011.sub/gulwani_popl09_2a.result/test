
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x0, y0, n, m, x, y, c1, c2;

//  T(x0) {0<=x0}

   x0 = rand();

//  T(y0) {0<=x0, 0<=y0}

   y0 = rand();

//  T(n) {0<=n, 0<=x0, 0<=y0}

   n = rand();

//  T(m) {0<=m, 0<=n, 0<=x0, 0<=y0}

   m = rand();

//  T() {0<=m, y0<=m, 0<=n, x0<=n, 0<=x0, 0<=y0}

   if (!(n>=x0&&m>=y0))

//  T() {0==-1}

      deadlock();

//  T(x) {x==x0, 0<=m, y0<=m, 0<=n, x<=n, 0<=x, 0<=y0}

   x = x0;

//  T(y) {x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x, 0<=y}

   y = y0;

//  T(c1,c2) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n,
//    0<=x, 0<=y}

   c1 = c2 = 0;

//  T() {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x,
//    0<=y}

   if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

      checking_error();

//  T(c1,c2,x,y) {c1+y#init==c1#init+y, c1+y0==y,
//    c2+x#init==c2#init+x, c2+x0==x, c1#init<=c1, y<=m, x<=n,
//    x#init<=x, x0<=x, 0<=x0, y0<=y, 0<=y0}

   while (rand_b())

//  T(c1,c2,x,y) {c1+c2==c1#init+c2#init+1, c1+x==c1#init+x#init+1,
//    c1+y#init==c1#init+y, c1#init<=c1, c1<=c1#init+1,
//    c1+x<=c1#init+n, c1+y0<=m, c2+x0<=n, y0<=m, x0<=n, 0<=x0, 0<=y0}

      if (rand_b()) {

//  T() {y+1<=m, y0<=m, x+1<=n, x0<=n, 0<=x0, 0<=y0}

         if (!(x<n&&y<m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==y#init+1, y<=m, y0<=m, x+1<=n, x0<=n, 0<=x0, 0<=y0}

         y++;

//  T(c1) {c1==c1#init+1, y<=m, y0<=m, x+1<=n, x0<=n, 0<=x0, 0<=y0}

         c1++;

//  T() {c1+y0<=m, c2+x0<=n, y<=m, y0<=m, x+1<=n, x0<=n, 0<=x0, 0<=y0}

         if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {m<=y, y0<=m, x+1<=n, x0<=n, 0<=x0, 0<=y0}

         if (!(x<n&&y>=m))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, m<=y, y0<=m, x<=n, x0<=n, 0<=x0, 0<=y0}

         x++;

//  T(c2) {c2==c2#init+1, m<=y, y0<=m, x<=n, x0<=n, 0<=x0, 0<=y0}

         c2++;

//  T() {c1+y0<=m, c2+x0<=n, m<=y, y0<=m, x<=n, x0<=n, 0<=x0, 0<=y0}

         if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x0, y0, n, m, x, y, c1, c2;

//  T(x0) {0<=x0}

   x0 = rand();

//  T(y0) {0<=x0, 0<=y0}

   y0 = rand();

//  T(n) {0<=n, 0<=x0, 0<=y0}

   n = rand();

//  T(m) {0<=m, 0<=n, 0<=x0, 0<=y0}

   m = rand();

//  T() {0<=m, y0<=m, 0<=n, x0<=n, 0<=x0, 0<=y0}

   if (!(n>=x0&&m>=y0))

//  T() {0==-1}

      deadlock();

//  T(x) {x==x0, 0<=m, y0<=m, 0<=n, x<=n, 0<=x, 0<=y0}

   x = x0;

//  T(y) {x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x, 0<=y}

   y = y0;

//  T(c1,c2) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n,
//    0<=x, 0<=y}

   c1 = c2 = 0;

//  T() {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x,
//    0<=y}

   if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

      checking_error();

//  T() {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m, x<=n, 0<=x, 0<=y}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  T() {c1==0, c2==0, x==x0, y==y0, y<=m, 0<=n, x+1<=n, 0<=x, 0<=y}

   if (y<m) goto L1;

//  T() {c1+y0==m, c2==0, m==y, x==x0, y0<=m, 0<=n, x+1<=n, 0<=x,
//    0<=y0}

L2:   ;

//  T(c2,x) {c1+y0==m, c2+x#init==c2#init+x, c2+x0==x, m==y, 0<=c1,
//    x+1<=n, x#init<=x, x0<=x, 0<=x0, 0<=y0}

   while (rand_b()) {

//  T() {c1+y0==m, m==y, y0<=m, x+2<=n, x0+1<=n, 0<=x0, 0<=y0}

      if (!(x<n-1&&y>=m))

//  T() {0==-1}

         deadlock();

//  T(x) {c1+y0==m, m==y, x==x#init+1, y0<=m, x+1<=n, x0+1<=n, 0<=x0,
//    0<=y0}

      x++;

//  T(c2) {c1+y0==m, c2==c2#init+1, m==y, y0<=m, x+1<=n, x0+1<=n,
//    0<=x0, 0<=y0}

      c2++;

//  T() {c1+y0==m, m==y, c2+x0<=n, y0<=m, x+1<=n, x0+1<=n, 0<=x0,
//    0<=y0}

      if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

         checking_error();
   }

//  T() {c1+y0==m, c2+x0==n-1, m==y, n==x+1, y0<=m, 0<=n, x0+1<=n,
//    0<=x0, 0<=y0}

   if (!(x==n-1&&y>=m))

//  T() {0==-1}

      deadlock();

//  T(x) {c1+y0==m, c2+x0==n-1, m==y, n==x, n==x#init+1, y0<=m, 0<=n,
//    x0+1<=n, 0<=x0, 0<=y0}

   x++;

//  T(c2) {c1+y0==m, c2==c2#init+1, c2+x0==n, m==y, n==x, y0<=m, 0<=n,
//    x0+1<=n, 0<=x0, 0<=y0}

   c2++;

//  T() {c1+y0==m, c2+x0==n, m==y, n==x, y0<=m, 0<=n, x0+1<=n, 0<=x0,
//    0<=y0}

   if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

      checking_error();
   goto L3;

//  T() {c1==0, c2==0, x==x0, y==y0, 0<=m, y+1<=m, 0<=n, x+1<=n, 0<=x,
//    0<=y}

L1:   ;

//  T(c1,y) {c1+y#init==c1#init+y, c1+y0==y, c2==0, x==x0, y+1<=m,
//    x+1<=n, 0<=x, y#init<=y, y0<=y, 0<=y0}

   while (rand_b()) {

//  T() {c2==0, x==x0, y+2<=m, y0+1<=m, 0<=n, x+1<=n, 0<=x, 0<=y0}

      if (!(x<n&&y<m-1))

//  T() {0==-1}

         deadlock();

//  T(y) {c2==0, x==x0, y==y#init+1, y+1<=m, y0+1<=m, 0<=n, x+1<=n,
//    0<=x, 0<=y0}

      y++;

//  T(c1) {c1==c1#init+1, c2==0, x==x0, y+1<=m, y0+1<=m, 0<=n, x+1<=n,
//    0<=x, 0<=y0}

      c1++;

//  T() {c2==0, x==x0, c1+y0<=m, y+1<=m, y0+1<=m, 0<=n, x+1<=n, 0<=x,
//    0<=y0}

      if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

         checking_error();
   }

//  T() {c1+y0==m-1, c2==0, m==y+1, x==x0, 0<=m, y0+1<=m, 0<=n,
//    x+1<=n, 0<=x, 0<=y0}

   if (!(x<n&&y==m-1))

//  T() {0==-1}

      deadlock();

//  T(y) {c1+y0==m-1, c2==0, m==y, m==y#init+1, x==x0, 0<=m, y0+1<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y0}

   y++;

//  T(c1) {c1==c1#init+1, c1+y0==m, c2==0, m==y, x==x0, 0<=m, y0+1<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y0}

   c1++;

//  T() {c1+y0==m, c2==0, m==y, x==x0, 0<=m, y0+1<=m, 0<=n, x+1<=n,
//    0<=x, 0<=y0}

   if (!(c1<=m-y0&&c2<=n-x0))

//  T() {0==-1}

      checking_error();
   goto L2;

//  T() {c1+y0==y, c2+x0==n, n==x, y<=m, x0<=n, 0<=x0, y0<=y, 0<=y0}

L3:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x0, y0, n, m, x, y, c1, c2;

//  P() {}

   x0 = rand();

//  P(x0) {0<=x0}

   y0 = rand();

//  P(x0,y0) {0<=x0, 0<=y0}

   n = rand();

//  P(n,x0,y0) {0<=n, 0<=x0, 0<=y0}

   m = rand();

//  P(m,n,x0,y0) {0<=m, 0<=n, 0<=x0, 0<=y0}

   if (!(n>=x0&&m>=y0))

//  P(m,n,x0,y0) {0<=m, 0<=n, 0<=x0, 1<=x0+y0, 0<=y0}

      deadlock();

//  P(m,n,x0,y0) {0<=m, y0<=m, 0<=n, x0<=n, 0<=x0, 0<=y0}

   x = x0;

//  P(m,n,x,x0,y0) {x==x0, 0<=m, y0<=m, 0<=n, x<=n, 0<=x, 0<=y0}

   y = y0;

//  P(m,n,x,x0,y,y0) {x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x,
//    0<=y}

   c1 = c2 = 0;

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m,
//    0<=n, x<=n, 0<=x, 0<=y}

   if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m,
//    0<=n, x<=n, 0<=x, 0<=y}

   while (rand_b())

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, y<=m, x<=n, x0<=x,
//    0<=x0, y0<=y, 0<=y0}

      if (rand_b()) {

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, y<=m, x<=n, x0<=x,
//    0<=x0, y0<=y, 0<=y0}

         if (!(x<n&&y<m))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, 0<=c1, 0<=c2, y<=m,
//    x<=n, 0<=x0, 0<=y0}

            deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, y+1<=m, x+1<=n, x0<=x,
//    0<=x0, y0<=y, 0<=y0}

         y++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y-1, c2+x0==x, y<=m, y0<=m, x+1<=n,
//    x0<=n, x0<=x, 0<=x0, y0+1<=y, 0<=y0}

         c1++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, y<=m, y0<=m, x+1<=n,
//    x0<=n, x0<=x, 0<=x0, y0+1<=y, 0<=y0}

         if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, y<=m, x<=n, x0<=x,
//    0<=x0, y0<=y, 0<=y0}

         if (!(x<n&&y>=m))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==x, 0<=c1, 0<=c2, y<=m,
//    x<=n, 0<=x0, 0<=y0}

            deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, y0<=m, x+1<=n,
//    x0<=x, 0<=x0, 0<=y0}

         x++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x-1, m==y, y0<=m, x<=n,
//    x0<=n, x0+1<=x, 0<=x0, 0<=y0}

         c2++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, y0<=m, x<=n,
//    x0<=n, x0+1<=x, 0<=x0, 0<=y0}

         if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x0, y0, n, m, x, y, c1, c2;

//  P() {}

   x0 = rand();

//  P(x0) {0<=x0}

   y0 = rand();

//  P(x0,y0) {0<=x0, 0<=y0}

   n = rand();

//  P(n,x0,y0) {0<=n, 0<=x0, 0<=y0}

   m = rand();

//  P(m,n,x0,y0) {0<=m, 0<=n, 0<=x0, 0<=y0}

   if (!(n>=x0&&m>=y0))

//  P(m,n,x0,y0) {0<=m, 0<=n, 0<=x0, 1<=x0+y0, 0<=y0}

      deadlock();

//  P(m,n,x0,y0) {0<=m, y0<=m, 0<=n, x0<=n, 0<=x0, 0<=y0}

   x = x0;

//  P(m,n,x,x0,y0) {x==x0, 0<=m, y0<=m, 0<=n, x<=n, 0<=x, 0<=y0}

   y = y0;

//  P(m,n,x,x0,y,y0) {x==x0, y==y0, 0<=m, y<=m, 0<=n, x<=n, 0<=x,
//    0<=y}

   c1 = c2 = 0;

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m,
//    0<=n, x<=n, 0<=x, 0<=y}

   if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m,
//    0<=n, x<=n, 0<=x, 0<=y}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y}

   if (y<m) goto L1;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2==0, m==y, x==x0, y0<=m,
//    x+1<=n, 0<=x, 0<=y0}

L2:   ;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2==0, m==y, x==x0, y0<=m, 0<=n,
//    x+1<=n, 0<=x, 0<=y0}

   while (rand_b()) {

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, 0<=c1, x+1<=n,
//    x0<=x, 0<=x0, 0<=y0}

      if (!(x<n-1&&y>=m))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==n-1, m==y, n==x+1, 0<=c1,
//    x0+1<=n, 0<=x0, 0<=y0}

         deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, 0<=c1, x+2<=n,
//    x0<=x, 0<=x0, 0<=y0}

      x++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x-1, m==y, 0<=c1, x+1<=n,
//    x0+1<=n, x0+1<=x, 0<=x0, 0<=y0}

      c2++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, 0<=c1, x+1<=n,
//    x0+1<=n, x0+1<=x, 0<=x0, 0<=y0}

      if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

         checking_error();
   }

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, 0<=c1, x+1<=n,
//    x0<=x, 0<=x0, 0<=y0}

   if (!(x==n-1&&y>=m))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==x, m==y, 0<=c1, x+2<=n,
//    x0<=x, 0<=x0, 0<=y0}

      deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==n-1, m==y, n==x+1, 0<=c1,
//    x0+1<=n, 0<=x0, 0<=y0}

   x++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==n-1, m==y, n==x, 0<=c1,
//    0<=n, x0+1<=n, 0<=x0, 0<=y0}

   c2++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2+x0==n, m==y, n==x, 0<=c1,
//    0<=n, x0+1<=n, 0<=x0, 0<=y0}

   if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

      checking_error();
   goto L3;

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y+1<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y}

L1:   ;

//  P(c1,c2,m,n,x,x0,y,y0) {c1==0, c2==0, x==x0, y==y0, 0<=m, y+1<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y}

   while (rand_b()) {

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2==0, x==x0, y+1<=m, 0<=n,
//    x+1<=n, 0<=x, y0<=y, 0<=y0}

      if (!(x<n&&y<m-1))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m-1, c2==0, m==y+1, x==x0, y0+1<=m,
//    0<=n, x+1<=n, 0<=x, 0<=y0}

         deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2==0, x==x0, y+2<=m, 0<=n,
//    x+1<=n, 0<=x, y0<=y, 0<=y0}

      y++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y-1, c2==0, x==x0, y+1<=m, y0+1<=m,
//    0<=n, x+1<=n, 0<=x, y0+1<=y, 0<=y0}

      c1++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2==0, x==x0, y+1<=m, y0+1<=m,
//    0<=n, x+1<=n, 0<=x, y0+1<=y, 0<=y0}

      if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

         checking_error();
   }

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2==0, x==x0, y+1<=m, x+1<=n,
//    0<=x, y0<=y, 0<=y0}

   if (!(x<n&&y==m-1))

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2==0, x==x0, y+2<=m, x+1<=n,
//    0<=x, y0<=y, 0<=y0}

      deadlock();

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m-1, c2==0, m==y+1, x==x0, y0+1<=m,
//    x+1<=n, 0<=x, 0<=y0}

   y++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m-1, c2==0, m==y, x==x0, 0<=m,
//    y0+1<=m, 0<=n, x+1<=n, 0<=x, 0<=y0}

   c1++;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==m, c2==0, m==y, x==x0, 0<=m,
//    y0+1<=m, 0<=n, x+1<=n, 0<=x, 0<=y0}

   if (!(c1<=m-y0&&c2<=n-x0))

//  P() {0==-1}

      checking_error();
   goto L2;

//  P(c1,c2,m,n,x,x0,y,y0) {c1+y0==y, c2+x0==n, n==x, y<=m, x0<=n,
//    0<=x0, y0<=y, 0<=y0}

L3:   ;
}


TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x, y;

//  T(x,y) {x==0, y==0}

   x = y = 0;

//  T() {x==0, y==0}

   if (x==4&&y==2)

//  T() {0==-1}

      checking_error();

//  T(x,y) {x#init+y<=x+y#init, y<=x, 0<=y, y#init<=y}

   while (rand_b())

//  T(x,y) {x==x#init+1, y#init<=y, y<=y#init+1}

      if (rand_b()) {

//  T() {y<=1}

         if (!(y<=1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, y<=1}

         x++;

//  T() {y<=1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x<=y+1}

         if (!(y>=x-1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x<=y+2}

         x++;

//  T(y) {y==y#init+1, x<=y+1}

         y++;

//  T() {x<=y+1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x, y;

//  T(x,y) {x==0, y==0}

   x = y = 0;

//  T() {x==0, y==0}

   if (x==4&&y==2)

//  T() {0==-1}

      checking_error();

//  T(x,y) {x#init+y<=x+y#init, y<=x, x<=y+1, 0<=y, y<=1, y#init<=y}

   while (rand_b())

//  T(x,y) {x==x#init+1, x<=y+1, y<=1, y#init<=y, y<=y#init+1}

      if (rand_b()) {

//  T() {x<=y, y<=1}

         if (!(y<=1&&y>x-1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x<=y+1, y<=1}

         x++;

//  T() {x<=y+1, y<=1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x<=y+1, y<=0}

         if (!(y>=x-1&&y<1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x<=y+2, y<=0}

         x++;

//  T(y) {y==y#init+1, x<=y+1, y<=1}

         y++;

//  T() {x<=y+1, y<=1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }

//  T(x,y) {x#init+1<=x, x#init+y+1<=x+2y#init, 1<=x#init,
//    2y#init+1<=x#init+y, x#init<=y#init+1, y#init<=1}

   if (rand_b()) {

//  T() {x==y+1, 1<=x, x<=2}

      if (!(y<=1&&y==x-1))

//  T() {0==-1}

         deadlock();

//  T(x) {x==x#init+1, x==y+2, 2<=x, x<=3}

      x++;

//  T() {x==y+2, 2<=x, x<=3}

      if (x==4&&y==2)

//  T() {0==-1}

         checking_error();

//  T(x) {x#init<=x, y+2<=x, 0<=y, y<=1}

      while (rand_b()) {

//  T() {0<=y, y<=1}

         if (!(y<=1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 0<=y, y<=1}

         x++;

//  T() {0<=y, y<=1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }
   }
   else {

//  T() {y==1, 1<=x, x<=2}

      if (!(y>=x-1&&y==1))

//  T() {0==-1}

         deadlock();

//  T(x) {x==x#init+1, y==1, 2<=x, x<=3}

      x++;

//  T(y) {y==2, y#init==1, 2<=x, x<=3}

      y++;

//  T() {y==2, 2<=x, x<=3}

      if (x==4&&y==2)

//  T() {0==-1}

         checking_error();

//  T(x,y) {x+y#init==x#init+y, x#init<=x, y<=x, x<=y+1, 2<=y}

      while (rand_b()) {

//  T() {x<=y+1}

         if (!(y>=x-1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x<=y+2}

         x++;

//  T(y) {y==y#init+1, x<=y+1}

         y++;

//  T() {x<=y+1}

         if (x==4&&y==2)

//  T() {0==-1}

            checking_error();
      }
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x, y;

//  P() {}

   x = y = 0;

//  P(x,y) {x==0, y==0}

   if (x==4&&y==2)

//  P() {0==-1}

      checking_error();

//  P(x,y) {x==0, y==0}

   while (rand_b())

//  P(x,y) {y<=x, 0<=y}

      if (rand_b()) {

//  P(x,y) {y<=x, 0<=y}

         if (!(y<=1))

//  P(x,y) {y<=x, 2<=y}

            deadlock();

//  P(x,y) {y<=x, 0<=y, y<=1}

         x++;

//  P(x,y) {y+1<=x, 0<=y, y<=1}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,y) {y<=x, 0<=y}

         if (!(y>=x-1))

//  P(x,y) {y+2<=x, 0<=y}

            deadlock();

//  P(x,y) {y<=x, x<=y+1, 0<=y}

         x++;

//  P(x,y) {y+1<=x, x<=y+2, 0<=y}

         y++;

//  P(x,y) {y<=x, x<=y+1, 1<=y}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x, y;

//  P() {}

   x = y = 0;

//  P(x,y) {x==0, y==0}

   if (x==4&&y==2)

//  P() {0==-1}

      checking_error();

//  P(x,y) {x==0, y==0}

   while (rand_b())

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

      if (rand_b()) {

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

         if (!(y<=1&&y>x-1))

//  P(x,y) {x==y+1, 1<=x, x<=2}

            deadlock();

//  P(x,y) {x==y, 0<=x, x<=1}

         x++;

//  P(x,y) {x==y+1, 1<=x, x<=2}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

         if (!(y>=x-1&&y<1))

//  P(x,y) {y==1, 1<=x, x<=2}

            deadlock();

//  P(x,y) {y==0, 0<=x, x<=1}

         x++;

//  P(x,y) {y==0, 1<=x, x<=2}

         y++;

//  P(x,y) {y==1, 1<=x, x<=2}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

   if (rand_b()) {

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

      if (!(y<=1&&y==x-1))

//  P(x,y) {x==y, 0<=x, x<=1}

         deadlock();

//  P(x,y) {x==y+1, 1<=x, x<=2}

      x++;

//  P(x,y) {x==y+2, 2<=x, x<=3}

      if (x==4&&y==2)

//  P() {0==-1}

         checking_error();

//  P(x,y) {x==y+2, 2<=x, x<=3}

      while (rand_b()) {

//  P(x,y) {y+2<=x, 0<=y, y<=1}

         if (!(y<=1))

//  P() {0==-1}

            deadlock();

//  P(x,y) {y+2<=x, 0<=y, y<=1}

         x++;

//  P(x,y) {y+3<=x, 0<=y, y<=1}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }
   }
   else {

//  P(x,y) {y<=x, x<=y+1, 0<=y, y<=1}

      if (!(y>=x-1&&y==1))

//  P(x,y) {y==0, 0<=x, x<=1}

         deadlock();

//  P(x,y) {y==1, 1<=x, x<=2}

      x++;

//  P(x,y) {y==1, 2<=x, x<=3}

      y++;

//  P(x,y) {y==2, 2<=x, x<=3}

      if (x==4&&y==2)

//  P() {0==-1}

         checking_error();

//  P(x,y) {y==2, 2<=x, x<=3}

      while (rand_b()) {

//  P(x,y) {y<=x, x<=y+1, 2<=y}

         if (!(y>=x-1))

//  P() {0==-1}

            deadlock();

//  P(x,y) {y<=x, x<=y+1, 2<=y}

         x++;

//  P(x,y) {y+1<=x, x<=y+2, 2<=y}

         y++;

//  P(x,y) {y<=x, x<=y+1, 3<=y}

         if (x==4&&y==2)

//  P() {0==-1}

            checking_error();
      }
   }
}

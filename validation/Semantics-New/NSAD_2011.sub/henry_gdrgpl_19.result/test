
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x, d;

//  T(x) {x==0}

   x = 0;

//  T(d) {d==1, x==0}

   d = 1;

//  T() {d==1, x==0}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

      checking_error();

//  T(d,x) {0<=d+1, d<=1, 2x<=d+1999, 0<=x}

   while (rand_b())

//  T(d,x) {d+x#init==x, 0<=d+1, d<=1, 2x<=d+1999, d+1<=2x}

      if (rand_b()) {

//  T() {x==0}

         if (!(x==0))

//  T() {0==-1}

            deadlock();

//  T(d) {d==1, x==0}

         d = 1;

//  T(x) {d==1, x==1, x#init==0}

         x += d;

//  T() {d==1, x==1}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {1<=x, x<=999}

         if (!(1<=x&&x<=999))

//  T() {0==-1}

            deadlock();

//  T(x) {d+x#init==x, 1<=x#init, x#init<=999}

         x += d;

//  T() {0<=d+1, d<=1, x<=d+999, 2x<=d+1999, d+1<=x}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x==1000}

         if (!(x==1000))

//  T() {0==-1}

            deadlock();

//  T(d) {d==-1, x==1000}

         d = -1;

//  T(x) {d==-1, x==999, x#init==1000}

         x += d;

//  T() {d==-1, x==999}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x, d;

//  T(x) {x==0}

   x = 0;

//  T(d) {d==1, x==0}

   d = 1;

//  T() {d==1, x==0}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

      checking_error();

//  T() {d==1, x==0}

   if (!(x==0))

//  T() {0==-1}

      deadlock();

//  T(d) {d==1, d#init==1, x==0}

   d = 1;

//  T(x) {d==1, x==1, x#init==0}

   x += d;

//  T() {d==1, x==1}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

      checking_error();

//  T(d,x) {d==1, d#init==1, x==1}

   while (rand_b()) {

//  T(x) {}

      while (rand_b()) {

//  T() {1<=x, x<=998}

         if (!(1<=x&&x<=998))

//  T() {0==-1}

            deadlock();

//  T(x) {d+x#init==x, 1<=x#init, x#init<=998}

         x += d;

//  T() {0<=d+1, d<=1, x<=d+998, 2x<=d+1999, d+1<=x}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

            checking_error();
      }

//  T() {x==999}

      if (!(x==999))

//  T() {0==-1}

         deadlock();

//  T(x) {d==x-999, x#init==999}

      x += d;

//  T() {d==x-999, 0<=d+1, d<=1}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

         checking_error();

//  T() {d==1, x==1000}

      if (!(x==1000))

//  T() {0==-1}

         deadlock();

//  T(d) {d==-1, d#init==1, x==1000}

      d = -1;

//  T(x) {d==-1, x==999, x#init==1000}

      x += d;

//  T() {d==-1, x==999}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

         checking_error();

//  T(x) {d==-1, 1<=x, x<=999, x<=x#init}

      while (rand_b()) {

//  T() {d==-1, 2<=x, x<=999}

         if (!(2<=x&&x<=999))

//  T() {0==-1}

            deadlock();

//  T(x) {d==-1, x==x#init-1, 1<=x, x<=998}

         x += d;

//  T() {d==-1, 1<=x, x<=998}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

            checking_error();
      }

//  T() {d==-1, x==1}

      if (!(x==1))

//  T() {0==-1}

         deadlock();

//  T(x) {d==-1, x==0, x#init==1}

      x += d;

//  T() {d==-1, x==0}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

         checking_error();

//  T() {d==-1, x==0}

      if (!(x==0))

//  T() {0==-1}

         deadlock();

//  T(d) {d==1, d#init==-1, x==0}

      d = 1;

//  T(x) {d==1, x==1, x#init==0}

      x += d;

//  T() {d==1, x==1}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x, d;

//  P() {}

   x = 0;

//  P(x) {x==0}

   d = 1;

//  P(d,x) {d==1, x==0}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

      checking_error();

//  P(d,x) {d==1, x==0}

   while (rand_b())

//  P(d,x) {0<=d+1, d<=1, 2x<=d+1999, 0<=x}

      if (rand_b()) {

//  P(d,x) {0<=d+1, d<=1, 2x<=d+1999, 0<=x}

         if (!(x==0))

//  P(d,x) {0<=d+1, d<=1, 2x<=d+1999, 1<=x}

            deadlock();

//  P(d,x) {x==0, 0<=d+1, d<=1}

         d = 1;

//  P(d,x) {d==1, x==0}

         x += d;

//  P(d,x) {d==1, x==1}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  P(d,x) {0<=d+1, d<=1, 2x<=d+1999, 0<=x}

         if (!(1<=x&&x<=999))

//  P(d,x) {0<=d+1, d<=1, x<=500d+500, 2x<=d+1999, 0<=x}

            deadlock();

//  P(d,x) {0<=d+1, d<=1, 1<=x, x<=999}

         x += d;

//  P(d,x) {0<=d+1, d<=1, x<=d+999, d+1<=x}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(d,x) {0<=d+1, d<=1, 2x<=d+1999, 0<=x}

         if (!(x==1000))

//  P(d,x) {0<=d+1, d<=1, 0<=x, x<=999}

            deadlock();

//  P(d,x) {d==1, x==1000}

         d = -1;

//  P(d,x) {d==-1, x==1000}

         x += d;

//  P(d,x) {d==-1, x==999}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x, d;

//  P() {}

   x = 0;

//  P(x) {x==0}

   d = 1;

//  P(d,x) {d==1, x==0}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

      checking_error();

//  P(d,x) {d==1, x==0}

   if (!(x==0))

//  P() {0==-1}

      deadlock();

//  P(d,x) {d==1, x==0}

   d = 1;

//  P(d,x) {d==1, x==0}

   x += d;

//  P(d,x) {d==1, x==1}

   if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

      checking_error();

//  P(d,x) {d==1, x==1}

   while (rand_b()) {

//  P(d,x) {d==1, x==1}

      while (rand_b()) {

//  P(d,x) {d==1, 1<=x, x<=999}

         if (!(1<=x&&x<=998))

//  P(d,x) {d==1, x==999}

            deadlock();

//  P(d,x) {d==1, 1<=x, x<=998}

         x += d;

//  P(d,x) {d==1, 2<=x, x<=999}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

            checking_error();
      }

//  P(d,x) {d==1, 1<=x, x<=999}

      if (!(x==999))

//  P(d,x) {d==1, 1<=x, x<=998}

         deadlock();

//  P(d,x) {d==1, x==999}

      x += d;

//  P(d,x) {d==1, x==1000}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

         checking_error();

//  P(d,x) {d==1, x==1000}

      if (!(x==1000))

//  P() {0==-1}

         deadlock();

//  P(d,x) {d==1, x==1000}

      d = -1;

//  P(d,x) {d==-1, x==1000}

      x += d;

//  P(d,x) {d==-1, x==999}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

         checking_error();

//  P(d,x) {d==-1, x==999}

      while (rand_b()) {

//  P(d,x) {d==-1, 1<=x, x<=999}

         if (!(2<=x&&x<=999))

//  P(d,x) {d==-1, x==1}

            deadlock();

//  P(d,x) {d==-1, 2<=x, x<=999}

         x += d;

//  P(d,x) {d==-1, 1<=x, x<=998}

         if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

            checking_error();
      }

//  P(d,x) {d==-1, 1<=x, x<=999}

      if (!(x==1))

//  P(d,x) {d==-1, 2<=x, x<=999}

         deadlock();

//  P(d,x) {d==-1, x==1}

      x += d;

//  P(d,x) {d==-1, x==0}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

         checking_error();

//  P(d,x) {d==-1, x==0}

      if (!(x==0))

//  P() {0==-1}

         deadlock();

//  P(d,x) {d==-1, x==0}

      d = 1;

//  P(d,x) {d==1, x==0}

      x += d;

//  P(d,x) {d==1, x==1}

      if (!(-1<=d&&d<=1&&d>=2*x-1999))

//  P() {0==-1}

         checking_error();
   }
}

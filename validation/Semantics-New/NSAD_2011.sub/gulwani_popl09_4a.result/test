
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int n, m, x, y, c1, c2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T(c1,c2,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=m&&c2<=n))

//  T() {0==-1}

      checking_error();

//  T(c1,c2,x,y) {c1==y, c1#init==y#init, c2==x, c2#init==x#init,
//    0<=c1, c1#init<=c1, c1<=m, 0<=c2, c2<=n, x#init<=c2}

   while (rand_b())

//  T(c1,c2,x,y) {c1+c2==c1#init+c2#init+1, c1+x==c1#init+x#init+1,
//    c1+y#init==c1#init+y, c1#init<=c1, c1<=c1#init+1,
//    c1+x<=c1#init+n, c1<=m, c2<=n, 0<=m, 0<=n}

      if (rand_b()) {

//  T() {0<=m, y+1<=m, 0<=n, x+1<=n}

         if (!(x<n&&y<m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==y#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         y++;

//  T(c1) {c1==c1#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         c1++;

//  T() {c1<=m, c2<=n, 0<=m, y<=m, 0<=n, x+1<=n}

         if (!(c1<=m&&c2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {0<=m, m<=y, 0<=n, x+1<=n}

         if (!(x<n&&y>=m))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 0<=m, m<=y, 0<=n, x<=n}

         x++;

//  T(c2) {c2==c2#init+1, 0<=m, m<=y, 0<=n, x<=n}

         c2++;

//  T() {c1<=m, c2<=n, 0<=m, m<=y, 0<=n, x<=n}

         if (!(c1<=m&&c2<=n))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int n, m, x, y, c1, c2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T(c1,c2,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=m&&c2<=n))

//  T() {0==-1}

      checking_error();

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 1<=n}

   if (y<m) goto L1;

//  T() {c1==m, c1==y, c2==0, x==0, 0<=c1, 1<=n}

L2:   ;

//  T(c2,x) {c1==m, c1==y, c2==x, c2#init==x#init, 0<=c1, 0<=c2,
//    c2#init<=c2, c2+1<=n}

   while (rand_b()) {

//  T() {c1==m, c1==y, 0<=c1, 1<=n, x+2<=n}

      if (!(x<n-1&&y>=m))

//  T() {0==-1}

         deadlock();

//  T(x) {c1==m, c1==y, x==x#init+1, 0<=c1, 1<=n, x+1<=n}

      x++;

//  T(c2) {c1==m, c1==y, c2==c2#init+1, 0<=c1, 1<=n, x+1<=n}

      c2++;

//  T() {c1==m, c1==y, 0<=c1, c2<=n, 1<=n, x+1<=n}

      if (!(c1<=m&&c2<=n))

//  T() {0==-1}

         checking_error();
   }

//  T() {c1==m, c1==y, c2==n-1, c2==x, 0<=c1, 0<=c2}

   if (!(x==n-1&&y>=m))

//  T() {0==-1}

      deadlock();

//  T(x) {c1==m, c1==y, c2==n-1, c2==x-1, c2==x#init, 0<=c1, 0<=c2}

   x++;

//  T(c2) {c1==m, c1==y, c2==c2#init+1, c2==n, c2==x, 0<=c1, 1<=c2}

   c2++;

//  T() {c1==m, c1==y, c2==n, c2==x, 0<=c1, 1<=c2}

   if (!(c1<=m&&c2<=n))

//  T() {0==-1}

      checking_error();
   goto L3;

//  T() {c1==0, c2==0, x==0, y==0, 1<=m, 1<=n}

L1:   ;

//  T(c1,y) {c1==y, c1#init==y#init, c2==0, x==0, 0<=c1, c1+1<=m,
//    y#init<=c1, 1<=n}

   while (rand_b()) {

//  T() {c2==0, x==0, 1<=m, y+2<=m, 1<=n}

      if (!(x<n&&y<m-1))

//  T() {0==-1}

         deadlock();

//  T(y) {c2==0, x==0, y==y#init+1, 1<=m, y+1<=m, 1<=n}

      y++;

//  T(c1) {c1==c1#init+1, c2==0, x==0, 1<=m, y+1<=m, 1<=n}

      c1++;

//  T() {c2==0, x==0, c1<=m, 1<=m, y+1<=m, 1<=n}

      if (!(c1<=m&&c2<=n))

//  T() {0==-1}

         checking_error();
   }

//  T() {c1==m-1, c1==y, c2==0, x==0, 0<=c1, 1<=n}

   if (!(x<n&&y==m-1))

//  T() {0==-1}

      deadlock();

//  T(y) {c1==m-1, c1==y-1, c1==y#init, c2==0, x==0, 0<=c1, 1<=n}

   y++;

//  T(c1) {c1==c1#init+1, c1==m, c1==y, c2==0, x==0, 1<=c1, 1<=n}

   c1++;

//  T() {c1==m, c1==y, c2==0, x==0, 1<=c1, 1<=n}

   if (!(c1<=m&&c2<=n))

//  T() {0==-1}

      checking_error();
   goto L2;

//  T() {c1==y, c2==n, c2==x, 0<=c1, c1<=m, 0<=c2}

L3:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int n, m, x, y, c1, c2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=m&&c2<=n))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   while (rand_b())

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1<=m, 0<=c2, c2<=n}

      if (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1<=m, 0<=c2, c2<=n}

         if (!(x<n&&y<m))

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1<=m, 0<=c2, c2<=n}

            deadlock();

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1+1<=m, 0<=c2, c2+1<=n}

         y++;

//  P(c1,c2,m,n,x,y) {c1==y-1, c2==x, 0<=c1, c1+1<=m, 0<=c2, c2+1<=n,
//    0<=m, 0<=n}

         c1++;

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 1<=c1, c1<=m, 0<=c2, c2+1<=n,
//    0<=m, 0<=n}

         if (!(c1<=m&&c2<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1<=m, 0<=c2, c2<=n}

         if (!(x<n&&y>=m))

//  P(c1,c2,m,n,x,y) {c1==y, c2==x, 0<=c1, c1<=m, 0<=c2, c2<=n}

            deadlock();

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 0<=c2, c2+1<=n}

         x++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x-1, 0<=c1, 0<=c2, c2+1<=n,
//    0<=n}

         c2++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 1<=c2, c2<=n, 0<=n}

         if (!(c1<=m&&c2<=n))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int n, m, x, y, c1, c2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=m&&c2<=n))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 1<=n}

   if (y<m) goto L1;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==0, x==0, 0<=c1, 1<=n}

L2:   ;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==0, x==0, 0<=c1, 1<=n}

   while (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 0<=c2, c2+1<=n}

      if (!(x<n-1&&y>=m))

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==n-1, c2==x, 0<=c1, 0<=c2}

         deadlock();

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 0<=c2, c2+2<=n}

      x++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x-1, 0<=c1, 0<=c2, c2+2<=n,
//    1<=n}

      c2++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 1<=c2, c2+1<=n,
//    1<=n}

      if (!(c1<=m&&c2<=n))

//  P() {0==-1}

         checking_error();
   }

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 0<=c2, c2+1<=n}

   if (!(x==n-1&&y>=m))

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==x, 0<=c1, 0<=c2, c2+2<=n}

      deadlock();

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==n-1, c2==x, 0<=c1, 0<=c2}

   x++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==n-1, c2==x-1, 0<=c1, 0<=c2}

   c2++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==n, c2==x, 0<=c1, 1<=c2}

   if (!(c1<=m&&c2<=n))

//  P() {0==-1}

      checking_error();
   goto L3;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 1<=m, 1<=n}

L1:   ;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 1<=m, 1<=n}

   while (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==y, c2==0, x==0, 0<=c1, c1+1<=m, 1<=n}

      if (!(x<n&&y<m-1))

//  P(c1,c2,m,n,x,y) {c1==m-1, c1==y, c2==0, x==0, 0<=c1, 1<=n}

         deadlock();

//  P(c1,c2,m,n,x,y) {c1==y, c2==0, x==0, 0<=c1, c1+2<=m, 1<=n}

      y++;

//  P(c1,c2,m,n,x,y) {c1==y-1, c2==0, x==0, 0<=c1, c1+2<=m, 1<=m,
//    1<=n}

      c1++;

//  P(c1,c2,m,n,x,y) {c1==y, c2==0, x==0, 1<=c1, c1+1<=m, 1<=m, 1<=n}

      if (!(c1<=m&&c2<=n))

//  P() {0==-1}

         checking_error();
   }

//  P(c1,c2,m,n,x,y) {c1==y, c2==0, x==0, 0<=c1, c1+1<=m, 1<=n}

   if (!(x<n&&y==m-1))

//  P(c1,c2,m,n,x,y) {c1==y, c2==0, x==0, 0<=c1, c1+2<=m, 1<=n}

      deadlock();

//  P(c1,c2,m,n,x,y) {c1==m-1, c1==y, c2==0, x==0, 0<=c1, 1<=n}

   y++;

//  P(c1,c2,m,n,x,y) {c1==m-1, c1==y-1, c2==0, x==0, 0<=c1, 1<=n}

   c1++;

//  P(c1,c2,m,n,x,y) {c1==m, c1==y, c2==0, x==0, 1<=c1, 1<=n}

   if (!(c1<=m&&c2<=n))

//  P() {0==-1}

      checking_error();
   goto L2;

//  P(c1,c2,m,n,x,y) {c1==y, c2==n, c2==x, 0<=c1, c1<=m, 0<=c2}

L3:   ;
}

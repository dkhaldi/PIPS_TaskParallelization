
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int s, lock, x, y;

//  T(lock) {lock==0}

   lock = 0;

//  T(x) {lock==0, 0<=x}

   x = rand();

//  T(y) {lock==0, 0<=x, 0<=y}

   y = rand();

//  T() {lock==0, 0<=x, 1<=x+y, 0<=y}

   if (!(x!=y))

//  T() {0==-1}

      deadlock();

//  T(s) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   s = 1;

//  T() {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();

//  T(lock,s,x,y) {1<=s, s<=2, s#init<=s, 0<=x, 0<=y, y#init<=y}

   while (rand_b())

//  T(lock,s,x,y) {s#init==1, x==y#init, 1<=s, s+y<=x+2, x<=y}

      if (rand_b()) {

//  T() {s==1}

         if (!(s==1&&x!=y))

//  T() {0==-1}

            deadlock();

//  T(lock) {lock==1, s==1}

         lock = 1;

//  T(x) {lock==1, s==1, x==y}

         x = y;

//  T() {lock==1, s==1, x==y}

         if (s==2&&lock==0)

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {s==1}

         if (!(s==1&&x!=y))

//  T() {0==-1}

            deadlock();

//  T(lock) {lock==0, s==1}

         lock = 0;

//  T(x) {lock==0, s==1, x==y}

         x = y;

//  T(y) {lock==0, s==1, x==y-1, x==y#init}

         y++;

//  T() {lock==0, s==1, x==y-1}

         if (s==2&&lock==0)

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {s==1, x==y}

         if (!(s==1&&x==y))

//  T() {0==-1}

            deadlock();

//  T(s) {s==2, s#init==1, x==y}

         s = 2;

//  T() {s==2, x==y}

         if (s==2&&lock==0)

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int s, lock, x, y;

//  T(lock) {lock==0}

   lock = 0;

//  T(x) {lock==0, 0<=x}

   x = rand();

//  T(y) {lock==0, 0<=x, 0<=y}

   y = rand();

//  T() {lock==0, 0<=x, 1<=x+y, 0<=y}

   if (!(x!=y))

//  T() {0==-1}

      deadlock();

//  T(s) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   s = 1;

//  T() {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();

//  T() {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (x<y) goto L1;

//  T() {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

L2:   ;

//  T() {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

   if (rand_b()) goto l99999;

//  T() {lock==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   if (!(s==1&&x!=y))

//  T() {0==-1}

      deadlock();

//  T(lock) {lock==1, lock#init==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   lock = 1;

//  T(x) {lock==1, s==1, x==y, 0<=x, 1<=x+x#init, x+1<=x#init,
//    0<=x#init}

   x = y;

//  T() {lock==1, s==1, x==y, 0<=x}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();
   goto L3;
l99999:   ;

//  T() {lock==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   if (!(s==1&&x!=y))

//  T() {0==-1}

      deadlock();

//  T(lock) {lock==0, lock#init==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   lock = 0;

//  T(x) {lock==0, s==1, x==y, 0<=x, 1<=x+x#init, x+1<=x#init,
//    0<=x#init}

   x = y;

//  T(y) {lock==0, s==1, x==y-1, x==y#init, 0<=x}

   y++;

//  T() {lock==0, s==1, x==y-1, 0<=x}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();

//  T() {lock==0, s==1, 0<=x, x+1<=y}

L1:   ;

//  T(lock,x,y) {lock==0, s==1, 0<=x, x+1<=y, y#init<=y}

   while (rand_b()) {

//  T() {s==1}

      if (!(s==1&&x!=y))

//  T() {0==-1}

         deadlock();

//  T(lock) {lock==0, s==1}

      lock = 0;

//  T(x) {lock==0, s==1, x==y}

      x = y;

//  T(y) {lock==0, s==1, x==y-1, x==y#init}

      y++;

//  T() {lock==0, s==1, x==y-1}

      if (s==2&&lock==0)

//  T() {0==-1}

         checking_error();
   }

//  T() {s==1, 1<=y}

   if (!(s==1&&x!=y))

//  T() {0==-1}

      deadlock();

//  T(lock) {lock==1, s==1, 1<=y}

   lock = 1;

//  T(x) {lock==1, s==1, x==y, 1<=x}

   x = y;

//  T() {lock==1, s==1, x==y, 1<=x}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();

//  T() {lock==1, s==1, x==y, 0<=x}

L3:   ;

//  T() {lock==1, s==1, x==y, 0<=x}

   if (!(s==1&&x==y))

//  T() {0==-1}

      deadlock();

//  T(s) {lock==1, s==2, s#init==1, x==y, 0<=x}

   s = 2;

//  T() {lock==1, s==2, x==y, 0<=x}

   if (s==2&&lock==0)

//  T() {0==-1}

      checking_error();

//  T() {lock==1, s==2, x==y, 0<=x}

L4:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int s, lock, x, y;

//  P() {}

   lock = 0;

//  P(lock) {lock==0}

   x = rand();

//  P(lock,x) {lock==0, 0<=x}

   y = rand();

//  P(lock,x,y) {lock==0, 0<=x, 0<=y}

   if (!(x!=y))

//  P(lock,x,y) {lock==0, x==y, 0<=x}

      deadlock();

//  P(lock,x,y) {lock==0, 0<=x, 1<=x+y, 0<=y}

   s = 1;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   while (rand_b())

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

      if (rand_b()) {

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

         if (!(s==1&&x!=y))

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

            deadlock();

//  P(lock,s,x,y) {s==1, 0<=x, 1<=x+y, 0<=y}

         lock = 1;

//  P(lock,s,x,y) {lock==1, s==1, 0<=x, 1<=x+y, 0<=y}

         x = y;

//  P(lock,s,x,y) {lock==1, s==1, x==y, 0<=x}

         if (s==2&&lock==0)

//  P() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

         if (!(s==1&&x!=y))

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

            deadlock();

//  P(lock,s,x,y) {s==1, 0<=x, 1<=x+y, 0<=y}

         lock = 0;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

         x = y;

//  P(lock,s,x,y) {lock==0, s==1, x==y, 0<=x}

         y++;

//  P(lock,s,x,y) {lock==0, s==1, x==y-1, 0<=x}

         if (s==2&&lock==0)

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(lock,s,x,y) {1<=s, s<=2, 0<=x, 0<=y}

         if (!(s==1&&x==y))

//  P(lock,s,x,y) {1<=s, s<=2, 2<=s+x+y, 0<=x, 0<=y}

            deadlock();

//  P(lock,s,x,y) {s==1, x==y, 0<=x}

         s = 2;

//  P(lock,s,x,y) {s==2, x==y, 0<=x}

         if (s==2&&lock==0)

//  P(lock,s,x,y) {lock==0, s==2, x==y, 0<=x}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int s, lock, x, y;

//  P() {}

   lock = 0;

//  P(lock) {lock==0}

   x = rand();

//  P(lock,x) {lock==0, 0<=x}

   y = rand();

//  P(lock,x,y) {lock==0, 0<=x, 0<=y}

   if (!(x!=y))

//  P(lock,x,y) {lock==0, x==y, 0<=x}

      deadlock();

//  P(lock,x,y) {lock==0, 0<=x, 1<=x+y, 0<=y}

   s = 1;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, 0<=y}

   if (x<y) goto L1;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

L2:   ;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

   if (rand_b()) goto l99999;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

   if (!(s==1&&x!=y))

//  P(lock,s,x,y) {lock==0, s==1, x==y, 1<=x}

      deadlock();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   lock = 1;

//  P(lock,s,x,y) {lock==1, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   x = y;

//  P(lock,s,x,y) {lock==1, s==1, x==y, 0<=x}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();
   goto L3;
l99999:   ;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, y<=x, 1<=x+y, 0<=y}

   if (!(s==1&&x!=y))

//  P(lock,s,x,y) {lock==0, s==1, x==y, 1<=x}

      deadlock();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   lock = 0;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, 1<=x+y, y+1<=x, 0<=y}

   x = y;

//  P(lock,s,x,y) {lock==0, s==1, x==y, 0<=x}

   y++;

//  P(lock,s,x,y) {lock==0, s==1, x==y-1, 0<=x}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

L1:   ;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

   while (rand_b()) {

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

      if (!(s==1&&x!=y))

//  P() {0==-1}

         deadlock();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

      lock = 0;

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

      x = y;

//  P(lock,s,x,y) {lock==0, s==1, x==y, 1<=x}

      y++;

//  P(lock,s,x,y) {lock==0, s==1, x==y-1, 1<=x}

      if (s==2&&lock==0)

//  P() {0==-1}

         checking_error();
   }

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

   if (!(s==1&&x!=y))

//  P() {0==-1}

      deadlock();

//  P(lock,s,x,y) {lock==0, s==1, 0<=x, x+1<=y}

   lock = 1;

//  P(lock,s,x,y) {lock==1, s==1, 0<=x, x+1<=y, 1<=y}

   x = y;

//  P(lock,s,x,y) {lock==1, s==1, x==y, 1<=x}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();

//  P(lock,s,x,y) {lock==1, s==1, x==y, 0<=x}

L3:   ;

//  P(lock,s,x,y) {lock==1, s==1, x==y, 0<=x}

   if (!(s==1&&x==y))

//  P() {0==-1}

      deadlock();

//  P(lock,s,x,y) {lock==1, s==1, x==y, 0<=x}

   s = 2;

//  P(lock,s,x,y) {lock==1, s==2, x==y, 0<=x}

   if (s==2&&lock==0)

//  P() {0==-1}

      checking_error();

//  P(lock,s,x,y) {lock==1, s==2, x==y, 0<=x}

L4:   ;
}

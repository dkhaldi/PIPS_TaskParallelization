
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int n0, n, f, s, i;

//  T(n0) {0<=n0}

   n0 = rand();

//  T(n) {n==n0, 0<=n}

   n = n0;

//  T(f) {f==1, n==n0, 0<=n}

   f = 1;

//  T(s) {f==1, n==n0, s==1, 0<=n}

   s = 1;

//  T(i) {f==1, i==0, n==n0, s==1, 0<=n}

   i = 0;

//  T() {f==1, i==0, n==n0, s==1, 0<=n}

   if (!(i<=n0+1))

//  T() {0==-1}

      checking_error();

//  T(f,i,n,s) {i#init+n#init<=i+n, i#init+n#init+s<=i+n+s#init,
//    n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n#init, n<=n0, 1<=s, s<=2}

   while (rand_b())

//  T(f,i,n,s) {i+n+s#init==i#init+n#init+2, i#init+s==i+1,
//    i<=i#init+1, i#init+2<=i+s#init, i<=n0+1, 0<=n0, s#init<=2}

      if (rand_b()) {

//  T() {f==1, s==1, 0<=n0}

         if (!(s==1&&f==1))

//  T() {0==-1}

            deadlock();

//  T(s) {f==1, s==2, s#init==1, 0<=n0}

         s = 2;

//  T(f) {f==0, f#init==1, s==2, 0<=n0}

         f = 0;

//  T(i) {f==0, i==i#init+1, s==2, 0<=n0}

         i++;

//  T() {f==0, s==2, i<=n0+1, 0<=n0}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {s==2, 1<=n, 0<=n0}

         if (!(n>0&&s==2))

//  T() {0==-1}

            deadlock();

//  T(n) {n==n#init-1, s==2, 0<=n, 0<=n0}

         n--;

//  T(f) {f==1, s==2, 0<=n, 0<=n0}

         f = 1;

//  T(i) {f==1, i==i#init+1, s==2, 0<=n, 0<=n0}

         i++;

//  T() {f==1, s==2, i<=n0+1, 0<=n, 0<=n0}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {s==2, 0<=n0}

         if (!(s==2))

//  T() {0==-1}

            deadlock();

//  T(s) {s==1, s#init==2, 0<=n0}

         s = 1;

//  T() {s==1, i<=n0+1, 0<=n0}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int n0, n, f, s, i;

//  T(n0) {0<=n0}

   n0 = rand();

//  T(n) {n==n0, 0<=n}

   n = n0;

//  T(f) {f==1, n==n0, 0<=n}

   f = 1;

//  T(s) {f==1, n==n0, s==1, 0<=n}

   s = 1;

//  T(i) {f==1, i==0, n==n0, s==1, 0<=n}

   i = 0;

//  T() {f==1, i==0, n==n0, s==1, 0<=n}

   if (!(i<=n0+1))

//  T() {0==-1}

      checking_error();

//  T(f,i,n,s) {f==s-1, f#init==1, i+n==n#init+1, i#init==0,
//    n#init==n0, s#init==1, 0<=f, f<=1, f+n<=n#init, 0<=n}

   if (n>0) {

//  T() {f==1, i==0, n==n0, s==1, 1<=n}

      if (!(s==1&&f==1))

//  T() {0==-1}

         deadlock();

//  T(s) {f==1, i==0, n==n0, s==2, s#init==1, 1<=n}

      s = 2;

//  T(f) {f==0, f#init==1, i==0, n==n0, s==2, 1<=n}

      f = 0;

//  T(i) {f==0, i==1, i#init==0, n==n0, s==2, 1<=n}

      i++;

//  T() {f==0, i==1, n==n0, s==2, 1<=n}

      if (!(i<=n0+1))

//  T() {0==-1}

         checking_error();

//  T(f,i,n,s) {f==s-1, f#init==0, i+n==n#init+1, i#init==1,
//    n#init==n0, s#init==2, 0<=f, f<=1, f+1<=i, i<=f+n#init}

      if (rand_b()) {

//  T() {f==0, i==1, n==n0, s==2, 2<=n}

         if (!(n>0&&s==2&&n>1))

//  T() {0==-1}

            deadlock();

//  T(n) {f==0, i==1, n==n#init-1, n==n0-1, s==2, 1<=n}

         n--;

//  T(f) {f==1, f#init==0, i==1, n==n0-1, s==2, 1<=n}

         f = 1;

//  T(i) {f==1, i==2, i#init==1, n==n0-1, s==2, 1<=n}

         i++;

//  T() {f==1, i==2, n==n0-1, s==2, 1<=n}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();

//  T(f,i,n) {f==1, i+n==i#init+n#init, i+n==n0+1, s==2, 1<=n,
//    n<=n#init, n+1<=n0}

         while (rand_b()) {

//  T() {s==2, 2<=n, 2<=n0}

            if (!(n>0&&s==2&&n>1))

//  T() {0==-1}

               deadlock();

//  T(n) {n==n#init-1, s==2, 1<=n, 2<=n0}

            n--;

//  T(f) {f==1, s==2, 1<=n, 2<=n0}

            f = 1;

//  T(i) {f==1, i==i#init+1, s==2, 1<=n, 2<=n0}

            i++;

//  T() {f==1, s==2, i<=n0+1, 1<=n, 2<=n0}

            if (!(i<=n0+1))

//  T() {0==-1}

               checking_error();
         }

//  T() {i==n0, n==1, s==2, 2<=i}

         if (!(n>0&&s==2&&n==1))

//  T() {0==-1}

            deadlock();

//  T(n) {i==n0, n==0, n#init==1, s==2, 2<=i}

         n--;

//  T(f) {f==1, i==n0, n==0, s==2, 2<=i}

         f = 1;

//  T(i) {f==1, i==i#init+1, i==n0+1, n==0, s==2, 3<=i}

         i++;

//  T() {f==1, i==n0+1, n==0, s==2, 3<=i}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {f==0, i==1, n==1, n0==1, s==2}

         if (!(n>0&&s==2&&n==1))

//  T() {0==-1}

            deadlock();

//  T(n) {f==0, i==1, n==0, n#init==1, n0==1, s==2}

         n--;

//  T(f) {f==1, f#init==0, i==1, n==0, n0==1, s==2}

         f = 1;

//  T(i) {f==1, i==2, i#init==1, n==0, n0==1, s==2}

         i++;

//  T() {f==1, i==2, n==0, n0==1, s==2}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {f==0, i==1, n==n0, s==2, 1<=n}

         if (!(s==2))

//  T() {0==-1}

            deadlock();

//  T(s) {f==0, i==1, n==n0, s==1, s#init==2, 1<=n}

         s = 1;

//  T() {f==0, i==1, n==n0, s==1, 1<=n}

         if (!(i<=n0+1))

//  T() {0==-1}

            checking_error();
      }
   }
   else {

//  T() {f==1, i==0, n==0, n==n0, s==1}

      if (!(s==1&&f==1))

//  T() {0==-1}

         deadlock();

//  T(s) {f==1, i==0, n==0, n0==0, s==2, s#init==1}

      s = 2;

//  T(f) {f==0, f#init==1, i==0, n==0, n0==0, s==2}

      f = 0;

//  T(i) {f==0, i==1, i#init==0, n==0, n0==0, s==2}

      i++;

//  T() {f==0, i==1, n==0, n0==0, s==2}

      if (!(i<=n0+1))

//  T() {0==-1}

         checking_error();

//  T() {f==0, i==1, n==0, n0==0, s==2}

      if (!(s==2))

//  T() {0==-1}

         deadlock();

//  T(s) {f==0, i==1, n==0, n0==0, s==1, s#init==2}

      s = 1;

//  T() {f==0, i==1, n==0, n0==0, s==1}

      if (!(i<=n0+1))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int n0, n, f, s, i;

//  P() {}

   n0 = rand();

//  P(n0) {0<=n0}

   n = n0;

//  P(n,n0) {n==n0, 0<=n}

   f = 1;

//  P(f,n,n0) {f==1, n==n0, 0<=n}

   s = 1;

//  P(f,n,n0,s) {f==1, n==n0, s==1, 0<=n}

   i = 0;

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 0<=n}

   if (!(i<=n0+1))

//  P() {0==-1}

      checking_error();

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 0<=n}

   while (rand_b())

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

      if (rand_b()) {

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

         if (!(s==1&&f==1))

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

            deadlock();

//  P(f,i,n,n0,s) {f==1, s==1, n0<=i+n, i<=n0+1, 0<=n, n<=n0}

         s = 2;

//  P(f,i,n,n0,s) {f==1, s==2, n0<=i+n, i<=n0+1, 0<=n, n<=n0, 0<=n0}

         f = 0;

//  P(f,i,n,n0,s) {f==0, s==2, n0<=i+n, i<=n0+1, 0<=n, n<=n0, 0<=n0}

         i++;

//  P(f,i,n,n0,s) {f==0, s==2, n0+1<=i+n, i<=n0+2, 0<=n, n<=n0, 0<=n0}

         if (!(i<=n0+1))

//  P(f,i,n,n0,s) {f==0, i==n0+2, s==2, 2<=i, n+2<=i, 0<=n}

            checking_error();
      }
      else if (rand_b()) {

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

         if (!(n>0&&s==2))

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

            deadlock();

//  P(f,i,n,n0,s) {s==2, n0+1<=i+n, i<=n0+1, 1<=n, n<=n0}

         n--;

//  P(f,i,n,n0,s) {s==2, n0<=i+n, i<=n0+1, 0<=n, n+1<=n0, 0<=n0}

         f = 1;

//  P(f,i,n,n0,s) {f==1, s==2, n0<=i+n, i<=n0+1, 0<=n, n+1<=n0, 0<=n0}

         i++;

//  P(f,i,n,n0,s) {f==1, s==2, n0+1<=i+n, i<=n0+2, 0<=n, n+1<=n0,
//    0<=n0}

         if (!(i<=n0+1))

//  P(f,i,n,n0,s) {f==1, i==n0+2, s==2, 2<=i, n+3<=i, 0<=n}

            checking_error();
      }
      else {

//  P(f,i,n,n0,s) {n0+s<=i+n+1, i<=n0+1, 0<=n, n<=n0, 1<=s, s<=2}

         if (!(s==2))

//  P(f,i,n,n0,s) {s==1, n0<=i+n, i<=n0+1, 0<=n, n<=n0}

            deadlock();

//  P(f,i,n,n0,s) {s==2, n0+1<=i+n, i<=n0+1, 0<=n, n<=n0}

         s = 1;

//  P(f,i,n,n0,s) {s==1, n0+1<=i+n, i<=n0+1, 0<=n, n<=n0, 0<=n0}

         if (!(i<=n0+1))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int n0, n, f, s, i;

//  P() {}

   n0 = rand();

//  P(n0) {0<=n0}

   n = n0;

//  P(n,n0) {n==n0, 0<=n}

   f = 1;

//  P(f,n,n0) {f==1, n==n0, 0<=n}

   s = 1;

//  P(f,n,n0,s) {f==1, n==n0, s==1, 0<=n}

   i = 0;

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 0<=n}

   if (!(i<=n0+1))

//  P() {0==-1}

      checking_error();

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 0<=n}

   if (n>0) {

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 1<=n}

      if (!(s==1&&f==1))

//  P() {0==-1}

         deadlock();

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==1, 1<=n}

      s = 2;

//  P(f,i,n,n0,s) {f==1, i==0, n==n0, s==2, 1<=n}

      f = 0;

//  P(f,i,n,n0,s) {f==0, i==0, n==n0, s==2, 1<=n}

      i++;

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

      if (!(i<=n0+1))

//  P() {0==-1}

         checking_error();

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

      if (rand_b()) {

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

         if (!(n>0&&s==2&&n>1))

//  P(f,i,n,n0,s) {f==0, i==1, n==1, n0==1, s==2}

            deadlock();

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 2<=n}

         n--;

//  P(f,i,n,n0,s) {f==0, i==1, n==n0-1, s==2, 1<=n}

         f = 1;

//  P(f,i,n,n0,s) {f==1, i==1, n==n0-1, s==2, 1<=n}

         i++;

//  P(f,i,n,n0,s) {f==1, i==2, n==n0-1, s==2, 1<=n}

         if (!(i<=n0+1))

//  P() {0==-1}

            checking_error();

//  P(f,i,n,n0,s) {f==1, i==2, n==n0-1, s==2, 1<=n}

         while (rand_b()) {

//  P(f,i,n,n0,s) {f==1, i+n==n0+1, s==2, 1<=n, n+1<=n0}

            if (!(n>0&&s==2&&n>1))

//  P(f,i,n,n0,s) {f==1, i==n0, n==1, s==2, 2<=i}

               deadlock();

//  P(f,i,n,n0,s) {f==1, i+n==n0+1, s==2, 2<=n, n+1<=n0}

            n--;

//  P(f,i,n,n0,s) {f==1, i+n==n0, s==2, 1<=n, n+2<=n0, 2<=n0}

            f = 1;

//  P(f,i,n,n0,s) {f==1, i+n==n0, s==2, 1<=n, n+2<=n0, 2<=n0}

            i++;

//  P(f,i,n,n0,s) {f==1, i+n==n0+1, s==2, 1<=n, n+2<=n0, 2<=n0}

            if (!(i<=n0+1))

//  P() {0==-1}

               checking_error();
         }

//  P(f,i,n,n0,s) {f==1, i+n==n0+1, s==2, 1<=n, n+1<=n0}

         if (!(n>0&&s==2&&n==1))

//  P(f,i,n,n0,s) {f==1, i+n==n0+1, s==2, 2<=n, n+1<=n0}

            deadlock();

//  P(f,i,n,n0,s) {f==1, i==n0, n==1, s==2, 2<=i}

         n--;

//  P(f,i,n,n0,s) {f==1, i==n0, n==0, s==2, 2<=i}

         f = 1;

//  P(f,i,n,n0,s) {f==1, i==n0, n==0, s==2, 2<=i}

         i++;

//  P(f,i,n,n0,s) {f==1, i==n0+1, n==0, s==2, 3<=i}

         if (!(i<=n0+1))

//  P() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

         if (!(n>0&&s==2&&n==1))

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 2<=n}

            deadlock();

//  P(f,i,n,n0,s) {f==0, i==1, n==1, n0==1, s==2}

         n--;

//  P(f,i,n,n0,s) {f==0, i==1, n==0, n0==1, s==2}

         f = 1;

//  P(f,i,n,n0,s) {f==1, i==1, n==0, n0==1, s==2}

         i++;

//  P(f,i,n,n0,s) {f==1, i==2, n==0, n0==1, s==2}

         if (!(i<=n0+1))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

         if (!(s==2))

//  P() {0==-1}

            deadlock();

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==2, 1<=n}

         s = 1;

//  P(f,i,n,n0,s) {f==0, i==1, n==n0, s==1, 1<=n}

         if (!(i<=n0+1))

//  P() {0==-1}

            checking_error();
      }
   }
   else {

//  P(f,i,n,n0,s) {f==1, i==0, n==0, n0==0, s==1}

      if (!(s==1&&f==1))

//  P() {0==-1}

         deadlock();

//  P(f,i,n,n0,s) {f==1, i==0, n==0, n0==0, s==1}

      s = 2;

//  P(f,i,n,n0,s) {f==1, i==0, n==0, n0==0, s==2}

      f = 0;

//  P(f,i,n,n0,s) {f==0, i==0, n==0, n0==0, s==2}

      i++;

//  P(f,i,n,n0,s) {f==0, i==1, n==0, n0==0, s==2}

      if (!(i<=n0+1))

//  P() {0==-1}

         checking_error();

//  P(f,i,n,n0,s) {f==0, i==1, n==0, n0==0, s==2}

      if (!(s==2))

//  P() {0==-1}

         deadlock();

//  P(f,i,n,n0,s) {f==0, i==1, n==0, n0==0, s==2}

      s = 1;

//  P(f,i,n,n0,s) {f==0, i==1, n==0, n0==0, s==1}

      if (!(i<=n0+1))

//  P() {0==-1}

         checking_error();
   }
}

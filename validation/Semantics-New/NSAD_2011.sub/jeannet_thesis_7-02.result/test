
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int s, b, x;

//  T(s) {s==1}

   s = 1;

//  T(b) {s==1, 0<=b, b<=1}

   b = rand_b();

//  T(x) {s==1, 0<=b, b<=1, 0<=x}

   x = rand();

//  T() {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (!(0<=x&&x<=5))

//  T() {0==-1}

      deadlock();

//  T() {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (b==0&&s==2&&x>4)

//  T() {0==-1}

      checking_error();

//  T(b,s,x) {0<=b, b<=1, s+x<=8b+6, 11b+10s<=x+21, 1<=s, s<=2,
//    10s#init+x<=10s+x#init, s#init+x#init<=s+x, x+2<=7s, 1<=s+x}

   while (rand_b())

//  T(b,s,x) {11b+x#init==x+1, s==2, s#init==1, x#init<=x+1,
//    x<=x#init+10, 3x+8x#init<=52}

      if (rand_b()) {

//  T() {b==1, s==1, x<=2}

         if (!(s==1&&x<=2&&b==1))

//  T() {0==-1}

            deadlock();

//  T(b) {b==1, b#init==1, s==1, x<=2}

         b = 1;

//  T(x) {b==1, s==1, x==x#init+10, x<=12}

         x += 10;

//  T(s) {b==1, s==2, s#init==1, x<=12}

         s = 2;

//  T() {b==1, s==2, x<=12}

         if (b==0&&s==2&&x>4)

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {b==0, s==1, x<=2}

         if (!(s==1&&x<=2&&b==0))

//  T() {0==-1}

            deadlock();

//  T(x) {b==0, s==1, x==x#init-1, x<=1}

         x--;

//  T(s) {b==0, s==2, s#init==1, x<=1}

         s = 2;

//  T() {b==0, s==2, x<=1}

         if (b==0&&s==2&&x>4)

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {s==1, 3<=x}

         if (!(s==1&&x>=3))

//  T() {0==-1}

            deadlock();

//  T(b) {b==0, s==1, 3<=x}

         b = 0;

//  T(x) {b==0, s==1, x==x#init-1, 2<=x}

         x--;

//  T(s) {b==0, s==2, s#init==1, 2<=x}

         s = 2;

//  T() {b==0, s==2, 2<=x, x<=4}

         if (b==0&&s==2&&x>4)

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int s, b, x;

//  T(s) {s==1}

   s = 1;

//  T(b) {s==1, 0<=b, b<=1}

   b = rand_b();

//  T(x) {s==1, 0<=b, b<=1, 0<=x}

   x = rand();

//  T() {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (!(0<=x&&x<=5))

//  T() {0==-1}

      deadlock();

//  T() {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (b==0&&s==2&&x>4)

//  T() {0==-1}

      checking_error();

//  T(b,s,x) {11b+x#init==x+1, s==2, s#init==1, 0<=b, b<=b#init,
//    3b#init<=3b+x#init, 3b+x#init<=5, b#init<=1}

   if (x<=2)

//  T(b,s,x) {11b+x#init==x+1, 11b#init+x#init==x+1, s==2, s#init==1,
//    x#init<=x+1, x<=x#init+10, 0<=x#init, x#init<=2}

      if (b==1) {

//  T() {b==1, s==1, 0<=x, x<=2}

         if (!(s==1&&x<=2&&b==1))

//  T() {0==-1}

            deadlock();

//  T(b) {b==1, b#init==1, s==1, 0<=x, x<=2}

         b = 1;

//  T(x) {b==1, s==1, x==x#init+10, 10<=x, x<=12}

         x += 10;

//  T(s) {b==1, s==2, s#init==1, 10<=x, x<=12}

         s = 2;

//  T() {b==1, s==2, 10<=x, x<=12}

         if (b==0&&s==2&&x>4)

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {b==0, s==1, 0<=x, x<=2}

         if (!(s==1&&x<=2&&b==0))

//  T() {0==-1}

            deadlock();

//  T(x) {b==0, s==1, x==x#init-1, 0<=x+1, x<=1}

         x--;

//  T(s) {b==0, s==2, s#init==1, 0<=x+1, x<=1}

         s = 2;

//  T() {b==0, s==2, 0<=x+1, x<=1}

         if (b==0&&s==2&&x>4)

//  T() {0==-1}

            checking_error();
      }
   else {

//  T() {s==1, 0<=b, b<=1, 3<=x, x<=5}

      if (!(s==1&&x>=3))

//  T() {0==-1}

         deadlock();

//  T(b) {b==0, s==1, 0<=b#init, b#init<=1, 3<=x, x<=5}

      b = 0;

//  T(x) {b==0, s==1, x==x#init-1, 2<=x, x<=4}

      x--;

//  T(s) {b==0, s==2, s#init==1, 2<=x, x<=4}

      s = 2;

//  T() {b==0, s==2, 2<=x, x<=4}

      if (b==0&&s==2&&x>4)

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int s, b, x;

//  P() {}

   s = 1;

//  P(s) {s==1}

   b = rand_b();

//  P(b,s) {s==1, 0<=b, b<=1}

   x = rand();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x}

   if (!(0<=x&&x<=5))

//  P(b,s,x) {s==1, 0<=b, b<=1, 6<=x}

      deadlock();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (b==0&&s==2&&x>4)

//  P() {0==-1}

      checking_error();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x, x<=5}

   while (rand_b())

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 11b+10s<=x+21, 1<=s, s<=2,
//    x+2<=7s, 1<=s+x}

      if (rand_b()) {

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 11b+10s<=x+21, 1<=s, s<=2,
//    x+2<=7s, 1<=s+x}

         if (!(s==1&&x<=2&&b==1))

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 3b+1<=s+x, 11b+10s<=x+21,
//    4b<=x+1, 1<=s, s<=2, x+2<=7s, 1<=s+x}

            deadlock();

//  P(b,s,x) {b==1, s==1, 0<=x, x<=2}

         b = 1;

//  P(b,s,x) {b==1, s==1, 0<=x, x<=2}

         x += 10;

//  P(b,s,x) {b==1, s==1, 10<=x, x<=12}

         s = 2;

//  P(b,s,x) {b==1, s==2, 10<=x, x<=12}

         if (b==0&&s==2&&x>4)

//  P() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 11b+10s<=x+21, 1<=s, s<=2,
//    x+2<=7s, 1<=s+x}

         if (!(s==1&&x<=2&&b==0))

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 7<=3b+4s+x, 11b+10s<=x+21, 1<=s,
//    s<=2, x+2<=7s, 1<=s+x}

            deadlock();

//  P(b,s,x) {b==0, s==1, 0<=x, x<=2}

         x--;

//  P(b,s,x) {b==0, s==1, 0<=x+1, x<=1}

         s = 2;

//  P(b,s,x) {b==0, s==2, 0<=x+1, x<=1}

         if (b==0&&s==2&&x>4)

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(b,s,x) {0<=b, b<=1, s+x<=8b+6, 11b+10s<=x+21, 1<=s, s<=2,
//    x+2<=7s, 1<=s+x}

         if (!(s==1&&x>=3))

//  P(b,s,x) {0<=b, b<=1, x<=8b+2s, s+x<=8b+6, 11b+10s<=x+21, 1<=s,
//    s<=2, x+8<=10s, x+2<=7s, 1<=s+x}

            deadlock();

//  P(b,s,x) {s==1, 0<=b, b<=1, 3<=x, x<=5}

         b = 0;

//  P(b,s,x) {b==0, s==1, 3<=x, x<=5}

         x--;

//  P(b,s,x) {b==0, s==1, 2<=x, x<=4}

         s = 2;

//  P(b,s,x) {b==0, s==2, 2<=x, x<=4}

         if (b==0&&s==2&&x>4)

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int s, b, x;

//  P() {}

   s = 1;

//  P(s) {s==1}

   b = rand_b();

//  P(b,s) {s==1, 0<=b, b<=1}

   x = rand();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x}

   if (!(0<=x&&x<=5))

//  P(b,s,x) {s==1, 0<=b, b<=1, 6<=x}

      deadlock();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (b==0&&s==2&&x>4)

//  P() {0==-1}

      checking_error();

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x, x<=5}

   if (x<=2)

//  P(b,s,x) {s==1, 0<=b, b<=1, 0<=x, x<=2}

      if (b==1) {

//  P(b,s,x) {b==1, s==1, 0<=x, x<=2}

         if (!(s==1&&x<=2&&b==1))

//  P() {0==-1}

            deadlock();

//  P(b,s,x) {b==1, s==1, 0<=x, x<=2}

         b = 1;

//  P(b,s,x) {b==1, s==1, 0<=x, x<=2}

         x += 10;

//  P(b,s,x) {b==1, s==1, 10<=x, x<=12}

         s = 2;

//  P(b,s,x) {b==1, s==2, 10<=x, x<=12}

         if (b==0&&s==2&&x>4)

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(b,s,x) {b==0, s==1, 0<=x, x<=2}

         if (!(s==1&&x<=2&&b==0))

//  P() {0==-1}

            deadlock();

//  P(b,s,x) {b==0, s==1, 0<=x, x<=2}

         x--;

//  P(b,s,x) {b==0, s==1, 0<=x+1, x<=1}

         s = 2;

//  P(b,s,x) {b==0, s==2, 0<=x+1, x<=1}

         if (b==0&&s==2&&x>4)

//  P() {0==-1}

            checking_error();
      }
   else {

//  P(b,s,x) {s==1, 0<=b, b<=1, 3<=x, x<=5}

      if (!(s==1&&x>=3))

//  P() {0==-1}

         deadlock();

//  P(b,s,x) {s==1, 0<=b, b<=1, 3<=x, x<=5}

      b = 0;

//  P(b,s,x) {b==0, s==1, 3<=x, x<=5}

      x--;

//  P(b,s,x) {b==0, s==1, 2<=x, x<=4}

      s = 2;

//  P(b,s,x) {b==0, s==2, 2<=x, x<=4}

      if (b==0&&s==2&&x>4)

//  P() {0==-1}

         checking_error();
   }
}

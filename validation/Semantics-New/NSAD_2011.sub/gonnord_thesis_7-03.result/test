
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x, z;

//  T(x,z) {x==0, z==0}

   z = x = 0;

//  T() {x==0, z==0}

   if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

      checking_error();

//  T(x,z) {x#init<=x, x#init+z<=x+z#init, z<=x, 0<=z, z<=10}

   while (rand_b())

//  T(x,z) {11x+z#init==11x#init+z+10, z<=x, 0<=z, z<=z#init+1,
//    z+10z#init<=100}

      if (rand_b()) {

//  T() {z<=9}

         if (!(z<=9))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, z<=9}

         x++;

//  T(z) {z==z#init+1, z<=10}

         z++;

//  T() {0<=x, z<=x, 0<=z, z<=10}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {z==10}

         if (!(z==10))

//  T() {0==-1}

            deadlock();

//  T(z) {z==0, z#init==10}

         z = 0;

//  T() {z==0, 0<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x, z;

//  T(x,z) {x==0, z==0}

   z = x = 0;

//  T() {x==0, z==0}

   if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

      checking_error();

//  T(x,z) {9x#init+z#init<=9x+z, x#init+z<=x+z#init, z<=x, 0<=z,
//    z<=9}

   while (rand_b())

//  T(x,z) {x==x#init+1, z#init+1<=x, 0<=z, z<=z#init+1,
//    z+9z#init<=81}

      if (rand_b()) {

//  T() {z<=8}

         if (!(z<=8))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, z<=8}

         x++;

//  T(z) {z==z#init+1, z<=9}

         z++;

//  T() {0<=x, z<=x, 0<=z, z<=9}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {z==9}

         if (!(z==9))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, z==9}

         x++;

//  T(z) {z==10, z#init==9}

         z++;

//  T() {z==10, 10<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

            checking_error();

//  T() {z==10, 10<=x}

         if (!(z==10))

//  T() {0==-1}

            deadlock();

//  T(z) {z==0, z#init==10, 10<=x}

         z = 0;

//  T() {z==0, 10<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  T() {0==-1}

            checking_error();
      }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x, z;

//  P() {}

   z = x = 0;

//  P(x,z) {x==0, z==0}

   if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

      checking_error();

//  P(x,z) {x==0, z==0}

   while (rand_b())

//  P(x,z) {z<=x, 0<=z, z<=10}

      if (rand_b()) {

//  P(x,z) {z<=x, 0<=z, z<=10}

         if (!(z<=9))

//  P(x,z) {z==10, 10<=x}

            deadlock();

//  P(x,z) {z<=x, 0<=z, z<=9}

         x++;

//  P(x,z) {z+1<=x, 0<=z, z<=9}

         z++;

//  P(x,z) {z<=x, 1<=z, z<=10}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,z) {z<=x, 0<=z, z<=10}

         if (!(z==10))

//  P(x,z) {z<=x, 0<=z, z<=9}

            deadlock();

//  P(x,z) {z==10, 10<=x}

         z = 0;

//  P(x,z) {z==0, 10<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x, z;

//  P() {}

   z = x = 0;

//  P(x,z) {x==0, z==0}

   if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

      checking_error();

//  P(x,z) {x==0, z==0}

   while (rand_b())

//  P(x,z) {z<=x, 0<=z, z<=9}

      if (rand_b()) {

//  P(x,z) {z<=x, 0<=z, z<=9}

         if (!(z<=8))

//  P(x,z) {z==9, 9<=x}

            deadlock();

//  P(x,z) {z<=x, 0<=z, z<=8}

         x++;

//  P(x,z) {z+1<=x, 0<=z, z<=8}

         z++;

//  P(x,z) {z<=x, 1<=z, z<=9}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,z) {z<=x, 0<=z, z<=9}

         if (!(z==9))

//  P(x,z) {z<=x, 0<=z, z<=8}

            deadlock();

//  P(x,z) {z==9, 9<=x}

         x++;

//  P(x,z) {z==9, 10<=x}

         z++;

//  P(x,z) {z==10, 10<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

            checking_error();

//  P(x,z) {z==10, 10<=x}

         if (!(z==10))

//  P() {0==-1}

            deadlock();

//  P(x,z) {z==10, 10<=x}

         z = 0;

//  P(x,z) {z==0, 10<=x}

         if (!(x>=0&&z>=0&&z<=10&&z<=x))

//  P() {0==-1}

            checking_error();
      }
}

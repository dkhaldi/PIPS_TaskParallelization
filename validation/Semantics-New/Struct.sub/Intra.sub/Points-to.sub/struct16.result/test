int struct16()
{
   static FILE *file = (void *) 0;
//             <    is read   >: file
   if (file==(void *) 0)
//             <may be read   >: __IO_EFFECTS:LUNS[*]
//             <may be written>: __IO_EFFECTS:LUNS[*]
//             <    is written>: file
      file = fopen("vals_init.txt", "r");

//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
   int r = fscanf(file, "%d", &p.N1);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N1
   p.N1<=256?(void) 0:__assert_fail("p.N1 <= 256", "./struct16.c", 31, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N2);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N2
   p.N2<=193?(void) 0:__assert_fail("p.N2 <= 193", "./struct16.c", 36, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N3);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N3
   p.N3<=32?(void) 0:__assert_fail("p.N3 <= 32", "./struct16.c", 41, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N4);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N4
   p.N4<=8?(void) 0:__assert_fail("p.N4 <= 8", "./struct16.c", 46, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N5);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N5
   p.N5<=64?(void) 0:__assert_fail("p.N5 <= 64", "./struct16.c", 51, __func__);

   return 0;
}
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
int struct16()
{
   static FILE *file = (void *) 0;
//             <may be read   >: __IO_EFFECTS:LUNS[*]
//             <may be written>: file __IO_EFFECTS:LUNS[*]
//             <    is read   >: file
   if (file==(void *) 0)
//             <may be read   >: __IO_EFFECTS:LUNS[*]
//             <may be written>: __IO_EFFECTS:LUNS[*]
//             <    is written>: file
      file = fopen("vals_init.txt", "r");

//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
   int r = fscanf(file, "%d", &p.N1);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N1
   p.N1<=256?(void) 0:__assert_fail("p.N1 <= 256", "./struct16.c", 31, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N2);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N2
   p.N2<=193?(void) 0:__assert_fail("p.N2 <= 193", "./struct16.c", 36, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N3);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N3
   p.N3<=32?(void) 0:__assert_fail("p.N3 <= 32", "./struct16.c", 41, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N4);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N4
   p.N4<=8?(void) 0:__assert_fail("p.N4 <= 8", "./struct16.c", 46, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]

   r = fscanf(file, "%d", &p.N5);
//             <    is read   >: r
   if (r==-1)
      return -1;
//             <may be read   >: __func__
//             <    is read   >: p.N5
   p.N5<=64?(void) 0:__assert_fail("p.N5 <= 64", "./struct16.c", 51, __func__);

   return 0;
}

//  T(p[N1],p[N2],p[N3],p[N4],p[N5],struct16) {struct16==0,
//    p[N1]<=256, p[N2]<=193, p[N3]<=32, p[N4]<=8, p[N5]<=64}

int struct16()
{

//  T() {}

   static FILE *file = (void *) 0;

//  T() {}

   if (file==(void *) 0)

//  T() {}

      file = fopen("vals_init.txt", "r");


//  T(p[N1],p[N2],p[N3],p[N4],p[N5],r) {}

   int r = fscanf(file, "%d", &p.N1);

//  T(struct16) {}

   if (r==-1)

//  T(struct16) {struct16==-1}

      return -1;

//  T() {p[N1]<=256}

   p.N1<=256?(void) 0:__assert_fail("p.N1 <= 256", "./struct16.c", 31, __func__);

//  T(p[N2],r) {}


   r = fscanf(file, "%d", &p.N2);

//  T(struct16) {}

   if (r==-1)

//  T(struct16) {struct16==-1}

      return -1;

//  T() {p[N2]<=193}

   p.N2<=193?(void) 0:__assert_fail("p.N2 <= 193", "./struct16.c", 36, __func__);

//  T(p[N3],r) {}


   r = fscanf(file, "%d", &p.N3);

//  T(struct16) {}

   if (r==-1)

//  T(struct16) {struct16==-1}

      return -1;

//  T() {p[N3]<=32}

   p.N3<=32?(void) 0:__assert_fail("p.N3 <= 32", "./struct16.c", 41, __func__);

//  T(p[N4],r) {}


   r = fscanf(file, "%d", &p.N4);

//  T(struct16) {}

   if (r==-1)

//  T(struct16) {struct16==-1}

      return -1;

//  T() {p[N4]<=8}

   p.N4<=8?(void) 0:__assert_fail("p.N4 <= 8", "./struct16.c", 46, __func__);

//  T(p[N5],r) {}


   r = fscanf(file, "%d", &p.N5);

//  T(struct16) {}

   if (r==-1)

//  T(struct16) {struct16==-1}

      return -1;

//  T() {p[N5]<=64}

   p.N5<=64?(void) 0:__assert_fail("p.N5 <= 64", "./struct16.c", 51, __func__);

//  T(struct16) {struct16==0}


   return 0;
}

//  P() {}

int struct16()
{

//  P() {}

   static FILE *file = (void *) 0;

//  P() {}

   if (file==(void *) 0)

//  P() {}

      file = fopen("vals_init.txt", "r");


//  P() {}

   int r = fscanf(file, "%d", &p.N1);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r) {}

   if (r==-1)

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r) {r==-1}

      return -1;

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {}

   p.N1<=256?(void) 0:__assert_fail("p.N1 <= 256", "./struct16.c", 31, __func__);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256}


   r = fscanf(file, "%d", &p.N2);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256}

   if (r==-1)

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {r==-1, p[N1]<=256}

      return -1;

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256}

   p.N2<=193?(void) 0:__assert_fail("p.N2 <= 193", "./struct16.c", 36, __func__);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193}


   r = fscanf(file, "%d", &p.N3);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193}

   if (r==-1)

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {r==-1, p[N1]<=256,
//    p[N2]<=193}

      return -1;

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193}

   p.N3<=32?(void) 0:__assert_fail("p.N3 <= 32", "./struct16.c", 41, __func__);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32}


   r = fscanf(file, "%d", &p.N4);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32}

   if (r==-1)

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {r==-1, p[N1]<=256,
//    p[N2]<=193, p[N3]<=32}

      return -1;

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32}

   p.N4<=8?(void) 0:__assert_fail("p.N4 <= 8", "./struct16.c", 46, __func__);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32, p[N4]<=8}


   r = fscanf(file, "%d", &p.N5);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32, p[N4]<=8}

   if (r==-1)

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {r==-1, p[N1]<=256,
//    p[N2]<=193, p[N3]<=32, p[N4]<=8}

      return -1;

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32, p[N4]<=8}

   p.N5<=64?(void) 0:__assert_fail("p.N5 <= 64", "./struct16.c", 51, __func__);

//  P(p[N1],p[N2],p[N3],p[N4],p[N5],r,struct16) {p[N1]<=256,
//    p[N2]<=193, p[N3]<=32, p[N4]<=8, p[N5]<=64}


   return 0;
}


Source code with transformers


//  T() {}

void foo(int flag)
{

//  T(a,b,j) {a==0, b==0, j==1}

   int i, j = 1, a = 0, b = 0;

//  T() {a==0, b==0, j==1}

   float x;

//  T(i) {a==0, b==0, j==1, 0<=i, i<=1}

   if (flag)

//  T(i) {a==0, b==0, i==0, j==1}

      i = 0;
   else

//  T(i) {a==0, b==0, flag==0, i==1, j==1}

      i = 1;

//  T(a,b,i,j) {2a+i#init==2a#init+i, 2a#init+j<=2a+j#init,
//    a+j#init<=a#init+j, 2a<=i, i<=2a+1, j<=2a+1, a+1<=j}

   while (x>0.) {

//  T(a) {a==a#init+1}

      a++;

//  T(b) {b+i==b#init+j}

      b += j-i;

//  T(i) {i==i#init+2}

      i += 2;

//  T(j) {j#init+1<=j, j<=j#init+2}

      if (i%2==0)

//  T(j) {j==j#init+2}

         j += 2;
      else

//  T(j) {j==j#init+1}

         j++;
   }

//  T() {2a<=i, i<=2a+1, j<=2a+1, a+1<=j}

   if (flag)

//  T() {a==b, 2a<=i, i<=2a+1, j<=2a+1, a+1<=j}

      if (!(a==b))

//  T() {0==-1}

         abort();
}

Source code with transformers


//  T(main) {main==0}

int main()
{

//  T() {}

   foo(0);

//  T() {}

   foo(1);

//  T(main) {main==0}

   return 0;
}

Source code with preconditions


//  P() {}

int main()
{

//  P() {}

   foo(0);

//  P() {}

   foo(1);

//  P() {}

   return 0;
}

Source code with preconditions


//  P() {0<=flag, flag<=1}

void foo(int flag)
{

//  P() {0<=flag, flag<=1}

   int i, j = 1, a = 0, b = 0;

//  P(a,b,j) {a==0, b==0, j==1, 0<=flag, flag<=1}

   float x;

//  P(a,b,j) {a==0, b==0, j==1, 0<=flag, flag<=1}

   if (flag)

//  P(a,b,j) {a==0, b==0, flag==1, j==1}

      i = 0;
   else

//  P(a,b,j) {a==0, b==0, flag==0, j==1}

      i = 1;

//  P(a,b,i,j) {a==0, b==0, flag+i==1, j==1, 0<=flag, flag<=1}

   while (x>0.) {

//  P(a,b,i,j) {flag+i==2a+1, 0<=flag, flag<=1, j<=flag+i,
//    flag+i+1<=2j}

      a++;

//  P(a,b,i,j) {flag+i==2a-1, 0<=flag, flag<=1, j<=flag+i,
//    flag+i+1<=2j}

      b += j-i;

//  P(a,b,i,j) {flag+i==2a-1, 0<=flag, flag<=1, j<=flag+i,
//    flag+i+1<=2j}

      i += 2;

//  P(a,b,i,j) {flag+i==2a+1, 0<=flag, flag<=1, j+2<=flag+i,
//    flag+i<=2j+1}

      if (i%2==0)

//  P(a,b,i,j) {flag+i==2a+1, 0<=flag, flag<=1, j+2<=flag+i,
//    flag+i<=2j+1}

         j += 2;
      else

//  P(a,b,i,j) {flag+i==2a+1, 0<=flag, flag<=1, j+2<=flag+i,
//    flag+i<=2j+1}

         j++;
   }

//  P(a,b,i,j) {flag+i==2a+1, 0<=flag, flag<=1, j<=flag+i,
//    flag+i+1<=2j}

   if (flag)

//  P(a,b,i,j) {2a==i, flag==1, j<=2a+1, a+1<=j}

      if (!(a==b))

//  P(a,b,i,j) {2a==i, flag==1, j<=2a+1, a+1<=j}

         abort();
}
# new callgraph
 main
     foo_0
     foo_1
# new codes.
int main()
{
   foo_0(0);
   foo_1(1);
   return 0;
}
# new codes.
void foo_0(int flag)
{
   // PIPS: flag is assumed a constant reaching value
   if (flag!=0)
      exit(0);
   {
      int i, j = 1, a = 0, b = 0;
      float x;
      if (flag)
         i = 0;
      else
         i = 1;
      while (x>0.) {
         a++;
         b += j-i;
         i += 2;
         if (i%2==0)
            j += 2;
         else
            j++;
      }
      if (flag)
         if (!(a==b))
            abort();
   }
}
# new codes.
void foo_1(int flag)
{
   // PIPS: flag is assumed a constant reaching value
   if (flag!=1)
      exit(0);
   {
      int i, j = 1, a = 0, b = 0;
      float x;
      if (flag)
         i = 0;
      else
         i = 1;
      while (x>0.) {
         a++;
         b += j-i;
         i += 2;
         if (i%2==0)
            j += 2;
         else
            j++;
      }
      if (flag)
         if (!(a==b))
            abort();
   }
}
# applying partial evaluation...
# new codes.
void foo_0(int flag)
{
   // PIPS: flag is assumed a constant reaching value
   int i, j = 1, a = 0, b = 0;
   float x;
   i = 1;
   while (x>0.) {
      a++;
      b += j-i;
      i += 2;
      j++;
   }
}
# new codes.
void foo_1(int flag)
{
   // PIPS: flag is assumed a constant reaching value
   int i, j = 1, a = 0, b = 0;
   float x;
   i = 0;
   while (x>0.) {
      a++;
      b += j-i;
      i += 2;
      j += 2;
   }
   if (!(a==b))
      abort();
}

Source code with preconditions


//  P() {flag==0}

void foo_0(int flag)
{
   // PIPS: flag is assumed a constant reaching value

//  P() {flag==0}

   int i, j = 1, a = 0, b = 0;

//  P(a,b,j) {a==0, b==0, flag==0, j==1}

   float x;

//  P(a,b,j) {a==0, b==0, flag==0, j==1}

   i = 1;

//  P(a,b,i,j) {a==0, b==0, flag==0, i==1, j==1}

   while (x>0.) {

//  P(a,b,i,j) {2a==i-1, a==j-1, flag==0, 0<=a}

      a++;

//  P(a,b,i,j) {2a==i+1, a==j, flag==0, 1<=a}

      b += j-i;

//  P(a,b,i,j) {2a==i+1, a==j, flag==0, 1<=a}

      i += 2;

//  P(a,b,i,j) {2a==i-1, a==j, flag==0, 1<=a}

      j++;
   }
}

Source code with preconditions


//  P() {flag==1}

void foo_1(int flag)
{
   // PIPS: flag is assumed a constant reaching value

//  P() {flag==1}

   int i, j = 1, a = 0, b = 0;

//  P(a,b,j) {a==0, b==0, flag==1, j==1}

   float x;

//  P(a,b,j) {a==0, b==0, flag==1, j==1}

   i = 0;

//  P(a,b,i,j) {a==0, b==0, flag==1, i==0, j==1}

   while (x>0.) {

//  P(a,b,i,j) {2a==i, 2a==j-1, flag==1, 0<=a}

      a++;

//  P(a,b,i,j) {2a==i+2, 2a==j+1, flag==1, 1<=a}

      b += j-i;

//  P(a,b,i,j) {2a==i+2, 2a==j+1, flag==1, 1<=a}

      i += 2;

//  P(a,b,i,j) {2a==i, 2a==j+1, flag==1, 1<=a}

      j += 2;
   }

//  P(a,b,i,j) {2a==i, 2a==j-1, flag==1, 0<=a}

   if (!(a==b))

//  P(a,b,i,j) {2a==i, 2a==j-1, flag==1, 0<=a}

      abort();
}
void foo_0(int flag)
{
   // PIPS: flag is assumed a constant reaching value
   int i, j = 1, a = 0, b = 0;
   float x;
   i = 1;
   while (x>0.) {
      a++;
      b += j-i;
      i += 2;
      j++;
   }
}


Source code with transformers


//  T(shift04) {}

int shift04(int i, int k)
{

//  T(j) {i==j}

   int j = i;

//  T(l) {i==j, 4l<=i, i<=4l+3}

   int l = j>>2;

//  T(m) {i==j, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3}

   int m = -j>>2;

//  T(j) {i==j#init, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3}

   
   // Check a subset of particular cases: not found with the current
   // implementation of integer_right_shift_to_transformer
   if (j<0&&2<=k&&k<=4)

//  T(j) {i==j#init, i+1<=0, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3, 2<=k,
//    k<=4}

      j = j>>k;
   else if (j>=0&&2<=k&&k<=4)

//  T(j) {i==j#init, 0<=i, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3, 2<=k,
//    k<=4}

      j = j>>k;
   else

//  T(j) {i==j#init, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3}

      j = j>>k;

//  T() {4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3}


   printf("j=%d, l=%d, m=%d\n", j, l, m);

//  T(shift04) {j==shift04, 4l<=i, i<=4l+3, i+4m<=0, 0<=i+4m+3}

   return j;
}

Source code with preconditions


//  P() {i==20, k==2}

int shift04(int i, int k)
{

//  P() {i==20, k==2}

   int j = i;

//  P(j) {i==20, j==20, k==2}

   int l = j>>2;

//  P(j,l) {i==20, j==20, k==2, l==5}

   int m = -j>>2;

//  P(j,l,m) {i==20, j==20, k==2, l==5, m==-5}

   
   // Check a subset of particular cases: not found with the current
   // implementation of integer_right_shift_to_transformer
   if (j<0&&2<=k&&k<=4)

//  P() {0==-1}

      j = j>>k;
   else if (j>=0&&2<=k&&k<=4)

//  P(j,l,m) {i==20, j==20, k==2, l==5, m==-5}

      j = j>>k;
   else

//  P() {0==-1}

      j = j>>k;

//  P(j,l,m) {i==20, k==2, l==5, m==-5}


   printf("j=%d, l=%d, m=%d\n", j, l, m);

//  P(j,l,m) {i==20, k==2, l==5, m==-5}

   return j;
}

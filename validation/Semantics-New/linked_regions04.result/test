
Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T() {}

   int ii, jj, x0;

//  T() {}

   double x1;


//  T(N) {N==100}

   int N = 100;

//  T() {}

   double A[100][100];

//  T(ii,jj,x0) {N+1<=ii, 1<=ii}


   if (1) {

//  T(ii,jj,x0) {N+1<=ii, 1<=ii}

      if (1) {

//  T(ii,jj,x0) {ii<=N, 1<=ii}

         for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {jj<=N, 1<=jj}

            for(jj = 1; jj <= N; jj += 1)

//  T(x0) {}

               if (1) {

//  T(x0) {}

                  x0 = ii*jj;

//  T() {}

                  x1 = (double) N/2;

//  T() {}

                  if (x0<x1)

//  T() {}

                     A[N-ii-1][ii+jj-1] = 1.0;
               }

//  T(ii,jj,x0) {ii<=N, 1<=ii}


         for(ii = 1; ii <= N; ii += 1)

//  T(jj,x0) {jj<=N, 1<=jj}

            for(jj = 1; jj <= N; jj += 1)

//  T(x0) {}

               if (1) {

//  T(x0) {}

                  x0 = ii*jj;

//  T() {}

                  x1 = (double) N/2;

//  T() {}

                  if (x0<x1)

//  T() {}

                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }

//  T(ii,jj) {ii<=N, 1<=ii}


      for(ii = 1; ii <= N; ii += 1)

//  T(jj) {jj<=N, 1<=jj}

         for(jj = 1; jj <= N; jj += 1)

//  T() {}

            if (ii==jj)

//  T() {}

               A[ii-1][jj-1] = 1.0;
   }
   {

//  T() {}

      int i;

//  T(i) {i+1<=N, 0<=i}

      for(i = 0; i <= N-1; i += 1) {

//  T() {}

         int j;

//  T(j) {j+1<=N, 0<=j}

         for(j = 0; j <= N-1; j += 1)

//  T() {}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {main==0}

   return 0;
}

Preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   int ii, jj, x0;

//  P() {}

   double x1;


//  P() {}

   int N = 100;

//  P(N) {N==100}

   double A[100][100];

//  P(N) {N==100}


   if (1) {

//  P(N) {N==100}

      if (1) {

//  P(N) {N==100}

         for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

            for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                     A[N-ii-1][ii+jj-1] = 1.0;
               }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}


         for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

            for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

               if (1) {

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  x0 = ii*jj;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  x1 = (double) N/2;

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                  if (x0<x1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}


      for(ii = 1; ii <= N; ii += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100}

         for(jj = 1; jj <= N; jj += 1)

//  P(N,ii,jj,x0) {N==100, 1<=ii, ii<=100, 1<=jj, jj<=100}

            if (ii==jj)

//  P(N,ii,jj,x0) {N==100, ii==jj, 1<=ii, ii<=100}

               A[ii-1][jj-1] = 1.0;
   }
   {

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

      int i;

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

      for(i = 0; i <= N-1; i += 1) {

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         int j;

//  P(N,i,ii,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99}

         for(j = 0; j <= N-1; j += 1)

//  P(N,i,ii,j,jj,x0) {N==100, ii==101, jj==101, 0<=i, i<=99, 0<=j,
//    j<=99}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N,ii,jj,x0) {N==100, ii==101, jj==101}

   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main()
{
   int ii, jj, x0;
   double x1;

   int N = 100;
   double A[100][100];

//  <A[PHI1][PHI2]-W-MAY-{0<=102PHI1+PHI2+2, 0<=PHI1+PHI2+2,
//    PHI1+PHI2<=198, 20299PHI1+99PHI2<=2019402, N==100}>


   if (1) {

//  <A[PHI1][PHI2]-W-MAY-{0<=102PHI1+PHI2+2, 0<=PHI1+PHI2+2,
//    PHI1+PHI2<=198, 102PHI1+PHI2<=10096, N==100}>

      if (1) {

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1+1, PHI1<=98, 99<=PHI1+PHI2,
//    PHI1+PHI2<=198, N==100}>

         for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1+ii==99, ii<=PHI2, PHI2<=ii+99, N==100,
//    1<=ii, ii<=100}>

            for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1+ii==99, ii+jj==PHI2+1, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

               if (1) {
                  x0 = ii*jj;
                  x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{PHI1+ii==99, ii+jj==PHI2+1, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  if (x0<x1)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+ii==99, ii+jj==PHI2+1, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                     A[N-ii-1][ii+jj-1] = 1.0;
               }

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=99, 0<=PHI1+PHI2+2,
//    PHI1+PHI2<=97, N==100}>


         for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, 0<=PHI2+ii+1, PHI2+ii<=98,
//    N==100, 1<=ii, ii<=100}>

            for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2+ii+jj==99, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

               if (1) {
                  x0 = ii*jj;
                  x1 = (double) N/2;

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2+ii+jj==99, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                  if (x0<x1)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2+ii+jj==99, N==100, 1<=ii,
//    ii<=100, 1<=jj, jj<=100}>

                     A[ii-1][N-ii-jj-1] = 1.0;
               }
      }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==PHI2, 0<=PHI2, PHI2<=99, N==100}>


      for(ii = 1; ii <= N; ii += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==ii-1, N==100, 1<=ii,
//    ii<=100}>

         for(jj = 1; jj <= N; jj += 1)

//  <A[PHI1][PHI2]-W-MAY-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

            if (ii==jj)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==ii-1, PHI2==jj-1, N==100, ii==jj,
//    1<=ii, ii<=100}>

               A[ii-1][jj-1] = 1.0;
   }
   {
      int i;

//  <A[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100, ii==101, jj==101}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=99, N==100,
//    ii==101, jj==101, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101, 0<=i, i<=99}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101, 0<=i, i<=99}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==100, ii==101,
//    jj==101, 0<=j, j<=99, 0<=i, i<=99}>

            printf("%f\n", A[i][j]);
      }
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>

   return 0;
}


Points-To for "main"


// Points To IN: none


// Points To OUT: none

int main(int argc, char **argv)
{

// Points To: none

   struct s a[10][10];

// Points To: none


   init(a[0]);

// Points To: none


   printf("%d, %d, %d\n", a[0][0].i, a[0][1].i, a[0][2].i);

// Points To: none


   return a[0][2].i;
}

Proper effects with points-to for "init"

void init(struct s b[10])
{
//             <    is written>: b[0].i
//             <    is referenced>: b
   b[0].i = 0;
//             <    is written>: b[1].i
//             <    is referenced>: b
   b[1].i = 2;
//             <    is written>: b[2].i
//             <    is referenced>: b
   b[2].i = 4;
   return;
}

Proper effects with points-to for "main"

int main(int argc, char **argv)
{
//             <    is declared>: a s
   struct s a[10][10];
//             <may be written>: a[0][*].i
//             <    is referenced>: a

   init(a[0]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: a[0][0].i a[0][1].i a[0][2].i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
//             <    is referenced>: a a a stdout __IO_EFFECTS:LUNS

   printf("%d, %d, %d\n", a[0][0].i, a[0][1].i, a[0][2].i);
//             <    is read   >: a[0][2].i
//             <    is referenced>: a

   return a[0][2].i;
}

Cumulated effects with poins-to for "main"

//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
//             <    is referenced>: stdout __IO_EFFECTS:LUNS
int main(int argc, char **argv)
{
//             <    is declared>: a s
   struct s a[10][10];
//             <may be written>: a[0][*].i
//             <    is referenced>: a

   init(a[0]);
//             <may be read   >: a[0][*].i stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
//             <    is referenced>: a stdout __IO_EFFECTS:LUNS

   printf("%d, %d, %d\n", a[0][0].i, a[0][1].i, a[0][2].i);
//             <    is read   >: a[0][2].i __IO_EFFECTS:LUNS[1]
//             <    is referenced>: a __IO_EFFECTS:LUNS

   return a[0][2].i;
}

Transformers for "init"


//  T(b[0][i],b[1][i],b[2][i]) {b[0][i]==0, b[1][i]==2, b[2][i]==4}

void init(struct s b[10])
{

//  T(b[0][i]) {b[0][i]==0}

   b[0].i = 0;

//  T(b[1][i]) {b[1][i]==2}

   b[1].i = 2;

//  T(b[2][i]) {b[2][i]==4}

   b[2].i = 4;

//  T() {}

   return;
}

Transformers for "main"


//  T(main) {main==4}

int main(int argc, char **argv)
{

//  T() {}

   struct s a[10][10];

//  T(a[0][0][i],a[0][1][i],a[0][2][i]) {a[0][0][i]==0, a[0][1][i]==2,
//    a[0][2][i]==4}


   init(a[0]);

//  T() {}


   printf("%d, %d, %d\n", a[0][0].i, a[0][1].i, a[0][2].i);

//  T(main) {a[0][2][i]==main}


   return a[0][2].i;
}

Preconditions for "main"


//  P() {}

int main(int argc, char **argv)
{

//  P() {}

   struct s a[10][10];

//  P() {}


   init(a[0]);

//  P(a[0][0][i],a[0][1][i],a[0][2][i]) {a[0][0][i]==0, a[0][1][i]==2,
//    a[0][2][i]==4}


   printf("%d, %d, %d\n", a[0][0].i, a[0][1].i, a[0][2].i);

//  P(a[0][0][i],a[0][1][i],a[0][2][i]) {a[0][0][i]==0, a[0][1][i]==2,
//    a[0][2][i]==4}


   return a[0][2].i;
}

Preconditions for "init"


//  P() {}

void init(struct s b[10])
{

//  P() {}

   b[0].i = 0;

//  P(b[0][i]) {b[0][i]==0}

   b[1].i = 2;

//  P(b[0][i],b[1][i]) {b[0][i]==0, b[1][i]==2}

   b[2].i = 4;

//  P(b[0][i],b[1][i],b[2][i]) {b[0][i]==0, b[1][i]==2, b[2][i]==4}

   return;
}

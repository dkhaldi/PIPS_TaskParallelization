
Points-to for "update2"


// Points To IN:
// _a_1[0].s -> *NULL* , MAY
// _a_1[0].s -> _a_1_2__1[0][0] , MAY
// a -> *NULL* , MAY
// a -> _a_1[0] , MAY


// Points To OUT:
// _a_1[0].s -> *NULL* , MAY
// _a_1[0].s -> _a_1_2__1[0][0] , MAY
// a -> _a_1[0] , EXACT

void update2(content *a)
{

// Points To:
// _a_1[0].s -> *NULL* , MAY
// _a_1[0].s -> _a_1_2__1[0][0] , MAY
// a -> *NULL* , MAY
// a -> _a_1[0] , MAY

#pragma MOTIF
   a->s->var2 = 9;

// Points To:
// _a_1[0].s -> *NULL* , MAY
// _a_1[0].s -> _a_1_2__1[0][0] , MAY
// a -> _a_1[0] , EXACT

   return;
}

Proper effects with points-to for "update2"

void update2(content *a)
{
//             <    is read   >: _a_1[0].s a
//             <    is written>: _a_1_2__1[0][0].var2
//             <    is referenced>: a
#pragma MOTIF
   a->s->var2 = 9;
   return;
}

Cumulated effects with points-to for "update2"

//             <    is read   >: _a_1[0].s a
//             <    is written>: _a_1_2__1[0][0].var2
//             <    is referenced>: a
void update2(content *a)
{
//             <    is read   >: _a_1[0].s a
//             <    is written>: _a_1_2__1[0][0].var2
//             <    is referenced>: a
#pragma MOTIF
   a->s->var2 = 9;
   return;
}

Proper effects with points-to for "main"

int main(int argc, char *argv[])
{

//             <    is referenced>: sub
//             <    is declared>: s
   sub s;
//             <    is referenced>: content
//             <    is declared>: a
   content a;
//             <    is written>: a.s
//             <    is referenced>: a s
   a.s = &s;

//             <    is declared>: b
   int b[100];
//             <    is declared>: c
   int c[100];
//             <    is written>: a.var1
//             <    is referenced>: a

   update1(&a);
//             <may be written>: b[*]
//             <    is read   >: a.var1
//             <    is referenced>: a b
   compute1(&a, b);
//             <    is read   >: a.s
//             <    is written>: s.var2
//             <    is referenced>: a
   update2(&a);
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: a.s s.var2
//             <    is referenced>: a b c
   compute2(&a, b, c);

   return 0;
}

Transformers with point-to for "update1"


//  T(_a_1[0][var1]) {_a_1[0][var1]==8}

void update1(content *a)
{

//  T(_a_1[0][var1]) {_a_1[0][var1]==8}

#pragma MOTIF
   a->var1 = 8;

//  T() {}

   return;
}

Transformers with point-to for "update2"


//  T(_a_1_2__1[0][0][var2]) {_a_1_2__1[0][0][var2]==9}

void update2(content *a)
{

//  T(_a_1_2__1[0][0][var2]) {_a_1_2__1[0][0][var2]==9}

#pragma MOTIF
   a->s->var2 = 9;

//  T() {}

   return;
}

Transformers with point-to for "main"


//  T(main) {main==0}

int main(int argc, char *argv[])
{


//  T() {}

   sub s;

//  T() {}

   content a;

//  T() {}

   a.s = &s;


//  T() {}

   int b[100];

//  T() {}

   int c[100];

//  T(a[var1]) {a[var1]==8}


   update1(&a);

//  T() {}

   compute1(&a, b);

//  T(s[var2]) {s[var2]==9}

   update2(&a);

//  T() {}

   compute2(&a, b, c);

//  T(main) {main==0}


   return 0;
}

Preconditions with point-to for "main"


//  P() {}

int main(int argc, char *argv[])
{


//  P() {}

   sub s;

//  P() {}

   content a;

//  P() {}

   a.s = &s;


//  P() {}

   int b[100];

//  P() {}

   int c[100];

//  P() {}


   update1(&a);

//  P(a[var1]) {a[var1]==8}

   compute1(&a, b);

//  P(a[var1]) {a[var1]==8}

   update2(&a);

//  P(a[var1],s[var2]) {a[var1]==8, s[var2]==9}

   compute2(&a, b, c);

//  P(a[var1],s[var2]) {a[var1]==8, s[var2]==9}


   return 0;
}

Preconditions with point-to for "update1"


//  P() {}

void update1(content *a)
{

//  P() {}

#pragma MOTIF
   a->var1 = 8;

//  P(_a_1[0][var1]) {_a_1[0][var1]==8}

   return;
}

Preconditions with point-to for "compute1"


//  P() {_a_1[0][var1]==8}

void compute1(content *a, int b[100])
{
#pragma MOTIF
   {

//  P() {_a_1[0][var1]==8}

      int i;

//  P() {_a_1[0][var1]==8}

      for(i = 0; i <= 99; i += 1)

//  P(i) {_a_1[0][var1]==8, 0<=i, i<=99}

         b[i] = a->var1;
   }

//  P() {_a_1[0][var1]==8}

   return;
}

Preconditions with point-to for "update2"


//  P() {}

void update2(content *a)
{

//  P() {}

#pragma MOTIF
   a->s->var2 = 9;

//  P(_a_1_2__1[0][0][var2]) {_a_1_2__1[0][0][var2]==9}

   return;
}

Preconditions with point-to for "compute2"


//  P() {_a_1_2__1[0][0][var2]==9}

void compute2(content *a, int b[100], int c[100])
{
#pragma MOTIF
   {

//  P() {_a_1_2__1[0][0][var2]==9}

      int i;

//  P() {_a_1_2__1[0][0][var2]==9}

      for(i = 0; i <= 99; i += 1)

//  P(i) {_a_1_2__1[0][0][var2]==9, 0<=i, i<=99}

         c[i] = b[i]+a->s->var2;
   }

//  P() {_a_1_2__1[0][0][var2]==9}

   return;
}

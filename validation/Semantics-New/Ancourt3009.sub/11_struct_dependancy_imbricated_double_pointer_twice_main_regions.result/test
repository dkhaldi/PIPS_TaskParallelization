
Points-to for "update2"


// Points To IN:
// s -> *NULL* , MAY
// s -> _s_1[0] , MAY


// Points To OUT:
// _s_1[0] -> *HEAP*_l_27 , MAY
// s -> _s_1[0] , EXACT

void update2(sub **s)
{

// Points To:
// s -> *NULL* , MAY
// s -> _s_1[0] , MAY

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

// Points To:
// _s_1[0] -> *HEAP*_l_27 , MAY
// s -> _s_1[0] , EXACT

   (*s)->var2 = 7;

// Points To:
// _s_1[0] -> *HEAP*_l_27 , MAY
// s -> _s_1[0] , EXACT

   return;
}

Proper effects with points-to for "update2"

void update2(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1[0] _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1[0] s
//             <    is referenced>: s
   (*s)->var2 = 7;
   return;
}

Cumulated effects with points-to for "update2"

//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1[0] s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1[0] _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s
void update2(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1[0] _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1[0] s
//             <    is referenced>: s
   (*s)->var2 = 7;
   return;
}

Proper effects with points-to for "main"

int main(int argc, char *argv[])
{
//             <    is referenced>: content
//             <    is declared>: a
   content a;
//             <    is declared>: b
   int b[100];
//             <    is declared>: c
   int c[100];
//             <may be written>: update1:*HEAP*_l_10.var2
//             <    is read   >: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   update1(&a.s1);
//             <may be read   >: update1:*HEAP*_l_10.var2
//             <may be written>: b[*]
//             <    is read   >: a.s1
//             <    is referenced>: a b
   compute1(*a.s1, b);
//             <may be written>: update2:*HEAP*_l_27.var2
//             <    is read   >: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a
   update2(&a.s2);
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: a.s2 update2:*HEAP*_l_27.var2
//             <    is referenced>: a b c
   compute2(a.s2, b, c);

   return 0;
}

Transformers with point-to for "update1"


//  T() {}

void update1(sub **s)
{

//  T() {}

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

//  T() {}

   (*s)->var2 = 8;

//  T() {}

   return;
}

Transformers with point-to for "update2"


//  T() {}

void update2(sub **s)
{

//  T() {}

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

//  T() {}

   (*s)->var2 = 7;

//  T() {}

   return;
}

Transformers with point-to for "main"


//  T(main) {main==0}

int main(int argc, char *argv[])
{

//  T() {}

   content a;

//  T() {}

   int b[100];

//  T() {}

   int c[100];

//  T() {}


   update1(&a.s1);

//  T() {}

   compute1(*a.s1, b);

//  T() {}

   update2(&a.s2);

//  T() {}

   compute2(a.s2, b, c);

//  T(main) {main==0}


   return 0;
}

Preconditions with point-to for "main"


//  P() {}

int main(int argc, char *argv[])
{

//  P() {}

   content a;

//  P() {}

   int b[100];

//  P() {}

   int c[100];

//  P() {}


   update1(&a.s1);

//  P() {}

   compute1(*a.s1, b);

//  P() {}

   update2(&a.s2);

//  P() {}

   compute2(a.s2, b, c);

//  P() {}


   return 0;
}

Regions with point-to for "update1"


//  <*HEAP*_l_10.var2-W-MAY-{}>
//  <_s_1[PHI1]-R-EXACT-{PHI1==0}>
//  <_s_1[PHI1]-W-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

void update1(sub **s)
{

//  <_s_1[PHI1]-W-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <sub-RT-EXACT-{}>

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

//  <*HEAP*_l_10.var2-W-MAY-{}>
//  <_s_1[PHI1]-R-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>

   (*s)->var2 = 8;
   return;
}

Regions with point-to for "compute1"


//  <b[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <s.var2-R-EXACT-{}>

void compute1(sub s, int b[100])
{
#pragma MOTIF
   {
      int i;

//  <b-RE-EXACT-{}>
//  <b[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <s-RE-EXACT-{}>
//  <s.var2-R-EXACT-{}>

      for(i = 0; i <= 99; i += 1)

//  <b-RE-EXACT-{}>
//  <b[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <s-RE-EXACT-{}>
//  <s.var2-R-EXACT-{0<=i, i<=99}>

         b[i] = s.var2;
   }
   return;
}

Regions with point-to for "update2"


//  <*HEAP*_l_27.var2-W-MAY-{}>
//  <_s_1[PHI1]-R-EXACT-{PHI1==0}>
//  <_s_1[PHI1]-W-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

void update2(sub **s)
{

//  <_s_1[PHI1]-W-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <sub-RT-EXACT-{}>

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

//  <*HEAP*_l_27.var2-W-MAY-{}>
//  <_s_1[PHI1]-R-EXACT-{PHI1==0}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>

   (*s)->var2 = 7;
   return;
}

Regions with point-to for "compute2"


//  <_s_1[PHI1].var2-R-EXACT-{PHI1==0}>
//  <b[PHI1]-R-EXACT-{0<=PHI1, PHI1<=99}>
//  <c[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <s-R-EXACT-{}>

void compute2(sub *s, int b[100], int c[100])
{
#pragma MOTIF
   {
      int i;

//  <_s_1[PHI1].var2-R-EXACT-{PHI1==0}>
//  <b-RE-EXACT-{}>
//  <b[PHI1]-R-EXACT-{0<=PHI1, PHI1<=99}>
//  <c-RE-EXACT-{}>
//  <c[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>

      for(i = 0; i <= 99; i += 1)

//  <_s_1[PHI1].var2-R-EXACT-{PHI1==0, 0<=i, i<=99}>
//  <b-RE-EXACT-{}>
//  <b[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <c-RE-EXACT-{}>
//  <c[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <s-R-EXACT-{}>
//  <s-RE-EXACT-{}>

         c[i] = b[i]+s->var2;
   }
   return;
}

Regions with point-to for "main"


//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <update1:*HEAP*_l_10.var2-R-MAY-{}>
//  <update1:*HEAP*_l_10.var2-W-MAY-{}>
//  <update2:*HEAP*_l_27.var2-R-EXACT-{}>
//  <update2:*HEAP*_l_27.var2-W-MAY-{}>

int main(int argc, char *argv[])
{

//  <a-WE-EXACT-{}>
//  <content-RT-EXACT-{}>

   content a;

//  <b-WE-EXACT-{}>

   int b[100];

//  <c-WE-EXACT-{}>

   int c[100];

//  <a-RE-EXACT-{}>
//  <a.s1-R-EXACT-{}>
//  <a.s1-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <update1:*HEAP*_l_10.var2-W-MAY-{}>


   update1(&a.s1);

//  <a-RE-EXACT-{}>
//  <a.s1-R-EXACT-{}>
//  <b-RE-EXACT-{}>
//  <b[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <update1:*HEAP*_l_10.var2-R-MAY-{}>

   compute1(*a.s1, b);

//  <a-RE-EXACT-{}>
//  <a.s2-R-EXACT-{}>
//  <a.s2-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <update2:*HEAP*_l_27.var2-W-MAY-{}>

   update2(&a.s2);

//  <a-RE-EXACT-{}>
//  <a.s2-R-EXACT-{}>
//  <b-RE-EXACT-{}>
//  <b[PHI1]-R-EXACT-{0<=PHI1, PHI1<=99}>
//  <c-RE-EXACT-{}>
//  <c[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <update2:*HEAP*_l_27.var2-R-EXACT-{}>

   compute2(a.s2, b, c);

   return 0;
}

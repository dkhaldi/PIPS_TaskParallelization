
Points-to for "update1"


// Points To IN:
// a -> *NULL* , MAY
// a -> _a_1 , MAY


// Points To OUT:
// _a_1.tab -> *HEAP*_l_12[0] , MAY
// a -> _a_1 , EXACT

void update1(content *a)
{

// Points To:
// a -> *NULL* , MAY
// a -> _a_1 , MAY

#pragma MOTIF
   a->var1 = 8;

// Points To:
// a -> _a_1 , EXACT


   a->tab = (int *) malloc(100*sizeof(int));
   {

// Points To:
// _a_1.tab -> *HEAP*_l_12[0] , MAY
// a -> _a_1 , EXACT

      int i;

// Points To:
// _a_1.tab -> *HEAP*_l_12[0] , MAY
// a -> _a_1 , EXACT

      for(i = 0; i <= 99; i += 1)

// Points To:
// _a_1.tab -> *HEAP*_l_12[0] , MAY
// a -> _a_1 , EXACT

         (a->tab)[i] = i;
   }

// Points To:
// _a_1.tab -> *HEAP*_l_12[0] , MAY
// a -> _a_1 , EXACT

   return;
}

Proper effects with points-to for "update1"

void update1(content *a)
{
//             <    is read   >: a
//             <    is written>: _a_1.var1
//             <    is referenced>: a
#pragma MOTIF
   a->var1 = 8;
//             <    is read   >: a _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _a_1.tab _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   a->tab = (int *) malloc(100*sizeof(int));
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <may be written>: *HEAP*_l_12[i]
//             <    is read   >: _a_1.tab a i
//             <    is referenced>: a i
         (a->tab)[i] = i;
   }
   return;
}

Cumulated effects with points-to for "update1"

//             <may be written>: *HEAP*_l_12[*]
//             <    is read   >: _a_1.tab a _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _a_1.tab _a_1.var1 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a
void update1(content *a)
{
//             <    is read   >: a
//             <    is written>: _a_1.var1
//             <    is referenced>: a
#pragma MOTIF
   a->var1 = 8;
//             <    is read   >: a _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _a_1.tab _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   a->tab = (int *) malloc(100*sizeof(int));
   {
//             <    is declared>: i
      int i;
//             <may be written>: *HEAP*_l_12[*]
//             <    is read   >: _a_1.tab a i
//             <    is written>: i
//             <    is referenced>: a i
      for(i = 0; i <= 99; i += 1)
//             <may be written>: *HEAP*_l_12[*]
//             <    is read   >: _a_1.tab a i
//             <    is referenced>: a i
         (a->tab)[i] = i;
   }
   return;
}

Points-to for "compute1"


// Points To IN:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> *NULL* , MAY
// a -> _a_1 , MAY


// Points To OUT:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

void compute1(content *a, int b[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> *NULL* , MAY
// a -> _a_1 , MAY

         b[i] = a->var1+(a->tab)[i];
   }

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

   return;
}

Proper effects with points-to for "compute1"

void compute1(content *a, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: b[i]
//             <    is referenced>: a b i
         b[i] = a->var1+(a->tab)[i];
   }
   return;
}

Cumulated effects with points-to for "compute1"

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: b[*]
void compute1(content *a, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: b[*]
//             <    is written>: i
//             <    is referenced>: a b i
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: b[*]
//             <    is referenced>: a b i
         b[i] = a->var1+(a->tab)[i];
   }
   return;
}

Points-to for "update2"


// Points To IN:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> *NULL* , MAY
// a -> _a_1 , MAY


// Points To OUT:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

void update2(content *a)
{

// Points To:
// a -> *NULL* , MAY
// a -> _a_1 , MAY

#pragma MOTIF
   a->var2 = 9;
   {

// Points To:
// a -> _a_1 , EXACT

      int i;

// Points To:
// a -> _a_1 , EXACT


      for(i = 0; i <= 99; i += 1)

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

         (a->tab)[i] = 100-i;
   }

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

   return;
}

Proper effects with points-to for "update2"

void update2(content *a)
{
//             <    is read   >: a
//             <    is written>: _a_1.var2
//             <    is referenced>: a
#pragma MOTIF
   a->var2 = 9;
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i

      for(i = 0; i <= 99; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _a_1.tab a i
//             <    is referenced>: a i
         (a->tab)[i] = 100-i;
   }
   return;
}

Cumulated effects with points-to for "update2"

//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _a_1.tab a
//             <    is referenced>: a
void update2(content *a)
{
//             <    is read   >: a
//             <    is written>: _a_1.var2
//             <    is referenced>: a
#pragma MOTIF
   a->var2 = 9;
   {
//             <    is declared>: i
      int i;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _a_1.tab a i
//             <    is referenced>: a i

      for(i = 0; i <= 99; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _a_1.tab a i
//             <    is referenced>: a i
         (a->tab)[i] = 100-i;
   }
   return;
}

Points-to for "compute2"


// Points To IN:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> *NULL* , MAY
// a -> _a_1 , MAY


// Points To OUT:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

void compute2(content *a, int b[100], int c[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> *NULL* , MAY
// a -> _a_1 , MAY

         c[i] = b[i]+a->var2+(a->tab)[i];
   }

// Points To:
// _a_1.tab -> *NULL* , MAY
// _a_1.tab -> _a_1_3__1 , MAY
// a -> _a_1 , EXACT

   return;
}

Proper effects with points-to for "compute2"

void compute2(content *a, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: c[i]
//             <    is referenced>: a b c i
         c[i] = b[i]+a->var2+(a->tab)[i];
   }
   return;
}

Cumulated effects with points-to for "compute2"

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: c[*]
void compute2(content *a, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: c[*]
//             <    is written>: i
//             <    is referenced>: a b c i
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: c[*]
//             <    is referenced>: a b c i
         c[i] = b[i]+a->var2+(a->tab)[i];
   }
   return;
}

Proper effects with points-to for "main"

int main(int argc, char *argv[])
{
//             <    is referenced>: content
//             <    is declared>: a
   content a;
//             <    is declared>: b
   int b[100];
//             <    is declared>: c
   int c[100];
//             <may be written>: update1:*HEAP*_l_12[*]
//             <    is read   >: a.tab _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.tab a.var1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   update1(&a);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: b[*]
//             <    is referenced>: a b
   compute1(&a, b);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: a.tab
//             <    is referenced>: a
   update2(&a);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: c[*]
//             <    is referenced>: a b c
   compute2(&a, b, c);

   return 0;
}

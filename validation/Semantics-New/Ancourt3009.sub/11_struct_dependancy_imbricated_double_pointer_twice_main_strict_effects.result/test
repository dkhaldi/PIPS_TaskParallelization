
Points-to for "update1"


// Points To IN:
// s -> *NULL* , MAY
// s -> _s_1 , MAY


// Points To OUT:
// _s_1 -> *HEAP*_l_10 , MAY
// s -> _s_1 , EXACT

void update1(sub **s)
{

// Points To:
// s -> *NULL* , MAY
// s -> _s_1 , MAY

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

// Points To:
// _s_1 -> *HEAP*_l_10 , MAY
// s -> _s_1 , EXACT

   (*s)->var2 = 8;

// Points To:
// _s_1 -> *HEAP*_l_10 , MAY
// s -> _s_1 , EXACT

   return;
}

Proper effects with points-to for "update1"

void update1(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _s_1 s
//             <    is referenced>: s
   (*s)->var2 = 8;
   return;
}

Cumulated effects with points-to for "update1"

//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _s_1 s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s
void update1(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _s_1 s
//             <    is referenced>: s
   (*s)->var2 = 8;
   return;
}

Points-to for "compute1"


// Points To IN: none


// Points To OUT: none

void compute1(sub s, int b[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To: none

         b[i] = s.var2;
   }

// Points To: none

   return;
}

Proper effects with points-to for "compute1"

void compute1(sub s, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <    is read   >: i s.var2
//             <    is written>: b[i]
//             <    is referenced>: b i s
         b[i] = s.var2;
   }
   return;
}

Cumulated effects with points-to for "compute1"

//             <may be written>: b[*]
//             <    is read   >: s.var2
//             <    is referenced>: b s
void compute1(sub s, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be written>: b[*]
//             <    is read   >: i s.var2
//             <    is written>: i
//             <    is referenced>: b i s
      for(i = 0; i <= 99; i += 1)
//             <may be written>: b[*]
//             <    is read   >: i s.var2
//             <    is referenced>: b i s
         b[i] = s.var2;
   }
   return;
}

Points-to for "update2"


// Points To IN:
// s -> *NULL* , MAY
// s -> _s_1 , MAY


// Points To OUT:
// _s_1 -> *HEAP*_l_27 , MAY
// s -> _s_1 , EXACT

void update2(sub **s)
{

// Points To:
// s -> *NULL* , MAY
// s -> _s_1 , MAY

#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));

// Points To:
// _s_1 -> *HEAP*_l_27 , MAY
// s -> _s_1 , EXACT

   (*s)->var2 = 7;

// Points To:
// _s_1 -> *HEAP*_l_27 , MAY
// s -> _s_1 , EXACT

   return;
}

Proper effects with points-to for "update2"

void update2(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1 s
//             <    is referenced>: s
   (*s)->var2 = 7;
   return;
}

Cumulated effects with points-to for "update2"

//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1 s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s
void update2(sub **s)
{
//             <    is read   >: s _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _s_1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: s sub
#pragma MOTIF
   *s = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _s_1 s
//             <    is referenced>: s
   (*s)->var2 = 7;
   return;
}

Points-to for "compute2"


// Points To IN:
// s -> *NULL* , MAY
// s -> _s_1 , MAY


// Points To OUT:
// s -> _s_1 , EXACT

void compute2(sub *s, int b[100], int c[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To:
// s -> *NULL* , MAY
// s -> _s_1 , MAY

         c[i] = b[i]+s->var2;
   }

// Points To:
// s -> _s_1 , EXACT

   return;
}

Proper effects with points-to for "compute2"

void compute2(sub *s, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <    is read   >: _s_1.var2 b[i] i s
//             <    is written>: c[i]
//             <    is referenced>: b c i s
         c[i] = b[i]+s->var2;
   }
   return;
}

Cumulated effects with points-to for "compute2"

//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _s_1.var2 s
//             <    is referenced>: b c s
void compute2(sub *s, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _s_1.var2 i s
//             <    is written>: i
//             <    is referenced>: b c i s
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _s_1.var2 i s
//             <    is referenced>: b c i s
         c[i] = b[i]+s->var2;
   }
   return;
}

Proper effects with points-to for "main"

int main(int argc, char *argv[])
{
//             <    is referenced>: content
//             <    is declared>: a
   content a;
//             <    is declared>: b
   int b[100];
//             <    is declared>: c
   int c[100];
//             <may be written>: update1:*HEAP*_l_10.var2
//             <    is read   >: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   update1(&a.s1);
//             <may be read   >: update1:*HEAP*_l_10.var2
//             <may be written>: b[*]
//             <    is read   >: a.s1
//             <    is referenced>: a b
   compute1(*a.s1, b);
//             <may be written>: update2:*HEAP*_l_27.var2
//             <    is read   >: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a
   update2(&a.s2);
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: a.s2 update2:*HEAP*_l_27.var2
//             <    is referenced>: a b c
   compute2(a.s2, b, c);

   return 0;
}

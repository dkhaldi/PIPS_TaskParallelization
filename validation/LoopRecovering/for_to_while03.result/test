Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analysis:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:
Privatize scalar variables on all the modules of the program:
Ask for some statistics about the job to be done:
Ask for the parallelization of all the modules of the program with OpenMP output:
main(int argc, char *argv[])
{
   // BEGIN BLOCK
   int l, m, a;

   l = 0;
   while (l<M) {
      // BEGIN BLOCK
compute:      do {
         // BEGIN BLOCK
         m = 0;
         while (m<M) {
            // BEGIN BLOCK
            a = 0;
            l++;
            // END BLOCK
         }
         // END BLOCK
      }
      while (0);
      l++;
      // END BLOCK
   }
   // END BLOCK
}
Regenerate the sources from the PIPS transformed code:
/*
 * file for for_to_while03.c
 */
// BEGIN BLOCK
enum {M=64};


extern  main(int argc, char *argv[]);
//PIPS generated variable
void compute(int M, int a_0[1], int l_0[1], int m_0[1]);
// END BLOCK
void compute(int M, int a_0[1], int l_0[1], int m_0[1])
{
   // BEGIN BLOCK
   // Declared as a patch variable by Pass Outlining
   int a, l, m;
   m = *m_0;
   l = *l_0;
   a = *a_0;
compute:   do {
      // BEGIN BLOCK
      m = 0;
      while (m<M) {
         // BEGIN BLOCK
         a = 0;
         l++;
         // END BLOCK
      }
      // END BLOCK
   }
   while (0);
   *a_0 = a;
   *l_0 = l;
   *m_0 = m;
   // END BLOCK
}
main(int argc, char *argv[])
{
   // BEGIN BLOCK
   int l, m, a;

   l = 0;
   while (l<M) {
      // BEGIN BLOCK
compute:      compute(M, &a, &l, &m);
      l++;
      // END BLOCK
   }
   // END BLOCK
}

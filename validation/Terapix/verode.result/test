void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y, z;
#pragma terapix
   for(y = 2; y <= n-2-1; y += 1)
      for(x = 0; x <= n-1; x += 1) {
         int val = 0;
         for(z = -2; z <= 2; z += 1)
            val = pips_max(2, val, img[y+z][x]);
         img_out[y-2][x] = val;
      }
}
tidy the code just in case of
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y, z;
#pragma terapix
   for(y = 0; y <= n-5; y += 1)
      for(x = 0; x <= n-1; x += 1) {
         int val = 0;
         for(z = 0; z <= 4; z += 1)
            val = pips_max(2, val, img[y+z][x]);
         img_out[y][x] = val;
      }
}
**** check ok ******
void runner(int n, int img_out[n-4][n], int img[n][n])
{
   int x, y, z;
#pragma terapix
   for(y = 0; y <= n-5; y += 1)
      for(x = 0; x <= n-1; x += 1) {
         int val = 0;
         for(z = 0; z <= 4; z += 1)
            val = pips_max(2, val, img[y+z][x]);
         img_out[y][x] = val;
      }
}
detection and extraction
tiling
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(y = 0; y <= n-5; y += 1)
l99998:
         for(x = 0; x <= n-1; x += 1) {
            int val = 0;
l99999:
            for(z = 0; z <= 4; z += 1)
               val = pips_max(2, val, img[y+z][x]);
            img_out[y][x] = val;
         }
   }
}
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            y = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            for(y = I_9; y <= pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1); y += 1)
               for(x = I_14; x <= pips_min(2, n-1, I_14+__TERAPYPS_HEIGHT-1); x += 1) {
                  int val = 0;
                  for(z = 0; z <= 4; z += 1)
                     val = pips_max(2, val, img[z+y][x]);
                  img_out[y][x] = val;
               }
         }
      }
   }
}
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, val0, val1, val2, val3;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            y = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-5>I_9+__TERAPYPS_WIDTH-1)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(y = I_9; y <= I_9+__TERAPYPS_WIDTH-1; y += 1)
                     for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                        val3 = 0;
                        val3 = 0;

                        for(z = 0; z <= 4; z += 1)
                           val3 = pips_max(2, val3, img[y+z][x]);
                        img_out[y][x] = val3;
                     }
               else
                  for(y = I_9; y <= I_9+__TERAPYPS_WIDTH-1; y += 1)
                     for(x = I_14; x <= n-1; x += 1) {
                        val2 = 0;
                        val2 = 0;

                        for(z = 0; z <= 4; z += 1)
                           val2 = pips_max(2, val2, img[y+z][x]);
                        img_out[y][x] = val2;
                     }
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
               for(y = I_9; y <= n-5; y += 1)
                  for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                     val1 = 0;
                     val1 = 0;

                     for(z = 0; z <= 4; z += 1)
                        val1 = pips_max(2, val1, img[y+z][x]);
                     img_out[y][x] = val1;
                  }
            else
               for(y = I_9; y <= n-5; y += 1)
                  for(x = I_14; x <= n-1; x += 1) {
                     val0 = 0;
                     val0 = 0;

                     for(z = 0; z <= 4; z += 1)
                        val0 = pips_max(2, val0, img[y+z][x]);
                     img_out[y][x] = val0;
                  }
         }
      }
   }
}
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, val0, val1, val2, val3;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            y = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-5>I_9+__TERAPYPS_WIDTH-1)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(y = I_9; y <= I_9+__TERAPYPS_WIDTH-1; y += 1)
                     for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                        val3 = 0;
                        val3 = 0;

                        for(z = 0; z <= 4; z += 1)
                           val3 = pips_max(2, val3, img[y+z][x]);
                        img_out[y][x] = val3;
                     }
               else
                  for(y = I_9; y <= I_9+__TERAPYPS_WIDTH-1; y += 1)
                     for(x = I_14; x <= n-1; x += 1) {
                        val2 = 0;
                        val2 = 0;

                        for(z = 0; z <= 4; z += 1)
                           val2 = pips_max(2, val2, img[y+z][x]);
                        img_out[y][x] = val2;
                     }
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
               for(y = I_9; y <= n-5; y += 1)
                  for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                     val1 = 0;
                     val1 = 0;

                     for(z = 0; z <= 4; z += 1)
                        val1 = pips_max(2, val1, img[y+z][x]);
                     img_out[y][x] = val1;
                  }
            else
               for(y = I_9; y <= n-5; y += 1)
                  for(x = I_14; x <= n-1; x += 1) {
                     val0 = 0;
                     val0 = 0;

                     for(z = 0; z <= 4; z += 1)
                        val0 = pips_max(2, val0, img[y+z][x]);
                     img_out[y][x] = val0;
                  }
         }
      }
   }
}
group constants and isolate
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, val0, val1, val2, val3;
   if (__TERAPYPS_HEIGHT>3||3<124) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/124; I_0 += 1) {
         I_9 = 124*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99984:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            y = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+123)-I_9+1), 0);
            if (n-5>I_9+123)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99994:
                  for(y = I_9; y <= I_9+123; y += 1)
l99995:
                     for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                        val3 = 0;
                        val3 = 0;

l99996:
                        for(z = 0; z <= 4; z += 1)
                           val3 = pips_max(2, val3, img[y+z][x]);
                        img_out[y][x] = val3;
                     }
               else
l99991:
                  for(y = I_9; y <= I_9+123; y += 1)
l99992:
                     for(x = I_14; x <= n-1; x += 1) {
                        val2 = 0;
                        val2 = 0;

l99993:
                        for(z = 0; z <= 4; z += 1)
                           val2 = pips_max(2, val2, img[y+z][x]);
                        img_out[y][x] = val2;
                     }
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99988:
               for(y = I_9; y <= n-5; y += 1)
l99989:
                  for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                     val1 = 0;
                     val1 = 0;

l99990:
                     for(z = 0; z <= 4; z += 1)
                        val1 = pips_max(2, val1, img[y+z][x]);
                     img_out[y][x] = val1;
                  }
            else
l99985:
               for(y = I_9; y <= n-5; y += 1)
l99986:
                  for(x = I_14; x <= n-1; x += 1) {
                     val0 = 0;
                     val0 = 0;

l99987:
                     for(z = 0; z <= 4; z += 1)
                        val0 = pips_max(2, val0, img[y+z][x]);
                     img_out[y][x] = val0;
                  }
         }
      }
   }
}
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   int __TERAPYPS_WIDTH = 124, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, val0, val1, val2, val3;
   __TERAPYPS_HEIGHT = 260;
   if (__TERAPYPS_HEIGHT>3||3<124) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/124; I_0 += 1) {
         I_9 = 124*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99984:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            y = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+123)-I_9+1), 0);
            if (n-5>I_9+123)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99994:
                  for(y = I_9; y <= I_9+123; y += 1)
l99995:
                     for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                        val3 = 0;
                        val3 = 0;

l99996:
                        for(z = 0; z <= 4; z += 1)
                           val3 = pips_max(2, val3, img[y+z][x]);
                        img_out[y][x] = val3;
                     }
               else
l99991:
                  for(y = I_9; y <= I_9+123; y += 1)
l99992:
                     for(x = I_14; x <= n-1; x += 1) {
                        val2 = 0;
                        val2 = 0;

l99993:
                        for(z = 0; z <= 4; z += 1)
                           val2 = pips_max(2, val2, img[y+z][x]);
                        img_out[y][x] = val2;
                     }
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99988:
               for(y = I_9; y <= n-5; y += 1)
l99989:
                  for(x = I_14; x <= I_14+__TERAPYPS_HEIGHT-1; x += 1) {
                     val1 = 0;
                     val1 = 0;

l99990:
                     for(z = 0; z <= 4; z += 1)
                        val1 = pips_max(2, val1, img[y+z][x]);
                     img_out[y][x] = val1;
                  }
            else
l99985:
               for(y = I_9; y <= n-5; y += 1)
l99986:
                  for(x = I_14; x <= n-1; x += 1) {
                     val0 = 0;
                     val0 = 0;

l99987:
                     for(z = 0; z <= 4; z += 1)
                        val0 = pips_max(2, val0, img[y+z][x]);
                     img_out[y][x] = val0;
                  }
         }
      }
   }
}
**** check ok ******
void runner_l99997(int n, int img[n][n], int img_out[n-4][n])
{
   //PIPS generated variable
   int I_0, I_1, val0, val1, val2, val3;

   if (260>3||3<124) {
      // Declared by Pass Outlining
      int x, y, z;
l99997:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/124; I_0 += 1) {


l99984:
         for(I_1 = 0; I_1 <= (n-1)/260; I_1 += 1) {


            if (n-5>124*I_0+123)
               if (n-1>260*I_1+259)
l99994:
                  for(y = 124*I_0; y <= 124*I_0+123; y += 1)
l99995:
                     for(x = 260*I_1; x <= 260*I_1+259; x += 1) {

                        val3 = 0;

l99996:
                        for(z = 0; z <= 4; z += 1)
                           val3 = pips_max(2, val3, img[y+z][x]);
                        img_out[y][x] = val3;
                     }
               else
l99991:
                  for(y = 124*I_0; y <= 124*I_0+123; y += 1)
l99992:
                     for(x = 260*I_1; x <= n-1; x += 1) {

                        val2 = 0;

l99993:
                        for(z = 0; z <= 4; z += 1)
                           val2 = pips_max(2, val2, img[y+z][x]);
                        img_out[y][x] = val2;
                     }
            else if (n-1>260*I_1+259)
l99988:
               for(y = 124*I_0; y <= n-5; y += 1)
l99989:
                  for(x = 260*I_1; x <= 260*I_1+259; x += 1) {

                     val1 = 0;

l99990:
                     for(z = 0; z <= 4; z += 1)
                        val1 = pips_max(2, val1, img[y+z][x]);
                     img_out[y][x] = val1;
                  }
            else
l99985:
               for(y = 124*I_0; y <= n-5; y += 1)
l99986:
                  for(x = 260*I_1; x <= n-1; x += 1) {

                     val0 = 0;

l99987:
                     for(z = 0; z <= 4; z += 1)
                        val0 = pips_max(2, val0, img[y+z][x]);
                     img_out[y][x] = val0;
                  }
         }
      }
   }
}
void tile_l99994(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n])
{
   // Declared by Pass Outlining
   int x, y, z, val3;
l99994:
   for(y = 124*I_0; y <= 124*I_0+123; y += 1)
l99995:
      for(x = 260*I_1; x <= 260*I_1+259; x += 1) {
         val3 = 0;

l99996:
         for(z = 0; z <= 4; z += 1)
            val3 = pips_max(2, val3, img[y+z][x]);
         img_out[y][x] = val3;
      }
}
void tile_l99994(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n])
{
   // Declared by Pass Outlining
   int x, y, z, val3;
   {
      //PIPS generated variable
      int (*img0)[128][260] = (int (*)[128][260]) 0, (*img_out0)[124][260] = (int (*)[124][260]) 0;
      P4A_accel_malloc((void **) &img_out0, sizeof(int)*32240);
      P4A_accel_malloc((void **) &img0, sizeof(int)*33280);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 260, 124*I_0, 260*I_1, &img[0][0], *img0);

l99994:
      for(y = 124*I_0; y <= 124*I_0+123; y += 1)
l99995:
         for(x = 260*I_1; x <= 260*I_1+259; x += 1) {
            val3 = 0;

l99996:
            for(z = 0; z <= 4; z += 1)
               val3 = pips_max(2, val3, (*img0)[y+z-124*I_0][x-260*I_1]);
            (*img_out0)[y-124*I_0][x-260*I_1] = val3;
         }
      P4A_copy_from_accel_2d(sizeof(int), n-4, n, 124, 260, 124*I_0, 260*I_1, &img_out[0][0], *img_out0);
      P4A_accel_free(img_out0);
      P4A_accel_free(img0);
   }
}
**** check ok ******
outlining to launcher
void tile_l99994(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n])
{
   // Declared by Pass Outlining
   int x, y, z, val3;
   {
      //PIPS generated variable
      int (*img0)[128][260] = (int (*)[128][260]) 0, (*img_out0)[124][260] = (int (*)[124][260]) 0;
      P4A_accel_malloc((void **) &img_out0, 32240*sizeof(int));
      P4A_accel_malloc((void **) &img0, 33280*sizeof(int));
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 260, 124*I_0, 260*I_1, &img[0][0], *img0);

l99994:      launcher_0(259+1, *img0, *img_out0);
      P4A_copy_from_accel_2d(sizeof(int), n-4, n, 124, 260, 124*I_0, 260*I_1, &img_out[0][0], *img_out0);
      P4A_accel_free(img_out0);
      P4A_accel_free(img0);
   }
}

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=259,
//    I_22==260}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=123, 0<=PHI2,
//    PHI2<=259, I_22==260}>

void launcher_0(int I_22, int img0[128][260], int img_out0[124][260])
{
   // Declared by Pass Outlining
   int val3, x, y, z;

//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=259,
//    I_22==260}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=123, 0<=PHI2,
//    PHI2<=259, I_22==260}>

l99994:
   for(y = 0; y <= 123; y += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{y<=PHI1, PHI1<=y+4, 0<=PHI2, PHI2<=259,
//    I_22==260, 0<=y, y<=123}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, 0<=PHI2, PHI2<=259,
//    I_22==260, 0<=y, y<=123}>

l99995:
      for(x = 0; x <= I_22-1; x += 1) {
         val3 = 0;

//  <img0[PHI1][PHI2]-R-EXACT-{PHI2==x, y<=PHI1, PHI1<=y+4, I_22==260,
//    0<=x, x<=259, 0<=y, y<=123}>


l99996:
         for(z = 0; z <= 4; z += 1)

//  <img0[PHI1][PHI2]-R-EXACT-{y+z==PHI1, PHI2==x, I_22==260, 0<=val3,
//    0<=x, x<=259, 0<=y, y<=123, 0<=z, z<=4}>

            val3 = pips_max(2, val3, img0[y+z][x]);

//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==y, PHI2==x, z==5, I_22==260,
//    0<=val3, 0<=x, x<=259, 0<=y, y<=123}>

         img_out0[y][x] = val3;
      }
}
outlining to microcode
void launcher_0(int I_22, int img0[128][260], int img_out0[124][260])
{
   // Declared by Pass Outlining
   int val3, x, y, z;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:
      for(x = 0; x <= I_22-1; x += 1) {
         val3 = 0;

l99996:
         for(z = 0; z <= 4; z += 1)
            val3 = pips_max(2, val3, img0[y+z][x]);
         img_out0[y][x] = val3;
      }
}
void launcher_0(int I_22, int img0[128][260], int img_out0[124][260])
{
   // Declared by Pass Outlining
   int val3, x, y, z;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:
      for(x = 0; x <= I_22-1; x += 1) {
         val3 = 0;

l99996:
         for(z = 0; z <= 4; z += 1)
            val3 = pips_max(2, val3, img0[y][x+260*z]);
         img_out0[y][x] = val3;
      }
}
void launcher_0(int I_22, int img0[128][260], int img_out0[124][260])
{
   // Declared by Pass Outlining
   int val3, x, y, z;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:      launcher_0_microcode(I_22, *&img0[y], *&img_out0[y]);
}
void launcher_0_microcode(int I_22, int img00[260], int img_out00[260])
{
   // Declared by Pass Outlining
   int val3, x, z;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;

l99996:
      for(z = 0; z <= 4; z += 1)
         val3 = pips_max(2, val3, img00[x+260*z]);
      img_out00[x] = val3;
   }
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_22, int img00[260], int img_out00[260])
{
   // Declared by Pass Outlining
   int val3, x, z;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;

l99996:
      for(z = 0; z <= 4; z += 1)
         val3 = pips_max(2, val3, img00[x+260*z]);
      img_out00[x] = val3;
   }
}
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;

l99996:
      for(z = 0; z <= 4; z += 1)
         val3 = pips_max(2, val3, *(img00+(x+260*z)));
      *(img_out00+x) = val3;
   }
}
**** check ok ******
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img00+x;
      for(z = 0; z <= 4; z += 1)
         val3 = pips_max(2, val3, *(260*z+P_0));
      *(img_out00+x) = val3;
   }
}
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   img_out000 = img_out00;
   img000 = img00;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img000;
      P_00 = P_0;
      for(z = 0; z <= 4; z += 1) {
         val3 = pips_max(2, val3, *P_00);
         P_00 += 260;
      }
      *img_out000 = val3;
      img_out000 += 1;
      img000 += 1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   img_out000 = img_out00;
   img000 = img00;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img000;
      P_00 = P_0;
      for(z = 0; z <= 4; z += 1) {
         val3 = pips_max(2, val3, *P_00);
         P_00 += 260;
      }
      *img_out000 = val3;
      img_out000 += 1;
      img000 += 1;
   }
}
**** check ok ******
**** check ok ******
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   img_out000 = img_out00;
   img000 = img00;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img000;
      P_00 = P_0;
      for(z = 0; z <= 4; z += 1) {
         val3 = pips_max(2, val3, *P_00);
         P_00 += 260;
      }
      *img_out000 = val3;
      img_out000 += 1;
      img000 += 1;
   }
}
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   img_out000 = img_out00;
   img000 = img00;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img000;
      P_00 = P_0;
      for(z = 0; z <= 4; z += 1) {
         val3 = pips_max(2, val3, *P_00);
         P_00 = P_00+260;
      }
      *img_out000 = val3;
      img_out000 = img_out000+1;
      img000 = img000+1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_22, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   img_out000 = img_out00;
   img000 = img00;
l99995:
   for(x = 0; x <= I_22-1; x += 1) {
      val3 = 0;
      P_0 = img000;
      P_00 = P_0;
      for(z = 0; z <= 4; z += 1) {
         val3 = pips_max(2, val3, *P_00);
         P_00 = P_00+260;
      }
      *img_out000 = val3;
      img_out000 = img_out000+1;
      img000 = img000+1;
   }
}
**** check ok ******
I_22 belongs to a loop bound
img00 seems an image
img_out00 seems an image
void launcher_0_microcode(int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix img_out00 124 260
#pragma terapix img00 128 260
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *im4, *img00, *im5, *img_out00, *im6;
   //PIPS generated variable
   int re6, re7, re8, re9, re10, re11;
   //PIPS generated variable
   int *im7, *im8, *im9, *im10, *im11, *im12;
   //PIPS generated variable
   int P;
   im6 = FIFO2;
   im5 = FIFO1;
   im2 = im6;
   im3 = im5;
   im3 = im3-1;
   im2 = im2-1;
l99995:
   for(re7 = 0; re7 <= N1; re7 += 1) {
      im3 = im3+1;
      //PIPS generated variable
      int I_23;
      P = 0;
      im4 = im3;
      im1 = im4;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      *++im2 = P;
   }
}
**** check ok ******
void launcher_0_microcode(int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix img_out00 124 260
#pragma terapix img00 128 260
   int val3, x, z;
   //PIPS generated variable
   int *P_0, *img000, *img_out000, *P_00;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *im4, *img00, *im5, *img_out00, *im6;
   //PIPS generated variable
   int re6, re7, re8, re9, re10, re11;
   //PIPS generated variable
   int *im7, *im8, *im9, *im10, *im11, *im12;
   //PIPS generated variable
   int P;
   im6 = FIFO2;
   im5 = FIFO1;
   im2 = im6;
   im3 = im5;
   im3 = im3-1;
   im2 = im2-1;
l99995:
   for(re7 = 0; re7 <= N1; re7 += 1) {
      im3 = im3+1;
      //PIPS generated variable
      int I_23;
      P = 0;
      im4 = im3;
      im1 = im4;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      P = pips_max(2, P, *im1);
      im1 = im1+260;
      *++im2 = P;
   }
}
void launcher_0(int I_22, int img0[128][260], int img_out0[124][260])
{
   // Declared by Pass Outlining
   int val3, x, y, z;
l99994:
   for(y = 0; y <= 123; y += 1)
l99995:      launcher_0_microcode(*&img_out0[y], *&img0[y], I_22);
}
**** check ok ******
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-4][n], in[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in);
   check = 0;
   for(i = 0; i <= n-4-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
tidy the code just in case of
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-5+1][n], in[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in);
   check = 0;
   for(i = 0; i <= n-5; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
**** check ok ******
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-5+1][n], in[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in);
   check = 0;
   for(i = 0; i <= n-5; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
detection and extraction
tiling


Initial code

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   I_17 = isj-2;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = i_1_0-1;
         I_19 = isj*I_18;
         I_5 = j+I_19;
         F_9 = image[I_5-1]*kernel[0];
         __scalar__0 = __scalar__0+F_9;
         F_10 = image[I_5]*kernel[1];
         __scalar__0 = __scalar__0+F_10;
         F_11 = image[I_5+1]*kernel[2];
         __scalar__0 = __scalar__0+F_11;
         kj_0 = 3;
         I_20 = isj*i_1_0;
         I_9 = j+I_20;
         F_12 = image[I_9-1]*kernel[3];
         __scalar__0 = __scalar__0+F_12;
         F_13 = image[I_9]*kernel[4];
         __scalar__0 = __scalar__0+F_13;
         F_14 = image[I_9+1]*kernel[5];
         __scalar__0 = __scalar__0+F_14;
         kj_0 = 3;
         I_21 = i_1_0+1;
         I_22 = isj*I_21;
         I_14 = j+I_22;
         F_15 = image[I_14-1]*kernel[6];
         __scalar__0 = __scalar__0+F_15;
         F_16 = image[I_14]*kernel[7];
         __scalar__0 = __scalar__0+F_16;
         F_17 = image[I_14+1]*kernel[8];
         __scalar__0 = __scalar__0+F_17;
         kj_0 = 3;
         ki_0 = 3;
         __scalar__0 = __scalar__0/9;
         new_image[j+isj*i_1_0] = __scalar__0;
      }
}

Atomized code

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8;
   I_17 = isj-2;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, isi-2); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = i_1_0-1;
         I_19 = isj*I_18;
         I_5 = j+I_19;
         I_0 = I_5-1;
         F_9 = image[I_0]*kernel[0];
         __scalar__0 = __scalar__0+F_9;
         F_10 = image[I_5]*kernel[1];
         __scalar__0 = __scalar__0+F_10;
         I_1 = I_5+1;
         F_11 = image[I_1]*kernel[2];
         __scalar__0 = __scalar__0+F_11;
         kj_0 = 3;
         I_20 = isj*i_1_0;
         I_9 = j+I_20;
         I_2 = I_9-1;
         F_12 = image[I_2]*kernel[3];
         __scalar__0 = __scalar__0+F_12;
         F_13 = image[I_9]*kernel[4];
         __scalar__0 = __scalar__0+F_13;
         I_3 = I_9+1;
         F_14 = image[I_3]*kernel[5];
         __scalar__0 = __scalar__0+F_14;
         kj_0 = 3;
         I_21 = i_1_0+1;
         I_22 = isj*I_21;
         I_14 = j+I_22;
         I_4 = I_14-1;
         F_15 = image[I_4]*kernel[6];
         __scalar__0 = __scalar__0+F_15;
         F_16 = image[I_14]*kernel[7];
         __scalar__0 = __scalar__0+F_16;
         I_6 = I_14+1;
         F_17 = image[I_6]*kernel[8];
         __scalar__0 = __scalar__0+F_17;
         kj_0 = 3;
         ki_0 = 3;
         __scalar__0 = __scalar__0/9;
         I_7 = isj*i_1_0;
         I_8 = j+I_7;
         new_image[I_8] = __scalar__0;
      }
}

Tidy code

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_10, I_11, I_12, I_13, I_15, I_16, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75, I_76, I_77;
   I_17 = isj-2;
   I_73 = -2;
   I_74 = -1;
   I_75 = -1;
   I_76 = -1;
   I_77 = -1;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = I_74+i_1_0;
         I_19 = isj*I_18;
         I_5 = I_19+j;
         I_0 = I_5+I_75;
         F_9 = image[I_0]*kernel[0];
         __scalar__0 = F_9+__scalar__0;
         F_10 = image[I_5]*kernel[1];
         __scalar__0 = F_10+__scalar__0;
         I_1 = I_5+1;
         F_11 = image[I_1]*kernel[2];
         __scalar__0 = F_11+__scalar__0;
         kj_0 = 3;
         I_38 = isj*i_1_0;
         I_20 = I_38;
         I_9 = I_20+j;
         I_2 = I_76+I_9;
         F_12 = image[I_2]*kernel[3];
         __scalar__0 = F_12+__scalar__0;
         F_13 = image[I_9]*kernel[4];
         __scalar__0 = F_13+__scalar__0;
         I_3 = I_9+1;
         F_14 = image[I_3]*kernel[5];
         __scalar__0 = F_14+__scalar__0;
         kj_0 = 3;
         I_21 = i_1_0+1;
         I_22 = isj*I_21;
         I_14 = I_22+j;
         I_4 = I_14+I_77;
         F_15 = image[I_4]*kernel[6];
         __scalar__0 = F_15+__scalar__0;
         F_16 = image[I_14]*kernel[7];
         __scalar__0 = F_16+__scalar__0;
         I_6 = I_14+1;
         F_17 = image[I_6]*kernel[8];
         __scalar__0 = F_17+__scalar__0;
         kj_0 = 3;
         ki_0 = 3;
         __scalar__0 = __scalar__0/9;
         I_7 = I_38;
         I_8 = I_7+j;
         new_image[I_8] = __scalar__0;
      }
}

Code in a two adress fashion

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_10, I_11, I_12, I_13, I_15, I_16, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75, I_76, I_77;
   I_17 = isj;
   I_17 = I_17-2;
   I_73 = 2;
   I_73 = -I_73;
   I_74 = 1;
   I_74 = -I_74;
   I_75 = 1;
   I_75 = -I_75;
   I_76 = 1;
   I_76 = -I_76;
   I_77 = 1;
   I_77 = -I_77;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = I_74;
         I_18 = I_18+i_1_0;
         I_19 = isj;
         I_19 = I_19*I_18;
         I_5 = I_19;
         I_5 = I_5+j;
         I_0 = I_5;
         I_0 = I_0+I_75;
         F_9 = image[I_0];
         F_9 = F_9*kernel[0];
         __scalar__0 = F_9+__scalar__0;
         F_10 = image[I_5];
         F_10 = F_10*kernel[1];
         __scalar__0 = F_10+__scalar__0;
         I_1 = I_5;
         I_1 = I_1+1;
         F_11 = image[I_1];
         F_11 = F_11*kernel[2];
         __scalar__0 = F_11+__scalar__0;
         kj_0 = 3;
         I_38 = isj;
         I_38 = I_38*i_1_0;
         I_20 = I_38;
         I_9 = I_20;
         I_9 = I_9+j;
         I_2 = I_76;
         I_2 = I_2+I_9;
         F_12 = image[I_2];
         F_12 = F_12*kernel[3];
         __scalar__0 = F_12+__scalar__0;
         F_13 = image[I_9];
         F_13 = F_13*kernel[4];
         __scalar__0 = F_13+__scalar__0;
         I_3 = I_9;
         I_3 = I_3+1;
         F_14 = image[I_3];
         F_14 = F_14*kernel[5];
         __scalar__0 = F_14+__scalar__0;
         kj_0 = 3;
         I_21 = i_1_0;
         I_21 = I_21+1;
         I_22 = isj;
         I_22 = I_22*I_21;
         I_14 = I_22;
         I_14 = I_14+j;
         I_4 = I_14;
         I_4 = I_4+I_77;
         F_15 = image[I_4];
         F_15 = F_15*kernel[6];
         __scalar__0 = F_15+__scalar__0;
         F_16 = image[I_14];
         F_16 = F_16*kernel[7];
         __scalar__0 = F_16+__scalar__0;
         I_6 = I_14;
         I_6 = I_6+1;
         F_17 = image[I_6];
         F_17 = F_17*kernel[8];
         __scalar__0 = F_17+__scalar__0;
         kj_0 = 3;
         ki_0 = 3;
         __scalar__0 = __scalar__0/9;
         I_7 = I_38;
         I_8 = I_7;
         I_8 = I_8+j;
         new_image[I_8] = __scalar__0;
      }
}

Code after expression substitution

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_10, I_11, I_12, I_13, I_15, I_16, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75, I_76, I_77;
   I_17 = isj;
   subi(I_17, 2);
   I_73 = 2;
   I_73 = -I_73;
   I_74 = 1;
   I_74 = -I_74;
   I_75 = 1;
   I_75 = -I_75;
   I_76 = 1;
   I_76 = -I_76;
   I_77 = 1;
   I_77 = -I_77;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = I_74;
         addi(I_18, I_18, i_1_0);
         I_19 = isj;
         muli(I_19, I_18);
         I_5 = I_19;
         addi(I_5, I_5, j);
         I_0 = I_5;
         addi(I_0, I_0, I_75);
         F_9 = image[I_0];
         muli(F_9, kernel[0]);
         addi(__scalar__0, F_9, __scalar__0);
         F_10 = image[I_5];
         muli(F_10, kernel[1]);
         addi(__scalar__0, F_10, __scalar__0);
         I_1 = I_5;
         addi(I_1, I_1, 1);
         F_11 = image[I_1];
         muli(F_11, kernel[2]);
         addi(__scalar__0, F_11, __scalar__0);
         kj_0 = 3;
         I_38 = isj;
         muli(I_38, i_1_0);
         I_20 = I_38;
         I_9 = I_20;
         addi(I_9, I_9, j);
         I_2 = I_76;
         addi(I_2, I_2, I_9);
         F_12 = image[I_2];
         muli(F_12, kernel[3]);
         addi(__scalar__0, F_12, __scalar__0);
         F_13 = image[I_9];
         muli(F_13, kernel[4]);
         addi(__scalar__0, F_13, __scalar__0);
         I_3 = I_9;
         addi(I_3, I_3, 1);
         F_14 = image[I_3];
         muli(F_14, kernel[5]);
         addi(__scalar__0, F_14, __scalar__0);
         kj_0 = 3;
         I_21 = i_1_0;
         addi(I_21, I_21, 1);
         I_22 = isj;
         muli(I_22, I_21);
         I_14 = I_22;
         addi(I_14, I_14, j);
         I_4 = I_14;
         addi(I_4, I_4, I_77);
         F_15 = image[I_4];
         muli(F_15, kernel[6]);
         addi(__scalar__0, F_15, __scalar__0);
         F_16 = image[I_14];
         muli(F_16, kernel[7]);
         addi(__scalar__0, F_16, __scalar__0);
         I_6 = I_14;
         addi(I_6, I_6, 1);
         F_17 = image[I_6];
         muli(F_17, kernel[8]);
         addi(__scalar__0, F_17, __scalar__0);
         kj_0 = 3;
         ki_0 = 3;
         divi(__scalar__0, 9);
         I_7 = I_38;
         I_8 = I_7;
         addi(I_8, I_8, j);
         new_image[I_8] = __scalar__0;
      }
}

Code after flattening

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_10, I_11, I_12, I_13, I_15, I_16, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75, I_76, I_77;
   I_17 = isj;
   subi(I_17, 2);
   I_73 = 2;
   I_73 = -I_73;
   I_74 = 1;
   I_74 = -I_74;
   I_75 = 1;
   I_75 = -I_75;
   I_76 = 1;
   I_76 = -I_76;
   I_77 = 1;
   I_77 = -I_77;
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         __scalar__0 = 0;
         I_18 = I_74;
         addi(I_18, I_18, i_1_0);
         I_19 = isj;
         muli(I_19, I_18);
         I_5 = I_19;
         addi(I_5, I_5, j);
         I_0 = I_5;
         addi(I_0, I_0, I_75);
         F_9 = image[I_0];
         muli(F_9, kernel[0]);
         addi(__scalar__0, F_9, __scalar__0);
         F_10 = image[I_5];
         muli(F_10, kernel[1]);
         addi(__scalar__0, F_10, __scalar__0);
         I_1 = I_5;
         addi(I_1, I_1, 1);
         F_11 = image[I_1];
         muli(F_11, kernel[2]);
         addi(__scalar__0, F_11, __scalar__0);
         kj_0 = 3;
         I_38 = isj;
         muli(I_38, i_1_0);
         I_20 = I_38;
         I_9 = I_20;
         addi(I_9, I_9, j);
         I_2 = I_76;
         addi(I_2, I_2, I_9);
         F_12 = image[I_2];
         muli(F_12, kernel[3]);
         addi(__scalar__0, F_12, __scalar__0);
         F_13 = image[I_9];
         muli(F_13, kernel[4]);
         addi(__scalar__0, F_13, __scalar__0);
         I_3 = I_9;
         addi(I_3, I_3, 1);
         F_14 = image[I_3];
         muli(F_14, kernel[5]);
         addi(__scalar__0, F_14, __scalar__0);
         kj_0 = 3;
         I_21 = i_1_0;
         addi(I_21, I_21, 1);
         I_22 = isj;
         muli(I_22, I_21);
         I_14 = I_22;
         addi(I_14, I_14, j);
         I_4 = I_14;
         addi(I_4, I_4, I_77);
         F_15 = image[I_4];
         muli(F_15, kernel[6]);
         addi(__scalar__0, F_15, __scalar__0);
         F_16 = image[I_14];
         muli(F_16, kernel[7]);
         addi(__scalar__0, F_16, __scalar__0);
         I_6 = I_14;
         addi(I_6, I_6, 1);
         F_17 = image[I_6];
         muli(F_17, kernel[8]);
         addi(__scalar__0, F_17, __scalar__0);
         kj_0 = 3;
         ki_0 = 3;
         divi(__scalar__0, 9);
         I_7 = I_38;
         I_8 = I_7;
         addi(I_8, I_8, j);
         new_image[I_8] = __scalar__0;
      }
}

Code after more expression substitution

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_10, I_11, I_12, I_13, I_15, I_16, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, I_74, I_75, I_76, I_77;
   seti(I_17, isj);
   subi(I_17, 2);
   seti(I_73, 2);
   seti(I_73, -I_73);
   seti(I_74, 1);
   seti(I_74, -I_74);
   seti(I_75, 1);
   seti(I_75, -I_75);
   seti(I_76, 1);
   seti(I_76, -I_76);
   seti(I_77, 1);
   seti(I_77, -I_77);
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         seti(__scalar__0, 0);
         seti(I_18, I_74);
         addi(I_18, I_18, i_1_0);
         seti(I_19, isj);
         muli(I_19, I_18);
         seti(I_5, I_19);
         addi(I_5, I_5, j);
         seti(I_0, I_5);
         addi(I_0, I_0, I_75);
         seti(F_9, image[I_0]);
         muli(F_9, kernel[0]);
         addi(__scalar__0, F_9, __scalar__0);
         seti(F_10, image[I_5]);
         muli(F_10, kernel[1]);
         addi(__scalar__0, F_10, __scalar__0);
         seti(I_1, I_5);
         addi(I_1, I_1, 1);
         seti(F_11, image[I_1]);
         muli(F_11, kernel[2]);
         addi(__scalar__0, F_11, __scalar__0);
         seti(kj_0, 3);
         seti(I_38, isj);
         muli(I_38, i_1_0);
         seti(I_20, I_38);
         seti(I_9, I_20);
         addi(I_9, I_9, j);
         seti(I_2, I_76);
         addi(I_2, I_2, I_9);
         seti(F_12, image[I_2]);
         muli(F_12, kernel[3]);
         addi(__scalar__0, F_12, __scalar__0);
         seti(F_13, image[I_9]);
         muli(F_13, kernel[4]);
         addi(__scalar__0, F_13, __scalar__0);
         seti(I_3, I_9);
         addi(I_3, I_3, 1);
         seti(F_14, image[I_3]);
         muli(F_14, kernel[5]);
         addi(__scalar__0, F_14, __scalar__0);
         seti(kj_0, 3);
         seti(I_21, i_1_0);
         addi(I_21, I_21, 1);
         seti(I_22, isj);
         muli(I_22, I_21);
         seti(I_14, I_22);
         addi(I_14, I_14, j);
         seti(I_4, I_14);
         addi(I_4, I_4, I_77);
         seti(F_15, image[I_4]);
         muli(F_15, kernel[6]);
         addi(__scalar__0, F_15, __scalar__0);
         seti(F_16, image[I_14]);
         muli(F_16, kernel[7]);
         addi(__scalar__0, F_16, __scalar__0);
         seti(I_6, I_14);
         addi(I_6, I_6, 1);
         seti(F_17, image[I_6]);
         muli(F_17, kernel[8]);
         addi(__scalar__0, F_17, __scalar__0);
         seti(kj_0, 3);
         seti(ki_0, 3);
         divi(__scalar__0, 9);
         seti(I_7, I_38);
         seti(I_8, I_7);
         addi(I_8, I_8, j);
         seti(new_image[I_8], __scalar__0);
      }
}

Code after some cleaning

void microcode(int i, int isi, int isj, int *image, int *kernel, int *new_image)
{
   int F_17;
   int F_16;
   int F_15;
   int I_22;
   int I_21;
   int F_14;
   int F_13;
   int F_12;
   int I_20;
   int F_11;
   int F_10;
   int F_9;
   int I_19;
   int I_18;
   int I_17;
   int I_14;
   int I_9;
   int I_5;
   int __scalar__0;
   int j;
   int i_1_0;
   int ki_0;
   int kj_0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_6, I_7, I_8, I_38, I_73, I_74, I_75, I_76, I_77;
   seti(I_17, isj);
   subi(I_17, 2);
   seti(I_73, 2);
   seti(I_73, -I_73);
   seti(I_74, 1);
   seti(I_74, -I_74);
   seti(I_75, 1);
   seti(I_75, -I_75);
   seti(I_76, 1);
   seti(I_76, -I_76);
   seti(I_77, 1);
   seti(I_77, -I_77);
   for(i_1_0 = i; i_1_0 <= pips_min(2, i+127, I_73+isi); i_1_0 += 1)
l99994:
      for(j = 1; j <= I_17; j += 1) {
         seti(__scalar__0, 0);
         seti(I_18, I_74);
         addi(I_18, I_18, i_1_0);
         seti(I_19, isj);
         muli(I_19, I_18);
         seti(I_5, I_19);
         addi(I_5, I_5, j);
         seti(I_0, I_5);
         addi(I_0, I_0, I_75);
         seti(F_9, image[I_0]);
         muli(F_9, kernel[0]);
         addi(__scalar__0, F_9, __scalar__0);
         seti(F_10, image[I_5]);
         muli(F_10, kernel[1]);
         addi(__scalar__0, F_10, __scalar__0);
         seti(I_1, I_5);
         addi(I_1, I_1, 1);
         seti(F_11, image[I_1]);
         muli(F_11, kernel[2]);
         addi(__scalar__0, F_11, __scalar__0);
         seti(kj_0, 3);
         seti(I_38, isj);
         muli(I_38, i_1_0);
         seti(I_20, I_38);
         seti(I_9, I_20);
         addi(I_9, I_9, j);
         seti(I_2, I_76);
         addi(I_2, I_2, I_9);
         seti(F_12, image[I_2]);
         muli(F_12, kernel[3]);
         addi(__scalar__0, F_12, __scalar__0);
         seti(F_13, image[I_9]);
         muli(F_13, kernel[4]);
         addi(__scalar__0, F_13, __scalar__0);
         seti(I_3, I_9);
         addi(I_3, I_3, 1);
         seti(F_14, image[I_3]);
         muli(F_14, kernel[5]);
         addi(__scalar__0, F_14, __scalar__0);
         seti(kj_0, 3);
         seti(I_21, i_1_0);
         addi(I_21, I_21, 1);
         seti(I_22, isj);
         muli(I_22, I_21);
         seti(I_14, I_22);
         addi(I_14, I_14, j);
         seti(I_4, I_14);
         addi(I_4, I_4, I_77);
         seti(F_15, image[I_4]);
         muli(F_15, kernel[6]);
         addi(__scalar__0, F_15, __scalar__0);
         seti(F_16, image[I_14]);
         muli(F_16, kernel[7]);
         addi(__scalar__0, F_16, __scalar__0);
         seti(I_6, I_14);
         addi(I_6, I_6, 1);
         seti(F_17, image[I_6]);
         muli(F_17, kernel[8]);
         addi(__scalar__0, F_17, __scalar__0);
         seti(kj_0, 3);
         seti(ki_0, 3);
         divi(__scalar__0, 9);
         seti(I_7, I_38);
         seti(I_8, I_7);
         addi(I_8, I_8, j);
         seti(new_image[I_8], __scalar__0);
      }
}

Unsplit resulting code


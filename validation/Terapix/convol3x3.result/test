void runner(int n, int img_out[n-4][n-4], int img[n][n], int kernel[3][3])
{
   int x, y, ki, kj;
#pragma terapix
   for(x = 2; x <= n-2-1; x += 1)
      for(y = 2; y <= n-2-1; y += 1) {
         int v = 0;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               v += img[x+ki-1][y+kj-1]*kernel[ki][kj];
         img_out[x-2][y-2] = v;
      }
}
tidy the code just in case of
void runner(int n, int img_out[n-4][n-4], int img[n][n], int kernel[3][3])
{
   int x, y, ki, kj;
#pragma terapix
   for(x = 0; x <= n-5; x += 1)
      for(y = 0; y <= n-5; y += 1) {
         int v = 0;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               v += img[ki+x+1][kj+y+1]*kernel[ki][kj];
         img_out[x][y] = v;
      }
}
**** check ok ******
void runner(int n, int img_out[n-4][n-4], int img[n][n], int kernel[3][3])
{
   int x, y, ki, kj;
#pragma terapix
   for(x = 0; x <= n-5; x += 1)
      for(y = 0; y <= n-5; y += 1) {
         int v = 0;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               v += img[ki+x+1][kj+y+1]*kernel[ki][kj];
         img_out[x][y] = v;
      }
}
detection and extraction
tiling
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(x = 0; x <= n-5; x += 1)
l99997:
         for(y = 0; y <= n-5; y += 1) {
            int v = 0;
l99998:
            for(ki = 0; ki <= 2; ki += 1)
l99999:
               for(kj = 0; kj <= 2; kj += 1)
                  v += img[ki+x+1][kj+y+1]*kernel[ki][kj];
            img_out[x][y] = v;
         }
   }
}
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-5)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-5)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            x = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            for(x = I_9; x <= pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1); x += 1)
               for(y = I_14; y <= pips_min(2, n-5, I_14+__TERAPYPS_HEIGHT-1); y += 1) {
                  int v = 0;
                  for(ki = 0; ki <= 2; ki += 1)
                     for(kj = 0; kj <= 2; kj += 1)
                        v += img[ki+1+x][kj+1+y]*kernel[ki][kj];
                  img_out[x][y] = v;
               }
         }
      }
   }
}
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, v0, v1, v2, v3;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-5)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-5)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            x = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-5>I_9+__TERAPYPS_WIDTH-1)
               if (n-5>I_14+__TERAPYPS_HEIGHT-1)
                  for(x = I_9; x <= I_9+__TERAPYPS_WIDTH-1; x += 1)
                     for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                        v3 = 0;
                        v3 = 0;

                        for(ki = 0; ki <= 2; ki += 1)
                           for(kj = 0; kj <= 2; kj += 1)
                              v3 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v3;
                     }
               else
                  for(x = I_9; x <= I_9+__TERAPYPS_WIDTH-1; x += 1)
                     for(y = I_14; y <= n-5; y += 1) {
                        v2 = 0;
                        v2 = 0;

                        for(ki = 0; ki <= 2; ki += 1)
                           for(kj = 0; kj <= 2; kj += 1)
                              v2 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v2;
                     }
            else if (n-5>I_14+__TERAPYPS_HEIGHT-1)
               for(x = I_9; x <= n-5; x += 1)
                  for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                     v1 = 0;
                     v1 = 0;

                     for(ki = 0; ki <= 2; ki += 1)
                        for(kj = 0; kj <= 2; kj += 1)
                           v1 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v1;
                  }
            else
               for(x = I_9; x <= n-5; x += 1)
                  for(y = I_14; y <= n-5; y += 1) {
                     v0 = 0;
                     v0 = 0;

                     for(ki = 0; ki <= 2; ki += 1)
                        for(kj = 0; kj <= 2; kj += 1)
                           v0 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v0;
                  }
         }
      }
   }
}
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, v0, v1, v2, v3;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-5)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-5)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            x = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-5>I_9+__TERAPYPS_WIDTH-1)
               if (n-5>I_14+__TERAPYPS_HEIGHT-1)
                  for(x = I_9; x <= I_9+__TERAPYPS_WIDTH-1; x += 1)
                     for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                        v3 = 0;
                        v3 = 0;

                        for(ki = 0; ki <= 2; ki += 1)
                           for(kj = 0; kj <= 2; kj += 1)
                              v3 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v3;
                     }
               else
                  for(x = I_9; x <= I_9+__TERAPYPS_WIDTH-1; x += 1)
                     for(y = I_14; y <= n-5; y += 1) {
                        v2 = 0;
                        v2 = 0;

                        for(ki = 0; ki <= 2; ki += 1)
                           for(kj = 0; kj <= 2; kj += 1)
                              v2 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v2;
                     }
            else if (n-5>I_14+__TERAPYPS_HEIGHT-1)
               for(x = I_9; x <= n-5; x += 1)
                  for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                     v1 = 0;
                     v1 = 0;

                     for(ki = 0; ki <= 2; ki += 1)
                        for(kj = 0; kj <= 2; kj += 1)
                           v1 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v1;
                  }
            else
               for(x = I_9; x <= n-5; x += 1)
                  for(y = I_14; y <= n-5; y += 1) {
                     v0 = 0;
                     v0 = 0;

                     for(ki = 0; ki <= 2; ki += 1)
                        for(kj = 0; kj <= 2; kj += 1)
                           v0 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v0;
                  }
         }
      }
   }
}
group constants and isolate
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   int __TERAPYPS_WIDTH = 126, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, v0, v1, v2, v3;
   if (__TERAPYPS_HEIGHT>3||3<126) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/126; I_0 += 1) {
         I_9 = 126*I_0;
         I_1 = pips_max(2, INT((n-5)/__TERAPYPS_HEIGHT+1), 0);
l99979:
         for(I_1 = 0; I_1 <= (n-5)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            x = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+125)-I_9+1), 0);
            if (n-5>I_9+125)
               if (n-5>I_14+__TERAPYPS_HEIGHT-1)
l99992:
                  for(x = I_9; x <= I_9+125; x += 1)
l99993:
                     for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                        v3 = 0;
                        v3 = 0;

l99994:
                        for(ki = 0; ki <= 2; ki += 1)
l99995:
                           for(kj = 0; kj <= 2; kj += 1)
                              v3 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v3;
                     }
               else
l99988:
                  for(x = I_9; x <= I_9+125; x += 1)
l99989:
                     for(y = I_14; y <= n-5; y += 1) {
                        v2 = 0;
                        v2 = 0;

l99990:
                        for(ki = 0; ki <= 2; ki += 1)
l99991:
                           for(kj = 0; kj <= 2; kj += 1)
                              v2 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v2;
                     }
            else if (n-5>I_14+__TERAPYPS_HEIGHT-1)
l99984:
               for(x = I_9; x <= n-5; x += 1)
l99985:
                  for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                     v1 = 0;
                     v1 = 0;

l99986:
                     for(ki = 0; ki <= 2; ki += 1)
l99987:
                        for(kj = 0; kj <= 2; kj += 1)
                           v1 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v1;
                  }
            else
l99980:
               for(x = I_9; x <= n-5; x += 1)
l99981:
                  for(y = I_14; y <= n-5; y += 1) {
                     v0 = 0;
                     v0 = 0;

l99982:
                     for(ki = 0; ki <= 2; ki += 1)
l99983:
                        for(kj = 0; kj <= 2; kj += 1)
                           v0 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v0;
                  }
         }
      }
   }
}
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   int __TERAPYPS_WIDTH = 126, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23, I_24, I_25, v0, v1, v2, v3;
   __TERAPYPS_HEIGHT = 256;
   if (__TERAPYPS_HEIGHT>3||3<126) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/126; I_0 += 1) {
         I_9 = 126*I_0;
         I_1 = pips_max(2, INT((n-5)/__TERAPYPS_HEIGHT+1), 0);
l99979:
         for(I_1 = 0; I_1 <= (n-5)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            x = I_9+pips_max(2, INT(pips_min(2, n-5, I_9+125)-I_9+1), 0);
            if (n-5>I_9+125)
               if (n-5>I_14+__TERAPYPS_HEIGHT-1)
l99992:
                  for(x = I_9; x <= I_9+125; x += 1)
l99993:
                     for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                        v3 = 0;
                        v3 = 0;

l99994:
                        for(ki = 0; ki <= 2; ki += 1)
l99995:
                           for(kj = 0; kj <= 2; kj += 1)
                              v3 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v3;
                     }
               else
l99988:
                  for(x = I_9; x <= I_9+125; x += 1)
l99989:
                     for(y = I_14; y <= n-5; y += 1) {
                        v2 = 0;
                        v2 = 0;

l99990:
                        for(ki = 0; ki <= 2; ki += 1)
l99991:
                           for(kj = 0; kj <= 2; kj += 1)
                              v2 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v2;
                     }
            else if (n-5>I_14+__TERAPYPS_HEIGHT-1)
l99984:
               for(x = I_9; x <= n-5; x += 1)
l99985:
                  for(y = I_14; y <= I_14+__TERAPYPS_HEIGHT-1; y += 1) {
                     v1 = 0;
                     v1 = 0;

l99986:
                     for(ki = 0; ki <= 2; ki += 1)
l99987:
                        for(kj = 0; kj <= 2; kj += 1)
                           v1 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v1;
                  }
            else
l99980:
               for(x = I_9; x <= n-5; x += 1)
l99981:
                  for(y = I_14; y <= n-5; y += 1) {
                     v0 = 0;
                     v0 = 0;

l99982:
                     for(ki = 0; ki <= 2; ki += 1)
l99983:
                        for(kj = 0; kj <= 2; kj += 1)
                           v0 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v0;
                  }
         }
      }
   }
}
**** check ok ******
void runner_l99996(int n, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   //PIPS generated variable
   int I_0, I_1, v0, v1, v2, v3;

   if (256>3||3<126) {
      // Declared by Pass Outlining
      int ki, kj, x, y;
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-5)/126; I_0 += 1) {


l99979:
         for(I_1 = 0; I_1 <= (n-5)/256; I_1 += 1) {


            if (n-5>126*I_0+125)
               if (n-5>256*I_1+255)
l99992:
                  for(x = 126*I_0; x <= 126*I_0+125; x += 1)
l99993:
                     for(y = 256*I_1; y <= 256*I_1+255; y += 1) {

                        v3 = 0;

l99994:
                        for(ki = 0; ki <= 2; ki += 1)
l99995:
                           for(kj = 0; kj <= 2; kj += 1)
                              v3 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v3;
                     }
               else
l99988:
                  for(x = 126*I_0; x <= 126*I_0+125; x += 1)
l99989:
                     for(y = 256*I_1; y <= n-5; y += 1) {

                        v2 = 0;

l99990:
                        for(ki = 0; ki <= 2; ki += 1)
l99991:
                           for(kj = 0; kj <= 2; kj += 1)
                              v2 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                        img_out[x][y] = v2;
                     }
            else if (n-5>256*I_1+255)
l99984:
               for(x = 126*I_0; x <= n-5; x += 1)
l99985:
                  for(y = 256*I_1; y <= 256*I_1+255; y += 1) {

                     v1 = 0;

l99986:
                     for(ki = 0; ki <= 2; ki += 1)
l99987:
                        for(kj = 0; kj <= 2; kj += 1)
                           v1 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v1;
                  }
            else
l99980:
               for(x = 126*I_0; x <= n-5; x += 1)
l99981:
                  for(y = 256*I_1; y <= n-5; y += 1) {

                     v0 = 0;

l99982:
                     for(ki = 0; ki <= 2; ki += 1)
l99983:
                        for(kj = 0; kj <= 2; kj += 1)
                           v0 += img[ki+x+1][kj+y+1]*kernel[ki][kj];
                     img_out[x][y] = v0;
                  }
         }
      }
   }
}
void tile_l99992(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   // Declared by Pass Outlining
   int ki, kj, x, y, v3;
   {
      //PIPS generated variable
      int z0, z1, caillou[9];
      for(z1 = 0; z1 <= 3-1; z1 += 1)
         for(z0 = 0; z0 <= 3-1; z0 += 1)
            caillou[z0+3*z1] = kernel[z1][z0];

l99992:
      for(x = 126*I_0; x <= 126*I_0+125; x += 1)
l99993:
         for(y = 256*I_1; y <= 256*I_1+255; y += 1) {
            v3 = 0;

l99994:
            for(ki = 0; ki <= 2; ki += 1)
l99995:
               for(kj = 0; kj <= 2; kj += 1)
                  v3 += img[ki+x+1][kj+y+1]*caillou[3*ki+kj];
            img_out[x][y] = v3;
         }
   }
}
void tile_l99992(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   // Declared by Pass Outlining
   int ki, kj, x, y, v3;
   {
      //PIPS generated variable
      int z0, z1, caillou[9];
      for(z1 = 0; z1 <= 3-1; z1 += 1)
         for(z0 = 0; z0 <= 3-1; z0 += 1)
            caillou[z0+3*z1] = kernel[z1][z0];

      {
         //PIPS generated variable
         int (*img0)[128][258] = (int (*)[128][258]) 0, (*caillou0)[9] = (int (*)[9]) 0, (*img_out0)[126][256] = (int (*)[126][256]) 0;
         P4A_accel_malloc((void **) &img_out0, sizeof(int)*32256);
         P4A_accel_malloc((void **) &caillou0, sizeof(int)*9);
         P4A_accel_malloc((void **) &img0, sizeof(int)*33024);
         P4A_copy_to_accel_1d(sizeof(int), 9, 9, 0, &caillou[0], *caillou0);
         P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 258, 126*I_0+1, 256*I_1+1, &img[0][0], *img0);

l99992:
         for(x = 126*I_0; x <= 126*I_0+125; x += 1)
l99993:
            for(y = 256*I_1; y <= 256*I_1+255; y += 1) {
               v3 = 0;

l99994:
               for(ki = 0; ki <= 2; ki += 1)
l99995:
                  for(kj = 0; kj <= 2; kj += 1)
                     v3 += (*img0)[ki+x+1-(126*I_0+1)][kj+y+1-(256*I_1+1)]*(*caillou0)[3*ki+kj-0];
               (*img_out0)[x-126*I_0][y-256*I_1] = v3;
            }
         P4A_copy_from_accel_2d(sizeof(int), n-4, n-4, 126, 256, 126*I_0, 256*I_1, &img_out[0][0], *img_out0);
         P4A_accel_free(img_out0);
         P4A_accel_free(caillou0);
         P4A_accel_free(img0);
      }
   }
}
**** check ok ******
outlining to launcher
void tile_l99992(int n, int I_0, int I_1, int img[n][n], int img_out[n-4][n-4], int kernel[3][3])
{
   // Declared by Pass Outlining
   int ki, kj, x, y, v3;
   {
      //PIPS generated variable
      int z0, z1, caillou[9];
l99998:
      for(z1 = 0; z1 <= 2; z1 += 1)
l99999:
         for(z0 = 0; z0 <= 2; z0 += 1)
            caillou[z0+3*z1] = kernel[z1][z0];

      {
         //PIPS generated variable
         int (*img0)[128][258] = (int (*)[128][258]) 0, (*caillou0)[9] = (int (*)[9]) 0, (*img_out0)[126][256] = (int (*)[126][256]) 0;
         P4A_accel_malloc((void **) &img_out0, 32256*sizeof(int));
         P4A_accel_malloc((void **) &caillou0, 9*sizeof(int));
         P4A_accel_malloc((void **) &img0, 33024*sizeof(int));
         P4A_copy_to_accel_1d(sizeof(int), 9, 9, 0, &caillou[0], *caillou0);
         P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 258, 126*I_0+1, 256*I_1+1, &img[0][0], *img0);

l99992:         launcher_0(255+1, *caillou0, *img0, *img_out0);
         P4A_copy_from_accel_2d(sizeof(int), n-4, n-4, 126, 256, 126*I_0, 256*I_1, &img_out[0][0], *img_out0);
         P4A_accel_free(img_out0);
         P4A_accel_free(caillou0);
         P4A_accel_free(img0);
      }
   }
}

//  <caillou0[PHI1]-R-EXACT-{0<=PHI1, PHI1<=8, I_26==256}>
//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=257,
//    I_26==256}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=125, 0<=PHI2,
//    PHI2<=255, I_26==256}>

void launcher_0(int I_26, int caillou0[9], int img0[128][258], int img_out0[126][256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, x, y;

//  <caillou0[PHI1]-R-EXACT-{0<=PHI1, PHI1<=8, I_26==256}>
//  <img0[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=257,
//    I_26==256}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=125, 0<=PHI2,
//    PHI2<=255, I_26==256}>

l99992:
   for(x = 0; x <= 125; x += 1)

//  <caillou0[PHI1]-R-EXACT-{0<=PHI1, PHI1<=8, I_26==256, 0<=x,
//    x<=125}>
//  <img0[PHI1][PHI2]-R-EXACT-{x<=PHI1, PHI1<=x+2, 0<=PHI2, PHI2<=257,
//    I_26==256, 0<=x, x<=125}>
//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==x, 0<=PHI2, PHI2<=255,
//    I_26==256, 0<=x, x<=125}>

l99993:
      for(y = 0; y <= I_26-1; y += 1) {
         v3 = 0;

//  <caillou0[PHI1]-R-EXACT-{0<=PHI1, PHI1<=8, I_26==256, 0<=x,
//    x<=125, 0<=y, y<=255}>
//  <img0[PHI1][PHI2]-R-EXACT-{x<=PHI1, PHI1<=x+2, y<=PHI2, PHI2<=y+2,
//    I_26==256, 0<=x, x<=125, 0<=y, y<=255}>


l99994:
         for(ki = 0; ki <= 2; ki += 1)

//  <caillou0[PHI1]-R-EXACT-{3ki<=PHI1, PHI1<=3ki+2, I_26==256, 0<=ki,
//    ki<=2, 0<=x, x<=125, 0<=y, y<=255}>
//  <img0[PHI1][PHI2]-R-EXACT-{ki+x==PHI1, y<=PHI2, PHI2<=y+2,
//    I_26==256, 0<=ki, ki<=2, 0<=x, x<=125, 0<=y, y<=255}>

l99995:
            for(kj = 0; kj <= 2; kj += 1)

//  <caillou0[PHI1]-R-EXACT-{3ki+kj==PHI1, I_26==256, 0<=ki, ki<=2,
//    0<=kj, kj<=2, 0<=x, x<=125, 0<=y, y<=255}>
//  <img0[PHI1][PHI2]-R-EXACT-{ki+x==PHI1, kj+y==PHI2, I_26==256,
//    0<=ki, ki<=2, 0<=kj, kj<=2, 0<=x, x<=125, 0<=y, y<=255}>

               v3 += img0[ki+x][kj+y]*caillou0[3*ki+kj];

//  <img_out0[PHI1][PHI2]-W-EXACT-{PHI1==x, PHI2==y, ki==3, kj==3,
//    I_26==256, 0<=x, x<=125, 0<=y, y<=255}>

         img_out0[x][y] = v3;
      }
}
outlining to microcode
void launcher_0(int I_26, int caillou0[9], int img0[128][258], int img_out0[126][256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, x, y;
l99992:
   for(x = 0; x <= 125; x += 1)
l99993:
      for(y = 0; y <= I_26-1; y += 1) {
         v3 = 0;

l99994:
         for(ki = 0; ki <= 2; ki += 1)
l99995:
            for(kj = 0; kj <= 2; kj += 1)
               v3 += img0[ki+x][kj+y]*caillou0[3*ki+kj];
         img_out0[x][y] = v3;
      }
}
void launcher_0(int I_26, int caillou0[9], int img0[128][258], int img_out0[126][256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, x, y;
l99992:
   for(x = 0; x <= 125; x += 1)
l99993:
      for(y = 0; y <= I_26-1; y += 1) {
         v3 = 0;

l99994:
         for(ki = 0; ki <= 2; ki += 1)
l99995:
            for(kj = 0; kj <= 2; kj += 1)
               v3 += img0[x][kj+y+258*ki]*caillou0[3*ki+kj];
         img_out0[x][y] = v3;
      }
}
void launcher_0(int I_26, int caillou0[9], int img0[128][258], int img_out0[126][256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, x, y;
l99992:
   for(x = 0; x <= 125; x += 1)
l99993:      launcher_0_microcode(I_26, caillou0, *&img0[x], *&img_out0[x]);
}
void launcher_0_microcode(int I_26, int caillou0[9], int img00[258], int img_out00[256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;

l99994:
      for(ki = 0; ki <= 2; ki += 1)
l99995:
         for(kj = 0; kj <= 2; kj += 1)
            v3 += img00[kj+y+258*ki]*caillou0[3*ki+kj];
      img_out00[y] = v3;
   }
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_26, int caillou0[9], int img00[258], int img_out00[256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;

l99994:
      for(ki = 0; ki <= 2; ki += 1)
l99995:
         for(kj = 0; kj <= 2; kj += 1)
            v3 += img00[kj+y+258*ki]*caillou0[3*ki+kj];
      img_out00[y] = v3;
   }
}
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;

l99994:
      for(ki = 0; ki <= 2; ki += 1)
l99995:
         for(kj = 0; kj <= 2; kj += 1)
            v3 += *(img00+(kj+y+258*ki))**(caillou0+(3*ki+kj));
      *(img_out00+y) = v3;
   }
}
**** check ok ******
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = 258*ki+y+img00;
         P_1 = caillou0+3*ki;
         for(kj = 0; kj <= 2; kj += 1)
            v3 += *(kj+P_0)**(kj+P_1);
      }
      *(img_out00+y) = v3;
   }
}
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   img_out000 = img_out00;
   img000 = img00;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      caillou00 = caillou0;
      img0000 = img000;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = img0000;
         P_1 = caillou00;
         P_10 = P_1;
         P_00 = P_0;
         for(kj = 0; kj <= 2; kj += 1) {
            v3 += *P_00**P_10;
            P_10 += 1;
            P_00 += 1;
         }
         caillou00 += 3;
         img0000 += 258;
      }
      *img_out000 = v3;
      img_out000 += 1;
      img000 += 1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   img_out000 = img_out00;
   img000 = img00;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      caillou00 = caillou0;
      img0000 = img000;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = img0000;
         P_1 = caillou00;
         P_10 = P_1;
         P_00 = P_0;
         for(kj = 0; kj <= 2; kj += 1) {
            v3 += *P_00**P_10;
            P_10 += 1;
            P_00 += 1;
         }
         caillou00 += 3;
         img0000 += 258;
      }
      *img_out000 = v3;
      img_out000 += 1;
      img000 += 1;
   }
}
**** check ok ******
**** check ok ******
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   img_out000 = img_out00;
   img000 = img00;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      caillou00 = caillou0;
      img0000 = img000;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = img0000;
         P_1 = caillou00;
         P_10 = P_1;
         P_00 = P_0;
         for(kj = 0; kj <= 2; kj += 1) {
            v3 += *P_00**P_10;
            P_10 += 1;
            P_00 += 1;
         }
         caillou00 += 3;
         img0000 += 258;
      }
      *img_out000 = v3;
      img_out000 += 1;
      img000 += 1;
   }
}
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   img_out000 = img_out00;
   img000 = img00;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      caillou00 = caillou0;
      img0000 = img000;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = img0000;
         P_1 = caillou00;
         P_10 = P_1;
         P_00 = P_0;
         for(kj = 0; kj <= 2; kj += 1) {
            v3 = v3+*P_00**P_10;
            P_10 = P_10+1;
            P_00 = P_00+1;
         }
         caillou00 = caillou00+3;
         img0000 = img0000+258;
      }
      *img_out000 = v3;
      img_out000 = img_out000+1;
      img000 = img000+1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_26, int *caillou0, int *img00, int *img_out00)
{
   // Declared by Pass Outlining
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   img_out000 = img_out00;
   img000 = img00;
l99993:
   for(y = 0; y <= I_26-1; y += 1) {
      v3 = 0;
      caillou00 = caillou0;
      img0000 = img000;
      for(ki = 0; ki <= 2; ki += 1) {
         P_0 = img0000;
         P_1 = caillou00;
         P_10 = P_1;
         P_00 = P_0;
         for(kj = 0; kj <= 2; kj += 1) {
            v3 = v3+*P_00**P_10;
            P_10 = P_10+1;
            P_00 = P_00+1;
         }
         caillou00 = caillou00+3;
         img0000 = img0000+258;
      }
      *img_out000 = v3;
      img_out000 = img_out000+1;
      img000 = img000+1;
   }
}
**** check ok ******
I_26 belongs to a loop bound
caillou0 seems a mask
img00 seems an image
img_out00 seems an image
void launcher_0_microcode(int *FIFO3, int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix img_out00 126 256
#pragma terapix img00 128 258
#pragma terapix caillou0 9
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *im4, *im5, *im6, *im7, *im8, *caillou0, *ma9, *img00, *im10, *img_out00, *im11;
   //PIPS generated variable
   int re6, re7, re8, re9, re10, re11, re12, re13;
   //PIPS generated variable
   int *im12, *im13, *im14, *im15, *im16, *im17, *im18, *im19, *ma1, *ma2, *im20, *im21, *im22;
   //PIPS generated variable
   int re14, re15, re16, re17;
   //PIPS generated variable
   int *im23, *im24, *im25, *im26, *im27, *im28, *im29, *im30, *ma3, *im31, *im32, *im33;
   //PIPS generated variable
   int re18, re19, re20, re21;
   //PIPS generated variable
   int *im34, *im35, *im36, *im37, *im38, *im39, *im40, *im41, *im42, *im43, *im44;
   //PIPS generated variable
   int P;
   im11 = FIFO3;
   im10 = FIFO2;
   ma9 = FIFO1;
   im5 = im11;
   im6 = im10;
   im6 = im6-1;
   im5 = im5-1;
l99993:
   for(re9 = 0; re9 <= N1; re9 += 1) {
      im6 = im6+1;
      //PIPS generated variable
      int I_27;
      P = 0;
      ma1 = ma9;
      im4 = im6;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      *++im5 = P;
   }
}
**** check ok ******
void launcher_0_microcode(int *FIFO3, int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix img_out00 126 256
#pragma terapix img00 128 258
#pragma terapix caillou0 9
   int ki, kj, v3, y;
   //PIPS generated variable
   int *P_0, *P_1, *img000, *img_out000, *img0000, *caillou00, *P_00, *P_10;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *im4, *im5, *im6, *im7, *im8, *caillou0, *ma9, *img00, *im10, *img_out00, *im11;
   //PIPS generated variable
   int re6, re7, re8, re9, re10, re11, re12, re13;
   //PIPS generated variable
   int *im12, *im13, *im14, *im15, *im16, *im17, *im18, *im19, *ma1, *ma2, *im20, *im21, *im22;
   //PIPS generated variable
   int re14, re15, re16, re17;
   //PIPS generated variable
   int *im23, *im24, *im25, *im26, *im27, *im28, *im29, *im30, *ma3, *im31, *im32, *im33;
   //PIPS generated variable
   int re18, re19, re20, re21;
   //PIPS generated variable
   int *im34, *im35, *im36, *im37, *im38, *im39, *im40, *im41, *im42, *im43, *im44;
   //PIPS generated variable
   int P;
   im11 = FIFO3;
   im10 = FIFO2;
   ma9 = FIFO1;
   im5 = im11;
   im6 = im10;
   im6 = im6-1;
   im5 = im5-1;
l99993:
   for(re9 = 0; re9 <= N1; re9 += 1) {
      im6 = im6+1;
      //PIPS generated variable
      int I_27;
      P = 0;
      ma1 = ma9;
      im4 = im6;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      im8 = im4;
      ma2 = ma1;
      ma3 = ma2;
      im2 = im8;
      P = P+*im2**ma3;
      P = P+*++im2**++ma3;
      P = P+*++im2**++ma3;
      ma1 = ma1+3;
      im4 = im4+258;
      *++im5 = P;
   }
}
void launcher_0(int I_26, int caillou0[9], int img0[128][258], int img_out0[126][256])
{
   // Declared by Pass Outlining
   int ki, kj, v3, x, y;
l99992:
   for(x = 0; x <= 125; x += 1)
l99993:      launcher_0_microcode(*&img_out0[x], *&img0[x], caillou0, I_26);
}
**** check ok ******
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-4][n-4], in[n][n];
   int kernel[3][3] = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};

   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in, kernel);
   check = 0;
   for(i = 0; i <= n-4-1; i += 1)
      for(j = 0; j <= n-4-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
tidy the code just in case of
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-5+1][n-5+1], in[n][n];
   int kernel[3][3] = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};

   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in, kernel);
   check = 0;
   for(i = 0; i <= n-5; i += 1)
      for(j = 0; j <= n-5; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
**** check ok ******
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):400;
   int out[n-5+1][n-5+1], in[n][n];
   int kernel[3][3] = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};

   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in[i][j] = j;
   runner(n, out, in, kernel);
   check = 0;
   for(i = 0; i <= n-5; i += 1)
      for(j = 0; j <= n-5; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
detection and extraction
tiling

hierarchical MPI not implemented yet; this will generate a flat MPI
int main(int argc, char *argv[])
{
   {
      //PIPS generated variable
      int rank0;
      //PIPS generated variable
      MPI_Status status0;
      //PIPS generated variable
      MPI_Request request0;
      //PIPS generated variable
      unsigned int i, N;
      //PIPS generated variable
      double A[10], B[10], C[10], a, b;
      //PIPS generated variable
      int _rtl_0_0, _rtl_0_0_0, _rtl_0_0_1, _rtl_0_0_2, _rtl_0_0_3, _rtl_2_0, _rtl_0_0_4, _rtl_0_0_5, _rtl_2_0_0, _rtl_0_0_6;
      MPI_Init(&argc, &argv);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank0);
      if (rank0==0) {
         N = 10;
         MPI_Isend(&N, 1, MPI_INT, 1, 1, MPI_COMM_WORLD, &request0);
      }
      if (rank0==0) {
         for(i = 0; i < N; i += 1) {
            B[i] = 3;
            A[i] = 5;
         }
         for(_rtl_0_0_6 = 0; _rtl_0_0_6 <= 9; _rtl_0_0_6 += 1)
            MPI_Isend(&B[_rtl_0_0_6], 1, MPI_FLOAT, 1, 1, MPI_COMM_WORLD, &request0);
      }
      if (rank0==0)
         for(i = 0; i < N; i += 1) {



            _rtl_2_0_0 = i;




            _rtl_2_0 = i;



            A[i] = A[i]*a;
            _rtl_0_0_4 = i;



            C[i] = 0;
            _rtl_0_0_2 = i;

            _rtl_0_0_3 = i;

            _rtl_0_0_5 = i;

         }
      if (rank0==1) {
         for(_rtl_0_0_0 = 0; _rtl_0_0_0 <= 9; _rtl_0_0_0 += 1)
            MPI_Recv(&B[_rtl_0_0_0], 1, MPI_FLOAT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         MPI_Recv(&N, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i < N; i += 1)
            B[i] = B[i]*b;
         for(_rtl_0_0_1 = 0; _rtl_0_0_1 <= 9; _rtl_0_0_1 += 1)
            MPI_Isend(&B[_rtl_0_0_1], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD, &request0);
      }
      if (rank0==0) {
         for(_rtl_0_0 = 0; _rtl_0_0 <= 9; _rtl_0_0 += 1)
            MPI_Recv(&B[_rtl_0_0], 1, MPI_FLOAT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status0);
         for(i = 0; i < N; i += 1)
            C[i] += A[i]+B[i];
      }
   }
   MPI_Finalize();
   return 0;
}

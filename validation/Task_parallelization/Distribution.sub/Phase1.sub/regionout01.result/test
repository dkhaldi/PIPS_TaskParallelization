
Init Code

int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/
   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/
      a[i] = -1;                                                        /*0027*/
   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/
      a[2*i] = 0;                                                       /*0032*/
   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/
      a[2*i+1] = 1;                                                     /*0037*/
   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/
      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

CUMULATED_EFFECTS

//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/
//             <may be written>: a[*]
//             <    is read   >: i
//             <    is written>: i
   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/
//             <may be written>: a[*]
//             <    is read   >: i
      a[i] = -1;                                                        /*0027*/
//             <may be written>: a[*]
//             <    is read   >: i
//             <    is written>: i
   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/
//             <may be written>: a[*]
//             <    is read   >: i
      a[2*i] = 0;                                                       /*0032*/
//             <may be written>: a[*]
//             <    is read   >: i
//             <    is written>: i
   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/
//             <may be written>: a[*]
//             <    is read   >: i
      a[2*i+1] = 1;                                                     /*0037*/
//             <may be read   >: a[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/
//             <may be read   >: a[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

PRINT_CODE_REGIONS


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/

//  <a[PHI1]-W-MAY-{0<=PHI1, PHI1<=9}>

   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/

//  <a[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      a[i] = -1;                                                        /*0027*/

//  <a[PHI1]-W-MAY-{0<=PHI1, PHI1<=6}>

   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/

//  <a[PHI1]-W-EXACT-{PHI1==2i, 0<=i, i<=3}>

      a[2*i] = 0;                                                       /*0032*/

//  <a[PHI1]-W-MAY-{3<=PHI1, PHI1<=9}>

   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/

//  <a[PHI1]-W-EXACT-{PHI1==2i+1, 1<=i, i<=4}>

      a[2*i+1] = 1;                                                     /*0037*/

//  <a[PHI1]-R-MAY-{0<=PHI1, PHI1<=9}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/

//  <a[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=9}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

PRINT_CODE_IN_REGIONS


//  <stdout-IN-EXACT-{}>
//  <stdout[PHI1]-IN-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-IN-MAY-{PHI1==1}>

int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/
   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/
      a[i] = -1;                                                        /*0027*/
   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/
      a[2*i] = 0;                                                       /*0032*/
   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/
      a[2*i+1] = 1;                                                     /*0037*/

//  <a[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9}>
//  <stdout-IN-EXACT-{}>
//  <stdout[PHI1]-IN-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-IN-MAY-{PHI1==1}>

   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/

//  <a[PHI1]-IN-EXACT-{PHI1==i, 0<=i, i<=9}>
//  <stdout-IN-EXACT-{}>
//  <stdout[PHI1]-IN-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-IN-EXACT-{PHI1==1}>

      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

PRINT_CODE_OUT_REGIONS

int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/

//  <a[PHI1]-OUT-MAY-{0<=PHI1, PHI1<=9}>

   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/

//  <a[PHI1]-OUT-MAY-{PHI1==i, 0<=i, i<=9}>

      a[i] = -1;                                                        /*0027*/

//  <a[PHI1]-OUT-MAY-{0<=PHI1, PHI1<=6}>

   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/

//  <a[PHI1]-OUT-MAY-{PHI1==2i, 0<=i, i<=3}>

      a[2*i] = 0;                                                       /*0032*/

//  <a[PHI1]-OUT-MAY-{3<=PHI1, PHI1<=9}>

   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/

//  <a[PHI1]-OUT-MAY-{PHI1==2i+1, 1<=i, i<=4}>

      a[2*i+1] = 1;                                                     /*0037*/
   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/

//  <stdout[PHI1]-OUT-MAY-{PHI1==0, 0<=i, i<=9}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==1, 0<=i, i<=9}>

      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

TASK_MAPPING

int main()
{
   int i;                                                               /*0022*/
   int a[10];                                                           /*0023*/
   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/
      a[i] = -1;                                                        /*0027*/
   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/
      a[2*i] = 0;                                                       /*0032*/
   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/
      a[2*i+1] = 1;                                                     /*0037*/
   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/
      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

VARIABLE_REPLICATION

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0022*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
   int a[10];                                                           /*0023*/
   
   //T0 init the array
#pragma distributed on_cluster=0
   for(i = 0; i <= 9; i += 1)                                           /*0026*/
      a[i] = -1;                                                        /*0027*/
   
   //T1 modify even cell without the last even cell (to be more tricky)
#pragma distributed on_cluster=1
   for(i = 0; i <= 3; i += 1)                                           /*0031*/
      a[2*i] = 0;                                                       /*0032*/
   
   //T2 modify odd cell without the first odd cell (to be more tricky)
#pragma distributed on_cluster=2
   for(i = 1; i <= 4; i += 1)                                           /*0036*/
      a[2*i+1] = 1;                                                     /*0037*/
   
   //T3 use all the array
#pragma distributed on_cluster=3
   for(i = 0; i <= 9; i += 1)                                           /*0041*/
      printf("a[%d]=%d\n", i, a[i]);                                    /*0042*/
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

COPY_VALUE_OF_WRITE

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0022*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
   int a[10];                                                           /*0023*/
#pragma distributed on_cluster=0
   {
      
      //T0 init the array
      for(i = 0; i <= 9; i += 1) {                                      /*0026*/
         a[i] = -1;                                                     /*0027*/
         __a_0[i] = a[i];
         __a_1[i] = a[i];
         __a_2[i] = a[i];
         __a_3[i] = a[i];
      }
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }
#pragma distributed on_cluster=1
   {
      
      //T1 modify even cell without the last even cell (to be more tricky)
      for(i = 0; i <= 3; i += 1) {                                      /*0031*/
         a[2*i] = 0;                                                    /*0032*/
         __a_0[2*i] = a[2*i];
         __a_1[2*i] = a[2*i];
         __a_2[2*i] = a[2*i];
         __a_3[2*i] = a[2*i];
      }
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }
#pragma distributed on_cluster=2
   {
      
      //T2 modify odd cell without the first odd cell (to be more tricky)
      for(i = 1; i <= 4; i += 1) {                                      /*0036*/
         a[2*i+1] = 1;                                                  /*0037*/
         __a_0[2*i+1] = a[2*i+1];
         __a_1[2*i+1] = a[2*i+1];
         __a_2[2*i+1] = a[2*i+1];
         __a_3[2*i+1] = a[2*i+1];
      }
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }
#pragma distributed on_cluster=3
   {
      
      //T3 use all the array
      for(i = 0; i <= 9; i += 1)                                        /*0041*/
         printf("a[%d]=%d\n", i, a[i]);                                 /*0042*/
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

ELIMINATE_ORIGINAL_VARIABLES

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0022*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
   int a[10];                                                           /*0023*/
#pragma distributed on_cluster=0
   {
      
      //T0 init the array
      for(__i_0 = 0; __i_0 <= 9; __i_0 += 1) {                          /*0026*/
         __a_0[__i_0] = -1;                                             /*0027*/
         __a_0[__i_0] = __a_0[__i_0];
         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
      }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=1
   {
      
      //T1 modify even cell without the last even cell (to be more tricky)
      for(__i_1 = 0; __i_1 <= 3; __i_1 += 1) {                          /*0031*/
         __a_1[2*__i_1] = 0;                                            /*0032*/
         __a_0[2*__i_1] = __a_1[2*__i_1];
         __a_1[2*__i_1] = __a_1[2*__i_1];
         __a_2[2*__i_1] = __a_1[2*__i_1];
         __a_3[2*__i_1] = __a_1[2*__i_1];
      }
      __i_0 = __i_1;
      __i_1 = __i_1;
      __i_2 = __i_1;
      __i_3 = __i_1;
   }
#pragma distributed on_cluster=2
   {
      
      //T2 modify odd cell without the first odd cell (to be more tricky)
      for(__i_2 = 1; __i_2 <= 4; __i_2 += 1) {                          /*0036*/
         __a_2[2*__i_2+1] = 1;                                          /*0037*/
         __a_0[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_1[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_2[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_3[2*__i_2+1] = __a_2[2*__i_2+1];
      }
      __i_0 = __i_2;
      __i_1 = __i_2;
      __i_2 = __i_2;
      __i_3 = __i_2;
   }
#pragma distributed on_cluster=3
   {
      
      //T3 use all the array
      for(__i_3 = 0; __i_3 <= 9; __i_3 += 1)                            /*0041*/
         printf("a[%d]=%d\n", __i_3, __a_3[__i_3]);                     /*0042*/
      __i_0 = __i_3;
      __i_1 = __i_3;
      __i_2 = __i_3;
      __i_3 = __i_3;
   }
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

CLEAN_DECLARATIONS

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
#pragma distributed on_cluster=0
   {
      
      //T0 init the array
      for(__i_0 = 0; __i_0 <= 9; __i_0 += 1) {                          /*0026*/
         __a_0[__i_0] = -1;                                             /*0027*/
         __a_0[__i_0] = __a_0[__i_0];
         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
      }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=1
   {
      
      //T1 modify even cell without the last even cell (to be more tricky)
      for(__i_1 = 0; __i_1 <= 3; __i_1 += 1) {                          /*0031*/
         __a_1[2*__i_1] = 0;                                            /*0032*/
         __a_0[2*__i_1] = __a_1[2*__i_1];
         __a_1[2*__i_1] = __a_1[2*__i_1];
         __a_2[2*__i_1] = __a_1[2*__i_1];
         __a_3[2*__i_1] = __a_1[2*__i_1];
      }
      __i_0 = __i_1;
      __i_1 = __i_1;
      __i_2 = __i_1;
      __i_3 = __i_1;
   }
#pragma distributed on_cluster=2
   {
      
      //T2 modify odd cell without the first odd cell (to be more tricky)
      for(__i_2 = 1; __i_2 <= 4; __i_2 += 1) {                          /*0036*/
         __a_2[2*__i_2+1] = 1;                                          /*0037*/
         __a_0[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_1[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_2[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_3[2*__i_2+1] = __a_2[2*__i_2+1];
      }
      __i_0 = __i_2;
      __i_1 = __i_2;
      __i_2 = __i_2;
      __i_3 = __i_2;
   }
#pragma distributed on_cluster=3
   {
      
      //T3 use all the array
      for(__i_3 = 0; __i_3 <= 9; __i_3 += 1)                            /*0041*/
         printf("a[%d]=%d\n", __i_3, __a_3[__i_3]);                     /*0042*/
      __i_0 = __i_3;
      __i_1 = __i_3;
      __i_2 = __i_3;
      __i_3 = __i_3;
   }
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}

IDENTITY_ELIMINATION

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
#pragma distributed on_cluster=0
   {
      
      //T0 init the array
      for(__i_0 = 0; __i_0 <= 9; __i_0 += 1) {                          /*0026*/
         __a_0[__i_0] = -1;                                             /*0027*/

         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
      }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=1
   {
      
      //T1 modify even cell without the last even cell (to be more tricky)
      for(__i_1 = 0; __i_1 <= 3; __i_1 += 1) {                          /*0031*/
         __a_1[2*__i_1] = 0;                                            /*0032*/
         __a_0[2*__i_1] = __a_1[2*__i_1];

         __a_2[2*__i_1] = __a_1[2*__i_1];
         __a_3[2*__i_1] = __a_1[2*__i_1];
      }
      __i_0 = __i_1;

      __i_2 = __i_1;
      __i_3 = __i_1;
   }
#pragma distributed on_cluster=2
   {
      
      //T2 modify odd cell without the first odd cell (to be more tricky)
      for(__i_2 = 1; __i_2 <= 4; __i_2 += 1) {                          /*0036*/
         __a_2[2*__i_2+1] = 1;                                          /*0037*/
         __a_0[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_1[2*__i_2+1] = __a_2[2*__i_2+1];

         __a_3[2*__i_2+1] = __a_2[2*__i_2+1];
      }
      __i_0 = __i_2;
      __i_1 = __i_2;

      __i_3 = __i_2;
   }
#pragma distributed on_cluster=3
   {
      
      //T3 use all the array
      for(__i_3 = 0; __i_3 <= 9; __i_3 += 1)                            /*0041*/
         printf("a[%d]=%d\n", __i_3, __a_3[__i_3]);                     /*0042*/
      __i_0 = __i_3;
      __i_1 = __i_3;
      __i_2 = __i_3;

   }
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;                                                            /*0046*/
}


Final Code

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[10], __a_1[10], __a_2[10], __a_3[10];
#pragma distributed on_cluster=0
   {
      
      //T0 init the array
      for(__i_0 = 0; __i_0 <= 9; __i_0 += 1) {
         __a_0[__i_0] = -1;

         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
      }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=1
   {
      
      //T1 modify even cell without the last even cell (to be more tricky)
      for(__i_1 = 0; __i_1 <= 3; __i_1 += 1) {
         __a_1[2*__i_1] = 0;
         __a_0[2*__i_1] = __a_1[2*__i_1];

         __a_2[2*__i_1] = __a_1[2*__i_1];
         __a_3[2*__i_1] = __a_1[2*__i_1];
      }
      __i_0 = __i_1;

      __i_2 = __i_1;
      __i_3 = __i_1;
   }
#pragma distributed on_cluster=2
   {
      
      //T2 modify odd cell without the first odd cell (to be more tricky)
      for(__i_2 = 1; __i_2 <= 4; __i_2 += 1) {
         __a_2[2*__i_2+1] = 1;
         __a_0[2*__i_2+1] = __a_2[2*__i_2+1];
         __a_1[2*__i_2+1] = __a_2[2*__i_2+1];

         __a_3[2*__i_2+1] = __a_2[2*__i_2+1];
      }
      __i_0 = __i_2;
      __i_1 = __i_2;

      __i_3 = __i_2;
   }
#pragma distributed on_cluster=3
   {
      
      //T3 use all the array
      for(__i_3 = 0; __i_3 <= 9; __i_3 += 1)
         printf("a[%d]=%d\n", __i_3, __a_3[__i_3]);
      __i_0 = __i_3;
      __i_1 = __i_3;
      __i_2 = __i_3;

   }
   
   //cell value of a at the end: 0,-1,0,1,0,1,0,1,-1,1
   return 0;
}

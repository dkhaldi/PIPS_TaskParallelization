
Init Code

int main()
{
   int i;                                                               /*0006*/
   int a[4];                                                            /*0007*/
   int b[4][5];                                                         /*0008*/

#pragma distributed on_cluster=0
   for(i = 0; i <= 3; i += 1) {                                         /*0010*/
      a[i] = i;                                                         /*0011*/
      b[i][0] = a[i];                                                   /*0012*/
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1)                                        /*0017*/
         b[0][j] = b[0][0]+j*10;                                        /*0018*/
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1)                                        /*0023*/
         b[1][j] = b[1][0]+j*10;                                        /*0024*/
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1)                                        /*0029*/
         b[2][j] = b[2][0]+j*10;                                        /*0030*/
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1)                                        /*0035*/
         b[3][j] = b[3][0]+j*10;                                        /*0036*/
   }

   int c[20];                                                           /*0040*/
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(i = 0; i <= 3; i += 1)                                        /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = i*4+j;                                                  /*0045*/
            c[k] = b[i][j];                                             /*0046*/
         }
   }

   return 0;                                                            /*0051*/
}

TASK_MAPPING

int main()
{
   int i;                                                               /*0006*/
   int a[4];                                                            /*0007*/
   int b[4][5];                                                         /*0008*/

#pragma distributed on_cluster=0
   for(i = 0; i <= 3; i += 1) {                                         /*0010*/
      a[i] = i;                                                         /*0011*/
      b[i][0] = a[i];                                                   /*0012*/
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1)                                        /*0017*/
         b[0][j] = b[0][0]+j*10;                                        /*0018*/
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1)                                        /*0023*/
         b[1][j] = b[1][0]+j*10;                                        /*0024*/
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1)                                        /*0029*/
         b[2][j] = b[2][0]+j*10;                                        /*0030*/
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1)                                        /*0035*/
         b[3][j] = b[3][0]+j*10;                                        /*0036*/
   }

   int c[20];                                                           /*0040*/
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(i = 0; i <= 3; i += 1)                                        /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = i*4+j;                                                  /*0045*/
            c[k] = b[i][j];                                             /*0046*/
         }
   }

   return 0;                                                            /*0051*/
}

VARIABLE_REPLICATION

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0006*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   int a[4];                                                            /*0007*/
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
   int b[4][5];                                                         /*0008*/

#pragma distributed on_cluster=0
   for(i = 0; i <= 3; i += 1) {                                         /*0010*/
      a[i] = i;                                                         /*0011*/
      b[i][0] = a[i];                                                   /*0012*/
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1)                                        /*0017*/
         b[0][j] = b[0][0]+j*10;                                        /*0018*/
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1)                                        /*0023*/
         b[1][j] = b[1][0]+j*10;                                        /*0024*/
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1)                                        /*0029*/
         b[2][j] = b[2][0]+j*10;                                        /*0030*/
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1)                                        /*0035*/
         b[3][j] = b[3][0]+j*10;                                        /*0036*/
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];

   int c[20];                                                           /*0040*/
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(i = 0; i <= 3; i += 1)                                        /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = i*4+j;                                                  /*0045*/
            c[k] = b[i][j];                                             /*0046*/
         }
   }

   return 0;                                                            /*0051*/
}

COPY_VALUE_OF_WRITE

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0006*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   int a[4];                                                            /*0007*/
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
   int b[4][5];                                                         /*0008*/
#pragma distributed on_cluster=0
   {

      for(i = 0; i <= 3; i += 1) {                                      /*0010*/
         a[i] = i;                                                      /*0011*/
         __a_0[i] = a[i];
         __a_1[i] = a[i];
         __a_2[i] = a[i];
         __a_3[i] = a[i];
         b[i][0] = a[i];                                                /*0012*/
         __b_0[i][0] = b[i][0];
         __b_1[i][0] = b[i][0];
         __b_2[i][0] = b[i][0];
         __b_3[i][0] = b[i][0];
      }
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1) {                                      /*0017*/
         b[0][j] = b[0][0]+j*10;                                        /*0018*/
         __b_0[0][j] = b[0][j];
         __b_1[0][j] = b[0][j];
         __b_2[0][j] = b[0][j];
         __b_3[0][j] = b[0][j];
      }
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1) {                                      /*0023*/
         b[1][j] = b[1][0]+j*10;                                        /*0024*/
         __b_0[1][j] = b[1][j];
         __b_1[1][j] = b[1][j];
         __b_2[1][j] = b[1][j];
         __b_3[1][j] = b[1][j];
      }
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1) {                                      /*0029*/
         b[2][j] = b[2][0]+j*10;                                        /*0030*/
         __b_0[2][j] = b[2][j];
         __b_1[2][j] = b[2][j];
         __b_2[2][j] = b[2][j];
         __b_3[2][j] = b[2][j];
      }
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1) {                                      /*0035*/
         b[3][j] = b[3][0]+j*10;                                        /*0036*/
         __b_0[3][j] = b[3][j];
         __b_1[3][j] = b[3][j];
         __b_2[3][j] = b[3][j];
         __b_3[3][j] = b[3][j];
      }
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];

   int c[20];                                                           /*0040*/
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(i = 0; i <= 3; i += 1)                                        /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = i*4+j;                                                  /*0045*/
            c[k] = b[i][j];                                             /*0046*/
            __c_0[k] = c[k];
            __c_1[k] = c[k];
            __c_2[k] = c[k];
            __c_3[k] = c[k];
         }
      __i_0 = i;
      __i_1 = i;
      __i_2 = i;
      __i_3 = i;
   }

   return 0;                                                            /*0051*/
}

ELIMINATE_ORIGINAL_VARIABLES

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   int i;                                                               /*0006*/
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   int a[4];                                                            /*0007*/
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
   int b[4][5];                                                         /*0008*/
#pragma distributed on_cluster=0
   {

      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1) {                          /*0010*/
         __a_0[__i_0] = __i_0;                                          /*0011*/
         __a_0[__i_0] = __a_0[__i_0];
         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
         __b_0[__i_0][0] = __a_0[__i_0];                                /*0012*/
         __b_0[__i_0][0] = __b_0[__i_0][0];
         __b_1[__i_0][0] = __b_0[__i_0][0];
         __b_2[__i_0][0] = __b_0[__i_0][0];
         __b_3[__i_0][0] = __b_0[__i_0][0];
      }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1) {                                      /*0017*/
         __b_0[0][j] = __b_0[0][0]+j*10;                                /*0018*/
         __b_0[0][j] = __b_0[0][j];
         __b_1[0][j] = __b_0[0][j];
         __b_2[0][j] = __b_0[0][j];
         __b_3[0][j] = __b_0[0][j];
      }
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1) {                                      /*0023*/
         __b_1[1][j] = __b_1[1][0]+j*10;                                /*0024*/
         __b_0[1][j] = __b_1[1][j];
         __b_1[1][j] = __b_1[1][j];
         __b_2[1][j] = __b_1[1][j];
         __b_3[1][j] = __b_1[1][j];
      }
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1) {                                      /*0029*/
         __b_2[2][j] = __b_2[2][0]+j*10;                                /*0030*/
         __b_0[2][j] = __b_2[2][j];
         __b_1[2][j] = __b_2[2][j];
         __b_2[2][j] = __b_2[2][j];
         __b_3[2][j] = __b_2[2][j];
      }
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1) {                                      /*0035*/
         __b_3[3][j] = __b_3[3][0]+j*10;                                /*0036*/
         __b_0[3][j] = __b_3[3][j];
         __b_1[3][j] = __b_3[3][j];
         __b_2[3][j] = __b_3[3][j];
         __b_3[3][j] = __b_3[3][j];
      }
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];

   int c[20];                                                           /*0040*/
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1)                            /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = __i_0*4+j;                                              /*0045*/
            __c_0[k] = __b_0[__i_0][j];                                 /*0046*/
            __c_0[k] = __c_0[k];
            __c_1[k] = __c_0[k];
            __c_2[k] = __c_0[k];
            __c_3[k] = __c_0[k];
         }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }

   return 0;                                                            /*0051*/
}

CLEAN_DECLARATIONS

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
#pragma distributed on_cluster=0
   {

      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1) {                          /*0010*/
         __a_0[__i_0] = __i_0;                                          /*0011*/
         __a_0[__i_0] = __a_0[__i_0];
         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
         __b_0[__i_0][0] = __a_0[__i_0];                                /*0012*/
         __b_0[__i_0][0] = __b_0[__i_0][0];
         __b_1[__i_0][0] = __b_0[__i_0][0];
         __b_2[__i_0][0] = __b_0[__i_0][0];
         __b_3[__i_0][0] = __b_0[__i_0][0];
      }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1) {                                      /*0017*/
         __b_0[0][j] = __b_0[0][0]+j*10;                                /*0018*/
         __b_0[0][j] = __b_0[0][j];
         __b_1[0][j] = __b_0[0][j];
         __b_2[0][j] = __b_0[0][j];
         __b_3[0][j] = __b_0[0][j];
      }
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1) {                                      /*0023*/
         __b_1[1][j] = __b_1[1][0]+j*10;                                /*0024*/
         __b_0[1][j] = __b_1[1][j];
         __b_1[1][j] = __b_1[1][j];
         __b_2[1][j] = __b_1[1][j];
         __b_3[1][j] = __b_1[1][j];
      }
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1) {                                      /*0029*/
         __b_2[2][j] = __b_2[2][0]+j*10;                                /*0030*/
         __b_0[2][j] = __b_2[2][j];
         __b_1[2][j] = __b_2[2][j];
         __b_2[2][j] = __b_2[2][j];
         __b_3[2][j] = __b_2[2][j];
      }
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1) {                                      /*0035*/
         __b_3[3][j] = __b_3[3][0]+j*10;                                /*0036*/
         __b_0[3][j] = __b_3[3][j];
         __b_1[3][j] = __b_3[3][j];
         __b_2[3][j] = __b_3[3][j];
         __b_3[3][j] = __b_3[3][j];
      }
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1)                            /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = __i_0*4+j;                                              /*0045*/
            __c_0[k] = __b_0[__i_0][j];                                 /*0046*/
            __c_0[k] = __c_0[k];
            __c_1[k] = __c_0[k];
            __c_2[k] = __c_0[k];
            __c_3[k] = __c_0[k];
         }
      __i_0 = __i_0;
      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }

   return 0;                                                            /*0051*/
}

IDENTITY_ELIMINATION

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
#pragma distributed on_cluster=0
   {

      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1) {                          /*0010*/
         __a_0[__i_0] = __i_0;                                          /*0011*/

         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
         __b_0[__i_0][0] = __a_0[__i_0];                                /*0012*/

         __b_1[__i_0][0] = __b_0[__i_0][0];
         __b_2[__i_0][0] = __b_0[__i_0][0];
         __b_3[__i_0][0] = __b_0[__i_0][0];
      }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=0
   {
      int j;                                                            /*0016*/
      for(j = 1; j <= 4; j += 1) {                                      /*0017*/
         __b_0[0][j] = __b_0[0][0]+j*10;                                /*0018*/

         __b_1[0][j] = __b_0[0][j];
         __b_2[0][j] = __b_0[0][j];
         __b_3[0][j] = __b_0[0][j];
      }
   }
#pragma distributed on_cluster=1
   {
      int j;                                                            /*0022*/
      for(j = 1; j <= 4; j += 1) {                                      /*0023*/
         __b_1[1][j] = __b_1[1][0]+j*10;                                /*0024*/
         __b_0[1][j] = __b_1[1][j];

         __b_2[1][j] = __b_1[1][j];
         __b_3[1][j] = __b_1[1][j];
      }
   }
#pragma distributed on_cluster=2
   {
      int j;                                                            /*0028*/
      for(j = 1; j <= 4; j += 1) {                                      /*0029*/
         __b_2[2][j] = __b_2[2][0]+j*10;                                /*0030*/
         __b_0[2][j] = __b_2[2][j];
         __b_1[2][j] = __b_2[2][j];

         __b_3[2][j] = __b_2[2][j];
      }
   }
#pragma distributed on_cluster=3
   {
      int j;                                                            /*0034*/
      for(j = 1; j <= 4; j += 1) {                                      /*0035*/
         __b_3[3][j] = __b_3[3][0]+j*10;                                /*0036*/
         __b_0[3][j] = __b_3[3][j];
         __b_1[3][j] = __b_3[3][j];
         __b_2[3][j] = __b_3[3][j];

      }
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];
#pragma distributed on_cluster=0
   {
      int j, k;                                                         /*0042*/
      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1)                            /*0043*/
         for(j = 1; j <= 4; j += 1) {                                   /*0044*/
            k = __i_0*4+j;                                              /*0045*/
            __c_0[k] = __b_0[__i_0][j];                                 /*0046*/

            __c_1[k] = __c_0[k];
            __c_2[k] = __c_0[k];
            __c_3[k] = __c_0[k];
         }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }

   return 0;                                                            /*0051*/
}


Final Code

int main()
{
   // Generated by Pass VARIABLE_REPLICATION
   int __i_0, __i_1, __i_2, __i_3;
   // Generated by Pass VARIABLE_REPLICATION
   int __a_0[4], __a_1[4], __a_2[4], __a_3[4];
   // Generated by Pass VARIABLE_REPLICATION
   int __b_0[4][5], __b_1[4][5], __b_2[4][5], __b_3[4][5];
#pragma distributed on_cluster=0
   {

      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1) {
         __a_0[__i_0] = __i_0;

         __a_1[__i_0] = __a_0[__i_0];
         __a_2[__i_0] = __a_0[__i_0];
         __a_3[__i_0] = __a_0[__i_0];
         __b_0[__i_0][0] = __a_0[__i_0];

         __b_1[__i_0][0] = __b_0[__i_0][0];
         __b_2[__i_0][0] = __b_0[__i_0][0];
         __b_3[__i_0][0] = __b_0[__i_0][0];
      }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }
#pragma distributed on_cluster=0
   {
      int j;
      for(j = 1; j <= 4; j += 1) {
         __b_0[0][j] = __b_0[0][0]+j*10;

         __b_1[0][j] = __b_0[0][j];
         __b_2[0][j] = __b_0[0][j];
         __b_3[0][j] = __b_0[0][j];
      }
   }
#pragma distributed on_cluster=1
   {
      int j;
      for(j = 1; j <= 4; j += 1) {
         __b_1[1][j] = __b_1[1][0]+j*10;
         __b_0[1][j] = __b_1[1][j];

         __b_2[1][j] = __b_1[1][j];
         __b_3[1][j] = __b_1[1][j];
      }
   }
#pragma distributed on_cluster=2
   {
      int j;
      for(j = 1; j <= 4; j += 1) {
         __b_2[2][j] = __b_2[2][0]+j*10;
         __b_0[2][j] = __b_2[2][j];
         __b_1[2][j] = __b_2[2][j];

         __b_3[2][j] = __b_2[2][j];
      }
   }
#pragma distributed on_cluster=3
   {
      int j;
      for(j = 1; j <= 4; j += 1) {
         __b_3[3][j] = __b_3[3][0]+j*10;
         __b_0[3][j] = __b_3[3][j];
         __b_1[3][j] = __b_3[3][j];
         __b_2[3][j] = __b_3[3][j];

      }
   }
   // Generated by Pass VARIABLE_REPLICATION
   int __c_0[20], __c_1[20], __c_2[20], __c_3[20];
#pragma distributed on_cluster=0
   {
      int j, k;
      for(__i_0 = 0; __i_0 <= 3; __i_0 += 1)
         for(j = 1; j <= 4; j += 1) {
            k = __i_0*4+j;
            __c_0[k] = __b_0[__i_0][j];

            __c_1[k] = __c_0[k];
            __c_2[k] = __c_0[k];
            __c_3[k] = __c_0[k];
         }

      __i_1 = __i_0;
      __i_2 = __i_0;
      __i_3 = __i_0;
   }

   return 0;
}

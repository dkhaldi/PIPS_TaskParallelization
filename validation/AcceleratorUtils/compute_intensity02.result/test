//                                                          11268*n + 5 (SUMMARY)
void fir_1024_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                          11268*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                11265 (DO)
         for(j = 0; j <= 1023; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                           1412*n + 5 (SUMMARY)
void fir_128_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                           1412*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                 1409 (DO)
         for(j = 0; j <= 127; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                            180*n + 5 (SUMMARY)
void fir_16_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                            180*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                  177 (DO)
         for(j = 0; j <= 15; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                             15*n + 5 (SUMMARY)
void fir_1_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                             15*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                   12 (DO)
         for(j = 0; j <= 0; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                           2820*n + 5 (SUMMARY)
void fir_256_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                           2820*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                 2817 (DO)
         for(j = 0; j <= 255; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                             26*n + 5 (SUMMARY)
void fir_2_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                             26*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                   23 (DO)
         for(j = 0; j <= 1; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                            356*n + 5 (SUMMARY)
void fir_32_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                            356*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                  353 (DO)
         for(j = 0; j <= 31; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                             48*n + 5 (SUMMARY)
void fir_4_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                             48*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                   45 (DO)
         for(j = 0; j <= 3; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                           5636*n + 5 (SUMMARY)
void fir_512_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                           5636*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                 5633 (DO)
         for(j = 0; j <= 511; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                            708*n + 5 (SUMMARY)
void fir_64_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                            708*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                  705 (DO)
         for(j = 0; j <= 63; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
//                                                             92*n + 5 (SUMMARY)
void fir_8_(int n, int in[n], int out[n], int kernel[1024])
{
//                                                                    0 (STMT)
   int i;
//                                                             92*n + 5 (DO)
   for(i = 0; i <= n-1+1-1; i += 1) {
//                                                                    2 (STMT)
      out[i] = 0.0;
      {
//                                                                    0 (STMT)
         int j;
//                                                                   89 (DO)
         for(j = 0; j <= 7; j += 1)
//                                                                   11 (STMT)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_1024_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 1023; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_128_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 127; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_16_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 15; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_1_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 0; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_256_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 255; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_2_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 1; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_32_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 31; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_4_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 3; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_512_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 511; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_64_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 63; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_8_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 7; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_1024_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 1023; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_128_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 127; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_16_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 15; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_1_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 0; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_256_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 255; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_2_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 1; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_32_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 31; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_4_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 3; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_512_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma pips intensive loop
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 511; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_64_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 63; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}
void fir_8_(int n, int in[n], int out[n], int kernel[1024])
{
   int i;
#pragma omp parallel for 
   for(i = 0; i <= n-1+1-1; i += 1) {
      out[i] = 0.0;
      {
         int j;
         for(j = 0; j <= 7; j += 1)
            out[i] += in[i+j]*kernel[j];
      }
   }
}

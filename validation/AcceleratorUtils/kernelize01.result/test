
Initial code

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   /* compute */
kernel:
   for(i = 0; i <= 99; i += 1)
      c[i] = a[i]+b[i];
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Code after kernelization


//  <seed[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;

//  <a[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <b[PHI1]-W-EXACT-{0<=PHI1, PHI1<=99}>
//  <seed[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>

   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {

//  <a[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <seed[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=99}>

      a[i] = seed[i];

//  <b[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <seed[PHI1]-R-EXACT-{PHI1+i==99, 0<=i, i<=99}>

      b[i] = seed[99-i];
   }

//  <a[PHI1]-R-MAY-{0<=PHI1, PHI1<=99, i==100}>
//  <b[PHI1]-R-MAY-{0<=PHI1, PHI1<=99, i==100}>
//  <c[PHI1]-W-MAY-{0<=PHI1, PHI1<=99, i==100}>

kernel:   run_kernel(a, b, c);

//  <c[PHI1]-R-EXACT-{0<=PHI1, PHI1<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

   /* print result */
   for(i = 0; i <= 99; i += 1)

//  <c[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, 0<=i, i<=99}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, 0<=i, i<=99}>

      printf("%d ", c[i]);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==100}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==100}>

   printf("\n");
}

//  <a[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>
//  <b[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>
//  <c[PHI1]-W-MAY-{0<=PHI1, PHI1<=99}>

void run_kernel(int a[100], int b[100], int c[100])
{
   // Declared by Pass Outlining
   int i;

//  <a[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>
//  <b[PHI1]-R-MAY-{0<=PHI1, PHI1<=99}>
//  <c[PHI1]-W-MAY-{0<=PHI1, PHI1<=99}>

   /* compute */
kernel:
   for(i = 0; i <= 99; i += 10)

//  <a[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i, i<=99}>
//  <b[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i, i<=99}>
//  <c[PHI1]-W-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i, i<=99}>

      kernel(a, b, c, i);
}

//  <a[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>
//  <b[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>
//  <c[PHI1]-W-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>

void kernel(int a[100], int b[100], int c[100], int i)
{
   //PIPS generated variable
   int i_1;

//  <a[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>
//  <b[PHI1]-R-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>
//  <c[PHI1]-W-MAY-{PHI1<=99, i<=PHI1, PHI1<=i+9, 0<=i}>

   for(i_1 = i; i_1 <= pips_min(2, i+9, 99); i_1 += 1)

//  <a[PHI1]-R-EXACT-{PHI1==i_1, i_1<=99, i<=i_1, i_1<=i+9, 0<=i}>
//  <b[PHI1]-R-EXACT-{PHI1==i_1, i_1<=99, i<=i_1, i_1<=i+9, 0<=i}>
//  <c[PHI1]-W-EXACT-{PHI1==i_1, i_1<=99, i<=i_1, i_1<=i+9, 0<=i}>

      c[i_1] = a[i_1]+b[i_1];
}
int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   {
      //PIPS generated variable
      int (*p4a_var_c0)[100] = (int (*)[100]) 0, (*p4a_var_b0)[100] = (int (*)[100]) 0, (*p4a_var_a0)[100] = (int (*)[100]) 0;
      P4A_accel_malloc((void **) &p4a_var_a0, sizeof(int)*100);
      P4A_accel_malloc((void **) &p4a_var_b0, sizeof(int)*100);
      P4A_accel_malloc((void **) &p4a_var_c0, sizeof(int)*100);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *p4a_var_a0);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &b[0], *p4a_var_b0);

kernel:      run_kernel(*p4a_var_a0, *p4a_var_b0, *p4a_var_c0);
      P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &c[0], *p4a_var_c0);
      P4A_accel_free(p4a_var_a0);
      P4A_accel_free(p4a_var_b0);
      P4A_accel_free(p4a_var_c0);
   }
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Code after cleanup

int foo(int seed[100])
{
   int a[100];
   int b[100];
   int c[100];
   int i;
   /* init */
#pragma omp parallel for 
   for(i = 0; i <= 99; i += 1) {
      a[i] = seed[i];
      b[i] = seed[99-i];
   }
   {
      //PIPS generated variable
      int (*p4a_var_c0)[100] = (int (*)[100]) 0, (*p4a_var_b0)[100] = (int (*)[100]) 0, (*p4a_var_a0)[100] = (int (*)[100]) 0;
      P4A_accel_malloc((void **) &p4a_var_a0, sizeof(int)*100);
      P4A_accel_malloc((void **) &p4a_var_b0, sizeof(int)*100);
      P4A_accel_malloc((void **) &p4a_var_c0, sizeof(int)*100);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *p4a_var_a0);
      P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &b[0], *p4a_var_b0);
      run_kernel(*p4a_var_a0, *p4a_var_b0, *p4a_var_c0);
      P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &c[0], *p4a_var_c0);
      P4A_accel_free(p4a_var_a0);
      P4A_accel_free(p4a_var_b0);
      P4A_accel_free(p4a_var_c0);
   }
   /* print result */
   for(i = 0; i <= 99; i += 1)
      printf("%d ", c[i]);
   printf("\n");
}

Unsplit resulting code


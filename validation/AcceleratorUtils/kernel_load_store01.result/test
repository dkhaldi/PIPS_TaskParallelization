void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         if (j%2)
            result[i][j] = (10*src0[i][j]+(100-10)*src1[i][j])/100;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         if (j%2)
            result[i][j] = (10*src0[i][j]+(100-10)*src1[i][j])/100;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:      parteeeeeez(n, i, result, src0, src1);
}
void parteeeeeez(int n, unsigned int i, short result[n][n], short src0[n][n], short src1[n][n])
{
   // Declared by Pass Outlining
   unsigned int j;
l99999:
   for(j = 0; j <= n-1; j += 1)
      if (j%2)
         result[i][j] = (10*src0[i][j]+(100-10)*src1[i][j])/100;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
l99998:
   for(i = 0; i <= n-1; i += 1) {
      //PIPS generated variable
      short (*p4a_var_result0)[n][n] = (short (*)[n][n]) 0, (*p4a_var_src00)[n][n] = (short (*)[n][n]) 0, (*p4a_var_src10)[n][n] = (short (*)[n][n]) 0;
      if (n-1>0&&n-1>0&&n-1>0&&n-1>0&&n-1>0&&n-1>0) {
         P4A_accel_malloc((void **) &p4a_var_src10, sizeof(short)*n*n);
         P4A_accel_malloc((void **) &p4a_var_src00, sizeof(short)*n*n);
         P4A_accel_malloc((void **) &p4a_var_result0, sizeof(short)*n*n);
         P4A_copy_to_accel_2d(sizeof(short), n, n, n, n, 0, 0, &result[0][0], *p4a_var_result0);
         P4A_copy_to_accel_2d(sizeof(short), n, n, n, n, 0, 0, &src1[0][0], *p4a_var_src10);
         P4A_copy_to_accel_2d(sizeof(short), n, n, n, n, 0, 0, &src0[0][0], *p4a_var_src00);

l99999:         parteeeeeez(n, i, *p4a_var_result0, *p4a_var_src00, *p4a_var_src10);
         P4A_copy_from_accel_2d(sizeof(short), n, n, n, n, 0, 0, &result[0][0], *p4a_var_result0);
         P4A_accel_free(p4a_var_src10);
         P4A_accel_free(p4a_var_src00);
         P4A_accel_free(p4a_var_result0);
      }
   }
}


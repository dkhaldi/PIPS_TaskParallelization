
 **************** Effective Dependence Graph ****************

	48 --> 48 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-W-MAY> at levels  1
	48 --> 48 with conflicts
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT> at levels  1
	48 --> 48 with conflicts
		from <stdout[0]-W-MAY> to <stdout[0]-R-MAY> at levels  1
	48 --> 48 with conflicts
		from <__IO_EFFECTS:LUNS[1]-W-EXACT> to <__IO_EFFECTS:LUNS[1]-R-EXACT> at levels  1
	48 --> 48 with conflicts
		from <stdout[0]-R-MAY> to <stdout[0]-W-MAY> at levels  1
	48 --> 48 with conflicts
		from <__IO_EFFECTS:LUNS[1]-R-EXACT> to <__IO_EFFECTS:LUNS[1]-W-EXACT> at levels  1
	43 --> 44 with conflicts
		from <array_a[i]-W-EXACT> to <array_a[i-1]-R-EXACT> at levels  1

****************** End of Dependence Graph ******************

Loops are parallelized:

CONSTANT_PATHS_EFFECTS is FALSE
TRUST_CONSTANT_PATHS_EFFECTS_IN_CONFLICTS is TRUE
-> no conflicts are assumed between dereferencing references
from different entities

int main(int argc, char **argv)
{
   int i;

   if (argc>1)
      N = atoi(argv[1]);

   array_a = (float *) malloc(N*sizeof(float));
   array_a!=(void *) 0?(void) 0:__assert_fail("array_a!=((void*)0)", "./dynamic-arrays01.c", 22, __func__);
   array_b = (float *) malloc(N*sizeof(float));
   array_b!=(void *) 0?(void) 0:__assert_fail("array_b!=((void*)0)", "./dynamic-arrays01.c", 24, __func__);
   array_c = (float *) malloc(N*sizeof(float));
   array_c!=(void *) 0?(void) 0:__assert_fail("array_c!=((void*)0)", "./dynamic-arrays01.c", 26, __func__);
   array_d = (float *) malloc(N*sizeof(float));
   array_d!=(void *) 0?(void) 0:__assert_fail("array_d!=((void*)0)", "./dynamic-arrays01.c", 28, __func__);
   
   
   array_a[0] = 2.0f;
   array_b[0] = 2.0f;
   array_c[0] = 2.0f;

#pragma omp parallel for
   for(i = 1; i <= N-1; i += 1)
      array_a[i] = 1.0f/((float) i);
#pragma omp parallel for
   for(i = 1; i <= N-1; i += 1)
      array_b[i] = 1.0f/((float) 2*i);
#pragma omp parallel for
   for(i = 1; i <= N-1; i += 1)
      array_c[i] = 1.0f/((float) 3*i);
   
   
#pragma omp parallel for
   for(i = 1; i <= N-1; i += 1)
      array_a[i] = array_b[i]+array_c[i];
#pragma omp parallel for
   for(i = 1; i <= N-1; i += 1)
      array_d[i] = array_a[i-1]*2;

   for(i = 1; i <= N-1; i += 1)
      printf("a[%d] = %f, d[%d] = %f\n", i, array_a[i], i, array_d[i]);

   return 0;
}

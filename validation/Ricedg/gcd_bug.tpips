# Variable Matrix appears with 0, 1 or 2 subscripts and this is not
# dealt properly by the use-def chain computation nor by the dependence test 

# This test case is pushing the envelop a lot for Amira, Beatrice and Francois

# A ticket is open for this: 232

delete gcd_bug

setproperty CONSTANT_PATH_EFFECTS FALSE

# mandatory for A&K (Rice) parallization on C files
setproperty MEMORY_EFFECTS_ONLY FALSE

setproperty ABORT_ON_USER_ERROR TRUE

create gcd_bug gcd_bug.c

#activate some debug mode
#setenv TEXT_DEBUG_LEVEL 9
#setenv PARSER_DEBUG_LEVEL 9
#setenv RICEDG_DEBUG_LEVEL 9
#setenv SYNTAX_DEBUG_LEVEL 9
#setenv C_SYNTAX_DEBUG_LEVEL 9
#setenv SEMANTICS_DEBUG_LEVEL 9
#setenv PRETTYPRINT_DEBUG_LEVEL 9
#setenv OPMIFY_CODE_DEBUG_LEVEL 9

#SELECT C LANGUAGE
activate C_PARSER
setproperty PRETTYPRINT_LANGUAGE "C"
setproperty PRETTYPRINT_STATEMENT_NUMBER TRUE
#echo If possible, transform simple for-loops into do-loop Ã  la Fortran, simpler to analyze:
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER   TRUE
#echo Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
setproperty FOR_TO_WHILE_LOOP_IN_CONTROLIZER   TRUE
#setproperty PRETTYPRINT_BLOCKS TRUE

setproperty PRAGMA_TYPE "expr"

echo
echo Privatize scalar variables
echo

apply PRIVATIZE_MODULE(%ALLFUNC)

echo
echo Privatize scalar variables
echo

display DG_FILE[main]

echo
echo // OMP style
echo

activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE(%ALLFUNC)

echo
echo Internalize parallel code
echo

display PARALLELPRINTED_FILE(main)
apply INTERNALIZE_PARALLEL_CODE(%ALLFUNC)

echo
echo Ompify code
echo

apply OMPIFY_CODE(%ALLFUNC)

setproperty PRETTYPRINT_SEQUENTIAL_STYLE    "do"

display PRINTED_FILE(main)

echo
echo Unsplit code
echo

apply UNSPLIT(%ALL)

# Well, you should compile ith with openmp options...

close
#delete gcd_bug
quit


Initial code

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   for(i = 0; i < n; i += 1) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   for(i = 0; i < 4*(n/4)-1+1; i += 4) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
      F_0 = alpha*src1[i+1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i+1];
      result[i+1] = F_0+F_3;
      F_0 = alpha*src1[i+2];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i+2];
      result[i+2] = F_0+F_3;
      F_0 = alpha*src1[i+3];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i+3];
      result[i+3] = F_0+F_3;
   }
   for(i = 4*(n/4); i < n; i += 1) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   for(i = 0; i < 4*(n/4)-1+1; i += 4) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
      F_0 = alpha*src1[1+i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[1+i];
      result[1+i] = F_0+F_3;
      F_0 = alpha*src1[2+i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[2+i];
      result[2+i] = F_0+F_3;
      F_0 = alpha*src1[3+i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[3+i];
      result[3+i] = F_0+F_3;
   }
   for(i = 4*(n/4); i < n; i += 1) {
      F_0 = alpha*src1[i];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i];
      result[i] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_30, F_31, F_32, F_33, F_20, F_21, F_22, F_23, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03;
   //PIPS generated variable
   unsigned int i0, i1;
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      F_00 = alpha*src1[i0];
      F_10 = -alpha;
      F_20 = F_10+1;
      F_30 = F_20*src2[i0];
      result[i0] = F_00+F_30;
      F_01 = alpha*src1[1+i0];
      F_11 = -alpha;
      F_21 = F_11+1;
      F_31 = F_21*src2[1+i0];
      result[1+i0] = F_01+F_31;
      F_02 = alpha*src1[2+i0];
      F_12 = -alpha;
      F_22 = F_12+1;
      F_32 = F_22*src2[2+i0];
      result[2+i0] = F_02+F_32;
      F_03 = alpha*src1[3+i0];
      F_13 = -alpha;
      F_23 = F_13+1;
      F_33 = F_23*src2[3+i0];
      result[3+i0] = F_03+F_33;
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_0 = alpha*src1[i1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i1];
      result[i1] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_30, F_31, F_32, F_33, F_20, F_21, F_22, F_23, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //SAC generated temporary array
   a4si pdata2 = {1, 1, 1, 1};
   //SAC generated temporary array
   a4sf pdata80 = {1, 1, 1, 1}, pdata3 = {0, 0, 0, 0}, pdata4 = {0, 0, 0, 0};
   //PIPS generated variable
   unsigned int i0, i1;
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec90, vec100, vec110, vec120, vec130, vec140;
      SIMD_LOAD_V4SF(vec20, &src1[i0]);
      SIMD_LOAD_BROADCAST_V4SF(vec10, alpha);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_UMINPS(vec30, vec10);
      SIMD_STORE_V4SF(vec30, &pdata1[0]);
      SIMD_LOAD_V4SF(vec70, &pdata80[0]);
      SIMD_ADDPS(vec50, vec30, vec70);
      SIMD_STORE_V4SF(vec50, &pdata3[0]);
      SIMD_LOAD_V4SF(vec110, &src2[i0]);
      SIMD_MULPS(vec90, vec50, vec110);
      SIMD_STORE_V4SF(vec90, &pdata4[0]);
      SIMD_ADDPS(vec120, vec00, vec90);
      SIMD_STORE_V4SF(vec120, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_0 = alpha*src1[i1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i1];
      result[i1] = F_0+F_3;
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_30, F_31, F_32, F_33, F_20, F_21, F_22, F_23, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //SAC generated temporary array
   a4si pdata2 = {1, 1, 1, 1};
   //SAC generated temporary array
   a4sf pdata80 = {1, 1, 1, 1}, pdata3 = {0, 0, 0, 0}, pdata4 = {0, 0, 0, 0};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0, vec50_0, vec60_0, vec70_0, vec90_0, vec100_0, vec110_0, vec120_0, vec130_0, vec140_0, vec00_1, vec10_1, vec20_1, vec30_1, vec40_1, vec50_1, vec60_1, vec70_1, vec90_1, vec100_1, vec110_1, vec120_1, vec130_1, vec140_1;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, alpha);
   SIMD_LOAD_V4SF(vec70_0, &pdata80[0]);
   //PIPS generated variable
   unsigned int i0, i1;
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec110_0, &src2[i0]);
      SIMD_LOAD_V4SF(vec20_0, &src1[i0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_UMINPS(vec30_0, vec10_0);
      SIMD_ADDPS(vec50_0, vec30_0, vec70_0);
      SIMD_MULPS(vec90_0, vec50_0, vec110_0);
      SIMD_ADDPS(vec120_0, vec00_0, vec90_0);
      SIMD_STORE_V4SF(vec120_0, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_0 = alpha*src1[i1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i1];
      result[i1] = F_0+F_3;
   }
   SIMD_STORE_V4SF(vec90_0, &pdata4[0]);
   SIMD_STORE_V4SF(vec50_0, &pdata3[0]);
   SIMD_STORE_V4SF(vec30_0, &pdata1[0]);
   SIMD_STORE_V4SF(vec00_0, &pdata0[0]);
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //SAC generated temporary array
   a4sf pdata80 = {1, 1, 1, 1};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec50_0, vec70_0, vec90_0, vec110_0, vec120_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, alpha);
   SIMD_LOAD_V4SF(vec70_0, &pdata80[0]);
   //PIPS generated variable
   unsigned int i0, i1;
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec110_0, &src2[i0]);
      SIMD_LOAD_V4SF(vec20_0, &src1[i0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_UMINPS(vec30_0, vec10_0);
      SIMD_ADDPS(vec50_0, vec30_0, vec70_0);
      SIMD_MULPS(vec90_0, vec50_0, vec110_0);
      SIMD_ADDPS(vec120_0, vec00_0, vec90_0);
      SIMD_STORE_V4SF(vec120_0, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_0 = alpha*src1[i1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i1];
      result[i1] = F_0+F_3;
   }
}

simdized code

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3;
   //SAC generated temporary array
   a4sf pdata80 = {1, 1, 1, 1};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec50_0, vec70_0, vec90_0, vec110_0, vec120_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, alpha);
   SIMD_LOAD_V4SF(vec70_0, &pdata80[0]);
   //PIPS generated variable
   unsigned int i0, i1;
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec110_0, &src2[i0]);
      SIMD_LOAD_V4SF(vec20_0, &src1[i0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_UMINPS(vec30_0, vec10_0);
      SIMD_ADDPS(vec50_0, vec30_0, vec70_0);
      SIMD_MULPS(vec90_0, vec50_0, vec110_0);
      SIMD_ADDPS(vec120_0, vec00_0, vec90_0);
      SIMD_STORE_V4SF(vec120_0, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_0 = alpha*src1[i1];
      F_1 = -alpha;
      F_2 = F_1+1;
      F_3 = F_2*src2[i1];
      result[i1] = F_0+F_3;
   }
}

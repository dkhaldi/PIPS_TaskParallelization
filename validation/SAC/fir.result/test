
Initial code

void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < ksize; j += 1)
         out[i] += in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < ksize; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < ksize; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < ksize; j += 1)
         out[i] = out[i]+in[i+j]*kernel[j];
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   //PIPS generated variable
   float F_0;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < ksize; j += 1) {
         F_0 = in[i+j]*kernel[j];
         out[i] = out[i]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   //PIPS generated variable
   float F_0;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      for(j = 0; j < 4*(ksize/4)-1+1; j += 4) {
         F_0 = in[i+j]*kernel[j];
         out[i] = out[i]+F_0;
         F_0 = in[i+j+1]*kernel[j+1];
         out[i] = out[i]+F_0;
         F_0 = in[i+j+2]*kernel[j+2];
         out[i] = out[i]+F_0;
         F_0 = in[i+j+3]*kernel[j+3];
         out[i] = out[i]+F_0;
      }
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i+j]*kernel[j];
         out[i] = out[i]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t i, j;
   //PIPS generated variable
   float RED0[4], RED1[1];
   //PIPS generated variable
   float F_0;
   for(i = 0; i < -ksize+n+1; i += 1) {
      out[i] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      for(j = 0; j < 4*(ksize/4)-1+1; j += 4) {
         F_0 = in[i+j]*kernel[j];
         RED0[0] = RED0[0]+F_0;
         F_0 = in[1+(i+j)]*kernel[1+j];
         RED0[1] = RED0[1]+F_0;
         F_0 = in[2+(i+j)]*kernel[2+j];
         RED0[2] = RED0[2]+F_0;
         F_0 = in[3+(i+j)]*kernel[3+j];
         RED0[3] = RED0[3]+F_0;
      }
      out[i] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i+j]*kernel[j];
         out[i] = out[i]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t j;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0, F_00, F_01, F_02, F_03;
   //PIPS generated variable
   size_t i0, j0;
   for(i0 = 0; i0 < -ksize+n+1; i0 += 1) {
      out[i0] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      for(j0 = 0; j0 < 4*(ksize/4)-1+1; j0 += 4) {
         F_00 = in[i0+j0]*kernel[j0];
         RED0[0] = RED0[0]+F_00;
         F_01 = in[1+(i0+j0)]*kernel[1+j0];
         RED0[1] = RED0[1]+F_01;
         F_02 = in[2+(i0+j0)]*kernel[2+j0];
         RED0[2] = RED0[2]+F_02;
         F_03 = in[3+(i0+j0)]*kernel[3+j0];
         RED0[3] = RED0[3]+F_03;
      }
      out[i0] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i0])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i0+j]*kernel[j];
         out[i0] = out[i0]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t j;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0, F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   size_t i0, j0;
   for(i0 = 0; i0 < -ksize+n+1; i0 += 1) {
      out[i0] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      for(j0 = 0; j0 < 4*(ksize/4)-1+1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec20, vec30, vec40;
         SIMD_LOAD_V4SF(vec20, &kernel[j0]);
         SIMD_LOAD_V4SF(vec10, &in[i0+j0]);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF(vec00, &pdata0[0]);
         SIMD_LOAD_V4SF(vec30, &RED0[0]);
         SIMD_ADDPS(vec30, vec30, vec00);
         SIMD_STORE_V4SF(vec30, &RED0[0]);
      }
      out[i0] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i0])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i0+j]*kernel[j];
         out[i0] = out[i0]+F_0;
      }
   }
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t j;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0, F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   size_t i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0;
   for(i0 = 0; i0 < -ksize+n+1; i0 += 1) {
      out[i0] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      for(j0 = 0; j0 < 4*(ksize/4)-1+1; j0 += 4) {
         SIMD_LOAD_V4SF(vec10_0, &in[i0+j0]);
         SIMD_LOAD_V4SF(vec20_0, &kernel[j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      }
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      out[i0] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i0])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i0+j]*kernel[j];
         out[i0] = out[i0]+F_0;
      }
   }
   SIMD_STORE_V4SF(vec00_0, &pdata0[0]);
}
void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t j;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   size_t i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   for(i0 = 0; i0 < -ksize+n+1; i0 += 1) {
      out[i0] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      for(j0 = 0; j0 < 4*(ksize/4)-1+1; j0 += 4) {
         SIMD_LOAD_V4SF(vec10_0, &in[i0+j0]);
         SIMD_LOAD_V4SF(vec20_0, &kernel[j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      }
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      out[i0] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i0])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i0+j]*kernel[j];
         out[i0] = out[i0]+F_0;
      }
   }
}

simdized code

void FIRFilter(size_t n, float in[n], float out[n], float kernel[n], size_t ksize)
{
   size_t j;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0;
   //PIPS generated variable
   size_t i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   for(i0 = 0; i0 < -ksize+n+1; i0 += 1) {
      out[i0] = 0.0;
      RED0[0] = 0.;
      RED0[1] = 0.;
      RED0[2] = 0.;
      RED0[3] = 0.;
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      for(j0 = 0; j0 < 4*(ksize/4)-1+1; j0 += 4) {
         SIMD_LOAD_V4SF(vec10_0, &in[i0+j0]);
         SIMD_LOAD_V4SF(vec20_0, &kernel[j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      }
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      out[i0] = RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+out[i0])));
      for(j = 4*(ksize/4); j < ksize; j += 1) {
         F_0 = in[i0+j]*kernel[j];
         out[i0] = out[i0]+F_0;
      }
   }
}

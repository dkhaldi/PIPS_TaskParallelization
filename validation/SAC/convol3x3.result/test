
Initial code

int main()
{
   float image[512][512];
   float new_image[512][512];
   float kernel[3][3];

   int i, j, n;

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = 1;
   
   //     read *, image
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         image[i][j] = 1.;
   
   
   for(n = 0; n <= 19; n += 1)
      convol(512, 512, new_image, image, kernel);

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         printf("%f ", new_image[i][j]);
   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 1;
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 3/2; i <= isi-3/2-1; i += 1)
l300:
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= isi-2; i += 1)
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

l99998:
   for(i = 0; i <= isi-1; i += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            new_image[i][j] = new_image[i][j]+image[i+ki-1][j-1]*kernel[ki][0];
            new_image[i][j] = new_image[i][j]+image[i+ki-1][j]*kernel[ki][1];
            new_image[i][j] = new_image[i][j]+image[i+ki-1][j+1]*kernel[ki][2];
         }
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

l99998:
   for(i = 0; i <= isi-1; i += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            new_image[i][j] = new_image[i][j]+image[i+ki-1][j-1]*kernel[ki][0];
            new_image[i][j] = new_image[i][j]+image[i+ki-1][j]*kernel[ki][1];
            new_image[i][j] = new_image[i][j]+image[i+ki-1][1+j]*kernel[ki][2];
         }
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;
   //PIPS generated variable
   float F_0, F_1, F_2;

l99998:
   for(i = 0; i <= isi-1; i += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            F_0 = image[i+ki-1][j-1]*kernel[ki][0];
            new_image[i][j] = new_image[i][j]+F_0;
            F_1 = image[i+ki-1][j]*kernel[ki][1];
            new_image[i][j] = new_image[i][j]+F_1;
            F_2 = image[i+ki-1][1+j]*kernel[ki][2];
            new_image[i][j] = new_image[i][j]+F_2;
         }
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j, ki;
   //PIPS generated variable
   float F_0, F_1, F_2;
   //PIPS generated variable
   int i0, i1;

l99998:
   for(i0 = 0; i0 <= isi-1; i0 += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i0][j] = image[i0][j];

l99994:
   for(i1 = 1; i1 <= isi-2; i1 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i1][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            F_0 = image[i1+ki-1][j-1]*kernel[ki][0];
            new_image[i1][j] = new_image[i1][j]+F_0;
            F_1 = image[i1+ki-1][j]*kernel[ki][1];
            new_image[i1][j] = new_image[i1][j]+F_1;
            F_2 = image[i1+ki-1][1+j]*kernel[ki][2];
            new_image[i1][j] = new_image[i1][j]+F_2;
         }
         new_image[i1][j] = new_image[i1][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j, ki;
   //PIPS generated variable
   float F_0, F_1, F_2;
   //PIPS generated variable
   int i0, i1;

l99998:
   for(i0 = 0; i0 <= isi-1; i0 += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i0][j] = image[i0][j];

l99994:
   for(i1 = 1; i1 <= isi-2; i1 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i1][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            F_0 = image[i1+ki-1][j-1]*kernel[ki][0];
            F_1 = image[i1+ki-1][j]*kernel[ki][1];
            F_2 = image[i1+ki-1][1+j]*kernel[ki][2];
            new_image[i1][j] = new_image[i1][j]+F_0;
            new_image[i1][j] = new_image[i1][j]+F_1;
            new_image[i1][j] = new_image[i1][j]+F_2;
         }
         new_image[i1][j] = new_image[i1][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j, ki;
   //PIPS generated variable
   float F_0, F_1, F_2;
   //PIPS generated variable
   int i0, i1;

l99998:
   for(i0 = 0; i0 <= isi-1; i0 += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i0][j] = image[i0][j];

l99994:
   for(i1 = 1; i1 <= isi-2; i1 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i1][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            F_0 = image[i1+ki-1][j-1]*kernel[ki][0];
            F_1 = image[i1+ki-1][j]*kernel[ki][1];
            F_2 = image[i1+ki-1][1+j]*kernel[ki][2];
            new_image[i1][j] = new_image[i1][j]+F_0;
            new_image[i1][j] = new_image[i1][j]+F_1;
            new_image[i1][j] = new_image[i1][j]+F_2;
         }
         new_image[i1][j] = new_image[i1][j]/9;
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j, ki;
   //PIPS generated variable
   float F_0, F_1, F_2;
   //PIPS generated variable
   int i0, i1;

l99998:
   for(i0 = 0; i0 <= isi-1; i0 += 1)
l99999:
      for(j = 0; j <= isj-1; j += 1)
         new_image[i0][j] = image[i0][j];

l99994:
   for(i1 = 1; i1 <= isi-2; i1 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i1][j] = 0.;
l99996:
         for(ki = 0; ki <= 2; ki += 1) {
l99997:            ;
            F_0 = image[i1+ki-1][j-1]*kernel[ki][0];
            F_1 = image[i1+ki-1][j]*kernel[ki][1];
            F_2 = image[i1+ki-1][1+j]*kernel[ki][2];
            new_image[i1][j] = new_image[i1][j]+F_0;
            new_image[i1][j] = new_image[i1][j]+F_1;
            new_image[i1][j] = new_image[i1][j]+F_2;
         }
         new_image[i1][j] = new_image[i1][j]/9;
      }
}

simdized code


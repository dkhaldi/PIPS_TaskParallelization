
INLINING "msg_error"

int main()
{
   char *msg1 = "hello";
   char *msg2 = msg1;
   printf("%s", msg2);
   exit(1);

   return 0;
}

POINTS TO for message_error01


// Points To IN:
// msg -> *NULL* , MAY
// msg -> _msg_1 , MAY


// Points To OUT: unreachable

void msg_error(char *msg)
{

// Points To:
// msg -> *NULL* , MAY
// msg -> _msg_1 , MAY

   printf("%s", msg);

// Points To:
// msg -> *NULL* , MAY
// msg -> _msg_1 , MAY

   exit(1);
}

PROPER EFFECTS WITH POINTS TO

void msg_error(char *msg)
{
//             <may be read   >: _msg_1 stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: msg stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("%s", msg);
   exit(1);
}

CUMULATED EFFECTS WITH POINTS TO

//             <may be read   >: _msg_1 stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: msg stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
void msg_error(char *msg)
{
//             <may be read   >: _msg_1 stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: msg stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("%s", msg);
   exit(1);
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: unreachable

int main()
{

// Points To: none

   char *msg1 = "hello";

// Points To:
// msg1 -> "hello" , EXACT

   char *msg2 = msg1;

// Points To:
// msg1 -> "hello" , EXACT
// msg2 -> "hello" , EXACT

   printf("%s", msg2);

// Points To:
// msg1 -> "hello" , EXACT
// msg2 -> "hello" , EXACT

   exit(1);

// Points To: unreachable


   return 0;
}
(activate_phase) Rule `PRINT_CODE' already active

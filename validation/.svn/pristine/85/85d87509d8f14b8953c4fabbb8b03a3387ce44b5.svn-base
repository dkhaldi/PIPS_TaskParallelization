
Initial code

void access_counter(unsigned int *hi, unsigned int *lo)
{
}
int adds(char i0, char i1)
{
   return (int) i0+i1>255?255:i0+i1;
}
void copy(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w])
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1)
         dest[j*w+i] = bytes[j*w+i];
}
void curve(int w, int h, unsigned char bytes[h*w], unsigned char lut[h*w])
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         unsigned char current = bytes[j*w+i];
         bytes[j*w+i] = lut[current];
      }
}
double get_counter()
{
   unsigned int ncyc_hi, ncyc_lo;
   unsigned int hi, lo, borrow;

   access_counter(&ncyc_hi, &ncyc_lo);

   lo = ncyc_lo-cyc_lo;
   borrow = lo>ncyc_lo;
   hi = ncyc_hi-cyc_hi-borrow;
   return (double) hi*(1<<30)*4+lo;
}
void light(int w, int h, unsigned char bytes[h*w], unsigned char val)
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         unsigned char current = bytes[j*w+i];
         bytes[j*w+i] = (int) current+val>255?255:current+val;
      }
}
int main(int ac, char *av[])
{
   FILE *in;
   FILE *map;
   FILE *out;
   int height;
   int width;
   int maxval;
   char c1;
   char c2;
   double t;
   long int i, size;

   if (ac!=4) {
      printf("Usage: light infile.pgm mapfile.amp outfile.pgm\n");
      exit(1);
   }

   in = fopen(av[1], "r");
   if (in==(void *) 0) {
      perror("fopen");
      exit(1);
   }

   map = fopen(av[2], "r");
   if (map==(void *) 0) {
      perror("fopen");
      exit(1);
   }

   fscanf(in, "%c", &c1);
   fscanf(in, "%c", &c2);
   if (c1!='P'||c2!='5') {
      fprintf(stderr, "Error, input file is not PGM\n");
      exit(1);
   }

   fscanf(in, "%d %d", &height, &width);
   fscanf(in, "%d", &maxval);

   printf("w=%d, h=%d, max=%d\n", width, height, maxval);
   {
      unsigned char (*bytes)[height*width];
      unsigned char (*dest)[height*width];
      unsigned char (*lut)[height*width];
      size = width*height;

      bytes = (unsigned char (*)[height*width]) malloc(sizeof(unsigned char)*size);
      if (bytes==(void *) 0) {
         perror("malloc");
         exit(1);
      }

      dest = (unsigned char (*)[height*width]) malloc(sizeof(unsigned char)*size);
      if (dest==(void *) 0) {
         perror("malloc");
         exit(1);
      }

      lut = (unsigned char (*)[height*width]) malloc(sizeof(unsigned char)*256);
      if (lut==(void *) 0) {
         perror("malloc");
         exit(1);
      }
      {
         int n = 0;
         unsigned char val;
         while (fread(&val, 1, 1, map)!=0) {
            (*lut)[n] = val;
            n++;
         }
      }

      fseek(in, 1, 1);
      for(i = 0; i <= size-1; i += 1)
         if (fread(*bytes+i, 1, 1, in)==0) {
            perror("fread");
            exit(1);
         }
      fclose(in);
      {
         struct timeval start, stop;
         gettimeofday(&start, 0);
         transfo(width, height, *bytes, *dest, *lut, 5);
         gettimeofday(&stop, 0);
         fprintf(stderr, "%ld us\n", (stop.tv_sec-start.tv_sec)*1000000+stop.tv_usec-start.tv_usec);
      }
      //t = get_counter();
      //printf("%f clock cycles.\n",t);
      
      
      out = fopen(av[3], "w");
      if (out==(void *) 0) {
         perror("fopen");
         exit(1);
      }
      fprintf(out, "P5\n");
      fprintf(out, "%d %d\n", height, width);
      fprintf(out, "%d\n", maxval);
      for(i = 0; i <= size-1; i += 1)
         if (fwrite(*dest+i, 1, 1, out)==-1) {
            perror("fwrite");
            exit(1);
         }
      fclose(out);
   }
}
void start_counter()
{
   access_counter(&cyc_hi, &cyc_lo);
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   copy(w, h, bytes, dest);
   curve(w, h, dest, lut);
   light(w, h, dest, val);
}

Code after transformations to come...

void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1)
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];

   for(i_1 = 0; i_1 <= w-1; i_1 += 1)
      for(j_1 = 0; j_1 <= h-1; j_1 += 1) {
         current_0 = dest[j_1*w+i_1];
         dest[j_1*w+i_1] = lut[current_0];
      }

   for(i_2 = 0; i_2 <= w-1; i_2 += 1)
      for(j_2 = 0; j_2 <= h-1; j_2 += 1) {
         current_1 = dest[j_2*w+i_2];
         dest[j_2*w+i_2] = (int) current_1+val>255?255:current_1+val;
      }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1)
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];

   for(i_1 = 0; i_1 <= w-1; i_1 += 1)
      for(j_1 = 0; j_1 <= h-1; j_1 += 1) {
         current_0 = dest[j_1*w+i_1];
         dest[j_1*w+i_1] = lut[current_0];
      }

   for(i_2 = 0; i_2 <= w-1; i_2 += 1)
      for(j_2 = 0; j_2 <= h-1; j_2 += 1) {
         current_1 = dest[j_2*w+i_2];
         dest[j_2*w+i_2] = (int) current_1+val>255?255:current_1+val;
      }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1)
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];

   for(i_1 = 0; i_1 <= w-1; i_1 += 1)
      for(j_1 = 0; j_1 <= h-1; j_1 += 1) {
         current_0 = dest[j_1*w+i_1];
         dest[j_1*w+i_1] = lut[current_0];
      }

   for(i_2 = 0; i_2 <= w-1; i_2 += 1)
      for(j_2 = 0; j_2 <= h-1; j_2 += 1) {
         current_1 = dest[j_2*w+i_2];
         dest[j_2*w+i_2] = (int) current_1+val>255?255:current_1+val;
      }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

l99995:
   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
l99996:
      for(j_0 = 0; j_0 <= h-1; j_0 += 1)
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];

l99993:
   for(i_1 = 0; i_1 <= w-1; i_1 += 1)
l99994:
      for(j_1 = 0; j_1 <= h-1; j_1 += 1) {
         current_0 = dest[j_1*w+i_1];
         dest[j_1*w+i_1] = lut[current_0];
      }

l99991:
   for(i_2 = 0; i_2 <= w-1; i_2 += 1)
l99992:
      for(j_2 = 0; j_2 <= h-1; j_2 += 1) {
         current_1 = dest[j_2*w+i_2];
         dest[j_2*w+i_2] = (int) current_1+val>255?255:current_1+val;
      }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

l99989:
   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
l99990:
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];
         current_0 = dest[j_0*w+i_0];
         dest[j_0*w+i_0] = lut[current_0];
      }
   
   
l99987:
   for(i_2 = 0; i_2 <= w-1; i_2 += 1)
l99988:
      for(j_2 = 0; j_2 <= h-1; j_2 += 1) {
         current_1 = dest[j_2*w+i_2];
         dest[j_2*w+i_2] = (int) current_1+val>255?255:current_1+val;
      }
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         dest[j_0*w+i_0] = bytes[j_0*w+i_0];
         current_0 = dest[j_0*w+i_0];
         dest[j_0*w+i_0] = lut[current_0];
         current_1 = dest[j_0*w+i_0];
         dest[j_0*w+i_0] = (int) current_1+val>255?255:current_1+val;
      }
   
   
   ;
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         ;
         current_0 = bytes[j_0*w+i_0];
         ;
         current_1 = lut[current_0];
         dest[j_0*w+i_0] = (int) current_1+val>255?255:current_1+val;
      }
   
   
   ;
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         current_0 = bytes[j_0*w+i_0];
         current_1 = lut[current_0];
         dest[j_0*w+i_0] = (int) current_1+val>255?255:current_1+val;
      }
   
   
   ;
}
void transfo(int w, int h, unsigned char bytes[h*w], unsigned char dest[h*w], unsigned char lut[h*w], unsigned char val)
{
   //PIPS generated variable
   int i_0, j_0, i_1, j_1;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_2, j_2;
   //PIPS generated variable
   unsigned char current_1;

   for(i_0 = 0; i_0 <= w-1; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         current_0 = bytes[j_0*w+i_0];
         current_1 = lut[current_0];
         dest[j_0*w+i_0] = adds(current_1, val);
      }
   
   
   ;
}

Unsplit resulting code

w=837, h=837, max=255
w=837, h=837, max=255

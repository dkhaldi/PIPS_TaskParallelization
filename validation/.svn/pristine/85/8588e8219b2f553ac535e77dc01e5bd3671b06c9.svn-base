
Initial code

void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
l0:
   for(i = 0; i <= 99; i += 1)
l1:
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
l2:
         for(k = 0; k <= 99; k += 1)
l3:
            for(l = 0; l <= 99; l += 1)
               if (i!=k&&j!=l)
                  result[i][j] += towns[k][l]/dist(i, j, k, l);
      }
}

Code after first index set splitting

void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
   //PIPS generated variable
   int l0;
l0:
   for(i = 0; i <= 99; i += 1)
l1:
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
l2:
         for(k = 0; k <= 99; k += 1) {
l3:
            for(l = 0; l <= j-1; l += 1)
               if (i!=k&&j!=l)
                  result[i][j] += towns[k][l]/dist(i, j, k, l);
l99999:
            for(l0 = j; l0 <= 99; l0 += 1)
               if (i!=k&&j!=l0)
                  result[i][j] += towns[k][l0]/dist(i, j, k, l0);
         }
      }
}
void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
   //PIPS generated variable
   int l0, l00;
l0:
   for(i = 0; i <= 99; i += 1)
l1:
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
l2:
         for(k = 0; k <= 99; k += 1) {
l3:
            for(l = 0; l <= j-1; l += 1)
               if (i!=k&&j!=l)
                  result[i][j] += towns[k][l]/dist(i, j, k, l);
l99999:
            for(l0 = j; l0 <= j; l0 += 1)
               if (i!=k&&j!=l0)
                  result[i][j] += towns[k][l0]/dist(i, j, k, l0);
l99998:
            for(l00 = j+1; l00 <= 99; l00 += 1)
               if (i!=k&&j!=l00)
                  result[i][j] += towns[k][l00]/dist(i, j, k, l00);
         }
      }
}

Code after second  index set splitting

void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
   //PIPS generated variable
   int l0, l00, k0, l1, l01, l000;
l0:
   for(i = 0; i <= 99; i += 1)
l1:
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
l2:
         for(k = 0; k <= i-1; k += 1) {
l3:
            for(l = 0; l <= j-1; l += 1)
               if (i!=k&&j!=l)
                  result[i][j] += towns[k][l]/dist(i, j, k, l);
l99999:
            for(l0 = j; l0 <= j; l0 += 1)
               if (i!=k&&j!=l0)
                  result[i][j] += towns[k][l0]/dist(i, j, k, l0);
l99998:
            for(l00 = j+1; l00 <= 99; l00 += 1)
               if (i!=k&&j!=l00)
                  result[i][j] += towns[k][l00]/dist(i, j, k, l00);
         }
l99997:
         for(k0 = i; k0 <= 99; k0 += 1) {
l99996:
            for(l1 = 0; l1 <= j-1; l1 += 1)
               if (i!=k0&&j!=l1)
                  result[i][j] += towns[k0][l1]/dist(i, j, k0, l1);
l99995:
            for(l01 = j; l01 <= j; l01 += 1)
               if (i!=k0&&j!=l01)
                  result[i][j] += towns[k0][l01]/dist(i, j, k0, l01);
l99994:
            for(l000 = j+1; l000 <= 99; l000 += 1)
               if (i!=k0&&j!=l000)
                  result[i][j] += towns[k0][l000]/dist(i, j, k0, l000);
         }
      }
}
void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
   //PIPS generated variable
   int l0, l00, k0, l1, l01, l000, k00, l10, l010, l0000;
l0:
   for(i = 0; i <= 99; i += 1)
l1:
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
l2:
         for(k = 0; k <= i-1; k += 1) {
l3:
            for(l = 0; l <= j-1; l += 1)
               if (i!=k&&j!=l)
                  result[i][j] += towns[k][l]/dist(i, j, k, l);
l99999:
            for(l0 = j; l0 <= j; l0 += 1)
               if (i!=k&&j!=l0)
                  result[i][j] += towns[k][l0]/dist(i, j, k, l0);
l99998:
            for(l00 = j+1; l00 <= 99; l00 += 1)
               if (i!=k&&j!=l00)
                  result[i][j] += towns[k][l00]/dist(i, j, k, l00);
         }
l99997:
         for(k0 = i; k0 <= i; k0 += 1) {
l99996:
            for(l1 = 0; l1 <= j-1; l1 += 1)
               if (i!=k0&&j!=l1)
                  result[i][j] += towns[k0][l1]/dist(i, j, k0, l1);
l99995:
            for(l01 = j; l01 <= j; l01 += 1)
               if (i!=k0&&j!=l01)
                  result[i][j] += towns[k0][l01]/dist(i, j, k0, l01);
l99994:
            for(l000 = j+1; l000 <= 99; l000 += 1)
               if (i!=k0&&j!=l000)
                  result[i][j] += towns[k0][l000]/dist(i, j, k0, l000);
         }
l99993:
         for(k00 = i+1; k00 <= 99; k00 += 1) {
l99992:
            for(l10 = 0; l10 <= j-1; l10 += 1)
               if (i!=k00&&j!=l10)
                  result[i][j] += towns[k00][l10]/dist(i, j, k00, l10);
l99991:
            for(l010 = j; l010 <= j; l010 += 1)
               if (i!=k00&&j!=l010)
                  result[i][j] += towns[k00][l010]/dist(i, j, k00, l010);
l99990:
            for(l0000 = j+1; l0000 <= 99; l0000 += 1)
               if (i!=k00&&j!=l0000)
                  result[i][j] += towns[k00][l0000]/dist(i, j, k00, l0000);
         }
      }
}

Code after dead code elimination

void carto(float towns[100][100], float result[100][100])
{
   int i;
   int j;
   int k;
   int l;
   //PIPS generated variable
   int l0, l00, k0, l1, l01, l000, k00, l10, l010, l0000;
   for(i = 0; i <= 99; i += 1)
      for(j = 0; j <= 99; j += 1) {
         result[i][j] = towns[i][j];
         for(k = 0; k <= i-1; k += 1) {
            for(l = 0; l <= j-1; l += 1)
               result[i][j] += towns[k][l]/dist(i, j, k, l);
            l0 = j+1;
            for(l00 = j+1; l00 <= 99; l00 += 1)
               result[i][j] += towns[k][l00]/dist(i, j, k, l00);
         }
         for(l1 = 0; l1 <= j-1; l1 += 1)
            ;
         l01 = j+1;
         for(l000 = j+1; l000 <= 99; l000 += 1)
            ;
         k0 = i+1;
         for(k00 = i+1; k00 <= 99; k00 += 1) {
            for(l10 = 0; l10 <= j-1; l10 += 1)
               result[i][j] += towns[k00][l10]/dist(i, j, k00, l10);
            l010 = j+1;
            for(l0000 = j+1; l0000 <= 99; l0000 += 1)
               result[i][j] += towns[k00][l0000]/dist(i, j, k00, l0000);
         }
      }
}

Diff, must be empty


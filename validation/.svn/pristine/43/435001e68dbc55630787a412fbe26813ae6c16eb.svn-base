
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

int dump_pos(coord pos[128][128][128], int npdt)
{
   FILE *fp;
   char fname[255];

//  <fname[PHI1]-OUT-MAY-{}>

   snprintf(fname, 255, "out%d", npdt);

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==1}>

   printf("dump part in %s\n", fname);

//  <fp-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>


   fp = fopen(fname, "w");

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   fwrite(pos, sizeof(coord), 128*128*128, fp);

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   fclose(fp);

   return 0;
}


//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI1,
//    PHI1<=127, 0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5,
//    PHI5<=2}>

void p4a_kernel_2(int i, int j, coord pos[128][128][128], coord vel[128][128][128])
{
   //PIPS generated variable
   int k;
   //PIPS generated variable
   float posX, posY, posZ;

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI3,
//    PHI3<=127, 0<=PHI5, PHI5<=2, 0<=i, i<=127, 0<=j, j<=127}>

   // Loop nest P4A end
   if (i<=127&&j<=127)

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI3,
//    PHI3<=127, 0<=PHI5, PHI5<=2, 0<=i, i<=127, 0<=j, j<=127}>

      for(k = 0; k <= 127; k += 1) {
         posX = (pos[i][j][k]._)[0]+(vel[i][j][k]._)[0]*5*1e-2;
         posY = (pos[i][j][k]._)[1]+(vel[i][j][k]._)[1]*5*1e-2;
         posZ = (pos[i][j][k]._)[2]+(vel[i][j][k]._)[2]*5*1e-2;

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, PHI3==k,
//    PHI5==0, 0<=k, k<=127, 0<=i, i<=127, 0<=j, j<=127}>

         (pos[i][j][k]._)[0] = posX+6.*((posX<0)-(posX>6.));

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, PHI3==k,
//    PHI5==1, 0<=k, k<=127, 0<=i, i<=127, 0<=j, j<=127}>

         (pos[i][j][k]._)[1] = posY+6.*((posY<0)-(posY>6.));

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, PHI3==k,
//    PHI5==2, 0<=k, k<=127, 0<=i, i<=127, 0<=j, j<=127}>

         (pos[i][j][k]._)[2] = posZ+6.*((posZ<0)-(posZ>6.));
      }
}


//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{0<=PHI1, PHI1<=127,
//    0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2}>

void p4a_kernel_launcher_10(coord pos[128][128][128], coord vel[128][128][128])
{
   //PIPS generated variable
   int i, j, k;
   //PIPS generated variable
   float posX, posY, posZ;

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{0<=PHI1, PHI1<=127,
//    0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2}>

   // Loop nest P4A begin,2D(128,128)
   for(i = 0; i <= 127; i += 1)

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, 0<=PHI2,
//    PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2, 0<=i, i<=127}>

      for(j = 0; j <= 127; j += 1)

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI3,
//    PHI3<=127, 0<=PHI5, PHI5<=2, 0<=i, i<=127, 0<=j, j<=127}>

         // To be assigned to a call to P4A_vp_0: i
         // To be assigned to a call to P4A_vp_1: j
         // Loop nest P4A end
         p4a_kernel_wrapper_2(i, j, pos, vel);
}


//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI1,
//    PHI1<=127, 0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5,
//    PHI5<=2}>

void p4a_kernel_wrapper_2(int i, int j, coord pos[128][128][128], coord vel[128][128][128])
{

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{PHI1==i, PHI2==j, 0<=PHI1,
//    PHI1<=127, 0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5,
//    PHI5<=2}>

   // To be assigned to a call to P4A_vp_0: i
   // To be assigned to a call to P4A_vp_1: j
   // Loop nest P4A end
   p4a_kernel_2(i, j, pos, vel);
}


//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{0<=PHI1, PHI1<=127,
//    0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2}>

void updatepos(coord pos[128][128][128], coord vel[128][128][128])
{
   float posX, posY, posZ;
   int i, j, k;

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{0<=PHI1, PHI1<=127,
//    0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2}>

   p4a_kernel_launcher_10(pos, vel);
}


//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

void readDataFile(unsigned int n, float mp[128][128][128], coord pos[128][128][128], coord vel[128][128][128], char *filename)
{
   unsigned int np = n;
   
   // Initialisation des particules depuis un fichier
   
   FILE *ic;

//  <ic-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   ic = fopen(filename, "r");

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2}>

   if (ic==(void *) 0) {

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2, np==n}>

      
      // Test d'acces au fichier
      perror("Impossible d'ouvrir le fichier.");
      exit(-1);
   }

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   
   // Nombre de particules dans le fichier
   if (1!=fread(&n, sizeof(int), 1, ic)) {

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2}>

      perror("Erreur de lecture du nombre de particules dans le fichier.");

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

      fclose(ic);
      exit(-1);
   }
   // Initialise les tableaux de donnees
   
   if (n!=np) {
      
      
      
      fprintf(stderr, "Input file contains %d particle while we expected %d, abort\n", n, np);
      fclose(ic);
      exit(-1);
   }

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   
   
   // Masses
   if (np!=fread(mp, sizeof(float), np, ic)) {

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2}>

      perror("Erreur de lecture des masses dans le fichier.");

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

      fclose(ic);
      exit(-1);
   }

   np = 3*np;

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   // Positions
   if (np!=fread(*pos, sizeof(float), np, ic)) {

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2}>

      perror("Erreur de lecture des positions dans le fichier.");

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

      fclose(ic);
      exit(-1);
   }

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   
   // Velocites
   if (np!=fread(*vel, sizeof(float), np, ic)) {

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==2}>

      perror("Erreur de lecture des velocites dans le fichier.");

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

      fclose(ic);
      exit(-1);
   }

//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   
   // Fin de lecture du fichier
   fclose(ic);
}

int main(int argc, char **argv)
{
   float mp[128][128][128];
   // Mass for each particle
   coord pos[128][128][128];
   // Position (x,y,z) for each particle
   coord vel[128][128][128];
   // Velocity (x,y,z) for each particle
   // These are temporary
   float dens[128][128][128];
   // Density for each particle
   float force[128][128][128];
   // Force for each particle
   
   int data[128][128][128];
   int histo[128][128][128];
   unsigned int np = 128*128*128;

   float cdens[128][128][128][2];

   float time;

   int npdt = 0;
   float dt = 5*1e-2/2;


//  <icfile-OUT-MAY-{}>

   char *icfile = argv[1];

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

   
   // Read input file
   readDataFile(np, mp, pos, vel, icfile);

   time = 0;
   
   
   while (time<=10) {

//  <pos[PHI1][PHI2][PHI3]._[PHI5]-OUT-MAY-{0<=PHI1, PHI1<=127,
//    0<=PHI2, PHI2<=127, 0<=PHI3, PHI3<=127, 0<=PHI5, PHI5<=2,
//    np==2097152, npdt==0}>


      updatepos(pos, vel);

//  <*ANY_MODULE*:*ANYWHERE*-OUT-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{}>

      dump_pos(pos, npdt);
      time += 5*1e-2;
   }

   return 0;
}


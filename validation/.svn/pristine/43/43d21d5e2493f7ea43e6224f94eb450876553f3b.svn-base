void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   int i, m;
   m = n%4;
   if (m!=0) {
      for(i = 0; i <= m-1; i += 1)
         dy[i] = dy[i]+da*dx[i];
      if (n<4)
         return;
   }
   for(i = m; i <= n-1; i += 4) {
      dy[i] = dy[i]+da*dx[i];
      dy[i+1] = dy[i+1]+da*dx[i+1];
      dy[i+2] = dy[i+2]+da*dx[i+2];
      dy[i+3] = dy[i+3]+da*dx[i+3];
   }
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   int i, m;
   m = n%4;
   if (n%4!=0) {
      for(i = 0; i <= n%4-1; i += 1)
         dy[i] = dy[i]+da*dx[i];
      if (n<4)
         return;
   }
   for(i = n%4; i <= n-1; i += 4) {
      dy[i] = dy[i]+da*dx[i];
      dy[i+1] = dy[i+1]+da*dx[i+1];
      dy[i+2] = dy[i+2]+da*dx[i+2];
      dy[i+3] = dy[i+3]+da*dx[i+3];
   }
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   int i, m;
   m = n%4;
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}
void daxpy_ur_l99999(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
l99999:
   for(i = 0; i <= 4*(n%4/4)-1; i += 4) {
      dy[i] = dy[i]+da*dx[i];
      dy[1+i] = dy[1+i]+da*dx[1+i];
      dy[2+i] = dy[2+i]+da*dx[2+i];
      dy[3+i] = dy[3+i]+da*dx[3+i];
   }
   for(i = 4*(n%4/4); i <= n%4-1; i += 1)
      dy[i] = dy[i]+da*dx[i];
}
void daxpy_ur_l99999(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
l99999:
   for(i = 0; i <= 4*(n%4/4)-1; i += 4) {
      dy[i] = __PIPS_SAC_MULADD(dy[i], da, dx[i]);
      dy[1+i] = __PIPS_SAC_MULADD(dy[1+i], da, dx[1+i]);
      dy[2+i] = __PIPS_SAC_MULADD(dy[2+i], da, dx[2+i]);
      dy[3+i] = __PIPS_SAC_MULADD(dy[3+i], da, dx[3+i]);
   }
   for(i = 4*(n%4/4); i <= n%4-1; i += 1)
      dy[i] = __PIPS_SAC_MULADD(dy[i], da, dx[i]);
}
void daxpy_ur_l99999(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int i0, i1;
l99999:
   for(i0 = 0; i0 <= 4*(n%4/4)-1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      SIMD_LOAD_V4SF(vec20, &dx[i0]);
      SIMD_LOAD_BROADCAST_V4SF(vec10, da);
      SIMD_LOAD_V4SF(vec00, &dy[i0]);
      SIMD_MULADDPS(vec00, vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &dy[i0]);
   }
   for(i1 = 4*(n%4/4); i1 <= n%4-1; i1 += 1)
      dy[i1] = __PIPS_SAC_MULADD(dy[i1], da, dx[i1]);
}
void daxpy_ur_l99999(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int i0, i1;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, da);
l99999:
   for(i0 = 0; i0 <= 4*(n%4/4)-1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec00_0, &dy[i0]);
      SIMD_LOAD_V4SF(vec20_0, &dx[i0]);
      SIMD_MULADDPS(vec00_0, vec00_0, vec10_0, vec20_0);
      SIMD_STORE_V4SF(vec00_0, &dy[i0]);
   }
   for(i1 = 4*(n%4/4); i1 <= n%4-1; i1 += 1)
      dy[i1] = __PIPS_SAC_MULADD(dy[i1], da, dx[i1]);
}
void daxpy_ur_l99998(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
   //PIPS generated variable
   int ii, LU_NUB0, LU_IB0, LU_IND0;
   ii = n%4;
l99998:   LU_NUB0 = (3+(n-ii))/4;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      dy[ii+4*LU_IND0] = dy[ii+4*LU_IND0]+da*dx[ii+4*LU_IND0];
      dy[1+(ii+4*LU_IND0)] = dy[1+(ii+4*LU_IND0)]+da*dx[1+(ii+4*LU_IND0)];
      dy[2+(ii+4*LU_IND0)] = dy[2+(ii+4*LU_IND0)]+da*dx[2+(ii+4*LU_IND0)];
      dy[3+(ii+4*LU_IND0)] = dy[3+(ii+4*LU_IND0)]+da*dx[3+(ii+4*LU_IND0)];
l99999:      ;
   }
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      dy[ii+4*LU_IND0] = dy[ii+4*LU_IND0]+da*dx[ii+4*LU_IND0];
      dy[1+(ii+4*LU_IND0)] = dy[1+(ii+4*LU_IND0)]+da*dx[1+(ii+4*LU_IND0)];
      dy[2+(ii+4*LU_IND0)] = dy[2+(ii+4*LU_IND0)]+da*dx[2+(ii+4*LU_IND0)];
      dy[3+(ii+4*LU_IND0)] = dy[3+(ii+4*LU_IND0)]+da*dx[3+(ii+4*LU_IND0)];
      dy[4+(ii+4*LU_IND0)] = dy[4+(ii+4*LU_IND0)]+da*dx[4+(ii+4*LU_IND0)];
      dy[5+(ii+4*LU_IND0)] = dy[5+(ii+4*LU_IND0)]+da*dx[5+(ii+4*LU_IND0)];
      dy[6+(ii+4*LU_IND0)] = dy[6+(ii+4*LU_IND0)]+da*dx[6+(ii+4*LU_IND0)];
      dy[7+(ii+4*LU_IND0)] = dy[7+(ii+4*LU_IND0)]+da*dx[7+(ii+4*LU_IND0)];
      dy[8+(ii+4*LU_IND0)] = dy[8+(ii+4*LU_IND0)]+da*dx[8+(ii+4*LU_IND0)];
      dy[9+(ii+4*LU_IND0)] = dy[9+(ii+4*LU_IND0)]+da*dx[9+(ii+4*LU_IND0)];
      dy[10+(ii+4*LU_IND0)] = dy[10+(ii+4*LU_IND0)]+da*dx[10+(ii+4*LU_IND0)];
      dy[11+(ii+4*LU_IND0)] = dy[11+(ii+4*LU_IND0)]+da*dx[11+(ii+4*LU_IND0)];
      dy[12+(ii+4*LU_IND0)] = dy[12+(ii+4*LU_IND0)]+da*dx[12+(ii+4*LU_IND0)];
      dy[13+(ii+4*LU_IND0)] = dy[13+(ii+4*LU_IND0)]+da*dx[13+(ii+4*LU_IND0)];
      dy[14+(ii+4*LU_IND0)] = dy[14+(ii+4*LU_IND0)]+da*dx[14+(ii+4*LU_IND0)];
      dy[15+(ii+4*LU_IND0)] = dy[15+(ii+4*LU_IND0)]+da*dx[15+(ii+4*LU_IND0)];
l99997:      ;
   }
   i = ii+4*MAX0(LU_NUB0, 0);
}
void daxpy_ur_l99998(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
   //PIPS generated variable
   int ii, LU_NUB0, LU_IB0, LU_IND0, I_0, I_1, I_2;
   ii = n%4;
l99998:   I_0 = n-ii;
   I_1 = 3+I_0;
   LU_NUB0 = I_1/4;
   LU_IB0 = MOD(LU_NUB0, 4);
   for(LU_IND0 = 0; LU_IND0 <= LU_IB0-1; LU_IND0 += 1) {
      dy[ii+4*LU_IND0] = __PIPS_SAC_MULADD(dy[ii+4*LU_IND0], da, dx[ii+4*LU_IND0]);
      dy[1+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[1+(ii+4*LU_IND0)], da, dx[1+(ii+4*LU_IND0)]);
      dy[2+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[2+(ii+4*LU_IND0)], da, dx[2+(ii+4*LU_IND0)]);
      dy[3+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[3+(ii+4*LU_IND0)], da, dx[3+(ii+4*LU_IND0)]);
l99999:      ;
   }
   for(LU_IND0 = LU_IB0; LU_IND0 <= LU_NUB0-1; LU_IND0 += 4) {
      dy[ii+4*LU_IND0] = __PIPS_SAC_MULADD(dy[ii+4*LU_IND0], da, dx[ii+4*LU_IND0]);
      dy[1+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[1+(ii+4*LU_IND0)], da, dx[1+(ii+4*LU_IND0)]);
      dy[2+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[2+(ii+4*LU_IND0)], da, dx[2+(ii+4*LU_IND0)]);
      dy[3+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[3+(ii+4*LU_IND0)], da, dx[3+(ii+4*LU_IND0)]);
      dy[4+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[4+(ii+4*LU_IND0)], da, dx[4+(ii+4*LU_IND0)]);
      dy[5+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[5+(ii+4*LU_IND0)], da, dx[5+(ii+4*LU_IND0)]);
      dy[6+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[6+(ii+4*LU_IND0)], da, dx[6+(ii+4*LU_IND0)]);
      dy[7+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[7+(ii+4*LU_IND0)], da, dx[7+(ii+4*LU_IND0)]);
      dy[8+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[8+(ii+4*LU_IND0)], da, dx[8+(ii+4*LU_IND0)]);
      dy[9+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[9+(ii+4*LU_IND0)], da, dx[9+(ii+4*LU_IND0)]);
      dy[10+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[10+(ii+4*LU_IND0)], da, dx[10+(ii+4*LU_IND0)]);
      dy[11+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[11+(ii+4*LU_IND0)], da, dx[11+(ii+4*LU_IND0)]);
      dy[12+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[12+(ii+4*LU_IND0)], da, dx[12+(ii+4*LU_IND0)]);
      dy[13+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[13+(ii+4*LU_IND0)], da, dx[13+(ii+4*LU_IND0)]);
      dy[14+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[14+(ii+4*LU_IND0)], da, dx[14+(ii+4*LU_IND0)]);
      dy[15+(ii+4*LU_IND0)] = __PIPS_SAC_MULADD(dy[15+(ii+4*LU_IND0)], da, dx[15+(ii+4*LU_IND0)]);
l99997:      ;
   }
   I_2 = MAX0(LU_NUB0, 0);
   i = __PIPS_SAC_MULADD(ii, 4, I_2);
}
void daxpy_ur_l99998(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int I_20, I_10, I_00, LU_IND00, LU_IND01, LU_IB00, LU_NUB00, ii0, i0;
   ii0 = n%4;
l99998:   I_00 = n-ii0;
   I_10 = 3+I_00;
   LU_NUB00 = I_10/4;
   LU_IB00 = MOD(LU_NUB00, 4);
   for(LU_IND00 = 0; LU_IND00 <= LU_IB00-1; LU_IND00 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec30, vec40, vec50;
      SIMD_LOAD_V4SF(vec50, &dx[ii0+4*LU_IND00]);
      SIMD_LOAD_BROADCAST_V4SF(vec40, da);
      SIMD_LOAD_V4SF(vec30, &dy[ii0+4*LU_IND00]);
      SIMD_MULADDPS(vec30, vec30, vec40, vec50);
      SIMD_STORE_V4SF(vec30, &dy[ii0+4*LU_IND00]);
l99999:      ;
   }
   for(LU_IND01 = LU_IB00; LU_IND01 <= LU_NUB00-1; LU_IND01 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec60, vec70, vec80, vec90, vec100, vec110, vec120, vec130, vec140, vec150, vec160, vec170;
      SIMD_LOAD_V4SF(vec80, &dx[ii0+4*LU_IND01]);
      SIMD_LOAD_BROADCAST_V4SF(vec70, da);
      SIMD_LOAD_V4SF(vec60, &dy[ii0+4*LU_IND01]);
      SIMD_MULADDPS(vec60, vec60, vec70, vec80);
      SIMD_STORE_V4SF(vec60, &dy[ii0+4*LU_IND01]);
      SIMD_LOAD_V4SF(vec110, &dx[4+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec90, &dy[4+(ii0+4*LU_IND01)]);
      SIMD_MULADDPS(vec90, vec90, vec70, vec110);
      SIMD_STORE_V4SF(vec90, &dy[4+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec140, &dx[8+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec120, &dy[8+(ii0+4*LU_IND01)]);
      SIMD_MULADDPS(vec120, vec120, vec70, vec140);
      SIMD_STORE_V4SF(vec120, &dy[8+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec170, &dx[12+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec150, &dy[12+(ii0+4*LU_IND01)]);
      SIMD_MULADDPS(vec150, vec150, vec70, vec170);
      SIMD_STORE_V4SF(vec150, &dy[12+(ii0+4*LU_IND01)]);
l99997:      ;
   }
   I_20 = MAX0(LU_NUB00, 0);
   i0 = __PIPS_SAC_MULADD(ii0, 4, I_20);
}
void daxpy_ur_l99998(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int I_10, I_00, LU_IND00, LU_IND01, LU_IB00, LU_NUB00, ii0;
   //PIPS generated variable
   v4sf vec30_0, vec40_0, vec50_0, vec60_0, vec70_0, vec80_0, vec90_0, vec110_0, vec120_0, vec140_0, vec150_0, vec170_0;
   ii0 = n%4;
l99998:   I_00 = n-ii0;
   I_10 = 3+I_00;
   LU_NUB00 = I_10/4;
   LU_IB00 = MOD(LU_NUB00, 4);
   SIMD_LOAD_BROADCAST_V4SF(vec70_0, da);
   SIMD_LOAD_BROADCAST_V4SF(vec40_0, da);
   for(LU_IND00 = 0; LU_IND00 <= LU_IB00-1; LU_IND00 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec30_0, &dy[ii0+4*LU_IND00]);
      SIMD_LOAD_V4SF(vec50_0, &dx[ii0+4*LU_IND00]);
      SIMD_MULADDPS(vec30_0, vec30_0, vec40_0, vec50_0);
l99999:      ;
      SIMD_STORE_V4SF(vec30_0, &dy[ii0+4*LU_IND00]);
   }
   for(LU_IND01 = LU_IB00; LU_IND01 <= LU_NUB00-1; LU_IND01 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec150_0, &dy[12+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec170_0, &dx[12+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec120_0, &dy[8+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec140_0, &dx[8+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec90_0, &dy[4+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec110_0, &dx[4+(ii0+4*LU_IND01)]);
      SIMD_LOAD_V4SF(vec60_0, &dy[ii0+4*LU_IND01]);
      SIMD_LOAD_V4SF(vec80_0, &dx[ii0+4*LU_IND01]);
      SIMD_MULADDPS(vec60_0, vec60_0, vec70_0, vec80_0);
      SIMD_MULADDPS(vec90_0, vec90_0, vec70_0, vec110_0);
      SIMD_MULADDPS(vec120_0, vec120_0, vec70_0, vec140_0);
      SIMD_MULADDPS(vec150_0, vec150_0, vec70_0, vec170_0);
l99997:      ;
      SIMD_STORE_V4SF(vec150_0, &dy[12+(ii0+4*LU_IND01)]);
      SIMD_STORE_V4SF(vec120_0, &dy[8+(ii0+4*LU_IND01)]);
      SIMD_STORE_V4SF(vec90_0, &dy[4+(ii0+4*LU_IND01)]);
      SIMD_STORE_V4SF(vec60_0, &dy[ii0+4*LU_IND01]);
   }
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   int i, m;
   m = n%4;
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   int i, m;
   m = n%4;
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int m0;
   m0 = n%4;
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}
void daxpy_ur(int n, float da, float dx[n], float dy[n])
{
   if (n%4!=0) {
l99999:      daxpy_ur_l99999(n, da, dx, dy);
      if (n<4)
         return;
   }
l99998:   daxpy_ur_l99998(n, da, dx, dy);
}

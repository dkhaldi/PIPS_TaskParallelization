
PROPER  EFFECTS 

void init(float **m, int i0, int i1, int j0, int j1)
{
   int i, j;                                                            /*0005*/
//             <    is read   >: i0 i1
//             <    is written>: i
   for(i = i0; i <= i1; i += 1)                                         /*0006*/
//             <    is read   >: i0 i1 j0 j1
//             <    is written>: j
      for(j = j0; j <= j1; j += 1)                                      /*0007*/
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b0
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: i i0 i1 j j0 j1 m
         m[i][j] = 10*i+j;                                              /*0008*/
}

POINTS-TO


// Points To IN:
// _m_1[*] -> *NULL* , MAY
// _m_1[*] -> _m_1_1[*][0] , MAY
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY


// Points To OUT:
// _m_1[*] -> _m_1_1[*][0] , MAY
// m -> _m_1[0] , EXACT

void init(float **m, int i0, int i1, int j0, int j1)
{

// Points To: none

   int i, j;                                                            /*0005*/

// Points To: none

   for(i = i0; i <= i1; i += 1)                                         /*0006*/

// Points To:
// _m_1[*] -> _m_1_1[*][0] , MAY
// m -> _m_1[0] , EXACT

      for(j = j0; j <= j1; j += 1)                                      /*0007*/

// Points To:
// _m_1[*] -> *NULL* , MAY
// _m_1[*] -> _m_1_1[*][0] , MAY
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY

         m[i][j] = 10*i+j;                                              /*0008*/
}

PROPER EFFECTS WITH POINTS TO

void init(float **m, int i0, int i1, int j0, int j1)
{
   int i, j;                                                            /*0005*/
//             <    is read   >: i0 i1
//             <    is written>: i
   for(i = i0; i <= i1; i += 1)                                         /*0006*/
//             <    is read   >: i0 i1 j0 j1
//             <    is written>: j
      for(j = j0; j <= j1; j += 1)                                      /*0007*/
//             <may be written>: _m_1_1[*][j]
//             <    is read   >: _m_1[i] i i0 i1 j j0 j1 m
         m[i][j] = 10*i+j;                                              /*0008*/
}
//             <may be read   >: _m_1[*] j0 j1 m
//             <may be written>: _m_1_1[*][*]
//             <    is read   >: i0 i1
void init(float **m, int i0, int i1, int j0, int j1)
{
   int i, j;                                                            /*0005*/
//             <may be read   >: _m_1[*] i j j0 j1 m
//             <may be written>: _m_1_1[*][*] j
//             <    is read   >: i0 i1
//             <    is written>: i
   for(i = i0; i <= i1; i += 1)                                         /*0006*/
//             <may be read   >: _m_1[*] i j m
//             <may be written>: _m_1_1[*][*]
//             <    is read   >: i0 i1 j0 j1
//             <    is written>: j
      for(j = j0; j <= j1; j += 1)                                      /*0007*/
//             <may be read   >: _m_1[*]
//             <may be written>: _m_1_1[*][*]
//             <    is read   >: i i0 i1 j j0 j1 m
         m[i][j] = 10*i+j;                                              /*0008*/
}

Parallel code

void init(float **m, int i0, int i1, int j0, int j1)
{
   int i, j;                                                            /*0005*/
   for(i = i0; i <= i1; i += 1)                                         /*0006*/
#pragma omp parallel for 
      for(j = j0; j <= j1; j += 1)                                      /*0007*/
         m[i][j] = 10*i+j;                                              /*0008*/
}


TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int n, x, c;

//  T(n) {0<=n}

   n = rand();

//  T(c,x) {c==0, x==0, 0<=n}

   x = c = 0;

//  T() {c==0, x==0, 0<=n}

   if (!(c<=n))

//  T() {0==-1}

      checking_error();

//  T(c,x) {c==x, c#init==x#init, 0<=c, c<=n, x#init<=c}

   while (rand_b())

//  T(c,x) {c==c#init+1, x==x#init+1, c<=n, 0<=n, x<=n}

      if (rand_b()) {

//  T() {0<=n, x+1<=n}

         if (!(x<n))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 0<=n, x<=n}

         x++;

//  T(c) {c==c#init+1, 0<=n, x<=n}

         c++;

//  T() {c<=n, 0<=n, x<=n}

         if (!(c<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {0<=n, x+1<=n}

         if (!(x<n))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 0<=n, x<=n}

         x++;

//  T(c) {c==c#init+1, 0<=n, x<=n}

         c++;

//  T() {c<=n, 0<=n, x<=n}

         if (!(c<=n))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int n, x, c;

//  T(n) {0<=n}

   n = rand();

//  T(c,x) {c==0, x==0, 0<=n}

   x = c = 0;

//  T() {c==0, x==0, 0<=n}

   if (!(c<=n))

//  T() {0==-1}

      checking_error();

//  T(c,x) {c==n, c==x, c#init==0, x#init==0, 0<=c}

   if (x<n) {

//  T(c,x) {c==x, c#init==x#init, 0<=c, c+1<=n, x#init<=c}

      while (rand_b())

//  T(c,x) {c==c#init+1, x==x#init+1, c<=n, 1<=n, x+1<=n}

         if (rand_b()) {

//  T() {1<=n, x+2<=n}

            if (!(x<n-1))

//  T() {0==-1}

               deadlock();

//  T(x) {x==x#init+1, 1<=n, x+1<=n}

            x++;

//  T(c) {c==c#init+1, 1<=n, x+1<=n}

            c++;

//  T() {c<=n, 1<=n, x+1<=n}

            if (!(c<=n))

//  T() {0==-1}

               checking_error();
         }
         else {

//  T() {1<=n, x+2<=n}

            if (!(x<n-1))

//  T() {0==-1}

               deadlock();

//  T(x) {x==x#init+1, 1<=n, x+1<=n}

            x++;

//  T(c) {c==c#init+1, 1<=n, x+1<=n}

            c++;

//  T() {c<=n, 1<=n, x+1<=n}

            if (!(c<=n))

//  T() {0==-1}

               checking_error();
         }

//  T(c,x) {c==c#init+1, c==n, c==x, c==x#init+1, 1<=c}

      if (rand_b()) {

//  T() {c==n-1, c==x, 0<=c}

         if (!(x==n-1))

//  T() {0==-1}

            deadlock();

//  T(x) {c==n-1, c==x-1, c==x#init, 0<=c}

         x++;

//  T(c) {c==c#init+1, c==n, c==x, 1<=c}

         c++;

//  T() {c==n, c==x, 1<=c}

         if (!(c<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {c==n-1, c==x, 0<=c}

         if (!(x==n-1))

//  T() {0==-1}

            deadlock();

//  T(x) {c==n-1, c==x-1, c==x#init, 0<=c}

         x++;

//  T(c) {c==c#init+1, c==n, c==x, 1<=c}

         c++;

//  T() {c==n, c==x, 1<=c}

         if (!(c<=n))

//  T() {0==-1}

            checking_error();
      }
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int n, x, c;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   x = c = 0;

//  P(c,n,x) {c==0, x==0, 0<=n}

   if (!(c<=n))

//  P() {0==-1}

      checking_error();

//  P(c,n,x) {c==0, x==0, 0<=n}

   while (rand_b())

//  P(c,n,x) {c==x, 0<=c, c<=n}

      if (rand_b()) {

//  P(c,n,x) {c==x, 0<=c, c<=n}

         if (!(x<n))

//  P(c,n,x) {c==n, c==x, 0<=c}

            deadlock();

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

         x++;

//  P(c,n,x) {c==x-1, 0<=c, c+1<=n, 0<=n}

         c++;

//  P(c,n,x) {c==x, 1<=c, c<=n, 0<=n}

         if (!(c<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c,n,x) {c==x, 0<=c, c<=n}

         if (!(x<n))

//  P(c,n,x) {c==n, c==x, 0<=c}

            deadlock();

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

         x++;

//  P(c,n,x) {c==x-1, 0<=c, c+1<=n, 0<=n}

         c++;

//  P(c,n,x) {c==x, 1<=c, c<=n, 0<=n}

         if (!(c<=n))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int n, x, c;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   x = c = 0;

//  P(c,n,x) {c==0, x==0, 0<=n}

   if (!(c<=n))

//  P() {0==-1}

      checking_error();

//  P(c,n,x) {c==0, x==0, 0<=n}

   if (x<n) {

//  P(c,n,x) {c==0, x==0, 1<=n}

      while (rand_b())

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

         if (rand_b()) {

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

            if (!(x<n-1))

//  P(c,n,x) {c==n-1, c==x, 0<=c}

               deadlock();

//  P(c,n,x) {c==x, 0<=c, c+2<=n}

            x++;

//  P(c,n,x) {c==x-1, 0<=c, c+2<=n, 1<=n}

            c++;

//  P(c,n,x) {c==x, 1<=c, c+1<=n, 1<=n}

            if (!(c<=n))

//  P() {0==-1}

               checking_error();
         }
         else {

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

            if (!(x<n-1))

//  P(c,n,x) {c==n-1, c==x, 0<=c}

               deadlock();

//  P(c,n,x) {c==x, 0<=c, c+2<=n}

            x++;

//  P(c,n,x) {c==x-1, 0<=c, c+2<=n, 1<=n}

            c++;

//  P(c,n,x) {c==x, 1<=c, c+1<=n, 1<=n}

            if (!(c<=n))

//  P() {0==-1}

               checking_error();
         }

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

      if (rand_b()) {

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

         if (!(x==n-1))

//  P(c,n,x) {c==x, 0<=c, c+2<=n}

            deadlock();

//  P(c,n,x) {c==n-1, c==x, 0<=c}

         x++;

//  P(c,n,x) {c==n-1, c==x-1, 0<=c}

         c++;

//  P(c,n,x) {c==n, c==x, 1<=c}

         if (!(c<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c,n,x) {c==x, 0<=c, c+1<=n}

         if (!(x==n-1))

//  P(c,n,x) {c==x, 0<=c, c+2<=n}

            deadlock();

//  P(c,n,x) {c==n-1, c==x, 0<=c}

         x++;

//  P(c,n,x) {c==n-1, c==x-1, 0<=c}

         c++;

//  P(c,n,x) {c==n, c==x, 1<=c}

         if (!(c<=n))

//  P() {0==-1}

            checking_error();
      }
   }
}

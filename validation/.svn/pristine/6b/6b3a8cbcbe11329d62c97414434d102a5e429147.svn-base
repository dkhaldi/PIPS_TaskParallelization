
Source code with proper effects

void call03(int i, float x)
{
//             <    is read   >: i
//             <    is written>: i
   i++;                                                                 /*0007*/
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0008*/
//             <    is read   >: x
//             <    is written>: x
   x++;                                                                 /*0009*/
}

Source code with cumulated effects

//             <    is read   >: i j x
//             <    is written>: j
void call03(int i, float x)
{
//             <    is read   >: i
//             <    is written>: i
   i++;                                                                 /*0007*/
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0008*/
//             <    is read   >: x
//             <    is written>: x
   x++;                                                                 /*0009*/
}

Source code with transformers for "call03"


//  T(j) {j==j#init+1}

void call03(int i, float x)
{

//  T(i) {i==i#init+1}

   i++;                                                                 /*0007*/

//  T(j) {j==j#init+1}

   j++;                                                                 /*0008*/

//  T() {}

   x++;                                                                 /*0009*/
}

Source code with transformers for "main"


//  T(j) {j==j#init+1}

int main()
{

//  T(ai) {ai==3}

   int ai = 3;                                                          /*0014*/

//  T() {}

   float ax = 4.;                                                       /*0015*/

//  T(j) {j==j#init+1}


   call03(ai, ax);                                                      /*0017*/

//  T(ai) {ai==0}


   ai = 0;                                                              /*0019*/
}

Source code with preconditions for "call03"


//  P() {i==3, j==0}

void call03(int i, float x)
{

//  P() {i==3, j==0}

   i++;                                                                 /*0007*/

//  P(i) {i==4, j==0}

   j++;                                                                 /*0008*/

//  P(i,j) {i==4, j==1, j#init==0}

   x++;                                                                 /*0009*/
}

Source code with preconditions for "main"


//  P() {j==0}

int main()
{

//  P() {j==0}

   int ai = 3;                                                          /*0014*/

//  P(ai) {ai==3, j==0}

   float ax = 4.;                                                       /*0015*/

//  P(ai) {ai==3, j==0}


   call03(ai, ax);                                                      /*0017*/

//  P(ai,j) {ai==3, j==1, j#init==0}


   ai = 0;                                                              /*0019*/
}

Warnings

(activate_phase) Rule `C_PARSER' already active
(activate_phase) Rule `PRINT_CODE_TRANSFORMERS' already active
(activate_phase) Rule `PRINT_CODE_PRECONDITIONS' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[call03!] (ordinary_summary_precondition) empty precondition to call03! because not in call tree from main.

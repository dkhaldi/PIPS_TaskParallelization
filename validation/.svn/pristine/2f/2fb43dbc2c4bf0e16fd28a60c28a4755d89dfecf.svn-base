#
# AIPO
#
#
# compile generated freia_dead_07
#

! initial function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0017*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0018*/
   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "18 D8" [shape=box];
  "17 E8" [shape=box];
  "17 E8" -> "18 D8" [label="out"];
  "in" -> "19 !";
  "in" -> "17 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}

! updated function for AIPO

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}
#
# SPOC
#

! initial function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0017*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0018*/
   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "18 D8" [shape=box];
  "17 E8" [shape=box];
  "17 E8" -> "18 D8" [label="out"];
  "in" -> "19 !";
  "in" -> "17 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}
// graph for dag "freia_dead_07_spoc_helper_0_0" of module "freia_dead_07" in dot format
// DAG "freia_dead_07_spoc_helper_0_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dead_07_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops and 0 copies, optimized to 1 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_dead_07
freia_status freia_dead_07_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 19 not
  // nope
  // alu 19 not stage 0
  si.alu[0][0].op = SPOC_ALU_NOT_IN0;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [7 output 0] 0 null
  // 0`out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_dead_07_spoc_helper_0_0_0(out, in);                            /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! cleaned up function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_dead_07_spoc_helper_0_0_0(out, in);                            /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}
#
# TERAPIX
#

! initial function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0017*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0018*/
   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "18 D8" [shape=box];
  "17 E8" [shape=box];
  "17 E8" -> "18 D8" [label="out"];
  "in" -> "19 !";
  "in" -> "17 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}
// graph for dag "freia_dead_07_terapix_helper_0_0_0" of module "freia_dead_07" in dot format
// DAG "freia_dead_07_terapix_helper_0_0_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dead_07_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 3 ops and 0 copies, optimized to 1 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_dead_07
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 1 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 4
 * - communication: 48
 */
freia_status freia_dead_07_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 512;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: !(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_NOT;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_dead_07_terapix_helper_0_0_0(out, in);                         /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! cleaned up function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_dead_07_terapix_helper_0_0_0(out, in);                         /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}
#
# OPENCL
#

! initial function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0017*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0018*/
   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "18 D8" [shape=box];
  "17 E8" [shape=box];
  "17 E8" -> "18 D8" [label="out"];
  "in" -> "19 !";
  "in" -> "17 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}
// graph for dag "freia_dead_07_opencl_helper_0_0" of module "freia_dead_07" in dot format
// DAG "freia_dead_07_opencl_helper_0_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dead_07_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 3 ops and 0 copies, optimized to 1 ops and 0+0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_dead_07

// opencl for dag 0

! updated function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! cleaned up function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}
#
# SIGMAC
#
#
# compile generated freia_dead_07
#

! initial function

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0017*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0018*/
   freia_aipo_not(out, in);                                             /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! graphs

// graph for dag "dag_0" of module "freia_dead_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "18 D8" [shape=box];
  "17 E8" [shape=box];
  "17 E8" -> "18 D8" [label="out"];
  "in" -> "19 !";
  "in" -> "17 E8";
}
// graph for dag "dag_cleaned_0" of module "freia_dead_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "19 !" [shape=trapezium,orientation=270];
  "19 !" -> "out";
  "in" -> "19 !";
}

! updated function for OPENCL

int freia_dead_07(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/

   freia_common_open_input(&fdin, 0);                                   /*0009*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0010*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0012*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0013*/

   freia_common_rx_image(in, &fdin);                                    /*0015*/

   freia_mppa_launch(0, 1, 1, 0, 0, in, out);                           /*0019*/

   freia_common_tx_image(out, &fdout);                                  /*0021*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0024*/
   freia_common_destruct_data(out);                                     /*0025*/
   freia_common_close_input(&fdin);                                     /*0026*/
   freia_common_close_output(&fdout);                                   /*0027*/

   return 0;                                                            /*0029*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_dead_07 fname=freia_dead_07_sigmac_helper_0 split=0


/*#####################################################################*/
/*############# freia_dead_07_sigmac_helper_0_0 Subgraph ##############*/
/*#####################################################################*/

subgraph
freia_dead_07_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...

    // instantiations...
    agent not0 = new img_invert_16(width);

    // connections...
    connect (strin.output[0] /* in */, not0.input);
    connect (not0.output, strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_dead_07_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


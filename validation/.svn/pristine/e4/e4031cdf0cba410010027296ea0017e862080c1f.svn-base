
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int v1, v2, n, m, i1, i2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T() {1<=m, 1<=n}

   if (!(n>0&&m>0))

//  T() {0==-1}

      deadlock();

//  T(v1) {n==v1, 1<=m, 1<=n}

   v1 = n;

//  T(v2) {n==v1, v2==0, 1<=m, 1<=n}

   v2 = 0;

//  T(i1,i2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   i1 = i2 = 0;

//  T() {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   if (!(i1<=n&&i2<=n))

//  T() {0==-1}

      checking_error();

//  T(i1,i2,v1,v2) {i1+v1==i1#init+v1#init, i1+v1==n, i2+v2+1<=m+n,
//    i2<=n, i2+1<=n+v1, i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1<=n,
//    v1+v2<=n, 0<=v1, v1<=v1#init, v1+v2<=v1#init+v2#init}

   while (rand_b())

//  T(i1,i2,v1,v2) {i1+v1==i1#init+v1#init, i1<=n, i2+v1#init<=n+v1,
//    1<=m, v1+v2+1<=m+v1#init, 1<=n, v1<=v1#init, v1#init<=v1+1,
//    2v1+v2+1<=2v1#init+v2#init, 1<=v1#init}

      if (rand_b()) {

//  T() {1<=m, v2+1<=m, 1<=n, 1<=v1}

         if (!(v1>0&&v2<m))

//  T() {0==-1}

            deadlock();

//  T(v2) {v2==v2#init+1, 1<=m, v2<=m, 1<=n, 1<=v1}

         v2++;

//  T(v1) {v1==v1#init-1, 1<=m, v2<=m, 1<=n, 0<=v1}

         v1--;

//  T(i1) {i1==i1#init+1, 1<=m, v2<=m, 1<=n, 0<=v1}

         i1++;

//  T(i2) {i2==0, 1<=m, v2<=m, 1<=n, 0<=v1}

         i2 = 0;

//  T() {i2==0, i1<=n, 1<=m, v2<=m, 1<=n, 0<=v1}

         if (!(i1<=n&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {1<=m, m<=v2, 1<=n, 1<=v1}

         if (!(v1>0&&v2>=m))

//  T() {0==-1}

            deadlock();

//  T(v2) {v2==0, 1<=m, m<=v2#init, 1<=n, 1<=v1}

         v2 = 0;

//  T(i2) {i2#init+m==i2, v2==0, 1<=m, 1<=n, 1<=v1}

         i2 += m;

//  T() {v2==0, i1<=n, i2<=n, 1<=m, 1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int v1, v2, n, m, i1, i2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T() {1<=m, 1<=n}

   if (!(n>0&&m>0))

//  T() {0==-1}

      deadlock();

//  T(v1) {n==v1, 1<=m, 1<=n}

   v1 = n;

//  T(v2) {n==v1, v2==0, 1<=m, 1<=n}

   v2 = 0;

//  T(i1,i2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   i1 = i2 = 0;

//  T() {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   if (!(i1<=n&&i2<=n))

//  T() {0==-1}

      checking_error();

//  T(i1,i2,v1,v2) {i1+v1==i1#init+v1#init, i1+v1==n, i1#init<=i1,
//    i1#init+v2<=i1+v2#init, 0<=i2, i2<=m, i2+v1+1<=m+n, i2+v2<=m,
//    i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m, v1<=n, 1<=v1}

   while (rand_b())

//  T(i1,i2,v1,v2) {i1==i1#init+1, i2+v2==v2#init+1, v1==v1#init-1,
//    i1<=n, 1<=m, v2+1<=m, v2#init+1<=m+v2, v2#init+1<=m, 1<=n,
//    v2#init+1<=n+v2, 1<=v1, v2<=v2#init+1}

      if (rand_b()) {

//  T() {1<=m, v2+2<=m, 1<=n, 2<=v1}

         if (!(v1>1&&v2<m-1))

//  T() {0==-1}

            deadlock();

//  T(v2) {v2==v2#init+1, 1<=m, v2+1<=m, 1<=n, 2<=v1}

         v2++;

//  T(v1) {v1==v1#init-1, 1<=m, v2+1<=m, 1<=n, 1<=v1}

         v1--;

//  T(i1) {i1==i1#init+1, 1<=m, v2+1<=m, 1<=n, 1<=v1}

         i1++;

//  T(i2) {i2==0, 1<=m, v2+1<=m, 1<=n, 1<=v1}

         i2 = 0;

//  T() {i2==0, i1<=n, 1<=m, v2+1<=m, 1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {m==v2+1, 1<=m, 1<=n, 2<=v1}

         if (!(v1>1&&v2==m-1))

//  T() {0==-1}

            deadlock();

//  T(v2) {m==v2, m==v2#init+1, 1<=m, 1<=n, 2<=v1}

         v2++;

//  T(v1) {m==v2, v1==v1#init-1, 1<=m, 1<=n, 1<=v1}

         v1--;

//  T(i1) {i1==i1#init+1, m==v2, 1<=m, 1<=n, 1<=v1}

         i1++;

//  T(i2) {i2==0, m==v2, 1<=m, 1<=n, 1<=v1}

         i2 = 0;

//  T() {i2==0, m==v2, i1<=n, 1<=m, 1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  T() {0==-1}

            checking_error();

//  T() {i2==0, m==v2, i1<=n, 1<=m, 1<=n, 1<=v1}

         if (!(v1>0&&v2>=m))

//  T() {0==-1}

            deadlock();

//  T(v2) {i2==0, m==v2#init, v2==0, i1<=n, 1<=m, 1<=n, 1<=v1}

         v2 = 0;

//  T(i2) {i2==m, i2#init==0, v2==0, i1<=n, 1<=i2, 1<=n, 1<=v1}

         i2 += m;

//  T() {i2==m, v2==0, i1<=n, 1<=i2, i2<=n, 1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  T() {0==-1}

            checking_error();
      }

//  T() {i1==n-1, v1==1, 0<=i1, v2<=i1, 1<=m, v2+1<=m}

   if (!(v1==1&&v2<m))

//  T() {0==-1}

      deadlock();

//  T(v2) {i1==n-1, v1==1, v2==v2#init+1, 0<=i1, v2<=i1+1, 1<=m,
//    v2<=m}

   v2++;

//  T(v1) {i1==n-1, v1==0, v1#init==1, 0<=i1, v2<=i1+1, 1<=m, v2<=m}

   v1--;

//  T(i1) {i1==i1#init+1, i1==n, v1==0, 1<=i1, v2<=i1, 1<=m, v2<=m}

   i1++;

//  T(i2) {i1==n, i2==0, v1==0, 1<=i1, v2<=i1, 1<=m, v2<=m}

   i2 = 0;

//  T() {i1==n, i2==0, v1==0, 1<=i1, v2<=i1, 1<=m, v2<=m}

   if (!(i1<=n&&i2<=n))

//  T() {0==-1}

      checking_error();
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int v1, v2, n, m, i1, i2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   if (!(n>0&&m>0))

//  P(m,n) {0<=m, 0<=n}

      deadlock();

//  P(m,n) {1<=m, 1<=n}

   v1 = n;

//  P(m,n,v1) {n==v1, 1<=m, 1<=n}

   v2 = 0;

//  P(m,n,v1,v2) {n==v1, v2==0, 1<=m, 1<=n}

   i1 = i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   if (!(i1<=n&&i2<=n))

//  P() {0==-1}

      checking_error();

//  P(i1,i2,m,n,v1,v2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   while (rand_b())

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2+1<=m+n, i2<=n, i2+1<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1<=n, v1+v2<=n, 0<=v1}

      if (rand_b()) {

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2+1<=m+n, i2<=n, i2+1<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1<=n, v1+v2<=n, 0<=v1}

         if (!(v1>0&&v2<m))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 1<=i1, i2+v2+1<=m+n, i2+1<=n,
//    i2+1<=n+v1, i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1+v2<=n, 0<=v1}

            deadlock();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2+1<=m+n, i2<=n, i2+1<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2+1<=m, 1<=n, v1<=n, v1+v2<=n, 1<=v1}

         v2++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2<=m+n, i2<=n, i2+1<=n+v1,
//    i2+v1+v2<=2n, 1<=m, v2<=m, 1<=n, v1<=n, v1+v2<=n+1, 1<=v1}

         v1--;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n-1, i2+v2<=m+n, i2<=n, i2<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1+1<=n, v1+v2<=n, 0<=v1}

         i1++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2<=m+n, i2<=n, i2<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1+1<=n, v1+v2<=n, 0<=v1}

         i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, 1<=m, v2<=m, 1<=n, v1+1<=n,
//    v1+v2<=n, 0<=v1}

         if (!(i1<=n&&i2<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2+v2+1<=m+n, i2<=n, i2+1<=n+v1,
//    i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1<=n, v1+v2<=n, 0<=v1}

         if (!(v1>0&&v2>=m))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i1, i2+v2+1<=m+n, i2<=n,
//    i2+1<=n+v1, i2+v1+v2+1<=2n, 1<=m, v2<=m, 1<=n, v1+v2<=n, 0<=v1}

            deadlock();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, m==v2, i2+m+v1+1<=2n, i2+1<=n,
//    i2+1<=n+v1, 1<=m, m+v1<=n, 1<=n, v1<=n, 1<=v1}

         v2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, v2==0, i2+m+v1+1<=2n, i2+1<=n,
//    i2+1<=n+v1, 1<=m, m+v1<=n, 1<=n, v1<=n, 1<=v1}

         i2 += m;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, v2==0, i2+1<=m+n, i2+1<=m+n+v1,
//    i2+v1+1<=2n, 1<=m, m+v1<=n, 1<=n, v1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, v2==0, i2+1<=m+n, i2+1<=m+n+v1,
//    n+1<=i2, i2+v1+1<=2n, 1<=m, m+v1<=n, 1<=n, v1<=n, 1<=v1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int v1, v2, n, m, i1, i2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   if (!(n>0&&m>0))

//  P(m,n) {0<=m, 0<=n}

      deadlock();

//  P(m,n) {1<=m, 1<=n}

   v1 = n;

//  P(m,n,v1) {n==v1, 1<=m, 1<=n}

   v2 = 0;

//  P(m,n,v1,v2) {n==v1, v2==0, 1<=m, 1<=n}

   i1 = i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   if (!(i1<=n&&i2<=n))

//  P() {0==-1}

      checking_error();

//  P(i1,i2,m,n,v1,v2) {i1==0, i2==0, n==v1, v2==0, 1<=m, 1<=n}

   while (rand_b())

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m, v1<=n,
//    1<=v1}

      if (rand_b()) {

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m, v1<=n,
//    1<=v1}

         if (!(v1>1&&v2<m-1))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2<=2i1, i2<=i1+1, 0<=i2, i2<=m,
//    i2+v1+1<=m+n, i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m,
//    v2+1<=m, v1<=n, 1<=v1}

            deadlock();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+2<=m, v1<=n,
//    2<=v1}

         v2++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m+1, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n+1, 1<=m, v2+1<=m,
//    1<=n, v1<=n, 2<=v1}

         v1--;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n-1, 0<=i2, i2<=m, i2+v1+2<=m+n,
//    i2+v2<=m+1, i2<=n, i2+v1+2<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m,
//    1<=n, v1+1<=n, 1<=v1}

         i1++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+2<=m+n,
//    i2+v2<=m+1, i2<=n, i2+v1+2<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m,
//    1<=n, v1+1<=n, 1<=v1}

         i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, 1<=m, v1+2<=m+n, v2+1<=m,
//    1<=n, v1+2<=2n, v1+1<=n, v1+v2<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m, v1<=n,
//    1<=v1}

         if (!(v1>1&&v2==m-1))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i1, 0<=i2, i2<=m, i2+v1+1<=m+n,
//    i2+v2<=m, i2<=n, i2+v1+1<=2n, i2+v1+v2<=n, 1<=m, v2+1<=m, 1<=v1}

            deadlock();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, m==v2+1, 0<=i2, i2<=1, i2+v1+1<=m+n,
//    i2+m+v1<=n+1, i2<=n, i2+v1+1<=2n, 1<=m, v1<=n, 2<=v1}

         v2++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, m==v2, 0<=i2, i2<=1, i2+v1+1<=m+n,
//    i2+m+v1<=n+1, i2+v1+1<=2n, 1<=m, 1<=n, v1<=n, 2<=v1}

         v1--;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n-1, m==v2, 0<=i2, i2<=1, i2+m+v1<=n,
//    i2+v1+2<=m+n, i2+v1+2<=2n, 1<=m, 1<=n, v1+1<=n, 1<=v1}

         i1++;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, m==v2, 0<=i2, i2<=1, i2+m+v1<=n,
//    i2+v1+2<=m+n, i2+v1+2<=2n, 1<=m, 1<=n, v1+1<=n, 1<=v1}

         i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, m==v2, 1<=m, m+v1<=n,
//    v1+2<=m+n, 1<=n, v1+2<=2n, v1+1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  P() {0==-1}

            checking_error();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, m==v2, 1<=m, m+v1<=n,
//    v1+2<=m+n, 1<=n, v1+2<=2n, v1+1<=n, 1<=v1}

         if (!(v1>0&&v2>=m))

//  P() {0==-1}

            deadlock();

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, m==v2, 1<=m, m+v1<=n,
//    v1+2<=m+n, 1<=n, v1+2<=2n, v1+1<=n, 1<=v1}

         v2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==0, v2==0, 1<=m, m+v1<=n,
//    v1+2<=m+n, 1<=n, v1+2<=2n, v1+1<=n, 1<=v1}

         i2 += m;

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, i2==m, v2==0, 1<=i2, i2+v1<=n,
//    v1+2<=i2+n, 1<=n, v1+2<=2n, v1+1<=n, 1<=v1}

         if (!(i1<=n&&i2<=n))

//  P() {0==-1}

            checking_error();
      }

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v2<=m, i2+v1<=n,
//    i2+v1+v2<=n, 1<=m, v2+1<=m, 1<=v1}

   if (!(v1==1&&v2<m))

//  P(i1,i2,m,n,v1,v2) {i1+v1==n, 0<=i2, i2<=m, i2+v2<=m, i2+v1<=n,
//    i2+v1+v2<=n, 1<=m, v2+1<=m, 2<=v1}

      deadlock();

//  P(i1,i2,m,n,v1,v2) {i1==n-1, v1==1, i2<=i1, i2+v2<=i1, 0<=i2,
//    i2<=m, i2+v2<=m, 1<=m, v2+1<=m}

   v2++;

//  P(i1,i2,m,n,v1,v2) {i1==n-1, v1==1, 0<=i1, i2<=i1, i2+v2<=i1+1,
//    v2<=i1+1, 0<=i2, i2<=m, i2+v2<=m+1, 1<=m, v2<=m}

   v1--;

//  P(i1,i2,m,n,v1,v2) {i1==n-1, v1==0, 0<=i1, i2<=i1, i2+v2<=i1+1,
//    v2<=i1+1, 0<=i2, i2<=m, i2+v2<=m+1, 1<=m, v2<=m}

   i1++;

//  P(i1,i2,m,n,v1,v2) {i1==n, v1==0, 1<=i1, i2+1<=i1, i2+v2<=i1,
//    v2<=i1, 0<=i2, i2<=m, i2+v2<=m+1, 1<=m, v2<=m}

   i2 = 0;

//  P(i1,i2,m,n,v1,v2) {i1==n, i2==0, v1==0, 1<=i1, v2<=i1, 1<=m,
//    v2<=m}

   if (!(i1<=n&&i2<=n))

//  P() {0==-1}

      checking_error();
}

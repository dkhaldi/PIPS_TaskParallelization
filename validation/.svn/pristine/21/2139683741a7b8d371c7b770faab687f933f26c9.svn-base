
Execute initial code

foo=1
foo=2
foo=3
foo=4

Initial code

void flatten_code12(void)
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int i = foo_0;                                                       /*0011*/
// (0,3)

   for(i = 0; i <= 3; i += 1) {                                         /*0013*/
// (0,4)
      // BEGIN BLOCK
// (0,5)
      static int foo = 0;                                               /*0014*/
// (0,6)

      foo++;                                                            /*0016*/
// (0,7)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0018*/
      // END BLOCK
   }
   // END BLOCK
}

Code with cumulated effects

//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: foo stdout __IO_EFFECTS:LUNS[1] foo_0
//             <    is written>: foo __IO_EFFECTS:LUNS[1]
void flatten_code12(void)
{
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: foo stdout __IO_EFFECTS:LUNS[1] foo_0
//             <    is written>: foo __IO_EFFECTS:LUNS[1]
// (0,1)
   // BEGIN BLOCK
//             <    is read   >: foo_0
//             <    is written>: i
// (0,2)
   int i = foo_0;                                                       /*0011*/
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: foo stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: foo i __IO_EFFECTS:LUNS[1]
// (0,3)

   for(i = 0; i <= 3; i += 1) {                                         /*0013*/
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: foo stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: foo __IO_EFFECTS:LUNS[1]
// (0,4)
      // BEGIN BLOCK
// (0,5)
      static int foo = 0;                                               /*0014*/
//             <    is read   >: foo
//             <    is written>: foo
// (0,6)

      foo++;                                                            /*0016*/
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: foo stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
// (0,7)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0018*/
      // END BLOCK
   }
   // END BLOCK
}

Code with transformers


//  T(foo) {}

void flatten_code12(void)
{

//  T(foo) {}

// (0,1)
   // BEGIN BLOCK

//  T(i) {foo_0==i}

// (0,2)
   int i = foo_0;                                                       /*0011*/

//  T(foo,i) {0<=i, i<=3}

// (0,3)

   for(i = 0; i <= 3; i += 1) {                                         /*0013*/

//  T(foo) {foo==foo#init+1}

// (0,4)
      // BEGIN BLOCK

//  T() {}

// (0,5)
      static int foo = 0;                                               /*0014*/

//  T(foo) {foo==foo#init+1}

// (0,6)

      foo++;                                                            /*0016*/

//  T() {}

// (0,7)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0018*/
      // END BLOCK
   }
   // END BLOCK
}

Code with preconditions


//  P() {}

void flatten_code12(void)
{

//  P() {}

// (0,1)
   // BEGIN BLOCK

//  P() {}

// (0,2)
   int i = foo_0;                                                       /*0011*/

//  P(i) {foo_0==i}

// (0,3)

   for(i = 0; i <= 3; i += 1) {                                         /*0013*/

//  P(foo,i) {0<=i, i<=3}

// (0,4)
      // BEGIN BLOCK

//  P(foo,i) {0<=i, i<=3}

// (0,5)
      static int foo = 0;                                               /*0014*/

//  P(foo,i) {0<=i, i<=3}

// (0,6)

      foo++;                                                            /*0016*/

//  P(foo,i) {0<=i, i<=3}

// (0,7)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0018*/
      // END BLOCK
   }
   // END BLOCK
}

Code after code flattening

void flatten_code12(void)
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int i = foo_0;                                                       /*0011*/
   //PIPS generated variable
// (0,3)
   static int foo = 0;
// (0,4)

   foo++;
// (0,5)
   fprintf(stdout, "foo=%d\n", foo);
// (0,6)
   foo++;
// (0,7)
   fprintf(stdout, "foo=%d\n", foo);
// (0,8)
   foo++;
// (0,9)
   fprintf(stdout, "foo=%d\n", foo);
// (0,10)
   foo++;
// (0,11)
   fprintf(stdout, "foo=%d\n", foo);
   // END BLOCK
}

Unsplit and compile resulting code


Execute resulting code

foo=1
foo=2
foo=3
foo=4

original code
void P4A_accel_free(void **ptr)
{
   free(*ptr);
   *ptr = (void *) 0;
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void * P4A_copy_from_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   char *csrc = accel_address;
   for(i = 0; i <= element_size-1; i += 1)
      cdest[i] = csrc[i];
   return host_address;
}
void * P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = d1_offset*element_size+(char *) host_address;
   char *csrc = accel_address;
   for(i = 0; i <= d1_block_size*element_size-1; i += 1)
      cdest[i] = csrc[i];
   return host_address;
}
void * P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   char *csrc = (char *) accel_address;
   for(i = 0; i <= d1_block_size-1; i += 1)
      for(j = 0; j <= d2_block_size*element_size-1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
   return host_address;
}
void * P4A_copy_to_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = host_address;
   for(i = 0; i <= element_size-1; i += 1)
      cdest[i] = csrc[i];
   return accel_address;
}
void * P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = d1_offset*element_size+(char *) host_address;
   for(i = 0; i <= d1_block_size*element_size-1; i += 1)
      cdest[i] = csrc[i];
   return accel_address;
}
void * P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i <= d1_block_size-1; i += 1)
      for(j = 0; j <= d2_block_size*element_size-1; j += 1)

         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
   return accel_address;
}
void lonesome_cowboy()
{
   int i, j;
   i = 42;
   j = 314;
isolate:   j = i;
   i = 2718;
   printf("i =%d, j =%d", i, j);
}
int main()
{
   lonesome_cowboy();
   return 0;
}
isolated code
void lonesome_cowboy()
{
   int i, j;
   i = 42;
   j = 314;
   {
      //PIPS generated variable
      int *i0 = (int *) 0, *j0 = (int *) 0;
      P4A_accel_malloc((void **) &j0, sizeof(int)*1);
      P4A_accel_malloc((void **) &i0, sizeof(int)*1);
      P4A_copy_to_accel(sizeof(int), &i, i0);

isolate:      (*j0) = (*i0);
      P4A_copy_from_accel(sizeof(int), &j, j0);
      P4A_accel_free((void **) &j0);
      P4A_accel_free((void **) &i0);
   }
   i = 2718;
   printf("i =%d, j =%d", i, j);
}



TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int b, ok, x, y;

//  T(b,x,y) {b==0, x==0, y==0}

   b = x = y = 0;

//  T(ok) {b==0, ok==1, x==0, y==0}

   ok = 1;

//  T() {b==0, ok==1, x==0, y==0}

   if (!(ok==1))

//  T() {0==-1}

      checking_error();

//  T(b,ok,x,y) {b+x#init+y==b#init+x+y#init, b+y==x, ok==1,
//    b+x#init<=b#init+x, x#init<=x, y<=x, x<=y+1, 0<=y}

   while (rand_b())

//  T(b,ok,x,y) {b+x#init==x, b#init+x==x#init+1, ok==1,
//    x+y==x#init+y#init+1, x#init<=x, x<=x#init+1}

      if (rand_b()) {

//  T() {b==0}

         if (!(b==0))

//  T() {0==-1}

            deadlock();

//  T(b) {b==1, b#init==0}

         b = 1;

//  T(x) {b==1, x==x#init+1}

         x++;

//  T(ok) {b==1, 0<=ok, ok<=1}

         if (ok==1&&x>=y)

//  T(ok) {b==1, ok==1, ok#init==1, y<=x}

            ok = 1;
         else

//  T(ok) {b==1, ok==0}

            ok = 0;

//  T() {b==1, ok==1}

         if (!(ok==1))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {b==1}

         if (!(b==1))

//  T() {0==-1}

            deadlock();

//  T(b) {b==0, b#init==1}

         b = 0;

//  T(y) {b==0, y==y#init+1}

         y++;

//  T(ok) {b==0, 0<=ok, ok<=1}

         if (ok==1&&x>=y)

//  T(ok) {b==0, ok==1, ok#init==1, y<=x}

            ok = 1;
         else

//  T(ok) {b==0, ok==0}

            ok = 0;

//  T() {b==0, ok==1}

         if (!(ok==1))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int b, ok, x, y;

//  T(b,x,y) {b==0, x==0, y==0}

   b = x = y = 0;

//  T(ok) {b==0, ok==1, x==0, y==0}

   ok = 1;

//  T() {b==0, ok==1, x==0, y==0}

   if (!(ok==1))

//  T() {0==-1}

      checking_error();

//  T(b,ok,x,y) {b==0, b#init==0, ok==1, x==y, x#init==y#init, 0<=x,
//    y#init<=x}

   while (rand_b()) {

//  T() {b==0}

      if (!(b==0))

//  T() {0==-1}

         deadlock();

//  T(b) {b==1, b#init==0}

      b = 1;

//  T(x) {b==1, x==x#init+1}

      x++;

//  T(ok) {b==1, 0<=ok, ok<=1}

      if (ok==1&&x>=y)

//  T(ok) {b==1, ok==1, ok#init==1, y<=x}

         ok = 1;
      else

//  T(ok) {b==1, ok==0}

         ok = 0;

//  T() {b==1, ok==1}

      if (!(ok==1))

//  T() {0==-1}

         checking_error();

//  T() {b==1, ok==1}

      if (!(b==1))

//  T() {0==-1}

         deadlock();

//  T(b) {b==0, b#init==1, ok==1}

      b = 0;

//  T(y) {b==0, ok==1, y==y#init+1}

      y++;

//  T(ok) {b==0, ok#init==1, 0<=ok, ok<=1}

      if (ok==1&&x>=y)

//  T(ok) {b==0, ok==1, ok#init==1, y<=x}

         ok = 1;
      else

//  T(ok) {b==0, ok==0, ok#init==1, x+1<=y}

         ok = 0;

//  T() {b==0, ok==1}

      if (!(ok==1))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int b, ok, x, y;

//  P() {}

   b = x = y = 0;

//  P(b,x,y) {b==0, x==0, y==0}

   ok = 1;

//  P(b,ok,x,y) {b==0, ok==1, x==0, y==0}

   if (!(ok==1))

//  P() {0==-1}

      checking_error();

//  P(b,ok,x,y) {b==0, ok==1, x==0, y==0}

   while (rand_b())

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, 0<=y}

      if (rand_b()) {

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, 0<=y}

         if (!(b==0))

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

            deadlock();

//  P(b,ok,x,y) {b==0, ok==1, x==y, 0<=x}

         b = 1;

//  P(b,ok,x,y) {b==1, ok==1, x==y, 0<=x}

         x++;

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

         if (ok==1&&x>=y)

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

            ok = 1;
         else

//  P() {0==-1}

            ok = 0;

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

         if (!(ok==1))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, 0<=y}

         if (!(b==1))

//  P(b,ok,x,y) {b==0, ok==1, x==y, 0<=x}

            deadlock();

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

         b = 0;

//  P(b,ok,x,y) {b==0, ok==1, x==y+1, 1<=x}

         y++;

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

         if (ok==1&&x>=y)

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

            ok = 1;
         else

//  P() {0==-1}

            ok = 0;

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

         if (!(ok==1))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int b, ok, x, y;

//  P() {}

   b = x = y = 0;

//  P(b,x,y) {b==0, x==0, y==0}

   ok = 1;

//  P(b,ok,x,y) {b==0, ok==1, x==0, y==0}

   if (!(ok==1))

//  P() {0==-1}

      checking_error();

//  P(b,ok,x,y) {b==0, ok==1, x==0, y==0}

   while (rand_b()) {

//  P(b,ok,x,y) {b==0, ok==1, x==y, 0<=x}

      if (!(b==0))

//  P() {0==-1}

         deadlock();

//  P(b,ok,x,y) {b==0, ok==1, x==y, 0<=x}

      b = 1;

//  P(b,ok,x,y) {b==1, ok==1, x==y, 0<=x}

      x++;

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

      if (ok==1&&x>=y)

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

         ok = 1;
      else

//  P() {0==-1}

         ok = 0;

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

      if (!(ok==1))

//  P() {0==-1}

         checking_error();

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

      if (!(b==1))

//  P() {0==-1}

         deadlock();

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

      b = 0;

//  P(b,ok,x,y) {b==0, ok==1, x==y+1, 1<=x}

      y++;

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

      if (ok==1&&x>=y)

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

         ok = 1;
      else

//  P() {0==-1}

         ok = 0;

//  P(b,ok,x,y) {b==0, ok==1, x==y, 1<=x}

      if (!(ok==1))

//  P() {0==-1}

         checking_error();
   }
}

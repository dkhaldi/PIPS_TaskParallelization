tidy the code just in case of
I have to do this early
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
}
tiling
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement to check
   for(i = n; i <= 128*((n+127)/128)-1; i += 1)
l99997:
      for(j0 = 0; j0 <= n-1; j0 += 1)
         result[i][j0] = (40*src0[i][j0]+60*src1[i][j0])*(1/100<<4)>>4;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
l99998:
   for(i = 0; i <= n-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement
   for(i = n; i <= 128*((n+127)/128)-1; i += 1)
l99997:
      for(j0 = 0; j0 <= n-1; j0 += 1)
         result[i][j0] = (40*src0[i][j0]+60*src1[i][j0])*(1/100<<4)>>4;
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0;
   I_0 = (n+127)/128;
l99998:
   for(i = 0; i <= 128*I_0-1; i += 1)
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0;
   I_0 = (n+127)/128;
l99998:
   for(i = 0; i <= 128*I_0-1; i += 1) {
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement to check
      for(j = n; j <= 8*((n+7)/8)-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0;
   I_0 = (n+127)/128;
l99998:
   for(i = 0; i <= 128*I_0-1; i += 1) {
l99999:
      for(j = 0; j <= n-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
#pragma pips inserted statement
      for(j = n; j <= 8*((n+7)/8)-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   unsigned int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
l99998:
   for(i = 0; i <= 128*I_0-1; i += 1) {
l99999:
      for(j = 0; j <= 8*I_1-1; j += 1)
         result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;

   }

}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for private(i,j)
l99998:
   for(I_2 = 0; I_2 <= (128*I_0-1)/128; I_2 += 1)
#pragma omp parallel for private(j)
l99999:
      for(I_3 = 0; I_3 <= (8*I_1-1)/8; I_3 += 1)
#pragma omp parallel for 
         for(i = I_2*128; i <= MIN(128*I_0-1, I_2*128+128-1); i += 1)
#pragma omp parallel for 
            for(j = I_3*8; j <= MIN(8*I_1-1, I_3*8+8-1); j += 1)
               result[i][j] = (40*src0[i][j]+60*src1[i][j])*(1/100<<4)>>4;
}
group constants and isolate
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for private(i,j)
l99998:
   for(I_2 = 0; I_2 <= (128*I_0-1)/128; I_2 += 1)
#pragma omp parallel for private(j)
l99999:
      for(I_3 = 0; I_3 <= (8*I_1-1)/8; I_3 += 1) {
         //PIPS generated variable
         int caillou[caillou[2]+1];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;

#pragma omp parallel for 
l99995:
         for(i = I_2*128; i <= MIN(128*I_0-1, I_2*128+128-1); i += 1)
#pragma omp parallel for 
l99996:
            for(j = I_3*8; j <= MIN(8*I_1-1, I_3*8+8-1); j += 1)
               result[i][j] = (caillou[3]*src0[i][j]+caillou[4]*src1[i][j])*(caillou[0]/caillou[1]<<caillou[2])>>caillou[2];
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for private(i,j)
l99998:
   for(I_2 = 0; I_2 <= (128*I_0-1)/128; I_2 += 1)
#pragma omp parallel for private(j)
l99999:
      for(I_3 = 0; I_3 <= (8*I_1-1)/8; I_3 += 1) {
         //PIPS generated variable
         int caillou[caillou[2]+1];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;

         {
            //PIPS generated variable
            short (*src00)[128][8] = (short (*)[128][8]) 0, (*src10)[128][8] = (short (*)[128][8]) 0;
            //PIPS generated variable
            int (*caillou0)[4-MAX(0, (-16*I_1+16*I_3+22)/7)+1] = (int (*)[4-MAX(0, (-16*I_1+16*I_3+22)/7)+1]) 0;
            //PIPS generated variable
            short (*result0)[128][8] = (short (*)[128][8]) 0;
            if (4-MAX(0, (-16*I_1+16*I_3+22)/7)>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*1024);
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*(4-MAX(0, (-16*I_1+16*I_3+22)/7)+1));
               P4A_accel_malloc((void **) &src10, sizeof(short)*1024);
               P4A_accel_malloc((void **) &src00, sizeof(short)*1024);
               P4A_copy_to_accel_1d(sizeof(int), caillou[2]+1, 4-MAX(0, (-16*I_1+16*I_3+22)/7)+1, MAX(0, (-16*I_1+16*I_3+22)/7), &caillou[0], *caillou0);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2, 8*I_3, &src1[0][0], *src10);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2, 8*I_3, &src0[0][0], *src00);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2, 8*I_3, &result[0][0], *result0);

#pragma omp parallel for 
l99995:
               for(i = I_2*128; i <= MIN(128*I_0-1, I_2*128+128-1); i += 1)
#pragma omp parallel for 
l99996:
                  for(j = I_3*8; j <= MIN(8*I_1-1, I_3*8+8-1); j += 1)
                     (*result0)[i-128*I_2][j-8*I_3] = ((*caillou0)[3-MAX(0, (-16*I_1+16*I_3+22)/7)]*(*src00)[i-128*I_2][j-8*I_3]+(*caillou0)[4-MAX(0, (-16*I_1+16*I_3+22)/7)]*(*src10)[i-128*I_2][j-8*I_3])*((*caillou0)[0-MAX(0, (-16*I_1+16*I_3+22)/7)]/(*caillou0)[1-MAX(0, (-16*I_1+16*I_3+22)/7)]<<(*caillou0)[2-MAX(0, (-16*I_1+16*I_3+22)/7)])>>(*caillou0)[2-MAX(0, (-16*I_1+16*I_3+22)/7)];
               P4A_copy_from_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2, 8*I_3, &result[0][0], *result0);
               P4A_accel_free(result0);
               P4A_accel_free(caillou0);
               P4A_accel_free(src10);
               P4A_accel_free(src00);
            }
         }
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for private(i,j)
l99998:
   for(I_2 = 1; I_2 <= (128*I_0-1)/128+1; I_2 += 1)
#pragma omp parallel for private(j)
l99999:
      for(I_3 = 1; I_3 <= (8*I_1-1)/8+1; I_3 += 1) {
         //PIPS generated variable
         int caillou[caillou[2]+1];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;

         {
            //PIPS generated variable
            short (*src00)[128][8] = (short (*)[128][8]) 0, (*src10)[128][8] = (short (*)[128][8]) 0;
            //PIPS generated variable
            int (*caillou0)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1] = (int (*)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1]) 0;
            //PIPS generated variable
            short (*result0)[128][8] = (short (*)[128][8]) 0;
            if (4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)>0) {
               P4A_accel_malloc((void **) &result0, sizeof(short)*1024);
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*(4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1));
               P4A_accel_malloc((void **) &src10, sizeof(short)*1024);
               P4A_accel_malloc((void **) &src00, sizeof(short)*1024);
               P4A_copy_to_accel_1d(sizeof(int), caillou[2]+1, 4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1, MAX(0, (-16*I_1+16*(I_3-1)+22)/7), &caillou[0], *caillou0);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*(I_2-1), 8*(I_3-1), &src1[0][0], *src10);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*(I_2-1), 8*(I_3-1), &src0[0][0], *src00);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*(I_2-1), 8*(I_3-1), &result[0][0], *result0);

#pragma omp parallel for 
l99995:
               for(i = 1; i <= MIN(128*I_0-1, (I_2-1)*128+128-1)-(I_2-1)*128+1; i += 1)
#pragma omp parallel for 
l99996:
                  for(j = 1; j <= MIN(8*I_1-1, (I_3-1)*8+8-1)-(I_3-1)*8+1; j += 1)
                     (*result0)[128*(I_2-1)+i-1-128*(I_2-1)][8*(I_3-1)+j-1-8*(I_3-1)] = ((*caillou0)[3-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)]*(*src00)[128*(I_2-1)+i-1-128*(I_2-1)][8*(I_3-1)+j-1-8*(I_3-1)]+(*caillou0)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)]*(*src10)[128*(I_2-1)+i-1-128*(I_2-1)][8*(I_3-1)+j-1-8*(I_3-1)])*((*caillou0)[0-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)]/(*caillou0)[1-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)]<<(*caillou0)[2-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)])>>(*caillou0)[2-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)];
               P4A_copy_from_accel_2d(sizeof(short), n, n, 128, 8, 128*(I_2-1), 8*(I_3-1), &result[0][0], *result0);
               P4A_accel_free(result0);
               P4A_accel_free(caillou0);
               P4A_accel_free(src10);
               P4A_accel_free(src00);
            }
         }
      }
}
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for private(i,j)
l99998:
   for(I_2 = 1; I_2 <= (128*I_0-1)/128+1; I_2 += 1)
#pragma omp parallel for private(j)
l99999:
      for(I_3 = 1; I_3 <= (8*I_1-1)/8+1; I_3 += 1) {
         //PIPS generated variable
         int caillou[caillou[2]+1];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;

         {
            //PIPS generated variable
            short (*src00)[128][8] = (short (*)[128][8]) 0, (*src10)[128][8] = (short (*)[128][8]) 0;
            //PIPS generated variable
            int (*caillou0)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1] = (int (*)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1]) 0;
            //PIPS generated variable
            short (*result0)[128][8] = (short (*)[128][8]) 0;
            if (-MAX(0, (16*(I_3-I_1)+6)/7)+4>0) {
               P4A_accel_malloc((void **) &result0, 1024*sizeof(short));
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*((-MAX(0, (16*(I_3-I_1)+6)/7))+5));
               P4A_accel_malloc((void **) &src10, 1024*sizeof(short));
               P4A_accel_malloc((void **) &src00, 1024*sizeof(short));
               P4A_copy_to_accel_1d(sizeof(int), caillou[2]+1, -MAX(0, (16*(I_3-I_1)+6)/7)+5, MAX(0, (16*(I_3-I_1)+6)/7), &caillou[0], *caillou0);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &src1[0][0], *src10);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &src0[0][0], *src00);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &result[0][0], *result0);

#pragma omp parallel for 
l99995:
               for(i = 1; i <= MIN(128*I_0-1, 128*I_2-1)-128*I_2+129; i += 1)
#pragma omp parallel for 
l99996:
                  for(j = 1; j <= 8*(I_3-I_3)+8; j += 1)
                     (*result0)[i-1][j-1] = ((*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)+3]*(*src00)[i-1][j-1]+(*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)+4]*(*src10)[i-1][j-1])*((*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)]/(*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)+1]<<(*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)+2])>>(*caillou0)[-MAX(0, (16*(I_3-I_1)+6)/7)+2];
               P4A_copy_from_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &result[0][0], *result0);
               P4A_accel_free(result0);
               P4A_accel_free(caillou0);
               P4A_accel_free(src10);
               P4A_accel_free(src00);
            }
         }
      }
}
outlining to launcher
void alphablending(int n, short src0[n][n], short src1[n][n], short result[n][n])
{
   int i, j;
   //PIPS generated variable
   unsigned int j0;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   I_1 = (n+7)/8;
   I_0 = (n+127)/128;
#pragma omp parallel for 
l99998:
   for(I_2 = 1; I_2 <= (128*I_0-1)/128+1; I_2 += 1)
#pragma omp parallel for 
l99999:
      for(I_3 = 1; I_3 <= (8*I_1-1)/8+1; I_3 += 1) {
         //PIPS generated variable
         int caillou[caillou[2]+1];
         caillou[0] = 1;
         caillou[1] = 100;
         caillou[2] = 4;
         caillou[3] = 40;
         caillou[4] = 60;

         {
            //PIPS generated variable
            short (*src00)[128][8] = (short (*)[128][8]) 0, (*src10)[128][8] = (short (*)[128][8]) 0;
            //PIPS generated variable
            int (*caillou0)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1] = (int (*)[4-MAX(0, (-16*I_1+16*(I_3-1)+22)/7)+1]) 0;
            //PIPS generated variable
            short (*result0)[128][8] = (short (*)[128][8]) 0;
            if (-MAX(0, (16*(I_3-I_1)+6)/7)+4>0) {
               P4A_accel_malloc((void **) &result0, 1024*sizeof(short));
               P4A_accel_malloc((void **) &caillou0, sizeof(int)*((-MAX(0, (16*(I_3-I_1)+6)/7))+5));
               P4A_accel_malloc((void **) &src10, 1024*sizeof(short));
               P4A_accel_malloc((void **) &src00, 1024*sizeof(short));
               P4A_copy_to_accel_1d(sizeof(int), caillou[2]+1, -MAX(0, (16*(I_3-I_1)+6)/7)+5, MAX(0, (16*(I_3-I_1)+6)/7), &caillou[0], *caillou0);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &src1[0][0], *src10);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &src0[0][0], *src00);
               P4A_copy_to_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &result[0][0], *result0);

l99995:               launcher_0(I_1, I_3, I_0, I_2, 8*(I_3-I_3)+8+1, *caillou0, *result0, *src00, *src10);
               P4A_copy_from_accel_2d(sizeof(short), n, n, 128, 8, 128*I_2-128, 8*I_3-8, &result[0][0], *result0);
               P4A_accel_free(result0);
               P4A_accel_free(caillou0);
               P4A_accel_free(src10);
               P4A_accel_free(src00);
            }
         }
      }
}

//  <caillou0[PHI1]-R-MAY-{PHI1<=4, 7PHI1+16I_3<=16I_1+28, I_4==9,
//    I_2<=I_0, I_3<=I_1+1}>
//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>

void launcher_0(int I_1, int I_3, int I_0, int I_2, int I_4, int caillou0[4-MAX(0, (-(16*I_1)+16*(I_3-1)+22)/7)+1], short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   int i, j;

//  <caillou0[PHI1]-R-MAY-{PHI1<=4, 7PHI1+16I_3<=16I_1+28, I_4==9,
//    I_2<=I_0, I_3<=I_1+1}>
//  <result0[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>
//  <src00[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>
//  <src10[PHI1][PHI2]-R-MAY-{0<=PHI1, PHI1<=127,
//    PHI1+128I_2<=128I_0+127, 0<=PHI2, PHI2<=7, I_4==9, I_3<=I_1+1}>

l99995:
   for(i = 1; i <= MIN(128*I_0-1, 128*I_2-1)-128*I_2+129; i += 1)

//  <caillou0[PHI1]-R-MAY-{PHI1<=4, 7PHI1+16I_3<=16I_1+28, I_4==9,
//    1<=i, i<=128, i+128I_2<=128I_0+128, I_3<=I_1+1}>
//  <result0[PHI1][PHI2]-W-EXACT-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_4==9,
//    1<=i, i<=128, i+128I_2<=128I_0+128, I_3<=I_1+1}>
//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_4==9,
//    1<=i, i<=128, i+128I_2<=128I_0+128, I_3<=I_1+1}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i-1, 0<=PHI2, PHI2<=7, I_4==9,
//    1<=i, i<=128, i+128I_2<=128I_0+128, I_3<=I_1+1}>

l99996:
      for(j = 1; j <= I_4-1; j += 1)

//  <caillou0[PHI1]-R-MAY-{PHI1<=4, 7PHI1+16I_3<=16I_1+28, I_4==9,
//    1<=i, i<=128, i+128I_2<=128I_0+128, 1<=j, j<=8, I_3<=I_1+1}>
//  <result0[PHI1][PHI2]-W-EXACT-{PHI1==i-1, PHI2==j-1, I_4==9, 1<=i,
//    i<=128, i+128I_2<=128I_0+128, 1<=j, j<=8, I_3<=I_1+1}>
//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i-1, PHI2==j-1, I_4==9, 1<=i,
//    i<=128, i+128I_2<=128I_0+128, 1<=j, j<=8, I_3<=I_1+1}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i-1, PHI2==j-1, I_4==9, 1<=i,
//    i<=128, i+128I_2<=128I_0+128, 1<=j, j<=8, I_3<=I_1+1}>

         result0[i-1][j-1] = (caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+3]*src00[i-1][j-1]+caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+4]*src10[i-1][j-1])*(caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)]/caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+1]<<caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2])>>caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2];
}
outlining to microcode
label: l99996
void launcher_0(int I_1, int I_3, int I_0, int I_2, int I_4, int caillou0[4-MAX(0, (-(16*I_1)+16*(I_3-1)+22)/7)+1], short result0[128][8], short src00[128][8], short src10[128][8])
{
   //PIPS generated variable
   int i, j;
l99995:
   for(i = 1; i <= MIN(128*I_0-1, 128*I_2-1)-128*I_2+129; i += 1)
l99996:      launcher_0_microcode(I_1, I_3, I_4, caillou0, *&result0[i-1], *&src00[i-1], *&src10[i-1]);
}
void launcher_0_microcode(int I_1, int I_3, int I_4, int caillou0[4-MAX(0, (-(16*I_1)+16*(I_3-1)+22)/7)+1], short result00[8], short src000[8], short src100[8])
{
   //PIPS generated variable
   int j;
l99996:
   for(j = 1; j <= I_4-1; j += 1)
      result00[j-1] = (caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+3]*src000[j-1]+caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+4]*src100[j-1])*(caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)]/caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+1]<<caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2])>>caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2];
}
normalize microcode launcher_0_microcode
void launcher_0_microcode(int I_1, int I_3, int I_4, int caillou0[4-MAX(0, (-(16*I_1)+16*(I_3-1)+22)/7)+1], short result00[8], short src000[8], short src100[8])
{
   //PIPS generated variable
   int j;
l99996:
   for(j = 0; j <= I_4-2; j += 1)
      result00[j+1-1] = (caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+3]*src000[j+1-1]+caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+4]*src100[j+1-1])*(caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)]/caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+1]<<caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2])>>caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2];
}
void launcher_0_microcode(int I_1, int I_3, int I_4, int caillou0[4-MAX(0, (-(16*I_1)+16*(I_3-1)+22)/7)+1], short result00[8], short src000[8], short src100[8])
{
   //PIPS generated variable
   int j;
l99996:
   for(j = 0; j <= I_4-2; j += 1)
      result00[j+1-1] = (caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+3]*src000[j+1-1]+caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+4]*src100[j+1-1])*(caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)]/caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+1]<<caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2])>>caillou0[-MAX(0, (16*(I_3-I_1)+6)/7)+2];
}
void launcher_0_microcode(int I_1, int I_3, int I_4, int *caillou0, short *result00, short *src000, short *src100)
{
   //PIPS generated variable
   int j;
l99996:
   for(j = 0; j <= I_4-2; j += 1)
      *(result00+j+1-1) = (*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7))+3)**(src000+j+1-1)+*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7))+4)**(src100+j+1-1))*(*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7)))/(*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7))+1))<<*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7))+2))>>*(caillou0+(-MAX(0, (16*(I_3-I_1)+6)/7))+2);
}
I_4 belongs to a loop bound
caillou0 seems a mask
result00 seems an image
src000 seems an image
src100 seems an image
void launcher_0_microcode(short *FIFO3, short *FIFO2, short *FIFO1, int *FIFO0, int I_4, int I_3, int I_1)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *im1, *src000, *im2, *src100, *im3;
   //PIPS generated variable
   int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int N0 = I_4-1;
   im3 = FIFO3;
   im2 = FIFO2;
   im1 = FIFO1;
   ma0 = FIFO0;
l99996:
   for(re2 = 0; re2 <= N0; re2 += 1)
      *(im1+re2+1-1) = (*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7))+3)**(im2+re2+1-1)+*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7))+4)**(im3+re2+1-1))*(*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7)))/(*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7))+1))<<*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7))+2))>>*(ma0+(-MAX(0, (16*(I_3-I_1)+6)/7))+2);
}
void launcher_0_microcode(short *FIFO3, short *FIFO2, short *FIFO1, int *FIFO0, int I_4, int I_3, int I_1)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *im1, *src000, *im2, *src100, *im3;
   //PIPS generated variable
   int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int N0 = I_4-1, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_12, I_13;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   //PIPS generated variable
   int *P_2;
   //PIPS generated variable
   int I_22, I_23;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31;
   //PIPS generated variable
   int *P_4;
   //PIPS generated variable
   int I_32, I_33, I_34, I_35, I_36, I_37, I_38;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   int I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55;
   //PIPS generated variable
   int *P_7;
   //PIPS generated variable
   int I_56, I_57;
   //PIPS generated variable
   short *P_8;
   im3 = FIFO3;
   im2 = FIFO2;
   im1 = FIFO1;
   ma0 = FIFO0;
l99996:
   for(re2 = 0; re2 <= N0; re2 += 1) {
      I_5 = I_3-I_1;
      I_6 = 16*I_5;
      I_7 = I_6+6;
      I_8 = I_7/7;
      I_9 = MAX(0, I_8);
      I_10 = -I_9;
      I_11 = I_10+3;
      P_0 = ma0+I_11;
      I_12 = re2+1;
      I_13 = I_12-1;
      P_1 = im2+I_13;
      I_14 = *P_0**P_1;
      I_15 = I_3-I_1;
      I_16 = 16*I_15;
      I_17 = I_16+6;
      I_18 = I_17/7;
      I_19 = MAX(0, I_18);
      I_20 = -I_19;
      I_21 = I_20+4;
      P_2 = ma0+I_21;
      I_22 = re2+1;
      I_23 = I_22-1;
      P_3 = im3+I_23;
      I_24 = *P_2**P_3;
      I_25 = I_14+I_24;
      I_26 = I_3-I_1;
      I_27 = 16*I_26;
      I_28 = I_27+6;
      I_29 = I_28/7;
      I_30 = MAX(0, I_29);
      I_31 = -I_30;
      P_4 = ma0+I_31;
      I_32 = I_3-I_1;
      I_33 = 16*I_32;
      I_34 = I_33+6;
      I_35 = I_34/7;
      I_36 = MAX(0, I_35);
      I_37 = -I_36;
      I_38 = I_37+1;
      P_5 = ma0+I_38;
      I_39 = *P_4/(*P_5);
      I_40 = I_3-I_1;
      I_41 = 16*I_40;
      I_42 = I_41+6;
      I_43 = I_42/7;
      I_44 = MAX(0, I_43);
      I_45 = -I_44;
      I_46 = I_45+2;
      P_6 = ma0+I_46;
      I_47 = I_39<<*P_6;
      I_48 = I_25*I_47;
      I_49 = I_3-I_1;
      I_50 = 16*I_49;
      I_51 = I_50+6;
      I_52 = I_51/7;
      I_53 = MAX(0, I_52);
      I_54 = -I_53;
      I_55 = I_54+2;
      P_7 = ma0+I_55;
      I_56 = re2+1;
      I_57 = I_56-1;
      P_8 = im1+I_57;
      *P_8 = I_48>>*P_7;
   }
}
void launcher_0_microcode(short *FIFO3, short *FIFO2, short *FIFO1, int *FIFO0, int I_4, int I_3, int I_1)
{
   //PIPS generated variable
   int j;
   //PIPS generated variable
   char * re0, re1;
   //PIPS generated variable
   int *caillou0, *ma0;
   //PIPS generated variable
   short *result00, *im1, *src000, *im2, *src100, *im3;
   //PIPS generated variable
   int re2, re3;
   //PIPS generated variable
   int *im4;
   //PIPS generated variable
   short *im5, *im6, *im7;
   //PIPS generated variable
   int N0 = I_4-1, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_12, I_13;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   //PIPS generated variable
   int *P_2;
   //PIPS generated variable
   int I_22, I_23;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31;
   //PIPS generated variable
   int *P_4;
   //PIPS generated variable
   int I_32, I_33, I_34, I_35, I_36, I_37, I_38;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   int I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55;
   //PIPS generated variable
   int *P_7;
   //PIPS generated variable
   int I_56, I_57;
   //PIPS generated variable
   short *P_8;
   im3 = FIFO3;
   im2 = FIFO2;
   im1 = FIFO1;
   ma0 = FIFO0;
l99996:
   for(re2 = 0; re2 <= N0; re2 += 1) {
      I_5 = I_3;
      I_5 = I_5-I_1;
      I_6 = 16;
      I_6 = I_6*I_5;
      I_7 = I_6;
      I_7 = I_7+6;
      I_8 = I_7;
      I_8 = I_8/7;
      I_9 = 0;
      I_9 = MAX(I_9, I_8);
      I_10 = I_9;
      I_10 = -I_10;
      I_11 = I_10;
      I_11 = I_11+3;
      P_0 = ma0;
      P_0 = P_0+I_11;
      I_12 = re2;
      I_12 = I_12+1;
      I_13 = I_12;
      I_13 = I_13-1;
      P_1 = im2;
      P_1 = P_1+I_13;
      I_14 = *P_0;
      I_14 = I_14**P_1;
      I_15 = I_3;
      I_15 = I_15-I_1;
      I_16 = 16;
      I_16 = I_16*I_15;
      I_17 = I_16;
      I_17 = I_17+6;
      I_18 = I_17;
      I_18 = I_18/7;
      I_19 = 0;
      I_19 = MAX(I_19, I_18);
      I_20 = I_19;
      I_20 = -I_20;
      I_21 = I_20;
      I_21 = I_21+4;
      P_2 = ma0;
      P_2 = P_2+I_21;
      I_22 = re2;
      I_22 = I_22+1;
      I_23 = I_22;
      I_23 = I_23-1;
      P_3 = im3;
      P_3 = P_3+I_23;
      I_24 = *P_2;
      I_24 = I_24**P_3;
      I_25 = I_14;
      I_25 = I_25+I_24;
      I_26 = I_3;
      I_26 = I_26-I_1;
      I_27 = 16;
      I_27 = I_27*I_26;
      I_28 = I_27;
      I_28 = I_28+6;
      I_29 = I_28;
      I_29 = I_29/7;
      I_30 = 0;
      I_30 = MAX(I_30, I_29);
      I_31 = I_30;
      I_31 = -I_31;
      P_4 = ma0;
      P_4 = P_4+I_31;
      I_32 = I_3;
      I_32 = I_32-I_1;
      I_33 = 16;
      I_33 = I_33*I_32;
      I_34 = I_33;
      I_34 = I_34+6;
      I_35 = I_34;
      I_35 = I_35/7;
      I_36 = 0;
      I_36 = MAX(I_36, I_35);
      I_37 = I_36;
      I_37 = -I_37;
      I_38 = I_37;
      I_38 = I_38+1;
      P_5 = ma0;
      P_5 = P_5+I_38;
      I_39 = *P_4;
      I_39 = I_39/(*P_5);
      I_40 = I_3;
      I_40 = I_40-I_1;
      I_41 = 16;
      I_41 = I_41*I_40;
      I_42 = I_41;
      I_42 = I_42+6;
      I_43 = I_42;
      I_43 = I_43/7;
      I_44 = 0;
      I_44 = MAX(I_44, I_43);
      I_45 = I_44;
      I_45 = -I_45;
      I_46 = I_45;
      I_46 = I_46+2;
      P_6 = ma0;
      P_6 = P_6+I_46;
      I_47 = I_39;
      I_47 = I_47<<*P_6;
      I_48 = I_25;
      I_48 = I_48*I_47;
      I_49 = I_3;
      I_49 = I_49-I_1;
      I_50 = 16;
      I_50 = I_50*I_49;
      I_51 = I_50;
      I_51 = I_51+6;
      I_52 = I_51;
      I_52 = I_52/7;
      I_53 = 0;
      I_53 = MAX(I_53, I_52);
      I_54 = I_53;
      I_54 = -I_54;
      I_55 = I_54;
      I_55 = I_55+2;
      P_7 = ma0;
      P_7 = P_7+I_55;
      I_56 = re2;
      I_56 = I_56+1;
      I_57 = I_56;
      I_57 = I_57-1;
      P_8 = im1;
      P_8 = P_8+I_57;
      *P_8 = I_48;
      *P_8 = *P_8>>*P_7;
   }
}
void launcher_0_microcode(short *FIFO3, short *FIFO2, short *FIFO1, int *FIFO0, int I_4, int I_3, int I_1)
{
   //PIPS generated variable
   int *ma0;
   //PIPS generated variable
   short *im1, *im2, *im3;
   //PIPS generated variable
   int re2;
   //PIPS generated variable
   int N0 = I_4-1, I_5, I_6, I_7, I_8, I_9, I_10, I_11;
   //PIPS generated variable
   int *P_0;
   //PIPS generated variable
   int I_12, I_13;
   //PIPS generated variable
   short *P_1;
   //PIPS generated variable
   int I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   //PIPS generated variable
   int *P_2;
   //PIPS generated variable
   int I_22, I_23;
   //PIPS generated variable
   short *P_3;
   //PIPS generated variable
   int I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31;
   //PIPS generated variable
   int *P_4;
   //PIPS generated variable
   int I_32, I_33, I_34, I_35, I_36, I_37, I_38;
   //PIPS generated variable
   int *P_5;
   //PIPS generated variable
   int I_39, I_40, I_41, I_42, I_43, I_44, I_45, I_46;
   //PIPS generated variable
   int *P_6;
   //PIPS generated variable
   int I_47, I_48, I_49, I_50, I_51, I_52, I_53, I_54, I_55;
   //PIPS generated variable
   int *P_7;
   //PIPS generated variable
   int I_56, I_57;
   //PIPS generated variable
   short *P_8;
   im3 = FIFO3;
   im2 = FIFO2;
   im1 = FIFO1;
   ma0 = FIFO0;
l99996:
   for(re2 = 0; re2 <= N0; re2 += 1) {
      seti(I_5, I_3);
      subi(I_5, I_1);
      seti(I_6, 16);
      muli(I_6, I_5);
      seti(I_7, I_6);
      addi(I_7, I_7, 6);
      seti(I_8, I_7);
      seti(I_8, I_8/7);
      seti(I_9, 0);
      seti(I_9, MAX(I_9, I_8));
      seti(I_10, I_9);
      seti(I_10, -I_10);
      seti(I_11, I_10);
      addi(I_11, I_11, 3);
      P_0 = ma0;
      P_0 = P_0+I_11;
      seti(I_12, re2);
      addi(I_12, I_12, 1);
      seti(I_13, I_12);
      subi(I_13, 1);
      P_1 = im2;
      P_1 = P_1+I_13;
      seti(I_14, *P_0);
      muli(I_14, *P_1);
      seti(I_15, I_3);
      subi(I_15, I_1);
      seti(I_16, 16);
      muli(I_16, I_15);
      seti(I_17, I_16);
      addi(I_17, I_17, 6);
      seti(I_18, I_17);
      seti(I_18, I_18/7);
      seti(I_19, 0);
      seti(I_19, MAX(I_19, I_18));
      seti(I_20, I_19);
      seti(I_20, -I_20);
      seti(I_21, I_20);
      addi(I_21, I_21, 4);
      P_2 = ma0;
      P_2 = P_2+I_21;
      seti(I_22, re2);
      addi(I_22, I_22, 1);
      seti(I_23, I_22);
      subi(I_23, 1);
      P_3 = im3;
      P_3 = P_3+I_23;
      seti(I_24, *P_2);
      muli(I_24, *P_3);
      seti(I_25, I_14);
      addi(I_25, I_25, I_24);
      seti(I_26, I_3);
      subi(I_26, I_1);
      seti(I_27, 16);
      muli(I_27, I_26);
      seti(I_28, I_27);
      addi(I_28, I_28, 6);
      seti(I_29, I_28);
      seti(I_29, I_29/7);
      seti(I_30, 0);
      seti(I_30, MAX(I_30, I_29));
      seti(I_31, I_30);
      seti(I_31, -I_31);
      P_4 = ma0;
      P_4 = P_4+I_31;
      seti(I_32, I_3);
      subi(I_32, I_1);
      seti(I_33, 16);
      muli(I_33, I_32);
      seti(I_34, I_33);
      addi(I_34, I_34, 6);
      seti(I_35, I_34);
      seti(I_35, I_35/7);
      seti(I_36, 0);
      seti(I_36, MAX(I_36, I_35));
      seti(I_37, I_36);
      seti(I_37, -I_37);
      seti(I_38, I_37);
      addi(I_38, I_38, 1);
      P_5 = ma0;
      P_5 = P_5+I_38;
      seti(I_39, *P_4);
      seti(I_39, I_39/(*P_5));
      seti(I_40, I_3);
      subi(I_40, I_1);
      seti(I_41, 16);
      muli(I_41, I_40);
      seti(I_42, I_41);
      addi(I_42, I_42, 6);
      seti(I_43, I_42);
      seti(I_43, I_43/7);
      seti(I_44, 0);
      seti(I_44, MAX(I_44, I_43));
      seti(I_45, I_44);
      seti(I_45, -I_45);
      seti(I_46, I_45);
      addi(I_46, I_46, 2);
      P_6 = ma0;
      P_6 = P_6+I_46;
      seti(I_47, I_39);
      seti(I_47, I_47<<*P_6);
      seti(I_48, I_25);
      muli(I_48, I_47);
      seti(I_49, I_3);
      subi(I_49, I_1);
      seti(I_50, 16);
      muli(I_50, I_49);
      seti(I_51, I_50);
      addi(I_51, I_51, 6);
      seti(I_52, I_51);
      seti(I_52, I_52/7);
      seti(I_53, 0);
      seti(I_53, MAX(I_53, I_52));
      seti(I_54, I_53);
      seti(I_54, -I_54);
      seti(I_55, I_54);
      addi(I_55, I_55, 2);
      P_7 = ma0;
      P_7 = P_7+I_55;
      seti(I_56, re2);
      addi(I_56, I_56, 1);
      seti(I_57, I_56);
      subi(I_57, 1);
      P_8 = im1;
      P_8 = P_8+I_57;
      seti(*P_8, I_48);
      seti(*P_8, *P_8>>*P_7);
   }
}

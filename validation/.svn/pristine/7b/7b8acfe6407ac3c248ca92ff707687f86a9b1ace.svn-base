!!
!! file for aclear.f
!!
C
C     TWO-ELECTRON INTEGRAL DERIVATIVE (QUANTUM CHEMISTRY) BENCHMARK.
C     H. B. SCHLEGEL, WAYNE STATE UNIVERSITY.
C
      SUBROUTINE ACLEAR(N,A)
      REAL*8 A(I_PIPS_ACLEAR_A)
C (0,1)
      INTEGER*8 I_PIPS_ACLEAR_A
      COMMON /PIPS_ACLEAR_A/ I_PIPS_ACLEAR_A
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 10
      DO I = 1, N
C (0,3)
10       A(I) = 0.D0
      ENDDO
C (0,4)
      RETURN
C     END BLOCK
      END
!!
!! file for d2esp.f
!!
*DECK D2ESP
      SUBROUTINE D2ESP(CORE)
      IMPLICIT REAL*8(A-H,O-Z)
C
C     CONTROL ROUTINE FOR THE 'IN-CORE' CALCULATION OF THE
C     TWO-ELECTRON CONTRIBUTIONS TO THE HARTREE-FOCK FIRST
C     DERIVATIVES.
C
C     ******************************************************************
C     IOP(  )  ... OPTIONS:
C     ******************************************************************
C
C     IOP(18) ... PROGRAM ACCURACY OPTION (LIKE IN L311).
C     0 ... COMPUTE DERIVATIVE CONTRIBUTIONS WITH 10**(-8)
C           ACCURACY.
C     1 ... 'TEST' OPTION ... DO AS ACCURATELY AS POSSIBLE.
C     2 ... USE THE ORIGINAL 'BERNY' VALUES.
C
C     IOP(27) ... FILE INITIALIZATION CONTROL.
C     1 ... READ IN PREVIOUS DERIVATIVE CONTRIBUTIONS
C           FROM FILE IRWFX BEFORE COMPUTING ANYTHING.
C
C     IOP(28) ... SKIP OPTION TO DEFER INTEGRAL EVALUATION
C                 TO L703.
C     0 ... COMPUTE AS NORMAL.
C     1 ... DO ALL GRADIENT INTEGRALS IN L703.
C
C     IOP(34) ... DUMP OPTION.
C     0 ... NO DUMPING.
C     1 ... USUAL SYSTEM STUFF.
C     2 ... DUMP DERIVATIVE CONTRIBUTIONS FROM WITHIN SHELL LOOPS.
C
C     THIS ROUTINE SERVES TWO MAJOR PURPOSES:
C     1.  PERFORM INITIALIZATION CHORES, LIKE RECOVERING PERTINENT
C         COMMON BLOCKS FROM THE RW-FILES.
C     2.  ALLOCATE MEMORY.  CERTAIN ARRAYS DEPEND ON THE NUMBER
C         OF BASIS FUNCTIONS AND NUMBER OF ATOMS.
C         SPACE FOR THESE THINGS IS ALLOCATED FROM THE SINGLE ARRAY
C         'CORE'.
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS,AON
      LOGICAL USESYM
      COMMON /IOP/    IOP(50)
      COMMON /MOL/    NATOMS,ICHARG,MULTIP,NAE,NBE,NE,NBASIS,
     $                IAN(401),ATMCHG(400),C(1200)
      COMMON/B/EXX(1200),C1(1200),C2(1200),C3(1200),
     $         X(400),Y(400),Z(400),JAN(400),SHELLA(400),SHELLN(400),
     $         SHELLT(400),SHELLC(400),AOS(400),AON(400),NSHELL,MAXTYP
      DIMENSION C4(400),SHLADF(400)
      EQUIVALENCE(C4(1),C3(401)),(SHLADF(1),C3(801))
      COMMON/IO/IN,IOUT,IPUNCH
      COMMON/GRSYM/NOP1,NOP2,JTRANS(3,8)
      DIMENSION CORE(40000)
      COMMON/HAMSAV/NORB,NHAM
      DATA IRWB,IRWPT,IRWPA,IRWPB,IRWPTI,IRWF1,IRWSYM
     $    / 506, 532 , 528 , 530 , 533 ,  584 , 579   /
      DATA IRWSY1/551/, MAXSHL/400/, IRWHAM/568/, IRWMOA/524/,
     $     TWO/2.0D0/, IONDDO/566/
C (0,1)
      INTEGER*8 I_PIPS_ACLEAR_A
      COMMON /PIPS_ACLEAR_A/ I_PIPS_ACLEAR_A
      INTEGER*8 I_PIPS_TWLDRV_DN
      COMMON /PIPS_TWLDRV_DN/ I_PIPS_TWLDRV_DN
      INTEGER*8 I_PIPS_TWLDRV_NEQATM
      COMMON /PIPS_TWLDRV_NEQATM/ I_PIPS_TWLDRV_NEQATM
      INTEGER*8 I_PIPS_TWLDRV_FHAM
      COMMON /PIPS_TWLDRV_FHAM/ I_PIPS_TWLDRV_FHAM
      INTEGER*8 I_PIPS_TWLDRV_AJ
      COMMON /PIPS_TWLDRV_AJ/ I_PIPS_TWLDRV_AJ
      INTEGER*8 I_PIPS_TWLDRV_AK
      COMMON /PIPS_TWLDRV_AK/ I_PIPS_TWLDRV_AK
      INTEGER*8 I_PIPS_TWLDRV_CMO
      COMMON /PIPS_TWLDRV_CMO/ I_PIPS_TWLDRV_CMO
      INTEGER*8 I_PIPS_TWLDRV_FIRSTS
      COMMON /PIPS_TWLDRV_FIRSTS/ I_PIPS_TWLDRV_FIRSTS
      INTEGER*8 I_PIPS_LCLEAR_A
      COMMON /PIPS_LCLEAR_A/ I_PIPS_LCLEAR_A
C     BEGIN BLOCK
C (0,2)
1000  FORMAT(' F=',5D13.6)
C (0,3)
1010  FORMAT(' AJ:')
C (0,4)
1020  FORMAT(' AK:')
C (0,5)
2002  FORMAT(' NO CODE YET FOR COMPLEX UHF ... SORRY.')
C (0,6)
C
C     INITIALIZE THIS LINK.
C
C***      CALL DRUM
C***      CALL TRAKIO(6HD2ESP ,1)
      LENB = 15*MAXSHL+INTOWP(2+7*MAXSHL)
C (0,7)
      LRWSY1 = INTOWP(26)
C (0,8)
C
C     FILL LOCAL OPTIONS.
      ICRIT = MOD(IOP(18), 10)
C (0,9)
      INITF = IOP(27)
C (0,10)
      IACC = IOP(28)
C (0,11)
      ISYMGR = IOP(30)
C (0,12)
      IPRINT = IOP(33)
C (0,13)
      IDUMP = IOP(34)
C (0,14)
      ICHECK = IOP(40)
C (0,15)
      INDDO = IOP(41)
C (0,16)
      IF (INDDO.NE.0.AND.ICHECK.EQ.0) THEN
C (0,17)
         ICHECK = 3
      ELSE
C (0,18)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,19)
      NTT = NBASIS*(NBASIS+1)/2
C (0,20)
      NAT3 = 3*NATOMS
C (0,21)
C***      CALL GETNOP(NOP1,NOP2)
      NOP1 = 1
C (0,22)
C     BEGIN UNSTRUCTURED
C (1,1)
C
C     DEFER EXECUTION OF THIS LINK IF POSSIBLE.
      IF (IACC.GT.0) GOTO 100
C (7,1)
      CALL ILSW(2, 24, IFRC)
C (6,1)
      IF (IFRC.EQ.1) GOTO 100
C (5,1)
C     BEGIN BLOCK
C (5,2)
C
C     FETCH /B/ FROM THE RW-FILES.
C***      CALL TREAD(IRWB,EXX(1),LENB,1,LENB,1,0)
C***
C
C     DETERMINE TYPE OF SCF.
C     DEFINITION OF ISCF:
C        ISCF = 0 ... RRHF
C               1 ... RUHF/ROHF
C               2 ... CRHF
C               3 ... CUHF
C               4 ... GVB
C
      NDEN = 1
C (5,3)
      CALL ILSW(2, 1, ISCF)
C (5,4)
      CALL ILSW(2, 22, IREST)
C (5,5)
      IF (ISCF.EQ.0.AND.IREST.EQ.1) THEN
C (5,6)
         ISCF = 1
      ELSE
C (5,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,8)
      IF (ISCF.EQ.0.AND.IREST.EQ.2) THEN
C (5,9)
         ISCF = 4
      ELSE
C (5,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,11)
      IF (ISCF.NE.0.AND.ISCF.NE.4) THEN
C (5,12)
         NDEN = 2
      ELSE
C (5,13)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,14)
      ISCFP = ISCF+1
C (5,15)
      NORB = 0
C (5,16)
      NHAM = 0
C (5,17)
      NONC1 = 1
C (5,18)
C***      IF(ISCF.EQ.4) CALL FILEIO(2,-IRWHAM,INTOWP(2),NORB,0)
C
C     ALLOCATE STORAGE IN 'CORE'.
C           CORE(1)=VEE
      IVEE = 1
C (5,19)
C           FXYZ(3*NATOMS)
      IFXYZ = IVEE+1
C (5,20)
C           WORK ARRAY FOR ADDING IN ONE-ELECTRON FORCES.
      JFXYZ = IFXYZ+3*NATOMS
C (5,21)
C           ALLOCATE NDEN DENSITY MATRICES.
      IDM = JFXYZ+3*NATOMS
C (5,22)
      IDN = IDM
C (5,23)
      IF (NDEN.EQ.2) THEN
C (5,24)
         IDN = IDM+NTT
      ELSE
C (5,25)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,26)
C           CHECK FOR OVER-RUN.
      INEQ = IDN+NTT
C (5,27)
      IFROZE = INEQ+INTOWP(NATOMS*NOP1)
C (5,28)
      INCONF = IFROZE+INTOWP(NATOMS)
C (5,29)
      IFHAM = INCONF+INTOWP(NORB)
C (5,30)
      IAJ = IFHAM+NHAM
C (5,31)
      IAK = IAJ+NHAM*NHAM
C (5,32)
      LENHAM = IAK+NHAM*NHAM-INCONF
C (5,33)
      IMO = INCONF+LENHAM
C (5,34)
      LENMO = 0
C (5,35)
      IF (ISCF.EQ.4) THEN
C (5,36)
         LENMO = NBASIS*NBASIS
      ELSE
C (5,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,38)
      IFLAGS = IMO+LENMO
C (5,39)
      ISCVEN = IFLAGS+1
C (5,40)
      ISCVEE = ISCVEN+1
C (5,41)
      ISCVNN = ISCVEE+1
C (5,42)
      IHDIAG = ISCVNN+1
C (5,43)
      IBETA = IHDIAG+NBASIS
C (5,44)
      IFIRST = IBETA+NBASIS
C (5,45)
      ISHLBF = IFIRST+INTOWP(NBASIS)
C (5,46)
      IEND = ISHLBF+INTOWP(NBASIS)-1
C (5,47)
      LENNDO = IEND+1-IFLAGS
C (5,48)

C     PLV
      IF1 = IEND+1
C (5,49)
      IAJ1 = IF1+NONC1
C (5,50)
      IAK1 = IAJ1+NONC1*NONC1
C (5,51)
      I_PIPS_LCLEAR_A = (40000-(IFIRST-1))*8/4
C     PLV

C
C     GET MEMORY.
C***      CALL GETSCM(IEND,CORE(1),JJJMEM,6HD2ESP1,0)
      CALL LCLEAR(NBASIS, CORE(IFIRST))
C (5,52)
C***      IF(INDDO.NE.0) CALL FILEIO(2,-IONDDO,LENNDO,CORE(IFLAGS),0)
      IF (INDDO.EQ.0) THEN
C (5,53)
         CORE(ISCVEE) = DBLE(1)
      ELSE
C (5,54)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,55)
      I_PIPS_LCLEAR_A = (40000-(IFROZE-1))*8/4
C***      CALL FRZAT1(NATOMS,CORE(IFROZE))
      CALL LCLEAR(NATOMS, CORE(IFROZE))
C (5,56)
C
C     READ IN DENSITY MATRICES FROM RW-FILES.
!     INITIALLY: DO 9988
      DO I = 1, NTT
C (5,57)
9988     CORE(IDM-1+I) = 0.2D0
      ENDDO
C (5,58)
C***      GO TO(30,40,50,60,70),ISCFP
C
C     REAL-RHF.
C***   30 CALL TREAD(IRWPT,CORE(IDM),NTT,1,NTT,1,0)
C***      GO TO 80
C
C     REAL-UHF.
C***   40 CALL TREAD(IRWPA,CORE(IDM),NTT,1,NTT,1,0)
C***      CALL TREAD(IRWPB,CORE(IDN),NTT,1,NTT,1,0)
C***      GO TO 80
C
C     COMPLEX RHF.
C***   50 CALL TREAD(IRWPT ,CORE(IDM),NTT,1,NTT,1,0)
C***      CALL TREAD(IRWPTI,CORE(IDN),NTT,1,NTT,1,0)
C***      GO TO 80
C
C     COMPLEX UHF ... NO CODE YET.
C***   60 WRITE(IOUT,2002)
C***      CALL LNK1E
C
C     GVB AND GENERAL WAVEFUNCTIONS OF THE FH + AJ + BK TYPE.
C***   70 CALL FILEIO(2,IRWHAM,LENHAM,CORE(INCONF),0)
C***      IST = IFHAM
C***      IEN = IFHAM + NHAM - 1
C***      IF(IDUMP.NE.0) WRITE(6,1000) (CORE(I),I=IST,IEN)
C***      IF(IDUMP.NE.0) WRITE(6,1010)
C***      IF(IDUMP.NE.0) CALL MATOUT(CORE(IAJ),NHAM,NHAM,NHAM,NHAM)
C***      IF(IDUMP.NE.0) WRITE(6,1020)
C***      IF(IDUMP.NE.0) CALL MATOUT(CORE(IAK),NHAM,NHAM,NHAM,NHAM)
C***      CALL FILEIO(2,-IRWMOA,NBASIS**2,CORE(IMO),0)
C***      CALL OCOUNT(NORB,CORE(INCONF),NONCOR)
C***      NONC1 = MAX0(NONCOR,1)
C***      IF1 = IEND + 1
C***      IAJ1 = IF1 + NONC1
C***      IAK1 = IAJ1 + NONC1*NONC1
C***      NGET = IAK1 + NONC1*NONC1 - IF1
C***      CALL GETSCM(NGET,CORE(IF1),JJJMEM,6HGVBGRD,0)
C***      CALL NEWFJK(NORB,NHAM,NBASIS,NBASIS,NONCOR,NONC1,CORE(INCONF),
C***     $    CORE(IFHAM),CORE(IAJ),CORE(IAK),CORE(IMO),CORE(IDM),
C***     $    CORE(IF1),CORE(IAJ1),CORE(IAK1))
C***      IF(NONCOR.EQ.0) CALL ASCALE(NTT,TWO,CORE(IDM),CORE(IDM))
C***      IF(NONCOR.EQ.0) ISCF = 0
C***      IF(NONCOR.EQ.0) ISCFP = 1
C
C     IF SYMMETRY IS AVAILABLE, RECOVER THE INFORMATION
C     FROM THE RW-FILES, AND PREPARE TO USE IT.
80    CALL ILSW(2, 26, NOSYM)
C (5,59)
      USESYM = NOSYM.EQ.0.AND.ISYMGR.EQ.0.AND.NOP1.GT.1
C     END BLOCK
C (4,1)
      IF (.NOT.USESYM) THEN
      ENDIF
C (3,1)
C     BEGIN BLOCK
C (3,2)
C     READ IN SYMMETRY INFORMATION.
C***      CALL TREAD(IRWSY1,NOP1,LRWSY1,1,LRWSY1,1,0)
C***      LEN=INTOWP(NATOMS*NOP1)
C***      CALL TREAD(IRWSYM,CORE(INEQ),LEN,1,LEN,1,0)
90    CONTINUE
C (3,3)
      I_PIPS_ACLEAR_A = 40000-(IFXYZ-1)
C
C     CLEAR OUT ACCUMULATION ARRAY.
      CALL ACLEAR(NAT3, CORE(IFXYZ))
C (3,4)
      I_PIPS_TWLDRV_DN = 40000-(IDN-1)
      I_PIPS_TWLDRV_NEQATM = (40000-(INEQ-1))*8/4
      I_PIPS_TWLDRV_FHAM = 40000-(IF1-1)
      I_PIPS_TWLDRV_AJ = 40000-(IAJ1-1)
      I_PIPS_TWLDRV_AK = 40000-(IAK1-1)
      I_PIPS_TWLDRV_CMO = 40000-(IMO-1)
      I_PIPS_TWLDRV_FIRSTS = (40000-(IFIRST-1))*8/4
C
C     CALCULATE 2-ELECTRON CONTRIBUTION TO HARTREE-FOCK FORCES.
C     ROUTINE RETURNS WITH VEE, AND FORCE CONTRIBUTIONS IN
C     FXYZ.
C
      CALL TWLDRV(ISCF, CORE(IDM), CORE(IDN), ICRIT, USESYM, NOP1, 
     &JTRANS, CORE(INEQ), NATOMS, C, CORE(IVEE), CORE(IFXYZ), IDUMP, 
     &CORE(IFROZE), NONCOR, NONC1, CORE(IF1), CORE(IAJ1), CORE(IAK1)
     &, CORE(IMO), NBASIS, INDDO, ATMCHG, CORE(IFIRST), ICHECK)
C     END BLOCK
C (2,1)

C
C     RECOVER PREVIOUS INFORMATION (IF REQUESTED) AND ADD IN  THIS 
C     LINK'S CONTRIBUTIONS.
C***      CALL ACLEAR(NAT3,CORE(JFXYZ))
C***      IF(INITF.EQ.1) CALL FILEIO(2,-IRWF1,NAT3,CORE(JFXYZ),0)
C***      IF(IPRINT.GE.2)
C***     $   CALL DMPFRC(IOUT,8HL702INPT,8,NATOMS,CORE(JFXYZ))
C***      IF(IPRINT.GE.2)
C***     $   CALL DMPFRC(IOUT,8H2-E PART,8,NATOMS,CORE(IFXYZ))
C***      CALL AADD(NAT3,CORE(IFXYZ),CORE(JFXYZ),CORE(JFXYZ))
C***      IF(IPRINT.GE.1)
C***     $   CALL DMPFRC(IOUT,8HL702 OUT,8,NATOMS,CORE(JFXYZ))
C***      CALL TWRITE(IRWF1,CORE(JFXYZ),NAT3,1,NAT3,1,0)
100   CONTINUE
C     END UNSTRUCTURED
C (0,23)
C***      CALL TRAKIO(6HD2ESP ,2)
C***      CALL CHAINX(0)
      RETURN
C     END BLOCK
      END
!!
!! file for efill.f
!!
*DECK EFILL
      SUBROUTINE EFILL(ISHELL,JSHELL,KSHELL,LSHELL,LA,LB,LC,LD,AX1,
     $    ISCF,DM,DN,E,DMAX,NBASIS,NONCOR,NONC1,FHAM,AJ,AK,CMO,INDDO,
     $    ATMCHG,FIRSTS)
      IMPLICIT REAL*8(A-H,O-Z)
C
C     ROUTINE TO PLUCK DENSITY MATRIX CONTRIBUTIONS ACCORDING
C     TO SHELL NUMBERS (ISHELL,...,LSHELL) AND STORE INTO LOCAL
C     ARRAY E.  ALSO, THE MAX DENSITY MATRIX ELEMENT FOR THIS BLOCK
C     IS DETERMINED.
C
C     ARGUMENTS:
C
C     ISHELL TO LSHELL ... SHELL NUMBERS OF THE FOUR SHELLS.
C     ISCF             ... SCF MODE FLAG.  SEE COMMENTS IN
C                          D2ESP FOR DETAILS.
C     DM AND DN        ... ARRAYS CONTAINING DENSITY MATRICES.
C                          EXACTLY WHAT THEY CONTAIN DEPENDS ON
C                          ISCF.  REFER TO D2ESP FOR DETAILS.
C     E                ... ARRAY OF DIMENSION 256, FILLED WITH
C                          COMBINATIONS OF DENSITY MATRIX ELEMENTS.
C     DMAX             ... MAX COMBINATION FORMED.  USEFUL LATER ON
C                          WHEN DECIDING JUST WHAT TO KEEP.
C     NBASIS,ETC       ... ONLY USED FOR GVB WAVEFUNCTIONS ... THE J
C                          AND K COEFFICIENTS ARE TRANSFORMED TO THE
C                          AO BASIS.
C     INDDO,ATMCHG,FIRSTS USED FOR NDDO GRADIENTS.
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS,AON
      LOGICAL OPEN,COMPLX,FIRSTS(I_PIPS_TWLDRV_FIRSTS),FRSTKL
      DIMENSION DM(I_PIPS_EFILL_DM),DN(I_PIPS_TWLDRV_DN),E(256),FHAM(NON
     x C1),AJ(NONC1,NONC1),
     $    AK(NONC1,NONC1),CMO(NBASIS,NONC1),ATMCHG(400)
      COMMON/B/EXX(1200),C1(1200),C2(1200),C3(1200),
     $         X(400),Y(400),Z(400),JAN(400),SHELLA(400),SHELLN(400),
     $         SHELLT(400),SHELLC(400),AOS(400),AON(400),NSHELL,MAXTYP
      DIMENSION C4(400),SHLADF(400)
      EQUIVALENCE(C4(1),C3(401)),(SHLADF(1),C3(801))
      DATA ZERO,P25,H/0.D0,0.25D0,0.5D0/,TWO/2.0D0/,
     $     FOUR/4.0D0/
C (0,1)
      INTEGER*8 I_PIPS_EFILL_DM
      COMMON /PIPS_EFILL_DM/ I_PIPS_EFILL_DM
      INTEGER*8 I_PIPS_TWLDRV_DN
      COMMON /PIPS_TWLDRV_DN/ I_PIPS_TWLDRV_DN
      INTEGER*8 I_PIPS_TWLDRV_FIRSTS
      COMMON /PIPS_TWLDRV_FIRSTS/ I_PIPS_TWLDRV_FIRSTS
C     BEGIN BLOCK
C (0,2)
C
C     SET UP LOCAL CONTROL VARIABLES FOR WITHIN LOOPS.
      ISCFP = ISCF+1
C (0,3)
      OPEN = ISCF.EQ.1
C (0,4)
      COMPLX = ISCF.EQ.2
C (0,5)
C
C     DETERMINE STARTING ADDRESSES OF BASIS FUNCTIONS WITHIN SHELLS.
      IAOS = AOS(ISHELL)-1
C (0,6)
      JAOS = AOS(JSHELL)-1
C (0,7)
      KAOS = AOS(KSHELL)-1
C (0,8)
      LAOS = AOS(LSHELL)-1
C (0,9)
C
C     LOOP OVER ALL BASIS FUNCTIONS FOR THIS SHELL SET, AND STORE
C     DENSITY MATRIX CONTRIBUTIONS INTO E.
      DMAX = ZERO
C (0,10)
      D12B = ZERO
C (0,11)
      D34B = ZERO
C (0,12)
!     INITIALLY: DO 20
      DO L = 1, LD
C (0,13)
C        BEGIN BLOCK
C (0,14)
         LAS = LAOS+L
C (0,15)
         LLL = LAS*(LAS-1)/2
C (0,16)
C
!     INITIALLY: DO 20
         DO K = 1, LC
C (0,17)
C           BEGIN BLOCK
C (0,18)
            KAS = KAOS+K
C (0,19)
            LKK = KAS*(KAS-1)/2
C (0,20)
            LKL = LKK+LAS
C (0,21)
            IF (KAS.LT.LAS) THEN
C (0,22)
               LKL = LLL+KAS
            ELSE
C (0,23)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,24)
            FRSTKL = FIRSTS(KAS).AND.FIRSTS(LAS)
C (0,25)
            D34 = DM(LKL)
C (0,26)
            IF (OPEN) THEN
C (0,27)
               D34B = DN(LKL)
            ELSE
C (0,28)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,29)
C
!     INITIALLY: DO 20
            DO J = 1, LB
C (0,30)
C              BEGIN BLOCK
C (0,31)
               ID = 16*J+4*K+L-84
C (0,32)
               JAS = JAOS+J
C (0,33)
               LJJ = JAS*(JAS-1)/2
C (0,34)
               LJK = LJJ+KAS
C (0,35)
               IF (JAS.LT.KAS) THEN
C (0,36)
                  LJK = LKK+JAS
               ELSE
C (0,37)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (0,38)
               D23 = DM(LJK)
C (0,39)
               LJL = LJJ+LAS
C (0,40)
               IF (JAS.LT.LAS) THEN
C (0,41)
                  LJL = LLL+JAS
               ELSE
C (0,42)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (0,43)
               D24 = DM(LJL)
C (0,44)
C              BEGIN UNSTRUCTURED
C (1,1)
               IF (.NOT.(OPEN.OR.COMPLX)) GOTO 10
C (5,1)
C              BEGIN BLOCK
C (5,2)
               D23B = DN(LJK)
C (5,3)
               D24B = DN(LJL)
C              END BLOCK
C (4,1)
               IF (.NOT.COMPLX) GOTO 10
C (3,1)
C              BEGIN BLOCK
C (3,2)
               IF (KAS.LT.JAS) THEN
C (3,3)
                  D23B = -D23B
               ELSE
C (3,4)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (3,5)
               IF (JAS.LT.LAS) THEN
C (3,6)
                  D24B = -D24B
               ELSE
C (3,7)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C              END BLOCK
C (2,1)
10             CONTINUE
C              END UNSTRUCTURED
C (0,45)
C
!     INITIALLY: DO 20
               DO I = 1, LA
C (0,46)
C                 BEGIN BLOCK
C (0,47)
                  ID = ID+64
C (0,48)
                  IAS = IAOS+I
C (0,49)
                  LII = IAS*(IAS-1)/2
C (0,50)
                  LIJ = LII+JAS
C (0,51)
                  IF (IAS.LT.JAS) THEN
C (0,52)
                     LIJ = LJJ+IAS
                  ELSE
C (0,53)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,54)
                  D12 = DM(LIJ)
C (0,55)
                  LIK = LII+KAS
C (0,56)
                  IF (IAS.LT.KAS) THEN
C (0,57)
                     LIK = LKK+IAS
                  ELSE
C (0,58)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,59)
                  D13 = DM(LIK)
C (0,60)
                  LIL = LII+LAS
C (0,61)
                  IF (IAS.LT.LAS) THEN
C (0,62)
                     LIL = LLL+IAS
                  ELSE
C (0,63)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,64)
                  D14 = DM(LIL)
C (0,65)
C                 BEGIN UNSTRUCTURED
C (6,1)
C
C     BRANCH TO PARTICULAR CODE BASED ON ISCF.
                  IF (ISCFP.EQ.1) GOTO 1
C (10,1)
                  IF (ISCFP.EQ.2) GOTO 2
C (11,1)
                  IF (ISCFP.EQ.3) GOTO 3
C (13,1)
                  IF (ISCFP.EQ.4) GOTO 4
C (14,1)
                  IF (ISCFP.EQ.5) GOTO 5
C (7,1)
C
C     REAL-RHF, CLOSED SHELL.
1                 D1234 = (D12*D34-P25*(D13*D24+D23*D14))*AX1
                  GOTO 4
C (15,1)
C                 BEGIN BLOCK
C (15,2)
C
C     GVB.
5                 D1234 = FOUR*D12*D34-D13*D24-D14*D23
C (15,3)
!     INITIALLY: DO 100
                  DO IORB = 1, NONCOR
C (15,4)
100                  D1234 = D1234+FHAM(IORB)*(FOUR*(D12*CMO(KAS,IORB
     &               )*CMO(LAS,IORB)+D34*CMO(IAS,IORB)*CMO(JAS,IORB))
     &               -D13*CMO(JAS,IORB)*CMO(LAS,IORB)-D14*CMO(JAS,
     &               IORB)*CMO(KAS,IORB)-D24*CMO(IAS,IORB)*CMO(KAS,
     &               IORB)-D23*CMO(IAS,IORB)*CMO(LAS,IORB))
                  ENDDO
C (15,5)
!     INITIALLY: DO 110
                  DO IORB = 1, NONCOR
C (15,6)
!     INITIALLY: DO 110
                     DO JORB = 1, NONCOR
C (15,7)
110                     D1234 = D1234+TWO*CMO(IAS,IORB)*CMO(JAS,IORB)
     &                  *CMO(KAS,JORB)*CMO(LAS,JORB)*AJ(IORB,JORB)+
     &                  CMO(IAS,IORB)*CMO(JAS,JORB)*CMO(KAS,IORB)*CMO
     &                  (LAS,JORB)*AK(IORB,JORB)+CMO(IAS,IORB)*CMO(
     &                  JAS,JORB)*CMO(KAS,JORB)*CMO(LAS,IORB)*AK(IORB
     &                  ,JORB)
                     ENDDO
                  ENDDO
C (15,8)
                  D1234 = AX1*D1234
C                 END BLOCK
                  GOTO 4
C (12,1)
C                 BEGIN BLOCK
C (12,2)
C
C     COMPLEX-RHF, CLOSED SHELL.
3                 D14B = DN(LIL)
C (12,3)
                  D13B = DN(LIK)
C (12,4)
                  IF (IAS.LT.LAS) THEN
C (12,5)
                     D14B = -D14B
                  ELSE
C (12,6)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (12,7)
                  IF (KAS.LT.IAS) THEN
C (12,8)
                     D13B = -D13B
                  ELSE
C (12,9)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (12,10)
                  D1234 = (D12*D34-P25*(D13*D24+D23*D14-D13B*D24B-
     &            D23B*D14B))*AX1
C                 END BLOCK
                  GOTO 4
C (9,1)
C                 BEGIN BLOCK
C (9,2)
C
C     REAL-UHF.
2                 D12B = DN(LIJ)
C (9,3)
                  D13B = DN(LIK)
C (9,4)
                  D14B = DN(LIL)
C (9,5)
                  D1234 = ((D12+D12B)*(D34+D34B)-H*(D13*D24+D23*D14+
     &            D13B*D24B+D23B*D14B))*AX1
C                 END BLOCK
C (8,1)
C
C     COMPLEX UHF ... NOT HERE YET.
4                 CONTINUE
C                 END UNSTRUCTURED
C (0,66)
C
C     STORE COMPUTED VALUE INTO E, AND CHECK DMAX.
15                D1234 = D1234
C (0,67)
                  IF (FRSTKL) THEN
C (0,68)
                     D1234 = D1234-ATMCHG(JAN(KSHELL))*(D12+D12B)*AX1
                  ELSE
C (0,69)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,70)
                  IF (FIRSTS(IAS).AND.FIRSTS(JAS)) THEN
C (0,71)
                     D1234 = D1234-ATMCHG(JAN(ISHELL))*(D34+D34B)*AX1
                  ELSE
C (0,72)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,73)
                  E(ID) = D1234
C (0,74)
                  D1234 = DABS(D1234)
C (0,75)
                  IF (D1234.GT.DMAX) THEN
C (0,76)
                     DMAX = D1234
                  ELSE
C (0,77)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,78)
20                CONTINUE
C                 END BLOCK
               ENDDO
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,79)
C
C     ALL DONE, RETURN.
      RETURN
C     END BLOCK
      END
!!
!! file for fmtgen.f
!!
*DECK FMTGEN
      SUBROUTINE FMTGEN(F,T,M,ICK)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION F(M)
      COMMON/IO/IN,IOUT,IPUNCH
      COMMON/FMCONS/FOUR,ONE,HALF,TWO,ZERO,TEN,TENM9,F20,F42,F500
      COMMON/FM/GA(17),RPITWO,FMZERO(17),TOL,CUT0S,CUTSM,CUTML
      EQUIVALENCE(APPROX,OLDSUM)
C (0,1)
C     BEGIN BLOCK
C (0,2)
2001  FORMAT('0FAILURE IN FMGEN FOR SMALL T   IX > 50, '/' IX = ',I3,', 
     & T = ',D20.14)
C (0,3)
C
C     ICK IS AN ERROR INDICATOR.
C     ON RETURN, ICK=0 IMPLIES THAT ALL IS WELL.
C     IF ON RETURN, ICK IS NON-ZERO, THE ASSYMPTOTIC EXPANSION
C     HAS FAILED.
      ICK = 0
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
C     TEST FOR TYPE OF ALGORITHM.
      IF (ABS(T).GT.CUT0S) GOTO 3
C (8,1)
C*********************************************************************
C        FILL F(M) FOR ARGUMENT OF ZERO.
C*********************************************************************
!     INITIALLY: DO 2
      DO I = 1, M
C (8,2)
2        F(I) = FMZERO(I)
      ENDDO
      GOTO 190
C (2,1)
C
C     TEST FOR EVALUATION OF THE EXP.
3     TEXP = ZERO
C (3,1)
      IF (ABS(T).GE.CUTML) GOTO 150
C (28,1)
      TEXP = EXP(-T)
C (20,1)
      IF (ABS(T).GE.CUTSM) GOTO 80
C (21,1)
C     BEGIN BLOCK
C (21,2)
C*********************************************************************
C        0 .LT. T .LT. 10
C*********************************************************************
      A = FLOAT(M-1)+HALF
C (21,3)
      TERM = ONE/A
C (21,4)
      SUM = TERM
C (21,5)
      IX = 2
C     END BLOCK
99997 CONTINUE
C (22,1)
C     DO loop 20 with exit had to be desugared
      IF (IX.GT.400) GOTO 99998
C (27,1)
C     BEGIN BLOCK
C (27,2)
      A = A+ONE
C (27,3)
      TERM = TERM*T/A
C (27,4)
      SUM = SUM+TERM
C     END BLOCK
C (25,1)
      IF (ABS(TERM/SUM)-TOL.LT.0) GOTO 30
C (26,1)
C     BEGIN BLOCK
C (26,2)
20    CONTINUE
C (26,3)
      IX = IX+1
C     END BLOCK
      GOTO 99997
C (24,1)
30    F(M) = HALF*SUM*TEXP
C (5,1)
C     BEGIN BLOCK
C (5,2)
C*********************************************************************
C        RECUR DOWNWARDS TO F(1)
C*********************************************************************
160   TX = T+T
C (5,3)
      SUM = FLOAT(M+M-3)
C (5,4)
      MM1 = M-1
C     END BLOCK
C (6,1)
      IF (MM1.EQ.0) GOTO 190
C (30,1)
!     INITIALLY: DO 180
170   DO IX = 1, MM1
C (30,2)
C        BEGIN BLOCK
C (30,3)
         F(M-IX) = (TX*F(M-IX+1)+TEXP)/SUM
C (30,4)
180      SUM = SUM-TWO
C        END BLOCK
      ENDDO
      GOTO 190
99998 CONTINUE
C (23,1)
C     BEGIN BLOCK
C (23,2)
      WRITE (IOUT, 2001) IX, T
C (23,3)
C***      CALL LNK1E
      STOP
C     END BLOCK
C (19,1)
C     BEGIN BLOCK
C (19,2)
C
C*********************************************************************
C        10 .LE. T .LT. 42
C*********************************************************************
80    A = FLOAT(M-1)
C (19,3)
      B = A+HALF
C (19,4)
      A = A-HALF
C (19,5)
      TX = ONE/T
C (19,6)
      MM1 = M-1
C (19,7)
      APPROX = RPITWO*SQRT(TX)*TX**MM1
C     END BLOCK
C (18,1)
      IF (MM1.EQ.0) GOTO 110
C (17,1)
!     INITIALLY: DO 100
90    DO IX = 1, MM1
C (17,2)
C        BEGIN BLOCK
C (17,3)
         B = B-ONE
C (17,4)
100      APPROX = APPROX*B
C        END BLOCK
      ENDDO
C (16,1)
C     BEGIN BLOCK
C (16,2)
110   FIMULT = HALF*TEXP*TX
C (16,3)
      SUM = ZERO
C     END BLOCK
C (14,1)
      IF (FIMULT.EQ.0) GOTO 140
C (15,1)
C     BEGIN BLOCK
C (15,2)
120   FIPROP = FIMULT/APPROX
C (15,3)
      TERM = ONE
C (15,4)
      SUM = ONE
C (15,5)
      NOTRMS = INT(T)+MM1
C (15,6)
      IX = 2
C     END BLOCK
99995 CONTINUE
C (10,1)
C     DO loop 130 with exit had to be desugared
      IF (IX.GT.NOTRMS) GOTO 99996
C (11,1)
C     BEGIN BLOCK
C (11,2)
      TERM = TERM*A*TX
C (11,3)
      SUM = SUM+TERM
C     END BLOCK
C (12,1)
      IF (ABS(TERM*FIPROP/SUM)-TOL.LE.0) GOTO 140
C (29,1)
C     BEGIN BLOCK
C (29,2)
130   A = A-ONE
C (29,3)
      IX = IX+1
C     END BLOCK
      GOTO 99995
C (13,1)
140   F(M) = APPROX-FIMULT*SUM
      GOTO 160
99996 CONTINUE
C (9,1)
C     BEGIN BLOCK
C (9,2)
      RATIO = ABS(TERM*FIPROP/SUM)
C (9,3)
C     WRITE(IOUT,2002)T,RATIO
      ICK = 1
C     END BLOCK
      GOTO 190
C (4,1)
C     BEGIN BLOCK
C (4,2)
C*********************************************************************
C        T .GE. 42
C*********************************************************************
150   TX = FLOAT(M)-HALF
C (4,3)
      F(M) = HALF*GA(M)/(T**TX)
C     END BLOCK
      GOTO 160
C (7,1)
190   CONTINUE
C     END UNSTRUCTURED
C (0,5)
      RETURN
C     END BLOCK
      END
!!
!! file for fmtset.f
!!
*DECK FMTSET
      SUBROUTINE FMTSET(KOP1,KOP2,KOP3)
C
C     ROUTINE TO PRE-SET CUTOFFS FOR FMTGEN.
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/FM/GA(17),RPITWO,FMZERO(17),TOL,CUT0S,CUTSM,CUTML
      COMMON/IO/IN,IOUT,IPUNCH
      COMMON/FMCONS/FOUR,ONE,HALF,TWO,ZERO,TEN,TENM9,F20,F42,F500
      DIMENSION F(15)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     COMPUTE PI RELATED CONSTANTS.
      ZERO = DBLE(0)
C (0,3)
      ONE = DBLE(1)
C (0,4)
      TWO = ONE+ONE
C (0,5)
      FOUR = TWO+TWO
C (0,6)
      HALF = ONE/TWO
C (0,7)
      TEN = FOUR+FOUR+TWO
C (0,8)
      TENM9 = TEN**(-9)
C (0,9)
      F20 = TWO*TEN
C (0,10)
      F42 = TWO*F20+TWO
C (0,11)
      F500 = (FOUR+ONE)*TEN*TEN
C (0,12)
      PI = FOUR*DATAN(ONE)
C (0,13)
      GA(1) = DSQRT(PI)
C (0,14)
      RPITWO = HALF*GA(1)
C (0,15)
C
C     FILL GAMMA FUNCTION ARRAY.
      TOL = HALF
C (0,16)
!     INITIALLY: DO 10
      DO I = 2, 17
C (0,17)
C        BEGIN BLOCK
C (0,18)
         GA(I) = GA(I-1)*TOL
C (0,19)
10       TOL = TOL+ONE
C        END BLOCK
      ENDDO
C (0,20)
C
C     FILL FMZERO (FOR ARGUMENT OF ZERO).
      TOL = ONE
C (0,21)
      FMZERO(1) = ONE
C (0,22)
!     INITIALLY: DO 20
      DO I = 2, 17
C (0,23)
C        BEGIN BLOCK
C (0,24)
         TOL = TOL+TWO
C (0,25)
20       FMZERO(I) = ONE/TOL
C        END BLOCK
      ENDDO
C (0,26)
C
C     OBTAIN CUTOFFS.
C
C        CUT0S = CUTOFF, ZERO TO SMALL.
C        CUTSM = CUTOFF, SMALL TO MEDIUM.
C        CUTML = CUTOFF, MEDIUM TO LARGE.
C
C     CUTOS IS OBTAINED FROM KOP1.
      CUT0S = ZERO
C (0,27)
      IF (KOP1.NE.0) THEN
C (0,28)
         CUT0S = TEN**((-2)*KOP1)
      ELSE
C (0,29)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,30)
C
C     CUTSM IS OBTAINED FROM KOP2.
C     KOP2 SPECIFIES THE DESIRED ACCURACY OF THE ASSYMPTOTIC
C     EXPANSION.  ROUTINE FMTGEN IS CALLED TO CHECK THE VIABILITY
C     OF THE ASSYMPTOTIC EXPANSION FOR VARIOUS VALUES OF CUTSM.
      TOL = TENM9
C (0,31)
      CUTSM = TEN
C (0,32)
      CUTML = F42
C (0,33)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (KOP2.EQ.0) GOTO 90
C (8,1)
C     BEGIN BLOCK
C (8,2)
      TOL = TEN**((-6)-KOP2)
C (8,3)
      T = F20
C     END BLOCK
C (7,1)
60    CALL FMTGEN(F, T, 1, ICK)
C (4,1)
      IF (ICK.EQ.0) GOTO 70
C (3,1)
80    CUTSM = T+ONE
      GOTO 90
C (5,1)
70    T = T-ONE
C (6,1)
      IF (T-TEN.LT.0) THEN
      ELSE
         GOTO 60
      ENDIF
C (2,1)
C
C     CUTML IS TAKEN FROM KOP3.
90    CONTINUE
C     END UNSTRUCTURED
C (0,34)
      CUTML = F42
C (0,35)
      IF (KOP3.NE.0) THEN
C (0,36)
         CUTML = DBLE(KOP3)
      ELSE
C (0,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,38)
      RETURN
C     END BLOCK
      END
!!
!! file for fpppp.f
!!
*DECK FPPPP
      SUBROUTINE FPPPP
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION E(256)
      COMMON /FFQ/ FQ0,FQ1,FQ2,FQ3,FQ4,FQ5
      COMMON /FP4/ QA,QA1,QA2,A12I,A34I,A1234I
      COMMON /FP4/ A1,A2,A3,A4,A12,A34,A1234,PQX,PQY,PQZ,
     *   PQXX,PQYY,PQZZ,PQXY,PQXZ,PQYZ,
     *V0000,V0010,V0020,V0030,V0100,V0200,V0300,
     *V0110,V0120,V0130,V0210,V0220,V0230,V0310,V0320,V0330,
     *V1010,V1020,V1030,V2010,V2020,V2030,V3010,V3020,V3030,
     *V1000,V2000,V3000,V1100,V2100,V3100,V1200,V2200,V3200,
     *V1300,V2300,V3300,V1110,V2110,V3110,V1210,V2210,V3210,
     *V1310,V2310,V3310,V1120,V2120,V3120,V1220,V2220,V3220,
     *V1320,V2320,V3320,V1130,V2130,V3130,V1230,V2230,V3230,
     *V1330,V2330,V3330
      COMMON /FP4/C1110,C2110,C3110,C1210,C2210,C3210,
     *C1320,C2320,C3320,C1130,C2130,C3130,C1230,C2230,C3230,
     *C1310,C2310,C3310,C1120,C2120,C3120,C1220,C2220,C3220,
     *C1330,C2330,C3330,OPXO,OPYO,OPZO,OPOX,OPOY,OPOZ,OPXOX,OPYOY,OPZOZ,
     *OPXX,OPXY,OPXZ,OPYX,OPYY,OPYZ,OPZX,OPZY,OPZZ,OQXO,OQYO,OQZO,
     *OQOX,OQOY,OQOZ,OQXOX,OQYOY,OQZOZ,OQXX,OQXY,OQXZ,OQYX,OQYY,OQYZ,
     *OQZX,OQZY,OQZZ,S1,S2,S3,S4,S12,S34
      COMMON /FP4/ E,
     *GOOOO,GOOXO,GOOYO,GOOZO,GXOOO,GXOXO,GXOYO,GXOZO,GXXOO,GXXXO,GXXYO,
     *GXXZO,GXYOO,GXYZO,GXZOO,GYOOO,GYOYO,GYOZO,GYYOO,GYYXO,GYYYO,
     *GYYZO,GYZOO,GZOOO,GZOZO,GZZOO,GZZXO,GZZYO,GZZZO,
     *VE00,VE11,VE12,VE13,VE14,VE21,VE22,VE23,VE24,VE31,VE32,VE33,VE34,
     *CSSSP,CSSPP,CSPSP,CPSSP,CSPPP,CPSPP,CPPSP,CPPPP
      EQUIVALENCE (GXYOO,GYXOO)
      EQUIVALENCE (GXZOO,GZXOO)
      EQUIVALENCE (GYZOO,GZYOO)
      EQUIVALENCE (GYXXO,GXYXO,GXXYO)
      EQUIVALENCE (GZXXO,GXZXO,GXXZO)
      EQUIVALENCE (GZYYO,GYZYO,GYYZO)
      EQUIVALENCE (GXYYO,GYXYO,GYYXO)
      EQUIVALENCE (GXZZO,GZXZO,GZZXO)
      EQUIVALENCE (GYZZO,GZYZO,GZZYO)
      EQUIVALENCE (GXYZO,GYZXO,GZXYO,GZYXO,GYXZO,GXZYO)
      EQUIVALENCE (GYYXX,GYXYX,GYXXY,GXYYX,GXYXY,GXXYY)
      EQUIVALENCE (GZZXX,GZXZX,GZXXZ,GXZZX,GXZXZ,GXXZZ)
      EQUIVALENCE (GZZYY,GZYZY,GZYYZ,GYZZY,GYZYZ,GYYZZ)
      EQUIVALENCE (GYXXX,GXYXX,GXXYX,GXXXY)
      EQUIVALENCE (GZXXX,GXZXX,GXXZX,GXXXZ)
      EQUIVALENCE (GXYYY,GYXYY,GYYXY,GYYYX)
      EQUIVALENCE (GZYYY,GYZYY,GYYZY,GYYYZ)
      EQUIVALENCE (GXZZZ,GZXZZ,GZZXZ,GZZZX)
      EQUIVALENCE (GYZZZ,GZYZZ,GZZYZ,GZZZY)
      EQUIVALENCE (GXYZZ,GXZYZ,GXZZY,GYXZZ,GYZXZ,GYZZX,
     *             GZXYZ,GZXZY,GZYXZ,GZYZX,GZZXY,GZZYX)
      EQUIVALENCE (GYZXX,GYXZX,GYXXZ,GZYXX,GZXYX,GZXXY,
     *             GXYZX,GXYXZ,GXZYX,GXZXY,GXXYZ,GXXZY)
      EQUIVALENCE (GZXYY,GZYXY,GZYYX,GXZYY,GXYZY,GXYYZ,
     *             GYZXY,GYZYX,GYXZY,GYXYZ,GYYZX,GYYXZ)
C
      DATA THREE,  P25,   H
     $ /    3.D0,.25D0,0.5D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C
      V0001 = OQOX*GOOOO+GOOXO
C (0,3)
      V0002 = OQOY*GOOOO+GOOYO
C (0,4)
      V0003 = OQOZ*GOOOO+GOOZO
C (0,5)
      VE00 = VE00+(V0001*E(2)+V0002*E(3)+V0003*E(4))*CSSSP
C (0,6)
      TEMP = V0000*CSSSP
C (0,7)
      VE14 = TEMP*E(2)
C (0,8)
      VE24 = TEMP*E(3)
C (0,9)
      VE34 = TEMP*E(4)
C (0,10)
      PTOQ = -A12*A34I
C (0,11)
      PTOQS = PTOQ**2
C (0,12)
      GOOXX = GXXOO*PTOQS
C (0,13)
      GOOYY = GYYOO*PTOQS
C (0,14)
      GOOZZ = GZZOO*PTOQS
C (0,15)
      GOOXY = GXYOO*PTOQS
C (0,16)
      GOOXZ = GXZOO*PTOQS
C (0,17)
      GOOYZ = GYZOO*PTOQS
C (0,18)
      V0011 = OQXX*GOOOO+OQXOX*GOOXO+GOOXX
C (0,19)
      V0022 = OQYY*GOOOO+OQYOY*GOOYO+GOOYY
C (0,20)
      V0033 = OQZZ*GOOOO+OQZOZ*GOOZO+GOOZZ
C (0,21)
      V0012 = OQXO*V0002+OQOY*GOOXO+GOOXY
C (0,22)
      V0013 = OQXO*V0003+OQOZ*GOOXO+GOOXZ
C (0,23)
      V0021 = OQYO*V0001+OQOX*GOOYO+GOOXY
C (0,24)
      V0023 = OQYO*V0003+OQOZ*GOOYO+GOOYZ
C (0,25)
      V0031 = OQZO*V0001+OQOX*GOOZO+GOOXZ
C (0,26)
      V0032 = OQZO*V0002+OQOY*GOOZO+GOOYZ
C (0,27)
      VE00 = VE00+(V0011*E(6)+V0012*E(7)+V0013*E(8)+V0021*E(10)+V0022
     &*E(11)+V0023*E(12)+V0031*E(14)+V0032*E(15)+V0033*E(16))*CSSPP
C (0,28)
      VE14 = VE14+(V0010*E(6)+V0020*E(10)+V0030*E(14))*CSSPP
C (0,29)
      VE24 = VE24+(V0010*E(7)+V0020*E(11)+V0030*E(15))*CSSPP
C (0,30)
      VE34 = VE34+(V0010*E(8)+V0020*E(12)+V0030*E(16))*CSSPP
C (0,31)
      VE13 = VE13+(V0001*E(6)+V0002*E(7)+V0003*E(8))*CSSPP
C (0,32)
      VE23 = VE23+(V0001*E(10)+V0002*E(11)+V0003*E(12))*CSSPP
C (0,33)
      VE33 = VE33+(V0001*E(14)+V0002*E(15)+V0003*E(16))*CSSPP
C (0,34)
      V0101 = OQOX*V0100+OPOX*GOOXO+GXOXO
C (0,35)
      V0102 = OQOY*V0100+OPOX*GOOYO+GXOYO
C (0,36)
      V0103 = OQOZ*V0100+OPOX*GOOZO+GXOZO
C (0,37)
      V0201 = OQOX*V0200+OPOY*GOOXO+GXOYO
C (0,38)
      V0202 = OQOY*V0200+OPOY*GOOYO+GYOYO
C (0,39)
      V0203 = OQOZ*V0200+OPOY*GOOZO+GYOZO
C (0,40)
      V0301 = OQOX*V0300+OPOZ*GOOXO+GXOZO
C (0,41)
      V0302 = OQOY*V0300+OPOZ*GOOYO+GYOZO
C (0,42)
      V0303 = OQOZ*V0300+OPOZ*GOOZO+GZOZO
C (0,43)
      VE00 = VE00+(V0101*E(18)+V0102*E(19)+V0103*E(20)+V0201*E(34)+
     &V0202*E(35)+V0203*E(36)+V0301*E(50)+V0302*E(51)+V0303*E(52))*
     &CSPSP
C (0,44)
      VE14 = VE14+(V0100*E(18)+V0200*E(34)+V0300*E(50))*CSPSP
C (0,45)
      VE24 = VE24+(V0100*E(19)+V0200*E(35)+V0300*E(51))*CSPSP
C (0,46)
      VE34 = VE34+(V0100*E(20)+V0200*E(36)+V0300*E(52))*CSPSP
C (0,47)
      VE12 = VE12+(V0001*E(18)+V0002*E(19)+V0003*E(20))*CSPSP
C (0,48)
      VE22 = VE22+(V0001*E(34)+V0002*E(35)+V0003*E(36))*CSPSP
C (0,49)
      VE32 = VE32+(V0001*E(50)+V0002*E(51)+V0003*E(52))*CSPSP
C (0,50)
      V1001 = OQOX*V1000+OPXO*GOOXO+GXOXO
C (0,51)
      V1002 = OQOY*V1000+OPXO*GOOYO+GXOYO
C (0,52)
      V1003 = OQOZ*V1000+OPXO*GOOZO+GXOZO
C (0,53)
      V2001 = OQOX*V2000+OPYO*GOOXO+GXOYO
C (0,54)
      V2002 = OQOY*V2000+OPYO*GOOYO+GYOYO
C (0,55)
      V2003 = OQOZ*V2000+OPYO*GOOZO+GYOZO
C (0,56)
      V3001 = OQOX*V3000+OPZO*GOOXO+GXOZO
C (0,57)
      V3002 = OQOY*V3000+OPZO*GOOYO+GYOZO
C (0,58)
      V3003 = OQOZ*V3000+OPZO*GOOZO+GZOZO
C (0,59)
      VE00 = VE00+(V1001*E(66)+V1002*E(67)+V1003*E(68)+V2001*E(130)+
     &V2002*E(131)+V2003*E(132)+V3001*E(194)+V3002*E(195)+V3003*E(196
     &))*CPSSP
C (0,60)
      VE14 = VE14+(V1000*E(66)+V2000*E(130)+V3000*E(194))*CPSSP
C (0,61)
      VE24 = VE24+(V1000*E(67)+V2000*E(131)+V3000*E(195))*CPSSP
C (0,62)
      VE34 = VE34+(V1000*E(68)+V2000*E(132)+V3000*E(196))*CPSSP
C (0,63)
      VE11 = VE11+(V0001*E(66)+V0002*E(67)+V0003*E(68))*CPSSP
C (0,64)
      VE21 = VE21+(V0001*E(130)+V0002*E(131)+V0003*E(132))*CPSSP
C (0,65)
      VE31 = VE31+(V0001*E(194)+V0002*E(195)+V0003*E(196))*CPSSP
C (0,66)
      V1101 = OQOX*V1100+C1110
C (0,67)
      V1102 = OQOY*V1100+C1120
C (0,68)
      V1103 = OQOZ*V1100+C1130
C (0,69)
      V1201 = OQOX*V1200+C1210
C (0,70)
      V1202 = OQOY*V1200+C1220
C (0,71)
      V1203 = OQOZ*V1200+C1230
C (0,72)
      V1301 = OQOX*V1300+C1310
C (0,73)
      V1302 = OQOY*V1300+C1320
C (0,74)
      V1303 = OQOZ*V1300+C1330
C (0,75)
      V2101 = OQOX*V2100+C2110
C (0,76)
      V2102 = OQOY*V2100+C2120
C (0,77)
      V2103 = OQOZ*V2100+C2130
C (0,78)
      V2201 = OQOX*V2200+C2210
C (0,79)
      V2202 = OQOY*V2200+C2220
C (0,80)
      V2203 = OQOZ*V2200+C2230
C (0,81)
      V2301 = OQOX*V2300+C2310
C (0,82)
      V2302 = OQOY*V2300+C2320
C (0,83)
      V2303 = OQOZ*V2300+C2330
C (0,84)
      V3101 = OQOX*V3100+C3110
C (0,85)
      V3102 = OQOY*V3100+C3120
C (0,86)
      V3103 = OQOZ*V3100+C3130
C (0,87)
      V3201 = OQOX*V3200+C3210
C (0,88)
      V3202 = OQOY*V3200+C3220
C (0,89)
      V3203 = OQOZ*V3200+C3230
C (0,90)
      V3301 = OQOX*V3300+C3310
C (0,91)
      V3302 = OQOY*V3300+C3320
C (0,92)
      V3303 = OQOZ*V3300+C3330
C (0,93)
      VE00 = VE00+(V1101*E(82)+V1102*E(83)+V1103*E(84)+V1201*E(98)+
     &V1202*E(99)+V1203*E(100)+V1301*E(114)+V1302*E(115)+V1303*E(116)
     &+V2101*E(146)+V2102*E(147)+V2103*E(148)+V2201*E(162)+V2202*E(
     &163)+V2203*E(164)+V2301*E(178)+V2302*E(179)+V2303*E(180)+V3101*
     &E(210)+V3102*E(211)+V3103*E(212)+V3201*E(226)+V3202*E(227)+
     &V3203*E(228)+V3301*E(242)+V3302*E(243)+V3303*E(244))*CPPSP
C (0,94)
      VE14 = VE14+(V1100*E(82)+V1200*E(98)+V1300*E(114)+V2100*E(146)+
     &V2200*E(162)+V2300*E(178)+V3100*E(210)+V3200*E(226)+V3300*E(242
     &))*CPPSP
C (0,95)
      VE24 = VE24+(V1100*E(83)+V1200*E(99)+V1300*E(115)+V2100*E(147)+
     &V2200*E(163)+V2300*E(179)+V3100*E(211)+V3200*E(227)+V3300*E(243
     &))*CPPSP
C (0,96)
      VE34 = VE34+(V1100*E(84)+V1200*E(100)+V1300*E(116)+V2100*E(148)
     &+V2200*E(164)+V2300*E(180)+V3100*E(212)+V3200*E(228)+V3300*E(
     &244))*CPPSP
C (0,97)
      VE12 = VE12+(V1001*E(82)+V1002*E(83)+V1003*E(84)+V2001*E(146)+
     &V2002*E(147)+V2003*E(148)+V3001*E(210)+V3002*E(211)+V3003*E(212
     &))*CPPSP
C (0,98)
      VE22 = VE22+(V1001*E(98)+V1002*E(99)+V1003*E(100)+V2001*E(162)+
     &V2002*E(163)+V2003*E(164)+V3001*E(226)+V3002*E(227)+V3003*E(228
     &))*CPPSP
C (0,99)
      VE32 = VE32+(V1001*E(114)+V1002*E(115)+V1003*E(116)+V2001*E(178
     &)+V2002*E(179)+V2003*E(180)+V3001*E(242)+V3002*E(243)+V3003*E(
     &244))*CPPSP
C (0,100)
      VE11 = VE11+(V0101*E(82)+V0102*E(83)+V0103*E(84)+V0201*E(98)+
     &V0202*E(99)+V0203*E(100)+V0301*E(114)+V0302*E(115)+V0303*E(116)
     &)*CPPSP
C (0,101)
      VE21 = VE21+(V0101*E(146)+V0102*E(147)+V0103*E(148)+V0201*E(162
     &)+V0202*E(163)+V0203*E(164)+V0301*E(178)+V0302*E(179)+V0303*E(
     &180))*CPPSP
C (0,102)
      VE31 = VE31+(V0101*E(210)+V0102*E(211)+V0103*E(212)+V0201*E(226
     &)+V0202*E(227)+V0203*E(228)+V0301*E(242)+V0302*E(243)+V0303*E(
     &244))*CPPSP
C (0,103)
      GXOYZ = GXYZO*PTOQ
C (0,104)
      GXOXX = GXXXO*PTOQ
C (0,105)
      GYOYY = GYYYO*PTOQ
C (0,106)
      GZOZZ = GZZZO*PTOQ
C (0,107)
      GYOXX = GXXYO*PTOQ
C (0,108)
      GZOXX = GXXZO*PTOQ
C (0,109)
      GXOYY = GYYXO*PTOQ
C (0,110)
      GZOYY = GYYZO*PTOQ
C (0,111)
      GXOZZ = GZZXO*PTOQ
C (0,112)
      GYOZZ = GZZYO*PTOQ
C (0,113)
      C1011 = OQXX*GXOOO+OQXOX*GXOXO+GXOXX
C (0,114)
      C1022 = OQYY*GXOOO+OQYOY*GXOYO+GXOYY
C (0,115)
      C1033 = OQZZ*GXOOO+OQZOZ*GXOZO+GXOZZ
C (0,116)
      C2011 = OQXX*GYOOO+OQXOX*GXOYO+GYOXX
C (0,117)
      C2022 = OQYY*GYOOO+OQYOY*GYOYO+GYOYY
C (0,118)
      C2033 = OQZZ*GYOOO+OQZOZ*GYOZO+GYOZZ
C (0,119)
      C3011 = OQXX*GZOOO+OQXOX*GXOZO+GZOXX
C (0,120)
      C3022 = OQYY*GZOOO+OQYOY*GYOZO+GZOYY
C (0,121)
      C3033 = OQZZ*GZOOO+OQZOZ*GZOZO+GZOZZ
C (0,122)
      C1012 = OQXY*GXOOO+OQXO*GXOYO+OQOY*GXOXO+GYOXX
C (0,123)
      C1013 = OQXZ*GXOOO+OQXO*GXOZO+OQOZ*GXOXO+GZOXX
C (0,124)
      C1021 = OQYX*GXOOO+OQYO*GXOXO+OQOX*GXOYO+GYOXX
C (0,125)
      C1023 = OQYZ*GXOOO+OQYO*GXOZO+OQOZ*GXOYO+GXOYZ
C (0,126)
      C1031 = OQZX*GXOOO+OQZO*GXOXO+OQOX*GXOZO+GZOXX
C (0,127)
      C1032 = OQZY*GXOOO+OQZO*GXOYO+OQOY*GXOZO+GXOYZ
C (0,128)
      C2012 = OQXY*GYOOO+OQXO*GYOYO+OQOY*GXOYO+GXOYY
C (0,129)
      C2013 = OQXZ*GYOOO+OQXO*GYOZO+OQOZ*GXOYO+GXOYZ
C (0,130)
      C2021 = OQYX*GYOOO+OQYO*GXOYO+OQOX*GYOYO+GXOYY
C (0,131)
      C2023 = OQYZ*GYOOO+OQYO*GYOZO+OQOZ*GYOYO+GZOYY
C (0,132)
      C2031 = OQZX*GYOOO+OQZO*GXOYO+OQOX*GYOZO+GXOYZ
C (0,133)
      C2032 = OQZY*GYOOO+OQZO*GYOYO+OQOY*GYOZO+GZOYY
C (0,134)
      C3012 = OQXY*GZOOO+OQXO*GYOZO+OQOY*GXOZO+GXOYZ
C (0,135)
      C3013 = OQXZ*GZOOO+OQXO*GZOZO+OQOZ*GXOZO+GXOZZ
C (0,136)
      C3021 = OQYX*GZOOO+OQYO*GXOZO+OQOX*GYOZO+GXOYZ
C (0,137)
      C3023 = OQYZ*GZOOO+OQYO*GZOZO+OQOZ*GYOZO+GYOZZ
C (0,138)
      C3031 = OQZX*GZOOO+OQZO*GXOZO+OQOX*GZOZO+GXOZZ
C (0,139)
      C3032 = OQZY*GZOOO+OQZO*GYOZO+OQOY*GZOZO+GYOZZ
C (0,140)
      V0111 = OPOX*V0011+C1011
C (0,141)
      V0112 = OPOX*V0012+C1012
C (0,142)
      V0113 = OPOX*V0013+C1013
C (0,143)
      V0121 = OPOX*V0021+C1021
C (0,144)
      V0122 = OPOX*V0022+C1022
C (0,145)
      V0123 = OPOX*V0023+C1023
C (0,146)
      V0131 = OPOX*V0031+C1031
C (0,147)
      V0132 = OPOX*V0032+C1032
C (0,148)
      V0133 = OPOX*V0033+C1033
C (0,149)
      V0211 = OPOY*V0011+C2011
C (0,150)
      V0212 = OPOY*V0012+C2012
C (0,151)
      V0213 = OPOY*V0013+C2013
C (0,152)
      V0221 = OPOY*V0021+C2021
C (0,153)
      V0222 = OPOY*V0022+C2022
C (0,154)
      V0223 = OPOY*V0023+C2023
C (0,155)
      V0231 = OPOY*V0031+C2031
C (0,156)
      V0232 = OPOY*V0032+C2032
C (0,157)
      V0233 = OPOY*V0033+C2033
C (0,158)
      V0311 = OPOZ*V0011+C3011
C (0,159)
      V0312 = OPOZ*V0012+C3012
C (0,160)
      V0313 = OPOZ*V0013+C3013
C (0,161)
      V0321 = OPOZ*V0021+C3021
C (0,162)
      V0322 = OPOZ*V0022+C3022
C (0,163)
      V0323 = OPOZ*V0023+C3023
C (0,164)
      V0331 = OPOZ*V0031+C3031
C (0,165)
      V0332 = OPOZ*V0032+C3032
C (0,166)
      V0333 = OPOZ*V0033+C3033
C (0,167)
      VE00 = VE00+(V0111*E(22)+V0112*E(23)+V0113*E(24)+V0121*E(26)+
     &V0122*E(27)+V0123*E(28)+V0131*E(30)+V0132*E(31)+V0133*E(32)+
     &V0211*E(38)+V0212*E(39)+V0213*E(40)+V0221*E(42)+V0222*E(43)+
     &V0223*E(44)+V0231*E(46)+V0232*E(47)+V0233*E(48)+V0311*E(54)+
     &V0312*E(55)+V0313*E(56)+V0321*E(58)+V0322*E(59)+V0323*E(60)+
     &V0331*E(62)+V0332*E(63)+V0333*E(64))*CSPPP
C (0,168)
      VE14 = VE14+(V0110*E(22)+V0120*E(26)+V0130*E(30)+V0210*E(38)+
     &V0220*E(42)+V0230*E(46)+V0310*E(54)+V0320*E(58)+V0330*E(62))*
     &CSPPP
C (0,169)
      VE24 = VE24+(V0110*E(23)+V0120*E(27)+V0130*E(31)+V0210*E(39)+
     &V0220*E(43)+V0230*E(47)+V0310*E(55)+V0320*E(59)+V0330*E(63))*
     &CSPPP
C (0,170)
      VE34 = VE34+(V0110*E(24)+V0120*E(28)+V0130*E(32)+V0210*E(40)+
     &V0220*E(44)+V0230*E(48)+V0310*E(56)+V0320*E(60)+V0330*E(64))*
     &CSPPP
C (0,171)
      VE13 = VE13+(V0101*E(22)+V0102*E(23)+V0103*E(24)+V0201*E(38)+
     &V0202*E(39)+V0203*E(40)+V0301*E(54)+V0302*E(55)+V0303*E(56))*
     &CSPPP
C (0,172)
      VE23 = VE23+(V0101*E(26)+V0102*E(27)+V0103*E(28)+V0201*E(42)+
     &V0202*E(43)+V0203*E(44)+V0301*E(58)+V0302*E(59)+V0303*E(60))*
     &CSPPP
C (0,173)
      VE33 = VE33+(V0101*E(30)+V0102*E(31)+V0103*E(32)+V0201*E(46)+
     &V0202*E(47)+V0203*E(48)+V0301*E(62)+V0302*E(63)+V0303*E(64))*
     &CSPPP
C (0,174)
      VE12 = VE12+(V0011*E(22)+V0012*E(23)+V0013*E(24)+V0021*E(26)+
     &V0022*E(27)+V0023*E(28)+V0031*E(30)+V0032*E(31)+V0033*E(32))*
     &CSPPP
C (0,175)
      VE22 = VE22+(V0011*E(38)+V0012*E(39)+V0013*E(40)+V0021*E(42)+
     &V0022*E(43)+V0023*E(44)+V0031*E(46)+V0032*E(47)+V0033*E(48))*
     &CSPPP
C (0,176)
      VE32 = VE32+(V0011*E(54)+V0012*E(55)+V0013*E(56)+V0021*E(58)+
     &V0022*E(59)+V0023*E(60)+V0031*E(62)+V0032*E(63)+V0033*E(64))*
     &CSPPP
C (0,177)
      V1011 = OPXO*V0011+C1011
C (0,178)
      V1012 = OPXO*V0012+C1012
C (0,179)
      V1013 = OPXO*V0013+C1013
C (0,180)
      V1021 = OPXO*V0021+C1021
C (0,181)
      V1022 = OPXO*V0022+C1022
C (0,182)
      V1023 = OPXO*V0023+C1023
C (0,183)
      V1031 = OPXO*V0031+C1031
C (0,184)
      V1032 = OPXO*V0032+C1032
C (0,185)
      V1033 = OPXO*V0033+C1033
C (0,186)
      V2011 = OPYO*V0011+C2011
C (0,187)
      V2012 = OPYO*V0012+C2012
C (0,188)
      V2013 = OPYO*V0013+C2013
C (0,189)
      V2021 = OPYO*V0021+C2021
C (0,190)
      V2022 = OPYO*V0022+C2022
C (0,191)
      V2023 = OPYO*V0023+C2023
C (0,192)
      V2031 = OPYO*V0031+C2031
C (0,193)
      V2032 = OPYO*V0032+C2032
C (0,194)
      V2033 = OPYO*V0033+C2033
C (0,195)
      V3011 = OPZO*V0011+C3011
C (0,196)
      V3012 = OPZO*V0012+C3012
C (0,197)
      V3013 = OPZO*V0013+C3013
C (0,198)
      V3021 = OPZO*V0021+C3021
C (0,199)
      V3022 = OPZO*V0022+C3022
C (0,200)
      V3023 = OPZO*V0023+C3023
C (0,201)
      V3031 = OPZO*V0031+C3031
C (0,202)
      V3032 = OPZO*V0032+C3032
C (0,203)
      V3033 = OPZO*V0033+C3033
C (0,204)
      VE00 = VE00+(V1011*E(70)+V1012*E(71)+V1013*E(72)+V1021*E(74)+
     &V1022*E(75)+V1023*E(76)+V1031*E(78)+V1032*E(79)+V1033*E(80)+
     &V2011*E(134)+V2012*E(135)+V2013*E(136)+V2021*E(138)+V2022*E(139
     &)+V2023*E(140)+V2031*E(142)+V2032*E(143)+V2033*E(144)+V3011*E(
     &198)+V3012*E(199)+V3013*E(200)+V3021*E(202)+V3022*E(203)+V3023*
     &E(204)+V3031*E(206)+V3032*E(207)+V3033*E(208))*CPSPP
C (0,205)
      VE14 = VE14+(V1010*E(70)+V1020*E(74)+V1030*E(78)+V2010*E(134)+
     &V2020*E(138)+V2030*E(142)+V3010*E(198)+V3020*E(202)+V3030*E(206
     &))*CPSPP
C (0,206)
      VE24 = VE24+(V1010*E(71)+V1020*E(75)+V1030*E(79)+V2010*E(135)+
     &V2020*E(139)+V2030*E(143)+V3010*E(199)+V3020*E(203)+V3030*E(207
     &))*CPSPP
C (0,207)
      VE34 = VE34+(V1010*E(72)+V1020*E(76)+V1030*E(80)+V2010*E(136)+
     &V2020*E(140)+V2030*E(144)+V3010*E(200)+V3020*E(204)+V3030*E(208
     &))*CPSPP
C (0,208)
      VE13 = VE13+(V1001*E(70)+V1002*E(71)+V1003*E(72)+V2001*E(134)+
     &V2002*E(135)+V2003*E(136)+V3001*E(198)+V3002*E(199)+V3003*E(200
     &))*CPSPP
C (0,209)
      VE23 = VE23+(V1001*E(74)+V1002*E(75)+V1003*E(76)+V2001*E(138)+
     &V2002*E(139)+V2003*E(140)+V3001*E(202)+V3002*E(203)+V3003*E(204
     &))*CPSPP
C (0,210)
      VE33 = VE33+(V1001*E(78)+V1002*E(79)+V1003*E(80)+V2001*E(142)+
     &V2002*E(143)+V2003*E(144)+V3001*E(206)+V3002*E(207)+V3003*E(208
     &))*CPSPP
C (0,211)
      VE11 = VE11+(V0011*E(70)+V0012*E(71)+V0013*E(72)+V0021*E(74)+
     &V0022*E(75)+V0023*E(76)+V0031*E(78)+V0032*E(79)+V0033*E(80))*
     &CPSPP
C (0,212)
      VE21 = VE21+(V0011*E(134)+V0012*E(135)+V0013*E(136)+V0021*E(138
     &)+V0022*E(139)+V0023*E(140)+V0031*E(142)+V0032*E(143)+V0033*E(
     &144))*CPSPP
C (0,213)
      VE31 = VE31+(V0011*E(198)+V0012*E(199)+V0013*E(200)+V0021*E(202
     &)+V0022*E(203)+V0023*E(204)+V0031*E(206)+V0032*E(207)+V0033*E(
     &208))*CPSPP
C (0,214)
      QFQ4 = (QA1*QA2)**2*FQ4
C (0,215)
      TEMP = A1234I**2
C (0,216)
      HFQ3 = H*QA*FQ3*TEMP
C (0,217)
      TFQ3 = THREE*HFQ3
C (0,218)
      SFQ3 = TFQ3+TFQ3
C (0,219)
      P25FQ2 = P25*FQ2*TEMP
C (0,220)
      P75FQ2 = THREE*P25FQ2
C (0,221)
      TEMP = PQXX*QFQ4
C (0,222)
      GXXXX = PQXX*(TEMP-SFQ3)+P75FQ2
C (0,223)
      GYXXX = PQXY*(TEMP-TFQ3)
C (0,224)
      GZXXX = PQXZ*(TEMP-TFQ3)
C (0,225)
      GZYXX = PQYZ*(TEMP-HFQ3)
C (0,226)
      GYYXX = PQYY*(TEMP-HFQ3)-PQXX*HFQ3+P25FQ2
C (0,227)
      TEMP = PQYY*QFQ4
C (0,228)
      GYYYY = PQYY*(TEMP-SFQ3)+P75FQ2
C (0,229)
      GXYYY = PQXY*(TEMP-TFQ3)
C (0,230)
      GZXYY = PQXZ*(TEMP-HFQ3)
C (0,231)
      GZYYY = PQYZ*(TEMP-TFQ3)
C (0,232)
      GZZYY = PQZZ*(TEMP-HFQ3)-PQYY*HFQ3+P25FQ2
C (0,233)
      TEMP = PQZZ*QFQ4
C (0,234)
      GZZZZ = PQZZ*(TEMP-SFQ3)+P75FQ2
C (0,235)
      GXYZZ = PQXY*(TEMP-HFQ3)
C (0,236)
      GXZZZ = PQXZ*(TEMP-TFQ3)
C (0,237)
      GYZZZ = PQYZ*(TEMP-TFQ3)
C (0,238)
      GXXZZ = PQXX*(TEMP-HFQ3)-PQZZ*HFQ3+P25FQ2
C (0,239)
C      1111 
      VP4 = (OPXX*V0011+OPXOX*C1011+OQXX*GXXOO+OQXOX*GXXXO+GXXXX)*E(
     &86)
C (0,240)
C      1112 
      VP4 = (OPXX*V0012+OPXOX*C1012+OQXY*GXXOO+OQXO*GXXYO+OQOY*GXXXO+
     &GXXXY)*E(87)+VP4
C (0,241)
C      1113 
      VP4 = (OPXX*V0013+OPXOX*C1013+OQXZ*GXXOO+OQXO*GXXZO+OQOZ*GXXXO+
     &GXXXZ)*E(88)+VP4
C (0,242)
C      1121 
      VP4 = (OPXX*V0021+OPXOX*C1021+OQYX*GXXOO+OQYO*GXXXO+OQOX*GXXYO+
     &GXXYX)*E(90)+VP4
C (0,243)
C      1122 
      VP4 = (OPXX*V0022+OPXOX*C1022+OQYY*GXXOO+OQYOY*GXXYO+GXXYY)*E(
     &91)+VP4
C (0,244)
C      1123 
      VP4 = (OPXX*V0023+OPXOX*C1023+OQYZ*GXXOO+OQYO*GXXZO+OQOZ*GXXYO+
     &GXXYZ)*E(92)+VP4
C (0,245)
C      1131 
      VP4 = (OPXX*V0031+OPXOX*C1031+OQZX*GXXOO+OQZO*GXXXO+OQOX*GXXZO+
     &GXXZX)*E(94)+VP4
C (0,246)
C      1132 
      VP4 = (OPXX*V0032+OPXOX*C1032+OQZY*GXXOO+OQZO*GXXYO+OQOY*GXXZO+
     &GXXZY)*E(95)+VP4
C (0,247)
C      1133 
      VP4 = (OPXX*V0033+OPXOX*C1033+OQZZ*GXXOO+OQZOZ*GXXZO+GXXZZ)*E(
     &96)+VP4
C (0,248)
C      1211 
      VP4 = (OPXY*V0011+OPXO*C2011+OPOY*C1011+OQXX*GXYOO+OQXOX*GXYXO+
     &GXYXX)*E(102)+VP4
C (0,249)
C      1212 
      VP4 = (OPXY*V0012+OPXO*C2012+OPOY*C1012+OQXY*GXYOO+OQXO*GXYYO+
     &OQOY*GXYXO+GXYXY)*E(103)+VP4
C (0,250)
C      1213 
      VP4 = (OPXY*V0013+OPXO*C2013+OPOY*C1013+OQXZ*GXYOO+OQXO*GXYZO+
     &OQOZ*GXYXO+GXYXZ)*E(104)+VP4
C (0,251)
C      1221 
      VP4 = (OPXY*V0021+OPXO*C2021+OPOY*C1021+OQYX*GXYOO+OQYO*GXYXO+
     &OQOX*GXYYO+GXYYX)*E(106)+VP4
C (0,252)
C      1222 
      VP4 = (OPXY*V0022+OPXO*C2022+OPOY*C1022+OQYY*GXYOO+OQYOY*GXYYO+
     &GXYYY)*E(107)+VP4
C (0,253)
C      1223 
      VP4 = (OPXY*V0023+OPXO*C2023+OPOY*C1023+OQYZ*GXYOO+OQYO*GXYZO+
     &OQOZ*GXYYO+GXYYZ)*E(108)+VP4
C (0,254)
C      1231 
      VP4 = (OPXY*V0031+OPXO*C2031+OPOY*C1031+OQZX*GXYOO+OQZO*GXYXO+
     &OQOX*GXYZO+GXYZX)*E(110)+VP4
C (0,255)
C      1232 
      VP4 = (OPXY*V0032+OPXO*C2032+OPOY*C1032+OQZY*GXYOO+OQZO*GXYYO+
     &OQOY*GXYZO+GXYZY)*E(111)+VP4
C (0,256)
C      1233 
      VP4 = (OPXY*V0033+OPXO*C2033+OPOY*C1033+OQZZ*GXYOO+OQZOZ*GXYZO+
     &GXYZZ)*E(112)+VP4
C (0,257)
C      1311 
      VP4 = (OPXZ*V0011+OPXO*C3011+OPOZ*C1011+OQXX*GXZOO+OQXOX*GXZXO+
     &GXZXX)*E(118)+VP4
C (0,258)
C      1312 
      VP4 = (OPXZ*V0012+OPXO*C3012+OPOZ*C1012+OQXY*GXZOO+OQXO*GXZYO+
     &OQOY*GXZXO+GXZXY)*E(119)+VP4
C (0,259)
C      1313 
      VP4 = (OPXZ*V0013+OPXO*C3013+OPOZ*C1013+OQXZ*GXZOO+OQXO*GXZZO+
     &OQOZ*GXZXO+GXZXZ)*E(120)+VP4
C (0,260)
C      1321 
      VP4 = (OPXZ*V0021+OPXO*C3021+OPOZ*C1021+OQYX*GXZOO+OQYO*GXZXO+
     &OQOX*GXZYO+GXZYX)*E(122)+VP4
C (0,261)
C      1322 
      VP4 = (OPXZ*V0022+OPXO*C3022+OPOZ*C1022+OQYY*GXZOO+OQYOY*GXZYO+
     &GXZYY)*E(123)+VP4
C (0,262)
C      1323 
      VP4 = (OPXZ*V0023+OPXO*C3023+OPOZ*C1023+OQYZ*GXZOO+OQYO*GXZZO+
     &OQOZ*GXZYO+GXZYZ)*E(124)+VP4
C (0,263)
C      1331 
      VP4 = (OPXZ*V0031+OPXO*C3031+OPOZ*C1031+OQZX*GXZOO+OQZO*GXZXO+
     &OQOX*GXZZO+GXZZX)*E(126)+VP4
C (0,264)
C      1332 
      VP4 = (OPXZ*V0032+OPXO*C3032+OPOZ*C1032+OQZY*GXZOO+OQZO*GXZYO+
     &OQOY*GXZZO+GXZZY)*E(127)+VP4
C (0,265)
C      1333 
      VP4 = (OPXZ*V0033+OPXO*C3033+OPOZ*C1033+OQZZ*GXZOO+OQZOZ*GXZZO+
     &GXZZZ)*E(128)+VP4
C (0,266)
C      2111 
      VP4 = (OPYX*V0011+OPYO*C1011+OPOX*C2011+OQXX*GYXOO+OQXOX*GYXXO+
     &GYXXX)*E(150)+VP4
C (0,267)
C      2112 
      VP4 = (OPYX*V0012+OPYO*C1012+OPOX*C2012+OQXY*GYXOO+OQXO*GYXYO+
     &OQOY*GYXXO+GYXXY)*E(151)+VP4
C (0,268)
C      2113 
      VP4 = (OPYX*V0013+OPYO*C1013+OPOX*C2013+OQXZ*GYXOO+OQXO*GYXZO+
     &OQOZ*GYXXO+GYXXZ)*E(152)+VP4
C (0,269)
C      2121 
      VP4 = (OPYX*V0021+OPYO*C1021+OPOX*C2021+OQYX*GYXOO+OQYO*GYXXO+
     &OQOX*GYXYO+GYXYX)*E(154)+VP4
C (0,270)
C      2122 
      VP4 = (OPYX*V0022+OPYO*C1022+OPOX*C2022+OQYY*GYXOO+OQYOY*GYXYO+
     &GYXYY)*E(155)+VP4
C (0,271)
C      2123 
      VP4 = (OPYX*V0023+OPYO*C1023+OPOX*C2023+OQYZ*GYXOO+OQYO*GYXZO+
     &OQOZ*GYXYO+GYXYZ)*E(156)+VP4
C (0,272)
C      2131 
      VP4 = (OPYX*V0031+OPYO*C1031+OPOX*C2031+OQZX*GYXOO+OQZO*GYXXO+
     &OQOX*GYXZO+GYXZX)*E(158)+VP4
C (0,273)
C      2132 
      VP4 = (OPYX*V0032+OPYO*C1032+OPOX*C2032+OQZY*GYXOO+OQZO*GYXYO+
     &OQOY*GYXZO+GYXZY)*E(159)+VP4
C (0,274)
C      2133 
      VP4 = (OPYX*V0033+OPYO*C1033+OPOX*C2033+OQZZ*GYXOO+OQZOZ*GYXZO+
     &GYXZZ)*E(160)+VP4
C (0,275)
C      2211 
      VP4 = (OPYY*V0011+OPYOY*C2011+OQXX*GYYOO+OQXOX*GYYXO+GYYXX)*E(
     &166)+VP4
C (0,276)
C      2212 
      VP4 = (OPYY*V0012+OPYOY*C2012+OQXY*GYYOO+OQXO*GYYYO+OQOY*GYYXO+
     &GYYXY)*E(167)+VP4
C (0,277)
C      2213 
      VP4 = (OPYY*V0013+OPYOY*C2013+OQXZ*GYYOO+OQXO*GYYZO+OQOZ*GYYXO+
     &GYYXZ)*E(168)+VP4
C (0,278)
C      2221 
      VP4 = (OPYY*V0021+OPYOY*C2021+OQYX*GYYOO+OQYO*GYYXO+OQOX*GYYYO+
     &GYYYX)*E(170)+VP4
C (0,279)
C      2222 
      VP4 = (OPYY*V0022+OPYOY*C2022+OQYY*GYYOO+OQYOY*GYYYO+GYYYY)*E(
     &171)+VP4
C (0,280)
C      2223 
      VP4 = (OPYY*V0023+OPYOY*C2023+OQYZ*GYYOO+OQYO*GYYZO+OQOZ*GYYYO+
     &GYYYZ)*E(172)+VP4
C (0,281)
C      2231 
      VP4 = (OPYY*V0031+OPYOY*C2031+OQZX*GYYOO+OQZO*GYYXO+OQOX*GYYZO+
     &GYYZX)*E(174)+VP4
C (0,282)
C      2232 
      VP4 = (OPYY*V0032+OPYOY*C2032+OQZY*GYYOO+OQZO*GYYYO+OQOY*GYYZO+
     &GYYZY)*E(175)+VP4
C (0,283)
C      2233 
      VP4 = (OPYY*V0033+OPYOY*C2033+OQZZ*GYYOO+OQZOZ*GYYZO+GYYZZ)*E(
     &176)+VP4
C (0,284)
C      2311 
      VP4 = (OPYZ*V0011+OPYO*C3011+OPOZ*C2011+OQXX*GYZOO+OQXOX*GYZXO+
     &GYZXX)*E(182)+VP4
C (0,285)
C      2312 
      VP4 = (OPYZ*V0012+OPYO*C3012+OPOZ*C2012+OQXY*GYZOO+OQXO*GYZYO+
     &OQOY*GYZXO+GYZXY)*E(183)+VP4
C (0,286)
C      2313 
      VP4 = (OPYZ*V0013+OPYO*C3013+OPOZ*C2013+OQXZ*GYZOO+OQXO*GYZZO+
     &OQOZ*GYZXO+GYZXZ)*E(184)+VP4
C (0,287)
C      2321 
      VP4 = (OPYZ*V0021+OPYO*C3021+OPOZ*C2021+OQYX*GYZOO+OQYO*GYZXO+
     &OQOX*GYZYO+GYZYX)*E(186)+VP4
C (0,288)
C      2322 
      VP4 = (OPYZ*V0022+OPYO*C3022+OPOZ*C2022+OQYY*GYZOO+OQYOY*GYZYO+
     &GYZYY)*E(187)+VP4
C (0,289)
C      2323 
      VP4 = (OPYZ*V0023+OPYO*C3023+OPOZ*C2023+OQYZ*GYZOO+OQYO*GYZZO+
     &OQOZ*GYZYO+GYZYZ)*E(188)+VP4
C (0,290)
C      2331 
      VP4 = (OPYZ*V0031+OPYO*C3031+OPOZ*C2031+OQZX*GYZOO+OQZO*GYZXO+
     &OQOX*GYZZO+GYZZX)*E(190)+VP4
C (0,291)
C      2332 
      VP4 = (OPYZ*V0032+OPYO*C3032+OPOZ*C2032+OQZY*GYZOO+OQZO*GYZYO+
     &OQOY*GYZZO+GYZZY)*E(191)+VP4
C (0,292)
C      2333 
      VP4 = (OPYZ*V0033+OPYO*C3033+OPOZ*C2033+OQZZ*GYZOO+OQZOZ*GYZZO+
     &GYZZZ)*E(192)+VP4
C (0,293)
C      3111 
      VP4 = (OPZX*V0011+OPZO*C1011+OPOX*C3011+OQXX*GZXOO+OQXOX*GZXXO+
     &GZXXX)*E(214)+VP4
C (0,294)
C      3112 
      VP4 = (OPZX*V0012+OPZO*C1012+OPOX*C3012+OQXY*GZXOO+OQXO*GZXYO+
     &OQOY*GZXXO+GZXXY)*E(215)+VP4
C (0,295)
C      3113 
      VP4 = (OPZX*V0013+OPZO*C1013+OPOX*C3013+OQXZ*GZXOO+OQXO*GZXZO+
     &OQOZ*GZXXO+GZXXZ)*E(216)+VP4
C (0,296)
C      3121 
      VP4 = (OPZX*V0021+OPZO*C1021+OPOX*C3021+OQYX*GZXOO+OQYO*GZXXO+
     &OQOX*GZXYO+GZXYX)*E(218)+VP4
C (0,297)
C      3122 
      VP4 = (OPZX*V0022+OPZO*C1022+OPOX*C3022+OQYY*GZXOO+OQYOY*GZXYO+
     &GZXYY)*E(219)+VP4
C (0,298)
C      3123 
      VP4 = (OPZX*V0023+OPZO*C1023+OPOX*C3023+OQYZ*GZXOO+OQYO*GZXZO+
     &OQOZ*GZXYO+GZXYZ)*E(220)+VP4
C (0,299)
C      3131 
      VP4 = (OPZX*V0031+OPZO*C1031+OPOX*C3031+OQZX*GZXOO+OQZO*GZXXO+
     &OQOX*GZXZO+GZXZX)*E(222)+VP4
C (0,300)
C      3132 
      VP4 = (OPZX*V0032+OPZO*C1032+OPOX*C3032+OQZY*GZXOO+OQZO*GZXYO+
     &OQOY*GZXZO+GZXZY)*E(223)+VP4
C (0,301)
C      3133 
      VP4 = (OPZX*V0033+OPZO*C1033+OPOX*C3033+OQZZ*GZXOO+OQZOZ*GZXZO+
     &GZXZZ)*E(224)+VP4
C (0,302)
C      3211 
      VP4 = (OPZY*V0011+OPZO*C2011+OPOY*C3011+OQXX*GZYOO+OQXOX*GZYXO+
     &GZYXX)*E(230)+VP4
C (0,303)
C      3212 
      VP4 = (OPZY*V0012+OPZO*C2012+OPOY*C3012+OQXY*GZYOO+OQXO*GZYYO+
     &OQOY*GZYXO+GZYXY)*E(231)+VP4
C (0,304)
C      3213 
      VP4 = (OPZY*V0013+OPZO*C2013+OPOY*C3013+OQXZ*GZYOO+OQXO*GZYZO+
     &OQOZ*GZYXO+GZYXZ)*E(232)+VP4
C (0,305)
C      3221 
      VP4 = (OPZY*V0021+OPZO*C2021+OPOY*C3021+OQYX*GZYOO+OQYO*GZYXO+
     &OQOX*GZYYO+GZYYX)*E(234)+VP4
C (0,306)
C      3222 
      VP4 = (OPZY*V0022+OPZO*C2022+OPOY*C3022+OQYY*GZYOO+OQYOY*GZYYO+
     &GZYYY)*E(235)+VP4
C (0,307)
C      3223 
      VP4 = (OPZY*V0023+OPZO*C2023+OPOY*C3023+OQYZ*GZYOO+OQYO*GZYZO+
     &OQOZ*GZYYO+GZYYZ)*E(236)+VP4
C (0,308)
C      3231 
      VP4 = (OPZY*V0031+OPZO*C2031+OPOY*C3031+OQZX*GZYOO+OQZO*GZYXO+
     &OQOX*GZYZO+GZYZX)*E(238)+VP4
C (0,309)
C      3232 
      VP4 = (OPZY*V0032+OPZO*C2032+OPOY*C3032+OQZY*GZYOO+OQZO*GZYYO+
     &OQOY*GZYZO+GZYZY)*E(239)+VP4
C (0,310)
C      3233 
      VP4 = (OPZY*V0033+OPZO*C2033+OPOY*C3033+OQZZ*GZYOO+OQZOZ*GZYZO+
     &GZYZZ)*E(240)+VP4
C (0,311)
C      3311 
      VP4 = (OPZZ*V0011+OPZOZ*C3011+OQXX*GZZOO+OQXOX*GZZXO+GZZXX)*E(
     &246)+VP4
C (0,312)
C      3312 
      VP4 = (OPZZ*V0012+OPZOZ*C3012+OQXY*GZZOO+OQXO*GZZYO+OQOY*GZZXO+
     &GZZXY)*E(247)+VP4
C (0,313)
C      3313 
      VP4 = (OPZZ*V0013+OPZOZ*C3013+OQXZ*GZZOO+OQXO*GZZZO+OQOZ*GZZXO+
     &GZZXZ)*E(248)+VP4
C (0,314)
C      3321 
      VP4 = (OPZZ*V0021+OPZOZ*C3021+OQYX*GZZOO+OQYO*GZZXO+OQOX*GZZYO+
     &GZZYX)*E(250)+VP4
C (0,315)
C      3322 
      VP4 = (OPZZ*V0022+OPZOZ*C3022+OQYY*GZZOO+OQYOY*GZZYO+GZZYY)*E(
     &251)+VP4
C (0,316)
C      3323 
      VP4 = (OPZZ*V0023+OPZOZ*C3023+OQYZ*GZZOO+OQYO*GZZZO+OQOZ*GZZYO+
     &GZZYZ)*E(252)+VP4
C (0,317)
C      3331 
      VP4 = (OPZZ*V0031+OPZOZ*C3031+OQZX*GZZOO+OQZO*GZZXO+OQOX*GZZZO+
     &GZZZX)*E(254)+VP4
C (0,318)
C      3332 
      VP4 = (OPZZ*V0032+OPZOZ*C3032+OQZY*GZZOO+OQZO*GZZYO+OQOY*GZZZO+
     &GZZZY)*E(255)+VP4
C (0,319)
C      3333 
      VP4 = (OPZZ*V0033+OPZOZ*C3033+OQZZ*GZZOO+OQZOZ*GZZZO+GZZZZ)*E(
     &256)+VP4
C (0,320)
      VPPPP = VP4*CPPPP
C (0,321)
      VE00 = VE00+VPPPP
C (0,322)
      VE14 = VE14+(V1110*E(86)+V1120*E(90)+V1130*E(94)+V1210*E(102)+
     &V1220*E(106)+V1230*E(110)+V1310*E(118)+V1320*E(122)+V1330*E(126
     &)+V2110*E(150)+V2120*E(154)+V2130*E(158)+V2210*E(166)+V2220*E(
     &170)+V2230*E(174)+V2310*E(182)+V2320*E(186)+V2330*E(190)+V3110*
     &E(214)+V3120*E(218)+V3130*E(222)+V3210*E(230)+V3220*E(234)+
     &V3230*E(238)+V3310*E(246)+V3320*E(250)+V3330*E(254))*CPPPP
C (0,323)
      VE24 = VE24+(V1110*E(87)+V1120*E(91)+V1130*E(95)+V1210*E(103)+
     &V1220*E(107)+V1230*E(111)+V1310*E(119)+V1320*E(123)+V1330*E(127
     &)+V2110*E(151)+V2120*E(155)+V2130*E(159)+V2210*E(167)+V2220*E(
     &171)+V2230*E(175)+V2310*E(183)+V2320*E(187)+V2330*E(191)+V3110*
     &E(215)+V3120*E(219)+V3130*E(223)+V3210*E(231)+V3220*E(235)+
     &V3230*E(239)+V3310*E(247)+V3320*E(251)+V3330*E(255))*CPPPP
C (0,324)
      VE34 = VE34+(V1110*E(88)+V1120*E(92)+V1130*E(96)+V1210*E(104)+
     &V1220*E(108)+V1230*E(112)+V1310*E(120)+V1320*E(124)+V1330*E(128
     &)+V2110*E(152)+V2120*E(156)+V2130*E(160)+V2210*E(168)+V2220*E(
     &172)+V2230*E(176)+V2310*E(184)+V2320*E(188)+V2330*E(192)+V3110*
     &E(216)+V3120*E(220)+V3130*E(224)+V3210*E(232)+V3220*E(236)+
     &V3230*E(240)+V3310*E(248)+V3320*E(252)+V3330*E(256))*CPPPP
C (0,325)
      VE13 = VE13+(V1101*E(86)+V1102*E(87)+V1103*E(88)+V1201*E(102)+
     &V1202*E(103)+V1203*E(104)+V1301*E(118)+V1302*E(119)+V1303*E(120
     &)+V2101*E(150)+V2102*E(151)+V2103*E(152)+V2201*E(166)+V2202*E(
     &167)+V2203*E(168)+V2301*E(182)+V2302*E(183)+V2303*E(184)+V3101*
     &E(214)+V3102*E(215)+V3103*E(216)+V3201*E(230)+V3202*E(231)+
     &V3203*E(232)+V3301*E(246)+V3302*E(247)+V3303*E(248))*CPPPP
C (0,326)
      VE23 = VE23+(V1101*E(90)+V1102*E(91)+V1103*E(92)+V1201*E(106)+
     &V1202*E(107)+V1203*E(108)+V1301*E(122)+V1302*E(123)+V1303*E(124
     &)+V2101*E(154)+V2102*E(155)+V2103*E(156)+V2201*E(170)+V2202*E(
     &171)+V2203*E(172)+V2301*E(186)+V2302*E(187)+V2303*E(188)+V3101*
     &E(218)+V3102*E(219)+V3103*E(220)+V3201*E(234)+V3202*E(235)+
     &V3203*E(236)+V3301*E(250)+V3302*E(251)+V3303*E(252))*CPPPP
C (0,327)
      VE33 = VE33+(V1101*E(94)+V1102*E(95)+V1103*E(96)+V1201*E(110)+
     &V1202*E(111)+V1203*E(112)+V1301*E(126)+V1302*E(127)+V1303*E(128
     &)+V2101*E(158)+V2102*E(159)+V2103*E(160)+V2201*E(174)+V2202*E(
     &175)+V2203*E(176)+V2301*E(190)+V2302*E(191)+V2303*E(192)+V3101*
     &E(222)+V3102*E(223)+V3103*E(224)+V3201*E(238)+V3202*E(239)+
     &V3203*E(240)+V3301*E(254)+V3302*E(255)+V3303*E(256))*CPPPP
C (0,328)
      VE12 = VE12+(V1011*E(86)+V1012*E(87)+V1013*E(88)+V1021*E(90)+
     &V1022*E(91)+V1023*E(92)+V1031*E(94)+V1032*E(95)+V1033*E(96)+
     &V2011*E(150)+V2012*E(151)+V2013*E(152)+V2021*E(154)+V2022*E(155
     &)+V2023*E(156)+V2031*E(158)+V2032*E(159)+V2033*E(160)+V3011*E(
     &214)+V3012*E(215)+V3013*E(216)+V3021*E(218)+V3022*E(219)+V3023*
     &E(220)+V3031*E(222)+V3032*E(223)+V3033*E(224))*CPPPP
C (0,329)
      VE22 = VE22+(V1011*E(102)+V1012*E(103)+V1013*E(104)+V1021*E(106
     &)+V1022*E(107)+V1023*E(108)+V1031*E(110)+V1032*E(111)+V1033*E(
     &112)+V2011*E(166)+V2012*E(167)+V2013*E(168)+V2021*E(170)+V2022*
     &E(171)+V2023*E(172)+V2031*E(174)+V2032*E(175)+V2033*E(176)+
     &V3011*E(230)+V3012*E(231)+V3013*E(232)+V3021*E(234)+V3022*E(235
     &)+V3023*E(236)+V3031*E(238)+V3032*E(239)+V3033*E(240))*CPPPP
C (0,330)
      VE32 = VE32+(V1011*E(118)+V1012*E(119)+V1013*E(120)+V1021*E(122
     &)+V1022*E(123)+V1023*E(124)+V1031*E(126)+V1032*E(127)+V1033*E(
     &128)+V2011*E(182)+V2012*E(183)+V2013*E(184)+V2021*E(186)+V2022*
     &E(187)+V2023*E(188)+V2031*E(190)+V2032*E(191)+V2033*E(192)+
     &V3011*E(246)+V3012*E(247)+V3013*E(248)+V3021*E(250)+V3022*E(251
     &)+V3023*E(252)+V3031*E(254)+V3032*E(255)+V3033*E(256))*CPPPP
C (0,331)
      VE11 = VE11+(V0111*E(86)+V0112*E(87)+V0113*E(88)+V0121*E(90)+
     &V0122*E(91)+V0123*E(92)+V0131*E(94)+V0132*E(95)+V0133*E(96)+
     &V0211*E(102)+V0212*E(103)+V0213*E(104)+V0221*E(106)+V0222*E(107
     &)+V0223*E(108)+V0231*E(110)+V0232*E(111)+V0233*E(112)+V0311*E(
     &118)+V0312*E(119)+V0313*E(120)+V0321*E(122)+V0322*E(123)+V0323*
     &E(124)+V0331*E(126)+V0332*E(127)+V0333*E(128))*CPPPP
C (0,332)
      VE21 = VE21+(V0111*E(150)+V0112*E(151)+V0113*E(152)+V0121*E(154
     &)+V0122*E(155)+V0123*E(156)+V0131*E(158)+V0132*E(159)+V0133*E(
     &160)+V0211*E(166)+V0212*E(167)+V0213*E(168)+V0221*E(170)+V0222*
     &E(171)+V0223*E(172)+V0231*E(174)+V0232*E(175)+V0233*E(176)+
     &V0311*E(182)+V0312*E(183)+V0313*E(184)+V0321*E(186)+V0322*E(187
     &)+V0323*E(188)+V0331*E(190)+V0332*E(191)+V0333*E(192))*CPPPP
C (0,333)
      VE31 = VE31+(V0111*E(214)+V0112*E(215)+V0113*E(216)+V0121*E(218
     &)+V0122*E(219)+V0123*E(220)+V0131*E(222)+V0132*E(223)+V0133*E(
     &224)+V0211*E(230)+V0212*E(231)+V0213*E(232)+V0221*E(234)+V0222*
     &E(235)+V0223*E(236)+V0231*E(238)+V0232*E(239)+V0233*E(240)+
     &V0311*E(246)+V0312*E(247)+V0313*E(248)+V0321*E(250)+V0322*E(251
     &)+V0323*E(252)+V0331*E(254)+V0332*E(255)+V0333*E(256))*CPPPP
C (0,334)
      RETURN
C     END BLOCK
      END
!!
!! file for gabs.f
!!
      FUNCTION GABS (ARG)
C
C     ABSOLUTE VALUE
C
      REAL*8 GABS,DABS,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GABS = DABS(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gacos.f
!!
      FUNCTION GACOS (ARG)
C
C     ARC COSINE
C
      REAL*8 GACOS,DACOS,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GACOS = DACOS(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gamgen.f
!!
*DECK GAMGEN
      SUBROUTINE GAMGEN
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/TABLE/C(1200,6)
      DIMENSION Y(410),F(9)
      DATA PT15/0.15D0/,PT05/0.05D0/,PT184/0.184D0/,SIX/6.0D0/,
     $     FOUR/4.0D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     INITIALIZE THE F(M,T) ROUTINE.
      CALL FMTSET(0, 0, 0)
C (0,3)
C
C     GENERATE THE DESIRED F(M,T) FOR THE COMPLETE RANGE.
C     WE WILL COMPUTE F(0,T) THROUGH F(4,T) IN THIS SECTION.
      T = -PT15
C (0,4)
!     INITIALLY: DO 10
      DO I = 1, 404
C (0,5)
C        BEGIN BLOCK
C (0,6)
         T = T+PT05
C (0,7)
         CALL FMTGEN(F, T, 6, ICK)
C (0,8)
C     COPY THE RETURNED VALUES INTO PLACES WHERE THEY CAN BE
C     REACHED LATER.
         C(I,2) = F(1)
C (0,9)
         C(I,3) = F(2)
C (0,10)
         C(I,4) = F(3)
C (0,11)
         C(I,5) = F(4)
C (0,12)
         C(I,6) = F(5)
C (0,13)
10       Y(I) = F(6)
C        END BLOCK
      ENDDO
C (0,14)
C
C     COMPUTE THE INTERPOLATION TABLE WITH THE VALUES AVAILABLE.
C     THIS IS SOMEWHAT COMPLICATED BY THE FACT THAT SOME OF THE
C     INTEGRALS ARE IN Y RATHER THAN IN C.
!     INITIALLY: DO 40
      DO K = 1, 6
C (0,15)
!     INITIALLY: DO 40
         DO I = 1, 400
C (0,16)
C           BEGIN BLOCK
C (0,17)
            J = I+2
C (0,18)
C           BEGIN UNSTRUCTURED
C (1,1)
C     K INDEXES THE VALUE OF M IN F(M,T).
C     I INDEXES THE INTERPOLATION TABLE (C).
C     J INDEXES THE STORED VALUES OF F(M,T).
C     IF K .EQ. 5, WE MUST USE ALTERNATE CODE BECAUSE THE INTEGRALS
C     ARE STORED IN Y.
            IF (K-6.EQ.0) GOTO 30
C (4,1)
C           BEGIN BLOCK
C (4,2)
C     INTEGRALS IN C, PROCEED AS NORMAL.
20          TEMP1 = C(J+1,K+1)+C(J-1,K+1)-(C(J,K+1)+C(J,K+1))
C (4,3)
            TEMP2 = SIX*C(J,K+1)-FOUR*(C(J+1,K+1)+C(J-1,K+1))+C(J-2,K
     &      +1)+C(J+2,K+1)
C (4,4)
            C(I,K) = C(J,K+1)
C (4,5)
            C(I+400,K) = C(J+1,K+1)-C(J,K+1)
C (4,6)
            C(I+800,K) = (TEMP1-PT184*TEMP2)/SIX
C           END BLOCK
            GOTO 40
C (2,1)
C           BEGIN BLOCK
C (2,2)
C     ALTERNATE CODE USING Y.
30          TEMP1 = Y(J+1)+Y(J-1)-(Y(J)+Y(J))
C (2,3)
            TEMP2 = SIX*Y(J)-FOUR*(Y(J+1)+Y(J-1))+Y(J-2)+Y(J+2)
C (2,4)
            C(I,K) = Y(J)
C (2,5)
            C(I+400,K) = Y(J+1)-Y(J)
C (2,6)
            C(I+800,K) = (TEMP1-PT184*TEMP2)/SIX
C           END BLOCK
C (3,1)
40          CONTINUE
C           END UNSTRUCTURED
C           END BLOCK
         ENDDO
      ENDDO
C (0,19)
      RETURN
C     END BLOCK
      END
!!
!! file for gasin.f
!!
      FUNCTION GASIN (ARG)
C
C     ARC SINE
C
      REAL*8 GASIN,DASIN,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GASIN = DASIN(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gatan.f
!!
      FUNCTION GATAN (ARG)
C
C     ARC TANGENT
C
      REAL*8 GATAN,DATAN,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GATAN = DATAN(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gatan2.f
!!
      FUNCTION GATAN2 (ARG1, ARG2)
C
C     ARC TANGENT ARG1/ARG2
C
      REAL*8 DATAN2,ARG1,ARG2
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GATAN2 = DATAN2(ARG1, ARG2)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gcabs.f
!!
      FUNCTION GCABS(C)
      IMPLICIT COMPLEX*16(A-H,O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     COMPLEX ABSOLUTE VALUE.
C
      GCABS = CDABS(C)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gcexp.f
!!
      FUNCTION GCEXP(ARG)
C
C     WORKING-PRECISION COMPLEX EXPONENTIATION.
C
      COMPLEX*16 GCEXP, ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GCEXP = EXP(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gcmplx.f
!!
      FUNCTION GCMPLX(X,Y)
      REAL*8 X, Y
      COMPLEX*16 GCMPLX, CMPLX
C (0,1)
C     BEGIN BLOCK
C (0,2)
      GCMPLX = CMPLX(X, Y)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gconjg.f
!!
      FUNCTION GCONJG(C)
      IMPLICIT COMPLEX*16(A-H,O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     COMPLEX CONJUGATE.
C
      GCONJG = DCONJG(C)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gcos.f
!!
      FUNCTION GCOS (ARG)
C
C     COSINE
C
      REAL*8 GCOS,DCOS,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GCOS = DCOS(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gexp.f
!!
      FUNCTION GEXP (ARG)
C
C     EXPONENTIAL
C
      REAL*8 GEXP,DEXP,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GEXP = DEXP(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gfloat.f
!!
      FUNCTION GFLOAT (IARG)
C
C     INTEGER TO WORKING-PRECISION CONVERSION
C
      REAL*8 GFLOAT,DFLOAT
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GFLOAT = DFLOAT(IARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gimag.f
!!
      FUNCTION GIMAG(C)
C
C     IMAGINARY PART OF COMPLEX NUMBER.
C
      REAL*8 GIMAG, DIMAG
      COMPLEX*16 C
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GIMAG = DIMAG(C)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gint.f
!!
      FUNCTION GINT(R)
      IMPLICIT REAL*8(A-H,O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     INTEGER PART OR R.
C
      GINT = AINT(R)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for glog.f
!!
      FUNCTION GLOG (ARG)
C
      REAL*8 GLOG,DLOG,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     BASE E (NATURAL) LOGARITHM
C
      GLOG = DLOG(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for glog10.f
!!
      FUNCTION GLOG10 (ARG)
C
C     BASE 10 (COMMON) LOGARITHM
C
      REAL*8 GLOG10,DLOG10,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GLOG10 = DLOG10(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gmax1.f
!!
      FUNCTION GMAX1 (ARG1,ARG2)
C
C     MAXIMUM VALUE OF TWO ARGUMENTS
C     NOTE THAT THIS DOES NOT UTILIZE THE FULL CAPABILITY OF THE
C     LIBRARY FUNCTIONS IN THAT THE NUMBER OF ARGUMENTS IS NOT LIMITED
C     TO TWO. (AT LEAST ON THE VAX).
C
      REAL*8 GMAX1,DMAX1,ARG1,ARG2
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GMAX1 = DMAX1(ARG1, ARG2)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gmin1.f
!!
      FUNCTION GMIN1 (ARG1,ARG2)
C
C     MAXIMUM VALUE OF TWO ARGUMENTS
C     NOTE THAT THIS DOES NOT UTILIZE THE FULL CAPABILITY OF THE
C     LIBRARY FUNCTIONS IN THAT THE NUMBER OF ARGUMENTS IS NOT LIMITED
C     TO TWO. (AT LEAST ON THE VAX).
C
      REAL*8 GMIN1,DMIN1,ARG1,ARG2
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GMIN1 = DMIN1(ARG1, ARG2)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gmod.f
!!
      FUNCTION GMOD (ARG1,ARG2)
C
C     REMAINDER ... RETURNS THE REMAINDER OF ARG1/ARG2
C
      REAL*8 GMOD,DMOD,ARG1,ARG2
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GMOD = DMOD(ARG1, ARG2)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for greal.f
!!
      FUNCTION GREAL(C)
C
C     REAL PART OF COMPLEX NUMBER.
C
      REAL*8 GREAL
      COMPLEX*16 C
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GREAL = DBLE(C)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gsign.f
!!
      FUNCTION GSIGN (ARG1,ARG2)
C
C     TRANSFER OF SIGN ... RESULT IS DABS(ARG1) * SIGN OF ARG2
C
      REAL*8 GSIGN,DSIGN,ARG1,ARG2
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GSIGN = DSIGN(ARG1, ARG2)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gsin.f
!!
      FUNCTION GSIN (ARG)
C
C     SINE
C
      REAL*8 GSIN,DSIN,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GSIN = DSIN(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gsqrt.f
!!
*DECK MTHLIB
C1MTHLIB
C
C      MTHLIB.FOR IS A COLLECTION OF ROUTINES WHICH GAUSSIAN-82
C      EMPLOYS TO ACCESS THE FLOATING-POINT FORTRAN LIBRARY 
C      FUNCTIONS.  ITS PURPOSE IS TO MAKE CHANGING THE PRECISION
C      OF THE PROGRAM SIMPLIER ON THOSE MACHINES WHERE IT MAKES
C      A DIFFERENCE WHETHER YOU SAY SQRT OR DSQRT, FOR EXAMPLE.
C
C
C     THE CURRENTLY AVAILABLE FUNCTIONS ARE:
C
C     GSQRT,  GLOG,   GLOG10, GEXP,   GSIN,  GCOS,   GTAN,
C     GATAN2, GASIN,  GACOS,  GATAN,  GABS,  GFLOAT, GMAX1,
C     GMIN1,  GMOD,   GSIGN,  IGFIX,  GREAL, GCONJG, GCABS,
C     GIMAG,  GINT,   GCMPLX, GCEXP,  GRAN
C
C     NOTE THAT GMIN1 AND GMAX1 ARE RESTRICTED TO 2 ARGUMENTS.
C     GRAN IS ASSUMED TO RETURN A RANDOM WORKING-PRECISION VALUE
C     0.0 .LE. GRAN .LT. 1.0
C?
      FUNCTION GSQRT (ARG)
C
C     SQUARE ROOT
C
      REAL*8 GSQRT,DSQRT,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
      GSQRT = DSQRT(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for gtan.f
!!
      FUNCTION GTAN (ARG)
C
C     TANGENT
C
      REAL*8 GTAN,DTAN,ARG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      GTAN = DTAN(ARG)
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for igfix.f
!!
      FUNCTION IGFIX(R)
      IMPLICIT REAL*8(A-H,O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     CONVERT WORKING PRECISION TO INTEGER.
C
      IGFIX = IFIX(SNGL(R))
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for ilsw.f
!!
      SUBROUTINE ILSW(I,J,K)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      K = 0
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for intowp.f
!!
      INTEGER FUNCTION INTOWP(I)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      INTOWP = (I+1)/2
C (0,3)
      RETURN
C     END BLOCK
      END
!!
!! file for lclear.f
!!
      SUBROUTINE LCLEAR(N,A)
      LOGICAL A(I_PIPS_LCLEAR_A)
C (0,1)
      INTEGER*8 I_PIPS_LCLEAR_A
      COMMON /PIPS_LCLEAR_A/ I_PIPS_LCLEAR_A
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 10
      DO I = 1, N
C (0,3)
10       A(I) = .FALSE.
      ENDDO
C (0,4)
      RETURN
C     END BLOCK
      END
!!
!! file for main000.f
!!

C
C FPPPP BENCHMARK
C
C MODIFIED 8/21/89 BY MIKE GREENFIELD/DIGITAL
C CHANGED ALL G MATH FUNCTIONS TO IN LINE
C
! next line added by fsplit() in pips
      PROGRAM MAIN000
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS,AON
      COMMON /IO/     IN,IOUT,IPUNCH
      COMMON /IOP/    IOP(50)
      COMMON /MOL/    NATOMS,ICHARG,MULTIP,NAE,NBE,NE,NBASIS,
     $                IAN(401),ATMCHG(400),C(1200)
      COMMON/B/EXX(1200),C1(1200),C2(1200),C3(1200),
     $         X(400),Y(400),Z(400),JAN(400),SHELLA(400),SHELLN(400),
     $         SHELLT(400),SHELLC(400),AOS(400),AON(400),NSHELL,MAXTYP
      DIMENSION C4(400),SHLADF(400)
      COMMON /COR/ CORE(40000)
      EQUIVALENCE(C4(1),C3(401)),(SHLADF(1),C3(801))
      DATA IBLANK/0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
1000  FORMAT(' *** L702 STAND-ALONE TEST ***'/' NATOMS=',I2)
C (0,3)
C
C     LOAD /IO/
C
      IN = 5
C (0,4)
      IOUT = 6
C (0,5)
      IPUNCH = 7
C (0,6)
C
C     LOAD /IOP/
C
!     INITIALLY: DO 5
      DO I = 1, 50
C (0,7)
5        IOP(I) = 0
      ENDDO
C (0,8)
C
C     LOAD /MOL/
C
      READ (5, *) NATOMS
C (0,9)
      WRITE (IOUT, 1000) NATOMS
C (0,10)
      READ (5, *) ICHARG
C (0,11)
      READ (5, *) MULTIP
C (0,12)

      NE = 6*NATOMS
C (0,13)
      NAE = 3*NATOMS
C (0,14)
      NBE = NAE
C (0,15)

C*DJS >>>>>
C
C     COMPUTE THE APPROXIMATE CUBE ROOT OF THE NUMBER OF ATOMS
C
      IBOXX = 1
C (0,16)
      I = 1
C (0,17)
C     BEGIN UNSTRUCTURED
99994 CONTINUE
C (1,1)
C     DO loop 991 with exit had to be desugared
      IF (I.GT.NATOMS) GOTO 992
C (3,1)
      IF (IBOXX*IBOXX*IBOXX.GT.NATOMS) GOTO 992
C (4,1)
C     BEGIN BLOCK
C (4,2)
      IBOXX = IBOXX+1
C (4,3)
991   CONTINUE
C (4,4)
      I = I+1
C     END BLOCK
      GOTO 99994
C (2,1)
992   CONTINUE
C     END UNSTRUCTURED
C (0,18)
C
C     MAKE THE X AND Y CELL DIMENSIONS DIFFERENT BY 1
C
      IBOXY = IBOXX
C (0,19)
      IBOXX = IBOXY-1
C (0,20)
C
C     SET UP (VERY CRUDE) RANDOM NUMBER GENERATOR
C
      READ (5, *) ISEED
C (0,21)
      READ (5, *) IM
C (0,22)
      READ (5, *) IA
C (0,23)
      READ (5, *) IC
C (0,24)
C
C     LOOP OVER ATOMS AND COMPUTE COORDINATES AS SITES ON AN ORTHORHOMBIC
C     LATTICE WITH A GAUSSIAN DEVIATION
C
C     6/22/95 - JWR for SPEC: Initialization of JRAN

      JRAN = 0
C (0,25)
!     INITIALLY: DO 10
      DO I = 1, NATOMS
C (0,26)
C        BEGIN BLOCK
C (0,27)
         IAN(I) = 6
C (0,28)
         ATMCHG(I) = 6.D0
C (0,29)
         IX = (I-1)/(IBOXX*IBOXY)
C (0,30)
         IY = (I-IX*IBOXX*IBOXY-1)/IBOXY
C (0,31)
         IZ = I-IX*IBOXX*IBOXY-IY*IBOXY-1
C (0,32)
         JRAN = MOD(JRAN*IA+IC, IM)
C (0,33)
         DX = DBLE(JRAN)/DBLE(IM)-0.5D0
C (0,34)
         JRAN = MOD(JRAN*IA+IC, IM)
C (0,35)
         DY = DBLE(JRAN)/DBLE(IM)-0.5D0
C (0,36)
         JRAN = MOD(JRAN*IA+IC, IM)
C (0,37)
         DZ = DBLE(JRAN)/DBLE(IM)-0.5D0
C (0,38)
         C(3*I-2) = 1.7D0*IX+0.07D0*IY+0.01D0*DX
C (0,39)
         C(3*I-1) = 1.8D0*IY+0.03D0*IZ+0.01D0*DY
C (0,40)
         C(3*I) = 1.9D0*IZ+0.01D0*IX+0.01D0*DZ
C (0,41)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,42)
C
C     WRITE (IOUT,1010) (C(I),I=1,3*NATOMS)
C1010 FORMAT(3X,3F15.8)

C*DJS <<<<

C      NAT3=3*NATOMS
C      WRITE(IOUT,1010) (C(I),I=1,NAT3)
C 1010 FORMAT(3X,3F15.8)
C
C     LOAD /B/
C
      NSHELL = 2*NATOMS
C (0,43)
      READ (5, *) MAXTYP
C (0,44)
      READ (5, *) NBASIS
C (0,45)
      READ (5, *) NGAUS
C (0,46)
!     INITIALLY: DO 20
      DO I = 1, NATOMS
C (0,47)
C        BEGIN BLOCK
C (0,48)
         EXX(6*I-5) = 64.D0
C (0,49)
         EXX(6*I-4) = 32.D0
C (0,50)
         EXX(6*I-3) = 8.D0
C (0,51)
         EXX(6*I-2) = 4.D0
C (0,52)
         EXX(6*I-1) = 2.D0
C (0,53)
         EXX(6*I) = 1.D0
C (0,54)
         C1(6*I-5) = 0.3D0
C (0,55)
         C1(6*I-4) = 0.3D0
C (0,56)
         C1(6*I-3) = 0.3D0
C (0,57)
         C1(6*I-2) = 0.3D0
C (0,58)
         C1(6*I-1) = 0.3D0
C (0,59)
         C1(6*I) = 0.3D0
C (0,60)
         C2(6*I-5) = 0.0D0
C (0,61)
         C2(6*I-4) = 0.0D0
C (0,62)
         C2(6*I-3) = 0.0D0
C (0,63)
         C2(6*I-2) = 0.3D0
C (0,64)
         C2(6*I-1) = 0.3D0
C (0,65)
         C2(6*I) = 0.3D0
C (0,66)
         X(2*I-1) = C(3*I-2)
C (0,67)
         X(2*I) = C(3*I-2)
C (0,68)
         Y(2*I-1) = C(3*I-1)
C (0,69)
         Y(2*I) = C(3*I-1)
C (0,70)
         Z(2*I-1) = C(3*I)
C (0,71)
         Z(2*I) = C(3*I)
C (0,72)
         JAN(2*I-1) = I
C (0,73)
         JAN(2*I) = I
C (0,74)
         SHELLA(2*I-1) = NGAUS
C (0,75)
         SHELLA(2*I) = NGAUS+3
C (0,76)
         NGAUS = NGAUS+6
C (0,77)
         SHELLN(2*I-1) = 3
C (0,78)
         SHELLN(2*I) = 3
C (0,79)
         SHELLT(2*I-1) = 0
C (0,80)
         SHELLT(2*I) = 1
C (0,81)
         SHELLC(2*I-1) = 0
C (0,82)
         SHELLC(2*I) = 0
C (0,83)
         AOS(2*I-1) = NBASIS+1
C (0,84)
         AOS(2*I) = NBASIS+2
C (0,85)
         NBASIS = NBASIS+5
C (0,86)
         AON(2*I-1) = IBLANK
C (0,87)
         AON(2*I) = IBLANK
C (0,88)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,89)
      SHELLA(NSHELL+1) = NGAUS
C (0,90)
      AOS(NSHELL+1) = NBASIS+1
C (0,91)
C*DJS
C     WRITE(IOUT,*) (SHELLA(I),I=1,NSHELL)
C     WRITE(IOUT,*) (SHELLT(I),I=1,NSHELL)
C     WRITE(IOUT,*) (SHELLN(I),I=1,NSHELL)
C     WRITE(IOUT,*) (SHELLC(I),I=1,NSHELL)
C     WRITE(IOUT,*) (   AOS(I),I=1,NSHELL)
C     WRITE(IOUT,*) (   JAN(I),I=1,NSHELL)
C     WRITE(IOUT,*) (     X(I),I=1,NSHELL)
C     WRITE(IOUT,*) (     Y(I),I=1,NSHELL)
C     WRITE(IOUT,*) (     Z(I),I=1,NSHELL)
C     WRITE(IOUT,*) (EXX(3*I-2),EXX(3*I-1),EXX(3*I),I=1,NSHELL)
C     WRITE(IOUT,*) ( C1(3*I-2), C1(3*I-1), C1(3*I),I=1,NSHELL)
C     WRITE(IOUT,*) ( C2(3*I-2), C2(3*I-1), C2(3*I),I=1,NSHELL)
C*DJS
C
      CALL D2ESP(CORE)
C (0,92)
      STOP
C (0,93)
      RETURN
C     END BLOCK
      END
!!
!! file for nprio.f
!!
*DECK NPRIO
      FUNCTION NPRIO(I,J,K,L,NSHELL)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     CALCULATE A "PRIORITY", A NUMBER WHICH IS UNIQUE FOR ANY GIVEN
C     I J K L.  NPRIO IS USED BY VARIOUS ROUTINES IN THE PROCESS
C     OF DECIDING WHICH OF SEVERAL SYMMETRICALLY RELATED POSSIBILITES
C     TO CHOOSE.
C
      I1 = I
C (0,3)
      J1 = J
C (0,4)
      K1 = K
C (0,5)
      L1 = L
C (0,6)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (I1.GE.J1) GOTO 10
C (9,1)
C     BEGIN BLOCK
C (9,2)
      IJKL = I1
C (9,3)
      I1 = J1
C (9,4)
      J1 = IJKL
C     END BLOCK
C (2,1)
10    IF (K1.GE.L1) GOTO 20
C (8,1)
C     BEGIN BLOCK
C (8,2)
      IJKL = K1
C (8,3)
      K1 = L1
C (8,4)
      L1 = IJKL
C     END BLOCK
C (3,1)
20    IF (I1-K1.LT.0) GOTO 25
C (7,1)
      IF (I1-K1.EQ.0) THEN
      ELSE
         GOTO 40
      ENDIF
C (6,1)
35    IF (J1.LT.L1) THEN
      ELSE
         GOTO 40
      ENDIF
C (4,1)
C     BEGIN BLOCK
C (4,2)
25    IJKL = I1
C (4,3)
      I1 = K1
C (4,4)
      K1 = IJKL
C (4,5)
      IJKL = J1
C (4,6)
      J1 = L1
C (4,7)
      L1 = IJKL
C     END BLOCK
C (5,1)
40    CONTINUE
C     END UNSTRUCTURED
C (0,7)
      NPRIO = I1*(NSHELL+1)**3+J1*(NSHELL+1)**2+K1*(NSHELL+1)+L1
C (0,8)
      RETURN
C     END BLOCK
      END
!!
!! file for twldrv.f
!!
*DECK TWLDRV
      SUBROUTINE TWLDRV(ISCF,DM,DN,ICRIT,USESYM,NSYMOP,JTRANS,NEQATM,
     $    NATOMS,C,VEE,FXYZ,IDUMP,FROZEN,NONCOR,NONC1,FHAM,AJ,AK,
     $    CMO,NBASIS,INDDO,ATMCHG,FIRSTS,ICHECK)
      IMPLICIT REAL*8(A-H,O-Z)

C	BUG FIX.  (ANSI X3.9-1978, SECTION 15.9.3.2, LINE 25)
	DIMENSION AFFQ(6)
	EQUIVALENCE (AFFQ(1) , FQ0)

C
C     EVALUATION OF THE TWO ELECTRON INTEGRAL CONTRIBUTION TO THE
C     FORCES.
C
      INTEGER SHELLA,SHELLN,SHELLT,AOS,AON,SHELLC
      LOGICAL USESYM,IJSAME,KLSAME,IKSMJL,FLAG,FROZEN(NATOMS),
     $        FI,FIJ,FIJK,FIRSTS(I_PIPS_TWLDRV_FIRSTS)
C***  LOGICAL CHKSHL
      DIMENSION FHAM(I_PIPS_TWLDRV_FHAM), AJ(I_PIPS_TWLDRV_AJ), AK(I_PIP
     x S_TWLDRV_AK)
      DIMENSION CMO(I_PIPS_TWLDRV_CMO), ATMCHG(400)
      COMMON/IO/IN,IOUT,IPUNCH
      COMMON /FFQ/ FQ0,FQ1,FQ2,FQ3,FQ4,FQ5
      COMMON/B/EXX(1200),C1(1200),C2(1200),C3(1200),
     $         X(400),Y(400),Z(400),JAN(400),SHELLA(400),SHELLN(400),
     $         SHELLT(400),SHELLC(400),AOS(400),AON(400),NSHELL,MAXTYP
      DIMENSION C4(400),SHLADF(400)
      EQUIVALENCE(C4(1),C3(401)),(SHLADF(1),C3(801))
      COMMON /FP4/ QA,QA1,QA2,A12I,A34I,A1234I
      COMMON /FP4/ A1,A2,A3,A4,A12,A34,A1234,PQX,PQY,PQZ,
     *   PQXX,PQYY,PQZZ,PQXY,PQXZ,PQYZ,
     *V0000,V0010,V0020,V0030,V0100,V0200,V0300,
     *V0110,V0120,V0130,V0210,V0220,V0230,V0310,V0320,V0330,
     *V1010,V1020,V1030,V2010,V2020,V2030,V3010,V3020,V3030,
     *V1000,V2000,V3000,V1100,V2100,V3100,V1200,V2200,V3200,
     *V1300,V2300,V3300,V1110,V2110,V3110,V1210,V2210,V3210,
     *V1310,V2310,V3310,V1120,V2120,V3120,V1220,V2220,V3220,
     *V1320,V2320,V3320,V1130,V2130,V3130,V1230,V2230,V3230,
     *V1330,V2330,V3330
      COMMON /FP4/C1110,C2110,C3110,C1210,C2210,C3210,
     *C1320,C2320,C3320,C1130,C2130,C3130,C1230,C2230,C3230,
     *C1310,C2310,C3310,C1120,C2120,C3120,C1220,C2220,C3220,
     *C1330,C2330,C3330,OPXO,OPYO,OPZO,OPOX,OPOY,OPOZ,OPXOX,OPYOY,OPZOZ,
     x 
     *OPXX,OPXY,OPXZ,OPYX,OPYY,OPYZ,OPZX,OPZY,OPZZ,OQXO,OQYO,OQZO,
     *OQOX,OQOY,OQOZ,OQXOX,OQYOY,OQZOZ,OQXX,OQXY,OQXZ,OQYX,OQYY,OQYZ,
     *OQZX,OQZY,OQZZ,S1,S2,S3,S4,S12,S34
      COMMON /FP4/ E,
     *GOOOO,GOOXO,GOOYO,GOOZO,GXOOO,GXOXO,GXOYO,GXOZO,GXXOO,GXXXO,GXXYO,
     x 
     *GXXZO,GXYOO,GXYZO,GXZOO,GYOOO,GYOYO,GYOZO,GYYOO,GYYXO,GYYYO,
     *GYYZO,GYZOO,GZOOO,GZOZO,GZZOO,GZZXO,GZZYO,GZZZO,
     *VE00,VE11,VE12,VE13,VE14,VE21,VE22,VE23,VE24,VE31,VE32,VE33,VE34,
     *CSSSP,CSSPP,CSPSP,CPSSP,CSPPP,CPSPP,CPPSP,CPPPP
      COMMON /TABLE/ TBAA(400),TBBA(400),TBCA(400),
     *               TBAB(400),TBBB(400),TBCB(400),
     *               TBAC(400),TBBC(400),TBCC(400),
     *               TBAD(400),TBBD(400),TBCD(400),
     *               TBAE(400),TBBE(400),TBCE(400),
     *               TBAF(400),TBBF(400),TBCF(400)
      DIMENSION DM(-6*NATOMS+39999),DN(I_PIPS_TWLDRV_DN),JTRANS(3,8),NEQ
     x ATM(I_PIPS_TWLDRV_NEQATM),C(1200),FXYZ(39999),E(256)
      DIMENSION XE34(100),QX(100),QY(100),QZ(100),TA34I(100),TS3(100),
     $          TS4(100),TS34(100),CSMCD(100),ISYMOP(8), IPRIO(8)
C***  DATA IRWTAB/503/
      DATA THREE,P25,TWO,H,ZERO,ONE5,TWENTY,TWO5,THREE5,FOUR5,
     $ SXTN,ONE,FOUR,TEN,F60
     $ /3.D0,0.25D0,2.D0,0.5D0,0.D0,1.5D0,20.D0,2.5D0,3.5D0,
     $  4.5D0,16.D0,1.D0,4.D0,10.D0,60.D0/
      DATA EXPCUT/100.D0/,F19/19.D0/,F100/100.D0/
C (0,1)
      INTEGER*8 I_PIPS_TWLDRV_DN
      COMMON /PIPS_TWLDRV_DN/ I_PIPS_TWLDRV_DN
      INTEGER*8 I_PIPS_TWLDRV_NEQATM
      COMMON /PIPS_TWLDRV_NEQATM/ I_PIPS_TWLDRV_NEQATM
      INTEGER*8 I_PIPS_TWLDRV_FHAM
      COMMON /PIPS_TWLDRV_FHAM/ I_PIPS_TWLDRV_FHAM
      INTEGER*8 I_PIPS_TWLDRV_AJ
      COMMON /PIPS_TWLDRV_AJ/ I_PIPS_TWLDRV_AJ
      INTEGER*8 I_PIPS_TWLDRV_AK
      COMMON /PIPS_TWLDRV_AK/ I_PIPS_TWLDRV_AK
      INTEGER*8 I_PIPS_TWLDRV_CMO
      COMMON /PIPS_TWLDRV_CMO/ I_PIPS_TWLDRV_CMO
      INTEGER*8 I_PIPS_TWLDRV_FIRSTS
      COMMON /PIPS_TWLDRV_FIRSTS/ I_PIPS_TWLDRV_FIRSTS
      INTEGER*8 I_PIPS_EFILL_DM
      COMMON /PIPS_EFILL_DM/ I_PIPS_EFILL_DM
C     BEGIN BLOCK
C (0,2)
2005  FORMAT(1X,4I2,12F10.6)
C (0,3)
2006  FORMAT(' SYMOP',I3,18X,I2,38X,I2,38X,I2)
C (0,4)
2007  FORMAT(' TWLDRV:  FMTGEN WAS CALLED ',I9,' TIMES.')
C (0,5)
9986  FORMAT(2X,3F18.9)
C (0,6)
C
C     READ IN F(M,T) INTERPOLATION TABLE FROM THE RW-FILES.
C***      CALL TRAKIO(6HTWLDRV,1)
C***      CALL TREAD(IRWTAB,TBAA(1),1200,6,1200,6,0)
      CALL GAMGEN
C (0,7)
C
C     COMPUTE PI RELATED CONSTANTS.
      PI = FOUR*DATAN(ONE)
C (0,8)
      PITO52 = TWO*PI**TWO5
C (0,9)
      PIDIV4 = P25*PI
C (0,10)
      CALL FMTSET(0, 0, 0)
C (0,11)
      IFMT = 0
C (0,12)
C
C     CLEAR OUT ACCUMELATOR VEE.
      VEE = ZERO
C (0,13)
C
C     SET UP CRITICAL CONSTANTS.
      ICRITP = ICRIT+1
C (0,14)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (ICRITP.EQ.1) GOTO 11
C (6,1)
      IF (ICRITP.EQ.2) GOTO 12
C (5,1)
      IF (ICRITP.EQ.3) GOTO 13
C (2,1)
C     BEGIN BLOCK
C (2,2)
C.....  STANDARD CUTOFFS.
11    VTOL1 = TEN**(-20)
C (2,3)
      VTOL2 = TEN**(-20)
C (2,4)
      VTOLS = TEN**(-30)
C (2,5)
      FMT1 = F19
C (2,6)
      FMT2 = F60
C     END BLOCK
      GOTO 14
C (4,1)
C     BEGIN BLOCK
C (4,2)
C.....  'BERNY' CUTOFFS.
13    VTOL1 = TEN**(-11)
C (4,3)
      VTOL2 = TEN**(-9)
C (4,4)
      VTOLS = TEN**(-14)
C (4,5)
      FMT1 = SXTN
C (4,6)
      FMT2 = ZERO
C     END BLOCK
      GOTO 14
C (7,1)
C     BEGIN BLOCK
C (7,2)
C.....  TEST CUTOFFS.
12    VTOL1 = TEN**(-30)
C (7,3)
      VTOL2 = TEN**(-30)
C (7,4)
      VTOLS = TEN**(-30)
C (7,5)
      FMT1 = ZERO
C (7,6)
      FMT2 = F100
C     END BLOCK
C (3,1)
14    CONTINUE
C     END UNSTRUCTURED
C (0,15)
C
C        BEGIN LOOPS OVER THE SHELLS
C
C***      CALL SETPN(NSHELL)
!     INITIALLY: DO 1001
      DO ISHELL = 1, NSHELL
C (0,16)
C        BEGIN UNSTRUCTURED
C (8,1)
C***      CALL DECRPN
         IF (SHELLT(ISHELL).GT.1) GOTO 1001
C (10,1)
C        BEGIN BLOCK
C (10,2)
         FI = FROZEN(JAN(ISHELL))
C (10,3)
!     INITIALLY: DO 1002
         DO JSHELL = 1, ISHELL
C (10,4)
C           BEGIN UNSTRUCTURED
C (11,1)
            IF (SHELLT(JSHELL).GT.1) GOTO 1002
C (111,1)
C           BEGIN BLOCK
C (111,2)
            FIJ = FI.AND.FROZEN(JAN(JSHELL))
C (111,3)
            KSHELL = 1
C           END BLOCK
99990       CONTINUE
C (13,1)
C     DO loop 1003 with exit had to be desugared
            IF (KSHELL.GT.ISHELL) GOTO 1002
C (14,1)
            IF (SHELLT(KSHELL).GT.1) GOTO 1003
C (110,1)
C           BEGIN BLOCK
C (110,2)
            FIJK = FIJ.AND.FROZEN(JAN(KSHELL))
C (110,3)
            LSHELL = 1
C           END BLOCK
99991       CONTINUE
C (16,1)
C     DO loop 1004 with exit had to be desugared
            IF (LSHELL.GT.KSHELL) GOTO 1003
C (17,1)
            IF (SHELLT(LSHELL).GT.1) GOTO 1004
C (109,1)
            IF (FIJK.AND.FROZEN(JAN(LSHELL))) GOTO 1004
C (108,1)
C***      IF(.NOT.CHKSHL(ISHELL,JSHELL,KSHELL,LSHELL,JAN,ICHECK)) GOTO 1004
            IF (KSHELL.EQ.ISHELL.AND.LSHELL.GT.JSHELL) GOTO 1002
C (107,1)
C           BEGIN BLOCK
C (107,2)
            AX1 = H
C (107,3)
            IF (ISHELL.NE.JSHELL) THEN
C (107,4)
               AX1 = AX1+AX1
            ELSE
C (107,5)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (107,6)
            IF (KSHELL.NE.LSHELL) THEN
C (107,7)
               AX1 = AX1+AX1
            ELSE
C (107,8)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (107,9)
            IF (ISHELL.NE.KSHELL.OR.JSHELL.NE.LSHELL) THEN
C (107,10)
               AX1 = AX1+AX1
            ELSE
C (107,11)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (107,12)
C***      WRITE(IOUT,*) ISHELL,JSHELL,KSHELL,LSHELL,AX1
C
C        PUT SHELLS INTO STANDARD ORDER
C
            INEW = ISHELL
C (107,13)
            JNEW = JSHELL
C (107,14)
            KNEW = KSHELL
C (107,15)
            LNEW = LSHELL
C (107,16)
            LA = SHELLT(INEW)
C (107,17)
            LB = SHELLT(JNEW)
C (107,18)
            LC = SHELLT(KNEW)
C (107,19)
            LD = SHELLT(LNEW)
C           END BLOCK
C (106,1)
            IF (LA-LB.LT.0) GOTO 1011
C (104,1)
1012        IF (LC-LD.LT.0) GOTO 1013
C (102,1)
1014        IF (LA+LB-LC-LD.LT.0) GOTO 1015
C (100,1)
C           BEGIN BLOCK
C (100,2)
1016        LA = 3*SHELLT(INEW)+1
C (100,3)
            LB = 3*SHELLT(JNEW)+1
C (100,4)
            LC = 3*SHELLT(KNEW)+1
C (100,5)
            LD = 3*SHELLT(LNEW)+1
C (100,6)
C
C        OBTAIN INFORMATION ABOUT THE SHELLS
C
            IJSAME = INEW.EQ.JNEW
C (100,7)
            KLSAME = KNEW.EQ.LNEW
C (100,8)
            IKSMJL = INEW.EQ.KNEW.AND.JNEW.EQ.LNEW
C (100,9)
            JTYPE = (LA+LB+LC+LC+LD-2)/3
C (100,10)
C###TEMP ST.
C***      IF(JTYPE.GT.6)CALL LNK1E
            IFQMAX = SHELLT(INEW)+SHELLT(JNEW)+SHELLT(KNEW)+SHELLT(
     &      LNEW)+1
C (100,11)
            IAT = JAN(INEW)
C (100,12)
            JAT = JAN(JNEW)
C (100,13)
            KAT = JAN(KNEW)
C (100,14)
            LAT = JAN(LNEW)
C           END BLOCK
C (99,1)
            IF (IAT.EQ.JAT.AND.IAT.EQ.KAT.AND.IAT.EQ.LAT) GOTO 1004
C (98,1)
            IF (.NOT.USESYM) GOTO 60
C (97,1)
C           BEGIN BLOCK
C (97,2)
C
C     LOOP OVER SYMMETRY OPERATIONS.  OF THE EQUIVALENT SETS OF SHELLS
C     PRODUCED, ONLY THE SET WITH THE HIGHEST "PRIORITY" WILL BE USED.
C
            NUMOP = 1
C (97,3)
            NP1 = NPRIO(IAT, JAT, KAT, LAT, NSHELL)
C (97,4)
            ISYMOP(1) = 1
C (97,5)
            IPRIO(1) = NP1
C (97,6)
            JOPIND = 0
C (97,7)
            JOP = 2
C           END BLOCK
99992       CONTINUE
C (93,1)
C     DO loop 30 with exit had to be desugared
            IF (JOP.GT.NSYMOP) GOTO 99993
C (94,1)
C           BEGIN BLOCK
C (94,2)
            JOPIND = JOPIND+NATOMS
C (94,3)
            IAT1 = NEQATM(IAT+JOPIND)
C (94,4)
            JAT1 = NEQATM(JAT+JOPIND)
C (94,5)
            KAT1 = NEQATM(KAT+JOPIND)
C (94,6)
            LAT1 = NEQATM(LAT+JOPIND)
C (94,7)
            NP2 = NPRIO(IAT1, JAT1, KAT1, LAT1, NSHELL)
C           END BLOCK
C (95,1)
            IF (NP2.GT.NP1) GOTO 1004
C (96,1)
C           BEGIN BLOCK
C (96,2)
            NUMOP = NUMOP+1
C (96,3)
            ISYMOP(NUMOP) = JOP
C (96,4)
            IPRIO(NUMOP) = NP2
C (96,5)
30          CONTINUE
C (96,6)
            JOP = JOP+1
C           END BLOCK
            GOTO 99992
C (18,1)
C           BEGIN BLOCK
C (18,2)
1004        CONTINUE
C (18,3)
            LSHELL = LSHELL+1
C           END BLOCK
            GOTO 99991
99993       CONTINUE
C (87,1)
C           BEGIN BLOCK
C (87,2)
C
C     REMOVE REDUNDANT OPERATIONS.
C
            MOP = NUMOP-1
C (87,3)
!     INITIALLY: DO 50
            DO JROP = 1, MOP
C (87,4)
C              BEGIN BLOCK
C (87,5)
               JOP = NUMOP-JROP+1
C (87,6)
               JOPM1 = JOP-1
C (87,7)
               KOP = 1
C (87,8)
C              BEGIN UNSTRUCTURED
99989          CONTINUE
C (88,1)
C     DO loop 40 with exit had to be desugared
               IF (KOP.GT.JOPM1) GOTO 50
C (91,1)
               IF (IPRIO(KOP).NE.IPRIO(JOP)) GOTO 40
C (90,1)
               ISYMOP(JOP) = 0
               GOTO 50
C (92,1)
C              BEGIN BLOCK
C (92,2)
40             CONTINUE
C (92,3)
               KOP = KOP+1
C              END BLOCK
               GOTO 99989
C (89,1)
50             CONTINUE
C              END UNSTRUCTURED
C              END BLOCK
            ENDDO
C           END BLOCK
C (86,1)
C           BEGIN BLOCK
C (86,2)
C
60          CONTINUE
C (86,3)
            IATX = 3*(IAT-1)+1
C (86,4)
            JATX = 3*(JAT-1)+1
C (86,5)
            KATX = 3*(KAT-1)+1
C (86,6)
            LATX = 3*(LAT-1)+1
C (86,7)
            IATY = IATX+1
C (86,8)
            JATY = JATX+1
C (86,9)
            KATY = KATX+1
C (86,10)
            LATY = LATX+1
C (86,11)
            IATZ = IATY+1
C (86,12)
            JATZ = JATY+1
C (86,13)
            KATZ = KATY+1
C (86,14)
            LATZ = LATY+1
C (86,15)
            AX = X(INEW)
C (86,16)
            BX = X(JNEW)
C (86,17)
            CX = X(KNEW)
C (86,18)
            DX = X(LNEW)
C (86,19)
            AY = Y(INEW)
C (86,20)
            BY = Y(JNEW)
C (86,21)
            CY = Y(KNEW)
C (86,22)
            DY = Y(LNEW)
C (86,23)
            AZ = Z(INEW)
C (86,24)
            BZ = Z(JNEW)
C (86,25)
            CZ = Z(KNEW)
C (86,26)
            DZ = Z(LNEW)
C (86,27)
            ABX = AX-BX
C (86,28)
            ABY = AY-BY
C (86,29)
            ABZ = AZ-BZ
C (86,30)
            CDX = CX-DX
C (86,31)
            CDY = CY-DY
C (86,32)
            CDZ = CZ-DZ
C (86,33)
            R34 = CDX**2+CDY**2+CDZ**2
C (86,34)
            R12 = ABX**2+ABY**2+ABZ**2
C (86,35)
            ISTART = SHELLA(INEW)
C (86,36)
            JSTART = SHELLA(JNEW)
C (86,37)
            KSTART = SHELLA(KNEW)
C (86,38)
            LSTART = SHELLA(LNEW)
C (86,39)
            IEND = ISTART+SHELLN(INEW)-1
C (86,40)
            JEND = JSTART+SHELLN(JNEW)-1
C (86,41)
            KEND = KSTART+SHELLN(KNEW)-1
C (86,42)
            LEND = LSTART+SHELLN(LNEW)-1
C (86,43)
      I_PIPS_EFILL_DM = -6*NATOMS+39999
C
C     FILL E WITH THE REQUIRED DENSITY MATRIX CONTRIBUTIONS,
C     AND AT THE SAME TIME, GET DMAX.
            CALL EFILL(INEW, JNEW, KNEW, LNEW, LA, LB, LC, LD, AX1, 
     &      ISCF, DM, DN, E, DMAX, NBASIS, NONCOR, NONC1, FHAM, AJ, 
     &      AK, CMO, INDDO, ATMCHG, FIRSTS)
C           END BLOCK
C (85,1)

C
C     REJECT CURRENT SHELL CASE IF DMAX IS .LT. VTOL.
            IF (DMAX.LT.VTOL1) GOTO 1004
C (84,1)
C           BEGIN BLOCK
C (84,2)
C
C     HUNT OUT LARGEST DENSITY*CONTRACTION, AND REJECT IF POSSIBLE.
            E34MAX = ZERO
C (84,3)
            KZERO = -10
C (84,4)
!     INITIALLY: DO 2
            DO K = KSTART, KEND
C (84,5)
C              BEGIN BLOCK
C (84,6)
               KZERO = KZERO+10
C (84,7)
               KL = KZERO
C (84,8)
               A3 = EXX(K)
C (84,9)
               CSUMC = DABS(C1(K))+DABS(C2(K))
C (84,10)
               LND = LEND
C (84,11)
               IF (KLSAME) THEN
C (84,12)
                  LND = K
               ELSE
C (84,13)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (84,14)
!     INITIALLY: DO 2
               DO L = LSTART, LND
C (84,15)
C                 BEGIN BLOCK
C (84,16)
                  A4 = EXX(L)
C (84,17)
                  KL = KL+1
C (84,18)
                  A34 = A3+A4
C (84,19)
                  A34I = ONE/A34
C (84,20)
                  S3 = A3*A34I
C (84,21)
                  S4 = A4*A34I
C (84,22)
                  S34 = A3*S4
C (84,23)
                  QX(KL) = S3*CX+S4*DX
C (84,24)
                  QY(KL) = S3*CY+S4*DY
C (84,25)
                  QZ(KL) = S3*CZ+S4*DZ
C (84,26)
                  TA34I(KL) = A34I
C (84,27)
                  TS3(KL) = S3
C (84,28)
                  TS4(KL) = S4
C (84,29)
                  TS34(KL) = S34
C (84,30)
                  EXPARG = R34*S34
C (84,31)
                  E34 = ZERO
C (84,32)
                  IF (EXPARG.LT.EXPCUT) THEN
C (84,33)
                     E34 = DEXP(-EXPARG)*A34I
                  ELSE
C (84,34)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (84,35)
                  IF (KLSAME.AND.K.NE.L) THEN
C (84,36)
                     E34 = E34+E34
                  ELSE
C (84,37)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (84,38)
                  XE34(KL) = E34
C (84,39)
                  E34 = E34*CSUMC*(DABS(C1(L))+DABS(C2(L)))
C (84,40)
                  IF (E34.GT.E34MAX) THEN
C (84,41)
                     E34MAX = E34
                  ELSE
C (84,42)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (84,43)
                  CSMCD(KL) = E34**2
C (84,44)
2                 CONTINUE
C                 END BLOCK
               ENDDO
C              END BLOCK
            ENDDO
C           END BLOCK
C (83,1)
            IF (DMAX*E34MAX.LT.VTOL1) GOTO 1004
C (24,1)
C           BEGIN BLOCK
C (24,2)
            FXI = ZERO
C (24,3)
            FXJ = ZERO
C (24,4)
            FXK = ZERO
C (24,5)
            FXL = ZERO
C (24,6)
            FYI = ZERO
C (24,7)
            FYJ = ZERO
C (24,8)
            FYK = ZERO
C (24,9)
            FYL = ZERO
C (24,10)
            FZI = ZERO
C (24,11)
            FZJ = ZERO
C (24,12)
            FZK = ZERO
C (24,13)
            FZL = ZERO
C (24,14)
            VE11 = ZERO
C (24,15)
            VE12 = ZERO
C (24,16)
            VE13 = ZERO
C (24,17)
            VE14 = ZERO
C (24,18)
            VE21 = ZERO
C (24,19)
            VE22 = ZERO
C (24,20)
            VE23 = ZERO
C (24,21)
            VE24 = ZERO
C (24,22)
            VE31 = ZERO
C (24,23)
            VE32 = ZERO
C (24,24)
            VE33 = ZERO
C (24,25)
            VE34 = ZERO
C (24,26)
C
C        LOOP OVER THE UNCONTRACTED GAUSSIANS WITHIN THE SHELLS
C
            IZERO = -10
C (24,27)
C
C..... GAUSSIANS AT CENTER A.
!     INITIALLY: DO 2001
            DO I = ISTART, IEND
C (24,28)
C              BEGIN BLOCK
C (24,29)
               IZERO = IZERO+10
C (24,30)
               IJ = IZERO
C (24,31)
               A1 = EXX(I)
C (24,32)
               CSA = C1(I)
C (24,33)
               CPA = C2(I)
C (24,34)
               CSUMA = (DABS(CSA)+DABS(CPA))*DMAX
C (24,35)
               JND = JEND
C (24,36)
               IF (IJSAME) THEN
C (24,37)
                  JND = I
               ELSE
C (24,38)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (24,39)
C
C..... GAUSSIANS AT CENTER B.
!     INITIALLY: DO 2002
               DO J = JSTART, JND
C (24,40)
C                 BEGIN BLOCK
C (24,41)
                  IJ = IJ+1
C (24,42)
                  A2 = EXX(J)
C (24,43)
                  A12 = A1+A2
C (24,44)
                  A12I = ONE/A12
C (24,45)
                  S1 = A1*A12I
C (24,46)
                  S2 = A2*A12I
C (24,47)
                  S12 = A1*S2
C (24,48)
                  EXPARG = R12*S12
C (24,49)
                  E12 = ZERO
C (24,50)
                  IF (EXPARG.LT.EXPCUT) THEN
C (24,51)
                     E12 = DEXP(-EXPARG)*PITO52*A12I
                  ELSE
C (24,52)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (24,53)
                  IF (IJSAME.AND.I.NE.J) THEN
C (24,54)
                     E12 = E12+E12
                  ELSE
C (24,55)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (24,56)
                  CSB = C1(J)*E12
C (24,57)
                  CPB = C2(J)*E12
C (24,58)
                  CSMAB = CSUMA*(DABS(CSB)+DABS(CPB))
C (24,59)
C                 BEGIN UNSTRUCTURED
C (25,1)
                  IF (CSMAB*E34MAX.LT.VTOL2) GOTO 2002
C (82,1)
C                 BEGIN BLOCK
C (82,2)
                  CSMAB = CSMAB**2
C (82,3)
                  CSS = CSA*CSB
C (82,4)
C     INITIALIZE C.. VARIABLES IN CASE LATER IF-CHECKS CIRCUMVENT
C     THEIR CALCULATION.
                  CPS = ZERO
C (82,5)
                  CSP = ZERO
C (82,6)
                  CPP = ZERO
C (82,7)
                  PX = S1*AX+S2*BX
C (82,8)
                  PY = S1*AY+S2*BY
C (82,9)
                  PZ = S1*AZ+S2*BZ
C                 END BLOCK
C (81,1)
                  IF (LA.EQ.1) GOTO 51
C (80,1)
C                 BEGIN BLOCK
C (80,2)
                  CPS = CPA*CSB
C (80,3)
                  OPXO = -S2*ABX
C (80,4)
                  OPYO = -S2*ABY
C (80,5)
                  OPZO = -S2*ABZ
C                 END BLOCK
C (79,1)
                  IF (LB.EQ.1) GOTO 51
C (78,1)
C                 BEGIN BLOCK
C (78,2)
                  CSP = CSA*CPB
C (78,3)
                  CPP = CPA*CPB
C (78,4)
                  OPOX = S1*ABX
C (78,5)
                  OPOY = S1*ABY
C (78,6)
                  OPOZ = S1*ABZ
C (78,7)
                  OPXOX = OPXO+OPOX
C (78,8)
                  OPYOY = OPYO+OPOY
C (78,9)
                  OPZOZ = OPZO+OPOZ
C (78,10)
                  HA12I = H*A12I
C (78,11)
                  OPXX = OPXO*OPOX+HA12I
C (78,12)
                  OPYY = OPYO*OPOY+HA12I
C (78,13)
                  OPZZ = OPZO*OPOZ+HA12I
C (78,14)
                  OPXY = OPXO*OPOY
C (78,15)
                  OPYX = OPXY
C (78,16)
                  OPXZ = OPXO*OPOZ
C (78,17)
                  OPZX = OPXZ
C (78,18)
                  OPYZ = OPYO*OPOZ
C (78,19)
                  OPZY = OPYZ
C                 END BLOCK
C (27,1)
C                 BEGIN BLOCK
C (27,2)
51                CONTINUE
C (27,3)
                  VE00S = ZERO
C (27,4)
                  VE11S = ZERO
C (27,5)
                  VE12S = ZERO
C (27,6)
                  VE21S = ZERO
C (27,7)
                  VE22S = ZERO
C (27,8)
                  VE31S = ZERO
C (27,9)
                  VE32S = ZERO
C (27,10)
                  DVEXS = ZERO
C (27,11)
                  DVEYS = ZERO
C (27,12)
                  DVEZS = ZERO
C (27,13)
                  KND = KEND
C (27,14)
                  IF (IKSMJL) THEN
C (27,15)
                     KND = I
                  ELSE
C (27,16)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (27,17)
                  KZERO = -10
C (27,18)
C
C..... GAUSSIANS AT CENTER C.
!     INITIALLY: DO 2003
                  DO K = KSTART, KND
C (27,19)
C                    BEGIN BLOCK
C (27,20)
                     KZERO = KZERO+10
C (27,21)
                     KL = KZERO
C (27,22)
                     A3 = EXX(K)
C (27,23)
                     CSC = C1(K)
C (27,24)
                     CPC = C2(K)
C (27,25)
                     CSSS = CSS*CSC
C (27,26)
                     CSSP = CSS*CPC
C (27,27)
                     CPSS = CPS*CSC
C (27,28)
                     CPSP = CPS*CPC
C (27,29)
                     CSPS = CSP*CSC
C (27,30)
                     CSPP = CSP*CPC
C (27,31)
                     CPPS = CPP*CSC
C (27,32)
                     CPPP = CPP*CPC
C (27,33)
                     LND = LEND
C (27,34)
                     IF (KLSAME) THEN
C (27,35)
                        LND = K
                     ELSE
C (27,36)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C (27,37)
                     IF (IKSMJL.AND.I.EQ.K) THEN
C (27,38)
                        LND = J
                     ELSE
C (27,39)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C (27,40)
C
C..... GAUSSIANS AT CENTER D.
!     INITIALLY: DO 2004
                     DO L = LSTART, LND
C (27,41)
C                       BEGIN BLOCK
C (27,42)
                        KL = KL+1
C (27,43)
                        A34 = A3+EXX(L)
C (27,44)
                        A1234 = A12+A34
C (27,45)
                        A1234I = ONE/A1234
C (27,46)
                        VTEST = CSMAB*CSMCD(KL)*A1234I
C (27,47)
C                       BEGIN UNSTRUCTURED
C (28,1)
                        IF (VTEST.LT.VTOLS) GOTO 2004
C (77,1)
C                       BEGIN BLOCK
C (77,2)
                        QA2 = A34*A1234I
C (77,3)
                        QA = A12*QA2
C (77,4)
                        PQX = PX-QX(KL)
C (77,5)
                        PQY = PY-QY(KL)
C (77,6)
                        PQZ = PZ-QZ(KL)
C (77,7)
                        PQXX = PQX*PQX
C (77,8)
                        PQYY = PQY*PQY
C (77,9)
                        PQZZ = PQZ*PQZ
C (77,10)
                        T = QA*(PQXX+PQYY+PQZZ)
C (77,11)
                        A34I = TA34I(KL)
C (77,12)
                        S3 = TS3(KL)
C (77,13)
                        S4 = TS4(KL)
C (77,14)
                        S34 = TS34(KL)
C (77,15)
                        E34 = XE34(KL)*DSQRT(A1234I)
C (77,16)
                        IF (IKSMJL.AND.IJ.NE.KL) THEN
C (77,17)
                           E34 = E34+E34
                        ELSE
C (77,18)
C                          BEGIN BLOCK
C                          END BLOCK
                        ENDIF
C (77,19)
                        CSD = C1(L)*E34
C (77,20)
                        EOOOO = E(1)*CSSS*CSD
C                       END BLOCK
C (65,1)
                        IF (T.LE.FMT1) GOTO 100
C (63,1)
                        IF (T.LE.FMT2) GOTO 120
C (62,1)
                        TI = ONE/T
C (61,1)
                        IF (VTEST*TI.LT.VTOLS) GOTO 2004
C (60,1)
C                       BEGIN BLOCK
C (60,2)
                        FQ0 = DSQRT(PIDIV4*TI)
C (60,3)
                        FQ1 = H*FQ0*TI
C                       END BLOCK
C (56,1)
                        IF (JTYPE.EQ.1) GOTO 3003
C (57,1)
                        FQ2 = ONE5*FQ1*TI
C (58,1)
                        IF (JTYPE.EQ.2) GOTO 3004
C (59,1)
C                       BEGIN BLOCK
C (59,2)
                        FQ3 = TWO5*FQ2*TI
C (59,3)
                        FQ4 = THREE5*FQ3*TI
C (59,4)
                        FQ5 = FOUR5*FQ4*TI
C                       END BLOCK
99987                   CONTINUE
C (54,1)
                        IF (JTYPE.EQ.1) GOTO 3003
C (32,1)
                        IF (JTYPE.EQ.2) GOTO 3004
C (33,1)
C                       BEGIN BLOCK
C (33,2)
                        PQXY = PQX*PQY
C (33,3)
                        PQYZ = PQY*PQZ
C (33,4)
                        PQXZ = PQX*PQZ
C (33,5)
                        QA1 = A12*A1234I
C (33,6)
                        CPD = C2(L)*E34
C                       END BLOCK
C (34,1)
                        IF (LC.EQ.1) GOTO 52
C (53,1)
C                       BEGIN BLOCK
C (53,2)
                        CSSPS = CSSP*CSD
C (53,3)
                        CPSPS = CPSP*CSD
C (53,4)
                        OQXO = -S4*CDX
C (53,5)
                        OQYO = -S4*CDY
C (53,6)
                        OQZO = -S4*CDZ
C                       END BLOCK
C (52,1)
                        IF (LD.EQ.1) GOTO 52
C (51,1)
C                       BEGIN BLOCK
C (51,2)
                        CSSSP = CSSS*CPD
C (51,3)
                        CSSPP = CSSP*CPD
C (51,4)
                        CSPSP = CSPS*CPD
C (51,5)
                        CPSSP = CPSS*CPD
C (51,6)
                        CSPPP = CSPP*CPD
C (51,7)
                        CPSPP = CPSP*CPD
C (51,8)
                        CPPSP = CPPS*CPD
C (51,9)
                        CPPPP = CPPP*CPD
C (51,10)
                        OQOX = S3*CDX
C (51,11)
                        OQOY = S3*CDY
C (51,12)
                        OQOZ = S3*CDZ
C (51,13)
                        OQXX = OQXO*OQOX+H*A34I
C (51,14)
                        OQYY = OQYO*OQOY+H*A34I
C (51,15)
                        OQZZ = OQZO*OQOZ+H*A34I
C (51,16)
                        OQXY = OQXO*OQOY
C (51,17)
                        OQXZ = OQXO*OQOZ
C (51,18)
                        OQYX = OQXY
C (51,19)
                        OQYZ = OQYO*OQOZ
C (51,20)
                        OQZX = OQXZ
C (51,21)
                        OQZY = OQYZ
C (51,22)
                        OQXOX = OQXO+OQOX
C (51,23)
                        OQYOY = OQYO+OQOY
C (51,24)
                        OQZOZ = OQZO+OQOZ
C                       END BLOCK
C (35,1)
C                       BEGIN BLOCK
C (35,2)
52                      CONTINUE
C (35,3)
C
C        BEGIN THE FIRST PASS THROUGH THE INTEGRAL CALCULATIONS
C
                        FLAG = .FALSE.
C                       END BLOCK
C (36,1)
C                       BEGIN BLOCK
C (36,2)
3001                    CONTINUE
C (36,3)
C
C     INTEGRAL EVALUATION SECTION
C
C        (SS,SS) SECTION
C
                        GOOOO = FQ0
C (36,4)
                        V0000 = GOOOO
C (36,5)
                        VE00 = V0000*EOOOO
C                       END BLOCK
C (37,1)
                        IF (JTYPE.LT.2) GOTO 99988
C (50,1)
C                       BEGIN BLOCK
C (50,2)
C
C        (PS,SS) SECTION
C
                        QFQ1 = -QA2*FQ1
C (50,3)
                        GXOOO = PQX*QFQ1
C (50,4)
                        V1000 = OPXO*GOOOO+GXOOO
C (50,5)
                        GYOOO = PQY*QFQ1
C (50,6)
                        V2000 = OPYO*GOOOO+GYOOO
C (50,7)
                        GZOOO = PQZ*QFQ1
C (50,8)
                        V3000 = OPZO*GOOOO+GZOOO
C (50,9)
                        CPSSS = CPSS*CSD
C (50,10)
                        VE00 = VE00+(V1000*E(65)+V2000*E(129)+V3000*E
     &                  (193))*CPSSS
C (50,11)
                        TEMP = V0000*CPSSS
C (50,12)
                        VE11 = TEMP*E(65)
C (50,13)
                        VE21 = TEMP*E(129)
C (50,14)
                        VE31 = TEMP*E(193)
C                       END BLOCK
C (49,1)
                        IF (JTYPE-3.LT.0) GOTO 99988
C (48,1)
                        IF (JTYPE-3.EQ.0) GOTO 4003
C (47,1)
C                       BEGIN BLOCK
C (47,2)
C
C        (PS,PS) + (SS,PS) SECTION
C
4004                    CONTINUE
C (47,3)
                        QFQ1 = QA1*FQ1
C (47,4)
                        GOOXO = PQX*QFQ1
C (47,5)
                        V0010 = OQXO*GOOOO+GOOXO
C (47,6)
                        GOOYO = PQY*QFQ1
C (47,7)
                        V0020 = OQYO*GOOOO+GOOYO
C (47,8)
                        GOOZO = PQZ*QFQ1
C (47,9)
                        V0030 = OQZO*GOOOO+GOOZO
C (47,10)
                        HFQ1 = H*FQ1*A1234I
C (47,11)
                        QFQ2 = -QA*FQ2*A1234I
C (47,12)
                        GXOXO = PQXX*QFQ2+HFQ1
C (47,13)
                        V1010 = OPXO*V0010+OQXO*GXOOO+GXOXO
C (47,14)
                        GYOYO = PQYY*QFQ2+HFQ1
C (47,15)
                        V2020 = OPYO*V0020+OQYO*GYOOO+GYOYO
C (47,16)
                        GZOZO = PQZZ*QFQ2+HFQ1
C (47,17)
                        V3030 = OPZO*V0030+OQZO*GZOOO+GZOZO
C (47,18)
                        GXOYO = PQXY*QFQ2
C (47,19)
                        V1020 = OPXO*V0020+OQYO*GXOOO+GXOYO
C (47,20)
                        V2010 = OPYO*V0010+OQXO*GYOOO+GXOYO
C (47,21)
                        GXOZO = PQXZ*QFQ2
C (47,22)
                        V1030 = OPXO*V0030+OQZO*GXOOO+GXOZO
C (47,23)
                        V3010 = OPZO*V0010+OQXO*GZOOO+GXOZO
C (47,24)
                        GYOZO = PQYZ*QFQ2
C (47,25)
                        V2030 = OPYO*V0030+OQZO*GYOOO+GYOZO
C (47,26)
                        V3020 = OPZO*V0020+OQYO*GZOOO+GYOZO
C (47,27)
                        VE00 = VE00+(V0010*E(5)+V0020*E(9)+V0030*E(13
     &                  ))*CSSPS
C (47,28)
                        TEMP = V0000*CSSPS
C (47,29)
                        VE13 = TEMP*E(5)
C (47,30)
                        VE23 = TEMP*E(9)
C (47,31)
                        VE33 = TEMP*E(13)
C (47,32)
                        VE00 = VE00+(V1010*E(69)+V1020*E(73)+V1030*E(
     &                  77)+V2010*E(133)+V2020*E(137)+V2030*E(141)+
     &                  V3010*E(197)+V3020*E(201)+V3030*E(205))*CPSPS
C (47,33)
                        VE11 = VE11+(V0010*E(69)+V0020*E(73)+V0030*E(
     &                  77))*CPSPS
C (47,34)
                        VE13 = VE13+(V1000*E(69)+V2000*E(133)+V3000*E
     &                  (197))*CPSPS
C (47,35)
                        VE21 = VE21+(V0010*E(133)+V0020*E(137)+V0030*
     &                  E(141))*CPSPS
C (47,36)
                        VE23 = VE23+(V1000*E(73)+V2000*E(137)+V3000*E
     &                  (201))*CPSPS
C (47,37)
                        VE31 = VE31+(V0010*E(197)+V0020*E(201)+V0030*
     &                  E(205))*CPSPS
C (47,38)
                        VE33 = VE33+(V1000*E(77)+V2000*E(141)+V3000*E
     &                  (205))*CPSPS
C                       END BLOCK
C (46,1)
                        IF (JTYPE.EQ.4) GOTO 99988
C (45,1)
C                       BEGIN BLOCK
C (45,2)
C
C        (PP,SS) + (SP,SS) SECTION
C
4003                    CONTINUE
C (45,3)
                        V0100 = OPOX*GOOOO+GXOOO
C (45,4)
                        V0200 = OPOY*GOOOO+GYOOO
C (45,5)
                        V0300 = OPOZ*GOOOO+GZOOO
C (45,6)
                        CSPSS = CSPS*CSD
C (45,7)
                        VE00 = VE00+(V0100*E(17)+V0200*E(33)+V0300*E(
     &                  49))*CSPSS
C (45,8)
                        TEMP = V0000*CSPSS
C (45,9)
                        VE12 = TEMP*E(17)
C (45,10)
                        VE22 = TEMP*E(33)
C (45,11)
                        VE32 = TEMP*E(49)
C (45,12)
                        HFQ1 = -H*QA2*FQ1*A12I
C (45,13)
                        QFQ2 = QA2*QA2*FQ2
C (45,14)
                        GXXOO = PQXX*QFQ2+HFQ1
C (45,15)
                        V1100 = OPXX*GOOOO+OPXOX*GXOOO+GXXOO
C (45,16)
                        GYYOO = PQYY*QFQ2+HFQ1
C (45,17)
                        V2200 = OPYY*GOOOO+OPYOY*GYOOO+GYYOO
C (45,18)
                        GZZOO = PQZZ*QFQ2+HFQ1
C (45,19)
                        V3300 = OPZZ*GOOOO+OPZOZ*GZOOO+GZZOO
C (45,20)
                        GXYOO = PQXY*QFQ2
C (45,21)
                        V1200 = OPXO*V0200+OPOY*GXOOO+GXYOO
C (45,22)
                        V2100 = OPYO*V0100+OPOX*GYOOO+GXYOO
C (45,23)
                        GXZOO = PQXZ*QFQ2
C (45,24)
                        V1300 = OPXO*V0300+OPOZ*GXOOO+GXZOO
C (45,25)
                        V3100 = OPZO*V0100+OPOX*GZOOO+GXZOO
C (45,26)
                        GYZOO = PQYZ*QFQ2
C (45,27)
                        V2300 = OPYO*V0300+OPOZ*GYOOO+GYZOO
C (45,28)
                        V3200 = OPZO*V0200+OPOY*GZOOO+GYZOO
C (45,29)
                        CPPSS = CPPS*CSD
C (45,30)
                        VE00 = VE00+(V1100*E(81)+V1200*E(97)+V1300*E(
     &                  113)+V2100*E(145)+V2200*E(161)+V2300*E(177)+
     &                  V3100*E(209)+V3200*E(225)+V3300*E(241))*CPPSS
C (45,31)
                        VE11 = VE11+(V0100*E(81)+V0200*E(97)+V0300*E(
     &                  113))*CPPSS
C (45,32)
                        VE21 = VE21+(V0100*E(145)+V0200*E(161)+V0300*
     &                  E(177))*CPPSS
C (45,33)
                        VE31 = VE31+(V0100*E(209)+V0200*E(225)+V0300*
     &                  E(241))*CPPSS
C (45,34)
                        VE12 = VE12+(V1000*E(81)+V2000*E(145)+V3000*E
     &                  (209))*CPPSS
C (45,35)
                        VE22 = VE22+(V1000*E(97)+V2000*E(161)+V3000*E
     &                  (225))*CPPSS
C (45,36)
                        VE32 = VE32+(V1000*E(113)+V2000*E(177)+V3000*
     &                  E(241))*CPPSS
C                       END BLOCK
C (44,1)
                        IF (JTYPE.EQ.3) GOTO 99988
C (43,1)
C                       BEGIN BLOCK
C (43,2)
C
C        (PP,PS) + (SP,PS) SECTION
C
                        V0110 = OQXO*V0100+OPOX*GOOXO+GXOXO
C (43,3)
                        V0120 = OQYO*V0100+OPOX*GOOYO+GXOYO
C (43,4)
                        V0130 = OQZO*V0100+OPOX*GOOZO+GXOZO
C (43,5)
                        V0210 = OQXO*V0200+OPOY*GOOXO+GXOYO
C (43,6)
                        V0220 = OQYO*V0200+OPOY*GOOYO+GYOYO
C (43,7)
                        V0230 = OQZO*V0200+OPOY*GOOZO+GYOZO
C (43,8)
                        V0310 = OQXO*V0300+OPOZ*GOOXO+GXOZO
C (43,9)
                        V0320 = OQYO*V0300+OPOZ*GOOYO+GYOZO
C (43,10)
                        V0330 = OQZO*V0300+OPOZ*GOOZO+GZOZO
C (43,11)
                        CSPPS = CSPP*CSD
C (43,12)
                        VE00 = VE00+(V0110*E(21)+V0120*E(25)+V0130*E(
     &                  29)+V0210*E(37)+V0220*E(41)+V0230*E(45)+V0310
     &                  *E(53)+V0320*E(57)+V0330*E(61))*CSPPS
C (43,13)
                        VE12 = VE12+(V0010*E(21)+V0020*E(25)+V0030*E(
     &                  29))*CSPPS
C (43,14)
                        VE22 = VE22+(V0010*E(37)+V0020*E(41)+V0030*E(
     &                  45))*CSPPS
C (43,15)
                        VE32 = VE32+(V0010*E(53)+V0020*E(57)+V0030*E(
     &                  61))*CSPPS
C (43,16)
                        VE13 = VE13+(V0100*E(21)+V0200*E(37)+V0300*E(
     &                  53))*CSPPS
C (43,17)
                        VE23 = VE23+(V0100*E(25)+V0200*E(41)+V0300*E(
     &                  57))*CSPPS
C (43,18)
                        VE33 = VE33+(V0100*E(29)+V0200*E(45)+V0300*E(
     &                  61))*CSPPS
C (43,19)
                        QFQ3 = QA1*QA2*QA2*FQ3
C (43,20)
                        HFQ2 = -H*QA2*FQ2*A1234I
C (43,21)
                        TFQ2 = THREE*HFQ2
C (43,22)
                        GXYZO = PQXY*PQZ*QFQ3
C (43,23)
                        C1230 = OPXY*GOOZO+OPXO*GYOZO+OPOY*GXOZO+
     &                  GXYZO
C (43,24)
                        V1230 = OQZO*V1200+C1230
C (43,25)
                        C1320 = OPXZ*GOOYO+OPXO*GYOZO+OPOZ*GXOYO+
     &                  GXYZO
C (43,26)
                        V1320 = OQYO*V1300+C1320
C (43,27)
                        C2130 = OPYX*GOOZO+OPYO*GXOZO+OPOX*GYOZO+
     &                  GXYZO
C (43,28)
                        V2130 = OQZO*V2100+C2130
C (43,29)
                        C2310 = OPYZ*GOOXO+OPYO*GXOZO+OPOZ*GXOYO+
     &                  GXYZO
C (43,30)
                        V2310 = OQXO*V2300+C2310
C (43,31)
                        C3120 = OPZX*GOOYO+OPZO*GXOYO+OPOX*GYOZO+
     &                  GXYZO
C (43,32)
                        V3120 = OQYO*V3100+C3120
C (43,33)
                        C3210 = OPZY*GOOXO+OPZO*GXOYO+OPOY*GXOZO+
     &                  GXYZO
C (43,34)
                        V3210 = OQXO*V3200+C3210
C (43,35)
                        TEMP = PQXX*QFQ3
C (43,36)
                        GXXXO = PQX*(TEMP+TFQ2)
C (43,37)
                        C1110 = OPXX*GOOXO+OPXOX*GXOXO+GXXXO
C (43,38)
                        V1110 = OQXO*V1100+C1110
C (43,39)
                        GXXYO = PQY*(TEMP+HFQ2)
C (43,40)
                        C1120 = OPXX*GOOYO+OPXOX*GXOYO+GXXYO
C (43,41)
                        V1120 = OQYO*V1100+C1120
C (43,42)
                        C1210 = OPXY*GOOXO+OPXO*GXOYO+OPOY*GXOXO+
     &                  GXXYO
C (43,43)
                        V1210 = OQXO*V1200+C1210
C (43,44)
                        C2110 = OPYX*GOOXO+OPYO*GXOXO+OPOX*GXOYO+
     &                  GXXYO
C (43,45)
                        V2110 = OQXO*V2100+C2110
C (43,46)
                        GXXZO = PQZ*(TEMP+HFQ2)
C (43,47)
                        C1130 = OPXX*GOOZO+OPXOX*GXOZO+GXXZO
C (43,48)
                        V1130 = OQZO*V1100+C1130
C (43,49)
                        C1310 = OPXZ*GOOXO+OPXO*GXOZO+OPOZ*GXOXO+
     &                  GXXZO
C (43,50)
                        V1310 = OQXO*V1300+C1310
C (43,51)
                        C3110 = OPZX*GOOXO+OPZO*GXOXO+OPOX*GXOZO+
     &                  GXXZO
C (43,52)
                        V3110 = OQXO*V3100+C3110
C (43,53)
                        TEMP = PQYY*QFQ3
C (43,54)
                        GYYYO = PQY*(TEMP+TFQ2)
C (43,55)
                        C2220 = OPYY*GOOYO+OPYOY*GYOYO+GYYYO
C (43,56)
                        V2220 = OQYO*V2200+C2220
C (43,57)
                        GYYXO = PQX*(TEMP+HFQ2)
C (43,58)
                        C2210 = OPYY*GOOXO+OPYOY*GXOYO+GYYXO
C (43,59)
                        V2210 = OQXO*V2200+C2210
C (43,60)
                        C2120 = OPYX*GOOYO+OPYO*GXOYO+OPOX*GYOYO+
     &                  GYYXO
C (43,61)
                        V2120 = OQYO*V2100+C2120
C (43,62)
                        C1220 = OPXY*GOOYO+OPXO*GYOYO+OPOY*GXOYO+
     &                  GYYXO
C (43,63)
                        V1220 = OQYO*V1200+C1220
C (43,64)
                        GYYZO = PQZ*(TEMP+HFQ2)
C (43,65)
                        C2230 = OPYY*GOOZO+OPYOY*GYOZO+GYYZO
C (43,66)
                        V2230 = OQZO*V2200+C2230
C (43,67)
                        C2320 = OPYZ*GOOYO+OPYO*GYOZO+OPOZ*GYOYO+
     &                  GYYZO
C (43,68)
                        V2320 = OQYO*V2300+C2320
C (43,69)
                        C3220 = OPZY*GOOYO+OPZO*GYOYO+OPOY*GYOZO+
     &                  GYYZO
C (43,70)
                        V3220 = OQYO*V3200+C3220
C (43,71)
                        TEMP = PQZZ*QFQ3
C (43,72)
                        GZZZO = PQZ*(TEMP+TFQ2)
C (43,73)
                        C3330 = OPZZ*GOOZO+OPZOZ*GZOZO+GZZZO
C (43,74)
                        V3330 = OQZO*V3300+C3330
C (43,75)
                        GZZXO = PQX*(TEMP+HFQ2)
C (43,76)
                        C3310 = OPZZ*GOOXO+OPZOZ*GXOZO+GZZXO
C (43,77)
                        V3310 = OQXO*V3300+C3310
C (43,78)
                        C3130 = OPZX*GOOZO+OPZO*GXOZO+OPOX*GZOZO+
     &                  GZZXO
C (43,79)
                        V3130 = OQZO*V3100+C3130
C (43,80)
                        C1330 = OPXZ*GOOZO+OPXO*GZOZO+OPOZ*GXOZO+
     &                  GZZXO
C (43,81)
                        V1330 = OQZO*V1300+C1330
C (43,82)
                        GZZYO = PQY*(TEMP+HFQ2)
C (43,83)
                        C3320 = OPZZ*GOOYO+OPZOZ*GYOZO+GZZYO
C (43,84)
                        V3320 = OQYO*V3300+C3320
C (43,85)
                        C3230 = OPZY*GOOZO+OPZO*GYOZO+OPOY*GZOZO+
     &                  GZZYO
C (43,86)
                        V3230 = OQZO*V3200+C3230
C (43,87)
                        C2330 = OPYZ*GOOZO+OPYO*GZOZO+OPOZ*GYOZO+
     &                  GZZYO
C (43,88)
                        V2330 = OQZO*V2300+C2330
C (43,89)
                        CPPPS = CPPP*CSD
C (43,90)
                        VE00 = VE00+(V1110*E(85)+V1120*E(89)+V1130*E(
     &                  93)+V1210*E(101)+V1220*E(105)+V1230*E(109)+
     &                  V1310*E(117)+V1320*E(121)+V1330*E(125)+V2110*
     &                  E(149)+V2120*E(153)+V2130*E(157)+V2210*E(165)
     &                  +V2220*E(169)+V2230*E(173)+V2310*E(181)+V2320
     &                  *E(185)+V2330*E(189)+V3110*E(213)+V3120*E(217
     &                  )+V3130*E(221)+V3210*E(229)+V3220*E(233)+
     &                  V3230*E(237)+V3310*E(245)+V3320*E(249)+V3330*
     &                  E(253))*CPPPS
C (43,91)
                        VE11 = VE11+(V0110*E(85)+V0120*E(89)+V0130*E(
     &                  93)+V0210*E(101)+V0220*E(105)+V0230*E(109)+
     &                  V0310*E(117)+V0320*E(121)+V0330*E(125))*CPPPS
C (43,92)
                        VE12 = VE12+(V1010*E(85)+V1020*E(89)+V1030*E(
     &                  93)+V2010*E(149)+V2020*E(153)+V2030*E(157)+
     &                  V3010*E(213)+V3020*E(217)+V3030*E(221))*CPPPS
C (43,93)
                        VE13 = VE13+(V1100*E(85)+V1200*E(101)+V1300*E
     &                  (117)+V2100*E(149)+V2200*E(165)+V2300*E(181)+
     &                  V3100*E(213)+V3200*E(229)+V3300*E(245))*CPPPS
C (43,94)
                        VE21 = VE21+(V0110*E(149)+V0120*E(153)+V0130*
     &                  E(157)+V0210*E(165)+V0220*E(169)+V0230*E(173)
     &                  +V0310*E(181)+V0320*E(185)+V0330*E(189))*
     &                  CPPPS
C (43,95)
                        VE22 = VE22+(V1010*E(101)+V1020*E(105)+V1030*
     &                  E(109)+V2010*E(165)+V2020*E(169)+V2030*E(173)
     &                  +V3010*E(229)+V3020*E(233)+V3030*E(237))*
     &                  CPPPS
C (43,96)
                        VE23 = VE23+(V1100*E(89)+V1200*E(105)+V1300*E
     &                  (121)+V2100*E(153)+V2200*E(169)+V2300*E(185)+
     &                  V3100*E(217)+V3200*E(233)+V3300*E(249))*CPPPS
C (43,97)
                        VE31 = VE31+(V0110*E(213)+V0120*E(217)+V0130*
     &                  E(221)+V0210*E(229)+V0220*E(233)+V0230*E(237)
     &                  +V0310*E(245)+V0320*E(249)+V0330*E(253))*
     &                  CPPPS
C (43,98)
                        VE32 = VE32+(V1010*E(117)+V1020*E(121)+V1030*
     &                  E(125)+V2010*E(181)+V2020*E(185)+V2030*E(189)
     &                  +V3010*E(245)+V3020*E(249)+V3030*E(253))*
     &                  CPPPS
C (43,99)
                        VE33 = VE33+(V1100*E(93)+V1200*E(109)+V1300*E
     &                  (125)+V2100*E(157)+V2200*E(173)+V2300*E(189)+
     &                  V3100*E(221)+V3200*E(237)+V3300*E(253))*CPPPS
C                       END BLOCK
C (42,1)
                        IF (JTYPE.NE.6) GOTO 99988
C (41,1)
C
C        (PP,PP), (PP,SP), (PS,PP), (SP,PP), (SS,PP), (SP,SP), (PS,SP),
C        AND (SS,SP) SECTION
C
                        CALL FPPPP
99988                   CONTINUE
C (38,1)
                        IF (FLAG) GOTO 3002
C (40,1)
C                       BEGIN BLOCK
C (40,2)
C
C        END OF THE FIRST PASS THROUGH THE INTEGRAL SECTION
C
                        FLAG = .TRUE.
C (40,3)
                        FQ0 = FQ1
C (40,4)
                        FQ1 = FQ2
C (40,5)
                        FQ2 = FQ3
C (40,6)
                        FQ3 = FQ4
C (40,7)
                        FQ4 = FQ5
C (40,8)
                        VE00S = VE00S+VE00
C (40,9)
                        VE11S = VE11S+VE11
C (40,10)
                        VE21S = VE21S+VE21
C (40,11)
                        VE31S = VE31S+VE31
C (40,12)
                        VE12S = VE12S+VE12
C (40,13)
                        VE22S = VE22S+VE22
C (40,14)
                        VE32S = VE32S+VE32
C (40,15)
                        CDVE00 = S34*(VE00+VE00)
C (40,16)
                        DX2X = -VE13*S4+VE14*S3-CDX*CDVE00
C (40,17)
                        DX2Y = -VE23*S4+VE24*S3-CDY*CDVE00
C (40,18)
                        DX2Z = -VE33*S4+VE34*S3-CDZ*CDVE00
C
C        BRANCH TO SECOND PASS
C
C                       END BLOCK
                        GOTO 3001
C (39,1)
C                       BEGIN BLOCK
C (39,2)
C
C        END OF THE SECOND PASS THROUGH THE INTEGRAL SECTION
C
3002                    CONTINUE
C (39,3)
                        QVE00 = QA*(VE00+VE00)
C (39,4)
                        DVEX = -(VE11+VE12)*QA2+(VE13+VE14)*QA1-PQX*
     &                  QVE00
C (39,5)
                        DVEY = -(VE21+VE22)*QA2+(VE23+VE24)*QA1-PQY*
     &                  QVE00
C (39,6)
                        DVEZ = -(VE31+VE32)*QA2+(VE33+VE34)*QA1-PQZ*
     &                  QVE00
C (39,7)
                        DVEXS = DVEXS+DVEX
C (39,8)
                        DVEYS = DVEYS+DVEY
C (39,9)
                        DVEZS = DVEZS+DVEZ
C                       END BLOCK
C (30,1)
C                       BEGIN BLOCK
C (30,2)
5000                    CONTINUE
C (30,3)
C
C        SUMMATION OF CONTRIBUTIONS FROM THE UNCONTRACTED GAUSSIANS
C
                        FXK = FXK+DX2X-DVEX*S3
C (30,4)
                        FYK = FYK+DX2Y-DVEY*S3
C (30,5)
                        FZK = FZK+DX2Z-DVEZ*S3
C                       END BLOCK
                        GOTO 2004
C (31,1)
C                       BEGIN BLOCK
C (31,2)
C
C        SPECIAL (PS,SS) SECTION
C
3004                    CONTINUE
C (31,3)
                        CPSSS = CPSS*CSD
C (31,4)
                        EXOOO = E(65)*CPSSS
C (31,5)
                        EYOOO = E(129)*CPSSS
C (31,6)
                        EZOOO = E(193)*CPSSS
C (31,7)
                        TEMP1 = OPXO*EXOOO+OPYO*EYOOO+OPZO*EZOOO
C (31,8)
                        TEMP2 = -(PQX*EXOOO+PQY*EYOOO+PQZ*EZOOO)*QA2
C (31,9)
                        VE00 = FQ0*(EOOOO+TEMP1)+FQ1*TEMP2
C (31,10)
                        VE00S = VE00S+VE00
C (31,11)
                        VE11S = VE11S+FQ0*EXOOO
C (31,12)
                        VE21S = VE21S+FQ0*EYOOO
C (31,13)
                        VE31S = VE31S+FQ0*EZOOO
C (31,14)
                        CDVE00 = S34*(VE00+VE00)
C (31,15)
                        DX2X = -CDX*CDVE00
C (31,16)
                        DX2Y = -CDY*CDVE00
C (31,17)
                        DX2Z = -CDZ*CDVE00
C (31,18)
                        VE00 = FQ1*(EOOOO+TEMP1)+FQ2*TEMP2
C (31,19)
                        QVE00 = QA*(VE00+VE00)
C (31,20)
                        TEMP = -QA2*FQ1
C (31,21)
                        DVEX = -PQX*QVE00+TEMP*EXOOO
C (31,22)
                        DVEY = -PQY*QVE00+TEMP*EYOOO
C (31,23)
                        DVEZ = -PQZ*QVE00+TEMP*EZOOO
C (31,24)
                        DVEXS = DVEXS+DVEX
C (31,25)
                        DVEYS = DVEYS+DVEY
C (31,26)
                        DVEZS = DVEZS+DVEZ
C                       END BLOCK
                        GOTO 5000
C (55,1)
C                       BEGIN BLOCK
C (55,2)
C
C        SPECIAL (SS,SS) SECTION
C
3003                    CONTINUE
C (55,3)
                        VE00 = FQ0*EOOOO
C (55,4)
                        VE00S = VE00S+VE00
C (55,5)
                        CDVE00 = S34*(VE00+VE00)
C (55,6)
                        DX2X = -CDX*CDVE00
C (55,7)
                        DX2Y = -CDY*CDVE00
C (55,8)
                        DX2Z = -CDZ*CDVE00
C (55,9)
                        QVE00 = QA*FQ1*(EOOOO+EOOOO)
C (55,10)
                        DVEX = -PQX*QVE00
C (55,11)
                        DVEY = -PQY*QVE00
C (55,12)
                        DVEZ = -PQZ*QVE00
C (55,13)
                        DVEXS = DVEXS+DVEX
C (55,14)
                        DVEYS = DVEYS+DVEY
C (55,15)
                        DVEZS = DVEZS+DVEZ
C                       END BLOCK
                        GOTO 5000
C (64,1)
C                       BEGIN BLOCK
C (64,2)
120                     IFMT = IFMT+1
C (64,3)
                        CALL FMTGEN(AFFQ, T, IFQMAX+1, ICK)
C                       END BLOCK
                        GOTO 99987
C (66,1)
C                       BEGIN BLOCK
C (66,2)
100                     CONTINUE
C (66,3)
                        QQ = T*TWENTY
C (66,4)
                        THETA = QQ-AINT(QQ)
C (66,5)
                        N = QQ-THETA
C (66,6)
                        THETA2 = THETA*(THETA-ONE)
C (66,7)
                        THETA3 = THETA2*(THETA-TWO)
C (66,8)
                        THETA4 = THETA2*(THETA+ONE)
C                       END BLOCK
C (67,1)
                        IF (IFQMAX.EQ.1) GOTO 101
C (76,1)
                        IF (IFQMAX.EQ.2) GOTO 102
C (75,1)
                        IF (IFQMAX.EQ.3) GOTO 103
C (74,1)
                        IF (IFQMAX.EQ.4) GOTO 104
C (73,1)
                        IF (IFQMAX.EQ.5) THEN
                        ENDIF
C (72,1)
105                     FQ5 = TBAF(N+1)+THETA*TBBF(N+1)-THETA3*TBCF(N
     &                  +1)+THETA4*TBCF(N+2)
C (71,1)
104                     FQ4 = TBAE(N+1)+THETA*TBBE(N+1)-THETA3*TBCE(N
     &                  +1)+THETA4*TBCE(N+2)
C (70,1)
103                     FQ3 = TBAD(N+1)+THETA*TBBD(N+1)-THETA3*TBCD(N
     &                  +1)+THETA4*TBCD(N+2)
C (69,1)
102                     FQ2 = TBAC(N+1)+THETA*TBBC(N+1)-THETA3*TBCC(N
     &                  +1)+THETA4*TBCC(N+2)
C (68,1)
C                       BEGIN BLOCK
C (68,2)
101                     FQ1 = TBAB(N+1)+THETA*TBBB(N+1)-THETA3*TBCB(N
     &                  +1)+THETA4*TBCB(N+2)
C (68,3)
                        FQ0 = TBAA(N+1)+THETA*TBBA(N+1)-THETA3*TBCA(N
     &                  +1)+THETA4*TBCA(N+2)
C                       END BLOCK
                        GOTO 99987
C (29,1)
2004                    CONTINUE
C                       END UNSTRUCTURED
C                       END BLOCK
                     ENDDO
C (27,48)
2003                 CONTINUE
C                    END BLOCK
                  ENDDO
C (27,49)
                  VEE = VEE+VE00S
C (27,50)
                  ABVE00 = S12*(VE00S+VE00S)
C (27,51)
                  DX1X = -VE11S*S2+VE12S*S1-ABX*ABVE00
C (27,52)
                  DX1Y = -VE21S*S2+VE22S*S1-ABY*ABVE00
C (27,53)
                  DX1Z = -VE31S*S2+VE32S*S1-ABZ*ABVE00
C (27,54)
                  FXI = FXI+DX1X+DVEXS*S1
C (27,55)
                  FYI = FYI+DX1Y+DVEYS*S1
C (27,56)
                  FZI = FZI+DX1Z+DVEZS*S1
C (27,57)
                  FXJ = FXJ-DX1X+DVEXS*S2
C (27,58)
                  FYJ = FYJ-DX1Y+DVEYS*S2
C (27,59)
                  FZJ = FZJ-DX1Z+DVEZS*S2
C                 END BLOCK
C (26,1)
2002              CONTINUE
C                 END UNSTRUCTURED
C                 END BLOCK
               ENDDO
C (24,60)
2001           CONTINUE
C              END BLOCK
            ENDDO
C (24,61)
C
C        SUMMATION OF THE CONTRIBUTIONS FROM THE SHELLS
C
            FXL = -(FXI+FXJ+FXK)
C (24,62)
            FYL = -(FYI+FYJ+FYK)
C (24,63)
            FZL = -(FZI+FZJ+FZK)
C (24,64)
            FXYZ(IATX) = FXYZ(IATX)+FXI
C (24,65)
            FXYZ(JATX) = FXYZ(JATX)+FXJ
C (24,66)
            FXYZ(KATX) = FXYZ(KATX)+FXK
C (24,67)
            FXYZ(LATX) = FXYZ(LATX)+FXL
C (24,68)
            FXYZ(IATY) = FXYZ(IATY)+FYI
C (24,69)
            FXYZ(JATY) = FXYZ(JATY)+FYJ
C (24,70)
            FXYZ(KATY) = FXYZ(KATY)+FYK
C (24,71)
            FXYZ(LATY) = FXYZ(LATY)+FYL
C (24,72)
            FXYZ(IATZ) = FXYZ(IATZ)+FZI
C (24,73)
            FXYZ(JATZ) = FXYZ(JATZ)+FZJ
C (24,74)
            FXYZ(KATZ) = FXYZ(KATZ)+FZK
C (24,75)
            FXYZ(LATZ) = FXYZ(LATZ)+FZL
C (24,76)
            IF (IDUMP.GE.2) THEN
C (24,77)
               WRITE (IOUT, 2005) ISHELL, JSHELL, KSHELL, LSHELL, FXI
     &         , FXJ, FXK, FXL, FYI, FYJ, FYK, FYL, FZI, FZJ, FZK, 
     &         FZL
            ELSE
C (24,78)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C           END BLOCK
C (23,1)
            IF (.NOT.USESYM) GOTO 1004
C (19,1)
C
C     SUMMATION OF CONTRIBUTIONS FROM SYMMETRICALLY EQUIVALENT SHELLS.
C
!     INITIALLY: DO 300
            DO KOP = 2, NSYMOP
C (19,2)
C              BEGIN BLOCK
C (19,3)
               JOP = ISYMOP(KOP)
C (19,4)
C              BEGIN UNSTRUCTURED
C (20,1)
               IF (JOP.EQ.0) GOTO 300
C (22,1)
C              BEGIN BLOCK
C (22,2)
               JOPIND = (JOP-1)*NATOMS
C (22,3)
               IAT1 = NEQATM(IAT+JOPIND)
C (22,4)
               JAT1 = NEQATM(JAT+JOPIND)
C (22,5)
               KAT1 = NEQATM(KAT+JOPIND)
C (22,6)
               LAT1 = NEQATM(LAT+JOPIND)
C (22,7)
               IATX = 3*IAT1-2
C (22,8)
               JATX = 3*JAT1-2
C (22,9)
               KATX = 3*KAT1-2
C (22,10)
               LATX = 3*LAT1-2
C (22,11)
               IATY = IATX+1
C (22,12)
               JATY = JATX+1
C (22,13)
               KATY = KATX+1
C (22,14)
               LATY = LATX+1
C (22,15)
               IATZ = IATY+1
C (22,16)
               JATZ = JATY+1
C (22,17)
               KATZ = KATY+1
C (22,18)
               LATZ = LATY+1
C (22,19)
               IXTR = JTRANS(1,JOP)
C (22,20)
               IYTR = JTRANS(2,JOP)
C (22,21)
               IZTR = JTRANS(3,JOP)
C (22,22)
               FXYZ(IATX) = FXYZ(IATX)+FXI*IXTR
C (22,23)
               FXYZ(JATX) = FXYZ(JATX)+FXJ*IXTR
C (22,24)
               FXYZ(KATX) = FXYZ(KATX)+FXK*IXTR
C (22,25)
               FXYZ(LATX) = FXYZ(LATX)+FXL*IXTR
C (22,26)
               FXYZ(IATY) = FXYZ(IATY)+FYI*IYTR
C (22,27)
               FXYZ(JATY) = FXYZ(JATY)+FYJ*IYTR
C (22,28)
               FXYZ(KATY) = FXYZ(KATY)+FYK*IYTR
C (22,29)
               FXYZ(LATY) = FXYZ(LATY)+FYL*IYTR
C (22,30)
               FXYZ(IATZ) = FXYZ(IATZ)+FZI*IZTR
C (22,31)
               FXYZ(JATZ) = FXYZ(JATZ)+FZJ*IZTR
C (22,32)
               FXYZ(KATZ) = FXYZ(KATZ)+FZK*IZTR
C (22,33)
               FXYZ(LATZ) = FXYZ(LATZ)+FZL*IZTR
C (22,34)
               IF (IDUMP.GE.2) THEN
C (22,35)
                  WRITE (IOUT, 2006) JOP, IXTR, IYTR, IZTR
               ELSE
C (22,36)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C              END BLOCK
C (21,1)
300            CONTINUE
C              END UNSTRUCTURED
C              END BLOCK
            ENDDO
            GOTO 1004
C (101,1)
C           BEGIN BLOCK
C (101,2)
1015        ID = INEW
C (101,3)
            INEW = KNEW
C (101,4)
            KNEW = ID
C (101,5)
            ID = JNEW
C (101,6)
            JNEW = LNEW
C (101,7)
            LNEW = ID
C           END BLOCK
            GOTO 1016
C (103,1)
C           BEGIN BLOCK
C (103,2)
1013        KNEW = LSHELL
C (103,3)
            LNEW = KSHELL
C           END BLOCK
            GOTO 1014
C (105,1)
C           BEGIN BLOCK
C (105,2)
1011        INEW = JSHELL
C (105,3)
            JNEW = ISHELL
C           END BLOCK
            GOTO 1012
C (15,1)
C           BEGIN BLOCK
C (15,2)
1003        CONTINUE
C (15,3)
            KSHELL = KSHELL+1
C           END BLOCK
            GOTO 99990
C (12,1)
1002        CONTINUE
C           END UNSTRUCTURED
         ENDDO
C        END BLOCK
C (9,1)
1001     CONTINUE
C        END UNSTRUCTURED
      ENDDO
C (0,17)
C***
!     INITIALLY: DO 9987
      DO I = 1, NATOMS
C (0,18)
9987     WRITE (IOUT, 9986) (FXYZ(3*I-3+J), J = 1, 3)
      ENDDO
C (0,19)
C***      IF(IDUMP.GT.0) CALL DMPFRC(IOUT,6HTWLDRV,6,NATOMS,F1XYZ)
      IF (IFMT.NE.0) THEN
C (0,20)
         WRITE (IOUT, 2007) IFMT
      ELSE
C (0,21)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,22)
C***      CALL TRAKIO(6HTWLDRV,2)
      RETURN
C     END BLOCK
      END

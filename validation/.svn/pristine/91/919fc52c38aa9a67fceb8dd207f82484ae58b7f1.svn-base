
PROPER  EFFECTS

int main()
{
   int t[100][10][3];

   int (*p)[3];
   int *pu;

   int (*q)[10][3];
   int (*qu)[3];

   int (*r)[100][10][3];
   int (*ru)[10][3];
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("sizeof(t) = %zd\n", sizeof(t));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1]) = %zd\n", sizeof(t[1]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2]) = %zd\n", sizeof(t[1][2]));
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
   printf("sizeof(t[1][2][3]) = %zd\n", sizeof(t[1][2][3]));
//             <    is written>: p

   p = &t[1][2];
//             <    is written>: pu
   pu = t[1][2];
//             <    is written>: pu
   pu = &t[1][2][0];
//             <    is written>: q

   q = &t[1];
//             <    is written>: qu
   qu = t[1];
//             <    is written>: qu
   qu = &t[1][0];
//             <    is written>: r

   r = &t;
//             <    is written>: ru
   ru = t;
//             <    is written>: ru
   ru = &t[0];
   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int t[100][10][3];


// Points To: none

   int (*p)[3];

// Points To:
// p -> undefined , EXACT

   int *pu;


// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT

   int (*q)[10][3];

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT

   int (*qu)[3];


// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT

   int (*r)[100][10][3];

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT

   int (*ru)[10][3];

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT


   printf("sizeof(t) = %zd\n", sizeof(t));

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   printf("sizeof(t[1]) = %zd\n", sizeof(t[1]));

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   printf("sizeof(t[1][2]) = %zd\n", sizeof(t[1][2]));

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   printf("sizeof(t[1][2][3]) = %zd\n", sizeof(t[1][2][3]));

// Points To:
// p -> undefined , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT


   p = &t[1][2];

// Points To:
// p -> t[1][2] , EXACT
// pu -> undefined , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   pu = t[1][2];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   pu = &t[1][2][0];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> undefined , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT


   q = &t[1];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> undefined , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   qu = t[1];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> t[1][0] , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT

   qu = &t[1][0];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> t[1][0] , EXACT
// r -> undefined , EXACT
// ru -> undefined , EXACT


   r = &t;

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> t[1][0] , EXACT
// r -> t , EXACT
// ru -> undefined , EXACT

   ru = t;

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> t[1][0] , EXACT
// r -> t , EXACT
// ru -> t[0] , EXACT

   ru = &t[0];

// Points To:
// p -> t[1][2] , EXACT
// pu -> t[1][2][0] , EXACT
// q -> t[1] , EXACT
// qu -> t[1][0] , EXACT
// r -> t , EXACT
// ru -> t[0] , EXACT

   return 0;
}

int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int t, i, j;
//		< is static > FALSE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int tsteps = 10000;
//		< is static > FALSE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int n = 4096;
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
#pragma scop
#pragma live-out A
   for(t = 0; t <= tsteps-1; t += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >
      for(i = 2; i <= n-1-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            2 <= 0`i <= n-1-1
//		<   tests   >
         B[i] = 0.33333*(A[i-1]+A[i]+A[i+1]);
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(j = 2; j <= n-1-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            2 <= 0`j <= n-1-1
//		<   tests   >
         A[j] = B[j];
   }
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`n, 0`tsteps, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}

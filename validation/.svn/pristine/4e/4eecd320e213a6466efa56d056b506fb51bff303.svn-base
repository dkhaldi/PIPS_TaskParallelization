
Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1)
         run_kernel(i, j, 512, 512, new_image, image, kernel);
}
void run_kernel(int i, int j, int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   int ki, kj;
   new_image[i][j] = 0.;
   for(ki = 0; ki <= 2; ki += 1)
      for(kj = 0; kj <= 2; kj += 1)
         new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
   new_image[i][j] = new_image[i][j]/(3*3);
}

After Inlining

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1) {
         int ki, kj;
         new_image[i][j] = 0.;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}

After scalarization

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1) {
         int ki, kj;
         new_image_0 = 0.;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               new_image_0 = new_image_0+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
         new_image_0 = new_image_0/(3*3);
         new_image[i][j] = new_image_0;
      }
}

After privatization + loop expansion

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0;
   I_0 = 5;
l99997:
   for(i = 0; i <= 511; i += 1)
l99998:
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l99993:
   for(i = 1; i <= 126*I_0; i += 1)
l99994:
      for(j = 1; j <= 510; j += 1) {
         int ki, kj;
         new_image_0 = 0.;
l99995:
         for(ki = 0; ki <= 2; ki += 1)
l99996:
            for(kj = 0; kj <= 2; kj += 1)
               new_image_0 = new_image_0+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
         new_image_0 = new_image_0/(3*3);
         if (i>=1&&i<=510)
            new_image[i][j] = new_image_0;
      }
}

After tiling

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0, i_t, j_t;
   I_0 = 5;
l99997:
   for(i = 0; i <= 511; i += 1)
l99998:
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l99993:
   for(i_t = 0; i_t <= I_0-1; i_t += 1)
      for(j_t = 0; j_t <= 101; j_t += 1)

         for(i = 126*i_t+1; i <= 126*i_t+126; i += 1)
            for(j = 5*j_t+1; j <= 5*j_t+5; j += 1) {
               int ki, kj;
               new_image_0 = 0.;
l99995:
               for(ki = 0; ki <= 2; ki += 1)
l99996:
                  for(kj = 0; kj <= 2; kj += 1)
                     new_image_0 = new_image_0+image[ki+i-1][kj+j-1]*kernel[ki][kj];
               new_image_0 = new_image_0/9;
               if (i>=1&&i<=510)
                  new_image[i][j] = new_image_0;
            }
}

After loop normalization

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0, i_t, j_t;
   I_0 = 5;
l99997:
   for(i = 1; i <= 512; i += 1)
l99998:
      for(j = 1; j <= 512; j += 1)
         new_image[i-1][j-1] = image[i-1][j-1];

l99993:
   for(i_t = 1; i_t <= 5; i_t += 1)
l99990:
      for(j_t = 1; j_t <= 102; j_t += 1)

l99991:
         for(i = 1; i <= 126; i += 1)
l99992:
            for(j = 1; j <= 5; j += 1) {
               int ki, kj;
               new_image_0 = 0.;
l99995:
               for(ki = 1; ki <= 3; ki += 1)
l99996:
                  for(kj = 1; kj <= 3; kj += 1)
                     new_image_0 = new_image_0+image[ki+i+126*i_t-128][kj+j+5*j_t-7]*kernel[ki-1][kj-1];
               new_image_0 = new_image_0/9;
               if (i+126*i_t-126>=1&&i+126*i_t-126<=510)
                  new_image[i+126*i_t-126][j+5*j_t-5] = new_image_0;
            }
}

loop expansion again

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0, i_t, j_t, I_1;
   I_1 = 1;
   I_0 = 5;
l99997:
   for(i = 1; i <= 512; i += 1)
l99998:
      for(j = 1; j <= 512; j += 1)
         new_image[i-1][j-1] = image[i-1][j-1];

l99993:
   for(i_t = 1; i_t <= 5; i_t += 1)
l99990:
      for(j_t = 1; j_t <= 102; j_t += 1)

l99991:
         for(i = 1; i <= 128*I_1; i += 1)
l99992:
            for(j = 1; j <= 5; j += 1) {
               int ki, kj;
               new_image_0 = 0.;
l99995:
               for(ki = 1; ki <= 3; ki += 1)
l99996:
                  for(kj = 1; kj <= 3; kj += 1)
                     new_image_0 = new_image_0+image[ki+i+126*i_t-128][kj+j+5*j_t-7]*kernel[ki-1][kj-1];
               new_image_0 = new_image_0/9;
               if (i>=1&&i<=126&&(i+126*i_t-126>=1&&i+126*i_t-126<=510))
                  new_image[i+126*i_t-126][j+5*j_t-5] = new_image_0;
            }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0, i_t, j_t, I_1;
   //PIPS generated variable
   int L_0;
   I_1 = 1;
   I_0 = 5;
l99997:
   for(i = 1; i <= 512; i += 1)
l99998:
      for(j = 1; j <= 512; j += 1)
         new_image[i-1][j-1] = image[i-1][j-1];

l99993:
   for(i_t = 1; i_t <= 5; i_t += 1)
l99990:
      for(j_t = 1; j_t <= 102; j_t += 1)

l99991:
         for(i = 1; i <= 128*I_1; i += 1)
l99992:
            for(j = 1; j <= 5; j += 1) {
               int ki, kj;
               new_image_0 = 0.;
l99995:
               for(ki = 1; ki <= 3; ki += 1)
l99996:
                  for(kj = 1; kj <= 3; kj += 1)
                     new_image_0 = new_image_0+image[ki+i+126*i_t-128][kj+j+5*j_t-7]*kernel[ki-1][kj-1];
               new_image_0 = new_image_0/9;
               L_0 = i>=1&&i<=126&&(i+126*i_t-126>=1&&i+126*i_t-126<=510);
               new_image[i+126*i_t-126][j+5*j_t-5] = L_0?new_image_0:new_image[i+126*i_t-126][j+5*j_t-5];
               ;
            }
}

After Double Outlining and load - store generation

void microcode_launcher(int isi, int isj, int I_1, int i_t, int j_t, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int L_0;
   // Declared by Pass Outlining
   int i, j;
   // Declared by Pass Outlining
   register float new_image_0;

l99991:
   for(i = 1; i <= 128*I_1; i += 1)
l99992:
      for(j = 1; j <= 5; j += 1) {
         int ki, kj;
         new_image_0 = 0.;
l99995:
         for(ki = 1; ki <= 3; ki += 1)
l99996:
            for(kj = 1; kj <= 3; kj += 1)
               new_image_0 = new_image_0+image[ki+i+126*i_t-128][kj+j+5*j_t-7]*kernel[ki-1][kj-1];
         new_image_0 = new_image_0/9;
         L_0 = i>=1&&i<=126&&(i+126*i_t-126>=1&&i+126*i_t-126<=510);
         new_image[i+126*i_t-126][j+5*j_t-5] = L_0?new_image_0:new_image[i+126*i_t-126][j+5*j_t-5];
      }
}
void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   //PIPS generated variable
   register float new_image_0;
   //PIPS generated variable
   int I_0, i_t, j_t, I_1;
   //PIPS generated variable
   int L_0;
   I_1 = 1;
   I_0 = 5;
l99997:
   for(i = 1; i <= 512; i += 1)
l99998:
      for(j = 1; j <= 512; j += 1)
         new_image[i-1][j-1] = image[i-1][j-1];

l99993:
   for(i_t = 1; i_t <= 5; i_t += 1)
l99990:
      for(j_t = 1; j_t <= 102; j_t += 1) {
         //PIPS generated variable
         float (*p4a_var_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_kernel0)[3][3] = (float (*)[3][3]) 0, (*p4a_var_new_image0)[512][512] = (float (*)[512][512]) 0;
         P4A_accel_malloc((void **) &p4a_var_new_image0, sizeof(float)*262144);
         P4A_accel_malloc((void **) &p4a_var_kernel0, sizeof(float)*9);
         P4A_accel_malloc((void **) &p4a_var_image0, sizeof(float)*262144);
         P4A_copy_to_accel_2d(sizeof(float), isi, isj, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);
         P4A_copy_to_accel_2d(sizeof(float), 3, 3, 3, 3, 0, 0, &kernel[0][0], *p4a_var_kernel0);
         P4A_copy_to_accel_2d(sizeof(float), isi, isj, 512, 512, 0, 0, &image[0][0], *p4a_var_image0);

l99991:         microcode_launcher(isi, isj, I_1, i_t, j_t, *p4a_var_image0, *p4a_var_kernel0, *p4a_var_new_image0);
         P4A_copy_from_accel_2d(sizeof(float), isi, isj, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);
         P4A_accel_free(p4a_var_new_image0);
         P4A_accel_free(p4a_var_kernel0);
         P4A_accel_free(p4a_var_image0);
      }
}
void microcode_launcher(int isi, int isj, int I_1, int i_t, int j_t, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int L_0;
   // Declared by Pass Outlining
   int i, j;
   // Declared by Pass Outlining
   register float new_image_0;

l99991:
   for(i = 1; i <= 128*I_1; i += 1)
l99992:      convol_microcode(isi, isj, i, i_t, image, j_t, kernel, new_image);
}
void convol_microcode(int isi, int isj, int i, int i_t, float image[isi][isj], int j_t, float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int L_0, j;
   // Declared by Pass Outlining
   register float new_image_0;
l99992:
   for(j = 1; j <= 5; j += 1) {
      int ki, kj;
      new_image_0 = 0.;
l99995:
      for(ki = 1; ki <= 3; ki += 1)
l99996:
         for(kj = 1; kj <= 3; kj += 1)
            new_image_0 = new_image_0+image[ki+i+126*i_t-128][kj+j+5*j_t-7]*kernel[ki-1][kj-1];
      new_image_0 = new_image_0/9;
      L_0 = i>=1&&i<=126&&(i+126*i_t-126>=1&&i+126*i_t-126<=510);
      new_image[i+126*i_t-126][j+5*j_t-5] = L_0?new_image_0:new_image[i+126*i_t-126][j+5*j_t-5];
   }
}

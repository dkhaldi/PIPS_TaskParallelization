
PROPER  EFFECTS

void list_clean(list *p)
{
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: _MALLOC_EFFECTS:_MALLOC_
   list_free(*p);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: nil p
   *p = nil;
   return;
}
list list_cons(double v, list l)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: n _MALLOC_EFFECTS:_MALLOC_
   list n = (list) malloc(sizeof(struct cons_t ));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: n v
   n->value = v;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l n
   n->next = l;
//             <    is read   >: n
   return n;
}
void list_free(list l)
{
//             <    is read   >: l
//             <    is written>: n p
   list n = l, p = l;
//             <    is read   >: n nil
   while (n!=nil) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: n
      n = n->next;
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <    is read   >: n
//             <    is written>: p
      p = n;
   }
   return;
}
int list_len(list l)
{
//             <    is written>: n
   int n = 0;
//             <    is read   >: l
//             <    is written>: c
   list c = l;
//             <    is read   >: c nil
   while (c!=nil) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: c
      // we know that c!=nil...
      c = list_next(c);
//             <    is read   >: n
//             <    is written>: n
      n++;
   }
//             <    is read   >: n
   return n;
}
list list_next(list l)
{
   //if (l==nil)
   //  return nil;
   //else
   //  return l->next;
   list n;
//             <    is read   >: l nil
   if (l==nil)
//             <    is read   >: nil
//             <    is written>: n
      n = nil;
   else
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: n
      n = l->next;
//             <    is read   >: n
   return n;
}
list list_set_next(list l, list n)
{
//             <    is read   >: l nil
   if (l!=nil)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l n
      l->next = n;
   else
//             <    is read   >: n
//             <    is written>: l
      l = n;
//             <    is read   >: l
   return l;
}
list list_set_value(list l, double v)
{
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l v
   // could fail?!
   l->value = v;
//             <    is read   >: l
   return l;
}
double list_value(list l)
{
   /* if (l==nil) */
   /*   return 0.0; */
   /* else */
   /*   return l->value; */
   double v;
//             <    is read   >: l nil
   if (l==nil)
//             <    is written>: v
      v = 0.0;
   else
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: v
      v = l->value;
//             <    is read   >: v
   return v;
}
int main(void)
{
   list l;
//             <    is read   >: nil
//             <    is written>: l
   l = nil;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: nil _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   l = list_cons(1.0, nil);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   l = list_cons(2.0, l);
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   l = list_cons(3.0, l);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: n
   int n = list_len(l);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: _MALLOC_EFFECTS:_MALLOC_
   list_free(l);
   return 0;
}

POINTS-TO


// Points To IN:
// _p_1[0] -> *NULL_POINTER* , MAY
// _p_1[0] -> _p_1_1[0][0] , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY


// Points To OUT:
// _p_1[0] -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

void list_clean(list *p)
{

// Points To:
// _p_1[0] -> *NULL_POINTER* , MAY
// _p_1[0] -> _p_1_1[0][0] , MAY
// p -> *NULL_POINTER* , MAY
// p -> _p_1[0] , MAY

   list_free(*p);

// Points To:
// nil -> *NULL_POINTER* , EXACT
// p -> _p_1[0] , EXACT

   *p = nil;

// Points To:
// _p_1[0] -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT
// p -> _p_1[0] , EXACT

   return;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_2[0] , MAY


// Points To OUT:
// *HEAP*_l_15.next -> *NULL_POINTER* , MAY
// *HEAP*_l_15.next -> _l_2[0] , MAY
// list_cons -> *HEAP*_l_15 , MAY

list list_cons(double v, list l)
{

// Points To: none

   list n = (list) malloc(sizeof(struct cons_t ));

// Points To:
// n -> *HEAP*_l_15 , MAY

   n->value = v;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_2[0] , MAY
// n -> *HEAP*_l_15 , MAY

   n->next = l;

// Points To:
// *HEAP*_l_15.next -> *NULL_POINTER* , MAY
// *HEAP*_l_15.next -> _l_2[0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_2[0] , MAY
// n -> *HEAP*_l_15 , MAY

   return n;
}

// Points To IN:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1_2__1[0][0][0][0]
//     , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> _l_1_2__1_2__1_2__1_2__1[0]
//    [0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0]
//     , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

void list_free(list l)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY

   list n = l, p = l;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _l_1[0] , MAY

   while (n!=nil) {

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1_2__1[0][0][0][0]
//     , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> _l_1_2__1_2__1_2__1_2__1[0]
//    [0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0]
//     , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> _l_1[0] , MAY
// n -> _l_1_2__1[0][0] , MAY
// n -> _l_1_2__1_2__1[0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1[0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1[0] , MAY
// p -> _l_1_2__1[0][0] , MAY
// p -> _l_1_2__1_2__1[0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1[0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY

      n = n->next;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1_2__1[0][0][0][0]
//     , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> _l_1_2__1_2__1_2__1_2__1[0]
//    [0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0]
//     , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1[0][0] , MAY
// n -> _l_1_2__1_2__1[0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1[0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0
//    ] , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1[0] , MAY
// p -> _l_1_2__1[0][0] , MAY
// p -> _l_1_2__1_2__1[0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1[0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// p -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY

      free(p);

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1_2__1[0][0][0] , MAY
// _l_1_2__1_2__1[0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1[0][0][0].next -> _l_1_2__1_2__1_2__1[0][0][0][0]
//     , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1[0][0][0][0].next -> _l_1_2__1_2__1_2__1_2__1[0]
//    [0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0].next -> 
//    _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0]
//     , MAY
// l -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// l -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1[0][0] , MAY
// n -> _l_1_2__1_2__1[0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1[0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1[0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0] , MAY
// n -> _l_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1[0][0][0][0][0][0][0][0
//    ] , MAY
// nil -> *NULL_POINTER* , EXACT
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      p = n;
   }

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _l_1[0] , MAY

   return;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

int list_len(list l)
{

// Points To: none

   int n = 0;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY

   list c = l;

// Points To:
// c -> *NULL_POINTER* , MAY
// c -> _l_1[0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   while (c!=nil) {

// Points To:
// c -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// c -> _l_1[0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      // we know that c!=nil...
      c = list_next(c);

// Points To:
// c -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      n++;
   }

// Points To:
// c -> *NULL_POINTER* , EXACT
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   return n;
}

// Points To IN:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// list_next -> *NULL_POINTER* , MAY
// list_next -> _l_1_2__1[0][0] , MAY
// nil -> *NULL_POINTER* , EXACT

list list_next(list l)
{
   //if (l==nil)
   //  return nil;
   //else
   //  return l->next;

// Points To: none

   list n;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

   if (l==nil)

// Points To:
// l -> *NULL_POINTER* , EXACT
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

      n = nil;
   else

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// l -> _l_1[0] , EXACT
// n -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

      n = l->next;

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1[0][0] , MAY
// nil -> *NULL_POINTER* , EXACT

   return n;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// n -> *NULL_POINTER* , MAY
// n -> _n_2[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _n_2[0] , MAY
// list_set_next -> *NULL_POINTER* , MAY
// list_set_next -> _l_1[0] , MAY
// list_set_next -> _n_2[0] , MAY
// nil -> *NULL_POINTER* , EXACT

list list_set_next(list l, list n)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   if (l!=nil)

// Points To:
// l -> _l_1[0] , EXACT
// n -> *NULL_POINTER* , MAY
// n -> _n_2[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      l->next = n;
   else

// Points To:
// l -> *NULL_POINTER* , EXACT
// n -> *NULL_POINTER* , MAY
// n -> _n_2[0] , MAY
// nil -> *NULL_POINTER* , EXACT

      l = n;

// Points To:
// _l_1[0].next -> *NULL_POINTER* , MAY
// _l_1[0].next -> _n_2[0] , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// l -> _n_2[0] , MAY
// n -> *NULL_POINTER* , MAY
// n -> _n_2[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   return l;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY


// Points To OUT:
// list_set_value -> _l_1[0] , EXACT

list list_set_value(list l, double v)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY

   // could fail?!
   l->value = v;

// Points To:
// l -> _l_1[0] , EXACT

   return l;
}

// Points To IN:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

double list_value(list l)
{
   /* if (l==nil) */
   /*   return 0.0; */
   /* else */
   /*   return l->value; */

// Points To: none

   double v;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   if (l==nil)

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

      v = 0.0;
   else

// Points To:
// l -> _l_1[0] , EXACT
// nil -> *NULL_POINTER* , EXACT

      v = l->value;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1[0] , MAY
// nil -> *NULL_POINTER* , EXACT

   return v;
}

// Points To IN:
// nil -> *NULL_POINTER* , EXACT


// Points To OUT:
// nil -> *NULL_POINTER* , EXACT

int main(void)
{

// Points To: none

   list l;

// Points To:
// l -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// nil -> *NULL_POINTER* , EXACT

   l = nil;

// Points To:
// l -> *NULL_POINTER* , EXACT
// nil -> *NULL_POINTER* , EXACT

   l = list_cons(1.0, nil);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// nil -> *NULL_POINTER* , EXACT

   l = list_cons(2.0, l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// nil -> *NULL_POINTER* , EXACT

   l = list_cons(3.0, l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// nil -> *NULL_POINTER* , EXACT

   int n = list_len(l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// nil -> *NULL_POINTER* , EXACT

   list_free(l);

// Points To:
// l -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// nil -> *NULL_POINTER* , EXACT

   return 0;
}

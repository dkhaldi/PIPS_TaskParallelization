
Points-To for "main"


// Points To IN: none


// Points To OUT: none

int main(int argc, char **argv)
{

// Points To: none

   char buffer_in[100];

// Points To: none

   char buffer_out[100];

// Points To: none

   int l = argc;


// Points To: none

   char *ip = &buffer_in[0];

// Points To:
// ip -> buffer_in[0] , EXACT

   char *op = &buffer_out[0];

// Points To:
// ip -> buffer_in[0] , EXACT
// op -> buffer_out[0] , EXACT


   memcpy(op, ip, l);

// Points To:
// ip -> buffer_in[0] , EXACT
// op -> buffer_out[0] , EXACT

   mymemcpy(op, ip, l);

// Points To:
// ip -> buffer_in[0] , EXACT
// op -> buffer_out[0] , EXACT


   return 0;
}

Proper effects with points-to for "main"

int main(int argc, char **argv)
{
//             <    is declared>: buffer_in
   char buffer_in[100];
//             <    is declared>: buffer_out
   char buffer_out[100];
//             <    is read   >: argc
//             <    is written>: l
//             <    is referenced>: argc l
//             <    is declared>: l
   int l = argc;

//             <    is written>: ip
//             <    is referenced>: buffer_in ip
//             <    is declared>: ip
   char *ip = &buffer_in[0];
//             <    is written>: op
//             <    is referenced>: buffer_out op
//             <    is declared>: op
   char *op = &buffer_out[0];
//             <    is read   >: buffer_in[0:l-1] ip l op
//             <    is written>: buffer_out[0:l-1]
//             <    is referenced>: ip l op

   memcpy(op, ip, l);
//             <may be read   >: buffer_in[*]
//             <may be written>: buffer_out[*]
//             <    is read   >: ip l op
//             <    is referenced>: ip l op
   mymemcpy(op, ip, l);

   return 0;
}

Cumulated effects with poins-to for "main"

//             <    is read   >: argc
//             <    is referenced>: argc
int main(int argc, char **argv)
{
//             <    is declared>: buffer_in
   char buffer_in[100];
//             <    is declared>: buffer_out
   char buffer_out[100];
//             <    is read   >: argc
//             <    is written>: l
//             <    is referenced>: argc l
//             <    is declared>: l
   int l = argc;

//             <    is written>: ip
//             <    is referenced>: buffer_in ip
//             <    is declared>: ip
   char *ip = &buffer_in[0];
//             <    is written>: op
//             <    is referenced>: buffer_out op
//             <    is declared>: op
   char *op = &buffer_out[0];
//             <may be read   >: buffer_in[*]
//             <may be written>: buffer_out[*]
//             <    is read   >: ip l op
//             <    is referenced>: ip l op

   memcpy(op, ip, l);
//             <may be read   >: buffer_in[*]
//             <may be written>: buffer_out[*]
//             <    is read   >: ip l op
//             <    is referenced>: ip l op
   mymemcpy(op, ip, l);

   return 0;
}

Transformers for "main"


//  T(main) {main==0}

int main(int argc, char **argv)
{

//  T() {}

   char buffer_in[100];

//  T() {}

   char buffer_out[100];

//  T(l) {argc==l}

   int l = argc;


//  T() {}

   char *ip = &buffer_in[0];

//  T() {}

   char *op = &buffer_out[0];

//  T() {}


   memcpy(op, ip, l);

//  T() {}

   mymemcpy(op, ip, l);

//  T(main) {main==0}


   return 0;
}

Preconditions for "main"


//  P() {}

int main(int argc, char **argv)
{

//  P() {}

   char buffer_in[100];

//  P() {}

   char buffer_out[100];

//  P() {}

   int l = argc;


//  P(l) {argc==l}

   char *ip = &buffer_in[0];

//  P(l) {argc==l}

   char *op = &buffer_out[0];

//  P(l) {argc==l}


   memcpy(op, ip, l);

//  P(l) {argc==l}

   mymemcpy(op, ip, l);

//  P(l) {argc==l}


   return 0;
}

Convex array regions with points-to for "main"

int main(int argc, char **argv)
{

//  <buffer_in-WE-EXACT-{}>

   char buffer_in[100];

//  <buffer_out-WE-EXACT-{}>

   char buffer_out[100];
   int l = argc;


//  <buffer_in-RE-EXACT-{}>
//  <ip-RE-EXACT-{}>
//  <ip-WE-EXACT-{}>
//  <ip-W-EXACT-{}>

   char *ip = &buffer_in[0];

//  <buffer_out-RE-EXACT-{}>
//  <op-RE-EXACT-{}>
//  <op-WE-EXACT-{}>
//  <op-W-EXACT-{}>

   char *op = &buffer_out[0];

//  <buffer_in[PHI1]-R-EXACT-{0<=PHI1, PHI1+1<=l, l==argc}>
//  <buffer_out[PHI1]-W-EXACT-{0<=PHI1, PHI1+1<=l, l==argc}>
//  <ip-R-EXACT-{}>
//  <ip-RE-EXACT-{}>
//  <op-R-EXACT-{}>
//  <op-RE-EXACT-{}>


   memcpy(op, ip, l);

//  <buffer_in[PHI1]-R-EXACT-{0<=PHI1, PHI1+1<=l}>
//  <buffer_out[PHI1]-W-EXACT-{0<=PHI1, PHI1+1<=l}>
//  <ip-R-EXACT-{}>
//  <ip-RE-EXACT-{}>
//  <op-R-EXACT-{}>
//  <op-RE-EXACT-{}>

   mymemcpy(op, ip, l);

   return 0;
}

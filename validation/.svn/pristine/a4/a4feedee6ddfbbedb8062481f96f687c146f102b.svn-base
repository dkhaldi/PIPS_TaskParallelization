
TRANSFORMERS


//  T() {0<=n}

void test(int n)
{

//  T(d,s,t) {d==0, s==0, t==0}

   int s = 0, t = 0, d = 0;

//  T() {d==0, s==0, t==0, 0<=n}

   
   
   n>=0?(void) 0:__assert_fail("n>=0", "./car-safety-2.c", 18, __func__);

//  T(d,s,t) {d#init==0, s#init==0, t#init==0, 0<=d, s<=3d, s<=2d+2t,
//    d<=s+2t, 0<=n, t<=n, s<=2, 0<=t}

   while (s<=2&&t<=n)

//  T(d,s,t) {d+t==d#init+t#init+1, 0<=n, t#init<=n,
//    s#init+3t#init+1<=s+3t, s+3t<=3t#init+3, t#init<=t, t<=t#init+1}

      if (alea())

//  T(s,t) {s==0, t==t#init+1, 0<=n, t<=n+1, s#init<=2}

         t++, s = 0;
      else

//  T(d,s) {d==d#init+1, s==s#init+1, 0<=n, t<=n, s<=3}

         d++, s++;

//  T() {0<=d, 1<=d+3n+t, s<=3d, d<=s+2t, s+3t<=3n+3, t<=n+1, s<=3,
//    3<=s+5t}


   if (d<=2*n+3)

//  T() {0<=d, d<=2n+3, 1<=d+3n+t, d+t<=3n+3, s<=3d, d<=s+2t, 1<=d+4t,
//    1<=d+t, d<=2t+3, 0<=n, s+3t<=3n+3, t<=n+1, s<=3, 3<=s+5t, 0<=t}

      printf("healthy");
   else

//  T() {0<=d, 2n+4<=d, 1<=d+3n+t, d+t<=3n+3, s<=3d, d<=s+2t, 1<=d+4t,
//    1<=d+t, d<=2t+3, 0<=n, s+3t<=3n+3, t<=n+1, s<=3, 3<=s+5t, 0<=t}

      printf("crashed!");
}

PRECONDITIONS


//  P() {}

void test(int n)
{

//  P() {}

   int s = 0, t = 0, d = 0;

//  P(d,s,t) {d==0, s==0, t==0}

   
   
   n>=0?(void) 0:__assert_fail("n>=0", "./car-safety-2.c", 18, __func__);

//  P(d,s,t) {d==0, s==0, t==0, 0<=n}

   while (s<=2&&t<=n)

//  P(d,s,t) {0<=d, s<=3d, s<=2d+2t, d<=s+2t, t<=n, s<=2, 0<=t}

      if (alea())

//  P(d,s,t) {0<=d, s<=3d, s<=2d+2t, d<=s+2t, t<=n, s<=2, 0<=t}

         t++, s = 0;
      else

//  P(d,s,t) {0<=d, s<=3d, s<=2d+2t, d<=s+2t, t<=n, s<=2, 0<=t}

         d++, s++;

//  P(d,s,t) {0<=d, s+1<=2d+n+t, 5s<=9d, d<=s+2t, 3s+4<=7d+4t,
//    s+3<=3d+3t, s+1<=2d+2t, 2<=d+s+2t, 0<=n, s+3t<=3n+3, 1<=n+s+t,
//    t<=n+1, s<=3, 3<=s+3t, 2<=s+2t, 0<=t}


   if (d<=2*n+3)

//  P(d,s,t) {0<=d, d<=2n+3, s+1<=2d+n+t, 5s<=9d, d<=s+2t,
//    3s+4<=7d+4t, s+3<=3d+3t, s+1<=2d+2t, 2<=d+s+2t, 0<=n,
//    s+3t<=3n+3, 1<=n+s+t, t<=n+1, s<=3, 3<=s+3t, 2<=s+2t, 0<=t}

      printf("healthy");
   else

//  P() {0==-1}

      printf("crashed!");
}

AFTER DEAD CODE ELIMINATION

void test(int n)
{
   int s = 0, t = 0, d = 0;
   
   
   n>=0?(void) 0:__assert_fail("n>=0", "./car-safety-2.c", 18, __func__);
   while (s<=2&&t<=n)
      if (alea())
         t++, s = 0;
      else
         d++, s++;

   printf("healthy");
}

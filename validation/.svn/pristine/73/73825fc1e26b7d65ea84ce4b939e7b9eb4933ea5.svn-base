void foo_i2_d2(int _u_b_n0, int _u_b_n1, int _u_b[_u_b_n0][_u_b_n1], int _u_a_n0, int _u_a_n1, double _u_a[_u_a_n0][_u_a_n1])
{
   1;
   2;
   3;
   _u_b_n0==_u_a_n0&&_u_b_n1==_u_a_n1?(void) 0:__assert_fail("_u_b_n0 == _u_a_n0 && _u_b_n1 == _u_a_n1", ".t298.tmp/t298.c", 25, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= _u_a_n0-1; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= _u_a_n1-1; __lv2 += 1)
         cos(_u_b[__lv1][__lv2]);
   }
}
int main(int argc, char *argv[])
{
   scilab_rt_init(argc, argv, 0);
   
   /*  t298.sce _ Fixed a bug when a user function is called with the new type of an array */
   int _u_a[1][3];
   _u_a[0][0] = 1;
   _u_a[0][1] = 2;
   _u_a[0][2] = 3;
   scilab_rt_display_s0i2_("a", 1, 3, _u_a);
   double _tmpCT0[1][3];
   foo_i2_d2(1, 3, _u_a, 1, 3, _tmpCT0);
   double _Complex _u_c[1][3];
#pragma omp parallel for
   for(__lv2 = 0; __lv2 <= 2; __lv2 += 1)
      _u_c[0][__lv2] = (double _Complex) _tmpCT0[0][__lv2];
   __lv1 = 0+1;
   scilab_rt_display_s0z2_("c", 1, 3, _u_c);

   _u_c[0][0] = 1.0iF;
   _u_c[0][1] = 1.0iF;
   _u_c[0][2] = 1.0iF;
   scilab_rt_display_s0z2_("c", 1, 3, _u_c);

   scilab_rt_terminate();
}


Points-to for "conditional_free02"


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// p -> *HEAP*_l_13 , MAY
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

int conditional_free02(int *p, _Bool c1, _Bool c2, _Bool c3)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   int *q = p, i = 0;

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   if (c1)

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

      p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   if (c2) {

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

      free(p);

// Points To:
// p -> undefined , EXACT
// q -> undefined , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

      i++;
   }

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> undefined , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   if (c3)

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> undefined , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

      p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_13 , MAY
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> undefined , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   return *q;
}

Proper effects with points-to for "conditional_free02"

int conditional_free02(int *p, _Bool c1, _Bool c2, _Bool c3)
{
//             <    is read   >: p
//             <    is written>: i q
   int *q = p, i = 0;
//             <    is read   >: c1
   if (c1)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <    is read   >: c2
   if (c2) {
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <    is read   >: i
//             <    is written>: i
      i++;
   }
//             <    is read   >: c3
   if (c3)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <    is read   >: _p_1 q
   return *q;
}

Cumulated effects with points-to for "conditional_free02"

//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: _p_1 c1 c2 c3 p
int conditional_free02(int *p, _Bool c1, _Bool c2, _Bool c3)
{
//             <    is read   >: p
//             <    is written>: i q
   int *q = p, i = 0;
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: p _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c1
   if (c1)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <may be read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: i _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c2
   if (c2) {
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <    is read   >: i
//             <    is written>: i
      i++;
   }
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: p _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c3
   if (c3)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <    is read   >: _p_1 q
   return *q;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int *p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_19 , MAY

   (void) conditional_free02(p, 0, 1, 0);

// Points To:
// p -> *HEAP*_l_19 , MAY

   return 0;
}

Warnigns and errors:

1. Two memory leaks should be indicated;

2. But the current implementation of points_to_function_projection
does not allow it.

INTERPROCEDURAL_POINTS_TO_ANALYSIS[conditional_free02] (freed_list_to_points_to) Dangling pointer "q" has been detected at line 10.
INTERPROCEDURAL_POINTS_TO_ANALYSIS[conditional_free02] (list_assignment_to_points_to) Heap bucket "*HEAP*_l_8" possibly leaked at line 13.

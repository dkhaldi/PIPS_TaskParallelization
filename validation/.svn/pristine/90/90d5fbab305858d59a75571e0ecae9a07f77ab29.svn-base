
Initial code

void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 3/2; i <= isi-3/2-1; i += 1)
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         new_image[i][j] = 0.;
         new_image[i][j] += image[i+0-3/2][j+0-3/2]*kernel[0][0];
         new_image[i][j] += image[i+0-3/2][j+1-3/2]*kernel[0][1];
         new_image[i][j] += image[i+0-3/2][j+2-3/2]*kernel[0][2];
         new_image[i][j] += image[i+1-3/2][j+0-3/2]*kernel[1][0];
         new_image[i][j] += image[i+1-3/2][j+1-3/2]*kernel[1][1];
         new_image[i][j] += image[i+1-3/2][j+2-3/2]*kernel[1][2];
         new_image[i][j] += image[i+2-3/2][j+0-3/2]*kernel[2][0];
         new_image[i][j] += image[i+2-3/2][j+1-3/2]*kernel[2][1];
         new_image[i][j] += image[i+2-3/2][j+2-3/2]*kernel[2][2];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}
int main(int argc, char **argv)
{
   int image_size = atoi(argv[1]);
   float (*image)[image_size][image_size];
   float (*new_image)[image_size][image_size];
   float kernel[3][3];
   int i, j, n;

   image = (float (*)[image_size][image_size]) malloc(sizeof(float)*image_size*image_size);
   new_image = (float (*)[image_size][image_size]) malloc(sizeof(float)*image_size*image_size);

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = i*j;
   
   //     read *, image
   for(i = 0; i <= image_size-1; i += 1)
      for(j = 0; j <= image_size-1; j += 1)
         ((*image)[i])[j] = i*j;
   
   
   for(n = 0; n <= 0; n += 1)

      convol3x3(image_size, image_size, *new_image, *image, kernel);
   
   
   
   for(i = 0; i <= image_size-1; i += 1)
      printf("%f ", ((*new_image)[i])[i]);

   free(image);
   free(new_image);
   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 0;
}

Code after array conversion

void convol3x3(int isi, int isj, float *new_image, float *image, float *kernel)
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         *(new_image+(j+i*isj)) = *(image+(j+i*isj));

   for(i = 3/2; i <= isi-3/2-1; i += 1)
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         *(new_image+(j+i*isj)) = 0.;
         *(new_image+(j+i*isj)) += *(image+(j+0-3/2+(i+0-3/2)*isj))**(kernel+0);
         *(new_image+(j+i*isj)) += *(image+(j+1-3/2+(i+0-3/2)*isj))**(kernel+1);
         *(new_image+(j+i*isj)) += *(image+(j+2-3/2+(i+0-3/2)*isj))**(kernel+2);
         *(new_image+(j+i*isj)) += *(image+(j+0-3/2+(i+1-3/2)*isj))**(kernel+3);
         *(new_image+(j+i*isj)) += *(image+(j+1-3/2+(i+1-3/2)*isj))**(kernel+4);
         *(new_image+(j+i*isj)) += *(image+(j+2-3/2+(i+1-3/2)*isj))**(kernel+5);
         *(new_image+(j+i*isj)) += *(image+(j+0-3/2+(i+2-3/2)*isj))**(kernel+6);
         *(new_image+(j+i*isj)) += *(image+(j+1-3/2+(i+2-3/2)*isj))**(kernel+7);
         *(new_image+(j+i*isj)) += *(image+(j+2-3/2+(i+2-3/2)*isj))**(kernel+8);
         *(new_image+(j+i*isj)) = *(new_image+(j+i*isj))/(3*3);
      }
}
int main(int argc, char **argv)
{
   int image_size = atoi(*(argv+1));
   float *image = 0;
   float *new_image = 0;
   float *kernel = (float *) alloca(sizeof(float[9]));
   int i, j, n;

   image = (float *) malloc(sizeof(float)*image_size*image_size);
   new_image = (float *) malloc(sizeof(float)*image_size*image_size);

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         *(kernel+(3*i+j)) = i*j;
   
   //     read *, image
   for(i = 0; i <= image_size-1; i += 1)
      for(j = 0; j <= image_size-1; j += 1)
         *(image+(j+i*image_size)) = i*j;
   
   
   for(n = 0; n <= 0; n += 1)

      convol3x3(image_size, image_size, new_image, image, kernel);
   
   
   
   for(i = 0; i <= image_size-1; i += 1)
      printf("%f ", *(new_image+(i+i*image_size)));

   free(image);
   free(new_image);
   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 0;
}

Unsplit resulting code


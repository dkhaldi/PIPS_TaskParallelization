
"Initial launcher"

void p4a_launcher_updateBug(float force[128][128][128])
{
   // Declared by Pass Outlining
   int i, j, k;
   for(i = 0; i <= 127; i += 1)
      for(j = 0; j <= 127; j += 1)
         for(k = 0; k <= 127; k += 1) {
            // This scalar cause GPU_IFY to badly outline the kernel
            int x = 0;
            force[i][j][k] = 0;
         }
}

"After annotate"

void p4a_launcher_updateBug(float force[128][128][128])
{
   // Declared by Pass Outlining
   int i, j, k;
   // Loop nest P4A begin,2D(128, 128)
#pragma omp parallel for private(j)
   for(i = 0; i <= 127; i += 1)
#pragma omp parallel for private(k)
      for(j = 0; j <= 127; j += 1)
         // Loop nest P4A end
         if (i<=127&&j<=127)
            for(k = 0; k <= 127; k += 1) {
               // This scalar cause GPU_IFY to badly outline the kernel
               int x = 0;
               force[i][j][k] = 0;
            }
}

"After WRAPPER && KERNEL"

void p4a_launcher_updateBug(float force[128][128][128])
{
   // Declared by Pass Outlining
   int i, j, k;
   // Loop nest P4A begin,2D(128, 128)
#pragma omp parallel for private(j)
   for(i = 0; i <= 127; i += 1)
#pragma omp parallel for private(k)
      for(j = 0; j <= 127; j += 1)
         p4a_wrapper_updateBug(i, j, force);
}

void p4a_wrapper_updateBug(int i, int j, float force[128][128][128])
{
   // To be assigned to a call to P4A_vp_1: i
   // To be assigned to a call to P4A_vp_0: j
   p4a_kernel_updateBug(i, j, force);
}

void p4a_kernel_updateBug(int i, int j, float force[128][128][128])
{
   // Declared by Pass Outlining
   int k;
   // Loop nest P4A end
   if (i<=127&&j<=127)
      for(k = 0; k <= 127; k += 1) {
         // This scalar cause GPU_IFY to badly outline the kernel
         int x = 0;
         force[i][j][k] = 0;
      }
}

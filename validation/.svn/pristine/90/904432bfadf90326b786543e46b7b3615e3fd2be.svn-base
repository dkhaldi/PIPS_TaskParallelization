#this is the validation script to test omp reduction pragma prettyprinting in
#C when handling pragma as expression as set by the PRAGMA_TYPE property

delete reduction_op_c2
create reduction_op_c2 reduction_op_c.c

#activate some debug mode
#setenv TEXT_DEBUG_LEVEL 9
#setenv RICE_DEBUG_LEVEL 9
#setenv PARSER_DEBUG_LEVEL 9
#setenv RICEDG_DEBUG_LEVEL 9
#setenv SYNTAX_DEBUG_LEVEL 9
#setenv PIPSDBM_DEBUG_LEVEL 9
#setenv C_SYNTAX_DEBUG_LEVEL 9
#setenv SEMANTICS_DEBUG_LEVEL 9
#setenv REDUCTIONS_DEBUG_LEVEL 9
#setenv PRETTYPRINT_DEBUG_LEVEL 9
setenv OPMIFY_CODE_DEBUG_LEVEL 9

#SELECT C LANGUAGE
activate C_PARSER
setproperty PRETTYPRINT_LANGUAGE "C"
setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE
setproperty PRETTYPRINT_SEQUENTIAL_STYLE    "do"
apply FLAG_PARALLEL_REDUCED_LOOPS_WITH_OPENMP_DIRECTIVES(main)
#echo If possible, transform simple for-loops into do-loop Ã  la Fortran, simpler to analyze:
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER   TRUE
#echo Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
setproperty FOR_TO_WHILE_LOOP_IN_CONTROLIZER   TRUE
activate C_SYMBOL_TABLE

apply PRIVATIZE_MODULE(main)
setproperty PRAGMA_TYPE "expr"
apply OMPIFY_CODE(main)
display PRINTED_FILE(main)

close
delete reduction_op_c2
quit
# EOF

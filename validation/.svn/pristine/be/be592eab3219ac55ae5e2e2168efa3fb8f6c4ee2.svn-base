
POINTS TO for "recurrence02"


// Points To IN:
// _l_1[0].next -> *NULL* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].next -> *NULL* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1[0][0] , MAY
// l -> *NULL* , MAY
// l -> _l_1[0] , MAY


// Points To OUT:
// _l_1[0].content -> undefined , EXACT
// _l_1[0].next -> _l_1_2__1[0][0] , EXACT
// _l_1_2__1[0][0].content -> undefined , EXACT
// _l_1_2__1[0][0].next -> _l_1_2__1[0][0] , EXACT
// l -> _l_1[0] , EXACT

void recurrence02(list l)
{

// Points To: none

   int i = 0;

// Points To:
// l -> *NULL* , MAY
// l -> _l_1[0] , MAY

   l->content = &i;

// Points To:
// _l_1[0].next -> *NULL* , MAY
// _l_1[0].next -> _l_1_2__1[0][0] , MAY
// _l_1[0].content -> i , EXACT
// l -> _l_1[0] , EXACT

   l->next->content = &i;

// Points To:
// _l_1[0].next -> _l_1_2__1[0][0] , EXACT
// _l_1[0].content -> i , EXACT
// _l_1_2__1[0][0].next -> *NULL* , MAY
// _l_1_2__1[0][0].next -> _l_1_2__1[0][0] , MAY
// _l_1_2__1[0][0].content -> i , EXACT
// l -> _l_1[0] , EXACT

   l->next->next->content = &i;

// Points To:
// _l_1[0].next -> _l_1_2__1[0][0] , EXACT
// _l_1[0].content -> i , EXACT
// _l_1_2__1[0][0].next -> _l_1_2__1[0][0] , EXACT
// _l_1_2__1[0][0].content -> i , EXACT
// l -> _l_1[0] , EXACT

   l->next->next->next->content = &i;

// Points To:
// _l_1[0].next -> _l_1_2__1[0][0] , EXACT
// _l_1[0].content -> i , EXACT
// _l_1_2__1[0][0].next -> _l_1_2__1[0][0] , EXACT
// _l_1_2__1[0][0].content -> i , EXACT
// l -> _l_1[0] , EXACT

   return;
}


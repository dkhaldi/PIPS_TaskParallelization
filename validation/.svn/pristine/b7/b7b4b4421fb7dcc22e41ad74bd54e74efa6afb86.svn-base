void give()
{
//             <    is written>: j
   int j = 3;
   double array[N];
//             <may be written>: array[*]
//             <    is read   >: j
//             <    is written>: j

   change(&j, array);
}
//             <may be written>: array[*]
//             <    is read   >: i i[0]
//             <    is written>: i[0]
void change(int *i, double array[N])
{
   int k;
//             <    is read   >: i i[0]
//             <    is written>: i[0]

   (*i)++;
//             <may be written>: array[*]
//             <    is read   >: k
//             <    is written>: k

   for(k = 0; k <= 99; k += 1)
//             <may be written>: array[*]
//             <    is read   >: k
      array[k] = 0;
}
void give()
{
//             <    is written>: j
   int j = 3;
   double array[N];
//             <may be written>: array[*]
//             <    is read   >: j
//             <    is written>: j

   change(&j, array);
}
//             <may be written>: array[*]
//             <    is read   >: i i[0]
//             <    is written>: i[0]
void change(int *i, double array[N])
{
   int k;
//             <    is read   >: i i[0]
//             <    is written>: i[0]

   (*i)++;
//             <may be written>: array[*]
//             <    is read   >: k
//             <    is written>: k

   for(k = 0; k <= 99; k += 1)
//             <may be written>: array[*]
//             <    is read   >: k
      array[k] = 0;
}
void give()
{
   int j = 3;
   double array[N];
   {
      //PIPS generated variable
      double (*p4a_var_array0)[100] = (double (*)[100]) 0;
      P4A_accel_malloc((void **) &p4a_var_array0, sizeof(double)*100);


      change(&j, *p4a_var_array0);
      P4A_copy_from_accel_1d(sizeof(double), 100, 100, 0, &array[0], *p4a_var_array0);
      P4A_accel_free(p4a_var_array0);
   }
}
void change(int *i, double array[N])
{
   int k;

   (*i)++;

   for(k = 0; k <= 99; k += 1)
      array[k] = 0;
}

Unsplit resulting code

/*
 * file for kernel_load_store01.c
 */
/* Test kernel_load_store on a scalar modification.

   Assume that only the pointed scalar is touched, since it is often the
   case for generated code given to kernel_load_store
*/

enum {N=100};

extern void change(int *i, double array[N]);

extern void give();
//PIPS generated variable
typedef unsigned long int size_t;
//PIPS generated variable
void P4A_accel_malloc(void **address, size_t size);
//PIPS generated variable
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, const void *accel_address);
//PIPS generated variable
void P4A_accel_free(void *address);
void change(int *i, double array[N])
{
   int k;

   (*i)++;

   for(k = 0; k <= 99; k += 1)
      array[k] = 0;
}
void give()
{
   int j = 3;
   double array[N];
   {
      //PIPS generated variable
      double (*p4a_var_array0)[100] = (double (*)[100]) 0;
      P4A_accel_malloc((void **) &p4a_var_array0, sizeof(double)*100);


      change(&j, *p4a_var_array0);
      P4A_copy_from_accel_1d(sizeof(double), 100, 100, 0, &array[0], *p4a_var_array0);
      P4A_accel_free(p4a_var_array0);
   }
}


Initial code

void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 1) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
   }
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 4) {
      a[i+4] = b[i];
      b[i+4] = a[i]+c[i];
      a[i+5] = b[i+1];
      b[i+5] = a[i+1]+c[i+1];
      a[i+6] = b[i+2];
      b[i+6] = a[i+2]+c[i+2];
      a[i+7] = b[i+3];
      b[i+7] = a[i+3]+c[i+3];
   }
   i = 100;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   int i;
   // icc cannot vectorize this
   for(i = 0; i <= 99; i += 4) {
      a[4+i] = b[i];
      b[4+i] = a[i]+c[i];
      a[5+i] = b[1+i];
      b[5+i] = a[1+i]+c[1+i];
      a[6+i] = b[2+i];
      b[6+i] = a[2+i]+c[2+i];
      a[7+i] = b[3+i];
      b[7+i] = a[3+i]+c[3+i];
   }
   i = 100;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   //PIPS generated variable
   int i0, i1;
   // icc cannot vectorize this
   for(i0 = 0; i0 <= 99; i0 += 4) {
      a[4+i0] = b[i0];
      b[4+i0] = a[i0]+c[i0];
      a[5+i0] = b[1+i0];
      b[5+i0] = a[1+i0]+c[1+i0];
      a[6+i0] = b[2+i0];
      b[6+i0] = a[2+i0]+c[2+i0];
      a[7+i0] = b[3+i0];
      b[7+i0] = a[3+i0]+c[3+i0];
   }
   i1 = 100;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   //PIPS generated variable
   int i0, i1;
   // icc cannot vectorize this
   for(i0 = 0; i0 <= 99; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      a[4+i0] = b[i0];
      SIMD_LOAD_V4SF(vec20, &c[i0]);
      SIMD_LOAD_V4SF(vec10, &a[i0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &b[4+i0]);
      a[5+i0] = b[1+i0];
      a[6+i0] = b[2+i0];
      a[7+i0] = b[3+i0];
   }
   i1 = 100;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   //PIPS generated variable
   int i0, i1;
   // icc cannot vectorize this
   for(i0 = 0; i0 <= 99; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      SIMD_LOAD_V4SF(vec20, &c[i0]);
      a[4+i0] = b[i0];
      SIMD_LOAD_V4SF(vec10, &a[i0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &b[4+i0]);
      a[5+i0] = b[1+i0];
      a[6+i0] = b[2+i0];
      a[7+i0] = b[3+i0];
   }
   i1 = 100;
}
void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   //PIPS generated variable
   int i0;
   // icc cannot vectorize this
   for(i0 = 0; i0 <= 99; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      SIMD_LOAD_V4SF(vec20, &c[i0]);
      a[4+i0] = b[i0];
      SIMD_LOAD_V4SF(vec10, &a[i0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &b[4+i0]);
      a[5+i0] = b[1+i0];
      a[6+i0] = b[2+i0];
      a[7+i0] = b[3+i0];
   }
}

simdized code

void shrink(float a[100+4], float b[100+4], float c[100+4])
{
   //PIPS generated variable
   int i0;
   // icc cannot vectorize this
   for(i0 = 0; i0 <= 99; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      SIMD_LOAD_V4SF(vec20, &c[i0]);
      a[4+i0] = b[i0];
      SIMD_LOAD_V4SF(vec10, &a[i0]);
      SIMD_ADDPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &b[4+i0]);
      a[5+i0] = b[1+i0];
      a[6+i0] = b[2+i0];
      a[7+i0] = b[3+i0];
   }
}

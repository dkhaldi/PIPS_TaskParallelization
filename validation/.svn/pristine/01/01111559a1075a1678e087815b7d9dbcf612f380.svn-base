#
# AIPO
#
#
# compile generated freia_45
#

! initial function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t0, *t1;                                               /*0006*/
   t0 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0008*/
   freia_aipo_copy(t0, in);                                             /*0009*/
   freia_aipo_copy(out, t0);                                            /*0010*/
   freia_aipo_copy(t1, out);                                            /*0011*/
   freia_common_destruct_data(t0);                                      /*0012*/
   freia_common_destruct_data(t1);                                      /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_45" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "10 =" [shape=circle];
  "10 =" -> "11 =" [label="out"];
  "10 =" -> "out";
  "9 =" [shape=circle];
  "9 =" -> "10 =" [label="t0"];
  "in" -> "9 =";
}
// graph for dag "dag_cleaned_0" of module "freia_45" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! updated function for AIPO

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0014*/
}
#
# SPOC
#

! initial function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t0, *t1;                                               /*0006*/
   t0 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0008*/
   freia_aipo_copy(t0, in);                                             /*0009*/
   freia_aipo_copy(out, t0);                                            /*0010*/
   freia_aipo_copy(t1, out);                                            /*0011*/
   freia_common_destruct_data(t0);                                      /*0012*/
   freia_common_destruct_data(t1);                                      /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_45" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "10 =" [shape=circle];
  "10 =" -> "11 =" [label="out"];
  "10 =" -> "out";
  "9 =" [shape=circle];
  "9 =" -> "10 =" [label="t0"];
  "in" -> "9 =";
}
// graph for dag "dag_cleaned_0" of module "freia_45" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+1+0 copies
// # SPOC calls: 0

! updated function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0014*/
}
#
# TERAPIX
#

! initial function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t0, *t1;                                               /*0006*/
   t0 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0008*/
   freia_aipo_copy(t0, in);                                             /*0009*/
   freia_aipo_copy(out, t0);                                            /*0010*/
   freia_aipo_copy(t1, out);                                            /*0011*/
   freia_common_destruct_data(t0);                                      /*0012*/
   freia_common_destruct_data(t1);                                      /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_45" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "10 =" [shape=circle];
  "10 =" -> "11 =" [label="out"];
  "10 =" -> "out";
  "9 =" [shape=circle];
  "9 =" -> "10 =" [label="t0"];
  "in" -> "9 =";
}
// graph for dag "dag_cleaned_0" of module "freia_45" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+1+0 copies

! updated function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0014*/
}
#
# OPENCL
#

! initial function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t0, *t1;                                               /*0006*/
   t0 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0008*/
   freia_aipo_copy(t0, in);                                             /*0009*/
   freia_aipo_copy(out, t0);                                            /*0010*/
   freia_aipo_copy(t1, out);                                            /*0011*/
   freia_common_destruct_data(t0);                                      /*0012*/
   freia_common_destruct_data(t1);                                      /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_45" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "10 =" [shape=circle];
  "10 =" -> "11 =" [label="out"];
  "10 =" -> "out";
  "9 =" [shape=circle];
  "9 =" -> "10 =" [label="t0"];
  "in" -> "9 =";
}
// graph for dag "dag_cleaned_0" of module "freia_45" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+1+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_45

// opencl for dag 0

! updated function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0014*/
}

! cleaned up function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return 0;                                                            /*0014*/
}
#
# SIGMAC
#
#
# compile generated freia_45
#

! initial function

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_data2d *t0, *t1;                                               /*0006*/
   t0 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0007*/
   t1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);   /*0008*/
   freia_aipo_copy(t0, in);                                             /*0009*/
   freia_aipo_copy(out, t0);                                            /*0010*/
   freia_aipo_copy(t1, out);                                            /*0011*/
   freia_common_destruct_data(t0);                                      /*0012*/
   freia_common_destruct_data(t1);                                      /*0013*/
   return FREIA_OK;                                                     /*0014*/
}

! graphs

// graph for dag "dag_0" of module "freia_45" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "11 =" [shape=circle];
  "10 =" [shape=circle];
  "10 =" -> "11 =" [label="out"];
  "10 =" -> "out";
  "9 =" [shape=circle];
  "9 =" -> "10 =" [label="t0"];
  "in" -> "9 =";
}
// graph for dag "dag_cleaned_0" of module "freia_45" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "out" [shape=circle];
  "out =" [shape=circle,label="=",style="dashed"]
  "in" -> "out =";
  "out =" -> "out";
}

! updated function for OPENCL

freia_status freia_45(freia_data2d *in, freia_data2d *out)
{
   freia_aipo_copy(out, in);
   return FREIA_OK;                                                     /*0014*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"




/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 10;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

  }
}
#
# FREIA COMPILATION DONE
#


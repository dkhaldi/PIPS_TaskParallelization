
Initial code

void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 4*(N/4)-1; j += 4) {
         C[i][j] = A[i][j]*val;
         C[i][j+1] = A[i][j+1]*val;
         C[i][j+2] = A[i][j+2]*val;
         C[i][j+3] = A[i][j+3]*val;
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 4*(N/4)-1; j += 4) {
         C[i][j] = val*A[i][j];
         C[i][1+j] = val*A[i][1+j];
         C[i][2+j] = val*A[i][2+j];
         C[i][3+j] = val*A[i][3+j];
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i][j] = val*A[i][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         C[i0][j0] = val*A[i0][j0];
         C[i0][1+j0] = val*A[i0][1+j0];
         C[i0][2+j0] = val*A[i0][2+j0];
         C[i0][3+j0] = val*A[i0][3+j0];
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec00, vec10, vec20;
         SIMD_LOAD_V4HI_TO_V4SF(vec20, &A[i0][j0]);
         SIMD_LOAD_BROADCAST_V4SF(vec10, val);
         SIMD_MULPS(vec00, vec10, vec20);
         SIMD_STORE_V4SF_TO_V4SI(vec00, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         SIMD_LOAD_V4HI_TO_V4SF(vec20_0, &A[i0][j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_STORE_V4SF_TO_V4SI(vec00_0, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_mul_const(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 4*(N/4)-1; j0 += 4) {
         //PIPS:SAC generated v4sf vector(s)
         SIMD_LOAD_V4HI_TO_V4SF(vec20_0, &A[i0][j0]);
         SIMD_MULPS(vec00_0, vec10_0, vec20_0);
         SIMD_STORE_V4SF_TO_V4SI(vec00_0, &C[i0][j0]);
      }
      for(j = 4*(N/4); j <= N-1; j += 1)
         C[i0][j] = val*A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         A[i][j] = A[i][j]+val;
         A[i][j+1] = A[i][j+1]+val;
         A[i][j+2] = A[i][j+2]+val;
         A[i][j+3] = A[i][j+3]+val;
         A[i][j+4] = A[i][j+4]+val;
         A[i][j+5] = A[i][j+5]+val;
         A[i][j+6] = A[i][j+6]+val;
         A[i][j+7] = A[i][j+7]+val;
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i][j] = A[i][j]+val;
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         A[i][j] = val+A[i][j];
         A[i][1+j] = val+A[i][1+j];
         A[i][2+j] = val+A[i][2+j];
         A[i][3+j] = val+A[i][3+j];
         A[i][4+j] = val+A[i][4+j];
         A[i][5+j] = val+A[i][5+j];
         A[i][6+j] = val+A[i][6+j];
         A[i][7+j] = val+A[i][7+j];
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i][j] = val+A[i][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         A[i0][j0] = val+A[i0][j0];
         A[i0][1+j0] = val+A[i0][1+j0];
         A[i0][2+j0] = val+A[i0][2+j0];
         A[i0][3+j0] = val+A[i0][3+j0];
         A[i0][4+j0] = val+A[i0][4+j0];
         A[i0][5+j0] = val+A[i0][5+j0];
         A[i0][6+j0] = val+A[i0][6+j0];
         A[i0][7+j0] = val+A[i0][7+j0];
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec30, vec40;
         SIMD_LOAD_V8HI(vec30, &A[i0][j0]);
         SIMD_LOAD_BROADCAST_V8HI(vec40, val);
         SIMD_ADDW(vec30, vec40, vec30);
         SIMD_STORE_V8HI(vec30, &A[i0][j0]);
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v8hi vec30_0, vec40_0;
   SIMD_LOAD_BROADCAST_V8HI(vec40_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         SIMD_LOAD_V8HI(vec30_0, &A[i0][j0]);
         SIMD_ADDW(vec30_0, vec40_0, vec30_0);
         SIMD_STORE_V8HI(vec30_0, &A[i0][j0]);
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
void matrix_add_const(ee_u32 N, MATDAT A[N][N], MATDAT val)
{
   ee_u32 j;
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v8hi vec30_0, vec40_0;
   SIMD_LOAD_BROADCAST_V8HI(vec40_0, val);
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         SIMD_LOAD_V8HI(vec30_0, &A[i0][j0]);
         SIMD_ADDW(vec30_0, vec40_0, vec30_0);
         SIMD_STORE_V8HI(vec30_0, &A[i0][j0]);
      }
      for(j = 8*(N/8); j <= N-1; j += 1)
         A[i0][j] = val+A[i0][j];
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      for(j = 0; j <= N-1; j += 1)
         C[i] = C[i]+A[i][j]*B[j];
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      for(j = 0; j <= N-1; j += 1)
         C[i] = C[i]+A[i][j]*B[j];
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      for(j = 0; j <= N-1; j += 1)
         C[i] = C[i]+A[i][j]*B[j];
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      for(j = 0; j <= N-1; j += 1) {
         I_0 = A[i][j]*B[j];
         C[i] = C[i]+I_0;
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         I_0 = A[i][j]*B[j];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+1]*B[j+1];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+2]*B[j+2];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+3]*B[j+3];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+4]*B[j+4];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+5]*B[j+5];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+6]*B[j+6];
         C[i] = C[i]+I_0;
         I_0 = A[i][j+7]*B[j+7];
         C[i] = C[i]+I_0;
      }
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i][j]*B[j];
         C[i] = C[i]+I_0;
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 i, j;
   //PIPS generated variable
   signed int RED0[8], RED1[1];
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1) {
      C[i] = 0;
      RED0[0] = 0;
      RED0[1] = 0;
      RED0[2] = 0;
      RED0[3] = 0;
      RED0[4] = 0;
      RED0[5] = 0;
      RED0[6] = 0;
      RED0[7] = 0;
      for(j = 0; j <= 8*(N/8)-1; j += 8) {
         I_0 = A[i][j]*B[j];
         RED0[0] = I_0+RED0[0];
         I_0 = A[i][1+j]*B[1+j];
         RED0[1] = I_0+RED0[1];
         I_0 = A[i][2+j]*B[2+j];
         RED0[2] = I_0+RED0[2];
         I_0 = A[i][3+j]*B[3+j];
         RED0[3] = I_0+RED0[3];
         I_0 = A[i][4+j]*B[4+j];
         RED0[4] = I_0+RED0[4];
         I_0 = A[i][5+j]*B[5+j];
         RED0[5] = I_0+RED0[5];
         I_0 = A[i][6+j]*B[6+j];
         RED0[6] = I_0+RED0[6];
         I_0 = A[i][7+j]*B[7+j];
         RED0[7] = I_0+RED0[7];
      }
      C[i] = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+RED0[0]+C[i];
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i][j]*B[j];
         C[i] = I_0+C[i];
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 j;
   //PIPS generated variable
   signed int RED0[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      C[i0] = 0;
      RED0[0] = 0;
      RED0[1] = 0;
      RED0[2] = 0;
      RED0[3] = 0;
      RED0[4] = 0;
      RED0[5] = 0;
      RED0[6] = 0;
      RED0[7] = 0;
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         I_00 = A[i0][j0]*B[j0];
         RED0[0] = I_00+RED0[0];
         I_01 = A[i0][1+j0]*B[1+j0];
         RED0[1] = I_01+RED0[1];
         I_02 = A[i0][2+j0]*B[2+j0];
         RED0[2] = I_02+RED0[2];
         I_03 = A[i0][3+j0]*B[3+j0];
         RED0[3] = I_03+RED0[3];
         I_04 = A[i0][4+j0]*B[4+j0];
         RED0[4] = I_04+RED0[4];
         I_05 = A[i0][5+j0]*B[5+j0];
         RED0[5] = I_05+RED0[5];
         I_06 = A[i0][6+j0]*B[6+j0];
         RED0[6] = I_06+RED0[6];
         I_07 = A[i0][7+j0]*B[7+j0];
         RED0[7] = I_07+RED0[7];
      }
      C[i0] = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+RED0[0]+C[i0];
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i0][j]*B[j];
         C[i0] = I_0+C[i0];
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 j;
   //PIPS generated variable
   signed int RED0[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, j0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      C[i0] = 0;
      RED0[0] = 0;
      RED0[1] = 0;
      RED0[2] = 0;
      RED0[3] = 0;
      RED0[4] = 0;
      RED0[5] = 0;
      RED0[6] = 0;
      RED0[7] = 0;
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         v8hi vec50, vec60, vec70;
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec80, vec90, vec100, vec110;
         SIMD_LOAD_V8HI(vec70, &B[j0]);
         SIMD_LOAD_V8HI(vec60, &A[i0][j0]);
         SIMD_MULW(vec50, vec60, vec70);
         SIMD_STORE_V8HI(vec50, &pdata0[0]);
         SIMD_LOAD_V4SI_TO_V4SF(vec80, &RED0[0]);
         SIMD_LOAD_V4HI_TO_V4SF(vec90, &pdata0[0]);
         SIMD_ADDPS(vec80, vec90, vec80);
         SIMD_STORE_V4SF_TO_V4SI(vec80, &RED0[0]);
         SIMD_LOAD_V4SI_TO_V4SF(vec100, &RED0[4]);
         SIMD_LOAD_V4HI_TO_V4SF(vec110, &pdata0[4]);
         SIMD_ADDPS(vec100, vec110, vec100);
         SIMD_STORE_V4SF_TO_V4SI(vec100, &RED0[4]);
      }
      C[i0] = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+C[i0]+RED0[0];
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i0][j]*B[j];
         C[i0] = I_0+C[i0];
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 j;
   //PIPS generated variable
   signed int RED0[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v8hi vec50_0, vec60_0, vec70_0;
   //PIPS generated variable
   v4sf vec80_0, vec90_0, vec100_0, vec110_0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      C[i0] = 0;
      RED0[0] = 0;
      RED0[1] = 0;
      RED0[2] = 0;
      RED0[3] = 0;
      RED0[4] = 0;
      RED0[5] = 0;
      RED0[6] = 0;
      RED0[7] = 0;
      SIMD_LOAD_V4SI_TO_V4SF(vec100_0, &RED0[4]);
      SIMD_LOAD_V4SI_TO_V4SF(vec80_0, &RED0[0]);
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)
         ;
         //PIPS:SAC generated v4sf vector(s)
         ;
         SIMD_LOAD_V8HI(vec60_0, &A[i0][j0]);
         SIMD_LOAD_V8HI(vec70_0, &B[j0]);
         SIMD_MULW(vec50_0, vec60_0, vec70_0);
         SIMD_STORE_V8HI(vec50_0, &pdata0[0]);
         SIMD_LOAD_V4HI_TO_V4SF(vec90_0, &pdata0[0]);
         SIMD_LOAD_V4HI_TO_V4SF(vec110_0, &pdata0[4]);
         SIMD_ADDPS(vec80_0, vec90_0, vec80_0);
         SIMD_ADDPS(vec100_0, vec110_0, vec100_0);
      }
      SIMD_STORE_V4SF_TO_V4SI(vec80_0, &RED0[0]);
      SIMD_STORE_V4SF_TO_V4SI(vec100_0, &RED0[4]);
      C[i0] = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+C[i0]+RED0[0];
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i0][j]*B[j];
         C[i0] = I_0+C[i0];
      }
   }
}
void matrix_mul_vect(ee_u32 N, MATRES C[N], MATDAT A[N][N], MATDAT B[N])
{
   ee_u32 j;
   //PIPS generated variable
   signed int RED0[8];
   //PIPS generated variable
   short I_0;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, j0;
   //PIPS generated variable
   v8hi vec50_0, vec60_0, vec70_0;
   //PIPS generated variable
   v4sf vec80_0, vec90_0, vec100_0, vec110_0;
   for(i0 = 0; i0 <= N-1; i0 += 1) {
      C[i0] = 0;
      RED0[0] = 0;
      RED0[1] = 0;
      RED0[2] = 0;
      RED0[3] = 0;
      RED0[4] = 0;
      RED0[5] = 0;
      RED0[6] = 0;
      RED0[7] = 0;
      SIMD_LOAD_V4SI_TO_V4SF(vec100_0, &RED0[4]);
      SIMD_LOAD_V4SI_TO_V4SF(vec80_0, &RED0[0]);
      for(j0 = 0; j0 <= 8*(N/8)-1; j0 += 8) {
         //PIPS:SAC generated v8hi vector(s)PIPS:SAC generated v4sf vector(s)
         SIMD_LOAD_V8HI(vec60_0, &A[i0][j0]);
         SIMD_LOAD_V8HI(vec70_0, &B[j0]);
         SIMD_MULW(vec50_0, vec60_0, vec70_0);
         SIMD_STORE_V8HI(vec50_0, &pdata0[0]);
         SIMD_LOAD_V4HI_TO_V4SF(vec90_0, &pdata0[0]);
         SIMD_LOAD_V4HI_TO_V4SF(vec110_0, &pdata0[4]);
         SIMD_ADDPS(vec80_0, vec90_0, vec80_0);
         SIMD_ADDPS(vec100_0, vec110_0, vec100_0);
      }
      SIMD_STORE_V4SF_TO_V4SI(vec80_0, &RED0[0]);
      SIMD_STORE_V4SF_TO_V4SI(vec100_0, &RED0[4]);
      C[i0] = RED0[7]+RED0[6]+RED0[5]+RED0[4]+RED0[3]+RED0[2]+RED0[1]+C[i0]+RED0[0];
      for(j = 8*(N/8); j <= N-1; j += 1) {
         I_0 = A[i0][j]*B[j];
         C[i0] = I_0+C[i0];
      }
   }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1)
            C[i][j] = C[i][j]+A[i][k]*B[k][j];
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1)
            C[i][j] = C[i][j]+A[i][k]*B[k][j];
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1)
            C[i][j] = C[i][j]+A[i][k]*B[k][j];
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= N-1; k += 1) {
            I_0 = A[i][k]*B[k][j];
            C[i][j] = C[i][j]+I_0;
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         for(k = 0; k <= 8*(N/8)-1; k += 8) {
            I_0 = A[i][k]*B[k][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+1]*B[k+1][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+2]*B[k+2][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+3]*B[k+3][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+4]*B[k+4][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+5]*B[k+5][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+6]*B[k+6][j];
            C[i][j] = C[i][j]+I_0;
            I_0 = A[i][k+7]*B[k+7][j];
            C[i][j] = C[i][j]+I_0;
         }
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i][k]*B[k][j];
            C[i][j] = C[i][j]+I_0;
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 i, j, k;
   //PIPS generated variable
   signed int RED2[8], RED3[1];
   //PIPS generated variable
   short I_0;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         for(k = 0; k <= 8*(N/8)-1; k += 8) {
            I_0 = A[i][k]*B[k][j];
            RED2[0] = I_0+RED2[0];
            I_0 = A[i][1+k]*B[1+k][j];
            RED2[1] = I_0+RED2[1];
            I_0 = A[i][2+k]*B[2+k][j];
            RED2[2] = I_0+RED2[2];
            I_0 = A[i][3+k]*B[3+k][j];
            RED2[3] = I_0+RED2[3];
            I_0 = A[i][4+k]*B[4+k][j];
            RED2[4] = I_0+RED2[4];
            I_0 = A[i][5+k]*B[5+k][j];
            RED2[5] = I_0+RED2[5];
            I_0 = A[i][6+k]*B[6+k][j];
            RED2[6] = I_0+RED2[6];
            I_0 = A[i][7+k]*B[7+k][j];
            RED2[7] = I_0+RED2[7];
         }
         C[i][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+RED2[0]+C[i][j];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i][k]*B[k][j];
            C[i][j] = I_0+C[i][j];
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 j, k;
   //PIPS generated variable
   signed int RED2[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //PIPS generated variable
   ee_u32 i0, k0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         for(k0 = 0; k0 <= 8*(N/8)-1; k0 += 8) {
            I_00 = A[i0][k0]*B[k0][j];
            RED2[0] = I_00+RED2[0];
            I_01 = A[i0][1+k0]*B[1+k0][j];
            RED2[1] = I_01+RED2[1];
            I_02 = A[i0][2+k0]*B[2+k0][j];
            RED2[2] = I_02+RED2[2];
            I_03 = A[i0][3+k0]*B[3+k0][j];
            RED2[3] = I_03+RED2[3];
            I_04 = A[i0][4+k0]*B[4+k0][j];
            RED2[4] = I_04+RED2[4];
            I_05 = A[i0][5+k0]*B[5+k0][j];
            RED2[5] = I_05+RED2[5];
            I_06 = A[i0][6+k0]*B[6+k0][j];
            RED2[6] = I_06+RED2[6];
            I_07 = A[i0][7+k0]*B[7+k0][j];
            RED2[7] = I_07+RED2[7];
         }
         C[i0][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+RED2[0]+C[i0][j];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i0][k]*B[k][j];
            C[i0][j] = I_0+C[i0][j];
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 j, k;
   //PIPS generated variable
   signed int RED2[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, k0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         for(k0 = 0; k0 <= 8*(N/8)-1; k0 += 8) {
            //PIPS:SAC generated v8hi vector(s)
            v8hi vec120, vec130, vec140;
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec150, vec160, vec170, vec180;
            SIMD_LOAD_GENERIC_V8HI(vec140, B[k0][j], B[1+k0][j], B[2+k0][j], B[3+k0][j], B[4+k0][j], B[5+k0][j], B[6+k0][j], B[7+k0][j]);
            SIMD_LOAD_V8HI(vec130, &A[i0][k0]);
            SIMD_MULW(vec120, vec130, vec140);
            SIMD_STORE_V8HI(vec120, &pdata0[0]);
            SIMD_LOAD_V4SI_TO_V4SF(vec150, &RED2[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec160, &pdata0[0]);
            SIMD_ADDPS(vec150, vec160, vec150);
            SIMD_STORE_V4SF_TO_V4SI(vec150, &RED2[0]);
            SIMD_LOAD_V4SI_TO_V4SF(vec170, &RED2[4]);
            SIMD_LOAD_V4HI_TO_V4SF(vec180, &pdata0[4]);
            SIMD_ADDPS(vec170, vec180, vec170);
            SIMD_STORE_V4SF_TO_V4SI(vec170, &RED2[4]);
         }
         C[i0][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+C[i0][j]+RED2[0];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i0][k]*B[k][j];
            C[i0][j] = I_0+C[i0][j];
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 j, k;
   //PIPS generated variable
   signed int RED2[8];
   //PIPS generated variable
   short I_0, I_00, I_01, I_02, I_03, I_04, I_05, I_06, I_07;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, k0;
   //PIPS generated variable
   v8hi vec120_0, vec130_0, vec140_0;
   //PIPS generated variable
   v4sf vec150_0, vec160_0, vec170_0, vec180_0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         SIMD_LOAD_V4SI_TO_V4SF(vec170_0, &RED2[4]);
         SIMD_LOAD_V4SI_TO_V4SF(vec150_0, &RED2[0]);
         for(k0 = 0; k0 <= 8*(N/8)-1; k0 += 8) {
            //PIPS:SAC generated v8hi vector(s)
            ;
            //PIPS:SAC generated v4sf vector(s)
            ;
            SIMD_LOAD_V8HI(vec130_0, &A[i0][k0]);
            SIMD_LOAD_GENERIC_V8HI(vec140_0, B[k0][j], B[1+k0][j], B[2+k0][j], B[3+k0][j], B[4+k0][j], B[5+k0][j], B[6+k0][j], B[7+k0][j]);
            SIMD_MULW(vec120_0, vec130_0, vec140_0);
            SIMD_STORE_V8HI(vec120_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec160_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec180_0, &pdata0[4]);
            SIMD_ADDPS(vec150_0, vec160_0, vec150_0);
            SIMD_ADDPS(vec170_0, vec180_0, vec170_0);
         }
         SIMD_STORE_V4SF_TO_V4SI(vec150_0, &RED2[0]);
         SIMD_STORE_V4SF_TO_V4SI(vec170_0, &RED2[4]);
         C[i0][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+C[i0][j]+RED2[0];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i0][k]*B[k][j];
            C[i0][j] = I_0+C[i0][j];
         }
      }
}
void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 j, k;
   //PIPS generated variable
   signed int RED2[8];
   //PIPS generated variable
   short I_0;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, k0;
   //PIPS generated variable
   v8hi vec120_0, vec130_0, vec140_0;
   //PIPS generated variable
   v4sf vec150_0, vec160_0, vec170_0, vec180_0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         SIMD_LOAD_V4SI_TO_V4SF(vec170_0, &RED2[4]);
         SIMD_LOAD_V4SI_TO_V4SF(vec150_0, &RED2[0]);
         for(k0 = 0; k0 <= 8*(N/8)-1; k0 += 8) {
            //PIPS:SAC generated v8hi vector(s)PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_V8HI(vec130_0, &A[i0][k0]);
            SIMD_LOAD_GENERIC_V8HI(vec140_0, B[k0][j], B[1+k0][j], B[2+k0][j], B[3+k0][j], B[4+k0][j], B[5+k0][j], B[6+k0][j], B[7+k0][j]);
            SIMD_MULW(vec120_0, vec130_0, vec140_0);
            SIMD_STORE_V8HI(vec120_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec160_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec180_0, &pdata0[4]);
            SIMD_ADDPS(vec150_0, vec160_0, vec150_0);
            SIMD_ADDPS(vec170_0, vec180_0, vec170_0);
         }
         SIMD_STORE_V4SF_TO_V4SI(vec150_0, &RED2[0]);
         SIMD_STORE_V4SF_TO_V4SI(vec170_0, &RED2[4]);
         C[i0][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+C[i0][j]+RED2[0];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i0][k]*B[k][j];
            C[i0][j] = I_0+C[i0][j];
         }
      }
}

simdized code

void matrix_mul_matrix(ee_u32 N, MATRES C[N][N], MATDAT A[N][N], MATDAT B[N][N])
{
   ee_u32 j, k;
   //PIPS generated variable
   signed int RED2[8];
   //PIPS generated variable
   short I_0;
   //SAC generated temporary array
   a8hi pdata0 = {0, 0, 0, 0, 0, 0, 0, 0};
   //PIPS generated variable
   ee_u32 i0, k0;
   //PIPS generated variable
   v8hi vec120_0, vec130_0, vec140_0;
   //PIPS generated variable
   v4sf vec150_0, vec160_0, vec170_0, vec180_0;
   for(i0 = 0; i0 <= N-1; i0 += 1)
      for(j = 0; j <= N-1; j += 1) {
         C[i0][j] = 0;
         RED2[0] = 0;
         RED2[1] = 0;
         RED2[2] = 0;
         RED2[3] = 0;
         RED2[4] = 0;
         RED2[5] = 0;
         RED2[6] = 0;
         RED2[7] = 0;
         SIMD_LOAD_V4SI_TO_V4SF(vec170_0, &RED2[4]);
         SIMD_LOAD_V4SI_TO_V4SF(vec150_0, &RED2[0]);
         for(k0 = 0; k0 <= 8*(N/8)-1; k0 += 8) {
            //PIPS:SAC generated v8hi vector(s)PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_V8HI(vec130_0, &A[i0][k0]);
            SIMD_LOAD_GENERIC_V8HI(vec140_0, B[k0][j], B[1+k0][j], B[2+k0][j], B[3+k0][j], B[4+k0][j], B[5+k0][j], B[6+k0][j], B[7+k0][j]);
            SIMD_MULW(vec120_0, vec130_0, vec140_0);
            SIMD_STORE_V8HI(vec120_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec160_0, &pdata0[0]);
            SIMD_LOAD_V4HI_TO_V4SF(vec180_0, &pdata0[4]);
            SIMD_ADDPS(vec150_0, vec160_0, vec150_0);
            SIMD_ADDPS(vec170_0, vec180_0, vec170_0);
         }
         SIMD_STORE_V4SF_TO_V4SI(vec150_0, &RED2[0]);
         SIMD_STORE_V4SF_TO_V4SI(vec170_0, &RED2[4]);
         C[i0][j] = RED2[7]+RED2[6]+RED2[5]+RED2[4]+RED2[3]+RED2[2]+RED2[1]+C[i0][j]+RED2[0];
         for(k = 8*(N/8); k <= N-1; k += 1) {
            I_0 = A[i0][k]*B[k][j];
            C[i0][j] = I_0+C[i0][j];
         }
      }
}

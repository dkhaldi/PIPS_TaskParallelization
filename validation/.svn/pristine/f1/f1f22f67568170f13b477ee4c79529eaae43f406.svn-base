#
# AIPO
#
#
# compile generated retina
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *top, *lin, *rec, *out, *imWork2;                  /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w2_0, *w1_0;                                           /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   top = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0038*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   lin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0040*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0047*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0048*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0049*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0050*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0051*/

   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0053*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0054*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0055*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0056*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0057*/

   freia_aipo_erode_8c(top, in, freia_morpho_kernel_8c);                /*0059*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0060*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0061*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0062*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0063*/

   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0065*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0066*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0067*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0068*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0069*/

   freia_aipo_sub(top, in, top);                                        /*0071*/
   freia_aipo_mul_const(top, top, 2);                                   /*0072*/
   freia_aipo_not(out, in);                                             /*0073*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0076*/

   freia_aipo_set_constant(w2_0, 255);                                  /*0078*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0086*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0088*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0089*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0090*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0091*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0092*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0094*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0102*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0104*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0105*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0106*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0107*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0108*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0110*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0118*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0120*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0121*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0122*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0123*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0124*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0126*/

   freia_aipo_copy(out, w2_0);                                          /*0128*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w2_0);                                    /*0131*/

   freia_aipo_not(out, out);                                            /*0133*/

   freia_aipo_sub(lin, in, out);                                        /*0135*/
   freia_aipo_mul_const(lin, lin, 2);                                   /*0136*/

   freia_aipo_not(out, in);                                             /*0138*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/

   freia_aipo_set_constant(w2_1, 255);                                  /*0144*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0148*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0149*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0150*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0151*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0152*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0160*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0164*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0165*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0166*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0167*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0168*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0180*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0181*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0182*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0183*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0184*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/

   freia_aipo_copy(out, w2_1);                                          /*0194*/

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/

   freia_aipo_not(out, out);                                            /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   freia_aipo_sup(imWork2, out, in);                                    /*0213*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(top);                                     /*0221*/
   freia_common_destruct_data(lin);                                     /*0222*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/
   freia_common_destruct_data(imWork2);                                 /*0225*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=97 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "194 =" [shape=circle];
  "194 =" -> "199 !" [label="out"];
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "194 =" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1"];
  "184 D8" [shape=box];
  "184 D8" -> "186 E8" [label="w1_1"];
  "183 D8" [shape=box];
  "183 D8" -> "184 D8" [label="w1_1"];
  "182 D8" [shape=box];
  "182 D8" -> "183 D8" [label="w1_1"];
  "181 D8" [shape=box];
  "181 D8" -> "182 D8" [label="w1_1"];
  "180 D8" [shape=box];
  "180 D8" -> "181 D8" [label="w1_1"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1"];
  "168 D8" [shape=box];
  "168 D8" -> "170 E8" [label="w1_1"];
  "167 D8" [shape=box];
  "167 D8" -> "168 D8" [label="w1_1"];
  "166 D8" [shape=box];
  "166 D8" -> "167 D8" [label="w1_1"];
  "165 D8" [shape=box];
  "165 D8" -> "166 D8" [label="w1_1"];
  "164 D8" [shape=box];
  "164 D8" -> "165 D8" [label="w1_1"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "176 <" [label="w2_1"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <" [label="w1_1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1"];
  "152 D8" [shape=box];
  "152 D8" -> "154 E8" [label="w1_1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="w1_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="w1_1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="w1_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="w1_1"];
  "144 C" [shape=trapezium,orientation=270];
  "144 C" -> "160 <" [label="w2_1"];
  "138 !" [shape=trapezium,orientation=270];
  "138 !" -> "180 D8" [label="out"];
  "138 !" -> "164 D8" [label="out"];
  "138 !" -> "148 D8" [label="out"];
  "136 *_" [shape=trapezium,orientation=270];
  "135 -" [shape=trapezium,orientation=270];
  "135 -" -> "136 *_" [label="lin"];
  "133 !" [shape=trapezium,orientation=270];
  "133 !" -> "135 -" [label="out"];
  "128 =" [shape=circle];
  "128 =" -> "133 !" [label="out"];
  "126 <" [shape=trapezium,orientation=270];
  "126 <" -> "128 =" [label="w2_0"];
  "124 E8" [shape=box];
  "124 E8" -> "126 <" [label="w1_0"];
  "123 E8" [shape=box];
  "123 E8" -> "124 E8" [label="w1_0"];
  "122 E8" [shape=box];
  "122 E8" -> "123 E8" [label="w1_0"];
  "121 E8" [shape=box];
  "121 E8" -> "122 E8" [label="w1_0"];
  "120 E8" [shape=box];
  "120 E8" -> "121 E8" [label="w1_0"];
  "118 D8" [shape=box];
  "118 D8" -> "120 E8" [label="w1_0"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0"];
  "110 <" [shape=trapezium,orientation=270];
  "110 <" -> "126 <" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "110 <" [label="w1_0"];
  "107 E8" [shape=box];
  "107 E8" -> "108 E8" [label="w1_0"];
  "106 E8" [shape=box];
  "106 E8" -> "107 E8" [label="w1_0"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="w1_0"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_0"];
  "102 D8" [shape=box];
  "102 D8" -> "104 E8" [label="w1_0"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0"];
  "94 <" [shape=trapezium,orientation=270];
  "94 <" -> "110 <" [label="w2_0"];
  "92 E8" [shape=box];
  "92 E8" -> "94 <" [label="w1_0"];
  "91 E8" [shape=box];
  "91 E8" -> "92 E8" [label="w1_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 E8" [label="w1_0"];
  "89 E8" [shape=box];
  "89 E8" -> "90 E8" [label="w1_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 E8" [label="w1_0"];
  "86 D8" [shape=box];
  "86 D8" -> "88 E8" [label="w1_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0"];
  "78 C" [shape=trapezium,orientation=270];
  "78 C" -> "94 <" [label="w2_0"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out"];
  "73 !" -> "98 D8" [label="out"];
  "73 !" -> "82 D8" [label="out"];
  "72 *_" [shape=trapezium,orientation=270];
  "71 -" [shape=trapezium,orientation=270];
  "71 -" -> "72 *_" [label="top"];
  "69 D8" [shape=box];
  "69 D8" -> "71 -" [label="top"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="top"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="top"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="top"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="top"];
  "63 E8" [shape=box];
  "63 E8" -> "65 D8" [label="top"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="top"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="top"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="top"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="top"];
  "57 D8" [shape=box];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="out"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="out"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="out"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="out"];
  "51 E8" [shape=box];
  "51 E8" -> "53 D8" [label="out"];
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="out"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="out"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="out"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="out"];
  "in" -> "138 !";
  "in" -> "135 -";
  "in" -> "73 !";
  "in" -> "71 -";
  "in" -> "59 E8";
  "in" -> "47 E8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out"];
  "out" -> "204 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "213 >" [shape=trapezium,orientation=270];
  "212 thr" [shape=parallelogram];
  "212 thr" -> "213 >" [label="out"];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec"];
  "out" -> "210 -";
  "in" -> "213 >";
  "in" -> "210 -";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1_3"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1_13"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1_23"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0_7"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0_17"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0_27"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}

! updated function for AIPO

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *rec, *out;                                        /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w1_0;                                                  /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/
   // hardware accelerator generated variable
   freia_data2d *w1_0_5 = 0, *w1_0_15 = 0, *w1_0_25 = 0;

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   w1_0_25 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_15 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_5 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/
   
   
   
   
   
   freia_aipo_not(out, in);                                             /*0073*/
   
   
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0_25, w1_0, freia_morpho_k8_0);              /*0086*/
   
   
   
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0_15, w1_0, freia_morpho_k8_1);              /*0102*/
   
   
   
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0_5, w1_0, freia_morpho_k8_2);               /*0118*/
   
   
   
   
   
   
   
   
   
   freia_aipo_erode_8c(w1_1, w1_0_25, neighborTransposed_5);            /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0160*/
   
   
   freia_aipo_erode_8c(w1_1, w1_0_15, neighborTransposed_4);            /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/
   
   
   freia_aipo_erode_8c(w1_1, w1_0_5, neighborTransposed_3);             /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/
   
   
   freia_aipo_not(out, w2_1);                                           /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w1_0_5);
   freia_common_destruct_data(w1_0_15);
   freia_common_destruct_data(w1_0_25);

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *top, *lin, *rec, *out, *imWork2;                  /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w2_0, *w1_0;                                           /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   top = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0038*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   lin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0040*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0047*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0048*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0049*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0050*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0051*/

   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0053*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0054*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0055*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0056*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0057*/

   freia_aipo_erode_8c(top, in, freia_morpho_kernel_8c);                /*0059*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0060*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0061*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0062*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0063*/

   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0065*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0066*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0067*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0068*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0069*/

   freia_aipo_sub(top, in, top);                                        /*0071*/
   freia_aipo_mul_const(top, top, 2);                                   /*0072*/
   freia_aipo_not(out, in);                                             /*0073*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0076*/

   freia_aipo_set_constant(w2_0, 255);                                  /*0078*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0086*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0088*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0089*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0090*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0091*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0092*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0094*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0102*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0104*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0105*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0106*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0107*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0108*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0110*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0118*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0120*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0121*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0122*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0123*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0124*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0126*/

   freia_aipo_copy(out, w2_0);                                          /*0128*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w2_0);                                    /*0131*/

   freia_aipo_not(out, out);                                            /*0133*/

   freia_aipo_sub(lin, in, out);                                        /*0135*/
   freia_aipo_mul_const(lin, lin, 2);                                   /*0136*/

   freia_aipo_not(out, in);                                             /*0138*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/

   freia_aipo_set_constant(w2_1, 255);                                  /*0144*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0148*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0149*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0150*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0151*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0152*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0160*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0164*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0165*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0166*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0167*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0168*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0180*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0181*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0182*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0183*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0184*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/

   freia_aipo_copy(out, w2_1);                                          /*0194*/

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/

   freia_aipo_not(out, out);                                            /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   freia_aipo_sup(imWork2, out, in);                                    /*0213*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(top);                                     /*0221*/
   freia_common_destruct_data(lin);                                     /*0222*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/
   freia_common_destruct_data(imWork2);                                 /*0225*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=97 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "135 vol" [shape=diamond];
  "134 !" [shape=trapezium,orientation=270];
  "134 !" -> "135 vol" [label="out"];
  "134 !" -> "out";
  "131 =" [shape=circle];
  "131 =" -> "134 !" [label="out"];
  "130 <" [shape=trapezium,orientation=270];
  "130 <" -> "131 =" [label="w2_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 <" [label="w1_1"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="w1_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="w1_1"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="w1_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="w1_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="w1_1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="w1_1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="w1_1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="w1_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="w1_1"];
  "118 <" [shape=trapezium,orientation=270];
  "118 <" -> "130 <" [label="w2_1"];
  "117 E8" [shape=box];
  "117 E8" -> "118 <" [label="w1_1"];
  "116 E8" [shape=box];
  "116 E8" -> "117 E8" [label="w1_1"];
  "115 E8" [shape=box];
  "115 E8" -> "116 E8" [label="w1_1"];
  "114 E8" [shape=box];
  "114 E8" -> "115 E8" [label="w1_1"];
  "113 E8" [shape=box];
  "113 E8" -> "114 E8" [label="w1_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 E8" [label="w1_1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="w1_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="w1_1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="w1_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="w1_1"];
  "106 <" [shape=trapezium,orientation=270];
  "106 <" -> "118 <" [label="w2_1"];
  "105 E8" [shape=box];
  "105 E8" -> "106 <" [label="w1_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_1"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="w1_1"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="w1_1"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 E8" [label="w1_1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="w1_1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="w1_1"];
  "94 C" [shape=trapezium,orientation=270];
  "94 C" -> "106 <" [label="w2_1"];
  "91 !" [shape=trapezium,orientation=270];
  "91 !" -> "120 D8" [label="out"];
  "91 !" -> "108 D8" [label="out"];
  "91 !" -> "96 D8" [label="out"];
  "90 *_" [shape=trapezium,orientation=270];
  "89 -" [shape=trapezium,orientation=270];
  "89 -" -> "90 *_" [label="lin"];
  "88 !" [shape=trapezium,orientation=270];
  "88 !" -> "89 -" [label="out"];
  "85 =" [shape=circle];
  "85 =" -> "88 !" [label="out"];
  "84 <" [shape=trapezium,orientation=270];
  "84 <" -> "85 =" [label="w2_0"];
  "83 E8" [shape=box];
  "83 E8" -> "84 <" [label="w1_0"];
  "82 E8" [shape=box];
  "82 E8" -> "83 E8" [label="w1_0"];
  "81 E8" [shape=box];
  "81 E8" -> "82 E8" [label="w1_0"];
  "80 E8" [shape=box];
  "80 E8" -> "81 E8" [label="w1_0"];
  "79 E8" [shape=box];
  "79 E8" -> "80 E8" [label="w1_0"];
  "78 D8" [shape=box];
  "78 D8" -> "79 E8" [label="w1_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="w1_0"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="w1_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="w1_0"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="w1_0"];
  "72 <" [shape=trapezium,orientation=270];
  "72 <" -> "84 <" [label="w2_0"];
  "71 E8" [shape=box];
  "71 E8" -> "72 <" [label="w1_0"];
  "70 E8" [shape=box];
  "70 E8" -> "71 E8" [label="w1_0"];
  "69 E8" [shape=box];
  "69 E8" -> "70 E8" [label="w1_0"];
  "68 E8" [shape=box];
  "68 E8" -> "69 E8" [label="w1_0"];
  "67 E8" [shape=box];
  "67 E8" -> "68 E8" [label="w1_0"];
  "66 D8" [shape=box];
  "66 D8" -> "67 E8" [label="w1_0"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="w1_0"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="w1_0"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="w1_0"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="w1_0"];
  "60 <" [shape=trapezium,orientation=270];
  "60 <" -> "72 <" [label="w2_0"];
  "59 E8" [shape=box];
  "59 E8" -> "60 <" [label="w1_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="w1_0"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="w1_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="w1_0"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="w1_0"];
  "54 D8" [shape=box];
  "54 D8" -> "55 E8" [label="w1_0"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="w1_0"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="w1_0"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="w1_0"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="w1_0"];
  "48 C" [shape=trapezium,orientation=270];
  "48 C" -> "60 <" [label="w2_0"];
  "45 !" [shape=trapezium,orientation=270];
  "45 !" -> "74 D8" [label="out"];
  "45 !" -> "62 D8" [label="out"];
  "45 !" -> "50 D8" [label="out"];
  "44 *_" [shape=trapezium,orientation=270];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 *_" [label="top"];
  "42 D8" [shape=box];
  "42 D8" -> "43 -" [label="top"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="top"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="top"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="top"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="top"];
  "37 E8" [shape=box];
  "37 E8" -> "38 D8" [label="top"];
  "36 E8" [shape=box];
  "36 E8" -> "37 E8" [label="top"];
  "35 E8" [shape=box];
  "35 E8" -> "36 E8" [label="top"];
  "34 E8" [shape=box];
  "34 E8" -> "35 E8" [label="top"];
  "33 E8" [shape=box];
  "33 E8" -> "34 E8" [label="top"];
  "32 D8" [shape=box];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="out"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="out"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="out"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="out"];
  "27 E8" [shape=box];
  "27 E8" -> "28 D8" [label="out"];
  "26 E8" [shape=box];
  "26 E8" -> "27 E8" [label="out"];
  "25 E8" [shape=box];
  "25 E8" -> "26 E8" [label="out"];
  "24 E8" [shape=box];
  "24 E8" -> "25 E8" [label="out"];
  "23 E8" [shape=box];
  "23 E8" -> "24 E8" [label="out"];
  "in" -> "91 !";
  "in" -> "89 -";
  "in" -> "45 !";
  "in" -> "43 -";
  "in" -> "33 E8";
  "in" -> "23 E8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "154 vol" [shape=diamond];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "154 vol" [label="out"];
  "153 <" -> "out'";
  "152 D8" [shape=box];
  "152 D8" -> "153 <" [label="out"];
  "151 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "152 D8" [label="out"];
  "150 <" -> "151 vol" [label="out"];
  "149 D8" [shape=box];
  "149 D8" -> "150 <" [label="out"];
  "148 <" [shape=trapezium,orientation=270];
  "148 <" -> "149 D8" [label="out"];
  "147 D8" [shape=box];
  "147 D8" -> "148 <" [label="out"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 <" [label="out"];
  "144 <" [shape=trapezium,orientation=270];
  "144 <" -> "145 D8" [label="out"];
  "143 D8" [shape=box];
  "143 D8" -> "144 <" [label="out"];
  "142 <" [shape=trapezium,orientation=270];
  "142 <" -> "143 D8" [label="out"];
  "141 D8" [shape=box];
  "141 D8" -> "142 <" [label="out"];
  "140 <" [shape=trapezium,orientation=270];
  "140 <" -> "141 D8" [label="out"];
  "139 D8" [shape=box];
  "139 D8" -> "140 <" [label="out"];
  "138 <" [shape=trapezium,orientation=270];
  "138 <" -> "139 D8" [label="out"];
  "in" -> "153 <";
  "in" -> "150 <";
  "in" -> "148 <";
  "in" -> "146 <";
  "in" -> "144 <";
  "in" -> "142 <";
  "in" -> "140 <";
  "in" -> "138 <";
  "137 D8" [shape=box];
  "137 D8" -> "138 <" [label="out"];
  "out" -> "137 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "158 >" [shape=trapezium,orientation=270];
  "157 thr" [shape=parallelogram];
  "157 thr" -> "158 >" [label="out"];
  "157 thr" -> "out'";
  "156 *_" [shape=trapezium,orientation=270];
  "156 *_" -> "157 thr" [label="rec"];
  "155 -" [shape=trapezium,orientation=270];
  "155 -" -> "156 *_" [label="rec"];
  "out" -> "155 -";
  "in" -> "158 >";
  "in" -> "155 -";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "135 vol" [shape=diamond];
  "134 !" [shape=trapezium,orientation=270];
  "134 !" -> "135 vol" [label="out"];
  "134 !" -> "out";
  "130 <" [shape=trapezium,orientation=270];
  "130 <" -> "134 !" [label="w2_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 <" [label="w1_1"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="w1_1_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="w1_1_2"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="w1_1_3"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="w1_1_4"];
  "118 <" [shape=trapezium,orientation=270];
  "118 <" -> "130 <" [label="w2_1_1"];
  "117 E8" [shape=box];
  "117 E8" -> "118 <" [label="w1_1_10"];
  "116 E8" [shape=box];
  "116 E8" -> "117 E8" [label="w1_1_11"];
  "115 E8" [shape=box];
  "115 E8" -> "116 E8" [label="w1_1_12"];
  "114 E8" [shape=box];
  "114 E8" -> "115 E8" [label="w1_1_13"];
  "113 E8" [shape=box];
  "113 E8" -> "114 E8" [label="w1_1_14"];
  "106 <_" [shape=trapezium,orientation=270];
  "106 <_" -> "118 <" [label="w2_1_2"];
  "105 E8" [shape=box];
  "105 E8" -> "106 <_" [label="w1_1_20"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_1_21"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="w1_1_22"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="w1_1_23"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_1_24"];
  "78 D8" [shape=box];
  "78 D8" -> "125 E8" [label="w1_0_5"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="w1_0_6"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="w1_0_7"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="w1_0_8"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="w1_0_9"];
  "66 D8" [shape=box];
  "66 D8" -> "113 E8" [label="w1_0_15"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="w1_0_16"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="w1_0_17"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="w1_0_18"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="w1_0_19"];
  "54 D8" [shape=box];
  "54 D8" -> "101 E8" [label="w1_0_25"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="w1_0_26"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="w1_0_27"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="w1_0_28"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="w1_0_29"];
  "45 !" [shape=trapezium,orientation=270];
  "45 !" -> "74 D8" [label="out_5"];
  "45 !" -> "62 D8" [label="out_5"];
  "45 !" -> "50 D8" [label="out_5"];
  "in" -> "45 !";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "154 vol" [shape=diamond];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "154 vol" [label="out"];
  "153 <" -> "out'";
  "152 D8" [shape=box];
  "152 D8" -> "153 <" [label="out_16"];
  "151 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "152 D8" [label="out_17"];
  "150 <" -> "151 vol" [label="out_17"];
  "149 D8" [shape=box];
  "149 D8" -> "150 <" [label="out_18"];
  "148 <" [shape=trapezium,orientation=270];
  "148 <" -> "149 D8" [label="out_19"];
  "147 D8" [shape=box];
  "147 D8" -> "148 <" [label="out_20"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "147 D8" [label="out_21"];
  "145 D8" [shape=box];
  "145 D8" -> "146 <" [label="out_22"];
  "144 <" [shape=trapezium,orientation=270];
  "144 <" -> "145 D8" [label="out_23"];
  "143 D8" [shape=box];
  "143 D8" -> "144 <" [label="out_24"];
  "142 <" [shape=trapezium,orientation=270];
  "142 <" -> "143 D8" [label="out_25"];
  "141 D8" [shape=box];
  "141 D8" -> "142 <" [label="out_26"];
  "140 <" [shape=trapezium,orientation=270];
  "140 <" -> "141 D8" [label="out_27"];
  "139 D8" [shape=box];
  "139 D8" -> "140 <" [label="out_28"];
  "138 <" [shape=trapezium,orientation=270];
  "138 <" -> "139 D8" [label="out_29"];
  "in" -> "153 <";
  "in" -> "150 <";
  "in" -> "148 <";
  "in" -> "146 <";
  "in" -> "144 <";
  "in" -> "142 <";
  "in" -> "140 <";
  "in" -> "138 <";
  "137 D8" [shape=box];
  "137 D8" -> "138 <" [label="out_30"];
  "out" -> "137 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "157 thr" [shape=parallelogram];
  "157 thr" -> "out'";
  "156 *_" [shape=trapezium,orientation=270];
  "156 *_" -> "157 thr" [label="rec"];
  "155 -" [shape=trapezium,orientation=270];
  "155 -" -> "156 *_" [label="rec_1"];
  "out" -> "155 -";
  "in" -> "155 -";
}
// graph for dag "main_spoc_helper_0_0" of module "main" in dot format
// DAG "main_spoc_helper_0_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out_5" [shape=circle];
  "w2_1_2" [shape=circle];

  // computation vertices
  "106 <_" [shape=trapezium,orientation=270];
  "106 <_" -> "w2_1_2";
  "105 E8" [shape=box];
  "105 E8" -> "106 <_" [label="w1_1_20"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_1_21"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="w1_1_22"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="w1_1_23"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_1_24"];
  "54 D8" [shape=box];
  "54 D8" -> "101 E8" [label="w1_0_25"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="w1_0_26"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="w1_0_27"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="w1_0_28"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="w1_0_29"];
  "45 !" [shape=trapezium,orientation=270];
  "45 !" -> "50 D8" [label="out_5"];
  "45 !" -> "out_5";
  "in" -> "45 !";
}
// graph for dag "main_spoc_helper_0_1" of module "main" in dot format
// DAG "main_spoc_helper_0_1": #i=1 #o=2 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_1" {
  // inputs
  "out_5" [shape=circle];

  // outputs
  "w1_1_10" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "129 E8" [shape=box];
  "129 E8" -> "w1_1";
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="w1_1_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="w1_1_2"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="w1_1_3"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="w1_1_4"];
  "117 E8" [shape=box];
  "117 E8" -> "w1_1_10";
  "116 E8" [shape=box];
  "116 E8" -> "117 E8" [label="w1_1_11"];
  "115 E8" [shape=box];
  "115 E8" -> "116 E8" [label="w1_1_12"];
  "114 E8" [shape=box];
  "114 E8" -> "115 E8" [label="w1_1_13"];
  "113 E8" [shape=box];
  "113 E8" -> "114 E8" [label="w1_1_14"];
  "78 D8" [shape=box];
  "78 D8" -> "125 E8" [label="w1_0_5"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="w1_0_6"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="w1_0_7"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="w1_0_8"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="w1_0_9"];
  "66 D8" [shape=box];
  "66 D8" -> "113 E8" [label="w1_0_15"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="w1_0_16"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="w1_0_17"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="w1_0_18"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="w1_0_19"];
  "out_5" -> "74 D8";
  "out_5" -> "62 D8";
}
// graph for dag "main_spoc_helper_0_2" of module "main" in dot format
// DAG "main_spoc_helper_0_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_2" {
  // inputs
  "w1_1_10" [shape=circle];
  "w2_1_2" [shape=circle];

  // outputs
  "w2_1_1" [shape=circle];

  // computation vertices
  "118 <" [shape=trapezium,orientation=270];
  "118 <" -> "w2_1_1";
  "w1_1_10" -> "118 <";
  "w2_1_2" -> "118 <";
}
// graph for dag "main_spoc_helper_0_3" of module "main" in dot format
// DAG "main_spoc_helper_0_3": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_3" {
  // inputs
  "w1_1" [shape=circle];
  "w2_1_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "135 vol" [shape=diamond];
  "134 !" [shape=trapezium,orientation=270];
  "134 !" -> "135 vol" [label="out"];
  "134 !" -> "out";
  "130 <" [shape=trapezium,orientation=270];
  "130 <" -> "134 !" [label="w2_1"];
  "w1_1" -> "130 <";
  "w2_1_1" -> "130 <";
}
// graph for dag "main_spoc_helper_1_0" of module "main" in dot format
// DAG "main_spoc_helper_1_0": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "154 vol" [shape=diamond];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "154 vol" [label="out"];
  "153 <" -> "out'";
  "152 D8" [shape=box];
  "152 D8" -> "153 <" [label="out_16"];
  "151 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "152 D8" [label="out_17"];
  "150 <" -> "151 vol" [label="out_17"];
  "149 D8" [shape=box];
  "149 D8" -> "150 <" [label="out_18"];
  "148 <" [shape=trapezium,orientation=270];
  "148 <" -> "149 D8" [label="out_19"];
  "147 D8" [shape=box];
  "147 D8" -> "148 <" [label="out_20"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "147 D8" [label="out_21"];
  "145 D8" [shape=box];
  "145 D8" -> "146 <" [label="out_22"];
  "144 <" [shape=trapezium,orientation=270];
  "144 <" -> "145 D8" [label="out_23"];
  "143 D8" [shape=box];
  "143 D8" -> "144 <" [label="out_24"];
  "142 <" [shape=trapezium,orientation=270];
  "142 <" -> "143 D8" [label="out_25"];
  "141 D8" [shape=box];
  "141 D8" -> "142 <" [label="out_26"];
  "140 <" [shape=trapezium,orientation=270];
  "140 <" -> "141 D8" [label="out_27"];
  "139 D8" [shape=box];
  "139 D8" -> "140 <" [label="out_28"];
  "138 <" [shape=trapezium,orientation=270];
  "138 <" -> "139 D8" [label="out_29"];
  "in" -> "153 <";
  "in" -> "150 <";
  "in" -> "148 <";
  "in" -> "146 <";
  "in" -> "144 <";
  "in" -> "142 <";
  "in" -> "140 <";
  "in" -> "138 <";
  "137 D8" [shape=box];
  "137 D8" -> "138 <" [label="out_30"];
  "out" -> "137 D8";
}
// graph for dag "main_spoc_helper_2_0" of module "main" in dot format
// DAG "main_spoc_helper_2_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_2_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "157 thr" [shape=parallelogram];
  "157 thr" -> "out'";
  "156 *_" [shape=trapezium,orientation=270];
  "156 *_" -> "157 thr" [label="rec"];
  "155 -" [shape=trapezium,orientation=270];
  "155 -" -> "156 *_" [label="rec_1"];
  "out" -> "155 -";
  "in" -> "155 -";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 97 ops and 2 copies, optimized to 36 ops and 0+0+0 copies
// split 0: 2 cuts
// split 1: 2 cuts
// split 2: 1 cut
// split 3: 1 cut
// # SPOC calls: 6

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 45 not
  // nope
  // alu 45 not stage 0
  si.alu[0][0].op = SPOC_ALU_NOT_IN0;


  // STAGE 2
  // 0`out_5 [0 alu] -> [2 poc 0] 50 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`out_5 [1 input 0] -> [2 poc 0] 50 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_5 [2 input 0] -> [2 poc 0] 50 dilate_8c
  // nope
  // poc 50 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`w1_0_29 [2 poc 0] -> [3 poc 0] 51 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_0_29 [3 input 0] -> [3 poc 0] 51 dilate_8c
  // nope
  // poc 51 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`w1_0_28 [3 poc 0] -> [4 poc 0] 52 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_0_28 [4 input 0] -> [4 poc 0] 52 dilate_8c
  // nope
  // poc 52 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`w1_0_27 [4 poc 0] -> [5 poc 0] 53 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_0_27 [5 input 0] -> [5 poc 0] 53 dilate_8c
  // nope
  // poc 53 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`w1_0_26 [5 poc 0] -> [6 poc 0] 54 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_0_26 [6 input 0] -> [6 poc 0] 54 dilate_8c
  // nope
  // poc 54 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`w1_0_25 [6 poc 0] -> [7 poc 0] 101 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_0_25 [7 input 0] -> [7 poc 0] 101 erode_8c
  // nope
  // poc 101 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // output image 0`out_5 on 1 and image 0`w1_1_24 on 0
  // 0`out_5 [1 poc 0] -> [7 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`out_5 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_5 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_5 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_5 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_5 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_5 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_5 [7 output 1] -> [7 output 1] 0 null
  // nope

  // 0`w1_1_24 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1_24 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1_24 [0 input 0] -> [0 poc 0] 102 erode_8c
  // nope
  // poc 102 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`w1_1_23 [0 poc 0] -> [1 poc 0] 103 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w1_1_23 [1 input 0] -> [1 poc 0] 103 erode_8c
  // nope
  // poc 103 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`w1_1_22 [1 poc 0] -> [2 poc 0] 104 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w1_1_22 [2 input 0] -> [2 poc 0] 104 erode_8c
  // nope
  // poc 104 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`w1_1_21 [2 poc 0] -> [3 poc 0] 105 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_1_21 [3 input 0] -> [3 poc 0] 105 erode_8c
  // nope
  // poc 105 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`w1_1_20 [3 poc 0] -> [3 alu] 106 inf_const
  // nope
  // alu 106 inf_const stage 3
  si.alu[3][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[3][0].constant = pi1;


  // output image 0`w2_1_2 on 0
  // 0`w2_1_2 [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_1_2 [3 output 0] -> [7 output 0] 0 null
  // 0`w2_1_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w2_1_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w2_1_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w2_1_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1,
  const int32_t * pi2,
  const int32_t * pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out_5 [0 input 0] -> [0 poc 0] 62 dilate_8c
  // nope
  // poc 62 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`w1_0_19 [0 poc 0] -> [1 poc 0] 63 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w1_0_19 [1 input 0] -> [1 poc 0] 63 dilate_8c
  // nope
  // poc 63 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`w1_0_18 [1 poc 0] -> [2 poc 0] 64 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w1_0_18 [2 input 0] -> [2 poc 0] 64 dilate_8c
  // nope
  // poc 64 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`w1_0_17 [2 poc 0] -> [3 poc 0] 65 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_0_17 [3 input 0] -> [3 poc 0] 65 dilate_8c
  // nope
  // poc 65 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`w1_0_16 [3 poc 0] -> [4 poc 0] 66 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_0_16 [4 input 0] -> [4 poc 0] 66 dilate_8c
  // nope
  // poc 66 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_5 [0 input 1] -> [0 poc 1] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`w1_0_9 [0 poc 1] -> [1 poc 1] 75 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w1_0_9 [1 input 1] -> [1 poc 1] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`w1_0_8 [1 poc 1] -> [2 poc 1] 76 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`w1_0_8 [2 input 1] -> [2 poc 1] 76 dilate_8c
  // nope
  // poc 76 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`w1_0_7 [2 poc 1] -> [3 poc 1] 77 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`w1_0_7 [3 input 1] -> [3 poc 1] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`w1_0_6 [3 poc 1] -> [4 poc 1] 78 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`w1_0_6 [4 input 1] -> [4 poc 1] 78 dilate_8c
  // nope
  // poc 78 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`w1_0_15 [4 poc 0] -> [5 poc 0] 113 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_0_15 [5 input 0] -> [5 poc 0] 113 erode_8c
  // nope
  // poc 113 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi2[i];


  // STAGE 6
  // 0`w1_1_14 [5 poc 0] -> [6 poc 0] 114 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_1_14 [6 input 0] -> [6 poc 0] 114 erode_8c
  // nope
  // poc 114 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi2[i];


  // STAGE 7
  // 0`w1_1_13 [6 poc 0] -> [7 poc 0] 115 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_1_13 [7 input 0] -> [7 poc 0] 115 erode_8c
  // nope
  // poc 115 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi2[i];


  // STAGE 5
  // 0`w1_0_5 [4 poc 1] -> [5 poc 1] 125 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`w1_0_5 [5 input 1] -> [5 poc 1] 125 erode_8c
  // nope
  // poc 125 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi3[i];


  // STAGE 6
  // 0`w1_1_4 [5 poc 1] -> [6 poc 1] 126 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`w1_1_4 [6 input 1] -> [6 poc 1] 126 erode_8c
  // nope
  // poc 126 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi3[i];


  // STAGE 7
  // 0`w1_1_3 [6 poc 1] -> [7 poc 1] 127 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`w1_1_3 [7 input 1] -> [7 poc 1] 127 erode_8c
  // nope
  // poc 127 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi3[i];


  // output image 0`w1_1_12 on 0 and image 0`w1_1_2 on 1
  // 0`w1_1_12 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1_12 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`w1_1_2 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`w1_1_2 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_1_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1_12 [0 input 0] -> [0 poc 0] 116 erode_8c
  // nope
  // poc 116 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`w1_1_11 [0 poc 0] -> [1 poc 0] 117 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w1_1_11 [1 input 0] -> [1 poc 0] 117 erode_8c
  // nope
  // poc 117 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`w1_1_2 [0 input 1] -> [0 poc 1] 128 erode_8c
  // nope
  // poc 128 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`w1_1_1 [0 poc 1] -> [1 poc 1] 129 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w1_1_1 [1 input 1] -> [1 poc 1] 129 erode_8c
  // nope
  // poc 129 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // output image 0`w1_1_10 on 0 and image 0`w1_1 on 1
  // 0`w1_1_10 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1_10 [1 output 0] -> [7 output 0] 0 null
  // 0`w1_1_10 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_1_10 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_1_10 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_1_10 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_1_10 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_1_10 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`w1_1 [1 poc 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`w1_1 [1 output 1] -> [7 output 1] 0 null
  // 0`w1_1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1_10 [0 input 0] -> [0 alu] 118 inf
  // nope
  // 0`w2_1_2 [0 input 1] -> [0 alu] 118 inf
  // nope
  // alu 118 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image 0`w2_1_1 on 0
  // 0`w2_1_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_1_1 [0 output 0] -> [7 output 0] 0 null
  // 0`w2_1_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w2_1_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1 [0 input 0] -> [0 alu] 130 inf
  // nope
  // 0`w2_1_1 [0 input 1] -> [0 alu] 130 inf
  // nope
  // alu 130 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1
  // 0`w2_1 [0 alu] -> [1 alu] 134 not
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`w2_1 [1 input 0] -> [1 alu] 134 not
  // nope
  // alu 134 not stage 1
  si.alu[1][0].op = SPOC_ALU_NOT_IN0;

  // 0`out [1 alu] -> [1 measure 0] 134 not
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;


  // output image 0`out on 0
  // 0`out [1 measure 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [1 output 0] -> [7 output 0] 0 null
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 135 global_vol stage 1 side 0
  *po0 = (int32_t) reduc.measure[1][0].volume;

  return ret;
}

// dag 1: 18 ops and 0 copies, optimized to 18 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out [0 input 1] -> [0 poc 1] 137 dilate_8c
  // nope
  // poc 137 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`in [0 input 0] -> [0 alu] 138 inf
  // nope
  // 0`out_30 [0 poc 1] -> [0 alu] 138 inf
  // nope
  // alu 138 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1
  // 0`out_29 [0 alu] -> [1 poc 0] 139 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`out_29 [1 input 0] -> [1 poc 0] 139 dilate_8c
  // nope
  // poc 139 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`in [0 input 0] -> [1 alu] 140 inf
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`in [1 input 1] -> [1 alu] 140 inf
  // nope
  // 0`out_28 [1 poc 0] -> [1 alu] 140 inf
  // nope
  // alu 140 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 2
  // 0`out_27 [1 alu] -> [2 poc 0] 141 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`out_27 [2 input 0] -> [2 poc 0] 141 dilate_8c
  // nope
  // poc 141 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`in [1 poc 1] -> [2 alu] 142 inf
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`in [2 input 1] -> [2 alu] 142 inf
  // nope
  // 0`out_26 [2 poc 0] -> [2 alu] 142 inf
  // nope
  // alu 142 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 3
  // 0`out_25 [2 alu] -> [3 poc 0] 143 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`out_25 [3 input 0] -> [3 poc 0] 143 dilate_8c
  // nope
  // poc 143 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`in [2 poc 1] -> [3 alu] 144 inf
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`in [3 input 1] -> [3 alu] 144 inf
  // nope
  // 0`out_24 [3 poc 0] -> [3 alu] 144 inf
  // nope
  // alu 144 inf stage 3
  si.alu[3][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 4
  // 0`out_23 [3 alu] -> [4 poc 0] 145 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`out_23 [4 input 0] -> [4 poc 0] 145 dilate_8c
  // nope
  // poc 145 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`in [3 poc 1] -> [4 alu] 146 inf
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`in [4 input 1] -> [4 alu] 146 inf
  // nope
  // 0`out_22 [4 poc 0] -> [4 alu] 146 inf
  // nope
  // alu 146 inf stage 4
  si.alu[4][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 5
  // 0`out_21 [4 alu] -> [5 poc 0] 147 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // 0`out_21 [5 input 0] -> [5 poc 0] 147 dilate_8c
  // nope
  // poc 147 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`in [4 poc 1] -> [5 alu] 148 inf
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`in [5 input 1] -> [5 alu] 148 inf
  // nope
  // 0`out_20 [5 poc 0] -> [5 alu] 148 inf
  // nope
  // alu 148 inf stage 5
  si.alu[5][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 6
  // 0`out_19 [5 alu] -> [6 poc 0] 149 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // 0`out_19 [6 input 0] -> [6 poc 0] 149 dilate_8c
  // nope
  // poc 149 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`in [5 poc 1] -> [6 alu] 150 inf
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`in [6 input 1] -> [6 alu] 150 inf
  // nope
  // 0`out_18 [6 poc 0] -> [6 alu] 150 inf
  // nope
  // alu 150 inf stage 6
  si.alu[6][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`out_17 [6 alu] -> [6 measure 0] 150 inf
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;


  // STAGE 7
  // 0`out_17 [6 measure 0] -> [7 poc 0] 152 dilate_8c
  // 0`out_17 [7 input 0] -> [7 poc 0] 152 dilate_8c
  // nope
  // poc 152 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`in [6 poc 1] -> [7 alu] 153 inf
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`in [7 input 1] -> [7 alu] 153 inf
  // nope
  // 0`out_16 [7 poc 0] -> [7 alu] 153 inf
  // nope
  // alu 153 inf stage 7
  si.alu[7][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`out [7 alu] -> [7 measure 0] 153 inf
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;


  // output image 0`out on 0
  // 0`out [7 measure 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 151 global_vol stage 6 side 0
  *po1 = (int32_t) reduc.measure[6][0].volume;

  // measure 154 global_vol stage 7 side 0
  *po2 = (int32_t) reduc.measure[7][0].volume;

  return ret;
}

// dag 2: 4 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 155 sub
  // nope
  // 0`out [0 input 1] -> [0 alu] 155 sub
  // nope
  // alu 155 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // STAGE 1
  // 0`rec_1 [0 alu] -> [1 alu] 156 mul_const
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`rec_1 [1 input 0] -> [1 alu] 156 mul_const
  // nope
  // alu 156 mul_const stage 1
  si.alu[1][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[1][0].constant = pi0;

  // 0`rec [1 alu] -> [1 threshold 0] 157 threshold
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // threshold 157 threshold stage 1 side 0
  si.th[1][0].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[1][0].boundmin = pi1;
  sp.th[1][0].boundmax = pi2;


  // output image 0`out on 0
  // 0`out [1 threshold 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [1 output 0] -> [7 output 0] 0 null
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *in, *out;                                              /*0002*/
   int32_t neighborTransposed_0[9];                                     /*0003*/
   int32_t neighborTransposed_1[9];                                     /*0004*/
   int32_t neighborTransposed_2[9];                                     /*0005*/
   int32_t neighborTransposed_3[9];                                     /*0007*/
   int32_t neighborTransposed_4[9];                                     /*0008*/
   int32_t neighborTransposed_5[9];                                     /*0009*/
   freia_data2d *w2_1, *w1_1;                                           /*0010*/
   int32_t volprevious;                                                 /*0011*/
   int32_t volcurrent;                                                  /*0012*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = 0, *w1_1_10 = 0;

   freia_initialize(argc, argv);                                        /*0013*/
   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0016*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   w1_1_10 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0022*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0049*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0061*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0073*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0095*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0107*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0119*/
   
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0092*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0093*/
   
   
   
   
   
   main_spoc_helper_0_0_0(out, w1_1, in, freia_morpho_k8_0, neighborTransposed_5);     /*0045*/
   
   
   main_spoc_helper_0_0_1(w2_1, w1_1, neighborTransposed_5, 255);       /*0102*/
   
   
   
   
   
   
   
   main_spoc_helper_0_1_0(w1_1, w1_1_2, out, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_4, neighborTransposed_3);     /*0113*/
   main_spoc_helper_0_1_1(w1_1_10, w1_1, w1_1, w1_1_2, neighborTransposed_4, neighborTransposed_3);   /*0116*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   main_spoc_helper_0_2_0(w2_1, w1_1_10, w2_1);                         /*0118*/
   
   
   main_spoc_helper_0_3_0(out, w1_1, w2_1, &volcurrent);                /*0130*/
   
   
   
   
   
   freia_common_destruct_data(w1_1);                                    /*0132*/
   freia_common_destruct_data(w1_1_2);
   freia_common_destruct_data(w1_1_10);
   freia_common_destruct_data(w2_1);                                    /*0133*/
   do {                                                                 /*0136*/
      main_spoc_helper_1_0_0(out, in, out, freia_morpho_kernel_8c, &volprevious, &volcurrent);        /*0137*/
   }
   while (volcurrent!=volprevious);                                     /*0136*/

   main_spoc_helper_2_0_0(out, in, out, 2, 90, 255, 1);                 /*0155*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0159*/
   freia_common_tx_image(out, &fdout);                                  /*0160*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0161*/
   freia_common_destruct_data(out);                                     /*0165*/

   freia_common_close_input(&fdin);                                     /*0167*/
   freia_common_close_output(&fdout);                                   /*0168*/

   freia_shutdown();                                                    /*0169*/
   return 0;                                                            /*0170*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *in, *out;                                              /*0002*/
   int32_t neighborTransposed_0[9];                                     /*0003*/
   int32_t neighborTransposed_1[9];                                     /*0004*/
   int32_t neighborTransposed_2[9];                                     /*0005*/
   int32_t neighborTransposed_3[9];                                     /*0007*/
   int32_t neighborTransposed_4[9];                                     /*0008*/
   int32_t neighborTransposed_5[9];                                     /*0009*/
   freia_data2d *w2_1, *w1_1;                                           /*0010*/
   int32_t volprevious;                                                 /*0011*/
   int32_t volcurrent;                                                  /*0012*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = 0, *w1_1_10 = 0;

   freia_initialize(argc, argv);                                        /*0013*/
   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0016*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   w1_1_10 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0022*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0049*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0061*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0073*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0095*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0107*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0119*/
   
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0092*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0093*/
   
   
   
   
   
   main_spoc_helper_0_0_0(out, w1_1, in, freia_morpho_k8_0, neighborTransposed_5);     /*0045*/
   
   
   main_spoc_helper_0_0_1(w2_1, w1_1, neighborTransposed_5, 255);       /*0102*/
   
   
   
   
   
   
   
   main_spoc_helper_0_1_0(w1_1, w1_1_2, out, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_4, neighborTransposed_3);     /*0113*/
   main_spoc_helper_0_1_1(w1_1_10, w1_1, w1_1, w1_1_2, neighborTransposed_4, neighborTransposed_3);   /*0116*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   main_spoc_helper_0_2_0(w2_1, w1_1_10, w2_1);                         /*0118*/
   
   
   main_spoc_helper_0_3_0(out, w1_1, w2_1, &volcurrent);                /*0130*/
   
   
   
   
   
   freia_common_destruct_data(w1_1);                                    /*0132*/
   freia_common_destruct_data(w1_1_2);
   freia_common_destruct_data(w1_1_10);
   freia_common_destruct_data(w2_1);                                    /*0133*/
   do {                                                                 /*0136*/
      main_spoc_helper_1_0_0(out, in, out, freia_morpho_kernel_8c, &volprevious, &volcurrent);        /*0137*/
   }
   while (volcurrent!=volprevious);                                     /*0136*/

   main_spoc_helper_2_0_0(out, in, out, 2, 90, 255, 1);                 /*0155*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0159*/
   freia_common_tx_image(out, &fdout);                                  /*0160*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0161*/
   freia_common_destruct_data(out);                                     /*0165*/

   freia_common_close_input(&fdin);                                     /*0167*/
   freia_common_close_output(&fdout);                                   /*0168*/

   freia_shutdown();                                                    /*0169*/
   return 0;                                                            /*0170*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *top, *lin, *rec, *out, *imWork2;                  /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w2_0, *w1_0;                                           /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   top = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0038*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   lin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0040*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0047*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0048*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0049*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0050*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0051*/

   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0053*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0054*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0055*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0056*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0057*/

   freia_aipo_erode_8c(top, in, freia_morpho_kernel_8c);                /*0059*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0060*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0061*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0062*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0063*/

   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0065*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0066*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0067*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0068*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0069*/

   freia_aipo_sub(top, in, top);                                        /*0071*/
   freia_aipo_mul_const(top, top, 2);                                   /*0072*/
   freia_aipo_not(out, in);                                             /*0073*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0076*/

   freia_aipo_set_constant(w2_0, 255);                                  /*0078*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0086*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0088*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0089*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0090*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0091*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0092*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0094*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0102*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0104*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0105*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0106*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0107*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0108*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0110*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0118*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0120*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0121*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0122*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0123*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0124*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0126*/

   freia_aipo_copy(out, w2_0);                                          /*0128*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w2_0);                                    /*0131*/

   freia_aipo_not(out, out);                                            /*0133*/

   freia_aipo_sub(lin, in, out);                                        /*0135*/
   freia_aipo_mul_const(lin, lin, 2);                                   /*0136*/

   freia_aipo_not(out, in);                                             /*0138*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/

   freia_aipo_set_constant(w2_1, 255);                                  /*0144*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0148*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0149*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0150*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0151*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0152*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0160*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0164*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0165*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0166*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0167*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0168*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0180*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0181*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0182*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0183*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0184*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/

   freia_aipo_copy(out, w2_1);                                          /*0194*/

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/

   freia_aipo_not(out, out);                                            /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   freia_aipo_sup(imWork2, out, in);                                    /*0213*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(top);                                     /*0221*/
   freia_common_destruct_data(lin);                                     /*0222*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/
   freia_common_destruct_data(imWork2);                                 /*0225*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=97 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "194 =" [shape=circle];
  "194 =" -> "199 !" [label="out"];
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "194 =" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1"];
  "184 D8" [shape=box];
  "184 D8" -> "186 E8" [label="w1_1"];
  "183 D8" [shape=box];
  "183 D8" -> "184 D8" [label="w1_1"];
  "182 D8" [shape=box];
  "182 D8" -> "183 D8" [label="w1_1"];
  "181 D8" [shape=box];
  "181 D8" -> "182 D8" [label="w1_1"];
  "180 D8" [shape=box];
  "180 D8" -> "181 D8" [label="w1_1"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1"];
  "168 D8" [shape=box];
  "168 D8" -> "170 E8" [label="w1_1"];
  "167 D8" [shape=box];
  "167 D8" -> "168 D8" [label="w1_1"];
  "166 D8" [shape=box];
  "166 D8" -> "167 D8" [label="w1_1"];
  "165 D8" [shape=box];
  "165 D8" -> "166 D8" [label="w1_1"];
  "164 D8" [shape=box];
  "164 D8" -> "165 D8" [label="w1_1"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "176 <" [label="w2_1"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <" [label="w1_1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1"];
  "152 D8" [shape=box];
  "152 D8" -> "154 E8" [label="w1_1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="w1_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="w1_1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="w1_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="w1_1"];
  "144 C" [shape=trapezium,orientation=270];
  "144 C" -> "160 <" [label="w2_1"];
  "138 !" [shape=trapezium,orientation=270];
  "138 !" -> "180 D8" [label="out"];
  "138 !" -> "164 D8" [label="out"];
  "138 !" -> "148 D8" [label="out"];
  "136 *_" [shape=trapezium,orientation=270];
  "135 -" [shape=trapezium,orientation=270];
  "135 -" -> "136 *_" [label="lin"];
  "133 !" [shape=trapezium,orientation=270];
  "133 !" -> "135 -" [label="out"];
  "128 =" [shape=circle];
  "128 =" -> "133 !" [label="out"];
  "126 <" [shape=trapezium,orientation=270];
  "126 <" -> "128 =" [label="w2_0"];
  "124 E8" [shape=box];
  "124 E8" -> "126 <" [label="w1_0"];
  "123 E8" [shape=box];
  "123 E8" -> "124 E8" [label="w1_0"];
  "122 E8" [shape=box];
  "122 E8" -> "123 E8" [label="w1_0"];
  "121 E8" [shape=box];
  "121 E8" -> "122 E8" [label="w1_0"];
  "120 E8" [shape=box];
  "120 E8" -> "121 E8" [label="w1_0"];
  "118 D8" [shape=box];
  "118 D8" -> "120 E8" [label="w1_0"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0"];
  "110 <" [shape=trapezium,orientation=270];
  "110 <" -> "126 <" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "110 <" [label="w1_0"];
  "107 E8" [shape=box];
  "107 E8" -> "108 E8" [label="w1_0"];
  "106 E8" [shape=box];
  "106 E8" -> "107 E8" [label="w1_0"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="w1_0"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_0"];
  "102 D8" [shape=box];
  "102 D8" -> "104 E8" [label="w1_0"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0"];
  "94 <" [shape=trapezium,orientation=270];
  "94 <" -> "110 <" [label="w2_0"];
  "92 E8" [shape=box];
  "92 E8" -> "94 <" [label="w1_0"];
  "91 E8" [shape=box];
  "91 E8" -> "92 E8" [label="w1_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 E8" [label="w1_0"];
  "89 E8" [shape=box];
  "89 E8" -> "90 E8" [label="w1_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 E8" [label="w1_0"];
  "86 D8" [shape=box];
  "86 D8" -> "88 E8" [label="w1_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0"];
  "78 C" [shape=trapezium,orientation=270];
  "78 C" -> "94 <" [label="w2_0"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out"];
  "73 !" -> "98 D8" [label="out"];
  "73 !" -> "82 D8" [label="out"];
  "72 *_" [shape=trapezium,orientation=270];
  "71 -" [shape=trapezium,orientation=270];
  "71 -" -> "72 *_" [label="top"];
  "69 D8" [shape=box];
  "69 D8" -> "71 -" [label="top"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="top"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="top"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="top"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="top"];
  "63 E8" [shape=box];
  "63 E8" -> "65 D8" [label="top"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="top"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="top"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="top"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="top"];
  "57 D8" [shape=box];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="out"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="out"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="out"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="out"];
  "51 E8" [shape=box];
  "51 E8" -> "53 D8" [label="out"];
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="out"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="out"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="out"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="out"];
  "in" -> "138 !";
  "in" -> "135 -";
  "in" -> "73 !";
  "in" -> "71 -";
  "in" -> "59 E8";
  "in" -> "47 E8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out"];
  "out" -> "204 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "213 >" [shape=trapezium,orientation=270];
  "212 thr" [shape=parallelogram];
  "212 thr" -> "213 >" [label="out"];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec"];
  "out" -> "210 -";
  "in" -> "213 >";
  "in" -> "210 -";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1_3"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1_13"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1_23"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0_7"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0_17"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0_27"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}
// graph for dag "main_terapix_helper_0_0_0" of module "main" in dot format
// DAG "main_terapix_helper_0_0_0": #i=1 #o=3 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "w1_0_27" [shape=circle];
  "w1_0_17" [shape=circle];
  "w1_0_7" [shape=circle];

  // computation vertices
  "116 D8" [shape=box];
  "116 D8" -> "w1_0_7";
  "100 D8" [shape=box];
  "100 D8" -> "w1_0_17";
  "84 D8" [shape=box];
  "84 D8" -> "w1_0_27";
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "main_terapix_helper_0_0_1" of module "main" in dot format
// DAG "main_terapix_helper_0_0_1": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_1" {
  // inputs
  "w1_0_7" [shape=circle];

  // outputs
  "w1_1_3" [shape=circle];

  // computation vertices
  "187 E8" [shape=box];
  "187 E8" -> "w1_1_3";
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "w1_0_7" -> "117 D8";
}
// graph for dag "main_terapix_helper_0_0_2" of module "main" in dot format
// DAG "main_terapix_helper_0_0_2": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_2" {
  // inputs
  "w1_0_17" [shape=circle];

  // outputs
  "w1_1_13" [shape=circle];

  // computation vertices
  "171 E8" [shape=box];
  "171 E8" -> "w1_1_13";
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "w1_0_17" -> "101 D8";
}
// graph for dag "main_terapix_helper_0_0_3" of module "main" in dot format
// DAG "main_terapix_helper_0_0_3": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_3" {
  // inputs
  "w1_0_27" [shape=circle];

  // outputs
  "w1_1_23" [shape=circle];

  // computation vertices
  "155 E8" [shape=box];
  "155 E8" -> "w1_1_23";
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "w1_0_27" -> "85 D8";
}
// graph for dag "main_terapix_helper_0_0_4" of module "main" in dot format
// DAG "main_terapix_helper_0_0_4": #i=3 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_4" {
  // inputs
  "w1_1_13" [shape=circle];
  "w1_1_23" [shape=circle];
  "w1_1_3" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "w1_1_3" -> "188 E8";
  "w1_1_13" -> "172 E8";
  "w1_1_23" -> "156 E8";
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
}
// graph for dag "main_terapix_helper_1_0_0" of module "main" in dot format
// DAG "main_terapix_helper_1_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "main_terapix_helper_2_0_0" of module "main" in dot format
// DAG "main_terapix_helper_2_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_2_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 97 ops and 2 copies, optimized to 36 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 3 output images
 * 10 image operations in dag
 * dag length is 5, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 139
 * - communication: 96
 */
freia_status main_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  const freia_data2d * i0,
  const int32_t * pi4,
  const int32_t * pi5,
  const int32_t * pi6)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // operation 3 parameters
  int16_t p_3[9];
  const int32_t x_3 = 6;
  const int32_t y_3 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][11];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][3];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 3 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 140;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 146;
  int imagelet_3 = 292;
  int imagelet_4 = 438;
  int imagelet_5 = 584;
  int imagelet_6 = 730;
  int imagelet_7 = 876;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_7;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: !(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_3_0;
  mcu_macro[1][0].xmin2 = imagelet_io_3_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_NOT;
  // 1: D8(3) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi4[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_3_0;
  mcu_macro[1][2].xmin1 = imagelet_io_3_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi5[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(3) -> 4
  mcu_macro[0][3].xmin1 = imagelet_io_3_0;
  mcu_macro[1][3].xmin1 = imagelet_io_3_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_4;
  mcu_macro[1][3].xmin2 = imagelet_4;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  for(i=0; i<9; i++)
    p_3[i] = pi6[i];
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(2) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_3_0;
  mcu_macro[1][4].xmin2 = imagelet_io_3_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_1;
  mcu_macro[1][4].xmin3 = x_1;
  mcu_macro[0][4].ymin3 = y_1;
  mcu_macro[1][4].ymin3 = y_1;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(1) -> 2
  mcu_macro[0][5].xmin1 = imagelet_io_1_0;
  mcu_macro[1][5].xmin1 = imagelet_io_1_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_2;
  mcu_macro[1][5].xmin3 = x_2;
  mcu_macro[0][5].ymin3 = y_2;
  mcu_macro[1][5].ymin3 = y_2;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(4) -> 1
  mcu_macro[0][6].xmin1 = imagelet_4;
  mcu_macro[1][6].xmin1 = imagelet_4;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_3;
  mcu_macro[1][6].xmin3 = x_3;
  mcu_macro[0][6].ymin3 = y_3;
  mcu_macro[1][6].ymin3 = y_3;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(3) -> 4
  mcu_macro[0][7].xmin1 = imagelet_io_3_0;
  mcu_macro[1][7].xmin1 = imagelet_io_3_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_4;
  mcu_macro[1][7].xmin2 = imagelet_4;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(2) -> 3
  mcu_macro[0][8].xmin1 = imagelet_io_2_0;
  mcu_macro[1][8].xmin1 = imagelet_io_2_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_3_0;
  mcu_macro[1][8].xmin2 = imagelet_io_3_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_2;
  mcu_macro[1][8].xmin3 = x_2;
  mcu_macro[0][8].ymin3 = y_2;
  mcu_macro[1][8].ymin3 = y_2;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(1) -> 2
  mcu_macro[0][9].xmin1 = imagelet_io_1_0;
  mcu_macro[1][9].xmin1 = imagelet_io_1_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_2_0;
  mcu_macro[1][9].xmin2 = imagelet_io_2_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_3;
  mcu_macro[1][9].xmin3 = x_3;
  mcu_macro[0][9].ymin3 = y_3;
  mcu_macro[1][9].ymin3 = y_3;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 4 -> 1
  mcu_macro[0][10].xmin1 = imagelet_4;
  mcu_macro[1][10].xmin1 = imagelet_4;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_0_27
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 3 is o1 for w1_0_17
  tile_out[0][1].x = imagelet_io_3_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_3_1;
  tile_out[1][1].y = 0;
  // - imagelet 2 is o2 for w1_0_7
  tile_out[0][2].x = imagelet_io_2_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_2_1;
  tile_out[1][2].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 3;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 11;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, o2, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 5, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 60
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 4;
  int image_height = i0->heightWa;
  int max_computed_size = 333;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi3[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for w1_0_7
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_1_3
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 4;
  mcu_instr.borderBottom = 4;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 4;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 5, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 60
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 4;
  int image_height = i0->heightWa;
  int max_computed_size = 333;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi3[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for w1_0_17
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_1_13
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 4;
  mcu_instr.borderBottom = 4;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 5, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 60
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 2;
  int image_height = i0->heightWa;
  int max_computed_size = 337;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi3[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for w1_0_27
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_1_23
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 4;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 1 output image
 * 14 image operations in dag
 * dag length is 9, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 153
 * - communication: 96
 */
freia_status main_terapix_helper_0_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const int32_t * pi4,
  const int32_t * pi5,
  const int32_t * pi6,
  int32_t pi7,
  int32_t * po8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 6 parameters
  int16_t p_6[9];
  const int32_t x_6 = 6;
  const int32_t y_6 = 0;
  // operation 9 parameters
  int16_t p_9[1];
  const int32_t x_9 = 9;
  const int32_t y_9 = 0;
  // operation 13_val initialization
  int16_t p_13_val[1];
  const int32_t x_13_val = 10;
  const int32_t y_13_val = 0;
  // array for reduction 13 extraction
  int32_t red_13[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][14];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 3 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 140;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 146;
  int imagelet_3 = 292;
  int imagelet_4 = 438;
  int imagelet_5 = 584;
  int imagelet_6 = 730;
  int imagelet_7 = 876;

  // memory for reductions
  int reduction_13 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_7;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(2) -> 4
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_4;
  mcu_macro[1][0].xmin2 = imagelet_4;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(1) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(4) -> 1
  mcu_macro[0][2].xmin1 = imagelet_4;
  mcu_macro[1][2].xmin1 = imagelet_4;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 4
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_4;
  mcu_macro[1][3].xmin2 = imagelet_4;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(4) -> 1
  mcu_macro[0][5].xmin1 = imagelet_4;
  mcu_macro[1][5].xmin1 = imagelet_4;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(3) -> 4
  mcu_macro[0][6].xmin1 = imagelet_io_3_0;
  mcu_macro[1][6].xmin1 = imagelet_io_3_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_4;
  mcu_macro[1][6].xmin2 = imagelet_4;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  for(i=0; i<9; i++)
    p_6[i] = pi6[i];
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(4) -> 3
  mcu_macro[0][7].xmin1 = imagelet_4;
  mcu_macro[1][7].xmin1 = imagelet_4;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_3_0;
  mcu_macro[1][7].xmin2 = imagelet_io_3_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_6;
  mcu_macro[1][7].xmin3 = x_6;
  mcu_macro[0][7].ymin3 = y_6;
  mcu_macro[1][7].ymin3 = y_6;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(3) -> 4
  mcu_macro[0][8].xmin1 = imagelet_io_3_0;
  mcu_macro[1][8].xmin1 = imagelet_io_3_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_4;
  mcu_macro[1][8].xmin2 = imagelet_4;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_6;
  mcu_macro[1][8].xmin3 = x_6;
  mcu_macro[0][8].ymin3 = y_6;
  mcu_macro[1][8].ymin3 = y_6;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: <_(2) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_2_0;
  mcu_macro[1][9].xmin1 = imagelet_io_2_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_3_0;
  mcu_macro[1][9].xmin2 = imagelet_io_3_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  // copy of operation 9 parameters
  p_9[0] = pi7;
  gram.xoffset = x_9;
  gram.yoffset = y_9;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_9;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][9].xmin3 = x_9;
  mcu_macro[1][9].xmin3 = x_9;
  mcu_macro[0][9].ymin3 = y_9;
  mcu_macro[1][9].ymin3 = y_9;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_INF_CONST;
  // 10: <(3,1) -> 3
  mcu_macro[0][10].xmin1 = imagelet_io_3_0;
  mcu_macro[1][10].xmin1 = imagelet_io_3_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = imagelet_io_3_0;
  mcu_macro[1][10].xmin3 = imagelet_io_3_1;
  mcu_macro[0][10].ymin3 = 0;
  mcu_macro[1][10].ymin3 = 0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_INF3;
  // 11: <(3,4) -> 4
  mcu_macro[0][11].xmin1 = imagelet_io_3_0;
  mcu_macro[1][11].xmin1 = imagelet_io_3_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_4;
  mcu_macro[1][11].xmin2 = imagelet_4;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = imagelet_4;
  mcu_macro[1][11].xmin3 = imagelet_4;
  mcu_macro[0][11].ymin3 = 0;
  mcu_macro[1][11].ymin3 = 0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_INF3;
  // 12: !(4) -> 1
  mcu_macro[0][12].xmin1 = imagelet_4;
  mcu_macro[1][12].xmin1 = imagelet_4;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_1_0;
  mcu_macro[1][12].xmin2 = imagelet_io_1_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_NOT;
  // 13: vol(1)
  // initializing  13_val
  p_13_val[0] = 0;
  gram.xoffset = x_13_val;
  gram.yoffset = y_13_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_13_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 13_val
  mem_init.xmin1 = reduction_13;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_13
  mcu_macro[0][13].xmin2 = reduction_13;
  mcu_macro[1][13].xmin2 = reduction_13;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = 0;
  mcu_macro[1][13].xmin3 = 0;
  mcu_macro[0][13].ymin3 = 0;
  mcu_macro[1][13].ymin3 = 0;
  mcu_macro[0][13].xmin1 = imagelet_io_1_0;
  mcu_macro[1][13].xmin1 = imagelet_io_1_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for w1_1_13
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w1_1_23
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for w1_1_3
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 14;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1, i2);

  // extract measures
  // get measure vol result from reduction_13
  redter.xres = reduction_13;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_13;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po8 = (int32_t) red_13[0];

  return ret;
}


// dag 1: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 72
 */
freia_status main_terapix_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: <(3,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_INF3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 2: 4 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 12
 * - communication: 72
 */
freia_status main_terapix_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[3];
  const int32_t x_2 = 1;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 256;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: -(1,2) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_2_0;
  mcu_macro[1][0].xmin3 = imagelet_io_2_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SUB3;
  // 1: *_(2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi3;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_MUL_CONST;
  // 2: thr(2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi4;
  p_2[1] = pi5;
  p_2[2] = pi6;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_THRESHOLD;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *out;                                              /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w1_0;                                                  /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w1_1;                                                  /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_3 = 0, *w1_1_23 = 0, *w1_0_7 = 0, *w1_0_17 = 0;

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   w1_0_17 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_7 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_23 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_3 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   
   
   
   
   
   main_terapix_helper_0_0_0(w1_0, w1_0_17, w1_0_7, in, freia_morpho_k8_0, freia_morpho_k8_1, freia_morpho_k8_2);    /*0073*/
   
   
   
   
   main_terapix_helper_0_0_1(w1_1_3, w1_0_7, freia_morpho_k8_2, neighborTransposed_3);                /*0117*/
   
   
   main_terapix_helper_0_0_2(w1_1, w1_0_17, freia_morpho_k8_1, neighborTransposed_4);  /*0170*/
   main_terapix_helper_0_0_3(w1_1_23, w1_0, freia_morpho_k8_0, neighborTransposed_5);  /*0085*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   main_terapix_helper_0_0_4(out, w1_1, w1_1_23, w1_1_3, neighborTransposed_5, neighborTransposed_4, neighborTransposed_3, 255, &volcurrent);      /*0156*/
   
   
   
   
   
   
   
   
   
   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w1_0_7);
   freia_common_destruct_data(w1_0_17);

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w1_1_3);
   freia_common_destruct_data(w1_1_23);
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      main_terapix_helper_1_0_0(out, in, out, freia_morpho_kernel_8c, &volcurrent);    /*0204*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   main_terapix_helper_2_0_0(out, in, out, 2, 90, 255, 1);              /*0210*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *out;                                              /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w1_0;                                                  /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w1_1;                                                  /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_3 = 0, *w1_1_23 = 0, *w1_0_7 = 0, *w1_0_17 = 0;

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   w1_0_17 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_7 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_23 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_3 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   
   
   
   
   
   main_terapix_helper_0_0_0(w1_0, w1_0_17, w1_0_7, in, freia_morpho_k8_0, freia_morpho_k8_1, freia_morpho_k8_2);    /*0073*/
   
   
   
   
   main_terapix_helper_0_0_1(w1_1_3, w1_0_7, freia_morpho_k8_2, neighborTransposed_3);                /*0117*/
   
   
   main_terapix_helper_0_0_2(w1_1, w1_0_17, freia_morpho_k8_1, neighborTransposed_4);  /*0170*/
   main_terapix_helper_0_0_3(w1_1_23, w1_0, freia_morpho_k8_0, neighborTransposed_5);  /*0085*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   main_terapix_helper_0_0_4(out, w1_1, w1_1_23, w1_1_3, neighborTransposed_5, neighborTransposed_4, neighborTransposed_3, 255, &volcurrent);      /*0156*/
   
   
   
   
   
   
   
   
   
   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w1_0_7);
   freia_common_destruct_data(w1_0_17);

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w1_1_3);
   freia_common_destruct_data(w1_1_23);
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      main_terapix_helper_1_0_0(out, in, out, freia_morpho_kernel_8c, &volcurrent);    /*0204*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   main_terapix_helper_2_0_0(out, in, out, 2, 90, 255, 1);              /*0210*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *top, *lin, *rec, *out, *imWork2;                  /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w2_0, *w1_0;                                           /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   top = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0038*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   lin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0040*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0047*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0048*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0049*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0050*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0051*/

   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0053*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0054*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0055*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0056*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0057*/

   freia_aipo_erode_8c(top, in, freia_morpho_kernel_8c);                /*0059*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0060*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0061*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0062*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0063*/

   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0065*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0066*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0067*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0068*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0069*/

   freia_aipo_sub(top, in, top);                                        /*0071*/
   freia_aipo_mul_const(top, top, 2);                                   /*0072*/
   freia_aipo_not(out, in);                                             /*0073*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0076*/

   freia_aipo_set_constant(w2_0, 255);                                  /*0078*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0086*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0088*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0089*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0090*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0091*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0092*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0094*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0102*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0104*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0105*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0106*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0107*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0108*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0110*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0118*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0120*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0121*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0122*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0123*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0124*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0126*/

   freia_aipo_copy(out, w2_0);                                          /*0128*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w2_0);                                    /*0131*/

   freia_aipo_not(out, out);                                            /*0133*/

   freia_aipo_sub(lin, in, out);                                        /*0135*/
   freia_aipo_mul_const(lin, lin, 2);                                   /*0136*/

   freia_aipo_not(out, in);                                             /*0138*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/

   freia_aipo_set_constant(w2_1, 255);                                  /*0144*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0148*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0149*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0150*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0151*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0152*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0160*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0164*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0165*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0166*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0167*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0168*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0180*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0181*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0182*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0183*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0184*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/

   freia_aipo_copy(out, w2_1);                                          /*0194*/

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/

   freia_aipo_not(out, out);                                            /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   freia_aipo_sup(imWork2, out, in);                                    /*0213*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(top);                                     /*0221*/
   freia_common_destruct_data(lin);                                     /*0222*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/
   freia_common_destruct_data(imWork2);                                 /*0225*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=97 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "194 =" [shape=circle];
  "194 =" -> "199 !" [label="out"];
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "194 =" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1"];
  "184 D8" [shape=box];
  "184 D8" -> "186 E8" [label="w1_1"];
  "183 D8" [shape=box];
  "183 D8" -> "184 D8" [label="w1_1"];
  "182 D8" [shape=box];
  "182 D8" -> "183 D8" [label="w1_1"];
  "181 D8" [shape=box];
  "181 D8" -> "182 D8" [label="w1_1"];
  "180 D8" [shape=box];
  "180 D8" -> "181 D8" [label="w1_1"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1"];
  "168 D8" [shape=box];
  "168 D8" -> "170 E8" [label="w1_1"];
  "167 D8" [shape=box];
  "167 D8" -> "168 D8" [label="w1_1"];
  "166 D8" [shape=box];
  "166 D8" -> "167 D8" [label="w1_1"];
  "165 D8" [shape=box];
  "165 D8" -> "166 D8" [label="w1_1"];
  "164 D8" [shape=box];
  "164 D8" -> "165 D8" [label="w1_1"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "176 <" [label="w2_1"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <" [label="w1_1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1"];
  "152 D8" [shape=box];
  "152 D8" -> "154 E8" [label="w1_1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="w1_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="w1_1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="w1_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="w1_1"];
  "144 C" [shape=trapezium,orientation=270];
  "144 C" -> "160 <" [label="w2_1"];
  "138 !" [shape=trapezium,orientation=270];
  "138 !" -> "180 D8" [label="out"];
  "138 !" -> "164 D8" [label="out"];
  "138 !" -> "148 D8" [label="out"];
  "136 *_" [shape=trapezium,orientation=270];
  "135 -" [shape=trapezium,orientation=270];
  "135 -" -> "136 *_" [label="lin"];
  "133 !" [shape=trapezium,orientation=270];
  "133 !" -> "135 -" [label="out"];
  "128 =" [shape=circle];
  "128 =" -> "133 !" [label="out"];
  "126 <" [shape=trapezium,orientation=270];
  "126 <" -> "128 =" [label="w2_0"];
  "124 E8" [shape=box];
  "124 E8" -> "126 <" [label="w1_0"];
  "123 E8" [shape=box];
  "123 E8" -> "124 E8" [label="w1_0"];
  "122 E8" [shape=box];
  "122 E8" -> "123 E8" [label="w1_0"];
  "121 E8" [shape=box];
  "121 E8" -> "122 E8" [label="w1_0"];
  "120 E8" [shape=box];
  "120 E8" -> "121 E8" [label="w1_0"];
  "118 D8" [shape=box];
  "118 D8" -> "120 E8" [label="w1_0"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0"];
  "110 <" [shape=trapezium,orientation=270];
  "110 <" -> "126 <" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "110 <" [label="w1_0"];
  "107 E8" [shape=box];
  "107 E8" -> "108 E8" [label="w1_0"];
  "106 E8" [shape=box];
  "106 E8" -> "107 E8" [label="w1_0"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="w1_0"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_0"];
  "102 D8" [shape=box];
  "102 D8" -> "104 E8" [label="w1_0"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0"];
  "94 <" [shape=trapezium,orientation=270];
  "94 <" -> "110 <" [label="w2_0"];
  "92 E8" [shape=box];
  "92 E8" -> "94 <" [label="w1_0"];
  "91 E8" [shape=box];
  "91 E8" -> "92 E8" [label="w1_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 E8" [label="w1_0"];
  "89 E8" [shape=box];
  "89 E8" -> "90 E8" [label="w1_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 E8" [label="w1_0"];
  "86 D8" [shape=box];
  "86 D8" -> "88 E8" [label="w1_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0"];
  "78 C" [shape=trapezium,orientation=270];
  "78 C" -> "94 <" [label="w2_0"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out"];
  "73 !" -> "98 D8" [label="out"];
  "73 !" -> "82 D8" [label="out"];
  "72 *_" [shape=trapezium,orientation=270];
  "71 -" [shape=trapezium,orientation=270];
  "71 -" -> "72 *_" [label="top"];
  "69 D8" [shape=box];
  "69 D8" -> "71 -" [label="top"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="top"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="top"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="top"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="top"];
  "63 E8" [shape=box];
  "63 E8" -> "65 D8" [label="top"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="top"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="top"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="top"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="top"];
  "57 D8" [shape=box];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="out"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="out"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="out"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="out"];
  "51 E8" [shape=box];
  "51 E8" -> "53 D8" [label="out"];
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="out"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="out"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="out"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="out"];
  "in" -> "138 !";
  "in" -> "135 -";
  "in" -> "73 !";
  "in" -> "71 -";
  "in" -> "59 E8";
  "in" -> "47 E8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out"];
  "out" -> "204 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "213 >" [shape=trapezium,orientation=270];
  "212 thr" [shape=parallelogram];
  "212 thr" -> "213 >" [label="out"];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec"];
  "out" -> "210 -";
  "in" -> "213 >";
  "in" -> "210 -";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1_3"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1_13"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1_23"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0_7"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0_17"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0_27"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}
// graph for dag "main_opencl_helper_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1_3"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1_13"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1_23"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0_7"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0_17"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0_27"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "main_opencl_helper_0_0_1" of module "main" in dot format
// DAG "main_opencl_helper_0_0_1": #i=1 #o=3 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_1" {
  // inputs
  "out_5" [shape=circle];

  // outputs
  "w1_0_29" [shape=circle];
  "w1_0_19" [shape=circle];
  "w1_0_9" [shape=circle];

  // computation vertices
  "114 D8" [shape=box];
  "114 D8" -> "w1_0_9";
  "98 D8" [shape=box];
  "98 D8" -> "w1_0_19";
  "82 D8" [shape=box];
  "82 D8" -> "w1_0_29";
  "out_5" -> "114 D8";
  "out_5" -> "98 D8";
  "out_5" -> "82 D8";
}
// graph for dag "main_opencl_helper_0_0_3" of module "main" in dot format
// DAG "main_opencl_helper_0_0_3": #i=3 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_3" {
  // inputs
  "w1_1" [shape=circle];
  "w1_1_10" [shape=circle];
  "w1_1_20" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "w1_1" -> "192 <";
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "w1_1_10" -> "176 <";
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "w1_1_20" -> "160 <_";
}
// graph for dag "main_opencl_helper_1_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "main_opencl_helper_1_0_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "main_opencl_helper_2_0" of module "main" in dot format
// DAG "main_opencl_helper_2_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_2_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}
// graph for dag "main_opencl_helper_2_0_0" of module "main" in dot format
// DAG "main_opencl_helper_2_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_2_0_0" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}
// graph for dag "main_opencl_helper_D8_146" of module "main" in dot format
// DAG "main_opencl_helper_D8_146": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_146" {
  // inputs
  "w1_0_16" [shape=circle];

  // outputs
  "w1_0_15" [shape=circle];

  // computation vertices
  "102 D8" [shape=box];
  "102 D8" -> "w1_0_15";
  "w1_0_16" -> "102 D8";
}
// graph for dag "main_opencl_helper_D8_56" of module "main" in dot format
// DAG "main_opencl_helper_D8_56": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_56" {
  // inputs
  "w1_0_26" [shape=circle];

  // outputs
  "w1_0_25" [shape=circle];

  // computation vertices
  "86 D8" [shape=box];
  "86 D8" -> "w1_0_25";
  "w1_0_26" -> "86 D8";
}
// graph for dag "main_opencl_helper_D8_84" of module "main" in dot format
// DAG "main_opencl_helper_D8_84": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_84" {
  // inputs
  "w1_0_6" [shape=circle];

  // outputs
  "w1_0_5" [shape=circle];

  // computation vertices
  "118 D8" [shape=box];
  "118 D8" -> "w1_0_5";
  "w1_0_6" -> "118 D8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 97 ops and 2 copies, optimized to 36 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_0_0_1
static cl_kernel main_opencl_helper_0_0_1_kernel[2];

// compile kernels for main_opencl_helper_0_0_1
static freia_status main_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_1
  const char * main_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_1\n"
    "KERNEL void main_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * o2,\n"
    "  int ofs_o2,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t82 = PIXEL_MIN;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t98 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL t114 = PIXEL_MIN;\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "\n"
    "    // pixel computations\n"
    "    t82 = PIXEL_SUP(t82, (is_W)? PIXEL_MIN: in0W);\n"
    "    t82 = PIXEL_SUP(t82, in0);\n"
    "    t82 = PIXEL_SUP(t82, (is_E)? PIXEL_MIN: in0E);\n"
    "    t98 = PIXEL_SUP(t98, (is_N)? PIXEL_MIN: in0N);\n"
    "    t98 = PIXEL_SUP(t98, in0);\n"
    "    t98 = PIXEL_SUP(t98, (is_S)? PIXEL_MIN: in0S);\n"
    "    t114 = PIXEL_SUP(t114, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t114 = PIXEL_SUP(t114, in0);\n"
    "    t114 = PIXEL_SUP(t114, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t82;\n"
    "    p1[i] = t98;\n"
    "    p2[i] = t114;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_1_source, "main_opencl_helper_0_0_1", "-DPIXEL8", &main_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_1_source, "main_opencl_helper_0_0_1", "-DPIXEL16", &main_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_1
freia_status main_opencl_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_1_kernel[bpp];

  // call kernel main_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 3, 1, 0, 0, o0, o1, o2, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_56
static cl_kernel main_opencl_helper_D8_56_kernel[2];

// compile kernels for main_opencl_helper_D8_56
static freia_status main_opencl_helper_D8_56_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_56
  const char * main_opencl_helper_D8_56_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_56\n"
    "KERNEL void main_opencl_helper_D8_56(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t86 = PIXEL_MIN;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t86 = PIXEL_SUP(t86, (is_W)? PIXEL_MIN: in0W);\n"
    "    t86 = PIXEL_SUP(t86, in0);\n"
    "    t86 = PIXEL_SUP(t86, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t86;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_56_source, "main_opencl_helper_D8_56", "-DPIXEL8", &main_opencl_helper_D8_56_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_56_source, "main_opencl_helper_D8_56", "-DPIXEL16", &main_opencl_helper_D8_56_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_56
freia_status main_opencl_helper_D8_56(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_56_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_56_kernel[bpp];

  // call kernel main_opencl_helper_D8_56
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_146
static cl_kernel main_opencl_helper_D8_146_kernel[2];

// compile kernels for main_opencl_helper_D8_146
static freia_status main_opencl_helper_D8_146_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_146
  const char * main_opencl_helper_D8_146_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_146\n"
    "KERNEL void main_opencl_helper_D8_146(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t102 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t102 = PIXEL_SUP(t102, (is_N)? PIXEL_MIN: in0N);\n"
    "    t102 = PIXEL_SUP(t102, in0);\n"
    "    t102 = PIXEL_SUP(t102, (is_S)? PIXEL_MIN: in0S);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t102;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_146_source, "main_opencl_helper_D8_146", "-DPIXEL8", &main_opencl_helper_D8_146_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_146_source, "main_opencl_helper_D8_146", "-DPIXEL16", &main_opencl_helper_D8_146_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_146
freia_status main_opencl_helper_D8_146(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_146_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_146_kernel[bpp];

  // call kernel main_opencl_helper_D8_146
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_84
static cl_kernel main_opencl_helper_D8_84_kernel[2];

// compile kernels for main_opencl_helper_D8_84
static freia_status main_opencl_helper_D8_84_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_84
  const char * main_opencl_helper_D8_84_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_84\n"
    "KERNEL void main_opencl_helper_D8_84(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t118 = PIXEL_MIN;\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "\n"
    "    // pixel computations\n"
    "    t118 = PIXEL_SUP(t118, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t118 = PIXEL_SUP(t118, in0);\n"
    "    t118 = PIXEL_SUP(t118, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t118;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_84_source, "main_opencl_helper_D8_84", "-DPIXEL8", &main_opencl_helper_D8_84_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_84_source, "main_opencl_helper_D8_84", "-DPIXEL16", &main_opencl_helper_D8_84_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_84
freia_status main_opencl_helper_D8_84(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_84_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_84_kernel[bpp];

  // call kernel main_opencl_helper_D8_84
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_0_0_3
static cl_kernel main_opencl_helper_0_0_3_kernel[2];

// compile kernels for main_opencl_helper_0_0_3
static freia_status main_opencl_helper_0_0_3_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_3
  const char * main_opencl_helper_0_0_3_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_3\n"
    "KERNEL void main_opencl_helper_0_0_3(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t160 = PIXEL_INF(in2, c0);\n"
    "    PIXEL t176 = PIXEL_INF(t160, in1);\n"
    "    PIXEL t192 = PIXEL_INF(t176, in0);\n"
    "    PIXEL t199 = PIXEL_NOT(t192);\n"
    "    PIXEL_VOLUME(red201, t199);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t199;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_3_source, "main_opencl_helper_0_0_3", "-DPIXEL8", &main_opencl_helper_0_0_3_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_3_source, "main_opencl_helper_0_0_3", "-DPIXEL16", &main_opencl_helper_0_0_3_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_3
freia_status main_opencl_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t c0,
  int32_t * po4)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_3_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_3_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_0_0_3
  err |= freia_op_call_kernel(kernel, 1, 3, 1, 1, o0, i0, i1, i2, c0, &redres);

  // return reduction results
  *po4 = redres.volume;

  return err;
}

// dag 1: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_1_0_0
static cl_kernel main_opencl_helper_1_0_0_kernel[2];

// compile kernels for main_opencl_helper_1_0_0
static freia_status main_opencl_helper_1_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_1_0_0
  const char * main_opencl_helper_1_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_1_0_0\n"
    "KERNEL void main_opencl_helper_1_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t204 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t204 = PIXEL_SUP(t204, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t204 = PIXEL_SUP(t204, (is_N)? PIXEL_MIN: in1N);\n"
    "    t204 = PIXEL_SUP(t204, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t204 = PIXEL_SUP(t204, (is_W)? PIXEL_MIN: in1W);\n"
    "    t204 = PIXEL_SUP(t204, in1);\n"
    "    t204 = PIXEL_SUP(t204, (is_E)? PIXEL_MIN: in1E);\n"
    "    t204 = PIXEL_SUP(t204, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t204 = PIXEL_SUP(t204, (is_S)? PIXEL_MIN: in1S);\n"
    "    t204 = PIXEL_SUP(t204, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    PIXEL t205 = PIXEL_INF(t204, in0);\n"
    "    PIXEL_VOLUME(red206, t205);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t205;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL8", &main_opencl_helper_1_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL16", &main_opencl_helper_1_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_1_0_0
freia_status main_opencl_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_1_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_1_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_1_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.volume;

  return err;
}

// dag 2: 4 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_2_0_0
static cl_kernel main_opencl_helper_2_0_0_kernel[2];

// compile kernels for main_opencl_helper_2_0_0
static freia_status main_opencl_helper_2_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_2_0_0
  const char * main_opencl_helper_2_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_2_0_0\n"
    "KERNEL void main_opencl_helper_2_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t210 = PIXEL_SUB(in0, in1);\n"
    "    PIXEL t211 = PIXEL_MUL(t210, c0);\n"
    "    PIXEL t212 = PIXEL_THRESHOLD(t211, c1, c2, c3);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t212;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_2_0_0_source, "main_opencl_helper_2_0_0", "-DPIXEL8", &main_opencl_helper_2_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_2_0_0_source, "main_opencl_helper_2_0_0", "-DPIXEL16", &main_opencl_helper_2_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_2_0_0
freia_status main_opencl_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_2_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_2_0_0_kernel[bpp];

  // call kernel main_opencl_helper_2_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 4, 0, o0, i0, i1, c0, c1, c2, c3);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl function main_opencl_helper_0_0_1
KERNEL void main_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * o2,
  int ofs_o2,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t82 = PIXEL_MIN;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t98 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL t114 = PIXEL_MIN;
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];

    // pixel computations
    t82 = PIXEL_SUP(t82, (is_W)? PIXEL_MIN: in0W);
    t82 = PIXEL_SUP(t82, in0);
    t82 = PIXEL_SUP(t82, (is_E)? PIXEL_MIN: in0E);
    t98 = PIXEL_SUP(t98, (is_N)? PIXEL_MIN: in0N);
    t98 = PIXEL_SUP(t98, in0);
    t98 = PIXEL_SUP(t98, (is_S)? PIXEL_MIN: in0S);
    t114 = PIXEL_SUP(t114, (is_N|is_E)? PIXEL_MIN: in0NE);
    t114 = PIXEL_SUP(t114, in0);
    t114 = PIXEL_SUP(t114, (is_S|is_W)? PIXEL_MIN: in0SW);

    // set output pixels
    p0[i] = t82;
    p1[i] = t98;
    p2[i] = t114;
  }
}

// opencl function main_opencl_helper_D8_56
KERNEL void main_opencl_helper_D8_56(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t86 = PIXEL_MIN;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t86 = PIXEL_SUP(t86, (is_W)? PIXEL_MIN: in0W);
    t86 = PIXEL_SUP(t86, in0);
    t86 = PIXEL_SUP(t86, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t86;
  }
}

// opencl function main_opencl_helper_D8_146
KERNEL void main_opencl_helper_D8_146(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t102 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];

    // pixel computations
    t102 = PIXEL_SUP(t102, (is_N)? PIXEL_MIN: in0N);
    t102 = PIXEL_SUP(t102, in0);
    t102 = PIXEL_SUP(t102, (is_S)? PIXEL_MIN: in0S);

    // set output pixels
    p0[i] = t102;
  }
}

// opencl function main_opencl_helper_D8_84
KERNEL void main_opencl_helper_D8_84(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t118 = PIXEL_MIN;
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0 = j0[i];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];

    // pixel computations
    t118 = PIXEL_SUP(t118, (is_N|is_E)? PIXEL_MIN: in0NE);
    t118 = PIXEL_SUP(t118, in0);
    t118 = PIXEL_SUP(t118, (is_S|is_W)? PIXEL_MIN: in0SW);

    // set output pixels
    p0[i] = t118;
  }
}

// opencl function main_opencl_helper_0_0_3
KERNEL void main_opencl_helper_0_0_3(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in2 = j2[i];
    PIXEL in1 = j1[i];
    PIXEL in0 = j0[i];

    // pixel computations
    PIXEL t160 = PIXEL_INF(in2, c0);
    PIXEL t176 = PIXEL_INF(t160, in1);
    PIXEL t192 = PIXEL_INF(t176, in0);
    PIXEL t199 = PIXEL_NOT(t192);
    PIXEL_VOLUME(red201, t199);

    // set output pixels
    p0[i] = t199;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 1

// opencl function main_opencl_helper_1_0_0
KERNEL void main_opencl_helper_1_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t204 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t204 = PIXEL_SUP(t204, (is_N|is_W)? PIXEL_MIN: in1NW);
    t204 = PIXEL_SUP(t204, (is_N)? PIXEL_MIN: in1N);
    t204 = PIXEL_SUP(t204, (is_N|is_E)? PIXEL_MIN: in1NE);
    t204 = PIXEL_SUP(t204, (is_W)? PIXEL_MIN: in1W);
    t204 = PIXEL_SUP(t204, in1);
    t204 = PIXEL_SUP(t204, (is_E)? PIXEL_MIN: in1E);
    t204 = PIXEL_SUP(t204, (is_S|is_W)? PIXEL_MIN: in1SW);
    t204 = PIXEL_SUP(t204, (is_S)? PIXEL_MIN: in1S);
    t204 = PIXEL_SUP(t204, (is_S|is_E)? PIXEL_MIN: in1SE);
    PIXEL t205 = PIXEL_INF(t204, in0);
    PIXEL_VOLUME(red206, t205);

    // set output pixels
    p0[i] = t205;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 2

// opencl function main_opencl_helper_2_0_0
KERNEL void main_opencl_helper_2_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];

    // pixel computations
    PIXEL t210 = PIXEL_SUB(in0, in1);
    PIXEL t211 = PIXEL_MUL(t210, c0);
    PIXEL t212 = PIXEL_THRESHOLD(t211, c1, c2, c3);

    // set output pixels
    p0[i] = t212;
  }
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *out;                                              /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w1_0;                                                  /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w1_1;                                                  /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_10 = 0, *w1_1_20 = 0, *w1_0_5 = 0, *w1_0_9 = 0, *w1_0_15 = 0, *w1_0_19 = 0, *w1_0_25 = 0;

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   w1_0_25 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_19 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_15 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_9 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_5 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_20 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_10 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   
   
   
   
   
   freia_aipo_not(out, in);                                             /*0073*/

   main_opencl_helper_0_0_1(w1_0, w1_0_19, w1_0_9, out);                /*0082*/
   
   
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0083*/
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0084*/
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0085*/
   main_opencl_helper_D8_56(w1_0_25, w1_0);                             /*0086*/
   main_opencl_helper_D8_146(w1_0, w1_0_19);                            /*0099*/
   main_opencl_helper_D8_146(w1_0, w1_0);                               /*0100*/
   main_opencl_helper_D8_146(w1_0, w1_0);                               /*0101*/
   main_opencl_helper_D8_146(w1_0_15, w1_0);                            /*0102*/
   main_opencl_helper_D8_84(w1_0, w1_0_9);                              /*0115*/
   main_opencl_helper_D8_84(w1_0, w1_0);                                /*0116*/
   main_opencl_helper_D8_84(w1_0, w1_0);                                /*0117*/
   main_opencl_helper_D8_84(w1_0_5, w1_0);                              /*0118*/

   freia_aipo_erode_8c(w1_1, w1_0_25, neighborTransposed_5);            /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1_20, w1_1, neighborTransposed_5);            /*0158*/

   freia_aipo_erode_8c(w1_1, w1_0_15, neighborTransposed_4);            /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1_10, w1_1, neighborTransposed_4);            /*0174*/

   freia_aipo_erode_8c(w1_1, w1_0_5, neighborTransposed_3);             /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/
   
   
   
   main_opencl_helper_0_0_3(out, w1_1, w1_1_10, w1_1_20, 255, &volcurrent);            /*0192*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w1_0_5);
   freia_common_destruct_data(w1_0_9);
   freia_common_destruct_data(w1_0_15);
   freia_common_destruct_data(w1_0_19);
   freia_common_destruct_data(w1_0_25);

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w1_1_10);
   freia_common_destruct_data(w1_1_20);
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      main_opencl_helper_1_0_0(out, in, out, &volcurrent);              /*0204*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   main_opencl_helper_2_0_0(out, in, out, 2, 90, 255, 1);               /*0210*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *out;                                              /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w1_0;                                                  /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w1_1;                                                  /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_10 = 0, *w1_1_20 = 0, *w1_0_5 = 0, *w1_0_9 = 0, *w1_0_15 = 0, *w1_0_19 = 0, *w1_0_25 = 0;

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   w1_0_25 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_19 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_15 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_9 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_0_5 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_20 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   w1_1_10 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   
   
   
   
   
   freia_aipo_not(out, in);                                             /*0073*/

   main_opencl_helper_0_0_1(w1_0, w1_0_19, w1_0_9, out);                /*0082*/
   
   
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0083*/
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0084*/
   main_opencl_helper_D8_56(w1_0, w1_0);                                /*0085*/
   main_opencl_helper_D8_56(w1_0_25, w1_0);                             /*0086*/
   main_opencl_helper_D8_146(w1_0, w1_0_19);                            /*0099*/
   main_opencl_helper_D8_146(w1_0, w1_0);                               /*0100*/
   main_opencl_helper_D8_146(w1_0, w1_0);                               /*0101*/
   main_opencl_helper_D8_146(w1_0_15, w1_0);                            /*0102*/
   main_opencl_helper_D8_84(w1_0, w1_0_9);                              /*0115*/
   main_opencl_helper_D8_84(w1_0, w1_0);                                /*0116*/
   main_opencl_helper_D8_84(w1_0, w1_0);                                /*0117*/
   main_opencl_helper_D8_84(w1_0_5, w1_0);                              /*0118*/

   freia_aipo_erode_8c(w1_1, w1_0_25, neighborTransposed_5);            /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1_20, w1_1, neighborTransposed_5);            /*0158*/

   freia_aipo_erode_8c(w1_1, w1_0_15, neighborTransposed_4);            /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1_10, w1_1, neighborTransposed_4);            /*0174*/

   freia_aipo_erode_8c(w1_1, w1_0_5, neighborTransposed_3);             /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/
   
   
   
   main_opencl_helper_0_0_3(out, w1_1, w1_1_10, w1_1_20, 255, &volcurrent);            /*0192*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w1_0_5);
   freia_common_destruct_data(w1_0_9);
   freia_common_destruct_data(w1_0_15);
   freia_common_destruct_data(w1_0_19);
   freia_common_destruct_data(w1_0_25);

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w1_1_10);
   freia_common_destruct_data(w1_1_20);
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      main_opencl_helper_1_0_0(out, in, out, &volcurrent);              /*0204*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   main_opencl_helper_2_0_0(out, in, out, 2, 90, 255, 1);               /*0210*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}
#
# SIGMAC
#
#
# compile generated retina
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *top, *lin, *rec, *out, *imWork2;                  /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   freia_data2d *w2_0, *w1_0;                                           /*0023*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   freia_data2d *w2_1, *w1_1;                                           /*0027*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   top = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0038*/
   rec = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0039*/
   lin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0040*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   freia_aipo_erode_8c(out, in, freia_morpho_kernel_8c);                /*0047*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0048*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0049*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0050*/
   freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);               /*0051*/

   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0053*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0054*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0055*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0056*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0057*/

   freia_aipo_erode_8c(top, in, freia_morpho_kernel_8c);                /*0059*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0060*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0061*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0062*/
   freia_aipo_erode_8c(top, top, freia_morpho_kernel_8c);               /*0063*/

   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0065*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0066*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0067*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0068*/
   freia_aipo_dilate_8c(top, top, freia_morpho_kernel_8c);              /*0069*/

   freia_aipo_sub(top, in, top);                                        /*0071*/
   freia_aipo_mul_const(top, top, 2);                                   /*0072*/
   freia_aipo_not(out, in);                                             /*0073*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0075*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0076*/

   freia_aipo_set_constant(w2_0, 255);                                  /*0078*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0082*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0083*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0084*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0085*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_0);                 /*0086*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0088*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0089*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0090*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0091*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_2);               /*0092*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0094*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0098*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0099*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0100*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0101*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_1);                 /*0102*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0104*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0105*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0106*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0107*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_1);               /*0108*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0110*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0114*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0115*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0116*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0117*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_k8_2);                 /*0118*/

   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0120*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0121*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0122*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0123*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0124*/

   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0126*/

   freia_aipo_copy(out, w2_0);                                          /*0128*/

   freia_common_destruct_data(w1_0);                                    /*0130*/
   freia_common_destruct_data(w2_0);                                    /*0131*/

   freia_aipo_not(out, out);                                            /*0133*/

   freia_aipo_sub(lin, in, out);                                        /*0135*/
   freia_aipo_mul_const(lin, lin, 2);                                   /*0136*/

   freia_aipo_not(out, in);                                             /*0138*/
   
   // temporary images
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0141*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0142*/

   freia_aipo_set_constant(w2_1, 255);                                  /*0144*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0148*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0149*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0150*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0151*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_0);                 /*0152*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0154*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0155*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0156*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0157*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_5);               /*0158*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0160*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0164*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0165*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0166*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0167*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_1);                 /*0168*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0170*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0171*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0172*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0173*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_4);               /*0174*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0176*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/

   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0180*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0181*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0182*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0183*/
   freia_aipo_dilate_8c(w1_1, w1_1, freia_morpho_k8_2);                 /*0184*/

   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0186*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0187*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0188*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0189*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_3);               /*0190*/

   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0192*/

   freia_aipo_copy(out, w2_1);                                          /*0194*/

   freia_common_destruct_data(w1_1);                                    /*0196*/
   freia_common_destruct_data(w2_1);                                    /*0197*/

   freia_aipo_not(out, out);                                            /*0199*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0201*/
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);           /*0204*/
      freia_aipo_inf(out, out, in);                                     /*0205*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_aipo_sub(rec, in, out);                                        /*0210*/
   freia_aipo_mul_const(rec, rec, 2);                                   /*0211*/
   freia_aipo_threshold(out, rec, 90, 255, 1);                          /*0212*/
   freia_aipo_sup(imWork2, out, in);                                    /*0213*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(top);                                     /*0221*/
   freia_common_destruct_data(lin);                                     /*0222*/
   freia_common_destruct_data(rec);                                     /*0223*/
   freia_common_destruct_data(out);                                     /*0224*/
   freia_common_destruct_data(imWork2);                                 /*0225*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=97 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "194 =" [shape=circle];
  "194 =" -> "199 !" [label="out"];
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "194 =" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1"];
  "184 D8" [shape=box];
  "184 D8" -> "186 E8" [label="w1_1"];
  "183 D8" [shape=box];
  "183 D8" -> "184 D8" [label="w1_1"];
  "182 D8" [shape=box];
  "182 D8" -> "183 D8" [label="w1_1"];
  "181 D8" [shape=box];
  "181 D8" -> "182 D8" [label="w1_1"];
  "180 D8" [shape=box];
  "180 D8" -> "181 D8" [label="w1_1"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1"];
  "168 D8" [shape=box];
  "168 D8" -> "170 E8" [label="w1_1"];
  "167 D8" [shape=box];
  "167 D8" -> "168 D8" [label="w1_1"];
  "166 D8" [shape=box];
  "166 D8" -> "167 D8" [label="w1_1"];
  "165 D8" [shape=box];
  "165 D8" -> "166 D8" [label="w1_1"];
  "164 D8" [shape=box];
  "164 D8" -> "165 D8" [label="w1_1"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "176 <" [label="w2_1"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <" [label="w1_1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1"];
  "152 D8" [shape=box];
  "152 D8" -> "154 E8" [label="w1_1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="w1_1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="w1_1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="w1_1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="w1_1"];
  "144 C" [shape=trapezium,orientation=270];
  "144 C" -> "160 <" [label="w2_1"];
  "138 !" [shape=trapezium,orientation=270];
  "138 !" -> "180 D8" [label="out"];
  "138 !" -> "164 D8" [label="out"];
  "138 !" -> "148 D8" [label="out"];
  "136 *_" [shape=trapezium,orientation=270];
  "135 -" [shape=trapezium,orientation=270];
  "135 -" -> "136 *_" [label="lin"];
  "133 !" [shape=trapezium,orientation=270];
  "133 !" -> "135 -" [label="out"];
  "128 =" [shape=circle];
  "128 =" -> "133 !" [label="out"];
  "126 <" [shape=trapezium,orientation=270];
  "126 <" -> "128 =" [label="w2_0"];
  "124 E8" [shape=box];
  "124 E8" -> "126 <" [label="w1_0"];
  "123 E8" [shape=box];
  "123 E8" -> "124 E8" [label="w1_0"];
  "122 E8" [shape=box];
  "122 E8" -> "123 E8" [label="w1_0"];
  "121 E8" [shape=box];
  "121 E8" -> "122 E8" [label="w1_0"];
  "120 E8" [shape=box];
  "120 E8" -> "121 E8" [label="w1_0"];
  "118 D8" [shape=box];
  "118 D8" -> "120 E8" [label="w1_0"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0"];
  "110 <" [shape=trapezium,orientation=270];
  "110 <" -> "126 <" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "110 <" [label="w1_0"];
  "107 E8" [shape=box];
  "107 E8" -> "108 E8" [label="w1_0"];
  "106 E8" [shape=box];
  "106 E8" -> "107 E8" [label="w1_0"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="w1_0"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="w1_0"];
  "102 D8" [shape=box];
  "102 D8" -> "104 E8" [label="w1_0"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0"];
  "94 <" [shape=trapezium,orientation=270];
  "94 <" -> "110 <" [label="w2_0"];
  "92 E8" [shape=box];
  "92 E8" -> "94 <" [label="w1_0"];
  "91 E8" [shape=box];
  "91 E8" -> "92 E8" [label="w1_0"];
  "90 E8" [shape=box];
  "90 E8" -> "91 E8" [label="w1_0"];
  "89 E8" [shape=box];
  "89 E8" -> "90 E8" [label="w1_0"];
  "88 E8" [shape=box];
  "88 E8" -> "89 E8" [label="w1_0"];
  "86 D8" [shape=box];
  "86 D8" -> "88 E8" [label="w1_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0"];
  "78 C" [shape=trapezium,orientation=270];
  "78 C" -> "94 <" [label="w2_0"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out"];
  "73 !" -> "98 D8" [label="out"];
  "73 !" -> "82 D8" [label="out"];
  "72 *_" [shape=trapezium,orientation=270];
  "71 -" [shape=trapezium,orientation=270];
  "71 -" -> "72 *_" [label="top"];
  "69 D8" [shape=box];
  "69 D8" -> "71 -" [label="top"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="top"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="top"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="top"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="top"];
  "63 E8" [shape=box];
  "63 E8" -> "65 D8" [label="top"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="top"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="top"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="top"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="top"];
  "57 D8" [shape=box];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="out"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="out"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="out"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="out"];
  "51 E8" [shape=box];
  "51 E8" -> "53 D8" [label="out"];
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="out"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="out"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="out"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="out"];
  "in" -> "138 !";
  "in" -> "135 -";
  "in" -> "73 !";
  "in" -> "71 -";
  "in" -> "59 E8";
  "in" -> "47 E8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out"];
  "out" -> "204 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "213 >" [shape=trapezium,orientation=270];
  "212 thr" [shape=parallelogram];
  "212 thr" -> "213 >" [label="out"];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec"];
  "out" -> "210 -";
  "in" -> "213 >";
  "in" -> "210 -";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=36 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "201 vol" [shape=diamond];
  "199 !" [shape=trapezium,orientation=270];
  "199 !" -> "201 vol" [label="out"];
  "199 !" -> "out";
  "192 <" [shape=trapezium,orientation=270];
  "192 <" -> "199 !" [label="w2_1"];
  "190 E8" [shape=box];
  "190 E8" -> "192 <" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="w1_1_1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="w1_1_2"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="w1_1_3"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="w1_1_4"];
  "176 <" [shape=trapezium,orientation=270];
  "176 <" -> "192 <" [label="w2_1_1"];
  "174 E8" [shape=box];
  "174 E8" -> "176 <" [label="w1_1_10"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="w1_1_11"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="w1_1_12"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="w1_1_13"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="w1_1_14"];
  "160 <_" [shape=trapezium,orientation=270];
  "160 <_" -> "176 <" [label="w2_1_2"];
  "158 E8" [shape=box];
  "158 E8" -> "160 <_" [label="w1_1_20"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="w1_1_21"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="w1_1_22"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="w1_1_23"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="w1_1_24"];
  "118 D8" [shape=box];
  "118 D8" -> "186 E8" [label="w1_0_5"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="w1_0_6"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="w1_0_7"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="w1_0_8"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="w1_0_9"];
  "102 D8" [shape=box];
  "102 D8" -> "170 E8" [label="w1_0_15"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="w1_0_16"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="w1_0_17"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="w1_0_18"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="w1_0_19"];
  "86 D8" [shape=box];
  "86 D8" -> "154 E8" [label="w1_0_25"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="w1_0_26"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="w1_0_27"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="w1_0_28"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="w1_0_29"];
  "73 !" [shape=trapezium,orientation=270];
  "73 !" -> "114 D8" [label="out_5"];
  "73 !" -> "98 D8" [label="out_5"];
  "73 !" -> "82 D8" [label="out_5"];
  "in" -> "73 !";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "206 vol" [shape=diamond];
  "205 <" [shape=trapezium,orientation=270];
  "205 <" -> "206 vol" [label="out"];
  "205 <" -> "out'";
  "in" -> "205 <";
  "204 D8" [shape=box];
  "204 D8" -> "205 <" [label="out_16"];
  "out" -> "204 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "in" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "212 thr" [shape=parallelogram];
  "212 thr" -> "out'";
  "211 *_" [shape=trapezium,orientation=270];
  "211 *_" -> "212 thr" [label="rec"];
  "210 -" [shape=trapezium,orientation=270];
  "210 -" -> "211 *_" [label="rec_1"];
  "out" -> "210 -";
  "in" -> "210 -";
}

! updated function for OPENCL

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *in, *out;                                              /*0019*/
   int32_t neighborTransposed_0[9];                                     /*0020*/
   int32_t neighborTransposed_1[9];                                     /*0021*/
   int32_t neighborTransposed_2[9];                                     /*0022*/
   int32_t neighborTransposed_3[9];                                     /*0024*/
   int32_t neighborTransposed_4[9];                                     /*0025*/
   int32_t neighborTransposed_5[9];                                     /*0026*/
   register int32_t volprevious;                                        /*0028*/
   int32_t volcurrent;                                                  /*0029*/

   freia_initialize(argc, argv);                                        /*0031*/
   freia_common_open_input(&fdin, 0);                                   /*0032*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0033*/
   
   // there should be a freia_initialize()?
   // for opencl freia_op_init_opencl(0xffffffff, 2, false, fdin.framewidth, fdin.frameheight);
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0037*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0041*/
   
   // input
   freia_common_rx_image(in, &fdin);                                    /*0045*/

   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_0);          /*0080*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0096*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_2);          /*0112*/

   transposeNeighbor(neighborTransposed_5, freia_morpho_k8_0);          /*0146*/

   transposeNeighbor(neighborTransposed_4, freia_morpho_k8_1);          /*0162*/

   transposeNeighbor(neighborTransposed_3, freia_morpho_k8_2);          /*0178*/
   
   
   // temporary images
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   freia_mppa_launch(0, 1, 1, 0, 1, in, out, &volcurrent);              /*0201*/
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   do {                                                                 /*0208*/
      volprevious = volcurrent;                                         /*0203*/
      freia_mppa_launch(1, 2, 1, 0, 1, in, out, out, &volcurrent);      /*0206*/
   }
   while (volcurrent!=volprevious);                                     /*0208*/

   freia_mppa_launch(2, 2, 1, 0, 0, in, out, out);                      /*0212*/
   
   // output
   freia_common_tx_image(in, &fdout);                                   /*0216*/
   freia_common_tx_image(out, &fdout);                                  /*0217*/
   
   // cleanup
   freia_common_destruct_data(in);                                      /*0220*/
   freia_common_destruct_data(out);                                     /*0224*/

   freia_common_close_input(&fdin);                                     /*0227*/
   freia_common_close_output(&fdout);                                   /*0228*/

   freia_shutdown();                                                    /*0230*/
   return 0;                                                            /*0231*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_0 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_0_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_INFC(pi0, 255);
  int16_t po1 = PIXEL_INF(po0, pi1);
  int16_t po2 = PIXEL_INF(po1, pi2);
  int16_t po3 = PIXEL_NOT(po2);
  outp[0][i] = po3;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi1_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi1_0, int16_t)


#define pi3_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi3_0, int16_t)


#define pi4_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\

CUSTOM_MORPHO_AGENT(pi4_0, int16_t)


#define pi5_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\

CUSTOM_MORPHO_AGENT(pi5_0, int16_t)


#define pi6_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi6_0, int16_t)

subgraph
main_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi1[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi2 = 255;
    int16_t pi3[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi4[9] = { 0, 0, 1, 0, 1, 0, 1, 0, 0 };
    int16_t pi5[9] = { 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    int16_t pi6[9] = { 0, 0, 0, 1, 1, 1, 0, 0, 0 };

    // instantiations...
    agent dup1 = new rep(3, width);
    agent not1 = new img_invert_16(width);
    agent dil14 = new dilate_pi6_0(width, height);
    agent dil13 = new dilate_pi6_0(width, height);
    agent dil12 = new dilate_pi6_0(width, height);
    agent dil11 = new dilate_pi6_0(width, height);
    agent dil10 = new dilate_pi6_0(width, height);
    agent dil9 = new dilate_pi5_0(width, height);
    agent dil8 = new dilate_pi5_0(width, height);
    agent dil7 = new dilate_pi5_0(width, height);
    agent dil6 = new dilate_pi5_0(width, height);
    agent dil5 = new dilate_pi5_0(width, height);
    agent dil4 = new dilate_pi4_0(width, height);
    agent dil3 = new dilate_pi4_0(width, height);
    agent dil2 = new dilate_pi4_0(width, height);
    agent dil1 = new dilate_pi4_0(width, height);
    agent dil0 = new dilate_pi4_0(width, height);
    agent ero14 = new erode_pi3_0(width, height);
    agent ero13 = new erode_pi3_0(width, height);
    agent ero12 = new erode_pi3_0(width, height);
    agent ero11 = new erode_pi3_0(width, height);
    agent ero10 = new erode_pi3_0(width, height);
    agent ero9 = new erode_pi1_0(width, height);
    agent ero8 = new erode_pi1_0(width, height);
    agent ero7 = new erode_pi1_0(width, height);
    agent ero6 = new erode_pi1_0(width, height);
    agent ero5 = new erode_pi1_0(width, height);
    agent ero4 = new erode_pi0_0(width, height);
    agent ero3 = new erode_pi0_0(width, height);
    agent ero2 = new erode_pi0_0(width, height);
    agent ero1 = new erode_pi0_0(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent dup0 = new rep(2, width);
    agent cpd0 = new agent_compound_0_0(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[0] /* in */, not1.input);
    connect (not1.output, dup1.input);
    connect (dup1.output[2], dil4.input);
    connect (dup1.output[1], dil9.input);
    connect (dup1.output[0], dil14.input);
    connect (dil14.output, dil13.input);
    connect (dil13.output, dil12.input);
    connect (dil12.output, dil11.input);
    connect (dil11.output, dil10.input);
    connect (dil10.output, ero14.input);
    connect (dil9.output, dil8.input);
    connect (dil8.output, dil7.input);
    connect (dil7.output, dil6.input);
    connect (dil6.output, dil5.input);
    connect (dil5.output, ero9.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, ero4.input);
    connect (ero14.output, ero13.input);
    connect (ero13.output, ero12.input);
    connect (ero12.output, ero11.input);
    connect (ero11.output, ero10.input);
    connect (ero10.output, cpd0.input[0]);
    connect (ero9.output, ero8.input);
    connect (ero8.output, ero7.input);
    connect (ero7.output, ero6.input);
    connect (ero6.output, ero5.input);
    connect (ero5.output, cpd0.input[1]);
    connect (ero4.output, ero3.input);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, cpd0.input[2]);
    connect (cpd0.output[0], dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* out */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_1 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_1_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_1(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_1, int16_t)

subgraph
main_sigmac_helper_1_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dil0 = new dilate_pi0_1(width, height);
    agent dup0 = new rep(2, width);
    agent inf0 = new img_inf_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* out */, dil0.input);
    connect (dil0.output, inf0.input[0]);
    connect (strin.output[0] /* in */, inf0.input[1]);
    connect (inf0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* out */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_2 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_2_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_2_0, int16_t, 2, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t po0 = PIXEL_SUB(pi1, pi0);
  int16_t po1 = PIXEL_MULCST(po0, 2);
  int16_t po2 = PIXEL_THR(po1, 90, 255, 1);
  outp[0][i] = po2;
);

subgraph
main_sigmac_helper_2_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0 = 90;
    int16_t pi1 = 255;
    int16_t pi2 = 1;
    int16_t pi3 = 2;

    // instantiations...
    agent cpd0 = new agent_compound_2_0(width);

    // connections...
    connect (strin.output[0] /* in */, cpd0.input[1]);
    connect (strin.output[1] /* out */, cpd0.input[0]);
    connect (cpd0.output[0], strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 22;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

    new main_sigmac_helper_1_0
    (pipes[14], pipes[15],
     width, height, sizeMax,
     pipes[16], pipes[17]);

    new main_sigmac_helper_2_0
    (pipes[18], pipes[19],
     width, height, sizeMax,
     pipes[20], pipes[21]);

  }
}
#
# FREIA COMPILATION DONE
#


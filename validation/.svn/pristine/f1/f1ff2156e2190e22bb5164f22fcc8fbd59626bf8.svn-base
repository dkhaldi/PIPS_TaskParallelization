// OMP style
int main(int argc, char *argv[])
{
   //PIPS generated variable
   int size;
   //PIPS generated variable
   int a[size], b[size];
   //PIPS generated variable
   int i, bi, j, bj;
   //PIPS generated variable
   char * __func__ = "main";
#pragma omp parallel default(shared) 
   {
#pragma omp single
      {
         scanf("%d", &size);
      }
#pragma omp single
      {
         scanf("%d", &bi);
      }
#pragma omp single
      {
#pragma omp task
         {
            scanf("%d", &bj);
         }
#pragma omp task
         {
            for(i = 0; i <= bi-1; i += 1)
               a[i] = i;
         }
#pragma omp task
         {
            for(i = bi; i <= size-1; i += 1)
               a[i] = i;
         }
      }
#pragma omp single
      {
#pragma omp task
         {
            0<=bi&&bi<size&&0<=bj&&bj<size?(void) 0:__assert_fail("0<=bi && bi<size && 0<=bj && bj<size", "../communications01.c", 19, __func__);
         }
#pragma omp task
         {
            for(j = 0; j <= bj-1; j += 1)
               b[j] = 2*a[j];
         }
#pragma omp task
         {
            for(j = bj; j <= size-1; j += 1)
               b[j] = 2*a[j];
         }
      }
#pragma omp single
      {
         for(j = 0; j <= size-1; j += 1)
            printf("%d\n", b[j]);
      }
   }
   return 0;
}

void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1)
         for(v = 0; v <= Nv-1; v += 1)
            PP = PP+(ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im);
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1)
         for(v = 0; v <= Nv-1; v += 1)
            PP = PP+(ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im);
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1)
         for(v = 0; v <= Nv-1; v += 1)
            PP = PP+(ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im);
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;
   //PIPS generated variable
   float F_0, F_1, F_2;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1)
         for(v = 0; v <= Nv-1; v += 1) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
         }
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;
   //PIPS generated variable
   float F_0, F_1, F_2;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         for(v = 0; v <= 4*(Nv/4)-1; v += 4) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
            F_0 = ptrin[th][rg][v+1].re*ptrin[th][rg][v+1].re;
            F_1 = ptrin[th][rg][v+1].im*ptrin[th][rg][v+1].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
            F_0 = ptrin[th][rg][v+2].re*ptrin[th][rg][v+2].re;
            F_1 = ptrin[th][rg][v+2].im*ptrin[th][rg][v+2].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
            F_0 = ptrin[th][rg][v+3].re*ptrin[th][rg][v+3].re;
            F_1 = ptrin[th][rg][v+3].im*ptrin[th][rg][v+3].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
         }
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            F_2 = F_0+F_1;
            PP = PP+F_2;
         }
      }
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;
   //PIPS generated variable
   float F_0, F_1, F_2;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         for(v = 0; v <= 4*(Nv/4)-1; v += 4) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            PP = PP+F_1;
            PP = PP+F_0;
            F_0 = ptrin[th][rg][v+1].re*ptrin[th][rg][v+1].re;
            F_1 = ptrin[th][rg][v+1].im*ptrin[th][rg][v+1].im;
            PP = PP+F_1;
            PP = PP+F_0;
            F_0 = ptrin[th][rg][v+2].re*ptrin[th][rg][v+2].re;
            F_1 = ptrin[th][rg][v+2].im*ptrin[th][rg][v+2].im;
            PP = PP+F_1;
            PP = PP+F_0;
            F_0 = ptrin[th][rg][v+3].re*ptrin[th][rg][v+3].re;
            F_1 = ptrin[th][rg][v+3].im*ptrin[th][rg][v+3].im;
            PP = PP+F_1;
            PP = PP+F_0;
         }
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            PP = PP+F_1;
            PP = PP+F_0;
         }
      }
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   float PP;
   int th, v, rg;
   //PIPS generated variable
   float RED0[8], RED1[2];
   //PIPS generated variable
   float F_0, F_1, F_2;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         RED0[0] = 0.;
         RED0[1] = 0.;
         RED0[2] = 0.;
         RED0[3] = 0.;
         RED0[4] = 0.;
         RED0[5] = 0.;
         RED0[6] = 0.;
         RED0[7] = 0.;
         for(v = 0; v <= 4*(Nv/4)-1; v += 4) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            RED0[0] = RED0[0]+F_1;
            RED0[1] = RED0[1]+F_0;
            F_0 = ptrin[th][rg][1+v].re*ptrin[th][rg][1+v].re;
            F_1 = ptrin[th][rg][1+v].im*ptrin[th][rg][1+v].im;
            RED0[2] = RED0[2]+F_1;
            RED0[3] = RED0[3]+F_0;
            F_0 = ptrin[th][rg][2+v].re*ptrin[th][rg][2+v].re;
            F_1 = ptrin[th][rg][2+v].im*ptrin[th][rg][2+v].im;
            RED0[4] = RED0[4]+F_1;
            RED0[5] = RED0[5]+F_0;
            F_0 = ptrin[th][rg][3+v].re*ptrin[th][rg][3+v].re;
            F_1 = ptrin[th][rg][3+v].im*ptrin[th][rg][3+v].im;
            RED0[6] = RED0[6]+F_1;
            RED0[7] = RED0[7]+F_0;
         }
         PP = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+PP)))))));
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th][rg][v].re*ptrin[th][rg][v].re;
            F_1 = ptrin[th][rg][v].im*ptrin[th][rg][v].im;
            PP = PP+F_1;
            PP = PP+F_0;
         }
      }
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{
   int v, rg;
   //PIPS generated variable
   float RED0[8];
   //PIPS generated variable
   float F_0, F_1, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03, PP0;
   //PIPS generated variable
   int th0, v0;

   for(th0 = 0; th0 <= Nth-1; th0 += 1) {
      PP0 = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         RED0[0] = 0.;
         RED0[1] = 0.;
         RED0[2] = 0.;
         RED0[3] = 0.;
         RED0[4] = 0.;
         RED0[5] = 0.;
         RED0[6] = 0.;
         RED0[7] = 0.;
         for(v0 = 0; v0 <= 4*(Nv/4)-1; v0 += 4) {
            F_00 = ptrin[th0][rg][v0].re*ptrin[th0][rg][v0].re;
            F_10 = ptrin[th0][rg][v0].im*ptrin[th0][rg][v0].im;
            RED0[0] = RED0[0]+F_10;
            RED0[1] = RED0[1]+F_00;
            F_01 = ptrin[th0][rg][1+v0].re*ptrin[th0][rg][1+v0].re;
            F_11 = ptrin[th0][rg][1+v0].im*ptrin[th0][rg][1+v0].im;
            RED0[2] = RED0[2]+F_11;
            RED0[3] = RED0[3]+F_01;
            F_02 = ptrin[th0][rg][2+v0].re*ptrin[th0][rg][2+v0].re;
            F_12 = ptrin[th0][rg][2+v0].im*ptrin[th0][rg][2+v0].im;
            RED0[4] = RED0[4]+F_12;
            RED0[5] = RED0[5]+F_02;
            F_03 = ptrin[th0][rg][3+v0].re*ptrin[th0][rg][3+v0].re;
            F_13 = ptrin[th0][rg][3+v0].im*ptrin[th0][rg][3+v0].im;
            RED0[6] = RED0[6]+F_13;
            RED0[7] = RED0[7]+F_03;
         }
         PP0 = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+PP0)))))));
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th0][rg][v].re*ptrin[th0][rg][v].re;
            F_1 = ptrin[th0][rg][v].im*ptrin[th0][rg][v].im;
            PP0 = PP0+F_1;
            PP0 = PP0+F_0;
         }
      }
      Pow[th0].re = (float) (PP0/((float) (Nv*Nrg)));
      Pow[th0].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{
   int v, rg;
   //PIPS generated variable
   float RED0[8];
   //PIPS generated variable
   float F_0, F_1, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03, PP0;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS:SAC generated v4sf vector(s)
   v4sf vec00_0, vec20_0;
   //PIPS generated variable
   int th0, v0;

   for(th0 = 0; th0 <= Nth-1; th0 += 1) {
      PP0 = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         RED0[0] = 0.;
         RED0[1] = 0.;
         RED0[2] = 0.;
         RED0[3] = 0.;
         RED0[4] = 0.;
         RED0[5] = 0.;
         RED0[6] = 0.;
         RED0[7] = 0.;
         for(v0 = 0; v0 <= 4*(Nv/4)-1; v0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70;
            SIMD_LOAD_V4SF(vec10, &ptrin[th0][rg][v0].re);
            SIMD_MULPS(vec00, vec10, vec10);
            SIMD_STORE_V4SF(vec00, &pdata0[0]);
            SIMD_LOAD_V4SF(vec30, &ptrin[th0][rg][2+v0].re);
            SIMD_MULPS(vec20, vec30, vec30);
            SIMD_STORE_V4SF(vec20, &pdata1[0]);
            SIMD_LOAD_V4SF(vec40, &RED0[0]);
            SIMD_SHUFFLE_V4SF(vec00_0, vec00, 1, 0, 3, 2);
            SIMD_ADDPS(vec40, vec00_0, vec40);
            SIMD_STORE_V4SF(vec40, &RED0[0]);
            SIMD_LOAD_V4SF(vec60, &RED0[4]);
            SIMD_SHUFFLE_V4SF(vec20_0, vec20, 1, 0, 3, 2);
            SIMD_ADDPS(vec60, vec20_0, vec60);
            SIMD_STORE_V4SF(vec60, &RED0[4]);
         }
         PP0 = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(PP0+RED0[0])))))));
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th0][rg][v].re*ptrin[th0][rg][v].re;
            F_1 = ptrin[th0][rg][v].im*ptrin[th0][rg][v].im;
            PP0 = PP0+F_1;
            PP0 = PP0+F_0;
         }
      }
      Pow[th0].re = (float) (PP0/((float) (Nv*Nrg)));
      Pow[th0].im = 0.;
   }
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{
   int v, rg;
   //PIPS generated variable
   float RED0[8];
   //PIPS generated variable
   float F_0, F_1, F_10, F_11, F_12, F_13, F_00, F_01, F_02, F_03, PP0;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0};
   //PIPS:SAC generated v4sf vector(s)
   v4sf vec00_0, vec20_0;
   //PIPS generated variable
   int th0, v0;
   //PIPS generated variable
   v4sf vec00_1, vec10_0, vec20_1, vec30_0, vec40_0, vec50_0, vec60_0, vec70_0;

   for(th0 = 0; th0 <= Nth-1; th0 += 1) {
      PP0 = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         RED0[0] = 0.;
         RED0[1] = 0.;
         RED0[2] = 0.;
         RED0[3] = 0.;
         RED0[4] = 0.;
         RED0[5] = 0.;
         RED0[6] = 0.;
         RED0[7] = 0.;
         for(v0 = 0; v0 <= 4*(Nv/4)-1; v0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_V4SF(vec10_0, &ptrin[th0][rg][v0].re);
            SIMD_MULPS(vec00_1, vec10_0, vec10_0);
            SIMD_STORE_V4SF(vec00_1, &pdata0[0]);
            SIMD_LOAD_V4SF(vec30_0, &ptrin[th0][rg][2+v0].re);
            SIMD_LOAD_V4SF(vec60_0, &RED0[4]);
            SIMD_LOAD_V4SF(vec40_0, &RED0[0]);
            SIMD_MULPS(vec20_1, vec30_0, vec30_0);
            SIMD_SHUFFLE_V4SF(vec00_0, vec00_1, 1, 0, 3, 2);
            SIMD_ADDPS(vec40_0, vec00_0, vec40_0);
            SIMD_SHUFFLE_V4SF(vec20_0, vec20_1, 1, 0, 3, 2);
            SIMD_ADDPS(vec60_0, vec20_0, vec60_0);
            SIMD_STORE_V4SF(vec60_0, &RED0[4]);
            SIMD_STORE_V4SF(vec40_0, &RED0[0]);
         }
         PP0 = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(PP0+RED0[0])))))));
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th0][rg][v].re*ptrin[th0][rg][v].re;
            F_1 = ptrin[th0][rg][v].im*ptrin[th0][rg][v].im;
            PP0 = PP0+F_1;
            PP0 = PP0+F_0;
         }
      }
      Pow[th0].re = (float) (PP0/((float) (Nv*Nrg)));
      Pow[th0].im = 0.;
   }
   SIMD_STORE_V4SF(vec20_1, &pdata1[0]);
}
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{
   int v, rg;
   //PIPS generated variable
   float RED0[8];
   //PIPS generated variable
   float F_0, F_1, PP0;
   //PIPS:SAC generated v4sf vector(s)
   v4sf vec00_0, vec20_0;
   //PIPS generated variable
   int th0, v0;
   //PIPS generated variable
   v4sf vec00_1, vec10_0, vec20_1, vec30_0, vec40_0, vec60_0;

   for(th0 = 0; th0 <= Nth-1; th0 += 1) {
      PP0 = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1) {
         RED0[0] = 0.;
         RED0[1] = 0.;
         RED0[2] = 0.;
         RED0[3] = 0.;
         RED0[4] = 0.;
         RED0[5] = 0.;
         RED0[6] = 0.;
         RED0[7] = 0.;
         for(v0 = 0; v0 <= 4*(Nv/4)-1; v0 += 4) {
            //PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_V4SF(vec10_0, &ptrin[th0][rg][v0].re);
            SIMD_MULPS(vec00_1, vec10_0, vec10_0);
            SIMD_LOAD_V4SF(vec30_0, &ptrin[th0][rg][2+v0].re);
            SIMD_LOAD_V4SF(vec60_0, &RED0[4]);
            SIMD_LOAD_V4SF(vec40_0, &RED0[0]);
            SIMD_MULPS(vec20_1, vec30_0, vec30_0);
            SIMD_SHUFFLE_V4SF(vec00_0, vec00_1, 1, 0, 3, 2);
            SIMD_ADDPS(vec40_0, vec00_0, vec40_0);
            SIMD_SHUFFLE_V4SF(vec20_0, vec20_1, 1, 0, 3, 2);
            SIMD_ADDPS(vec60_0, vec20_0, vec60_0);
            SIMD_STORE_V4SF(vec60_0, &RED0[4]);
            SIMD_STORE_V4SF(vec40_0, &RED0[0]);
         }
         PP0 = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(PP0+RED0[0])))))));
         for(v = 4*(Nv/4); v <= Nv-1; v += 1) {
            F_0 = ptrin[th0][rg][v].re*ptrin[th0][rg][v].re;
            F_1 = ptrin[th0][rg][v].im*ptrin[th0][rg][v].im;
            PP0 = PP0+F_1;
            PP0 = PP0+F_0;
         }
      }
      Pow[th0].re = (float) (PP0/((float) (Nv*Nrg)));
      Pow[th0].im = 0.;
   }
}

#
# AIPO
#
#
# compile generated freia_dup_16
#

! initial function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   freia_aipo_global_max(i, &max1);                                     /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_16" in dot format
// DAG "dag_0": #i=1 #o=0 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max" [shape=diamond];
  "7 max!" [shape=diamond];
  "i" -> "8 max";
  "i" -> "7 max!";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_16" in dot format
// DAG "dag_cleaned_0": #i=1 #o=0 #c=1 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "8 ?=";
  "i" -> "7 max!";
}

! updated function for AIPO

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# SPOC
#

! initial function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   freia_aipo_global_max(i, &max1);                                     /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_16" in dot format
// DAG "dag_0": #i=1 #o=0 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max" [shape=diamond];
  "7 max!" [shape=diamond];
  "i" -> "8 max";
  "i" -> "7 max!";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_16" in dot format
// DAG "dag_cleaned_0": #i=1 #o=0 #c=1 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "8 ?=";
  "i" -> "7 max!";
}
// graph for dag "freia_dup_16_spoc_helper_0_0" of module "freia_dup_16" in dot format
// DAG "freia_dup_16_spoc_helper_0_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dup_16_spoc_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "7 max!";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 2 ops and 0 copies, optimized to 1 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_dup_16
freia_status freia_dup_16_spoc_helper_0_0_0(
  const freia_data2d * i0,
  int32_t * po0,
  uint32_t * po1,
  uint32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // no output image

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 7 global_max_coord stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;
  *po1 = (uint32_t) reduc.measure[0][0].max_coord_x;
  *po2 = (uint32_t) reduc.measure[0][0].max_coord_y;

  return ret;
}

! updated function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_16_spoc_helper_0_0_0(i, &max2, &x, &y);                    /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! cleaned up function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_16_spoc_helper_0_0_0(i, &max2, &x, &y);                    /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# TERAPIX
#

! initial function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   freia_aipo_global_max(i, &max1);                                     /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_16" in dot format
// DAG "dag_0": #i=1 #o=0 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max" [shape=diamond];
  "7 max!" [shape=diamond];
  "i" -> "8 max";
  "i" -> "7 max!";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_16" in dot format
// DAG "dag_cleaned_0": #i=1 #o=0 #c=1 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "8 ?=";
  "i" -> "7 max!";
}
// graph for dag "freia_dup_16_terapix_helper_0_0_0" of module "freia_dup_16" in dot format
// DAG "freia_dup_16_terapix_helper_0_0_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dup_16_terapix_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "7 max!";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 2 ops and 0 copies, optimized to 1 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_dup_16
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 0 output image
 * 1 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 3
 * - communication: 24
 */
freia_status freia_dup_16_terapix_helper_0_0_0(
  const freia_data2d * i0,
  int32_t * po1,
  uint32_t * po2,
  uint32_t * po3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // operation 0_loc initialization
  int16_t p_0_loc[1];
  const int32_t x_0_loc = 1;
  const int32_t y_0_loc = 0;
  // array for reduction 0 extraction
  int32_t red_0[3];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_in[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 509;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 509;

  // memory for reductions
  int reduction_0 = 1019;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: max!(1)
  // initializing  0_val
  p_0_val[0] = INT16_MIN;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = reduction_0;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // initializing  0_loc
  p_0_loc[0] = 0;
  gram.xoffset = x_0_loc;
  gram.yoffset = y_0_loc;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_loc;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_loc
  mem_init.xmin1 = reduction_0+1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 4;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max! at reduction_0
  mcu_macro[0][0].xmin2 = reduction_0;
  mcu_macro[1][0].xmin2 = reduction_0;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX_COORD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX_COORD;

  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // no output

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 0;
  mcu_instr.out0 = NULL;
  mcu_instr.out1 = NULL;

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, i0);

  // extract measures
  // get measure max! result from reduction_0
  redter.xres = reduction_0;
  redter.yres = 0;
  redter.width = 5;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_0;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX_COORD;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameters
  *po1 = (int32_t) red_0[0];
  *po2 = (uint32_t) red_0[1];
  *po3 = (uint32_t) red_0[2];

  return ret;
}


! updated function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_16_terapix_helper_0_0_0(i, &max2, &x, &y);                 /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! cleaned up function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_dup_16_terapix_helper_0_0_0(i, &max2, &x, &y);                 /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# OPENCL
#

! initial function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   freia_aipo_global_max(i, &max1);                                     /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_16" in dot format
// DAG "dag_0": #i=1 #o=0 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max" [shape=diamond];
  "7 max!" [shape=diamond];
  "i" -> "8 max";
  "i" -> "7 max!";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_16" in dot format
// DAG "dag_cleaned_0": #i=1 #o=0 #c=1 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "8 ?=";
  "i" -> "7 max!";
}
// graph for dag "freia_dup_16_opencl_helper_0_0" of module "freia_dup_16" in dot format
// DAG "freia_dup_16_opencl_helper_0_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_dup_16_opencl_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "7 max!";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 2 ops and 0 copies, optimized to 1 ops and 0+0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_dup_16

// opencl for dag 0

! updated function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! cleaned up function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}
#
# SIGMAC
#
#
# compile generated freia_dup_16
#

! initial function

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_aipo_global_max_coord(i, &max2, &x, &y);                       /*0007*/
   freia_aipo_global_max(i, &max1);                                     /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! graphs

// graph for dag "dag_0" of module "freia_dup_16" in dot format
// DAG "dag_0": #i=1 #o=0 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "8 max" [shape=diamond];
  "7 max!" [shape=diamond];
  "i" -> "8 max";
  "i" -> "7 max!";
}
// graph for dag "dag_cleaned_0" of module "freia_dup_16" in dot format
// DAG "dag_cleaned_0": #i=1 #o=0 #c=1 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs

  // computation vertices
  "7 max!" [shape=diamond];
  "i" -> "8 ?=";
  "i" -> "7 max!";
}

! updated function for OPENCL

int freia_dup_16(freia_data2d *i)
{
   int max1, max2, x, y;                                                /*0005*/
   // same measure performed twice
   freia_mppa_launch(0, 1, 0, 0, 3, i, &max2, &x, &y);                  /*0007*/
   max1 = max2;                                                         /*0008*/
   return max1+max2+x+y;                                                /*0009*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_dup_16 fname=freia_dup_16_sigmac_helper_0 split=0


/*#####################################################################*/
/*############## freia_dup_16_sigmac_helper_0_0 Subgraph ##############*/
/*#####################################################################*/

subgraph
freia_dup_16_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 3);
    agent jo = new Join<int32_t>(3, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...

    // instantiations...
    agent maxc0 = new img_global_max_coord(width, height);

    // connections...
    connect (strin.output[0] /* i */, maxc0.input);
    connect (maxc0.output[2], jo.input[2]);
    connect (maxc0.output[1], jo.input[1]);
    connect (maxc0.output[0], jo.input[0]);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_dup_16_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


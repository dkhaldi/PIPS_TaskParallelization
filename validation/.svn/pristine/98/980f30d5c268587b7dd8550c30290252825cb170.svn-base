!
! File PLOT_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE PLOT_HOST(NCYCLE, FTITLE)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "PLOT_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, 
     &NCYCLE, I, J
      REAL*4 TOP, BOTTOM, SCALE
      CHARACTER IMAGE(1:M, 1:N)
      CHARACTER*16 FTITLE


      WRITE (2) FTITLE, NCYCLE

      CALL RANGE_HOST(TOP, BOTTOM)
      SCALE = TOP-BOTTOM

! loop 801
C
C * INSERT A SCALE OF COLORS ALONG THE SIDE OF THE IMAGE
C
! loop 802-803
! collecting distributed variable IMAGE
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC STRING BUFUPK
            DO ALPHA2 = 100*PSI2-99, MIN(200, 100*PSI2)
               DO ALPHA1 = 160*PSI1-159, MIN(320, 160*PSI1)
                  LALPHA1 = ALPHA1-160*PSI1+160
                  LALPHA2 = ALPHA2-100*PSI2+100
                  BUF INDEX = BUF INDEX+1
                  IMAGE(ALPHA1,ALPHA2) = HPFC STRING BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect

C
C * WRITE THE IMAGE TO THE OUTPUT FILE [804]
C
      DO J = 1, N
         WRITE (2) (IMAGE(I,J), I = 1, M)
      ENDDO
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
C
C
      END
!
! That is all for PLOT_host.f
!
!
! File PLOT_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for PLOT
!
!
! initializing array FIELD, number 17
!
      NODIMA(17) = 2
      ATOT(17) = 17

      MSTATUS(17) = 17
      LIVEMAPPING(17) = .TRUE.

      RANGEA(17, 1, 1) = 1
      RANGEA(17, 1, 2) = 320
      RANGEA(17, 1, 3) = 320
!
      RANGEA(17, 1, 4) = 2
      RANGEA(17, 1, 5) = 160
      RANGEA(17, 1, 6) = 1
      RANGEA(17, 1, 7) = -1

      RANGEA(17, 2, 1) = 1
      RANGEA(17, 2, 2) = 200
      RANGEA(17, 2, 3) = 200
!
      RANGEA(17, 2, 4) = 2
      RANGEA(17, 2, 5) = 100
      RANGEA(17, 2, 6) = 1
      RANGEA(17, 2, 7) = -1

      ALIGN(17, 1, 1) = 1
      ALIGN(17, 1, 2) = 1
      ALIGN(17, 1, 3) = 0
      ALIGN(17, 2, 1) = 2
      ALIGN(17, 2, 2) = 1
      ALIGN(17, 2, 3) = 0
!
! initializing array IMAGE, number 16
!
      NODIMA(16) = 2
      ATOT(16) = 17

      RANGEA(16, 1, 1) = 1
      RANGEA(16, 1, 2) = 320
      RANGEA(16, 1, 3) = 320
!
      RANGEA(16, 1, 4) = 2
      RANGEA(16, 1, 5) = 160
      RANGEA(16, 1, 6) = 1
      RANGEA(16, 1, 7) = -1

      RANGEA(16, 2, 1) = 1
      RANGEA(16, 2, 2) = 200
      RANGEA(16, 2, 3) = 200
!
      RANGEA(16, 2, 4) = 2
      RANGEA(16, 2, 5) = 100
      RANGEA(16, 2, 6) = 1
      RANGEA(16, 2, 7) = -1

      ALIGN(16, 1, 1) = 1
      ALIGN(16, 1, 2) = 1
      ALIGN(16, 1, 3) = 0
      ALIGN(16, 2, 1) = 2
      ALIGN(16, 2, 2) = 1
      ALIGN(16, 2, 3) = 0
!
! That is all for PLOT_init.h
!
!
! File PLOT_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE PLOT_NODE(FIELD, NCYCLE, FTITLE, PLOT FIELD LO1, 
     &PLOT FIELD UP1, PLOT FIELD LO2, PLOT FIELD UP2)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "PLOT_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_0, I_1
     &, I_10, I_11, I_12, I_13, I_14, I_15, I_2, I_3, I_4, I_5, I_6, 
     &I_7, I_8, I_9, PLOT FIELD UP2, PLOT FIELD LO2, PLOT FIELD UP1, 
     &PLOT FIELD LO1, NCYCLE, I, J, ICOLOR
      REAL*4 FIELD(PLOT FIELD LO1:PLOT FIELD UP1, PLOT FIELD LO2:
     &PLOT FIELD UP2), TOP, BOTTOM, SCALE
      CHARACTER IMAGE(1:160, 1:100), LOOKUP(1:16)
      CHARACTER*16 FTITLE
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 1, 20, 16, 1)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 20, 169, 16, 2)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, M, 16, 1)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, N, 16, 2)
! all livenesss for FIELD
      LIVE MAPPING(17) = .FALSE.
! direct remapping for FIELD
      LIVE MAPPING(17) = .TRUE.
      MSTATUS(17) = 17



! begin remappings
      MSTATUS(17) = 17
! liveness management
! end of liveness management
! end remappings
      CALL RANGE_NODE(FIELD, TOP, BOTTOM, PLOT FIELD LO1, 
     &PLOT FIELD UP1, PLOT FIELD LO2, PLOT FIELD UP2)
! begin remappings
      MSTATUS(17) = 17
! liveness management
! end of liveness management
! end remappings
      SCALE = TOP-BOTTOM

! loop 801
      DO I_0 = I_1, I_2
         DO I_4 = I_5, I_6
            ICOLOR = (FIELD(I_4,I_0)-BOTTOM)/SCALE*16.0
            IMAGE(I_4,I_0) = LOOKUP(ICOLOR+1)
         ENDDO
      ENDDO
C
C * INSERT A SCALE OF COLORS ALONG THE SIDE OF THE IMAGE
C
! loop 802-803
      IF (MY POS(1,3).EQ.1) THEN
         I = I_11
         DO I_8 = I_9, I_10
            I = I+1
            ICOLOR = (I-10)/10
            DO I_12 = I_13, I_14
               IMAGE(I_12,I_8) = LOOKUP(ICOLOR)
            ENDDO
         ENDDO
      ENDIF
! collecting distributed variable IMAGE
      PSI1 = MY POS(1,3)
      PSI2 = MY POS(2,3)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = 100*PSI2-99, MIN(200, 100*PSI2)
         DO ALPHA1 = 160*PSI1-159, MIN(320, 160*PSI1)
            LALPHA1 = ALPHA1-160*PSI1+160
            LALPHA2 = ALPHA2-100*PSI2+100
            BUF INDEX = BUF INDEX+1
            HPFC STRING BUFF(BUF INDEX) = IMAGE(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC STRING BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
C
C
      END
!
! That is all for PLOT_node.f
!
!
! File PLOT_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for PLOT
!
      integer 
     $    PLOT IMAGE LO1,
     $    PLOT IMAGE UP1
      parameter(PLOT IMAGE LO1 = 1)
      parameter(PLOT IMAGE UP1 = 160)
      integer 
     $    PLOT IMAGE LO2,
     $    PLOT IMAGE UP2
      parameter(PLOT IMAGE LO2 = 1)
      parameter(PLOT IMAGE UP2 = 100)
!
! That is all for PLOT_parameters.h
!
!
! File RANGE_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE RANGE_HOST(TOP, BOTTOM)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "RANGE_parameters.h"
      REAL*4 F_1, F_0, TOP, BOTTOM

      CALL HPFC CMPOWNERS(15, 1, 1, 0, 0, 0, 0, 0)
      CALL HPFC RCVFR HNBCAST S(HPFC REAL4, F_0)
      TOP = F_0
      CALL HPFC CMPOWNERS(15, 1, 1, 0, 0, 0, 0, 0)
      CALL HPFC RCVFR HNBCAST S(HPFC REAL4, F_1)
      BOTTOM = F_1
! loop 901
      CALL HPRE MIN HPFC REAL4(BOTTOM, 1)
      CALL HPRE MAX HPFC REAL4(TOP, 1)
      CALL HPOST MIN HPFC REAL4(BOTTOM, 1)
      CALL HPOST MAX HPFC REAL4(TOP, 1)
C
C
      END
!
! That is all for RANGE_host.f
!
!
! File RANGE_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for RANGE
!
!
! initializing array FIELD, number 15
!
      NODIMA(15) = 2
      ATOT(15) = 15

      RANGEA(15, 1, 1) = 1
      RANGEA(15, 1, 2) = 320
      RANGEA(15, 1, 3) = 320
!
      RANGEA(15, 1, 4) = 2
      RANGEA(15, 1, 5) = 160
      RANGEA(15, 1, 6) = 1
      RANGEA(15, 1, 7) = -1

      RANGEA(15, 2, 1) = 1
      RANGEA(15, 2, 2) = 200
      RANGEA(15, 2, 3) = 200
!
      RANGEA(15, 2, 4) = 2
      RANGEA(15, 2, 5) = 100
      RANGEA(15, 2, 6) = 1
      RANGEA(15, 2, 7) = -1

      ALIGN(15, 1, 1) = 1
      ALIGN(15, 1, 2) = 1
      ALIGN(15, 1, 3) = 0
      ALIGN(15, 2, 1) = 2
      ALIGN(15, 2, 2) = 1
      ALIGN(15, 2, 3) = 0
!
! That is all for RANGE_init.h
!
!
! File RANGE_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE RANGE_NODE(FIELD, TOP, BOTTOM, RANGE FIELD LO1, 
     &RANGE FIELD UP1, RANGE FIELD LO2, RANGE FIELD UP2)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "RANGE_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER I_0, I_1, I_10, I_11, I_2, I_3, I_4, I_5, I_6, I_7, I_8
     &, I_9, RANGE FIELD UP2, RANGE FIELD LO2, RANGE FIELD UP1, 
     &RANGE FIELD LO1
      REAL*4 F_1, F_0, FIELD(RANGE FIELD LO1:RANGE FIELD UP1, 
     &RANGE FIELD LO2:RANGE FIELD UP2), TOP, BOTTOM
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, M, 15, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 15, 2)

      CALL HPFC CMPOWNERS(15, 1, 1, 0, 0, 0, 0, 0)
      IF (HPFC OWNERP()) THEN
         I_0 = MOD(1-1, 160)+1
         I_1 = MOD(1-1, 100)+1
         F_0 = FIELD(I_0,I_1)
         CALL HPFC NSNDTO HA(HPFC REAL4, F_0)
      ELSE
         CALL HPFC RCVFR HNBCAST S(HPFC REAL4, F_0)
      ENDIF
      TOP = F_0
      CALL HPFC CMPOWNERS(15, 1, 1, 0, 0, 0, 0, 0)
      IF (HPFC OWNERP()) THEN
         I_2 = MOD(1-1, 160)+1
         I_3 = MOD(1-1, 100)+1
         F_1 = FIELD(I_2,I_3)
         CALL HPFC NSNDTO HA(HPFC REAL4, F_1)
      ELSE
         CALL HPFC RCVFR HNBCAST S(HPFC REAL4, F_1)
      ENDIF
      BOTTOM = F_1
! loop 901
      CALL NPRE MIN HPFC REAL4(BOTTOM, 1)
      CALL NPRE MAX HPFC REAL4(TOP, 1)
      DO I_4 = I_5, I_6
         DO I_8 = I_9, I_10
            BOTTOM = MIN(FIELD(I_8,I_4), BOTTOM)
            TOP = MAX(FIELD(I_8,I_4), TOP)
         ENDDO
      ENDDO
      CALL NPOST MIN HPFC REAL4(BOTTOM, 1)
      CALL NPOST MAX HPFC REAL4(TOP, 1)
C
C
      END
!
! That is all for RANGE_node.f
!
!
! File RANGE_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for RANGE
!
!
! That is all for RANGE_parameters.h
!
!
! File SHALLOW_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "SHALLOW_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER ITMAX, MPRINT, MM1, NM1, NCYCLE
      REAL*4 A, DT, TDT, TIME, DX, DY, ALPHA, PI, TPI, DI, DJ, FSDX, 
     &FSDY, TDTS8, TDTSDX, TDTSDY, PTIME
      CHARACTER*16 LABEL(1:5)
      CALL HPFC INIT HOST

      OPEN (UNIT=2,FORM='UNFORMATTED') 

      LABEL(1) = 'PRESSURE FIELD  '
      LABEL(2) = 'EAST/WEST WIND  '
      LABEL(3) = 'NORTH/SOUTH WIND'
      LABEL(4) = 'GEOPOTENTIAL    '
      LABEL(5) = 'HEIGHT FIELD    '

      A = 1.E6
      DT = 90.
      TDT = 90.
      TIME = 0.
      DX = 1.E5
      DY = 1.E5
      ALPHA = .001
      ITMAX = 2400
      MPRINT = 100
      MM1 = M-1
      NM1 = N-1
      PI = 4.*ATAN(1.)
      TPI = PI+PI
      DI = TPI/FLOAT(M)
      DJ = TPI/FLOAT(N)

C *** INITIAL VALUES OF THE STREAM FUNCTION [50]


C *** INITIALIZE VELOCITIES [60]


C *** PERIODIC CONTINUATION [70,75,86]




C *** PRINT INITIAL VALUES

C!fcd$ host
C     WRITE(*,390) N,M,DX,DY,DT,ALPHA
C 390 FORMAT('1NUMBER OF POINTS IN THE X DIRECTION',I8/
C    1     ' NUMBER OF POINTS IN THE Y DIRECTION',I8/
C    2     ' GRID SPACING IN THE X DIRECTION    ',F8.0/
C    3     ' GRID SPACING IN THE Y DIRECTION    ',F8.0/
C    4     ' TIME STEP                          ',F8.0/
C    5     ' TIME FILTER PARAMETER              ',F8.3)
C     MNMIN = MIN0(M,N)
C     WRITE(*,391) (POLD(I,I),I=1,MNMIN)
C 391 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF P ' //,(8E16.6))
C     WRITE(*,392) (UOLD(I,I),I=1,MNMIN)
C 392 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF U ' //,(8E16.6))
C     WRITE(*,393) (VOLD(I,I),I=1,MNMIN)
C 393 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF V ' //,(8E16.6))
C!fcd$ end host
      NCYCLE = 0

!
! INFINITE LOOP with a STOP
!
90    NCYCLE = NCYCLE+1

C *** COMPUTE CAPITAL U, CAPITAL V, Z, AND H [100]

      FSDX = 4./DX
      FSDY = 4./DY


C *** PERIODIC CONTINUATION [110,115]



C *** COMPUTE NEW VALUES U, V, AND P [200]

      TDTS8 = TDT/8.
      TDTSDX = TDT/DX
      TDTSDY = TDT/DY


C *** PERIODIC CONTINUATION [210,215]



C     IF(NCYCLE .GT. ITMAX) WRITE (*,220)
C 220 FORMAT('0   *****  END OF PROGRAM SHALLOW  *****')

      IF (NCYCLE.GT.ITMAX) GOTO 99999

      TIME = TIME+DT

      IF (MOD(NCYCLE, MPRINT).NE.0) GOTO 370

      PTIME = TIME/3600.
C
C     WRITE(*,350) NCYCLE,PTIME
C 350 FORMAT(//,' CYCLE NUMBER',I5,' MODEL TIME IN  HOURS',F6.2)
C     WRITE(*,355) (PNEW(I,I),I=1,MNMIN)
C 355 FORMAT(/,' DIAGONAL ELEMENTS OF P ' //,(8E16.6))
C     WRITE(*,360) (UNEW(I,I),I=1,MNMIN)
C 360 FORMAT(/,' DIAGONAL ELEMENTS OF U ' //,(8E16.6))
C     WRITE(*,365) (VNEW(I,I),I=1,MNMIN)
C 365 FORMAT(/,' DIAGONAL ELEMENTS OF V ' //,(8E16.6))
C
      CALL PLOT_HOST(NCYCLE, LABEL(1))
      CALL PLOT_HOST(NCYCLE, LABEL(4))
      CALL PLOT_HOST(NCYCLE, LABEL(5))
      CALL PLOT_HOST(NCYCLE, LABEL(2))
      CALL PLOT_HOST(NCYCLE, LABEL(3))
C
370   IF (NCYCLE.LE.1) GOTO 310

!loop 300

C *** PERIODIC CONTINUATION

!loop 320

!loop 325

!loop
      GOTO 90

310   TDT = TDT+TDT

! loop 400 (should be a size-3 flip-flop!)

      GOTO 90
99999 CONTINUE
      CLOSE (2) 
! was STOP => HPFC coredump...

1000  CONTINUE

      CALL HPFC HOST END
      END
!
! That is all for SHALLOW_host.f
!
!
! File SHALLOW_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for SHALLOW
!
!
! initializing array U, number 14
!
      NODIMA(14) = 2
      ATOT(14) = 1

      MSTATUS(14) = 14
      LIVEMAPPING(14) = .TRUE.

      RANGEA(14, 1, 1) = 1
      RANGEA(14, 1, 2) = 320
      RANGEA(14, 1, 3) = 320
!
      RANGEA(14, 1, 4) = 2
      RANGEA(14, 1, 5) = 160
      RANGEA(14, 1, 6) = 1
      RANGEA(14, 1, 7) = -1

      RANGEA(14, 2, 1) = 1
      RANGEA(14, 2, 2) = 200
      RANGEA(14, 2, 3) = 200
!
      RANGEA(14, 2, 4) = 2
      RANGEA(14, 2, 5) = 100
      RANGEA(14, 2, 6) = 1
      RANGEA(14, 2, 7) = -1

      ALIGN(14, 1, 1) = 1
      ALIGN(14, 1, 2) = 1
      ALIGN(14, 1, 3) = 0
      ALIGN(14, 2, 1) = 2
      ALIGN(14, 2, 2) = 1
      ALIGN(14, 2, 3) = 0
!
! initializing array V, number 13
!
      NODIMA(13) = 2
      ATOT(13) = 1

      MSTATUS(13) = 13
      LIVEMAPPING(13) = .TRUE.

      RANGEA(13, 1, 1) = 1
      RANGEA(13, 1, 2) = 320
      RANGEA(13, 1, 3) = 320
!
      RANGEA(13, 1, 4) = 2
      RANGEA(13, 1, 5) = 160
      RANGEA(13, 1, 6) = 1
      RANGEA(13, 1, 7) = -1

      RANGEA(13, 2, 1) = 1
      RANGEA(13, 2, 2) = 200
      RANGEA(13, 2, 3) = 200
!
      RANGEA(13, 2, 4) = 2
      RANGEA(13, 2, 5) = 100
      RANGEA(13, 2, 6) = 1
      RANGEA(13, 2, 7) = -1

      ALIGN(13, 1, 1) = 1
      ALIGN(13, 1, 2) = 1
      ALIGN(13, 1, 3) = 0
      ALIGN(13, 2, 1) = 2
      ALIGN(13, 2, 2) = 1
      ALIGN(13, 2, 3) = 0
!
! initializing array P, number 12
!
      NODIMA(12) = 2
      ATOT(12) = 1

      MSTATUS(12) = 12
      LIVEMAPPING(12) = .TRUE.

      RANGEA(12, 1, 1) = 1
      RANGEA(12, 1, 2) = 320
      RANGEA(12, 1, 3) = 320
!
      RANGEA(12, 1, 4) = 2
      RANGEA(12, 1, 5) = 160
      RANGEA(12, 1, 6) = 1
      RANGEA(12, 1, 7) = -1

      RANGEA(12, 2, 1) = 1
      RANGEA(12, 2, 2) = 200
      RANGEA(12, 2, 3) = 200
!
      RANGEA(12, 2, 4) = 2
      RANGEA(12, 2, 5) = 100
      RANGEA(12, 2, 6) = 1
      RANGEA(12, 2, 7) = -1

      ALIGN(12, 1, 1) = 1
      ALIGN(12, 1, 2) = 1
      ALIGN(12, 1, 3) = 0
      ALIGN(12, 2, 1) = 2
      ALIGN(12, 2, 2) = 1
      ALIGN(12, 2, 3) = 0
!
! initializing array UNEW, number 11
!
      NODIMA(11) = 2
      ATOT(11) = 1

      RANGEA(11, 1, 1) = 1
      RANGEA(11, 1, 2) = 320
      RANGEA(11, 1, 3) = 320
!
      RANGEA(11, 1, 4) = 2
      RANGEA(11, 1, 5) = 160
      RANGEA(11, 1, 6) = 1
      RANGEA(11, 1, 7) = -1

      RANGEA(11, 2, 1) = 1
      RANGEA(11, 2, 2) = 200
      RANGEA(11, 2, 3) = 200
!
      RANGEA(11, 2, 4) = 2
      RANGEA(11, 2, 5) = 100
      RANGEA(11, 2, 6) = 1
      RANGEA(11, 2, 7) = -1

      ALIGN(11, 1, 1) = 1
      ALIGN(11, 1, 2) = 1
      ALIGN(11, 1, 3) = 0
      ALIGN(11, 2, 1) = 2
      ALIGN(11, 2, 2) = 1
      ALIGN(11, 2, 3) = 0
!
! initializing array PNEW, number 10
!
      NODIMA(10) = 2
      ATOT(10) = 1

      RANGEA(10, 1, 1) = 1
      RANGEA(10, 1, 2) = 320
      RANGEA(10, 1, 3) = 320
!
      RANGEA(10, 1, 4) = 2
      RANGEA(10, 1, 5) = 160
      RANGEA(10, 1, 6) = 1
      RANGEA(10, 1, 7) = -1

      RANGEA(10, 2, 1) = 1
      RANGEA(10, 2, 2) = 200
      RANGEA(10, 2, 3) = 200
!
      RANGEA(10, 2, 4) = 2
      RANGEA(10, 2, 5) = 100
      RANGEA(10, 2, 6) = 1
      RANGEA(10, 2, 7) = -1

      ALIGN(10, 1, 1) = 1
      ALIGN(10, 1, 2) = 1
      ALIGN(10, 1, 3) = 0
      ALIGN(10, 2, 1) = 2
      ALIGN(10, 2, 2) = 1
      ALIGN(10, 2, 3) = 0
!
! initializing array UOLD, number 9
!
      NODIMA(9) = 2
      ATOT(9) = 1

      RANGEA(9, 1, 1) = 1
      RANGEA(9, 1, 2) = 320
      RANGEA(9, 1, 3) = 320
!
      RANGEA(9, 1, 4) = 2
      RANGEA(9, 1, 5) = 160
      RANGEA(9, 1, 6) = 1
      RANGEA(9, 1, 7) = -1

      RANGEA(9, 2, 1) = 1
      RANGEA(9, 2, 2) = 200
      RANGEA(9, 2, 3) = 200
!
      RANGEA(9, 2, 4) = 2
      RANGEA(9, 2, 5) = 100
      RANGEA(9, 2, 6) = 1
      RANGEA(9, 2, 7) = -1

      ALIGN(9, 1, 1) = 1
      ALIGN(9, 1, 2) = 1
      ALIGN(9, 1, 3) = 0
      ALIGN(9, 2, 1) = 2
      ALIGN(9, 2, 2) = 1
      ALIGN(9, 2, 3) = 0
!
! initializing array VOLD, number 8
!
      NODIMA(8) = 2
      ATOT(8) = 1

      RANGEA(8, 1, 1) = 1
      RANGEA(8, 1, 2) = 320
      RANGEA(8, 1, 3) = 320
!
      RANGEA(8, 1, 4) = 2
      RANGEA(8, 1, 5) = 160
      RANGEA(8, 1, 6) = 1
      RANGEA(8, 1, 7) = -1

      RANGEA(8, 2, 1) = 1
      RANGEA(8, 2, 2) = 200
      RANGEA(8, 2, 3) = 200
!
      RANGEA(8, 2, 4) = 2
      RANGEA(8, 2, 5) = 100
      RANGEA(8, 2, 6) = 1
      RANGEA(8, 2, 7) = -1

      ALIGN(8, 1, 1) = 1
      ALIGN(8, 1, 2) = 1
      ALIGN(8, 1, 3) = 0
      ALIGN(8, 2, 1) = 2
      ALIGN(8, 2, 2) = 1
      ALIGN(8, 2, 3) = 0
!
! initializing array POLD, number 7
!
      NODIMA(7) = 2
      ATOT(7) = 1

      RANGEA(7, 1, 1) = 1
      RANGEA(7, 1, 2) = 320
      RANGEA(7, 1, 3) = 320
!
      RANGEA(7, 1, 4) = 2
      RANGEA(7, 1, 5) = 160
      RANGEA(7, 1, 6) = 1
      RANGEA(7, 1, 7) = -1

      RANGEA(7, 2, 1) = 1
      RANGEA(7, 2, 2) = 200
      RANGEA(7, 2, 3) = 200
!
      RANGEA(7, 2, 4) = 2
      RANGEA(7, 2, 5) = 100
      RANGEA(7, 2, 6) = 1
      RANGEA(7, 2, 7) = -1

      ALIGN(7, 1, 1) = 1
      ALIGN(7, 1, 2) = 1
      ALIGN(7, 1, 3) = 0
      ALIGN(7, 2, 1) = 2
      ALIGN(7, 2, 2) = 1
      ALIGN(7, 2, 3) = 0
!
! initializing array CU, number 6
!
      NODIMA(6) = 2
      ATOT(6) = 1

      RANGEA(6, 1, 1) = 1
      RANGEA(6, 1, 2) = 320
      RANGEA(6, 1, 3) = 320
!
      RANGEA(6, 1, 4) = 2
      RANGEA(6, 1, 5) = 160
      RANGEA(6, 1, 6) = 1
      RANGEA(6, 1, 7) = -1

      RANGEA(6, 2, 1) = 1
      RANGEA(6, 2, 2) = 200
      RANGEA(6, 2, 3) = 200
!
      RANGEA(6, 2, 4) = 2
      RANGEA(6, 2, 5) = 100
      RANGEA(6, 2, 6) = 1
      RANGEA(6, 2, 7) = -1

      ALIGN(6, 1, 1) = 1
      ALIGN(6, 1, 2) = 1
      ALIGN(6, 1, 3) = 0
      ALIGN(6, 2, 1) = 2
      ALIGN(6, 2, 2) = 1
      ALIGN(6, 2, 3) = 0
!
! initializing array CV, number 5
!
      NODIMA(5) = 2
      ATOT(5) = 1

      RANGEA(5, 1, 1) = 1
      RANGEA(5, 1, 2) = 320
      RANGEA(5, 1, 3) = 320
!
      RANGEA(5, 1, 4) = 2
      RANGEA(5, 1, 5) = 160
      RANGEA(5, 1, 6) = 1
      RANGEA(5, 1, 7) = -1

      RANGEA(5, 2, 1) = 1
      RANGEA(5, 2, 2) = 200
      RANGEA(5, 2, 3) = 200
!
      RANGEA(5, 2, 4) = 2
      RANGEA(5, 2, 5) = 100
      RANGEA(5, 2, 6) = 1
      RANGEA(5, 2, 7) = -1

      ALIGN(5, 1, 1) = 1
      ALIGN(5, 1, 2) = 1
      ALIGN(5, 1, 3) = 0
      ALIGN(5, 2, 1) = 2
      ALIGN(5, 2, 2) = 1
      ALIGN(5, 2, 3) = 0
!
! initializing array Z, number 4
!
      NODIMA(4) = 2
      ATOT(4) = 1

      MSTATUS(4) = 4
      LIVEMAPPING(4) = .TRUE.

      RANGEA(4, 1, 1) = 1
      RANGEA(4, 1, 2) = 320
      RANGEA(4, 1, 3) = 320
!
      RANGEA(4, 1, 4) = 2
      RANGEA(4, 1, 5) = 160
      RANGEA(4, 1, 6) = 1
      RANGEA(4, 1, 7) = -1

      RANGEA(4, 2, 1) = 1
      RANGEA(4, 2, 2) = 200
      RANGEA(4, 2, 3) = 200
!
      RANGEA(4, 2, 4) = 2
      RANGEA(4, 2, 5) = 100
      RANGEA(4, 2, 6) = 1
      RANGEA(4, 2, 7) = -1

      ALIGN(4, 1, 1) = 1
      ALIGN(4, 1, 2) = 1
      ALIGN(4, 1, 3) = 0
      ALIGN(4, 2, 1) = 2
      ALIGN(4, 2, 2) = 1
      ALIGN(4, 2, 3) = 0
!
! initializing array H, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      MSTATUS(3) = 3
      LIVEMAPPING(3) = .TRUE.

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 320
      RANGEA(3, 1, 3) = 320
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 160
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 200
      RANGEA(3, 2, 3) = 200
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 100
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array PSI, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 320
      RANGEA(2, 1, 3) = 320
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 160
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 200
      RANGEA(2, 2, 3) = 200
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 100
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array VNEW, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 320
      RANGEA(1, 1, 3) = 320
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 160
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 200
      RANGEA(1, 2, 3) = 200
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 100
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for SHALLOW_init.h
!
!
! File SHALLOW_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "SHALLOW_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 320)
      INTEGER*4 N
      PARAMETER (N = 200)
      INTEGER I_100, I_101, I_102, I_103, I_104, I_105, I_106, I_107
     &, I_108, I_109, I_110, I_111, I_112, I_113, I_114, I_115, I_116
     &, I_117, I_118, I_119, I_120, I_121, I_122, I_123, I_124, I_125
     &, I_126, I_127, I_128, I_129, I_130, I_131, I_132, I_133, I_134
     &, I_135, I_136, I_137, I_138, I_139, I_140, I_141, I_142, I_143
     &, I_144, I_145, I_146, I_147, I_148, I_149, I_150, I_151, I_152
     &, I_153, I_154, I_155, I_156, I_157, I_158, I_159, I_160, I_161
     &, I_162, I_163, I_164, I_165, I_166, I_167, I_168, I_169, I_170
     &, I_171, I_172, I_173, I_174, I_175, I_176, I_177, I_178, I_179
     &, I_180, I_181, I_182, I_183, I_184, I_185, I_186, I_187, I_188
     &, I_189, I_190, I_191, I_192, I_193, I_194, I_195, I_196, I_197
     &, I_198, I_199, I_200, I_201, I_202, I_203, I_204, I_205, I_206
     &, I_207, I_208, I_209, I_210, I_211, I_212, I_213, I_214, I_215
     &, I_216, I_217, I_218, I_219, I_220, I_221, I_222, I_223, I_30
     &, I_31, I_32, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, 
     &I_41, I_42, I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, 
     &I_51, I_52, I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, 
     &I_61, I_62, I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, 
     &I_71, I_72, I_73, I_74, I_75, I_76, I_77, I_78, I_79, I_80, 
     &I_81, I_82, I_83, I_84, I_85, I_86, I_87, I_88, I_89, I_90, 
     &I_91, I_92, I_93, I_94, I_95, I_96, I_97, I_98, I_99, ITMAX, 
     &MPRINT, MM1, NM1, I, J, NCYCLE
      REAL*4 F_14, F_13, F_12, F_11, F_10, F_9, F_8, F_7, F_6, F_5, 
     &F_4, F_3, F_2, F_1, F_0, U(1:161, 0:100), V(0:160, 1:101), P(0:
     &160, 0:100), UNEW(1:160, 1:100), PNEW(1:160, 1:100), UOLD(1:160
     &, 1:100), VOLD(1:160, 1:100), POLD(1:160, 1:100), CU(1:161, 0:
     &100), CV(0:160, 1:101), Z(1:161, 1:101), H(0:160, 0:100), PSI(1
     &:161, 1:101), VNEW(1:160, 1:100), A, DT, TDT, TIME, DX, DY, 
     &ALPHA, PI, TPI, DI, DJ, FSDX, FSDY, TDTS8, TDTSDX, TDTSDY, 
     &PTIME
      CHARACTER*16 LABEL(1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_177, I_178, I_179, 1, M, 9, 1)
      CALL HPFC LOOP BOUNDS(I_173, I_174, I_175, 1, N, 9, 2)
      CALL HPFC LOOP BOUNDS(I_139, I_140, I_141, 2, N, 1, 2)
      CALL HPFC LOOP BOUNDS(I_135, I_136, I_137, 2, M, 11, 1)
      CALL HPFC LOOP BOUNDS(I_95, I_96, I_97, 2, M, 4, 1)
      CALL HPFC LOOP BOUNDS(I_91, I_92, I_93, 2, N, 4, 2)
      CALL HPFC LOOP BOUNDS(I_83, I_84, I_85, 2, N, 5, 2)
      CALL HPFC LOOP BOUNDS(I_79, I_80, I_81, 2, M, 6, 1)
      CALL HPFC LOOP BOUNDS(I_71, I_72, I_73, 1, M, 9, 1)
      CALL HPFC LOOP BOUNDS(I_67, I_68, I_69, 1, N, 9, 2)
      CALL HPFC LOOP BOUNDS(I_47, I_48, I_49, 2, N, 13, 2)
      CALL HPFC LOOP BOUNDS(I_43, I_44, I_45, 2, M, 14, 1)
      CALL HPFC LOOP BOUNDS(I_35, I_36, I_37, 1, M, 2, 1)
      CALL HPFC LOOP BOUNDS(I_31, I_32, I_33, 1, N, 2, 2)
! all livenesss for H
      LIVE MAPPING(3) = .FALSE.
! all livenesss for Z
      LIVE MAPPING(4) = .FALSE.
! all livenesss for P
      LIVE MAPPING(12) = .FALSE.
! all livenesss for V
      LIVE MAPPING(13) = .FALSE.
! all livenesss for U
      LIVE MAPPING(14) = .FALSE.
! direct remapping for V
      LIVE MAPPING(13) = .TRUE.
      MSTATUS(13) = 13
! direct remapping for U
      LIVE MAPPING(14) = .TRUE.
      MSTATUS(14) = 14
! direct remapping for H
      LIVE MAPPING(3) = .TRUE.
      MSTATUS(3) = 3
! direct remapping for Z
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for P
      LIVE MAPPING(12) = .TRUE.
      MSTATUS(12) = 12


      LABEL(1) = 'PRESSURE FIELD  '
      LABEL(2) = 'EAST/WEST WIND  '
      LABEL(3) = 'NORTH/SOUTH WIND'
      LABEL(4) = 'GEOPOTENTIAL    '
      LABEL(5) = 'HEIGHT FIELD    '

      A = 1.E6
      DT = 90.
      TDT = 90.
      TIME = 0.
      DX = 1.E5
      DY = 1.E5
      ALPHA = .001
      ITMAX = 2400
      MPRINT = 100
      MM1 = M-1
      NM1 = N-1
      PI = 4.*ATAN(1.)
      TPI = PI+PI
      DI = TPI/FLOAT(M)
      DJ = TPI/FLOAT(N)

C *** INITIAL VALUES OF THE STREAM FUNCTION [50]

      J = I_33
      DO I_30 = I_31, I_32
         J = J+1
         I = I_37
         DO I_34 = I_35, I_36
            I = I+1
            PSI(I_34,I_30) = A*SIN((FLOAT(I)-.5)*DI)*SIN((FLOAT(J)-.5
     &      )*DJ)
         ENDDO
      ENDDO

C *** INITIALIZE VELOCITIES [60]

! PROCS(1:2, 2) send PSI(1:160, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(PSI, SHALLOW PSI LO1, SHALLOW PSI UP1
     &   , SHALLOW PSI LO2, SHALLOW PSI UP2, 1, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) receive PSI(1:160, 101) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(PSI, SHALLOW PSI LO1, 
     &   SHALLOW PSI UP1, SHALLOW PSI LO2, SHALLOW PSI UP2, 1, 160, 1
     &   , 101, 101, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_39, I_40, I_41, 1, NM1, 14, 2)
      DO I_38 = I_39, I_40
         DO I_42 = I_43, I_44
            U(I_42,I_38) = -(PSI(I_42,I_38+1)-PSI(I_42,I_38))/DY
         ENDDO
      ENDDO
! PROCS(2, 1:2) send PSI(1, 1:100) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(PSI, SHALLOW PSI LO1, SHALLOW PSI UP1
     &   , SHALLOW PSI LO2, SHALLOW PSI UP2, 1, 1, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1, 1:2) receive PSI(161, 1:100) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(PSI, SHALLOW PSI LO1, 
     &   SHALLOW PSI UP1, SHALLOW PSI LO2, SHALLOW PSI UP2, 161, 161
     &   , 1, 1, 100, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_51, I_52, I_53, 1, MM1, 13, 1)
      DO I_46 = I_47, I_48
         DO I_50 = I_51, I_52
            V(I_50,I_46) = (PSI(I_50+1,I_46)-PSI(I_50,I_46))/DX
         ENDDO
      ENDDO

C *** PERIODIC CONTINUATION [70,75,86]

      CALL HPFC REAL4 SHIFT 2(U, 14, 1, -319, SHALLOW U LO1, 
     &SHALLOW U UP1, SHALLOW U LO2, SHALLOW U UP2, 320, 320, 1, 199)
      CALL HPFC REAL4 SHIFT 2(V, 13, 1, 319, SHALLOW V LO1, 
     &SHALLOW V UP1, SHALLOW V LO2, SHALLOW V UP2, 1, 1, 2, 200)

      CALL HPFC REAL4 SHIFT 2(U, 14, 2, 199, SHALLOW U LO1, 
     &SHALLOW U UP1, SHALLOW U LO2, SHALLOW U UP2, 2, 320, 1, 1)
      CALL HPFC REAL4 SHIFT 2(V, 13, 2, -199, SHALLOW V LO1, 
     &SHALLOW V UP1, SHALLOW V LO2, SHALLOW V UP2, 1, 319, 200, 200)
      CALL HPFC CMPCOMPUTER(14, 1, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(14, M, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_54 = MOD(M-1, 160)+1
            I_55 = MOD(1-1, 100)+1
            F_0 = U(I_54,I_55)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_0)
         ENDIF
         I_58 = MOD(1-1, 160)+1
         I_59 = MOD(N-1, 100)+1
         U(I_58,I_59) = F_0
      ELSE
         CALL HPFC CMPOWNERS(14, M, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_56 = MOD(M-1, 160)+1
            I_57 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, U(I_56,I_57))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(13, M, 1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(13, 1, N, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_60 = MOD(1-1, 160)+1
            I_61 = MOD(N-1, 100)+1
            F_1 = V(I_60,I_61)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_1)
         ENDIF
         I_64 = MOD(M-1, 160)+1
         I_65 = MOD(1-1, 100)+1
         V(I_64,I_65) = F_1
      ELSE
         CALL HPFC CMPOWNERS(13, 1, N, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_62 = MOD(1-1, 160)+1
            I_63 = MOD(N-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, V(I_62,I_63))
         ENDIF
      ENDIF

      DO I_66 = I_67, I_68
         DO I_70 = I_71, I_72
            UOLD(I_70,I_66) = U(I_70,I_66)
            VOLD(I_70,I_66) = V(I_70,I_66)
            POLD(I_70,I_66) = 50000.
            P(I_70,I_66) = 50000.
         ENDDO
      ENDDO

C *** PRINT INITIAL VALUES

C!fcd$ host
C     WRITE(*,390) N,M,DX,DY,DT,ALPHA
C 390 FORMAT('1NUMBER OF POINTS IN THE X DIRECTION',I8/
C    1     ' NUMBER OF POINTS IN THE Y DIRECTION',I8/
C    2     ' GRID SPACING IN THE X DIRECTION    ',F8.0/
C    3     ' GRID SPACING IN THE Y DIRECTION    ',F8.0/
C    4     ' TIME STEP                          ',F8.0/
C    5     ' TIME FILTER PARAMETER              ',F8.3)
C     MNMIN = MIN0(M,N)
C     WRITE(*,391) (POLD(I,I),I=1,MNMIN)
C 391 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF P ' //,(8E16.6))
C     WRITE(*,392) (UOLD(I,I),I=1,MNMIN)
C 392 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF U ' //,(8E16.6))
C     WRITE(*,393) (VOLD(I,I),I=1,MNMIN)
C 393 FORMAT(/' INITIAL DIAGONAL ELEMENTS OF V ' //,(8E16.6))
C!fcd$ end host
      NCYCLE = 0

!
! INFINITE LOOP with a STOP
!
90    NCYCLE = NCYCLE+1

C *** COMPUTE CAPITAL U, CAPITAL V, Z, AND H [100]

      FSDX = 4./DX
      FSDY = 4./DY

! PROCS(1, 1:2) send P(160, 1:100) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 160, 160, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) receive P(0, 1:100) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 0, 0, 1, 1, 100, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_75, I_76, I_77, 1, NM1, 6, 2)
      DO I_74 = I_75, I_76
         DO I_78 = I_79, I_80
            CU(I_78,I_74) = .5*(P(I_78,I_74)+P(I_78-1,I_74))*U(I_78,
     &      I_74)
         ENDDO
      ENDDO
! PROCS(1:2, 1) send P(1:160, 100) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 1, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 2) receive P(1:160, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 1, 160, 1, 0, 0, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_87, I_88, I_89, 1, MM1, 5, 1)
      DO I_82 = I_83, I_84
         DO I_86 = I_87, I_88
            CV(I_86,I_82) = .5*(P(I_86,I_82)+P(I_86,I_82-1))*V(I_86,
     &      I_82)
         ENDDO
      ENDDO
! PROCS(1, 1:2) send P(160, 1:100) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 160, 160, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) send P(1:160, 100) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 1, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1, 1) send P(160, 100) to (+3)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(3)
         CALL HPFC REAL4 PACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 160, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) send U(1:160, 100) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(U, SHALLOW U LO1, SHALLOW U UP1, 
     &   SHALLOW U LO2, SHALLOW U UP2, 1, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1, 1:2) send V(160, 1:100) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(V, SHALLOW V LO1, SHALLOW V UP1, 
     &   SHALLOW V LO2, SHALLOW V UP2, 160, 160, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) receive P(0, 1:100) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 0, 0, 1, 1, 100, 1)
      ENDIF
! PROCS(1:2, 2) receive P(1:160, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 1, 160, 1, 0, 0, 1)
      ENDIF
! PROCS(2, 2) receive P(0, 0) from (-3)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-3)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(P, SHALLOW P LO1, SHALLOW P UP1, 
     &   SHALLOW P LO2, SHALLOW P UP2, 0, 0, 1, 0, 0, 1)
      ENDIF
! PROCS(1:2, 2) receive U(1:160, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(U, SHALLOW U LO1, SHALLOW U UP1, 
     &   SHALLOW U LO2, SHALLOW U UP2, 1, 160, 1, 0, 0, 1)
      ENDIF
! PROCS(2, 1:2) receive V(0, 1:100) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(V, SHALLOW V LO1, SHALLOW V UP1, 
     &   SHALLOW V LO2, SHALLOW V UP2, 0, 0, 1, 1, 100, 1)
      ENDIF
      DO I_90 = I_91, I_92
         DO I_94 = I_95, I_96
            Z(I_94,I_90) = (FSDX*(V(I_94,I_90)-V(I_94-1,I_90))-FSDY*(
     &      U(I_94,I_90)-U(I_94,I_90-1)))/(P(I_94-1,I_90-1)+P(I_94,
     &      I_90-1)+P(I_94,I_90)+P(I_94-1,I_90))
         ENDDO
      ENDDO
! PROCS(1:2, 2) send V(1:160, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(V, SHALLOW V LO1, SHALLOW V UP1, 
     &   SHALLOW V LO2, SHALLOW V UP2, 1, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) send U(1, 1:100) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(U, SHALLOW U LO1, SHALLOW U UP1, 
     &   SHALLOW U LO2, SHALLOW U UP2, 1, 1, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) receive V(1:160, 101) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(V, SHALLOW V LO1, SHALLOW V UP1, 
     &   SHALLOW V LO2, SHALLOW V UP2, 1, 160, 1, 101, 101, 1)
      ENDIF
! PROCS(1, 1:2) receive U(161, 1:100) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(U, SHALLOW U LO1, SHALLOW U UP1, 
     &   SHALLOW U LO2, SHALLOW U UP2, 161, 161, 1, 1, 100, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_99, I_100, I_101, 1, NM1, 3, 2)
      CALL HPFC LOOP BOUNDS(I_103, I_104, I_105, 1, MM1, 3, 1)
      DO I_98 = I_99, I_100
         DO I_102 = I_103, I_104
            H(I_102,I_98) = P(I_102,I_98)+.25*(U(I_102+1,I_98)*U(
     &      I_102+1,I_98)+U(I_102,I_98)*U(I_102,I_98)+V(I_102,I_98+1)
     &      *V(I_102,I_98+1)+V(I_102,I_98)*V(I_102,I_98))
         ENDDO
      ENDDO

C *** PERIODIC CONTINUATION [110,115]

      CALL HPFC REAL4 SHIFT 2(CU, 6, 1, -319, SHALLOW CU LO1, 
     &SHALLOW CU UP1, SHALLOW CU LO2, SHALLOW CU UP2, 320, 320, 1, 
     &199)
      CALL HPFC REAL4 SHIFT 2(CV, 5, 1, 319, SHALLOW CV LO1, 
     &SHALLOW CV UP1, SHALLOW CV LO2, SHALLOW CV UP2, 1, 1, 2, 200)
      CALL HPFC REAL4 SHIFT 2(Z, 4, 1, -319, SHALLOW Z LO1, 
     &SHALLOW Z UP1, SHALLOW Z LO2, SHALLOW Z UP2, 320, 320, 2, 200)
      CALL HPFC REAL4 SHIFT 2(H, 3, 1, 319, SHALLOW H LO1, 
     &SHALLOW H UP1, SHALLOW H LO2, SHALLOW H UP2, 1, 1, 1, 199)

      CALL HPFC REAL4 SHIFT 2(CU, 6, 2, 199, SHALLOW CU LO1, 
     &SHALLOW CU UP1, SHALLOW CU LO2, SHALLOW CU UP2, 2, 320, 1, 1)
      CALL HPFC REAL4 SHIFT 2(CV, 5, 2, -199, SHALLOW CV LO1, 
     &SHALLOW CV UP1, SHALLOW CV LO2, SHALLOW CV UP2, 1, 319, 200, 
     &200)
      CALL HPFC REAL4 SHIFT 2(Z, 4, 2, -199, SHALLOW Z LO1, 
     &SHALLOW Z UP1, SHALLOW Z LO2, SHALLOW Z UP2, 2, 320, 200, 200)
      CALL HPFC REAL4 SHIFT 2(H, 3, 2, 199, SHALLOW H LO1, 
     &SHALLOW H UP1, SHALLOW H LO2, SHALLOW H UP2, 1, 319, 1, 1)
      CALL HPFC CMPCOMPUTER(6, 1, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(6, M, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_106 = MOD(M-1, 160)+1
            I_107 = MOD(1-1, 100)+1
            F_2 = CU(I_106,I_107)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_2)
         ENDIF
         I_110 = MOD(1-1, 160)+1
         I_111 = MOD(N-1, 100)+1
         CU(I_110,I_111) = F_2
      ELSE
         CALL HPFC CMPOWNERS(6, M, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_108 = MOD(M-1, 160)+1
            I_109 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, CU(I_108,I_109))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(5, M, 1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(5, 1, N, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_112 = MOD(1-1, 160)+1
            I_113 = MOD(N-1, 100)+1
            F_3 = CV(I_112,I_113)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_3)
         ENDIF
         I_116 = MOD(M-1, 160)+1
         I_117 = MOD(1-1, 100)+1
         CV(I_116,I_117) = F_3
      ELSE
         CALL HPFC CMPOWNERS(5, 1, N, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_114 = MOD(1-1, 160)+1
            I_115 = MOD(N-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, CV(I_114,I_115))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(4, 1, 1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(4, M, N, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_118 = MOD(M-1, 160)+1
            I_119 = MOD(N-1, 100)+1
            F_4 = Z(I_118,I_119)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_4)
         ENDIF
         I_122 = MOD(1-1, 160)+1
         I_123 = MOD(1-1, 100)+1
         Z(I_122,I_123) = F_4
      ELSE
         CALL HPFC CMPOWNERS(4, M, N, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_120 = MOD(M-1, 160)+1
            I_121 = MOD(N-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, Z(I_120,I_121))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(3, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(3, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_124 = MOD(1-1, 160)+1
            I_125 = MOD(1-1, 100)+1
            F_5 = H(I_124,I_125)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_5)
         ENDIF
         I_128 = MOD(M-1, 160)+1
         I_129 = MOD(N-1, 100)+1
         H(I_128,I_129) = F_5
      ELSE
         CALL HPFC CMPOWNERS(3, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_126 = MOD(1-1, 160)+1
            I_127 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, H(I_126,I_127))
         ENDIF
      ENDIF

C *** COMPUTE NEW VALUES U, V, AND P [200]

      TDTS8 = TDT/8.
      TDTSDX = TDT/DX
      TDTSDY = TDT/DY

! PROCS(1, 1:2) send H(160, 1:100) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(H, SHALLOW H LO1, SHALLOW H UP1, 
     &   SHALLOW H LO2, SHALLOW H UP2, 160, 160, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1, 1:2) send CV(160, 1:100) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1, 
     &   SHALLOW CV LO2, SHALLOW CV UP2, 160, 160, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1, 2) send CV(160, 1) to (+1)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1, 
     &   SHALLOW CV LO2, SHALLOW CV UP2, 160, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 2) send CV(1:160, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1, 
     &   SHALLOW CV LO2, SHALLOW CV UP2, 1, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 2) send Z(1:160, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(Z, SHALLOW Z LO1, SHALLOW Z UP1, 
     &   SHALLOW Z LO2, SHALLOW Z UP2, 1, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) receive H(0, 1:100) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(H, SHALLOW H LO1, SHALLOW H UP1, 
     &   SHALLOW H LO2, SHALLOW H UP2, 0, 0, 1, 1, 100, 1)
      ENDIF
! PROCS(2, 1:2) receive CV(0, 1:100) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1
     &   , SHALLOW CV LO2, SHALLOW CV UP2, 0, 0, 1, 1, 100, 1)
      ENDIF
! PROCS(2, 1) receive CV(0, 101) from (-1)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1
     &   , SHALLOW CV LO2, SHALLOW CV UP2, 0, 0, 1, 101, 101, 1)
      ENDIF
! PROCS(1:2, 1) receive CV(1:160, 101) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1
     &   , SHALLOW CV LO2, SHALLOW CV UP2, 1, 160, 1, 101, 101, 1)
      ENDIF
! PROCS(1:2, 1) receive Z(1:160, 101) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(Z, SHALLOW Z LO1, SHALLOW Z UP1, 
     &   SHALLOW Z LO2, SHALLOW Z UP2, 1, 160, 1, 101, 101, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_131, I_132, I_133, 1, NM1, 11, 2)
      DO I_130 = I_131, I_132
         DO I_134 = I_135, I_136
            UNEW(I_134,I_130) = UOLD(I_134,I_130)+TDTS8*(Z(I_134,
     &      I_130+1)+Z(I_134,I_130))*(CV(I_134,I_130+1)+CV(I_134-1,
     &      I_130+1)+CV(I_134-1,I_130)+CV(I_134,I_130))-TDTSDX*(H(
     &      I_134,I_130)-H(I_134-1,I_130))
         ENDDO
      ENDDO
! PROCS(1:2, 1) send H(1:160, 100) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(H, SHALLOW H LO1, SHALLOW H UP1, 
     &   SHALLOW H LO2, SHALLOW H UP2, 1, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1) send CU(1, 100) to (-1)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1, 
     &   SHALLOW CU LO2, SHALLOW CU UP2, 1, 1, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) send CU(1:160, 100) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1, 
     &   SHALLOW CU LO2, SHALLOW CU UP2, 1, 160, 1, 100, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) send CU(1, 1:100) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1, 
     &   SHALLOW CU LO2, SHALLOW CU UP2, 1, 1, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) send Z(1, 1:100) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(Z, SHALLOW Z LO1, SHALLOW Z UP1, 
     &   SHALLOW Z LO2, SHALLOW Z UP2, 1, 1, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 2) receive H(1:160, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(H, SHALLOW H LO1, SHALLOW H UP1, 
     &   SHALLOW H LO2, SHALLOW H UP2, 1, 160, 1, 0, 0, 1)
      ENDIF
! PROCS(1, 2) receive CU(161, 0) from (+1)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1
     &   , SHALLOW CU LO2, SHALLOW CU UP2, 161, 161, 1, 0, 0, 1)
      ENDIF
! PROCS(1:2, 2) receive CU(1:160, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1
     &   , SHALLOW CU LO2, SHALLOW CU UP2, 1, 160, 1, 0, 0, 1)
      ENDIF
! PROCS(1, 1:2) receive CU(161, 1:100) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1
     &   , SHALLOW CU LO2, SHALLOW CU UP2, 161, 161, 1, 1, 100, 1)
      ENDIF
! PROCS(1, 1:2) receive Z(161, 1:100) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(Z, SHALLOW Z LO1, SHALLOW Z UP1, 
     &   SHALLOW Z LO2, SHALLOW Z UP2, 161, 161, 1, 1, 100, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_143, I_144, I_145, 1, MM1, 1, 1)
      DO I_138 = I_139, I_140
         DO I_142 = I_143, I_144
            VNEW(I_142,I_138) = VOLD(I_142,I_138)-TDTS8*(Z(I_142+1,
     &      I_138)+Z(I_142,I_138))*(CU(I_142+1,I_138)+CU(I_142,I_138)
     &      +CU(I_142,I_138-1)+CU(I_142+1,I_138-1))-TDTSDY*(H(I_142,
     &      I_138)-H(I_142,I_138-1))
         ENDDO
      ENDDO
! PROCS(1:2, 2) send CV(1:160, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1, 
     &   SHALLOW CV LO2, SHALLOW CV UP2, 1, 160, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(2, 1:2) send CU(1, 1:100) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1, 
     &   SHALLOW CU LO2, SHALLOW CU UP2, 1, 1, 1, 1, 100, 1)
         CALL HPFC SNDTO N
      ENDIF
! PROCS(1:2, 1) receive CV(1:160, 101) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CV, SHALLOW CV LO1, SHALLOW CV UP1
     &   , SHALLOW CV LO2, SHALLOW CV UP2, 1, 160, 1, 101, 101, 1)
      ENDIF
! PROCS(1, 1:2) receive CU(161, 1:100) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(CU, SHALLOW CU LO1, SHALLOW CU UP1
     &   , SHALLOW CU LO2, SHALLOW CU UP2, 161, 161, 1, 1, 100, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_147, I_148, I_149, 1, NM1, 10, 2)
      CALL HPFC LOOP BOUNDS(I_151, I_152, I_153, 1, MM1, 10, 1)
      DO I_146 = I_147, I_148
         DO I_150 = I_151, I_152
            PNEW(I_150,I_146) = POLD(I_150,I_146)-TDTSDX*(CU(I_150+1,
     &      I_146)-CU(I_150,I_146))-TDTSDY*(CV(I_150,I_146+1)-CV(
     &      I_150,I_146))
         ENDDO
      ENDDO

C *** PERIODIC CONTINUATION [210,215]

      CALL HPFC REAL4 SHIFT 2(UNEW, 11, 1, -319, SHALLOW UNEW LO1, 
     &SHALLOW UNEW UP1, SHALLOW UNEW LO2, SHALLOW UNEW UP2, 320, 320
     &, 1, 199)
      CALL HPFC REAL4 SHIFT 2(VNEW, 1, 1, 319, SHALLOW VNEW LO1, 
     &SHALLOW VNEW UP1, SHALLOW VNEW LO2, SHALLOW VNEW UP2, 1, 1, 2, 
     &200)
      CALL HPFC REAL4 SHIFT 2(PNEW, 10, 1, 319, SHALLOW PNEW LO1, 
     &SHALLOW PNEW UP1, SHALLOW PNEW LO2, SHALLOW PNEW UP2, 1, 1, 1, 
     &199)

      CALL HPFC REAL4 SHIFT 2(UNEW, 11, 2, 199, SHALLOW UNEW LO1, 
     &SHALLOW UNEW UP1, SHALLOW UNEW LO2, SHALLOW UNEW UP2, 2, 320, 1
     &, 1)
      CALL HPFC REAL4 SHIFT 2(VNEW, 1, 2, -199, SHALLOW VNEW LO1, 
     &SHALLOW VNEW UP1, SHALLOW VNEW LO2, SHALLOW VNEW UP2, 1, 319, 
     &200, 200)
      CALL HPFC REAL4 SHIFT 2(PNEW, 10, 2, 199, SHALLOW PNEW LO1, 
     &SHALLOW PNEW UP1, SHALLOW PNEW LO2, SHALLOW PNEW UP2, 1, 319, 1
     &, 1)
      CALL HPFC CMPCOMPUTER(11, 1, N+1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(11, M+1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_154 = MOD(M+1-1, 160)+1
            I_155 = MOD(1-1, 100)+1
            F_6 = UNEW(I_154,I_155)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_6)
         ENDIF
         I_158 = MOD(1-1, 160)+1
         I_159 = MOD(N+1-1, 100)+1
         UNEW(I_158,I_159) = F_6
      ELSE
         CALL HPFC CMPOWNERS(11, M+1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_156 = MOD(M+1-1, 160)+1
            I_157 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, UNEW(I_156,I_157))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(1, M+1, 1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(1, 1, N+1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_160 = MOD(1-1, 160)+1
            I_161 = MOD(N+1-1, 100)+1
            F_7 = VNEW(I_160,I_161)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_7)
         ENDIF
         I_164 = MOD(M+1-1, 160)+1
         I_165 = MOD(1-1, 100)+1
         VNEW(I_164,I_165) = F_7
      ELSE
         CALL HPFC CMPOWNERS(1, 1, N+1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_162 = MOD(1-1, 160)+1
            I_163 = MOD(N+1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, VNEW(I_162,I_163))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(10, M+1, N+1, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(10, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_166 = MOD(1-1, 160)+1
            I_167 = MOD(1-1, 100)+1
            F_8 = PNEW(I_166,I_167)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_8)
         ENDIF
         I_170 = MOD(M+1-1, 160)+1
         I_171 = MOD(N+1-1, 100)+1
         PNEW(I_170,I_171) = F_8
      ELSE
         CALL HPFC CMPOWNERS(10, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_168 = MOD(1-1, 160)+1
            I_169 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, PNEW(I_168,I_169))
         ENDIF
      ENDIF

C     IF(NCYCLE .GT. ITMAX) WRITE (*,220)
C 220 FORMAT('0   *****  END OF PROGRAM SHALLOW  *****')

      IF (NCYCLE.GT.ITMAX) GOTO 99999

      TIME = TIME+DT

      IF (MOD(NCYCLE, MPRINT).NE.0) GOTO 370

      PTIME = TIME/3600.
C
C     WRITE(*,350) NCYCLE,PTIME
C 350 FORMAT(//,' CYCLE NUMBER',I5,' MODEL TIME IN  HOURS',F6.2)
C     WRITE(*,355) (PNEW(I,I),I=1,MNMIN)
C 355 FORMAT(/,' DIAGONAL ELEMENTS OF P ' //,(8E16.6))
C     WRITE(*,360) (UNEW(I,I),I=1,MNMIN)
C 360 FORMAT(/,' DIAGONAL ELEMENTS OF U ' //,(8E16.6))
C     WRITE(*,365) (VNEW(I,I),I=1,MNMIN)
C 365 FORMAT(/,' DIAGONAL ELEMENTS OF V ' //,(8E16.6))
C
! begin remappings
      MSTATUS(12) = 12
! liveness management
! end of liveness management
! end remappings
      CALL PLOT_NODE(P, NCYCLE, LABEL(1), SHALLOW P LO1, 
     &SHALLOW P UP1, SHALLOW P LO2, SHALLOW P UP2)
! begin remappings
      MSTATUS(12) = 12
! liveness management
! end of liveness management
! end remappings
! begin remappings
      MSTATUS(4) = 4
! liveness management
! end of liveness management
! end remappings
      CALL PLOT_NODE(Z, NCYCLE, LABEL(4), SHALLOW Z LO1, 
     &SHALLOW Z UP1, SHALLOW Z LO2, SHALLOW Z UP2)
! begin remappings
      MSTATUS(4) = 4
! liveness management
! end of liveness management
! end remappings
! begin remappings
      MSTATUS(3) = 3
! liveness management
! end of liveness management
! end remappings
      CALL PLOT_NODE(H, NCYCLE, LABEL(5), SHALLOW H LO1, 
     &SHALLOW H UP1, SHALLOW H LO2, SHALLOW H UP2)
! begin remappings
      MSTATUS(3) = 3
! liveness management
! end of liveness management
! end remappings
! begin remappings
      MSTATUS(14) = 14
! liveness management
! end of liveness management
! end remappings
      CALL PLOT_NODE(U, NCYCLE, LABEL(2), SHALLOW U LO1, 
     &SHALLOW U UP1, SHALLOW U LO2, SHALLOW U UP2)
! begin remappings
      MSTATUS(14) = 14
! liveness management
! end of liveness management
! end remappings
! begin remappings
      MSTATUS(13) = 13
! liveness management
! end of liveness management
! end remappings
      CALL PLOT_NODE(V, NCYCLE, LABEL(3), SHALLOW V LO1, 
     &SHALLOW V UP1, SHALLOW V LO2, SHALLOW V UP2)
! begin remappings
      MSTATUS(13) = 13
! liveness management
! end of liveness management
! end remappings
C
370   IF (NCYCLE.LE.1) GOTO 310

!loop 300
      CALL HPFC LOOP BOUNDS(I_181, I_182, I_183, 1, NM1, 9, 2)
      CALL HPFC LOOP BOUNDS(I_185, I_186, I_187, 1, MM1, 9, 1)
      DO I_180 = I_181, I_182
         DO I_184 = I_185, I_186
            UOLD(I_184,I_180) = U(I_184,I_180)+ALPHA*(UNEW(I_184,
     &      I_180)-2.*U(I_184,I_180)+UOLD(I_184,I_180))
            VOLD(I_184,I_180) = V(I_184,I_180)+ALPHA*(VNEW(I_184,
     &      I_180)-2.*V(I_184,I_180)+VOLD(I_184,I_180))
            POLD(I_184,I_180) = P(I_184,I_180)+ALPHA*(PNEW(I_184,
     &      I_180)-2.*P(I_184,I_180)+POLD(I_184,I_180))
            U(I_184,I_180) = UNEW(I_184,I_180)
            V(I_184,I_180) = VNEW(I_184,I_180)
            P(I_184,I_180) = PNEW(I_184,I_180)
         ENDDO
      ENDDO

C *** PERIODIC CONTINUATION

!loop 320
      CALL HPFC REAL4 SHIFT 2(UOLD, 9, 1, 319, SHALLOW UOLD LO1, 
     &SHALLOW UOLD UP1, SHALLOW UOLD LO2, SHALLOW UOLD UP2, 1, 1, 1, 
     &199)
      CALL HPFC REAL4 SHIFT 2(VOLD, 8, 1, 319, SHALLOW VOLD LO1, 
     &SHALLOW VOLD UP1, SHALLOW VOLD LO2, SHALLOW VOLD UP2, 1, 1, 1, 
     &199)
      CALL HPFC REAL4 SHIFT 2(POLD, 7, 1, 319, SHALLOW POLD LO1, 
     &SHALLOW POLD UP1, SHALLOW POLD LO2, SHALLOW POLD UP2, 1, 1, 1, 
     &199)
      CALL HPFC REAL4 SHIFT 2(U, 14, 1, 319, SHALLOW U LO1, 
     &SHALLOW U UP1, SHALLOW U LO2, SHALLOW U UP2, 1, 1, 1, 199)
      CALL HPFC REAL4 SHIFT 2(V, 13, 1, 319, SHALLOW V LO1, 
     &SHALLOW V UP1, SHALLOW V LO2, SHALLOW V UP2, 1, 1, 1, 199)
      CALL HPFC REAL4 SHIFT 2(P, 12, 1, 319, SHALLOW P LO1, 
     &SHALLOW P UP1, SHALLOW P LO2, SHALLOW P UP2, 1, 1, 1, 199)

!loop 325
      CALL HPFC REAL4 SHIFT 2(UOLD, 9, 2, 199, SHALLOW UOLD LO1, 
     &SHALLOW UOLD UP1, SHALLOW UOLD LO2, SHALLOW UOLD UP2, 1, 319, 1
     &, 1)
      CALL HPFC REAL4 SHIFT 2(VOLD, 8, 2, 199, SHALLOW VOLD LO1, 
     &SHALLOW VOLD UP1, SHALLOW VOLD LO2, SHALLOW VOLD UP2, 1, 319, 1
     &, 1)
      CALL HPFC REAL4 SHIFT 2(POLD, 7, 2, 199, SHALLOW POLD LO1, 
     &SHALLOW POLD UP1, SHALLOW POLD LO2, SHALLOW POLD UP2, 1, 319, 1
     &, 1)
      CALL HPFC REAL4 SHIFT 2(U, 14, 2, 199, SHALLOW U LO1, 
     &SHALLOW U UP1, SHALLOW U LO2, SHALLOW U UP2, 1, 319, 1, 1)
      CALL HPFC REAL4 SHIFT 2(V, 13, 2, 199, SHALLOW V LO1, 
     &SHALLOW V UP1, SHALLOW V LO2, SHALLOW V UP2, 1, 319, 1, 1)
      CALL HPFC REAL4 SHIFT 2(P, 12, 2, 199, SHALLOW P LO1, 
     &SHALLOW P UP1, SHALLOW P LO2, SHALLOW P UP2, 1, 319, 1, 1)
      CALL HPFC CMPCOMPUTER(9, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(9, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_188 = MOD(1-1, 160)+1
            I_189 = MOD(1-1, 100)+1
            F_9 = UOLD(I_188,I_189)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_9)
         ENDIF
         I_192 = MOD(M-1, 160)+1
         I_193 = MOD(N-1, 100)+1
         UOLD(I_192,I_193) = F_9
      ELSE
         CALL HPFC CMPOWNERS(9, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_190 = MOD(1-1, 160)+1
            I_191 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, UOLD(I_190,I_191))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(8, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(8, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_194 = MOD(1-1, 160)+1
            I_195 = MOD(1-1, 100)+1
            F_10 = VOLD(I_194,I_195)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_10)
         ENDIF
         I_198 = MOD(M-1, 160)+1
         I_199 = MOD(N-1, 100)+1
         VOLD(I_198,I_199) = F_10
      ELSE
         CALL HPFC CMPOWNERS(8, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_196 = MOD(1-1, 160)+1
            I_197 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, VOLD(I_196,I_197))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(7, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(7, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_200 = MOD(1-1, 160)+1
            I_201 = MOD(1-1, 100)+1
            F_11 = POLD(I_200,I_201)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_11)
         ENDIF
         I_204 = MOD(M-1, 160)+1
         I_205 = MOD(N-1, 100)+1
         POLD(I_204,I_205) = F_11
      ELSE
         CALL HPFC CMPOWNERS(7, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_202 = MOD(1-1, 160)+1
            I_203 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, POLD(I_202,I_203))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(14, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(14, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_206 = MOD(1-1, 160)+1
            I_207 = MOD(1-1, 100)+1
            F_12 = U(I_206,I_207)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_12)
         ENDIF
         I_210 = MOD(M-1, 160)+1
         I_211 = MOD(N-1, 100)+1
         U(I_210,I_211) = F_12
      ELSE
         CALL HPFC CMPOWNERS(14, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_208 = MOD(1-1, 160)+1
            I_209 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, U(I_208,I_209))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(13, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(13, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_212 = MOD(1-1, 160)+1
            I_213 = MOD(1-1, 100)+1
            F_13 = V(I_212,I_213)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_13)
         ENDIF
         I_216 = MOD(M-1, 160)+1
         I_217 = MOD(N-1, 100)+1
         V(I_216,I_217) = F_13
      ELSE
         CALL HPFC CMPOWNERS(13, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_214 = MOD(1-1, 160)+1
            I_215 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, V(I_214,I_215))
         ENDIF
      ENDIF
      CALL HPFC CMPCOMPUTER(12, M, N, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(12, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_218 = MOD(1-1, 160)+1
            I_219 = MOD(1-1, 100)+1
            F_14 = P(I_218,I_219)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_14)
         ENDIF
         I_222 = MOD(M-1, 160)+1
         I_223 = MOD(N-1, 100)+1
         P(I_222,I_223) = F_14
      ELSE
         CALL HPFC CMPOWNERS(12, 1, 1, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP()) THEN
            I_220 = MOD(1-1, 160)+1
            I_221 = MOD(1-1, 100)+1
            CALL HPFC SNDTO C(HPFC REAL4, P(I_220,I_221))
         ENDIF
      ENDIF

!loop
      GOTO 90

310   TDT = TDT+TDT

! loop 400 (should be a size-3 flip-flop!)
      DO I_172 = I_173, I_174
         DO I_176 = I_177, I_178
            UOLD(I_176,I_172) = U(I_176,I_172)
            VOLD(I_176,I_172) = V(I_176,I_172)
            POLD(I_176,I_172) = P(I_176,I_172)
            U(I_176,I_172) = UNEW(I_176,I_172)
            V(I_176,I_172) = VNEW(I_176,I_172)
            P(I_176,I_172) = PNEW(I_176,I_172)
         ENDDO
      ENDDO

      GOTO 90
99999 CONTINUE
! was STOP => HPFC coredump...

1000  CONTINUE

      CALL HPFC NODE END
      END
!
! That is all for SHALLOW_node.f
!
!
! File SHALLOW_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for SHALLOW
!
      integer 
     $    SHALLOW U LO1,
     $    SHALLOW U UP1
      parameter(SHALLOW U LO1 = 1)
      parameter(SHALLOW U UP1 = 161)
      integer 
     $    SHALLOW U LO2,
     $    SHALLOW U UP2
      parameter(SHALLOW U LO2 = 0)
      parameter(SHALLOW U UP2 = 100)
      integer 
     $    SHALLOW V LO1,
     $    SHALLOW V UP1
      parameter(SHALLOW V LO1 = 0)
      parameter(SHALLOW V UP1 = 160)
      integer 
     $    SHALLOW V LO2,
     $    SHALLOW V UP2
      parameter(SHALLOW V LO2 = 1)
      parameter(SHALLOW V UP2 = 101)
      integer 
     $    SHALLOW P LO1,
     $    SHALLOW P UP1
      parameter(SHALLOW P LO1 = 0)
      parameter(SHALLOW P UP1 = 160)
      integer 
     $    SHALLOW P LO2,
     $    SHALLOW P UP2
      parameter(SHALLOW P LO2 = 0)
      parameter(SHALLOW P UP2 = 100)
      integer 
     $    SHALLOW UNEW LO1,
     $    SHALLOW UNEW UP1
      parameter(SHALLOW UNEW LO1 = 1)
      parameter(SHALLOW UNEW UP1 = 160)
      integer 
     $    SHALLOW UNEW LO2,
     $    SHALLOW UNEW UP2
      parameter(SHALLOW UNEW LO2 = 1)
      parameter(SHALLOW UNEW UP2 = 100)
      integer 
     $    SHALLOW PNEW LO1,
     $    SHALLOW PNEW UP1
      parameter(SHALLOW PNEW LO1 = 1)
      parameter(SHALLOW PNEW UP1 = 160)
      integer 
     $    SHALLOW PNEW LO2,
     $    SHALLOW PNEW UP2
      parameter(SHALLOW PNEW LO2 = 1)
      parameter(SHALLOW PNEW UP2 = 100)
      integer 
     $    SHALLOW UOLD LO1,
     $    SHALLOW UOLD UP1
      parameter(SHALLOW UOLD LO1 = 1)
      parameter(SHALLOW UOLD UP1 = 160)
      integer 
     $    SHALLOW UOLD LO2,
     $    SHALLOW UOLD UP2
      parameter(SHALLOW UOLD LO2 = 1)
      parameter(SHALLOW UOLD UP2 = 100)
      integer 
     $    SHALLOW VOLD LO1,
     $    SHALLOW VOLD UP1
      parameter(SHALLOW VOLD LO1 = 1)
      parameter(SHALLOW VOLD UP1 = 160)
      integer 
     $    SHALLOW VOLD LO2,
     $    SHALLOW VOLD UP2
      parameter(SHALLOW VOLD LO2 = 1)
      parameter(SHALLOW VOLD UP2 = 100)
      integer 
     $    SHALLOW POLD LO1,
     $    SHALLOW POLD UP1
      parameter(SHALLOW POLD LO1 = 1)
      parameter(SHALLOW POLD UP1 = 160)
      integer 
     $    SHALLOW POLD LO2,
     $    SHALLOW POLD UP2
      parameter(SHALLOW POLD LO2 = 1)
      parameter(SHALLOW POLD UP2 = 100)
      integer 
     $    SHALLOW CU LO1,
     $    SHALLOW CU UP1
      parameter(SHALLOW CU LO1 = 1)
      parameter(SHALLOW CU UP1 = 161)
      integer 
     $    SHALLOW CU LO2,
     $    SHALLOW CU UP2
      parameter(SHALLOW CU LO2 = 0)
      parameter(SHALLOW CU UP2 = 100)
      integer 
     $    SHALLOW CV LO1,
     $    SHALLOW CV UP1
      parameter(SHALLOW CV LO1 = 0)
      parameter(SHALLOW CV UP1 = 160)
      integer 
     $    SHALLOW CV LO2,
     $    SHALLOW CV UP2
      parameter(SHALLOW CV LO2 = 1)
      parameter(SHALLOW CV UP2 = 101)
      integer 
     $    SHALLOW Z LO1,
     $    SHALLOW Z UP1
      parameter(SHALLOW Z LO1 = 1)
      parameter(SHALLOW Z UP1 = 161)
      integer 
     $    SHALLOW Z LO2,
     $    SHALLOW Z UP2
      parameter(SHALLOW Z LO2 = 1)
      parameter(SHALLOW Z UP2 = 101)
      integer 
     $    SHALLOW H LO1,
     $    SHALLOW H UP1
      parameter(SHALLOW H LO1 = 0)
      parameter(SHALLOW H UP1 = 160)
      integer 
     $    SHALLOW H LO2,
     $    SHALLOW H UP2
      parameter(SHALLOW H LO2 = 0)
      parameter(SHALLOW H UP2 = 100)
      integer 
     $    SHALLOW PSI LO1,
     $    SHALLOW PSI UP1
      parameter(SHALLOW PSI LO1 = 1)
      parameter(SHALLOW PSI UP1 = 161)
      integer 
     $    SHALLOW PSI LO2,
     $    SHALLOW PSI UP2
      parameter(SHALLOW PSI LO2 = 1)
      parameter(SHALLOW PSI UP2 = 101)
      integer 
     $    SHALLOW VNEW LO1,
     $    SHALLOW VNEW UP1
      parameter(SHALLOW VNEW LO1 = 1)
      parameter(SHALLOW VNEW UP1 = 160)
      integer 
     $    SHALLOW VNEW LO2,
     $    SHALLOW VNEW UP2
      parameter(SHALLOW VNEW LO2 = 1)
      parameter(SHALLOW VNEW UP2 = 100)
!
! That is all for SHALLOW_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template DOMAIN, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 320
      RANGET(1, 1, 3) = 320

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 200
      RANGET(1, 2, 3) = 200

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 160
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 100
!
! initializing template FIELD, number 15
!
      NODIMT(15) = 2
      TTOP(15) = 2

      RANGET(15, 1, 1) = 1
      RANGET(15, 1, 2) = 320
      RANGET(15, 1, 3) = 320

      RANGET(15, 2, 1) = 1
      RANGET(15, 2, 2) = 200
      RANGET(15, 2, 3) = 200

      DIST(15, 1, 1) = 1
      DIST(15, 1, 2) = 160
      DIST(15, 2, 1) = 2
      DIST(15, 2, 2) = 100
!
! initializing template FIELD, number 17
!
      NODIMT(17) = 2
      TTOP(17) = 3

      RANGET(17, 1, 1) = 1
      RANGET(17, 1, 2) = 320
      RANGET(17, 1, 3) = 320

      RANGET(17, 2, 1) = 1
      RANGET(17, 2, 2) = 200
      RANGET(17, 2, 3) = 200

      DIST(17, 1, 1) = 1
      DIST(17, 1, 2) = 160
      DIST(17, 2, 1) = 2
      DIST(17, 2, 2) = 100
!
! Processors Initializations
!
!
! initializing processors PROCS, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! initializing processors PROCS, number 2
!
      NODIMP(2) = 2

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 2
      RANGEP(2, 1, 3) = 2

      RANGEP(2, 2, 1) = 1
      RANGEP(2, 2, 2) = 2
      RANGEP(2, 2, 3) = 2
!
! initializing processors PROCS, number 3
!
      NODIMP(3) = 2

      RANGEP(3, 1, 1) = 1
      RANGEP(3, 1, 2) = 2
      RANGEP(3, 1, 3) = 2

      RANGEP(3, 2, 1) = 1
      RANGEP(3, 2, 2) = 2
      RANGEP(3, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 17)
      parameter(REALNBOFTEMPLATES = 3)
      parameter(REALNBOFPROCESSORS = 3)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

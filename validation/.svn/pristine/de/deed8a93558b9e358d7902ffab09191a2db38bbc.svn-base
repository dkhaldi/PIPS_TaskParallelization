void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   {
      int I_30;
      I_30 = __USize[0]*__USize[1];
      {
         int i = 0;
         for(i = 0; i <= I_30-1; i += 1) {
            {
               double F_212;
               F_212 = U[i];
               _return391 = cos(F_212);
            }
            __temp3[i] = _return391;
         }
      }
   }
   {
      int i = 0;
      for(i = 0; i <= __USize[0]*__USize[1]-1; i += 1)
         __temp4[i] = U[i]/2;
   }
}
void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   {
      int I_30;
      I_30 = __USize[0]*__USize[1];
      {
         int i = 0;
         for(i = 0; i <= I_30-1; i += 1) {
            {
               double F_212;
               F_212 = U[i];
               _return391 = cos(F_212);
            }
            __temp3[i] = _return391;
         }
      }
   }
   {
      int i = 0;
      for(i = 0; i <= __USize[0]*__USize[1]-1; i += 1)
         __temp4[i] = U[i]/2;
   }
}
void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   //PIPS generated variable
   int I_30, i_0 = 0;
   //PIPS generated variable
   double F_212;
   //PIPS generated variable
   int i_1 = 0;
   I_30 = __USize[0]*__USize[1];
   for(i_0 = 0; i_0 <= I_30-1; i_0 += 1) {
      F_212 = U[i_0];
      _return391 = cos(F_212);
      __temp3[i_0] = _return391;
   }
   for(i_1 = 0; i_1 <= __USize[0]*__USize[1]-1; i_1 += 1)
      __temp4[i_1] = U[i_1]/2;
}
void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   //PIPS generated variable
   int I_30, i_0 = 0;
   //PIPS generated variable
   double F_212;
   //PIPS generated variable
   int i_1 = 0;
   I_30 = __USize[0]*__USize[1];
   for(i_0 = 0; i_0 <= I_30-1; i_0 += 1) {
      F_212 = U[i_0];
      _return391 = cos(F_212);
      __temp3[i_0] = _return391;
   }
   for(i_1 = 0; i_1 <= __USize[0]*__USize[1]-1; i_1 += 1)
      __temp4[i_1] = U[i_1]/2;
}
void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   //PIPS generated variable
   int I_30, i_0 = 0;
   //PIPS generated variable
   double F_212;
   //PIPS generated variable
   int i_1 = 0;
   I_30 = __USize[0]*__USize[1];
   for(i_0 = 0; i_0 <= I_30-1; i_0 += 1) {
      F_212 = U[i_0];
      _return391 = cos(F_212);
      __temp3[i_0] = _return391;
   }
   for(i_1 = 0; i_1 <= __USize[0]*__USize[1]-1; i_1 += 1)
      __temp4[i_1] = U[i_1]/2;
}
void f()
{
   int __USize[2] = {100, 101};
   double U[__USize[0]*__USize[1]];
   double _return391;
   double __temp3[__USize[0]*__USize[1]];
   double __temp4[__USize[0]*__USize[1]];
   //PIPS generated variable
   int I_30, i_0 = 0;
   //PIPS generated variable
   double F_212;
   //PIPS generated variable
   int i_1 = 0;
   I_30 = __USize[0]*__USize[1];
#pragma omp parallel for private(F_212,_return391)
   for(i_0 = 0; i_0 <= I_30-1; i_0 += 1) {
      F_212 = U[i_0];
      _return391 = cos(F_212);
      __temp3[i_0] = _return391;
   }
#pragma omp parallel for 
   for(i_1 = 0; i_1 <= __USize[0]*__USize[1]-1; i_1 += 1)
      __temp4[i_1] = U[i_1]/2;
}

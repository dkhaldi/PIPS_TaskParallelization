C
C     ACCUMULATE DATA
C
      SUBROUTINE ACCUM2(IVAR,DFN)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H,DFN
      SAVE/ST2/
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NDAT(IVAR) = NDAT(IVAR)+1
C (3,3)
C+++++      DFN=FN
      SAV(IVAR) = SAV(IVAR)+DFN
C (3,4)
      SUM(IVAR,0) = SUM(IVAR,0)+DFN*DFN
C (3,5)
!     INITIALLY: DO 10
      DO ICORR = 1, NCORR
C (3,6)
10       SUM(IVAR,ICORR) = SUM(IVAR,ICORR)+DFN*F(IVAR,ICORR)
      ENDDO
C (3,7)
!     INITIALLY: DO 20
      DO ICORR = NCORR, 2, -1
C (3,8)
20       F(IVAR,ICORR) = F(IVAR,ICORR-1)
      ENDDO
C (3,9)
      F(IVAR,1) = DFN
C (3,10)
      IF (NDAT(IVAR).LE.NCORR) THEN
C (3,11)
         H(IVAR,NDAT(IVAR)) = DFN
      ELSE
C (3,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END
C
C     ACCUMULATE DATA
C
      SUBROUTINE ACCUM4(IBL,F)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM,DF
      REAL*8 F(*)
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
C+++++      DIMENSION F(*)
      IF (IBL.LT.1.OR.IBL.GT.NBL) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NDAT(IBL) = NDAT(IBL)+1
C (3,3)
!     INITIALLY: DO 10
      DO I = 1, NVAR
C (3,4)
C        BEGIN BLOCK
C (3,5)
         DF = F(I)
C (3,6)
         SAV(IBL,I) = SAV(IBL,I)+DF
C (3,7)
!     INITIALLY: DO 10
         DO J = I, NVAR
C (3,8)
10          SUM(IBL,I,J) = SUM(IBL,I,J)+DF*F(J)
         ENDDO
C        END BLOCK
      ENDDO
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END
      SUBROUTINE ADDAA(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99992 CONTINUE
C (0,3)
C
C     W = W + ADJ(U) * ADJ(V)
C
!     INITIALLY: DO 80
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)-U(I,0)*V(I,1)-U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)-U(I,0)*V(I,2)-U(I,1)*V(I,3)-U(I,2)*V(I,0)+U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)-U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)-U(
     &   I,3)*V(I,0)
C (0,9)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDAM(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99996 CONTINUE
C (0,3)
C
C     W = W + ADJ(U) * V
C
!     INITIALLY: DO 40
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)+U(I,0)*V(I,1)-U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)+U(I,0)*V(I,2)+U(I,1)*V(I,3)-U(I,2)*V(I,0)-U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)+U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)-U(
     &   I,3)*V(I,0)
C (0,9)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDMA(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99994 CONTINUE
C (0,3)
C
C     W = W + U * ADJ(V)
C
!     INITIALLY: DO 60
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)-U(I,0)*V(I,1)+U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)-U(I,0)*V(I,2)+U(I,1)*V(I,3)+U(I,2)*V(I,0)-U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)-U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)+U(
     &   I,3)*V(I,0)
C (0,9)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDMM(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99998 CONTINUE
C (0,3)
C
C     W = W + U * V
C
!     INITIALLY: DO 20
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)+U(I,0)*V(I,1)+U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)+U(I,0)*V(I,2)-U(I,1)*V(I,3)+U(I,2)*V(I,0)+U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)+U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)+U(
     &   I,3)*V(I,0)
C (0,9)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADJADJ(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99993 CONTINUE
C (0,3)
C
C     W = ADJ(U) * ADJ(V)
C
!     INITIALLY: DO 70
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = -U(I,0)*V(I,1)-U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(I,3)*V
     &   (I,2)
C (0,7)
         W(I,2) = -U(I,0)*V(I,2)-U(I,1)*V(I,3)-U(I,2)*V(I,0)+U(I,3)*V
     &   (I,1)
C (0,8)
         W(I,3) = -U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)-U(I,3)*V
     &   (I,0)
C (0,9)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADJMAT(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99997 CONTINUE
C (0,3)
C
C     W = ADJ(U) * V
C
!     INITIALLY: DO 30
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = U(I,0)*V(I,1)-U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(I,3)*V(
     &   I,2)
C (0,7)
         W(I,2) = U(I,0)*V(I,2)+U(I,1)*V(I,3)-U(I,2)*V(I,0)-U(I,3)*V(
     &   I,1)
C (0,8)
         W(I,3) = U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)-U(I,3)*V(
     &   I,0)
C (0,9)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
C
C     COMPUTE AVERAGES
C
      FUNCTION AVER2(IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H
      SAVE/ST2/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      AVER2 = 0.D0
C (0,3)
      ND = NDAT(IVAR)
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR.OR.ND.LT.1) RETURN
C (3,1)
      AVER2 = SAV(IVAR)/ND
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
C     COMPUTE AVERAGES
C
      REAL*8 FUNCTION AVER4(IBL,IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      AVER4 = 0.D0
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IVAR.LT.1.OR.IVAR.GT.NVAR.OR.NDAT
     &(IBL).LT.1) RETURN
C (3,1)
      AVER4 = SAV(IBL,IVAR)/NDAT(IBL)
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C*************************BESPOL****************************
C
C     COMPUTE THE INTERPOLATING POLYNOMIAL FOR TABULATED
C          RATIOS OF BESSEL FUNCTIONS
C
      SUBROUTINE BESPOL(ND,IND,DIFF,POL,LVEC)
*     *****************
C
      PARAMETER(ERROR=1.E-8)
C
      REAL*8 CD0,CD1,CD2,CD3
      REAL*8 DIFF,POL
C
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
C
      DIMENSION IND(LVEC),DIFF(LVEC),POL(LVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
!     INITIALLY: DO 10
      DO I = 2, LVEC, 2
C (0,3)
C        BEGIN BLOCK
C (0,4)
         POL(I-1) = CD0(IND(I-1),ND)+DIFF(I-1)*(CD1(IND(I-1),ND)+DIFF
     &   (I-1)*(CD2(IND(I-1),ND)+DIFF(I-1)*CD3(IND(I-1),ND)))
C (0,5)
         POL(I) = CD0(IND(I),ND)+DIFF(I)*(CD1(IND(I),ND)+DIFF(I)*(CD2
     &   (IND(I),ND)+DIFF(I)*CD3(IND(I),ND)))
C (0,6)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
C*************************BESTABNN*****************************
C
      SUBROUTINE BESTAB(BETA,NDIM)
*     *****************
C
      PARAMETER(ERROR=1.E-8)
C
      REAL*8 CD0,CD1,CD2,CD3,RD,SD,BCOEFF
C
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION CD(-1:200+2,2:20)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      BCOEFF = FLOAT(200)/((2*(NDIM-1))**2)
C (0,3)
C
      STEP = ((NDIM-1)*BETA)**2/200
C (0,4)
      BHALF = .5D0*BETA
C (0,5)
C
C     LOOP OVER POINTS
C
!     INITIALLY: DO 100
      DO IBSQ = -1, 200+2
C (0,6)
C        BEGIN BLOCK
C (0,7)
         U = IBSQ*STEP
C (0,8)
C
C     COMPUTE THE NUMERATOR AND DENOMINATOR SUMS FOR  CD(BETA,B)
C
         DENOM = 1.D0
C (0,9)
         CD(IBSQ,2) = .5D0
C (0,10)
!     INITIALLY: DO 10
         DO ND = 3, 20
C (0,11)
C           BEGIN BLOCK
C (0,12)
            CD(IBSQ,ND) = CD(IBSQ,ND-1)/ND
C (0,13)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,14)
         S = 1.
C (0,15)
         K = 0
C (0,16)
C        BEGIN UNSTRUCTURED
C (1,1)
C        BEGIN BLOCK
C (1,2)
C
20       CONTINUE
C (1,3)
         K = K+1
C (1,4)
         S = S*U/(K*(K+1))
C (1,5)
         DENOM = DENOM+S
C (1,6)
         S1 = S
C (1,7)
!     INITIALLY: DO 30
         DO ND = 2, 20
C (1,8)
C           BEGIN BLOCK
C (1,9)
            S1 = S1/(K+ND)
C (1,10)
            CD(IBSQ,ND) = CD(IBSQ,ND)+S1
C (1,11)
30          CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
C (2,1)
         IF (ABS(S).GT.DENOM*ERROR) GOTO 20
C
C     COMPUTE  CD(BETA,B)
C
C        END UNSTRUCTURED
C (0,17)
         F = 1./DENOM
C (0,18)
!     INITIALLY: DO 40
         DO ND = 2, 20
C (0,19)
C           BEGIN BLOCK
C (0,20)
            F = F*BHALF
C (0,21)
            CD(IBSQ,ND) = F*CD(IBSQ,ND)
C (0,22)
40          CONTINUE
C           END BLOCK
         ENDDO
C (0,23)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
C     COMPUTE THE COEFFICIENTS OF THE INTERPOLATING POLYNOMIALS
C
!     INITIALLY: DO 200
      DO IBSQ = 0, 200
C (0,25)
!     INITIALLY: DO 200
         DO ND = 2, 20
C (0,26)
C           BEGIN BLOCK
C (0,27)
            CD0(IBSQ,ND) = CD(IBSQ,ND)
C (0,28)
            CD1(IBSQ,ND) = -CD(IBSQ-1,ND)/3.D0-.5D0*CD(IBSQ,ND)+CD(
     &      IBSQ+1,ND)-CD(IBSQ+2,ND)/6.D0
C (0,29)
            CD2(IBSQ,ND) = .5D0*(CD(IBSQ-1,ND)+CD(IBSQ+1,ND))-CD(IBSQ
     &      ,ND)
C (0,30)
            CD3(IBSQ,ND) = (CD(IBSQ+2,ND)-CD(IBSQ-1,ND))/6.D0+.5D0*(
     &      CD(IBSQ,ND)-CD(IBSQ+1,ND))
C (0,31)
200         CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,32)
C
C     COMPUTE THE SUMS FOR  RD(BETA)
C
      RD(1) = 1.D0
C (0,33)
!     INITIALLY: DO 50
      DO ND = 2, 20
C (0,34)
C        BEGIN BLOCK
C (0,35)
         RD(ND) = RD(ND-1)/ND
C (0,36)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,37)
      U = BHALF**2
C (0,38)
      S = 1.
C (0,39)
      K = 0
C (0,40)
C     BEGIN UNSTRUCTURED
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
60    CONTINUE
C (4,3)
      K = K+1
C (4,4)
      S = S*U/(K**2)
C (4,5)
      S1 = S
C (4,6)
!     INITIALLY: DO 70
      DO ND = 1, 20
C (4,7)
C        BEGIN BLOCK
C (4,8)
         S1 = S1/(K+ND)
C (4,9)
         RD(ND) = RD(ND)+S1
C (4,10)
70       CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (5,1)
      IF (S.GT.RD(1)*ERROR) GOTO 60
C
C     COMPUTE  RD(BETA)  AND  SD(BETA)
C
C     END UNSTRUCTURED
C (0,41)
      F = 1./RD(1)
C (0,42)
      RD(1) = 1.
C (0,43)
!     INITIALLY: DO 80
      DO ND = 2, 20
C (0,44)
C        BEGIN BLOCK
C (0,45)
         D = ND
C (0,46)
         F = F*BHALF
C (0,47)
         RD(ND) = D*F*RD(ND)
C (0,48)
         SD(ND) = D/(D-1.D0)*RD(ND-1)-(D+1.D0)/BETA*RD(ND)
C (0,49)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,50)
      SD(1) = .5D0*RD(2)
C (0,51)
      RETURN
C     END BLOCK
      END
C*************************STAT2NN***************************
C                                               B.BUNK 1985
C     RELAXATION ANALYSIS
C
C     FOR INTERNAL COUNTERS IN REAL*8
C        REMOVE  C+++++
C
C     CLEAR COUNTERS
C
      SUBROUTINE CLEAR2(NVAR1,NCORR1)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H
      SAVE/ST2/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (NVAR1.GT.MAXVAR) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         WRITE (*, '('' ERROR IN STAT2: NVAR ='',I5)') NVAR1
C (0,5)
         STOP
C        END BLOCK
      ELSE
C (0,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,7)
      IF (NCORR1.GT.MAXCOR) THEN
C (0,8)
C        BEGIN BLOCK
C (0,9)
         WRITE (*, '('' ERROR IN STAT2: NCORR ='',I5)') NCORR1
C (0,10)
         STOP
C        END BLOCK
      ELSE
C (0,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,12)
      NVAR = NVAR1
C (0,13)
      NCORR = NCORR1
C (0,14)
!     INITIALLY: DO 10
      DO IVAR = 1, NVAR
C (0,15)
C        BEGIN BLOCK
C (0,16)
         NDAT(IVAR) = 0
C (0,17)
         SAV(IVAR) = 0.D0
C (0,18)
         SUM(IVAR,0) = 0.D0
C (0,19)
!     INITIALLY: DO 10
         DO ICORR = 1, NCORR
C (0,20)
C           BEGIN BLOCK
C (0,21)
            F(IVAR,ICORR) = 0.D0
C (0,22)
            SUM(IVAR,ICORR) = 0.D0
C (0,23)
10          CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,24)
      RETURN
C     END BLOCK
      END

C********************STAT4*********************************
C                                               B.BUNK 1986
C     STATISTICAL ANALYSIS FOR  NBL  BLOCKS
C        OF  NVAR  CORRELATED VARIABLES EACH
C
C     FOR INTERNAL COUNTERS IN REAL*8:
C        REMOVE C+++++
C
C     CLEAR COUNTERS
C
      SUBROUTINE CLEAR4(NBL1,NVAR1)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (NBL1.GT.MAXBL) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         WRITE (*, '('' ERROR IN STAT4: NBL ='',I5)') NBL1
C (0,5)
         STOP
C        END BLOCK
      ELSE
C (0,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,7)
      IF (NVAR1.GT.MAXVAR) THEN
C (0,8)
C        BEGIN BLOCK
C (0,9)
         WRITE (*, '('' ERROR IN STAT4: NVAR ='',I5)') NVAR1
C (0,10)
         STOP
C        END BLOCK
      ELSE
C (0,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,12)
      NBL = NBL1
C (0,13)
      NVAR = NVAR1
C (0,14)
!     INITIALLY: DO 10
      DO IBL = 1, NBL
C (0,15)
C        BEGIN BLOCK
C (0,16)
         NDAT(IBL) = 0
C (0,17)
!     INITIALLY: DO 10
         DO I = 1, NVAR
C (0,18)
C           BEGIN BLOCK
C (0,19)
            SAV(IBL,I) = 0.D0
C (0,20)
!     INITIALLY: DO 10
            DO J = 1, NVAR
C (0,21)
10             SUM(IBL,I,J) = 0.D0
            ENDDO
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,22)
      RETURN
C     END BLOCK
      END
C*************************CORR***************************
C
C     ACCUMULATE THE GLUEBALL CORRELATIONS
C       (SUBROUTINE SPECIALISED TO 4 DIMENSIONS)
C
      SUBROUTINE CORR
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
C
      REAL*8 S110,S112,S110I,S112I
      REAL*8 S220,S222,S220I,S222I
      REAL*8 W11SUM(20,3),W11INT(20,3)
      REAL*8 W22SUM(20,3),W22INT(20,3)
      REAL*8 OP110(20),OP112(20),OP110I(20),OP112I(20)
      REAL*8 OP220(20),OP222(20),OP220I(20),OP222I(20)
      REAL*8 PR110(0:20/2),PR112(0:20/2)
      REAL*8 PR110I(0:20/2),PR112I(0:20/2)
      REAL*8 PR220(0:20/2),PR222(0:20/2)
      REAL*8 PR220I(0:20/2),PR222I(0:20/2)
      REAL*8 VECT(2+20/2,8)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      NT = LSIZE(NDIM)
C (0,3)
      MAXDST = NT/2
C (0,4)
      NDIST = MAXDST+1
C (0,5)
C
      S110 = 0.D0
C (0,6)
      S112 = 0.D0
C (0,7)
      S110I = 0.D0
C (0,8)
      S112I = 0.D0
C (0,9)
C
      S220 = 0.D0
C (0,10)
      S222 = 0.D0
C (0,11)
      S220I = 0.D0
C (0,12)
      S222I = 0.D0
C (0,13)
C
      CALL LOOPS(W11SUM, W11INT, W22SUM, W22INT)
C (0,14)
C
!     INITIALLY: DO 10
      DO IT = 1, NT
C (0,15)
C        BEGIN BLOCK
C (0,16)
C
         OP110(IT) = W11SUM(IT,3)+W11SUM(IT,2)+W11SUM(IT,1)
C (0,17)
         OP112(IT) = W11SUM(IT,3)+W11SUM(IT,2)-2*W11SUM(IT,1)
C (0,18)
         OP110I(IT) = W11INT(IT,3)+W11INT(IT,2)+W11INT(IT,1)
C (0,19)
         OP112I(IT) = W11INT(IT,3)+W11INT(IT,2)-2*W11INT(IT,1)
C (0,20)
C
         OP220(IT) = W22SUM(IT,3)+W22SUM(IT,2)+W22SUM(IT,1)
C (0,21)
         OP222(IT) = W22SUM(IT,3)+W22SUM(IT,2)-2*W22SUM(IT,1)
C (0,22)
         OP220I(IT) = W22INT(IT,3)+W22INT(IT,2)+W22INT(IT,1)
C (0,23)
         OP222I(IT) = W22INT(IT,3)+W22INT(IT,2)-2*W22INT(IT,1)
C (0,24)
C
         S110 = S110+OP110(IT)
C (0,25)
         S112 = S112+OP112(IT)
C (0,26)
         S110I = S110I+OP110I(IT)
C (0,27)
         S112I = S112I+OP112I(IT)
C (0,28)
C
         S220 = S220+OP220(IT)
C (0,29)
         S222 = S222+OP222(IT)
C (0,30)
         S220I = S220I+OP220I(IT)
C (0,31)
         S222I = S222I+OP222I(IT)
C (0,32)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,33)
C
      CALL ACCUM2(10, S110/NT)
C (0,34)
      CALL ACCUM2(11, S112/NT)
C (0,35)
      CALL ACCUM2(12, S110I/NT)
C (0,36)
      CALL ACCUM2(13, S112I/NT)
C (0,37)
C
      CALL ACCUM2(14, S220/NT)
C (0,38)
      CALL ACCUM2(15, S222/NT)
C (0,39)
      CALL ACCUM2(16, S220I/NT)
C (0,40)
      CALL ACCUM2(17, S222I/NT)
C (0,41)
C
      VECT(1,1) = S110/NT
C (0,42)
      VECT(1,2) = S112/NT
C (0,43)
      VECT(1,3) = S110I/NT
C (0,44)
      VECT(1,4) = S112I/NT
C (0,45)
      VECT(1,5) = S220/NT
C (0,46)
      VECT(1,6) = S222/NT
C (0,47)
      VECT(1,7) = S220I/NT
C (0,48)
      VECT(1,8) = S222I/NT
C (0,49)
C
!     INITIALLY: DO 20
      DO IDIST = 0, MAXDST
C (0,50)
C        BEGIN BLOCK
C (0,51)
         PR110(IDIST) = 0.D0
C (0,52)
         PR112(IDIST) = 0.D0
C (0,53)
         PR110I(IDIST) = 0.D0
C (0,54)
         PR112I(IDIST) = 0.D0
C (0,55)
C
         PR220(IDIST) = 0.D0
C (0,56)
         PR222(IDIST) = 0.D0
C (0,57)
         PR220I(IDIST) = 0.D0
C (0,58)
         PR222I(IDIST) = 0.D0
C (0,59)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,60)
C
!     INITIALLY: DO 30
      DO IT1 = 1, NT
C (0,61)
!     INITIALLY: DO 30
         DO IT2 = IT1, NT
C (0,62)
C           BEGIN BLOCK
C (0,63)
            IDIST = MIN(IT2-IT1, NT+IT1-IT2)
C (0,64)
            PR110(IDIST) = PR110(IDIST)+OP110(IT1)*OP110(IT2)
C (0,65)
            PR112(IDIST) = PR112(IDIST)+OP112(IT1)*OP112(IT2)
C (0,66)
            PR110I(IDIST) = PR110I(IDIST)+OP110I(IT1)*OP110I(IT2)
C (0,67)
            PR112I(IDIST) = PR112I(IDIST)+OP112I(IT1)*OP112I(IT2)
C (0,68)
C
            PR220(IDIST) = PR220(IDIST)+OP220(IT1)*OP220(IT2)
C (0,69)
            PR222(IDIST) = PR222(IDIST)+OP222(IT1)*OP222(IT2)
C (0,70)
            PR220I(IDIST) = PR220I(IDIST)+OP220I(IT1)*OP220I(IT2)
C (0,71)
            PR222I(IDIST) = PR222I(IDIST)+OP222I(IT1)*OP222I(IT2)
C (0,72)
30          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,73)
C
!     INITIALLY: DO 40
      DO IDIST = 0, MAXDST
C (0,74)
C        BEGIN BLOCK
C (0,75)
         IND = IDIST+1
C (0,76)
         IND1 = IND+1
C (0,77)
         FACT = 1.D0/NT
C (0,78)
         IF (2*IDIST.EQ.NT) THEN
C (0,79)
            FACT = 2.D0/NT
         ELSE
C (0,80)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,81)
C
         CALL ACCUM2(17+IND, PR110(IDIST)*FACT)
C (0,82)
         CALL ACCUM2(17+NDIST+IND, PR112(IDIST)*FACT)
C (0,83)
         CALL ACCUM2(17+2*NDIST+IND, PR110I(IDIST)*FACT)
C (0,84)
         CALL ACCUM2(17+3*NDIST+IND, PR112I(IDIST)*FACT)
C (0,85)
C
         CALL ACCUM2(17+4*NDIST+IND, PR220(IDIST)*FACT)
C (0,86)
         CALL ACCUM2(17+5*NDIST+IND, PR222(IDIST)*FACT)
C (0,87)
         CALL ACCUM2(17+6*NDIST+IND, PR220I(IDIST)*FACT)
C (0,88)
         CALL ACCUM2(17+7*NDIST+IND, PR222I(IDIST)*FACT)
C (0,89)
C
         VECT(IND1,1) = PR110(IDIST)*FACT
C (0,90)
         VECT(IND1,2) = PR112(IDIST)*FACT
C (0,91)
         VECT(IND1,3) = PR110I(IDIST)*FACT
C (0,92)
         VECT(IND1,4) = PR112I(IDIST)*FACT
C (0,93)
         VECT(IND1,5) = PR220(IDIST)*FACT
C (0,94)
         VECT(IND1,6) = PR222(IDIST)*FACT
C (0,95)
         VECT(IND1,7) = PR220I(IDIST)*FACT
C (0,96)
         VECT(IND1,8) = PR222I(IDIST)*FACT
C (0,97)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,98)
C
!     INITIALLY: DO 50
      DO IBL = 1, 8
C (0,99)
C        BEGIN BLOCK
C (0,100)
         CALL ACCUM4(IBL, VECT(1,IBL))
C (0,101)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,102)
      RETURN
C     END BLOCK
      END
C
C     COMPUTE COVARIANCE MATRIX
C
      REAL*8 FUNCTION COVAR4(IBL,I,J)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      COVAR4 = 0.D0
C (0,3)
      IMIN = MIN(I, J)
C (0,4)
      IMAX = MAX(I, J)
C (0,5)
      ND = NDAT(IBL)
C (0,6)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IMIN.LT.1.OR.IMAX.GT.NVAR.OR.ND
     &.LT.1) RETURN
C (3,1)
      COVAR4 = (SUM(IBL,IMIN,IMAX)-SAV(IBL,I)*SAV(IBL,J)/ND)/ND/ND
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C*************************EVAL*****************************
C
C     PRINT RESULTS AND ERROR ANALYSIS
C
      SUBROUTINE EVAL
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
C
      REAL*8 ED,PF,PA
      REAL*8 S110,S112,S110I,S112I,S220,S222,S220I,S222I
      REAL*8 C110,C112,C110I,C112I,C220,C222,C220I,C222I
      REAL*8 COVAR4
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      CALL STAT2(1, ED, SIGE, RE, 0)
C (0,3)
C
*      WRITE(6,1080)
*1080  FORMAT(/' POLYAKOV LINE AVERAGES:'
*     X   /'  I',12X,'FUNDAMENTAL       CORR.FAC.'
*     X   ,'            ADJOINT         CORR.FAC.')
!     INITIALLY: DO 70
      DO I = 1, NDIM
C (0,4)
C        BEGIN BLOCK
C (0,5)
         CALL STAT2(2*I, PF, SIGPF, RPF, 0)
C (0,6)
         CALL STAT2(2*I+1, PA, SIGPA, RPA, 0)
C (0,7)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,8)
C
*     X      /11X,'W11(0+)',25X,'W22(0+)'
*     X      ,25X,'W11(2+)',25X,'W22(2+)')
      CALL STAT2(10, S110, ES110, RS110, 0)
C (0,9)
      CALL STAT2(11, S112, ES112, RS112, 0)
C (0,10)
      CALL STAT2(12, S110I, ES110I, RS110I, 0)
C (0,11)
      CALL STAT2(13, S112I, ES112I, RS112I, 0)
C (0,12)
      CALL STAT2(14, S220, ES220, RS220, 0)
C (0,13)
      CALL STAT2(15, S222, ES222, RS222, 0)
C (0,14)
      CALL STAT2(16, S220I, ES220I, RS220I, 0)
C (0,15)
      CALL STAT2(17, S222I, ES222I, RS222I, 0)
C (0,16)
      MAXDST = LSIZE(NDIM)/2
C (0,17)
      NDIST = MAXDST+1
C (0,18)
!     INITIALLY: DO 80
      DO IDIST = 0, MAXDST
C (0,19)
C        BEGIN BLOCK
C (0,20)
         IND = IDIST+1
C (0,21)
         IND1 = IND+1
C (0,22)
C
         CALL STAT2(17+IND, C110, EC110, RC110, 0)
C (0,23)
         C110 = (C110-S110**2)/NVOL
C (0,24)
         EC110 = COVAR4(1, IND1, IND1)+4.*S110*(S110*COVAR4(1, 1, 1)-
     &   COVAR4(1, 1, IND1))
C (0,25)
         EC110 = SQRT(MAX(0., EC110))*RC110/NVOL
C (0,26)
C
         CALL STAT2(17+NDIST+IND, C112, EC112, RC112, 0)
C (0,27)
         C112 = C112/NVOL
C (0,28)
         EC112 = EC112/NVOL
C (0,29)
C
         CALL STAT2(17+4*NDIST+IND, C220, EC220, RC220, 0)
C (0,30)
         C220 = (C220-S220**2)/NVOL
C (0,31)
         EC220 = COVAR4(5, IND1, IND1)+4.*S220*(S220*COVAR4(5, 1, 1)-
     &   COVAR4(5, 1, IND1))
C (0,32)
         EC220 = SQRT(MAX(0., EC220))*RC220/NVOL
C (0,33)
C
         CALL STAT2(17+5*NDIST+IND, C222, EC222, RC222, 0)
C (0,34)
         C222 = C222/NVOL
C (0,35)
         EC222 = EC222/NVOL
C (0,36)
C
         CALL STAT2(17+2*NDIST+IND, C110I, EC110I, RC110I, 0)
C (0,37)
         C110I = (C110I-S110I**2)/NVOL
C (0,38)
         EC110I = COVAR4(3, IND1, IND1)+4.*S110I*(S110I*COVAR4(3, 1, 
     &   1)-COVAR4(3, 1, IND1))
C (0,39)
         EC110I = SQRT(MAX(0., EC110I))*RC110I/NVOL
C (0,40)
C
         CALL STAT2(17+3*NDIST+IND, C112I, EC112I, RC112I, 0)
C (0,41)
         C112I = C112I/NVOL
C (0,42)
         EC112I = EC112I/NVOL
C (0,43)
C
         CALL STAT2(17+6*NDIST+IND, C220I, EC220I, RC220I, 0)
C (0,44)
         C220I = (C220I-S220I**2)/NVOL
C (0,45)
         EC220I = COVAR4(7, IND1, IND1)+4.*S220I*(S220I*COVAR4(7, 1, 
     &   1)-COVAR4(7, 1, IND1))
C (0,46)
         EC220I = SQRT(MAX(0., EC220I))*RC220I/NVOL
C (0,47)
C
         CALL STAT2(17+7*NDIST+IND, C222I, EC222I, RC222I, 0)
C (0,48)
         C222I = C222I/NVOL
C (0,49)
         EC222I = EC222I/NVOL
C (0,50)
C
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,51)
C
      RETURN
C     END BLOCK
      END
C*************************GEOM****************************
C
C     COMPUTE GEOMETRY VECTORS
C
      SUBROUTINE GEOM
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
C
      DIMENSION LHALF(4),IBASE(4),JUMP(4)
      DIMENSION IX(4),IUP(4),IDN(4),ISTEP(4)
      LOGICAL LZ(4)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     COMPUTE SOME BASIC PARAMETERS
C
      NDSP = NDIM-1
C (0,3)
C
      NPTS = 1
C (0,4)
      LVEC = 1
C (0,5)
!     INITIALLY: DO 10
      DO I = 1, NDIM
C (0,6)
C        BEGIN BLOCK
C (0,7)
         IF (MOD(LSIZE(I), 2).NE.0) THEN
C (0,8)
            STOP
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,10)
         NVOL = NPTS
C (0,11)
         NPTS = NPTS*LSIZE(I)
C (0,12)
         LHALF(I) = LSIZE(I)/2
C (0,13)
         LVEC = LVEC*LHALF(I)
C (0,14)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,15)
C
      NLINKS = NPTS*NDIM
C (0,16)
      NPLPP = NDIM*(NDIM-1)/2
C (0,17)
      NPLAQS = NPTS*NPLPP
C (0,18)
C
C     COMPUTE THE VECTORS  NEWLAT(..)  AND  ICODE(..)
C
C        NEWLAT(ILAT,I1)  DETERMINES THE INDEX OF THE SUB-LATTICE
C              REACHED FROM  ILAT  IN DIRECTION  I1
C        ICODE(ILAT,I1)  CONTAINS THE INDEX OF THE PERMUTATION VECTOR
C              INDPBC  NEEDED ON SUB-LATTICE  ILAT  FOR A STEP  I1
C              ICODE=0 IF NO PERMUTATION IS NEEDED
C        I1 = +/-1,...,+/-NDIM
C
!     INITIALLY: DO 20
      DO I = 1, NDIM
C (0,19)
C        BEGIN BLOCK
C (0,20)
         ISTEP(I) = 2**(I-1)
C (0,21)
         LZ(I) = .FALSE.
C (0,22)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,23)
C
      ILAT = 0
C (0,24)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
100   CONTINUE
C (1,3)
      ILAT = ILAT+1
C (1,4)
C
      NEWLAT(ILAT,0) = -1
C (1,5)
      ICODE(ILAT,0) = -1
C (1,6)
C
!     INITIALLY: DO 110
      DO I1 = 1, NDIM
C (1,7)
C        BEGIN BLOCK
C (1,8)
C
         NEWLAT(ILAT,I1) = ILAT+ISTEP(I1)
C (1,9)
         NEWLAT(ILAT,-I1) = ILAT+ISTEP(I1)
C (1,10)
C
         IF (LZ(I1)) THEN
C (1,11)
C           BEGIN BLOCK
C (1,12)
            ICODE(ILAT,I1) = I1
C (1,13)
            ICODE(ILAT,-I1) = 0
C           END BLOCK
         ELSE
C (1,14)
C           BEGIN BLOCK
C (1,15)
            ICODE(ILAT,I1) = 0
C (1,16)
            ICODE(ILAT,-I1) = NDIM+I1
C           END BLOCK
         ENDIF
C (1,17)
C
110      CONTINUE
C        END BLOCK
      ENDDO
C (1,18)
      I = 1
C     END BLOCK
99988 CONTINUE
C (2,1)
C
C     DO loop 190 with exit had to be desugared
      IF (I.GT.NDIM) GOTO 99989
C (12,1)
C     BEGIN BLOCK
C (12,2)
      LZ(I) = .NOT.LZ(I)
C (12,3)
      ISTEP(I) = -ISTEP(I)
C     END BLOCK
C (13,1)
      IF (LZ(I)) GOTO 100
C (14,1)
C     BEGIN BLOCK
C (14,2)
190   CONTINUE
C (14,3)
      I = I+1
C     END BLOCK
      GOTO 99988
99989 CONTINUE
C (3,1)
C     BEGIN BLOCK
C (3,2)
C
C     COMPUTE THE INDEX VECTORS  INDPBC(...)  FOR PERMUTATIONS OF
C              VECTORS SUBJECT TO PERIODIC BOUNDARY CONDITIONS
C         INDPBC(IPT,IND)  CONTAINS THE LOCATION, WITHIN ITS VECTOR,
C              OF THE NEIGHBOUR OF THE (BLOCKED) POINT  IPT .
C              THE SHIFT  +/-I1  IS CODED IN  IND  AS DEFINED
C              DURING THE CONSTRUCTION OF THE ARRAY  ICODE(...) .
C
      IBASE(1) = 1
C (3,3)
!     INITIALLY: DO 210
      DO I = 2, NDIM
C (3,4)
C        BEGIN BLOCK
C (3,5)
         IBASE(I) = IBASE(I-1)*LHALF(I-1)
C (3,6)
         JUMP(I-1) = IBASE(I)-IBASE(I-1)
C (3,7)
210      CONTINUE
C        END BLOCK
      ENDDO
C (3,8)
      JUMP(NDIM) = IBASE(NDIM)*(LHALF(NDIM)-1)
C (3,9)
C
!     INITIALLY: DO 220
      DO I = 1, NDIM
C (3,10)
C        BEGIN BLOCK
C (3,11)
         IUP(I) = IBASE(I)
C (3,12)
         IDN(I) = JUMP(I)
C (3,13)
         IX(I) = 1
C (3,14)
220      CONTINUE
C        END BLOCK
      ENDDO
C (3,15)
      IPT = 0
C     END BLOCK
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
300   CONTINUE
C (4,3)
      IPT = IPT+1
C (4,4)
C
!     INITIALLY: DO 310
      DO I1 = 1, NDIM
C (4,5)
C        BEGIN BLOCK
C (4,6)
         INDPBC(IPT,I1) = IPT+IUP(I1)
C (4,7)
         INDPBC(IPT,NDIM+I1) = IPT+IDN(I1)
C (4,8)
310      CONTINUE
C        END BLOCK
      ENDDO
C (4,9)
      I = 1
C     END BLOCK
99986 CONTINUE
C (5,1)
C
C     DO loop 390 with exit had to be desugared
      IF (I.GT.NDIM) RETURN
C (7,1)
C     BEGIN BLOCK
C (7,2)
      IX(I) = IX(I)+1
C (7,3)
      IDN(I) = -IBASE(I)
C     END BLOCK
C (8,1)
      IF (IX(I).LT.LHALF(I)) GOTO 300
C (9,1)
      IF (IX(I).EQ.LHALF(I)) GOTO 99987
C (11,1)
C     BEGIN BLOCK
C (11,2)
      IX(I) = 1
C (11,3)
      IUP(I) = IBASE(I)
C (11,4)
      IDN(I) = JUMP(I)
C (11,5)
390   CONTINUE
C (11,6)
      I = I+1
C     END BLOCK
      GOTO 99986
99987 CONTINUE
C (10,1)
      IUP(I) = -JUMP(I)
      GOTO 300
C (6,1)
C
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
      SUBROUTINE INIT(ISTART)
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U,BETINV
      REAL*8 ZERO,ONE,TWO
      PARAMETER(ZERO=0.,ONE=1.,TWO=2.)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      ITER = 0
C (0,3)
      IFREQ = 0
C (0,4)
      NERR2 = 0
C (0,5)
      NERR4 = 0
C (0,6)
      CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (0,7)
      CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C (0,8)
      WRITE (6, '(//'' RANDOM START'')') 
C (0,9)
!     INITIALLY: DO 30
      DO I1 = 1, NDIM
C (0,10)
!     INITIALLY: DO 30
         DO ILAT = 1, 2**NDIM
C (0,11)
!     INITIALLY: DO 30
            DO I30 = 1, 4
C (0,12)
C              BEGIN BLOCK
C (0,13)
               CALL TRNGV1(LVEC)
C (0,14)
30             CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
      ENDDO
C (0,15)
C
      RETURN
C     END BLOCK
      END
C*************************INT2V*****************************
C
C     COMPUTE THE 2-LINK INTEGRAL EXPRESSION FOR THE CORNER
C          (VECTORISED VERSION)
C
      SUBROUTINE INT2V(B1,B2,W,AV)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR2=1.E-7,NDMAX2=10)
C
      REAL*8 BCOEFF,BETINV,RD,SD
      REAL*8 B1,B2,W,AV,TRACE,BSQ,D1,D2,SUM1,SUM2,PHID,CHID
      REAL*8 C1,C2,F4,DENOM
      REAL*8 B1SQ,B2SQ,D,PHIOLD,F2,F3,ERR2,ZERO,ONE
      PARAMETER(ERR2=ERROR2,ZERO=0.D0,ONE=1.D0)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION B1(MAXVEC,0:3),B2(MAXVEC,0:3)
      DIMENSION W(MAXVEC,0:3),AV(MAXVEC,0:3)
C
      DIMENSION TRACE(MAXVEC),BSQ(MAXVEC)
      DIMENSION I1(MAXVEC),I2(MAXVEC),D1(MAXVEC),D2(MAXVEC)
      DIMENSION SUM1(MAXVEC),SUM2(MAXVEC),PHID(MAXVEC),CHID(MAXVEC)
      DIMENSION C1(MAXVEC),C2(MAXVEC)
      DIMENSION F4(MAXVEC),DENOM(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     PRODUCT B2*B1
C
      CALL MATMAT(B2, B1, AV, LVEC, MAXVEC)
C (0,3)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
C
         TRACE(I) = AV(I,0)*W(I,0)+AV(I,1)*W(I,1)+AV(I,2)*W(I,2)+AV(I
     &   ,3)*W(I,3)
C (0,6)
C
         B1SQ = B1(I,0)**2+B1(I,1)**2+B1(I,2)**2+B1(I,3)**2
C (0,7)
         B2SQ = B2(I,0)**2+B2(I,1)**2+B2(I,2)**2+B2(I,3)**2
C (0,8)
C
         BSQ(I) = B1SQ*B2SQ
C (0,9)
C
         D1(I) = BCOEFF*B1SQ
C (0,10)
         I1(I) = D1(I)
C (0,11)
         D1(I) = D1(I)-I1(I)
C (0,12)
C
         D2(I) = BCOEFF*B2SQ
C (0,13)
         I2(I) = D2(I)
C (0,14)
         D2(I) = D2(I)-I2(I)
C (0,15)
C
C     INITIALISE THE SUMS AND RECURSION RELATIONS FOR D=1
C
         SUM1(I) = SD(1)
C (0,16)
         SUM2(I) = ZERO
C (0,17)
         DENOM(I) = ONE
C (0,18)
C
         CHID(I) = ONE
C (0,19)
         PHID(I) = ZERO
C (0,20)
C
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,21)
C
C     LOOP OVER D=2,3,4,...,NDMAX2
C
!     INITIALLY: DO 100
      DO ND = 2, NDMAX2
C (0,22)
C        BEGIN BLOCK
C (0,23)
         D = ND
C (0,24)
C
         CALL BESPOL(ND, I1, D1, C1, LVEC)
C (0,25)
         CALL BESPOL(ND, I2, D2, C2, LVEC)
C (0,26)
C
!     INITIALLY: DO 150
         DO I = 1, LVEC
C (0,27)
C           BEGIN BLOCK
C (0,28)
C
C     RECURSION RELATION FOR  CHI  AND  PHI
C
            PHIOLD = PHID(I)
C (0,29)
            PHID(I) = D*CHID(I)+TRACE(I)*PHID(I)
C (0,30)
            CHID(I) = (TRACE(I)*PHID(I)-BSQ(I)*PHIOLD)/(D-ONE)
C (0,31)
C
C     SUMMATION
C
            F2 = C1(I)*C2(I)
C (0,32)
            F3 = CHID(I)*F2
C (0,33)
            F4(I) = RD(ND)*F3
C (0,34)
            SUM1(I) = SUM1(I)+SD(ND)*F3
C (0,35)
            SUM2(I) = SUM2(I)+RD(ND)*PHID(I)*F2
C (0,36)
            DENOM(I) = DENOM(I)+F4(I)
C (0,37)
C
150         CONTINUE
C           END BLOCK
         ENDDO
C (0,38)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,39)
C
C     END OF LOOP OVER D
C
C     COMPUTE THE CORNER AVERAGE
C
!     INITIALLY: DO 200
      DO I = 1, LVEC
C (0,40)
C        BEGIN BLOCK
C (0,41)
C
         C2(I) = BETINV*SUM2(I)/DENOM(I)
C (0,42)
         C1(I) = SUM1(I)/DENOM(I)-TRACE(I)*C2(I)
C (0,43)
C
         AV(I,0) = C1(I)*W(I,0)+C2(I)*AV(I,0)
C (0,44)
         AV(I,1) = C1(I)*W(I,1)+C2(I)*AV(I,1)
C (0,45)
         AV(I,2) = C1(I)*W(I,2)+C2(I)*AV(I,2)
C (0,46)
         AV(I,3) = C1(I)*W(I,3)+C2(I)*AV(I,3)
C (0,47)
C
         IF (ABS(F4(I)).GT.DENOM(I)*ERR2) THEN
C (0,48)
            NERR2 = NERR2+1
         ELSE
C (0,49)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,50)
C
200      CONTINUE
C        END BLOCK
      ENDDO
C (0,51)
      RETURN
C     END BLOCK
      END
C*************************INT4V*****************************
C
C     COMPUTE THE 4-LINK INTEGRAL EXPRESSIONS FOR THE
C          PLAQUETTE AVERAGE (VECTORISED VERSION)
C
      SUBROUTINE INT4V(B1,B2,B3,B4,PLINT)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR4=1.E-7,NDMAX4=8)
C
      REAL*8 BCOEFF,BETINV,RD,SD
      REAL*8 B1,B2,B3,B4,PLINT,W1,W2,TRACE,BSQ,D1,D2,D3,D4
      REAL*8 SUM1,SUM2,CHIDM1,CHID,BES1,BES2,BES3,BES4,F6
      REAL*8 B1SQ,B2SQ,B3SQ,B4SQ,CHIOLD,F5,ERR4,ZERO,ONE,TWO
      PARAMETER(ERR4=ERROR4,ZERO=0.D0,ONE=1.D0,TWO=2.D0)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION B1(MAXVEC,0:3),B2(MAXVEC,0:3)
      DIMENSION B3(MAXVEC,0:3),B4(MAXVEC,0:3),PLINT(MAXVEC)
C
      DIMENSION W1(MAXVEC,0:3),W2(MAXVEC,0:3),TRACE(MAXVEC),BSQ(MAXVEC)
      DIMENSION D1(MAXVEC),D2(MAXVEC),D3(MAXVEC),D4(MAXVEC)
      DIMENSION I1(MAXVEC),I2(MAXVEC),I3(MAXVEC),I4(MAXVEC)
      DIMENSION SUM1(MAXVEC),SUM2(MAXVEC),CHIDM1(MAXVEC),CHID(MAXVEC)
      DIMENSION BES1(MAXVEC),BES2(MAXVEC),BES3(MAXVEC),BES4(MAXVEC)
      DIMENSION F6(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C+++++EQUIVALENCE (BES1,W1(1,0)),(BES2,W1(1,1))
C+++++EQUIVALENCE (BES3,W1(1,2)),(BES4,W1(1,3))
C+++++EQUIVALENCE (D1,W2(1,0)),(D2,W2(1,1))
C+++++EQUIVALENCE (D3,W2(1,2)),(D4,W2(1,3))
C
C     PRODUCT B2*B1
C
      CALL MATMAT(B2, B1, W1, LVEC, MAXVEC)
C (0,3)
C
C     PRODUCT B3*B4
C
      CALL MATMAT(B3, B4, W2, LVEC, MAXVEC)
C (0,4)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,5)
C        BEGIN BLOCK
C (0,6)
C
         TRACE(I) = TWO*(W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I,2)*W2(I
     &   ,2)+W1(I,3)*W2(I,3))
C (0,7)
C
         B1SQ = B1(I,0)**2+B1(I,1)**2+B1(I,2)**2+B1(I,3)**2
C (0,8)
         B2SQ = B2(I,0)**2+B2(I,1)**2+B2(I,2)**2+B2(I,3)**2
C (0,9)
         B3SQ = B3(I,0)**2+B3(I,1)**2+B3(I,2)**2+B3(I,3)**2
C (0,10)
         B4SQ = B4(I,0)**2+B4(I,1)**2+B4(I,2)**2+B4(I,3)**2
C (0,11)
C
         BSQ(I) = B1SQ*B2SQ*B3SQ*B4SQ
C (0,12)
C
         D1(I) = BCOEFF*B1SQ
C (0,13)
         I1(I) = D1(I)
C (0,14)
         D1(I) = D1(I)-I1(I)
C (0,15)
C
         D2(I) = BCOEFF*B2SQ
C (0,16)
         I2(I) = D2(I)
C (0,17)
         D2(I) = D2(I)-I2(I)
C (0,18)
C
         D3(I) = BCOEFF*B3SQ
C (0,19)
         I3(I) = D3(I)
C (0,20)
         D3(I) = D3(I)-I3(I)
C (0,21)
C
         D4(I) = BCOEFF*B4SQ
C (0,22)
         I4(I) = D4(I)
C (0,23)
         D4(I) = D4(I)-I4(I)
C (0,24)
C
C     INITIALISE THE SUMS AND RECURSION RELATIONS FOR D=1
C
         SUM1(I) = SD(1)
C (0,25)
         SUM2(I) = ONE
C (0,26)
C
         CHIDM1(I) = ZERO
C (0,27)
         CHID(I) = ONE
C (0,28)
C
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)
C
C     LOOP OVER D=2,3,4,...,NDMAX4
C
!     INITIALLY: DO 100
      DO ND = 2, NDMAX4
C (0,30)
C        BEGIN BLOCK
C (0,31)
C
         CALL BESPOL(ND, I1, D1, BES1, LVEC)
C (0,32)
         CALL BESPOL(ND, I2, D2, BES2, LVEC)
C (0,33)
         CALL BESPOL(ND, I3, D3, BES3, LVEC)
C (0,34)
         CALL BESPOL(ND, I4, D4, BES4, LVEC)
C (0,35)
C
!     INITIALLY: DO 150
         DO I = 1, LVEC
C (0,36)
C           BEGIN BLOCK
C (0,37)
C
C     RECURSION RELATION FOR  CHI
C
            CHIOLD = CHIDM1(I)
C (0,38)
            CHIDM1(I) = CHID(I)
C (0,39)
            CHID(I) = TRACE(I)*CHID(I)-BSQ(I)*CHIOLD
C (0,40)
C
C     SUMMATION
C
            F5 = CHID(I)*BES1(I)*BES2(I)*BES3(I)*BES4(I)
C (0,41)
            F6(I) = RD(ND)*F5
C (0,42)
            SUM1(I) = SUM1(I)+SD(ND)*F5
C (0,43)
            SUM2(I) = SUM2(I)+F6(I)
C (0,44)
150         CONTINUE
C           END BLOCK
         ENDDO
C (0,45)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,46)
C
C     END OF LOOP OVER D
C
!     INITIALLY: DO 200
      DO I = 1, LVEC
C (0,47)
C        BEGIN BLOCK
C (0,48)
         PLINT(I) = SUM1(I)/SUM2(I)
C (0,49)
         IF (ABS(F6(I)).GT.SUM2(I)*ERR4) THEN
C (0,50)
            NERR4 = NERR4+1
         ELSE
C (0,51)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,52)
200      CONTINUE
C        END BLOCK
      ENDDO
C (0,53)
      RETURN
C     END BLOCK
      END
C*************************INTACT************************************
C
C     COMPUTE THE (VECTORISED) PRODUCT OF THREE INTERACTING NEIGHBOURS
C          OF A LINK  (ILAT2,I1)  AROUND THE PLAQUETTE  (I1,I2)
C       I1=1,..,NDIM
C       I2=+/-1,..,+/-NDIM
C
      SUBROUTINE INTACT(ILAT2,I1,I2,PROD)
*     *****************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U
      REAL*8 PROD,W1,W2
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION PROD(MAXVEC,0:3),W1(MAXVEC,0:3),W2(MAXVEC,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     THE SUB-LATTICE POINTS ARE LABELLED AS FOLLOWS:
C
C               I1
C                .
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . ABS(I2)
C
C     ILAT2  REFERS TO POINT '2'
C     '2-5' IS THE CENTRAL LINK  (ILAT2,I1)
C
C     THE PRODUCT  '2-3-6-5'  (FOR POSITIVE  I2)
C              OR  '2-1-4-5'  (FOR NEGATIVE  I2)
C        IS RETURNED IN  PROD(...)
C
      IF (I2.GT.0) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
C
C     CASE  I1 POSITIVE , I2 POSITIVE
C
         ILAT3 = NEWLAT(ILAT2,I2)
C (0,5)
         ILAT5 = NEWLAT(ILAT2,I1)
C (0,6)
         IC23 = ICODE(ILAT2,I2)
C (0,7)
         IC25 = ICODE(ILAT2,I1)
C (0,8)
C
         IF (IC23.EQ.0) THEN
C (0,9)
            CALL MATMAT(U(1,0,ILAT3,I1), U(1,0,ILAT2,I2), W1, LVEC, 
     &      MAXVEC)
         ELSE
C (0,10)
C           BEGIN BLOCK
C (0,11)
            CALL PERM(U(1,0,ILAT3,I1), IC23, W2, LVEC)
C (0,12)
            CALL MATMAT(W2, U(1,0,ILAT2,I2), W1, LVEC, MAXVEC)
C           END BLOCK
         ENDIF
C (0,13)
C
         IF (IC25.EQ.0) THEN
C (0,14)
            CALL ADJMAT(U(1,0,ILAT5,I2), W1, PROD, LVEC, MAXVEC)
         ELSE
C (0,15)
C           BEGIN BLOCK
C (0,16)
            CALL PERM(U(1,0,ILAT5,I2), IC25, W2, LVEC)
C (0,17)
            CALL ADJMAT(W2, W1, PROD, LVEC, MAXVEC)
C           END BLOCK
         ENDIF
C
C        END BLOCK
      ELSE
C (0,19)
C        BEGIN BLOCK
C (0,20)
C
C     CASE  I1 POSITIVE , I2 NEGATIVE
C
         ILAT1 = NEWLAT(ILAT2,I2)
C (0,21)
         ILAT4 = NEWLAT(ILAT1,I1)
C (0,22)
         IC21 = ICODE(ILAT2,I2)
C (0,23)
         IC14 = ICODE(ILAT1,I1)
C (0,24)
C
         CALL MATADJ(U(1,0,ILAT1,I1), U(1,0,ILAT1,-I2), W1, LVEC, 
     &   MAXVEC)
C (0,25)
         IF (IC14.EQ.0) THEN
C (0,26)
            IF (IC21.EQ.0) THEN
C (0,27)
               CALL MATMAT(U(1,0,ILAT4,-I2), W1, PROD, LVEC, MAXVEC)
            ELSE
C (0,28)
C              BEGIN BLOCK
C (0,29)
               CALL MATMAT(U(1,0,ILAT4,-I2), W1, W2, LVEC, MAXVEC)
C (0,30)
               CALL PERM(W2, IC21, PROD, LVEC)
C              END BLOCK
            ENDIF
         ELSE
C (0,31)
            IF (IC21.EQ.0) THEN
C (0,32)
C              BEGIN BLOCK
C (0,33)
               CALL PERM(U(1,0,ILAT4,-I2), IC14, W2, LVEC)
C (0,34)
               CALL MATMAT(W2, W1, PROD, LVEC, MAXVEC)
C              END BLOCK
            ELSE
C (0,35)
C              BEGIN BLOCK
C (0,36)
               CALL PERM(U(1,0,ILAT4,-I2), IC14, PROD, LVEC)
C (0,37)
               CALL MATMAT(PROD, W1, W2, LVEC, MAXVEC)
C (0,38)
               CALL PERM(W2, IC21, PROD, LVEC)
C              END BLOCK
            ENDIF
         ENDIF
C
C        END BLOCK
      ENDIF
C (0,40)
C
      RETURN
C     END BLOCK
      END
C*************************LOOPS**************************
C
C     MEASUREMENT OF SUMS OF LOOPS (VECTORISED)
C          W11SUM(IT,IPLANE) : NAIVE PLAQUETTE EXPRESSION
C          W11INT(IT,IPLANE) : 4-LINK INTEGRAL
C          W22SUM(IT,IPLANE) : NAIVE 2X2 LOOP
C          W22INT(IT,IPLANE) : 2X2 LOOP INTEGRAL (4 CORNERS)
C        IT: TIME SLICE
C        IPLANE=1,2,...  FOR SPATIAL PLANES (1,2),(1,3),...
C
      SUBROUTINE LOOPS(W11SUM,W11INT,W22SUM,W22INT)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(NST=(4-1)*(4-2),MAXSL=2**(4-1))
C
      REAL*8 U,BETINV
      REAL*8 R,S,W1,W2,WP,WR,WL,W,WLOOP1,WLOOP2
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION R(MAXVEC,0:3,MAXSL,NST),S(MAXVEC,0:3,MAXSL,NST)
      DIMENSION W1(MAXVEC,0:3),W2(MAXVEC,0:3),WP(MAXVEC,0:3)
      DIMENSION WR(MAXVEC,0:3),WL(MAXVEC,0:3),W(MAXVEC,0:3)
      DIMENSION WLOOP1(MAXVEC),WLOOP2(MAXVEC)
C
      DIMENSION MPL(4,4),MPLANE(4,4)
C
      REAL*8 W11SUM(20,*),W11INT(20,*)
      REAL*8 W22SUM(20,*),W22INT(20,*)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      NT = LSIZE(NDIM)
C (0,3)
      NSPLPP = NDSP*(NDSP-1)/2
C (0,4)
      LSPVEC = NVOL/(2**NDSP)
C (0,5)
C
      BETINV = 1.D0/BETA
C (0,6)
C
      IPLANE = 0
C (0,7)
!     INITIALLY: DO 10
      DO I1 = 1, NDSP-1
C (0,8)
!     INITIALLY: DO 10
         DO I2 = I1+1, NDSP
C (0,9)
C           BEGIN BLOCK
C (0,10)
            IPLANE = IPLANE+1
C (0,11)
            MPLANE(I1,I2) = IPLANE
C (0,12)
            MPLANE(I2,I1) = IPLANE
C (0,13)
10          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,14)
C
      I1I2 = 0
C (0,15)
!     INITIALLY: DO 20
      DO I1 = 1, NDSP
C (0,16)
!     INITIALLY: DO 20
         DO I2 = 1, NDSP
C (0,17)
C           BEGIN UNSTRUCTURED
C (1,1)
            IF (I1.EQ.I2) GOTO 20
C (3,1)
C           BEGIN BLOCK
C (3,2)
            I1I2 = I1I2+1
C (3,3)
            MPL(I1,I2) = I1I2
C           END BLOCK
C (2,1)
20          CONTINUE
C           END UNSTRUCTURED
         ENDDO
      ENDDO
C (0,18)
C
!     INITIALLY: DO 40
      DO IPLANE = 1, NSPLPP
C (0,19)
!     INITIALLY: DO 40
         DO IT = 1, NT
C (0,20)
C           BEGIN BLOCK
C (0,21)
            W11SUM(IT,IPLANE) = 0.D0
C (0,22)
            W11INT(IT,IPLANE) = 0.D0
C (0,23)
            W22SUM(IT,IPLANE) = 0.D0
C (0,24)
            W22INT(IT,IPLANE) = 0.D0
C (0,25)
40          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,26)
C
C     LOOP OVER SUB-LATTICES WITH ODD AND EVEN TIME-SLICES
C
!     INITIALLY: DO 900
      DO IFIRST = 1, 2
C (0,27)
C        BEGIN BLOCK
C (0,28)
C
         IADD = 0
C (0,29)
         IF (IFIRST.EQ.2) THEN
C (0,30)
            IADD = 2**NDSP
         ELSE
C (0,31)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,32)
C.....................................................
C     COMPUTE THE SPACE-LIKE PRODUCTS R AND S
C
C     LOOP OVER SPATIAL PLAQUETTES (ILAT2,I1,I2)
C
!     INITIALLY: DO 100
         DO ILAT2 = 1, 2**NDSP
C (0,33)
!     INITIALLY: DO 100
            DO I1 = 1, NDSP-1
C (0,34)
!     INITIALLY: DO 100
               DO I2 = I1+1, NDSP
C (0,35)
C                 BEGIN BLOCK
C (0,36)
C
C               I1
C                .
C                .       5   6
C                .       2   3
C                . . . . . . . . . . I2
C
C     ILAT2  REFERS TO POINT '2'
C
                  I1I2 = MPL(I1,I2)
C (0,37)
                  I2I1 = MPL(I2,I1)
C (0,38)
C
                  ILAT3 = NEWLAT(ILAT2,I2)
C (0,39)
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,40)
C
                  IU2 = ILAT2+IADD
C (0,41)
                  IU3 = ILAT3+IADD
C (0,42)
                  IU5 = ILAT5+IADD
C (0,43)
C
                  IC23 = ICODE(ILAT2,I2)
C (0,44)
                  IC25 = ICODE(ILAT2,I1)
C (0,45)
                  IC32 = ICODE(ILAT3,-I2)
C (0,46)
                  IC52 = ICODE(ILAT5,-I1)
C (0,47)
C
C     PRODUCT '2-3-6' IN W1
C
                  IF (IC23.EQ.0) THEN
C (0,48)
                     CALL MATMAT(U(1,0,IU3,I1), U(1,0,IU2,I2), W1, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,49)
C                    BEGIN BLOCK
C (0,50)
                     CALL PERM(U(1,0,IU3,I1), IC23, WP, LVEC)
C (0,51)
                     CALL MATMAT(WP, U(1,0,IU2,I2), W1, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,52)
C
C     PRODUCT '2-3-6-5' IN R
C
                  IF (IC25.EQ.0) THEN
C (0,53)
                     CALL ADJMAT(U(1,0,IU5,I2), W1, R(1,0,ILAT2,I1I2)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,54)
C                    BEGIN BLOCK
C (0,55)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,56)
                     CALL ADJMAT(WP, W1, R(1,0,ILAT2,I1I2), LVEC, 
     &               MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,57)
C
C     PRODUCT '5-2-3-6' IN S
C
                  IF (IC52.EQ.0) THEN
C (0,58)
                     CALL MATADJ(W1, U(1,0,IU2,I1), S(1,0,ILAT5,I2I1)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,59)
C                    BEGIN BLOCK
C (0,60)
                     CALL MATADJ(W1, U(1,0,IU2,I1), WP, LVEC, MAXVEC)
C (0,61)
                     CALL PERM(WP, IC52, S(1,0,ILAT5,I2I1), LVEC)
C                    END BLOCK
                  ENDIF
C (0,62)
C
C     PRODUCT '2-5-6' IN W2
C
                  IF (IC25.EQ.0) THEN
C (0,63)
                     CALL MATMAT(U(1,0,IU5,I2), U(1,0,IU2,I1), W2, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,64)
C                    BEGIN BLOCK
C (0,65)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,66)
                     CALL MATMAT(WP, U(1,0,IU2,I1), W2, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,67)
C
C     PRODUCT '2-5-6-3' IN R
C
                  IF (IC23.EQ.0) THEN
C (0,68)
                     CALL ADJMAT(U(1,0,IU3,I1), W2, R(1,0,ILAT2,I2I1)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,69)
C                    BEGIN BLOCK
C (0,70)
                     CALL PERM(U(1,0,IU3,I1), IC23, WP, LVEC)
C (0,71)
                     CALL ADJMAT(WP, W2, R(1,0,ILAT2,I2I1), LVEC, 
     &               MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,72)
C
C     PRODUCT '3-2-5-6' IN S
C
                  IF (IC32.EQ.0) THEN
C (0,73)
                     CALL MATADJ(W2, U(1,0,IU2,I2), S(1,0,ILAT3,I1I2)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,74)
C                    BEGIN BLOCK
C (0,75)
                     CALL MATADJ(W2, U(1,0,IU2,I2), WP, LVEC, MAXVEC)
C (0,76)
                     CALL PERM(WP, IC32, S(1,0,ILAT3,I1I2), LVEC)
C                    END BLOCK
                  ENDIF
C (0,77)
C
C     COMPUTE AND ACCUMULATE THE SPATIAL PLAQUETTES
C
!     INITIALLY: DO 110
                  DO I = 1, LVEC
C (0,78)
C                    BEGIN BLOCK
C (0,79)
                     WLOOP1(I) = W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I
     &               ,2)*W2(I,2)+W1(I,3)*W2(I,3)
C (0,80)
110                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,81)
C
                  IPLANE = MPLANE(I1,I2)
C (0,82)
                  N = 0
C (0,83)
!     INITIALLY: DO 120
                  DO IT = IFIRST, NT, 2
C (0,84)
C                    BEGIN BLOCK
C (0,85)
!     INITIALLY: DO 130
                     DO I = 1, LSPVEC
C (0,86)
C                       BEGIN BLOCK
C (0,87)
                        W11SUM(IT,IPLANE) = W11SUM(IT,IPLANE)+DBLE(
     &                  WLOOP1(N+I))
C (0,88)
130                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,89)
                     N = N+LSPVEC
C (0,90)
120                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,91)
C
100               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,92)
C
C     END OF LOOP OVER SPATIAL PLAQUETTES
C.....................................................
C     COMPUTE THE SPACE-LIKE 2X2 LOOPS
C
C     LOOP OVER SPATIAL PLANES (ILAT2,I1,I2)
C
!     INITIALLY: DO 200
         DO ILAT2 = 1, 2**NDSP
C (0,93)
!     INITIALLY: DO 200
            DO I1 = 1, NDSP-1
C (0,94)
!     INITIALLY: DO 200
               DO I2 = I1+1, NDSP
C (0,95)
C                 BEGIN BLOCK
C (0,96)
C
C               I1
C                .    7   8   9
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . I2
C
C     ILAT2  REFERS TO POINT '2'
C
                  I1I2 = MPL(I1,I2)
C (0,97)
C
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,98)
                  IC25 = ICODE(ILAT2,I1)
C (0,99)
C
C     PRODUCT '5-4-1-2-3-6-5' IN W1
C
                  CALL MATADJ(R(1,0,ILAT2,I1I2), S(1,0,ILAT2,I1I2), 
     &            W1, LVEC, MAXVEC)
C (0,100)
C
C     PRODUCT '5-4-7-8-9-6-5' IN W2
C
                  IF (IC25.EQ.0) THEN
C (0,101)
                     CALL ADJMAT(R(1,0,ILAT5,I1I2), S(1,0,ILAT5,I1I2)
     &               , W2, LVEC, MAXVEC)
                  ELSE
C (0,102)
C                    BEGIN BLOCK
C (0,103)
                     CALL ADJMAT(R(1,0,ILAT5,I1I2), S(1,0,ILAT5,I1I2)
     &               , WP, LVEC, MAXVEC)
C (0,104)
                     CALL PERM(WP, IC25, W2, LVEC)
C                    END BLOCK
                  ENDIF
C (0,105)
C
C     COMPUTE AND ACCUMULATE THE SPATIAL 2X2 LOOPS
C
!     INITIALLY: DO 210
                  DO I = 1, LVEC
C (0,106)
C                    BEGIN BLOCK
C (0,107)
                     WLOOP2(I) = W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I
     &               ,2)*W2(I,2)+W1(I,3)*W2(I,3)
C (0,108)
210                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,109)
C
                  IPLANE = MPLANE(I1,I2)
C (0,110)
                  N = 0
C (0,111)
!     INITIALLY: DO 220
                  DO IT = IFIRST, NT, 2
C (0,112)
C                    BEGIN BLOCK
C (0,113)
!     INITIALLY: DO 230
                     DO I = 1, LSPVEC
C (0,114)
C                       BEGIN BLOCK
C (0,115)
                        W22SUM(IT,IPLANE) = W22SUM(IT,IPLANE)+DBLE(
     &                  WLOOP2(N+I))
C (0,116)
230                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,117)
                     N = N+LSPVEC
C (0,118)
220                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,119)
C
200               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,120)
C
C     END OF LOOP OVER SPATIAL PLANES
C..........................................................
C     COMPUTE THE TIME-LIKE PRODUCTS
C       AND REPLACE  R  AND  S  BY THE COMPLEMENTARY
C       BACKGROUND EXPRESSIONS  (SUM - R)  AND  (SUM - S)
C
C     LOOP OVER SPATIAL LINKS (ILAT,I1)
C
!     INITIALLY: DO 300
         DO ILAT = 1, 2**NDSP
C (0,121)
!     INITIALLY: DO 300
            DO I1 = 1, NDSP
C (0,122)
C              BEGIN BLOCK
C (0,123)
C
               CALL INTACT(ILAT+IADD, I1, NDIM, W1)
C (0,124)
               CALL INTACT(ILAT+IADD, I1, -NDIM, W2)
C (0,125)
!     INITIALLY: DO 310
               DO I = 1, LVEC
C (0,126)
C                 BEGIN BLOCK
C (0,127)
                  W1(I,0) = W1(I,0)+W2(I,0)
C (0,128)
                  W1(I,1) = W1(I,1)+W2(I,1)
C (0,129)
                  W1(I,2) = W1(I,2)+W2(I,2)
C (0,130)
                  W1(I,3) = W1(I,3)+W2(I,3)
C (0,131)
310               CONTINUE
C                 END BLOCK
               ENDDO
C (0,132)
C
!     INITIALLY: DO 320
               DO I2 = 1, NDSP
C (0,133)
C                 BEGIN UNSTRUCTURED
C (4,1)
                  IF (I1.EQ.I2) GOTO 320
C (6,1)
C                 BEGIN BLOCK
C (6,2)
                  I1I2 = MPL(I1,I2)
C (6,3)
!     INITIALLY: DO 321
                  DO I = 1, LVEC
C (6,4)
C                    BEGIN BLOCK
C (6,5)
                     W1(I,0) = W1(I,0)+R(I,0,ILAT,I1I2)+S(I,0,ILAT,
     &               I1I2)
C (6,6)
                     W1(I,1) = W1(I,1)+R(I,1,ILAT,I1I2)+S(I,1,ILAT,
     &               I1I2)
C (6,7)
                     W1(I,2) = W1(I,2)+R(I,2,ILAT,I1I2)+S(I,2,ILAT,
     &               I1I2)
C (6,8)
                     W1(I,3) = W1(I,3)+R(I,3,ILAT,I1I2)+S(I,3,ILAT,
     &               I1I2)
C (6,9)
321                  CONTINUE
C                    END BLOCK
                  ENDDO
C                 END BLOCK
C (5,1)
320               CONTINUE
C                 END UNSTRUCTURED
               ENDDO
C (0,134)
C
!     INITIALLY: DO 330
               DO I2 = 1, NDSP
C (0,135)
C                 BEGIN UNSTRUCTURED
C (7,1)
                  IF (I1.EQ.I2) GOTO 330
C (9,1)
C                 BEGIN BLOCK
C (9,2)
                  I1I2 = MPL(I1,I2)
C (9,3)
!     INITIALLY: DO 331
                  DO I = 1, LVEC
C (9,4)
C                    BEGIN BLOCK
C (9,5)
                     R(I,0,ILAT,I1I2) = W1(I,0)-R(I,0,ILAT,I1I2)
C (9,6)
                     R(I,1,ILAT,I1I2) = W1(I,1)-R(I,1,ILAT,I1I2)
C (9,7)
                     R(I,2,ILAT,I1I2) = W1(I,2)-R(I,2,ILAT,I1I2)
C (9,8)
                     R(I,3,ILAT,I1I2) = W1(I,3)-R(I,3,ILAT,I1I2)
C (9,9)
                     S(I,0,ILAT,I1I2) = W1(I,0)-S(I,0,ILAT,I1I2)
C (9,10)
                     S(I,1,ILAT,I1I2) = W1(I,1)-S(I,1,ILAT,I1I2)
C (9,11)
                     S(I,2,ILAT,I1I2) = W1(I,2)-S(I,2,ILAT,I1I2)
C (9,12)
                     S(I,3,ILAT,I1I2) = W1(I,3)-S(I,3,ILAT,I1I2)
C (9,13)
331                  CONTINUE
C                    END BLOCK
                  ENDDO
C                 END BLOCK
C (8,1)
330               CONTINUE
C                 END UNSTRUCTURED
               ENDDO
C (0,136)
C
300            CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
C (0,137)
C
C     END OF LOOP OVER SPATIAL LINKS
C..........................................................
C     COMPUTE THE SPACE-LIKE 1X1 AND 2X2 INTEGRALS
C
C     LOOP OVER SPATIAL PLANES (ILAT1,I1,I2)
C
!     INITIALLY: DO 400
         DO ILAT1 = 1, 2**NDSP
C (0,138)
!     INITIALLY: DO 400
            DO I1 = 1, NDSP-1
C (0,139)
!     INITIALLY: DO 400
               DO I2 = I1+1, NDSP
C (0,140)
C                 BEGIN BLOCK
C (0,141)
C
C               I1
C                .    7   8   9
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . I2
C
C     ILAT1  REFERS TO POINT '1'
C
                  I1I2 = MPL(I1,I2)
C (0,142)
                  I2I1 = MPL(I2,I1)
C (0,143)
C
                  ILAT2 = NEWLAT(ILAT1,I2)
C (0,144)
                  ILAT3 = NEWLAT(ILAT2,I2)
C (0,145)
                  ILAT4 = NEWLAT(ILAT1,I1)
C (0,146)
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,147)
                  ILAT6 = NEWLAT(ILAT3,I1)
C (0,148)
                  ILAT7 = NEWLAT(ILAT4,I1)
C (0,149)
                  ILAT8 = NEWLAT(ILAT5,I1)
C (0,150)
C
                  IU2 = ILAT2+IADD
C (0,151)
                  IU4 = ILAT4+IADD
C (0,152)
                  IU5 = ILAT5+IADD
C (0,153)
C
                  IC12 = ICODE(ILAT1,I2)
C (0,154)
                  IC14 = ICODE(ILAT1,I1)
C (0,155)
                  IC23 = ICODE(ILAT2,I2)
C (0,156)
                  IC25 = ICODE(ILAT2,I1)
C (0,157)
                  IC45 = ICODE(ILAT4,I2)
C (0,158)
                  IC47 = ICODE(ILAT4,I1)
C (0,159)
                  IC56 = ICODE(ILAT5,I2)
C (0,160)
                  IC58 = ICODE(ILAT5,I1)
C (0,161)
C
C     COMPUTE THE PLAQUETTE INTEGRAL FOR   4  5
C                                          1  2
C
                  IF (IC12.EQ.0) THEN
C (0,162)
                     IF (IC14.EQ.0) THEN
C (0,163)
                        CALL INT4V(R(1,0,ILAT1,I2I1), S(1,0,ILAT2,
     &                  I1I2), S(1,0,ILAT4,I2I1), R(1,0,ILAT1,I1I2), 
     &                  WLOOP1)
                     ELSE
C (0,164)
C                       BEGIN BLOCK
C (0,165)
                        CALL PERM(S(1,0,ILAT4,I2I1), IC14, WP, LVEC)
C (0,166)
                        CALL INT4V(R(1,0,ILAT1,I2I1), S(1,0,ILAT2,
     &                  I1I2), WP, R(1,0,ILAT1,I1I2), WLOOP1)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,167)
C                    BEGIN BLOCK
C (0,168)
                     CALL PERM(S(1,0,ILAT2,I1I2), IC12, W1, LVEC)
C (0,169)
                     IF (IC14.EQ.0) THEN
C (0,170)
                        CALL INT4V(R(1,0,ILAT1,I2I1), W1, S(1,0,ILAT4
     &                  ,I2I1), R(1,0,ILAT1,I1I2), WLOOP1)
                     ELSE
C (0,171)
C                       BEGIN BLOCK
C (0,172)
                        CALL PERM(S(1,0,ILAT4,I2I1), IC14, WP, LVEC)
C (0,173)
                        CALL INT4V(R(1,0,ILAT1,I2I1), W1, WP, R(1,0,
     &                  ILAT1,I1I2), WLOOP1)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,174)
C
C     COMPUTE THE 2X2 LOOP INTEGRALS
C
C     CORNER '2-3-6' IN  W1  (REFERENCE POINT '2')
C
                  IF (IC25.EQ.0) THEN
C (0,175)
                     CALL MATMAT(U(1,0,IU5,I2), U(1,0,IU2,I1), W, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,176)
C                    BEGIN BLOCK
C (0,177)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,178)
                     CALL MATMAT(WP, U(1,0,IU2,I1), W, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,179)
C
                  IF (IC23.EQ.0) THEN
C (0,180)
                     CALL INT2V(R(1,0,ILAT2,I2I1), S(1,0,ILAT3,I1I2)
     &               , W, W1)
                  ELSE
C (0,181)
C                    BEGIN BLOCK
C (0,182)
                     CALL PERM(S(1,0,ILAT3,I1I2), IC23, WP, LVEC)
C (0,183)
                     CALL INT2V(R(1,0,ILAT2,I2I1), WP, W, W1)
C                    END BLOCK
                  ENDIF
C (0,184)
C
C     CORNER '6-9-8' IN  W2  (REFERENCE POINT '5')
C
                  CALL MATADJ(U(1,0,IU5,I1), U(1,0,IU5,I2), W, LVEC, 
     &            MAXVEC)
C (0,185)
C
!     INITIALLY: DO 450
                  DO I = 1, LVEC
C (0,186)
C                    BEGIN BLOCK
C (0,187)
                     WR(I,0) = S(I,0,ILAT8,I2I1)
C (0,188)
                     WR(I,1) = -S(I,1,ILAT8,I2I1)
C (0,189)
                     WR(I,2) = -S(I,2,ILAT8,I2I1)
C (0,190)
                     WR(I,3) = -S(I,3,ILAT8,I2I1)
C (0,191)
450                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,192)
                  IF (IC58.EQ.0) THEN
C (0,193)
                     IF (IC56.EQ.0) THEN
C (0,194)
                        CALL INT2V(S(1,0,ILAT6,I1I2), WR, W, W2)
                     ELSE
C (0,195)
C                       BEGIN BLOCK
C (0,196)
                        CALL PERM(S(1,0,ILAT6,I1I2), IC56, WP, LVEC)
C (0,197)
                        CALL INT2V(WP, WR, W, W2)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,198)
C                    BEGIN BLOCK
C (0,199)
                     CALL PERM(WR, IC58, WL, LVEC)
C (0,200)
                     IF (IC56.EQ.0) THEN
C (0,201)
                        CALL INT2V(S(1,0,ILAT6,I1I2), WL, W, W2)
                     ELSE
C (0,202)
C                       BEGIN BLOCK
C (0,203)
                        CALL PERM(S(1,0,ILAT6,I1I2), IC56, WP, LVEC)
C (0,204)
                        CALL INT2V(WP, WL, W, W2)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,205)
C
C     PRODUCT '2-3-6-9-8' IN  WR  (REFERENCE POINT '2')
C
                  IF (IC25.EQ.0) THEN
C (0,206)
                     CALL MATMAT(W2, W1, WR, LVEC, MAXVEC)
                  ELSE
C (0,207)
C                    BEGIN BLOCK
C (0,208)
                     CALL PERM(W2, IC25, WP, LVEC)
C (0,209)
                     CALL MATMAT(WP, W1, WR, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,210)
C
C     CORNER '2-1-4' IN  W1  (REFERENCE POINT '1')
C
                  IF (IC12.EQ.0) THEN
C (0,211)
                     IF (IC14.EQ.0) THEN
C (0,212)
                        CALL ADJMAT(U(1,0,IU4,I2), U(1,0,IU2,I1), W, 
     &                  LVEC, MAXVEC)
                     ELSE
C (0,213)
C                       BEGIN BLOCK
C (0,214)
                        CALL PERM(U(1,0,IU4,I2), IC14, WP, LVEC)
C (0,215)
                        CALL ADJMAT(WP, U(1,0,IU2,I1), W, LVEC, 
     &                  MAXVEC)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,216)
C                    BEGIN BLOCK
C (0,217)
                     CALL PERM(U(1,0,IU2,I1), IC12, W2, LVEC)
C (0,218)
                     IF (IC14.EQ.0) THEN
C (0,219)
                        CALL ADJMAT(U(1,0,IU4,I2), W2, W, LVEC, 
     &                  MAXVEC)
                     ELSE
C (0,220)
C                       BEGIN BLOCK
C (0,221)
                        CALL PERM(U(1,0,IU4,I2), IC14, WP, LVEC)
C (0,222)
                        CALL ADJMAT(WP, W2, W, LVEC, MAXVEC)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,223)
C
!     INITIALLY: DO 460
                  DO I = 1, LVEC
C (0,224)
C                    BEGIN BLOCK
C (0,225)
                     WL(I,0) = R(I,0,ILAT1,I2I1)
C (0,226)
                     WL(I,1) = -R(I,1,ILAT1,I2I1)
C (0,227)
                     WL(I,2) = -R(I,2,ILAT1,I2I1)
C (0,228)
                     WL(I,3) = -R(I,3,ILAT1,I2I1)
C (0,229)
460                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,230)
                  CALL INT2V(WL, R(1,0,ILAT1,I1I2), W, W1)
C (0,231)
C
C     CORNER '4-7-8' IN  W2  (REFERENCE POINT '4')
C
                  IF (IC45.EQ.0) THEN
C (0,232)
                     CALL MATMAT(U(1,0,IU5,I1), U(1,0,IU4,I2), W, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,233)
C                    BEGIN BLOCK
C (0,234)
                     CALL PERM(U(1,0,IU5,I1), IC45, WP, LVEC)
C (0,235)
                     CALL MATMAT(WP, U(1,0,IU4,I2), W, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,236)
C
                  IF (IC47.EQ.0) THEN
C (0,237)
                     CALL INT2V(R(1,0,ILAT4,I1I2), S(1,0,ILAT7,I2I1)
     &               , W, W2)
                  ELSE
C (0,238)
C                    BEGIN BLOCK
C (0,239)
                     CALL PERM(S(1,0,ILAT7,I2I1), IC47, WP, LVEC)
C (0,240)
                     CALL INT2V(R(1,0,ILAT4,I1I2), WP, W, W2)
C                    END BLOCK
                  ENDIF
C (0,241)
C
C     PRODUCT '2-1-4-7-8' IN  WL  (REFERENCE POINT '1')
C
                  IF (IC14.EQ.0) THEN
C (0,242)
                     CALL MATMAT(W2, W1, WL, LVEC, MAXVEC)
                  ELSE
C (0,243)
C                    BEGIN BLOCK
C (0,244)
                     CALL PERM(W2, IC14, WP, LVEC)
C (0,245)
                     CALL MATMAT(WP, W1, WL, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,246)
C
C     COMPUTE THE TRACE (REFERENCE POINT '1')
C
                  IF (IC12.EQ.0) THEN
C (0,247)
!     INITIALLY: DO 470
                     DO I = 1, LVEC
C (0,248)
C                       BEGIN BLOCK
C (0,249)
                        WLOOP2(I) = WR(I,0)*WL(I,0)+WR(I,1)*WL(I,1)+
     &                  WR(I,2)*WL(I,2)+WR(I,3)*WL(I,3)
C (0,250)
470                     CONTINUE
C                       END BLOCK
                     ENDDO
                  ELSE
C (0,251)
C                    BEGIN BLOCK
C (0,252)
                     CALL PERM(WR, IC12, WP, LVEC)
C (0,253)
!     INITIALLY: DO 480
                     DO I = 1, LVEC
C (0,254)
C                       BEGIN BLOCK
C (0,255)
                        WLOOP2(I) = WP(I,0)*WL(I,0)+WP(I,1)*WL(I,1)+
     &                  WP(I,2)*WL(I,2)+WP(I,3)*WL(I,3)
C (0,256)
480                     CONTINUE
C                       END BLOCK
                     ENDDO
C                    END BLOCK
                  ENDIF
C (0,257)
C
C     ACCUMULATE THE 1X1 AND 2X2 LOOP INTEGRALS
C
                  IPLANE = MPLANE(I1,I2)
C (0,258)
                  N = 0
C (0,259)
!     INITIALLY: DO 490
                  DO IT = IFIRST, NT, 2
C (0,260)
C                    BEGIN BLOCK
C (0,261)
!     INITIALLY: DO 495
                     DO I = 1, LSPVEC
C (0,262)
C                       BEGIN BLOCK
C (0,263)
                        W11INT(IT,IPLANE) = W11INT(IT,IPLANE)+DBLE(
     &                  WLOOP1(N+I))
C (0,264)
                        W22INT(IT,IPLANE) = W22INT(IT,IPLANE)+DBLE(
     &                  WLOOP2(N+I))
C (0,265)
495                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,266)
                     N = N+LSPVEC
C (0,267)
490                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,268)
C
400               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,269)
C
C     END OF LOOP OVER SPATIAL PLANES
C...........................................................
C
900      CONTINUE
C        END BLOCK
      ENDDO
C (0,270)
C
C     END OF LOOP OVER ODD/EVEN SUB-LATTICES
C
      RETURN
C     END BLOCK
      END
      SUBROUTINE MATADJ(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99995 CONTINUE
C (0,3)
C
C     W = U * ADJ(V)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = -U(I,0)*V(I,1)+U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(I,3)*V
     &   (I,2)
C (0,7)
         W(I,2) = -U(I,0)*V(I,2)+U(I,1)*V(I,3)+U(I,2)*V(I,0)-U(I,3)*V
     &   (I,1)
C (0,8)
         W(I,3) = -U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)+U(I,3)*V
     &   (I,0)
C (0,9)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE MATMAT(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     W = U * V
C
!     INITIALLY: DO 10
      DO I = 1, LVEC
C (0,3)
C        BEGIN BLOCK
C (0,4)
         W(I,0) = U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(I,3)*V(
     &   I,3)
C (0,5)
         W(I,1) = U(I,0)*V(I,1)+U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(I,3)*V(
     &   I,2)
C (0,6)
         W(I,2) = U(I,0)*V(I,2)-U(I,1)*V(I,3)+U(I,2)*V(I,0)+U(I,3)*V(
     &   I,1)
C (0,7)
         W(I,3) = U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)+U(I,3)*V(
     &   I,0)
C (0,8)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,9)
      RETURN
C     END BLOCK
      END
C*************************PERM**************************************
C
C     PERMUTE A VECTOR OF SU(2) MATRICES  U(..,..)  ACCORDING TO THE
C        INDEX VECTOR  INDPBC(..,IC)   AND RETURN THE RESULT IN
C        V(..,..)
C
C        LVEC: VECTOR LENGTH
C        LDIM: FIRST DIMENSIONAL PARAMETER OF U,V,W
C                 IN THE CALLING PROGRAM
C
      SUBROUTINE PERM(U,IC,V,LVEC)
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U,V
C
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
C
      DIMENSION U(MAXVEC,0:3),V(MAXVEC,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
!     INITIALLY: DO 10
      DO I = 2, LVEC, 2
C (0,3)
C        BEGIN BLOCK
C (0,4)
         V(I-1,0) = U(INDPBC(I-1,IC),0)
C (0,5)
         V(I-1,1) = U(INDPBC(I-1,IC),1)
C (0,6)
         V(I-1,2) = U(INDPBC(I-1,IC),2)
C (0,7)
         V(I-1,3) = U(INDPBC(I-1,IC),3)
C (0,8)
         V(I,0) = U(INDPBC(I,IC),0)
C (0,9)
         V(I,1) = U(INDPBC(I,IC),1)
C (0,10)
         V(I,2) = U(INDPBC(I,IC),2)
C (0,11)
         V(I,3) = U(INDPBC(I,IC),3)
C (0,12)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,13)
      RETURN
C     END BLOCK
      END
C
C     COMPUTE ERRORS
C
      REAL*8 FUNCTION SIGMA4(IBL,IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM,ZERO
      PARAMETER(ZERO=0.D0)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      SIGMA4 = 0.D0
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IVAR.LT.1.OR.IVAR.GT.NVAR.OR.NDAT
     &(IBL).LT.1) RETURN
C (3,1)
      SIGMA4 = SQRT(MAX(SUM(IBL,IVAR,IVAR)-SAV(IBL,IVAR)**2/NDAT(IBL)
     &, ZERO))/NDAT(IBL)
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
C     STATISTICAL ANALYSIS, INCLUDING RELAXATION EFFECTS
C
      SUBROUTINE STAT2(IVAR,AV,SIG,RATIO,IUNIT)
*     ****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H,AV,S1,S2
      SAVE/ST2/
      DIMENSION GAM(0:MAXCOR),R(MAXCOR),T(MAXCOR)
C (0,1)
C     BEGIN BLOCK
C (0,2)
1050  FORMAT(' SIGMA(UNCORRELATED)  =',F12.6)
C (0,3)
1010  FORMAT
     &(' SIGMA   =',F12.6/' GAMMA(0)=',F12.6/' GAMMA(N)='/(10F12.6))
C (0,4)
1020  FORMAT(' GAMMA(N)/GAMMA(N-1) ='/(10F12.6))
C (0,5)
1030  FORMAT(' RELAXATION TIME T(N) ='/(10F12.4))
C (0,6)
1035  FORMAT(' RELAX. TIME T(',I2,',',I2,') =',F10.4)
C (0,7)
1040  FORMAT(' SIGMA/SIGMA(UNCORR.) =',F10.4)
C (0,8)
1000  FORMAT(' RELAXATION ANALYSIS WITH NDAT =',I5,'   ,NCORR =',I5)
C (0,9)
      AV = 0.D0
C (0,10)
      SIG = 0.D0
C (0,11)
      RATIO = 0.D0
C (0,12)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR) RETURN
C (13,1)
C     BEGIN BLOCK
C (13,2)
      ND = NDAT(IVAR)
C (13,3)
      NMAX = MIN(ND-1, NCORR)
C (13,4)
      IF (IUNIT.GT.0) THEN
C (13,5)
C        BEGIN BLOCK
C (13,6)
         WRITE (IUNIT, 1000) ND, NMAX
C (13,7)
         WRITE (IUNIT, '('' INTERNAL REAL*8'')') 
C        END BLOCK
      ELSE
C (13,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (12,1)
      IF (ND.LT.1) RETURN
C (11,1)
C     BEGIN BLOCK
C (11,2)
      AV = SAV(IVAR)/ND
C (11,3)
      IF (IUNIT.GT.0) THEN
C (11,4)
         WRITE (IUNIT, '('' AVERAGE ='',F12.6)') AV
      ELSE
C (11,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,6)
      GAM(0) = SUM(IVAR,0)/ND-AV*AV
C (11,7)
      SIG0 = SQRT(MAX(GAM(0)/ND, 0.))
C     END BLOCK
C (10,1)
      IF (NMAX.LT.1) GOTO 90
C (6,1)
C     BEGIN BLOCK
C (6,2)
C
      N1 = MAX(NMAX/5, 1)
C (6,3)
      N2 = NMAX/2
C (6,4)
      SIG = 0.D0
C (6,5)
      IFLAG = NMAX+1
C (6,6)
      U = GAM(0)
C (6,7)
      S1 = 0.D0
C (6,8)
      S2 = 0.D0
C (6,9)
C
!     INITIALLY: DO 10
      DO N = 1, NMAX
C (6,10)
C        BEGIN BLOCK
C (6,11)
         S1 = S1+H(IVAR,N)
C (6,12)
         S2 = S2+F(IVAR,N)
C (6,13)
         GAM(N) = (SUM(IVAR,N)+(S1+S2-(ND+N)*AV)*AV)/(ND-N)
C (6,14)
C
         R(N) = 0.D0
C (6,15)
         IF (U.NE.0.) THEN
C (6,16)
            R(N) = GAM(N)/U
         ELSE
C (6,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (6,18)
         U = GAM(N)
C (6,19)
C
         T(N) = 0.D0
C (6,20)
C        BEGIN UNSTRUCTURED
C (7,1)
         IF (IFLAG.LT.N) GOTO 10
C (9,1)
         IF (R(N).GT.0.D0.AND.R(N).LT.1.D0) THEN
C (9,2)
C           BEGIN BLOCK
C (9,3)
            T(N) = -1.D0/LOG(R(N))
C (9,4)
            SIG = SIG+GAM(N)*(ND-N)
C           END BLOCK
         ELSE
C (9,5)
            IFLAG = N
         ENDIF
C (8,1)
10       CONTINUE
C        END UNSTRUCTURED
C        END BLOCK
      ENDDO
C (6,21)
C
      IF (N2.GT.N1.AND.IFLAG.GT.N2) THEN
C (6,22)
C        BEGIN BLOCK
C (6,23)
         TAU = (GAM(N1)/GAM(N2))**(1.D0/(N2-N1))
C (6,24)
         SIG = GAM(0)+2.D0*GAM(N2)/(TAU-1.D0)
C (6,25)
!     INITIALLY: DO 20
         DO N = 1, N2
C (6,26)
C           BEGIN BLOCK
C (6,27)
            SIG = SIG+2.D0*GAM(N)
C (6,28)
20          CONTINUE
C           END BLOCK
         ENDDO
C (6,29)
         TAU = 1.D0/LOG(TAU)
C        END BLOCK
      ELSE
C (6,30)
C        BEGIN BLOCK
C (6,31)
         SIG = GAM(0)+2.D0/ND*SIG
C (6,32)
         TAU = 0.D0
C        END BLOCK
      ENDIF
C (6,33)
      SIG = SQRT(MAX(SIG/ND, 0.))
C (6,34)
      RATIO = 0.D0
C (6,35)
      IF (SIG0.GT.0.D0) THEN
C (6,36)
         RATIO = SIG/SIG0
      ELSE
C (6,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (5,1)
C
      IF (IUNIT.LE.0) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
      WRITE (IUNIT, 1010) SIG, (GAM(N), N = 0, NMAX)
C (4,3)
      WRITE (IUNIT, 1020) (R(N), N = 1, NMAX)
C (4,4)
      WRITE (IUNIT, 1030) (T(N), N = 1, NMAX)
C (4,5)
      WRITE (IUNIT, 1035) N1, N2, TAU
C (4,6)
      WRITE (IUNIT, 1040) RATIO
C     END BLOCK
C (3,1)
C     BEGIN BLOCK
C (3,2)
90    CONTINUE
C (3,3)
      IF (IUNIT.GT.0) THEN
C (3,4)
         WRITE (IUNIT, 1050) SIG0
      ELSE
C (3,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      PROGRAM SU2COR
****************************************************************
*
* Quantum Physics Program: Computation of masses of elementary
* particles in the framework of the Quark-Gluon theory,
* using a monte carlo method
*
* SPEC Benchmark Program 103.su2cor, adopted from the program "su2cor"
* (SNI-internal name: ASW01) written by B. Bunk, University of
* Wuppertal, Germany, 1987
* Previous SPEC version (in suite CFP92): 089.su2cor
*
* Contact: Dr. Wilfried Stehling, Siemens Nixdorf, D 552
*          81730 Muenchen, Germany
*
* Modifications for the SPEC version:
*
* - Internal timing statements removed or commented out
* - Detailed output supressed
*
* Modifications March 1991 by
*   Aenne Scharbert,
*   Marcus Schwankl,
*   Reinhold Weicker,
*   Andrea Wittmann,
*       Siemens Nixdorf Information Systems, STM OS 323,
*       Otto-Hahn-Ring 6, W-8000 Muenchen 83, Germany
*
* Modifications Nov. 1993 by
*   Wilfried Stehling, Siemens Nixdorf Informationssysteme AG,
*   D 552, 81730 Muenchen, Germany
* Increased problem size for longer execution time:
* Grid size MAXVEC was 4**3*8, is now 8**3*8.
* File su2cor.data.f and input values have been modified accordingly.
*
* Modifications Sept. 1994 by
*   Reinhold Weicker, Siemens Nixdorf
* Decreased number of iterations
* Removed subroutines that are not necessary for SPEC version
*
* Modifications Nov. 1994 by
*   Reinhold Weicker, Siemens Nixdorf
* Increased number of iterations
* Set grid size to 8**3*8+7
*
****************************************************************
C     PROGRAM SU2COR
C***************************************************************
C****    B. BUNK, UMIVERSITAET WUPPERTAL 1987
C****    BERECHNUNG VON GLUEBALL-MASSEN IM RAHMEN DER
C****    SU2 EICHTHEORIE.
C****    MONTE CARLO RECHNUNG, ERZEUGUNG DER KONFIGURATIONEN
C****    MIT DER WAERMEBAD-METHODE.
C****    GITTERGROESSE: 8**3*16 , SPEICHERBEDARF 5 MBYTES
C****    ANZAHL DER ERZEUGTEN KONFIGURATIONEN : 20
C****    DIE ANZAHL WIRD IN DER EINGABEDATEI UEBER DIE UNIT 5
C****    EINGELESEN. ES IST DIE DRITTE ZAHL DES LETZTEN RECORDS.
C***************************************************************
*
*   English translation of (original) comment:
*
*       Computation of glueball masses in the framework of the
*       SU2 calibration theory.
*       Monte Carlo computation, generation of the configuration
*       with the "warm bath" method.
*       Grid size: 8**3*16, Memory size needed: 5 MByte
*       Number of configurations generated: 20
*       The number is read from the input file via unit 5;
*       it is the third number of the last record
*
****************************************************************

      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXATT=5)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR4=1.E-7,NDMAX4=8)
      PARAMETER(ERROR2=1.E-7,NDMAX2=10)

      REAL*8 U,ACPT,ENERGY,CD0,CD1,CD2,CD3,RD,SD,BCOEFF,BETINV

      REAL*8 W11SUM(20,3),W11INT(20,3)
      REAL*8 W22SUM(20,3),W22INT(20,3)

      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
      COMMON/SW/ACPT,ENERGY
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
      EXTERNAL TRINIT
C (0,1)
C     BEGIN BLOCK
C (0,2)
1000  FORMAT(1X,75('+')/' PROGRAM SU2V1COR',' -- MODIFIED HEAT BATH ALGO
     &RITHM'/'    -- VECTORIZED PROGRAM IN STANDARD FORTRAN'/'    -- GLU
     &EBALL CORRELATIONS FOR 1X1 AND 2X2 LOOP OPERATORS'/'    -- INTEGRA
     &L EXPRESSIONS FOR LOOP OPERATORS USED')
C (0,3)
1005  FORMAT(//' DIMENSION =',I3/' SIZE      =',4I3)
C (0,4)
1015  FORMAT(//' VECTOR LENGTH: ',I8/' IN SWEEP:  MAXATT =',I4/' IN BEST
     &AB: NSTEPS =',I4,'      ERROR  =',E11.3/' IN INT4:   NDMAX4 =',I4,
     &'      ERROR4 =',E11.3/' IN INT2:   NDMAX2 =',I4,'      ERROR2 =',
     &E11.3)
C (0,5)
111   FORMAT(D16.10)
C (0,6)
1017  FORMAT(//1X,75('-')/' BETA  =',F8.4)
C (0,7)
1018  FORMAT(/' CLEAR COUNTERS'//' THERMALISATION:',I6,' ITERATIONS')
C (0,8)
1019  FORMAT(/' STATISTICS CONTINUED'//' OLD ITERATIONS:',I6)
C (0,9)
1020  FORMAT(' MEASUREMENT   :',I6,' ITERATIONS'//' FREQUENCY OF CORRELA
     &TION MEASUREMENTS:',I5,' ITERATION(S)')
C (0,10)
1030  FORMAT(/' SAVE FREQUENCY:',I6,' ITERATIONS, UNIT =',I3)
C (0,11)
1040  FORMAT(/29X,'E',15X,'FUNDAMENTAL POLYAKOV LINE AVERAGES'/'   ITER 
     &  ACPT      CURRENT     AVERAGE',4(7X,I2,1X))
C (0,12)
1050  FORMAT(I7,F8.4,2F12.6,2X,5F10.6)
C (0,13)

      WRITE (6, *) 'SPEC benchmark 103.su2cor'
C (0,14)

      WRITE (6, *) ' '
C (0,15)
C
C     GET START INSTRUCTION
C
*     For historical reasons, we keep the variable ISTART.
*     In the original version, it used to be either -1
*     or the channel number of the channel from which input
*     values are read.

      ISTART = -1
C (0,16)

C     GET BASIC PARAMETERS

      READ (5, *) NDIM, (LSIZE(N), N = 1, NDIM)
C (0,17)

      IF (NDIM.NE.4.OR.NDIM.GT.4) THEN
C (0,18)
         STOP
      ELSE
C (0,19)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,20)

      WRITE (6, 1000) 
C (0,21)
      WRITE (6, 1005) NDIM, (LSIZE(N), N = 1, NDIM)
C (0,22)
C
C     COMPUTE BASIC QUANTITIES
C
      CALL GEOM
C (0,23)
C
      WRITE (6, 1015) LVEC, MAXATT, 200, ERROR, NDMAX4, ERROR4, 
     &NDMAX2, ERROR2
C (0,24)
      IF (LVEC.GT.MAXVEC) THEN
C (0,25)
C        BEGIN BLOCK
C (0,26)
         WRITE (6, *) 'LVEC=', LVEC
C (0,27)
         STOP
C        END BLOCK
      ELSE
C (0,28)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,29)
      IF (MOD(LVEC, 2).NE.0) THEN
C (0,30)
C        BEGIN BLOCK
C (0,31)
         WRITE (6, *) 'LVEC,mod 2=', LVEC
C (0,32)
         STOP
C        END BLOCK
      ELSE
C (0,33)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,34)
      IF (LSIZE(NDIM).GT.20) THEN
C (0,35)
C        BEGIN BLOCK
C (0,36)
         WRITE (6, *) 'LSIZE(NDIM)=', LSIZE(NDIM)
C (0,37)
         STOP
C        END BLOCK
      ELSE
C (0,38)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,39)
      IF (20.LT.NDMAX4.OR.20.LT.NDMAX2) THEN
C (0,40)
C        BEGIN BLOCK
C (0,41)
         WRITE (6, *) 'NDMAX.LT.NDMAX4 .OR. NDMAX.LT.NDMAX2'
C (0,42)
         STOP
C        END BLOCK
      ELSE
C (0,43)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,44)

C     INITIALIZE THE CONFIGURATION

      CALL INIT(ISTART)
C (0,45)
      OPEN (UNIT=11,FILE='SU2COR.MODEL',STATUS='OLD') 
C (0,46)
C     DO 90 I4=1,4
C     DO 90 I3=1,16
C     DO 90 I2=0,3
C     DO 90 I1=1,LVEC
      READ (11, 111) ((((U(I1,I2,I3,I4), I1 = 1, LVEC), I2 = 0, 3), 
     &I3 = 1, 16), I4 = 1, 4)
C (0,47)
90    CONTINUE
C (0,48)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)


C     GET RUN PARAMETERS

200   CONTINUE
C (1,3)
      READ (UNIT=5,FMT=*,END=999) BETA, NTHERM, NMEAS, NPRINT, MFREQ
     &, NSAVE, ISAVE
C     END BLOCK
C (4,1)
      IF (BETA.LE.0.) GOTO 999
C (5,1)
C     BEGIN BLOCK
C (5,2)
      GAMMA = 0.
C (5,3)
      WRITE (6, 1017) BETA
C (5,4)
C
      CALL BESTAB(BETA, NDIM)
C (5,5)
C
      IF (NTHERM.GE.0) THEN
C (5,6)
C        BEGIN BLOCK
C (5,7)
         WRITE (6, 1018) NTHERM
C (5,8)
         ITER = 0
C (5,9)
         IFREQ = 0
C (5,10)
         NERR2 = 0
C (5,11)
         NERR4 = 0
C (5,12)
         CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (5,13)
         CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C        END BLOCK
      ELSE
C (5,14)
         WRITE (6, 1019) ITER
      ENDIF
C (5,15)
      WRITE (6, 1020) NMEAS, MFREQ
C (5,16)
C
      IF (ISAVE.GT.0) THEN
C (5,17)
         WRITE (6, 1030) NSAVE, ISAVE
      ELSE
C (5,18)
         WRITE (6, '(/'' CONFIGURATION NOT SAVED'')') 
      ENDIF
C (5,19)
C
C     THERMALISATION
C
      IF (NTHERM.GT.0) THEN
C (5,20)
C        BEGIN BLOCK
C (5,21)
         IPR = 0
C (5,22)
         ISA = 0
C (5,23)
         WRITE (6, 1040) (I, I = 1, NDIM)
C (5,24)
!     INITIALLY: DO 50
         DO ITER = 1, NTHERM
C (5,25)
C           BEGIN BLOCK
C (5,26)
            CALL SWEEP
C (5,27)
C+++++      CALL POLYA
            IPR = IPR+1
C (5,28)
            IF (IPR.EQ.NPRINT.OR.ITER.EQ.NTHERM) THEN
C (5,29)
C              BEGIN BLOCK
C (5,30)
               WRITE (6, 1050) ITER, ACPT, ENERGY, AVER2(1), (AVER2(I
     &         ), I = 2, 2*NDIM, 2)
C (5,31)
               IPR = 0
C              END BLOCK
            ELSE
C (5,32)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,33)
            ISA = ISA+1
C (5,34)
            IF (ISA.GE.NSAVE.AND.ISAVE.GT.0) THEN
C (5,35)
C     CALL SAVE(ISAVE)
               ISA = 0
            ELSE
C (5,36)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,37)
50          CONTINUE
C           END BLOCK
         ENDDO
C (5,38)
         ITER = 0
C (5,39)
         IFREQ = 0
C (5,40)
         NERR2 = 0
C (5,41)
         NERR4 = 0
C (5,42)
         CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (5,43)
         CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C     IF(ISAVE.GT.0) CALL SAVE(ISAVE)
C        END BLOCK
      ELSE
C (5,45)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,46)
C
C     MEASUREMENT
C
      IPR = 0
C (5,47)
      ISA = 0
C (5,48)
      WRITE (6, 1040) (I, I = 1, NDIM)
C (5,49)
!     INITIALLY: DO 60
      DO IT = 1, NMEAS
C (5,50)
C        BEGIN BLOCK
C (5,51)
         ITER = ITER+1
C (5,52)
         CALL SWEEP
C (5,53)
C+++++      CALL POLYA
         IPR = IPR+1
C (5,54)
         IF (IPR.EQ.NPRINT.OR.IT.EQ.NMEAS) THEN
C (5,55)
C           BEGIN BLOCK
C (5,56)
            WRITE (6, 1050) ITER, ACPT, ENERGY, AVER2(1), (AVER2(I), 
     &      I = 2, 2*NDIM, 2)
C (5,57)
            IPR = 0
C           END BLOCK
         ELSE
C (5,58)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,59)
         IFREQ = IFREQ+1
C (5,60)
         IF (IFREQ.GE.MFREQ) THEN
C (5,61)
C           BEGIN BLOCK
C (5,62)
            CALL CORR
C (5,63)
            IFREQ = 0
C           END BLOCK
         ELSE
C (5,64)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,65)
         ISA = ISA+1
C (5,66)
         IF ((ISA.GE.NSAVE.OR.IT.EQ.NMEAS).AND.ISAVE.GT.0) THEN
C (5,67)
C           BEGIN BLOCK
C (5,68)
C     CALL SAVE(ISAVE)
            ISA = 0
C (5,69)
            CALL LOOPS(W11SUM, W11INT, W22SUM, W22INT)
C (5,70)
            SUG = 0.
C (5,71)
!     INITIALLY: DO 70
            DO IPL = 1, 3
C (5,72)
C              BEGIN BLOCK
C (5,73)
               SU = 0.
C (5,74)
!     INITIALLY: DO 71
               DO ITIT = 1, LSIZE(NDIM)
C (5,75)
C                 BEGIN BLOCK
C (5,76)
                  SU = SU+W11SUM(ITIT,IPL)
C (5,77)
71                CONTINUE
C                 END BLOCK
               ENDDO
C (5,78)
               SU = SU/REAL(LSIZE(NDIM))
C (5,79)
               SUG = SUG+SU
C (5,80)
70             CONTINUE
C              END BLOCK
            ENDDO
C (5,81)
            SUG = SUG/3
C           END BLOCK
         ELSE
C (5,82)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,83)
60       CONTINUE
C        END BLOCK
      ENDDO
C (5,84)
C
C     RESULTS AND ERROR ANALYSIS
C
      IF (ITER.GT.0) THEN
C (5,85)
         CALL EVAL
      ELSE
C (5,86)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C
C     END BLOCK
      GOTO 200
C (3,1)
C PROGRAM NEEDS THE LABEL
999   CONTINUE
C     END UNSTRUCTURED
C (0,49)
      STOP
C (0,50)
      RETURN
C     END BLOCK
      END
C*************************SWEEP**************************
C
C     ONE VECTORISED SWEEP USING A MODIFIED HEAT BATH ALGORITHM
C
      SUBROUTINE SWEEP
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXATT=5)
C
      REAL*8 U,ACPT,ENERGY
      REAL*8 BETINV,PI,ZERO,ONE,TWO,EPS
      REAL*8 B,W1,W2,BNORM,BINV,WT,W0,C1,C2,R1,R2
      PARAMETER(PI=3.141592654D0,ZERO=0.D0,ONE=1.D0,TWO=2.D0,EPS=1.E-20)
C
      REAL*8 EDOUB
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/SW/ACPT,ENERGY
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION B(MAXVEC,0:3),W1(MAXVEC,0:3),W2(MAXVEC,0:3)
      DIMENSION BNORM(MAXVEC),BINV(MAXVEC),WT(MAXVEC),W0(MAXVEC)
      DIMENSION C1(MAXVEC),C2(MAXVEC),R1(MAXVEC),R2(MAXVEC)
C+++++EQUIVALENCE (BNORM(1),W2(1,0)),(BINV(1),W2(1,1))
C+++++EQUIVALENCE (WT(1),W2(1,2)),(W0(1),W2(1,3))
      LOGICAL LACPT(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      EDOUB = 0.D0
C (0,3)
      ENERGY = ZERO
C (0,4)
      IACPT = 0
C (0,5)
      BETINV = 1.D0/BETA
C (0,6)
C
C     LOOP OVER SUB-LATTICES  ILAT  AND LINK DIRECTIONS  I1
C
!     INITIALLY: DO 200
      DO ILAT = 1, 2**NDIM
C (0,7)
!     INITIALLY: DO 200
         DO I1 = 1, NDIM
C (0,8)
C           BEGIN BLOCK
C (0,9)
C
C     ACCUMULATE THE INTERACTING PLAQUETTES IN  B(...)
C
!     INITIALLY: DO 210
            DO I = 1, LVEC
C (0,10)
C              BEGIN BLOCK
C (0,11)
               B(I,0) = ZERO
C (0,12)
               B(I,1) = ZERO
C (0,13)
               B(I,2) = ZERO
C (0,14)
               B(I,3) = ZERO
C (0,15)
               LACPT(I) = .FALSE.
C (0,16)
210            CONTINUE
C              END BLOCK
            ENDDO
C (0,17)
C
!     INITIALLY: DO 220
            DO I2 = 1, NDIM
C (0,18)
C              BEGIN UNSTRUCTURED
C (1,1)
               IF (I1.EQ.I2) GOTO 220
C (3,1)
C              BEGIN BLOCK
C (3,2)
               CALL INTACT(ILAT, I1, I2, W1)
C (3,3)
               CALL INTACT(ILAT, I1, -I2, W2)
C (3,4)
!     INITIALLY: DO 230
               DO I = 1, LVEC
C (3,5)
C                 BEGIN BLOCK
C (3,6)
                  B(I,0) = B(I,0)+W1(I,0)+W2(I,0)
C (3,7)
                  B(I,1) = B(I,1)+W1(I,1)+W2(I,1)
C (3,8)
                  B(I,2) = B(I,2)+W1(I,2)+W2(I,2)
C (3,9)
                  B(I,3) = B(I,3)+W1(I,3)+W2(I,3)
C (3,10)
230               CONTINUE
C                 END BLOCK
               ENDDO
C              END BLOCK
C (2,1)
220            CONTINUE
C              END UNSTRUCTURED
            ENDDO
C (0,19)
C
C     HEAT BATH STEP
C
!     INITIALLY: DO 300
            DO I = 1, LVEC
C (0,20)
C              BEGIN BLOCK
C (0,21)
               BNORM(I) = SQRT(B(I,0)**2+B(I,1)**2+B(I,2)**2+B(I,3)**
     &         2)
C (0,22)
               BINV(I) = ONE/BNORM(I)
C (0,23)
               C1(I) = BETINV*BINV(I)
C (0,24)
300            CONTINUE
C              END BLOCK
            ENDDO
C (0,25)
C
!     INITIALLY: DO 310
            DO IATT = 1, MAXATT
C (0,26)
C              BEGIN BLOCK
C (0,27)
               CALL TRNGV(R1, LVEC, ONE)
C (0,28)
               CALL TRNGV(R2, LVEC, ONE)
C (0,29)
!     INITIALLY: DO 311
               DO I = 1, LVEC
C (0,30)
C                 BEGIN BLOCK
C (0,31)
                  WT(I) = ONE+C1(I)*LOG(EPS+R1(I))
C (0,32)
                  IF (R2(I)**2.LE.ONE-WT(I)**2) THEN
C (0,33)
C                    BEGIN BLOCK
C (0,34)
                     W0(I) = WT(I)
C (0,35)
                     LACPT(I) = .TRUE.
C                    END BLOCK
                  ELSE
C (0,36)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,37)
311               CONTINUE
C                 END BLOCK
               ENDDO
C (0,38)
310            CONTINUE
C              END BLOCK
            ENDDO
C (0,39)
C
            CALL TRNGV(R1, LVEC, TWO)
C (0,40)
            CALL TRNGV(R2, LVEC, PI)
C (0,41)
C
!     INITIALLY: DO 320
            DO I = 1, LVEC
C (0,42)
C              BEGIN BLOCK
C (0,43)
               IF (LACPT(I)) THEN
C (0,44)
C                 BEGIN BLOCK
C (0,45)
C
                  IACPT = IACPT+1
C (0,46)
                  EDOUB = EDOUB+BNORM(I)*W0(I)
C (0,47)
                  W1(I,0) = BINV(I)*W0(I)
C (0,48)
C
                  BINV(I) = BINV(I)*SQRT(ONE-W0(I)**2)
C (0,49)
                  R1(I) = R1(I)-ONE
C (0,50)
                  W1(I,3) = BINV(I)*R1(I)
C (0,51)
C
                  C1(I) = TAN(R2(I))
C (0,52)
                  C2(I) = C1(I)**2
C (0,53)
                  BINV(I) = BINV(I)*SQRT(ONE-R1(I)**2)/(ONE+C2(I))
C (0,54)
                  W1(I,1) = BINV(I)*(ONE-C2(I))
C (0,55)
                  W1(I,2) = BINV(I)*TWO*C1(I)
C
C                 END BLOCK
               ELSE
C (0,57)
C                 BEGIN BLOCK
C (0,58)
C
                  W1(I,0) = U(I,0,ILAT,I1)
C (0,59)
                  W1(I,1) = -U(I,1,ILAT,I1)
C (0,60)
                  W1(I,2) = -U(I,2,ILAT,I1)
C (0,61)
                  W1(I,3) = -U(I,3,ILAT,I1)
C
C                 END BLOCK
               ENDIF
C (0,63)
320            CONTINUE
C              END BLOCK
            ENDDO
C (0,64)
C
C     COMPUTE AND STORE THE NEW LINK VARIABLES
C
            CALL MATMAT(W1, B, W2, LVEC, MAXVEC)
C (0,65)
C
!     INITIALLY: DO 400
            DO I = 1, LVEC
C (0,66)
C              BEGIN BLOCK
C (0,67)
               IF (LACPT(I)) THEN
C (0,68)
C                 BEGIN BLOCK
C (0,69)
                  U(I,0,ILAT,I1) = W2(I,0)
C (0,70)
                  U(I,1,ILAT,I1) = W2(I,1)
C (0,71)
                  U(I,2,ILAT,I1) = W2(I,2)
C (0,72)
                  U(I,3,ILAT,I1) = W2(I,3)
C                 END BLOCK
               ELSE
C (0,73)
                  EDOUB = EDOUB+W2(I,0)
               ENDIF
C (0,74)
400            CONTINUE
C              END BLOCK
            ENDDO
C (0,75)
C
200         CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,76)
C
C     END OF LOOP OVER SUB-LATTICES AND LINK DIRECTIONS
C
      ENERGY = EDOUB/(4*NPLAQS)
C (0,77)
      CALL ACCUM2(1, DBLE(ENERGY))
C (0,78)
      ACPT = FLOAT(IACPT)/NLINKS
C (0,79)
      RETURN
C     END BLOCK
      END
C
      BLOCK DATA TRINIT
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/TRNBLK/IREG(0:249+MAXVEC)
C     SAVE/TRNBLK/
      DATA (IREG(I),I=0,94)
     X  /1057053971,1145515795,1182139782,1196473049, 248765874
     X  , 534686421,1050572418, 731796842,1502042419,1492145362
     X  ,1797225520, 847047639, 579506234, 787124408, 946132864
     X  ,  25926130, 266266175,1858333429,1721014909,1217421528
     X  ,1796521010,1468167949,1057485866, 768967452, 274519193
     X  , 707533566,1625302755,  59874444, 633698365,1835941323
     X  , 122666301, 342034367,2106971542,1531340801, 812134079
     X  ,1812596212,1585311661, 925293127, 133452750,1293034937
     X  ,1865807557,    253678,1699606438, 872283510,1866505600
     X  ,1076142670,1589822366,1200648741, 772255620,1240750904
     X  , 417350462,1006051829, 844486985,1249441283, 185807612
     X  , 578607766, 540480896, 602664807,1312879003,1877544568
     X  ,1486285709,1125506799, 130890975,1934453800, 150062077
     X  ,  14692516,2104571412,1808456730,1965843868,  93409930
     X  ,1364923417,1576137641,1730335305,1388981056, 103839289
     X  , 337934237,1484884578, 614826256,1871738019, 390302980
     X  ,1743832705,1640901339,1308848769,1745529143,2116054309
     X  ,1102694887,1169403470, 145423485,  23368705,1201766168
     X  ,1196866266, 791295083,1853206267, 863391697,1729775662/
      DATA (IREG(I),I=95,189)
     X  / 965283864,1232715204, 355542440, 572362928, 690970242
     X  ,1118153838, 633804287, 228386269,  82124606,1290422595
     X  ,1526345751, 156299811,2010865450,2000487848,2079817809
     X  , 328899407, 518205501,1981676077,1104213191,1208863493
     X  ,1969410151, 725337377, 933155268, 867416891, 630881882
     X  ,2020953112,1236839192, 408196260, 192359135,1725697394
     X  ,1180727966,1518282382,1149562539, 667636557, 346315259
     X  ,1208785069, 905938759,2027087595,1261120781,1445557208
     X  , 263528130, 966902626,2062384673,1804839330, 344796300
     X  ,2078005932, 569756794, 324283636, 614510683, 813075189
     X  ,1221422926,2049836335, 799394936, 612493765, 346845898
     X  ,1642411002,1564443813, 274939435,1574214442,1262988177
     X  ,1683434479, 745663575, 710208465, 756641161, 245714850
     X  , 512299780, 539908198, 209055986,2019538320, 930230157
     X  , 427569491, 699674688, 455251044, 101032211,1452005575
     X  ,2084350456,1410129708, 423298345,1644820176,1495340621
     X  ,1825237870,2037018353,1402827438, 480748885,1486128650
     X  ,1964918509, 273872179,1969694340,  46957054,1935986403
     X  , 106110655,1866520308,1846870446, 814326429,1444113787/
      DATA (IREG(I),I=190,249)
     X  / 558018047, 123176283, 519594232,1918417115, 999046157
     X  , 215437722,1485546941, 906816480, 224200659,1618947708
     X  ,  11554939,1079082792,1016131542,1655167982, 977343684
     X  ,2071981174,1404263389,1192375964,1241251581,2059637941
     X  ,1106684308,1905764477,1132893620,1200569711,1503534254
     X  ,1715390625,1044222415, 149082666,1734303601,1157760999
     X  ,1077736894,1865300109,2098367446, 380179623, 776051004
     X  ,1436893074,1992757538,1360858314, 678264659, 479156451
     X  ,  23970028, 173988789, 790100986,1967224921,1651722002
     X  , 731153103,1423215887, 837071866,1760397607, 422933859
     X  , 395709846,1647231765,   6223740, 751895905,1214725134
     X  , 225744090,1288186184, 286268600,1385709059, 884994244/
C (0,1)
      RETURN
      END
      SUBROUTINE TRNGET(ISEED)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER N103,LEFT,IFIRST,IMAX,N,I
      INTEGER ISEED(0:249),IREG(0:249+MAXVEC)
      REAL*8 RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C
99991 CONTINUE
C (0,3)
C
!     INITIALLY: DO 50
      DO I = 0, 249
C (0,4)
C        BEGIN BLOCK
C (0,5)
         ISEED(I) = IREG(I)
C (0,6)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
      SUBROUTINE TRNGV(RANVEC,LVEC,RMAX)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER LVEC,N103,LEFT,IFIRST,IMAX,N,I
      INTEGER IREG(0:249+MAXVEC)
      REAL*8 RANVEC(1:LVEC),RMAX,RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      N103 = LVEC/103
C (0,3)
      LEFT = LVEC-103*N103
C (0,4)
C
C SOME LINES ARE NEW
      IFIRST = 0
C (0,5)
      IMAX = 2147483647
C (0,6)
!     INITIALLY: DO 100
      DO N = 1, N103
C (0,7)
C        BEGIN BLOCK
C (0,8)
!     INITIALLY: DO 10
         DO I = IFIRST, IFIRST+102
C (0,9)
C           BEGIN BLOCK
C (0,10)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
            IREG(I+250) = IREG(I+147)-IREG(I)
C (0,11)
            IF (IREG(I+250).LE.0) THEN
C (0,12)
               IREG(I+250) = IREG(I+250)+IMAX
            ELSE
C (0,13)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,14)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,15)
         IFIRST = IFIRST+103
C (0,16)
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,17)
C
C SOME LINES ARE NEW
!     INITIALLY: DO 20
      DO I = IFIRST, IFIRST+LEFT-1
C (0,18)
C        BEGIN BLOCK
C (0,19)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
         IREG(I+250) = IREG(I+147)-IREG(I)
C (0,20)
         IF (IREG(I+250).LE.0) THEN
C (0,21)
            IREG(I+250) = IREG(I+250)+IMAX
         ELSE
C (0,22)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,23)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
      RNORM = R1*RMAX
C (0,25)
!     INITIALLY: DO 30
      DO I = 1, LVEC
C (0,26)
C        BEGIN BLOCK
C (0,27)
         RANVEC(I) = RNORM*IREG(I+249)
C (0,28)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)
C
!     INITIALLY: DO 40
      DO I = 0, 249
C (0,30)
C        BEGIN BLOCK
C (0,31)
         IREG(I) = IREG(I+LVEC)
C (0,32)
40       CONTINUE
C        END BLOCK
      ENDDO
C
C (0,34)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE TRNGV1(LVEC)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      REAL*8 R1
      PARAMETER(R1=2.D0**(-31))
C
      COMMON/TRNBLK/IREG(0:249+MAXVEC)
      SAVE/TRNBLK/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      N103 = LVEC/103
C (0,3)
      LEFT = LVEC-103*N103
C (0,4)
C
C SOME LINES ARE NEW
      IFIRST = 0
C (0,5)
      IMAX = 2147483647
C (0,6)
!     INITIALLY: DO 100
      DO N = 1, N103
C (0,7)
C        BEGIN BLOCK
C (0,8)
!     INITIALLY: DO 10
         DO I = IFIRST, IFIRST+102
C (0,9)
C           BEGIN BLOCK
C (0,10)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
            IREG(I+250) = IREG(I+147)-IREG(I)
C (0,11)
            IF (IREG(I+250).LE.0) THEN
C (0,12)
               IREG(I+250) = IREG(I+250)+IMAX
            ELSE
C (0,13)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,14)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,15)
         IFIRST = IFIRST+103
C (0,16)
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,17)
C
C SOME LINES ARE NEW
!     INITIALLY: DO 20
      DO I = IFIRST, IFIRST+LEFT-1
C (0,18)
C        BEGIN BLOCK
C (0,19)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
         IREG(I+250) = IREG(I+147)-IREG(I)
C (0,20)
         IF (IREG(I+250).LE.0) THEN
C (0,21)
            IREG(I+250) = IREG(I+250)+IMAX
         ELSE
C (0,22)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,23)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
!     INITIALLY: DO 40
      DO I = 0, 249
C (0,25)
C        BEGIN BLOCK
C (0,26)
         IREG(I) = IREG(I+LVEC)
C (0,27)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,28)
C
      RETURN
C     END BLOCK
      END
      SUBROUTINE TRNSET(ISEED)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER N103,LEFT,IFIRST,IMAX,N,I
      INTEGER ISEED(0:249),IREG(0:249+MAXVEC)
      REAL*8 RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99990 CONTINUE
C (0,3)
C
!     INITIALLY: DO 60
      DO I = 0, 249
C (0,4)
C        BEGIN BLOCK
C (0,5)
         IREG(I) = ISEED(I)
C (0,6)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
!!
!! file for su2cor.f
!!
      PROGRAM SU2COR
****************************************************************
*
* Quantum Physics Program: Computation of masses of elementary
* particles in the framework of the Quark-Gluon theory,
* using a monte carlo method
*
* SPEC Benchmark Program 103.su2cor, adopted from the program "su2cor"
* (SNI-internal name: ASW01) written by B. Bunk, University of
* Wuppertal, Germany, 1987
* Previous SPEC version (in suite CFP92): 089.su2cor
*
* Contact: Dr. Wilfried Stehling, Siemens Nixdorf, D 552
*          81730 Muenchen, Germany
*
* Modifications for the SPEC version:
*
* - Internal timing statements removed or commented out
* - Detailed output supressed
*
* Modifications March 1991 by
*   Aenne Scharbert,
*   Marcus Schwankl,
*   Reinhold Weicker,
*   Andrea Wittmann,
*       Siemens Nixdorf Information Systems, STM OS 323,
*       Otto-Hahn-Ring 6, W-8000 Muenchen 83, Germany
*
* Modifications Nov. 1993 by
*   Wilfried Stehling, Siemens Nixdorf Informationssysteme AG,
*   D 552, 81730 Muenchen, Germany
* Increased problem size for longer execution time:
* Grid size MAXVEC was 4**3*8, is now 8**3*8.
* File su2cor.data.f and input values have been modified accordingly.
*
* Modifications Sept. 1994 by
*   Reinhold Weicker, Siemens Nixdorf
* Decreased number of iterations
* Removed subroutines that are not necessary for SPEC version
*
* Modifications Nov. 1994 by
*   Reinhold Weicker, Siemens Nixdorf
* Increased number of iterations
* Set grid size to 8**3*8+7
*
****************************************************************
C     PROGRAM SU2COR
C***************************************************************
C****    B. BUNK, UMIVERSITAET WUPPERTAL 1987
C****    BERECHNUNG VON GLUEBALL-MASSEN IM RAHMEN DER
C****    SU2 EICHTHEORIE.
C****    MONTE CARLO RECHNUNG, ERZEUGUNG DER KONFIGURATIONEN
C****    MIT DER WAERMEBAD-METHODE.
C****    GITTERGROESSE: 8**3*16 , SPEICHERBEDARF 5 MBYTES
C****    ANZAHL DER ERZEUGTEN KONFIGURATIONEN : 20
C****    DIE ANZAHL WIRD IN DER EINGABEDATEI UEBER DIE UNIT 5
C****    EINGELESEN. ES IST DIE DRITTE ZAHL DES LETZTEN RECORDS.
C***************************************************************
*
*   English translation of (original) comment:
*
*       Computation of glueball masses in the framework of the
*       SU2 calibration theory.
*       Monte Carlo computation, generation of the configuration
*       with the "warm bath" method.
*       Grid size: 8**3*16, Memory size needed: 5 MByte
*       Number of configurations generated: 20
*       The number is read from the input file via unit 5;
*       it is the third number of the last record
*
****************************************************************

      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXATT=5)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR4=1.E-7,NDMAX4=8)
      PARAMETER(ERROR2=1.E-7,NDMAX2=10)

      REAL*8 U,ACPT,ENERGY,CD0,CD1,CD2,CD3,RD,SD,BCOEFF,BETINV

      REAL*8 W11SUM(20,3),W11INT(20,3)
      REAL*8 W22SUM(20,3),W22INT(20,3)

      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
      COMMON/SW/ACPT,ENERGY
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
      EXTERNAL TRINIT
C (0,1)
C     BEGIN BLOCK
C (0,2)
1000  FORMAT(1X,75('+')/' PROGRAM SU2V1COR',' -- MODIFIED HEAT BATH ALGO
     x 
     &RITHM'/'    -- VECTORIZED PROGRAM IN STANDARD FORTRAN'/'    -- GLU
     x 
     &EBALL CORRELATIONS FOR 1X1 AND 2X2 LOOP OPERATORS'/'    -- INTEGRA
     x 
     &L EXPRESSIONS FOR LOOP OPERATORS USED')
C (0,3)
1005  FORMAT(//' DIMENSION =',I3/' SIZE      =',4I3)
C (0,4)
1015  FORMAT(//' VECTOR LENGTH: ',I8/' IN SWEEP:  MAXATT =',I4/' IN BEST
     x 
     &AB: NSTEPS =',I4,'      ERROR  =',E11.3/' IN INT4:   NDMAX4 =',I4,
     x 
     &'      ERROR4 =',E11.3/' IN INT2:   NDMAX2 =',I4,'      ERROR2 =',
     x 
     &E11.3)
C (0,5)
111   FORMAT(D16.10)
C (0,6)
1017  FORMAT(//1X,75('-')/' BETA  =',F8.4)
C (0,7)
1018  FORMAT(/' CLEAR COUNTERS'//' THERMALISATION:',I6,' ITERATIONS')
C (0,8)
1019  FORMAT(/' STATISTICS CONTINUED'//' OLD ITERATIONS:',I6)
C (0,9)
1020  FORMAT(' MEASUREMENT   :',I6,' ITERATIONS'//' FREQUENCY OF CORRELA
     x 
     &TION MEASUREMENTS:',I5,' ITERATION(S)')
C (0,10)
1030  FORMAT(/' SAVE FREQUENCY:',I6,' ITERATIONS, UNIT =',I3)
C (0,11)
1040  FORMAT(/29X,'E',15X,'FUNDAMENTAL POLYAKOV LINE AVERAGES'/'   ITER 
     x 
     &  ACPT      CURRENT     AVERAGE',4(7X,I2,1X))
C (0,12)
1050  FORMAT(I7,F8.4,2F12.6,2X,5F10.6)
C (0,13)

      WRITE (6, *) 'SPEC benchmark 103.su2cor'
C (0,14)

      WRITE (6, *) ' '
C (0,15)
C
C     GET START INSTRUCTION
C
*     For historical reasons, we keep the variable ISTART.
*     In the original version, it used to be either -1
*     or the channel number of the channel from which input
*     values are read.

      ISTART = -1
C (0,16)

C     GET BASIC PARAMETERS

      READ (5, *) NDIM, (LSIZE(N), N = 1, NDIM)
C (0,17)

      IF (NDIM.NE.4.OR.NDIM.GT.4) THEN
C (0,18)
         STOP
      ELSE
C (0,19)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,20)

      WRITE (6, 1000) 
C (0,21)
      WRITE (6, 1005) NDIM, (LSIZE(N), N = 1, NDIM)
C (0,22)
C
C     COMPUTE BASIC QUANTITIES
C
      CALL GEOM
C (0,23)
C
      WRITE (6, 1015) LVEC, MAXATT, 200, ERROR, NDMAX4, ERROR4, 
     &NDMAX2, ERROR2
C (0,24)
      IF (LVEC.GT.MAXVEC) THEN
C (0,25)
C        BEGIN BLOCK
C (0,26)
         WRITE (6, *) 'LVEC=', LVEC
C (0,27)
         STOP
C        END BLOCK
      ELSE
C (0,28)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,29)
      IF (MOD(LVEC, 2).NE.0) THEN
C (0,30)
C        BEGIN BLOCK
C (0,31)
         WRITE (6, *) 'LVEC,mod 2=', LVEC
C (0,32)
         STOP
C        END BLOCK
      ELSE
C (0,33)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,34)
      IF (LSIZE(NDIM).GT.20) THEN
C (0,35)
C        BEGIN BLOCK
C (0,36)
         WRITE (6, *) 'LSIZE(NDIM)=', LSIZE(NDIM)
C (0,37)
         STOP
C        END BLOCK
      ELSE
C (0,38)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,39)
      IF (20.LT.NDMAX4.OR.20.LT.NDMAX2) THEN
C (0,40)
C        BEGIN BLOCK
C (0,41)
         WRITE (6, *) 'NDMAX.LT.NDMAX4 .OR. NDMAX.LT.NDMAX2'
C (0,42)
         STOP
C        END BLOCK
      ELSE
C (0,43)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,44)

C     INITIALIZE THE CONFIGURATION

      CALL INIT(ISTART)
C (0,45)
      OPEN (UNIT=11,FILE='SU2COR.MODEL',STATUS='OLD') 
C (0,46)
C     DO 90 I4=1,4
C     DO 90 I3=1,16
C     DO 90 I2=0,3
C     DO 90 I1=1,LVEC
      READ (11, 111) ((((U(I1,I2,I3,I4), I1 = 1, LVEC), I2 = 0, 3), 
     &I3 = 1, 16), I4 = 1, 4)
C (0,47)
90    CONTINUE
C (0,48)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)


C     GET RUN PARAMETERS

200   CONTINUE
C (1,3)
      READ (UNIT=5,FMT=*,END=999) BETA, NTHERM, NMEAS, NPRINT, MFREQ
     &, NSAVE, ISAVE
C     END BLOCK
C (4,1)
      IF (BETA.LE.0.) GOTO 999
C (5,1)
C     BEGIN BLOCK
C (5,2)
      GAMMA = 0.
C (5,3)
      WRITE (6, 1017) BETA
C (5,4)
C
      CALL BESTAB(BETA, NDIM)
C (5,5)
C
      IF (NTHERM.GE.0) THEN
C (5,6)
C        BEGIN BLOCK
C (5,7)
         WRITE (6, 1018) NTHERM
C (5,8)
         ITER = 0
C (5,9)
         IFREQ = 0
C (5,10)
         NERR2 = 0
C (5,11)
         NERR4 = 0
C (5,12)
         CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (5,13)
         CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C        END BLOCK
      ELSE
C (5,14)
         WRITE (6, 1019) ITER
      ENDIF
C (5,15)
      WRITE (6, 1020) NMEAS, MFREQ
C (5,16)
C
      IF (ISAVE.GT.0) THEN
C (5,17)
         WRITE (6, 1030) NSAVE, ISAVE
      ELSE
C (5,18)
         WRITE (6, '(/'' CONFIGURATION NOT SAVED'')') 
      ENDIF
C (5,19)
C
C     THERMALISATION
C
      IF (NTHERM.GT.0) THEN
C (5,20)
C        BEGIN BLOCK
C (5,21)
         IPR = 0
C (5,22)
         ISA = 0
C (5,23)
         WRITE (6, 1040) (I, I = 1, NDIM)
C (5,24)
!     INITIALLY: DO 50
         DO ITER = 1, NTHERM
C (5,25)
C           BEGIN BLOCK
C (5,26)
            CALL SWEEP
C (5,27)
C+++++      CALL POLYA
            IPR = IPR+1
C (5,28)
            IF (IPR.EQ.NPRINT.OR.ITER.EQ.NTHERM) THEN
C (5,29)
C              BEGIN BLOCK
C (5,30)
               WRITE (6, 1050) ITER, ACPT, ENERGY, AVER2(1), (AVER2(I
     &         ), I = 2, 2*NDIM, 2)
C (5,31)
               IPR = 0
C              END BLOCK
            ELSE
C (5,32)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,33)
            ISA = ISA+1
C (5,34)
            IF (ISA.GE.NSAVE.AND.ISAVE.GT.0) THEN
C (5,35)
C     CALL SAVE(ISAVE)
               ISA = 0
            ELSE
C (5,36)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,37)
50          CONTINUE
C           END BLOCK
         ENDDO
C (5,38)
         ITER = 0
C (5,39)
         IFREQ = 0
C (5,40)
         NERR2 = 0
C (5,41)
         NERR4 = 0
C (5,42)
         CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (5,43)
         CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C     IF(ISAVE.GT.0) CALL SAVE(ISAVE)
C        END BLOCK
      ELSE
C (5,45)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,46)
C
C     MEASUREMENT
C
      IPR = 0
C (5,47)
      ISA = 0
C (5,48)
      WRITE (6, 1040) (I, I = 1, NDIM)
C (5,49)
!     INITIALLY: DO 60
      DO IT = 1, NMEAS
C (5,50)
C        BEGIN BLOCK
C (5,51)
         ITER = ITER+1
C (5,52)
         CALL SWEEP
C (5,53)
C+++++      CALL POLYA
         IPR = IPR+1
C (5,54)
         IF (IPR.EQ.NPRINT.OR.IT.EQ.NMEAS) THEN
C (5,55)
C           BEGIN BLOCK
C (5,56)
            WRITE (6, 1050) ITER, ACPT, ENERGY, AVER2(1), (AVER2(I), 
     &      I = 2, 2*NDIM, 2)
C (5,57)
            IPR = 0
C           END BLOCK
         ELSE
C (5,58)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,59)
         IFREQ = IFREQ+1
C (5,60)
         IF (IFREQ.GE.MFREQ) THEN
C (5,61)
C           BEGIN BLOCK
C (5,62)
            CALL CORR
C (5,63)
            IFREQ = 0
C           END BLOCK
         ELSE
C (5,64)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,65)
         ISA = ISA+1
C (5,66)
         IF ((ISA.GE.NSAVE.OR.IT.EQ.NMEAS).AND.ISAVE.GT.0) THEN
C (5,67)
C           BEGIN BLOCK
C (5,68)
C     CALL SAVE(ISAVE)
            ISA = 0
C (5,69)
            CALL LOOPS(W11SUM, W11INT, W22SUM, W22INT)
C (5,70)
            SUG = 0.
C (5,71)
!     INITIALLY: DO 70
            DO IPL = 1, 3
C (5,72)
C              BEGIN BLOCK
C (5,73)
               SU = 0.
C (5,74)
!     INITIALLY: DO 71
               DO ITIT = 1, LSIZE(NDIM)
C (5,75)
C                 BEGIN BLOCK
C (5,76)
                  SU = SU+W11SUM(ITIT,IPL)
C (5,77)
71                CONTINUE
C                 END BLOCK
               ENDDO
C (5,78)
               SU = SU/REAL(LSIZE(NDIM))
C (5,79)
               SUG = SUG+SU
C (5,80)
70             CONTINUE
C              END BLOCK
            ENDDO
C (5,81)
            SUG = SUG/3
C           END BLOCK
         ELSE
C (5,82)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (5,83)
60       CONTINUE
C        END BLOCK
      ENDDO
C (5,84)
C
C     RESULTS AND ERROR ANALYSIS
C
      IF (ITER.GT.0) THEN
C (5,85)
         CALL EVAL
      ELSE
C (5,86)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C
C     END BLOCK
      GOTO 200
C (3,1)
C PROGRAM NEEDS THE LABEL
999   CONTINUE
C     END UNSTRUCTURED
C (0,49)
      STOP
C (0,50)
      RETURN
C     END BLOCK
      END
C*************************EVAL*****************************
C
C     PRINT RESULTS AND ERROR ANALYSIS
C
      SUBROUTINE EVAL
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
C
      REAL*8 ED,PF,PA
      REAL*8 S110,S112,S110I,S112I,S220,S222,S220I,S222I
      REAL*8 C110,C112,C110I,C112I,C220,C222,C220I,C222I
      REAL*8 COVAR4
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      CALL STAT2(1, ED, SIGE, RE, 0)
C (0,3)
C
*      WRITE(6,1080)
*1080  FORMAT(/' POLYAKOV LINE AVERAGES:'
*     X   /'  I',12X,'FUNDAMENTAL       CORR.FAC.'
*     X   ,'            ADJOINT         CORR.FAC.')
!     INITIALLY: DO 70
      DO I = 1, NDIM
C (0,4)
C        BEGIN BLOCK
C (0,5)
         CALL STAT2(2*I, PF, SIGPF, RPF, 0)
C (0,6)
         CALL STAT2(2*I+1, PA, SIGPA, RPA, 0)
C (0,7)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,8)
C
*     X      /11X,'W11(0+)',25X,'W22(0+)'
*     X      ,25X,'W11(2+)',25X,'W22(2+)')
      CALL STAT2(10, S110, ES110, RS110, 0)
C (0,9)
      CALL STAT2(11, S112, ES112, RS112, 0)
C (0,10)
      CALL STAT2(12, S110I, ES110I, RS110I, 0)
C (0,11)
      CALL STAT2(13, S112I, ES112I, RS112I, 0)
C (0,12)
      CALL STAT2(14, S220, ES220, RS220, 0)
C (0,13)
      CALL STAT2(15, S222, ES222, RS222, 0)
C (0,14)
      CALL STAT2(16, S220I, ES220I, RS220I, 0)
C (0,15)
      CALL STAT2(17, S222I, ES222I, RS222I, 0)
C (0,16)
      MAXDST = LSIZE(NDIM)/2
C (0,17)
      NDIST = MAXDST+1
C (0,18)
!     INITIALLY: DO 80
      DO IDIST = 0, MAXDST
C (0,19)
C        BEGIN BLOCK
C (0,20)
         IND = IDIST+1
C (0,21)
         IND1 = IND+1
C (0,22)
C
         CALL STAT2(17+IND, C110, EC110, RC110, 0)
C (0,23)
         C110 = (C110-S110**2)/NVOL
C (0,24)
         EC110 = COVAR4(1, IND1, IND1)+4.*S110*(S110*COVAR4(1, 1, 1)-
     &   COVAR4(1, 1, IND1))
C (0,25)
         EC110 = SQRT(MAX(0., EC110))*RC110/NVOL
C (0,26)
C
         CALL STAT2(17+NDIST+IND, C112, EC112, RC112, 0)
C (0,27)
         C112 = C112/NVOL
C (0,28)
         EC112 = EC112/NVOL
C (0,29)
C
         CALL STAT2(17+4*NDIST+IND, C220, EC220, RC220, 0)
C (0,30)
         C220 = (C220-S220**2)/NVOL
C (0,31)
         EC220 = COVAR4(5, IND1, IND1)+4.*S220*(S220*COVAR4(5, 1, 1)-
     &   COVAR4(5, 1, IND1))
C (0,32)
         EC220 = SQRT(MAX(0., EC220))*RC220/NVOL
C (0,33)
C
         CALL STAT2(17+5*NDIST+IND, C222, EC222, RC222, 0)
C (0,34)
         C222 = C222/NVOL
C (0,35)
         EC222 = EC222/NVOL
C (0,36)
C
         CALL STAT2(17+2*NDIST+IND, C110I, EC110I, RC110I, 0)
C (0,37)
         C110I = (C110I-S110I**2)/NVOL
C (0,38)
         EC110I = COVAR4(3, IND1, IND1)+4.*S110I*(S110I*COVAR4(3, 1, 
     &   1)-COVAR4(3, 1, IND1))
C (0,39)
         EC110I = SQRT(MAX(0., EC110I))*RC110I/NVOL
C (0,40)
C
         CALL STAT2(17+3*NDIST+IND, C112I, EC112I, RC112I, 0)
C (0,41)
         C112I = C112I/NVOL
C (0,42)
         EC112I = EC112I/NVOL
C (0,43)
C
         CALL STAT2(17+6*NDIST+IND, C220I, EC220I, RC220I, 0)
C (0,44)
         C220I = (C220I-S220I**2)/NVOL
C (0,45)
         EC220I = COVAR4(7, IND1, IND1)+4.*S220I*(S220I*COVAR4(7, 1, 
     &   1)-COVAR4(7, 1, IND1))
C (0,46)
         EC220I = SQRT(MAX(0., EC220I))*RC220I/NVOL
C (0,47)
C
         CALL STAT2(17+7*NDIST+IND, C222I, EC222I, RC222I, 0)
C (0,48)
         C222I = C222I/NVOL
C (0,49)
         EC222I = EC222I/NVOL
C (0,50)
C
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,51)
C
      RETURN
C     END BLOCK
      END
C*************************SWEEP**************************
C
C     ONE VECTORISED SWEEP USING A MODIFIED HEAT BATH ALGORITHM
C
      SUBROUTINE SWEEP
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXATT=5)
C
      REAL*8 U,ACPT,ENERGY
      REAL*8 BETINV,PI,ZERO,ONE,TWO,EPS
      REAL*8 B,W1,W2,BNORM,BINV,WT,W0,C1,C2,R1,R2
      PARAMETER(PI=3.141592654D0,ZERO=0.D0,ONE=1.D0,TWO=2.D0,EPS=1.E-20)
     x 
C
      REAL*8 EDOUB
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/SW/ACPT,ENERGY
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION B(MAXVEC,0:3),W1(MAXVEC,0:3),W2(MAXVEC,0:3)
      DIMENSION BNORM(MAXVEC),BINV(MAXVEC),WT(MAXVEC),W0(MAXVEC)
      DIMENSION C1(MAXVEC),C2(MAXVEC),R1(MAXVEC),R2(MAXVEC)
C+++++EQUIVALENCE (BNORM(1),W2(1,0)),(BINV(1),W2(1,1))
C+++++EQUIVALENCE (WT(1),W2(1,2)),(W0(1),W2(1,3))
      LOGICAL LACPT(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      EDOUB = 0.D0
C (0,3)
      ENERGY = ZERO
C (0,4)
      IACPT = 0
C (0,5)
      BETINV = 1.D0/BETA
C (0,6)
C
C     LOOP OVER SUB-LATTICES  ILAT  AND LINK DIRECTIONS  I1
C
!     INITIALLY: DO 200
      DO ILAT = 1, 2**NDIM
C (0,7)
!     INITIALLY: DO 200
         DO I1 = 1, NDIM
C (0,8)
C           BEGIN BLOCK
C (0,9)
C
C     ACCUMULATE THE INTERACTING PLAQUETTES IN  B(...)
C
!     INITIALLY: DO 210
            DO I = 1, LVEC
C (0,10)
C              BEGIN BLOCK
C (0,11)
               B(I,0) = ZERO
C (0,12)
               B(I,1) = ZERO
C (0,13)
               B(I,2) = ZERO
C (0,14)
               B(I,3) = ZERO
C (0,15)
               LACPT(I) = .FALSE.
C (0,16)
210            CONTINUE
C              END BLOCK
            ENDDO
C (0,17)
C
!     INITIALLY: DO 220
            DO I2 = 1, NDIM
C (0,18)
C              BEGIN UNSTRUCTURED
C (1,1)
               IF (I1.EQ.I2) GOTO 220
C (3,1)
C              BEGIN BLOCK
C (3,2)
               CALL INTACT(ILAT, I1, I2, W1)
C (3,3)
               CALL INTACT(ILAT, I1, -I2, W2)
C (3,4)
!     INITIALLY: DO 230
               DO I = 1, LVEC
C (3,5)
C                 BEGIN BLOCK
C (3,6)
                  B(I,0) = B(I,0)+W1(I,0)+W2(I,0)
C (3,7)
                  B(I,1) = B(I,1)+W1(I,1)+W2(I,1)
C (3,8)
                  B(I,2) = B(I,2)+W1(I,2)+W2(I,2)
C (3,9)
                  B(I,3) = B(I,3)+W1(I,3)+W2(I,3)
C (3,10)
230               CONTINUE
C                 END BLOCK
               ENDDO
C              END BLOCK
C (2,1)
220            CONTINUE
C              END UNSTRUCTURED
            ENDDO
C (0,19)
C
C     HEAT BATH STEP
C
!     INITIALLY: DO 300
            DO I = 1, LVEC
C (0,20)
C              BEGIN BLOCK
C (0,21)
               BNORM(I) = SQRT(B(I,0)**2+B(I,1)**2+B(I,2)**2+B(I,3)**
     &         2)
C (0,22)
               BINV(I) = ONE/BNORM(I)
C (0,23)
               C1(I) = BETINV*BINV(I)
C (0,24)
300            CONTINUE
C              END BLOCK
            ENDDO
C (0,25)
C
!     INITIALLY: DO 310
            DO IATT = 1, MAXATT
C (0,26)
C              BEGIN BLOCK
C (0,27)
               CALL TRNGV(R1, LVEC, ONE)
C (0,28)
               CALL TRNGV(R2, LVEC, ONE)
C (0,29)
!     INITIALLY: DO 311
               DO I = 1, LVEC
C (0,30)
C                 BEGIN BLOCK
C (0,31)
                  WT(I) = ONE+C1(I)*LOG(EPS+R1(I))
C (0,32)
                  IF (R2(I)**2.LE.ONE-WT(I)**2) THEN
C (0,33)
C                    BEGIN BLOCK
C (0,34)
                     W0(I) = WT(I)
C (0,35)
                     LACPT(I) = .TRUE.
C                    END BLOCK
                  ELSE
C (0,36)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,37)
311               CONTINUE
C                 END BLOCK
               ENDDO
C (0,38)
310            CONTINUE
C              END BLOCK
            ENDDO
C (0,39)
C
            CALL TRNGV(R1, LVEC, TWO)
C (0,40)
            CALL TRNGV(R2, LVEC, PI)
C (0,41)
C
!     INITIALLY: DO 320
            DO I = 1, LVEC
C (0,42)
C              BEGIN BLOCK
C (0,43)
               IF (LACPT(I)) THEN
C (0,44)
C                 BEGIN BLOCK
C (0,45)
C
                  IACPT = IACPT+1
C (0,46)
                  EDOUB = EDOUB+BNORM(I)*W0(I)
C (0,47)
                  W1(I,0) = BINV(I)*W0(I)
C (0,48)
C
                  BINV(I) = BINV(I)*SQRT(ONE-W0(I)**2)
C (0,49)
                  R1(I) = R1(I)-ONE
C (0,50)
                  W1(I,3) = BINV(I)*R1(I)
C (0,51)
C
                  C1(I) = TAN(R2(I))
C (0,52)
                  C2(I) = C1(I)**2
C (0,53)
                  BINV(I) = BINV(I)*SQRT(ONE-R1(I)**2)/(ONE+C2(I))
C (0,54)
                  W1(I,1) = BINV(I)*(ONE-C2(I))
C (0,55)
                  W1(I,2) = BINV(I)*TWO*C1(I)
C
C                 END BLOCK
               ELSE
C (0,57)
C                 BEGIN BLOCK
C (0,58)
C
                  W1(I,0) = U(I,0,ILAT,I1)
C (0,59)
                  W1(I,1) = -U(I,1,ILAT,I1)
C (0,60)
                  W1(I,2) = -U(I,2,ILAT,I1)
C (0,61)
                  W1(I,3) = -U(I,3,ILAT,I1)
C
C                 END BLOCK
               ENDIF
C (0,63)
320            CONTINUE
C              END BLOCK
            ENDDO
C (0,64)
C
C     COMPUTE AND STORE THE NEW LINK VARIABLES
C
            CALL MATMAT(W1, B, W2, LVEC, MAXVEC)
C (0,65)
C
!     INITIALLY: DO 400
            DO I = 1, LVEC
C (0,66)
C              BEGIN BLOCK
C (0,67)
               IF (LACPT(I)) THEN
C (0,68)
C                 BEGIN BLOCK
C (0,69)
                  U(I,0,ILAT,I1) = W2(I,0)
C (0,70)
                  U(I,1,ILAT,I1) = W2(I,1)
C (0,71)
                  U(I,2,ILAT,I1) = W2(I,2)
C (0,72)
                  U(I,3,ILAT,I1) = W2(I,3)
C                 END BLOCK
               ELSE
C (0,73)
                  EDOUB = EDOUB+W2(I,0)
               ENDIF
C (0,74)
400            CONTINUE
C              END BLOCK
            ENDDO
C (0,75)
C
200         CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,76)
C
C     END OF LOOP OVER SUB-LATTICES AND LINK DIRECTIONS
C
      ENERGY = EDOUB/(4*NPLAQS)
C (0,77)
      CALL ACCUM2(1, DBLE(ENERGY))
C (0,78)
      ACPT = FLOAT(IACPT)/NLINKS
C (0,79)
      RETURN
C     END BLOCK
      END
C*************************GEOM****************************
C
C     COMPUTE GEOMETRY VECTORS
C
      SUBROUTINE GEOM
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
C
      DIMENSION LHALF(4),IBASE(4),JUMP(4)
      DIMENSION IX(4),IUP(4),IDN(4),ISTEP(4)
      LOGICAL LZ(4)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     COMPUTE SOME BASIC PARAMETERS
C
      NDSP = NDIM-1
C (0,3)
C
      NPTS = 1
C (0,4)
      LVEC = 1
C (0,5)
!     INITIALLY: DO 10
      DO I = 1, NDIM
C (0,6)
C        BEGIN BLOCK
C (0,7)
         IF (MOD(LSIZE(I), 2).NE.0) THEN
C (0,8)
            STOP
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,10)
         NVOL = NPTS
C (0,11)
         NPTS = NPTS*LSIZE(I)
C (0,12)
         LHALF(I) = LSIZE(I)/2
C (0,13)
         LVEC = LVEC*LHALF(I)
C (0,14)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,15)
C
      NLINKS = NPTS*NDIM
C (0,16)
      NPLPP = NDIM*(NDIM-1)/2
C (0,17)
      NPLAQS = NPTS*NPLPP
C (0,18)
C
C     COMPUTE THE VECTORS  NEWLAT(..)  AND  ICODE(..)
C
C        NEWLAT(ILAT,I1)  DETERMINES THE INDEX OF THE SUB-LATTICE
C              REACHED FROM  ILAT  IN DIRECTION  I1
C        ICODE(ILAT,I1)  CONTAINS THE INDEX OF THE PERMUTATION VECTOR
C              INDPBC  NEEDED ON SUB-LATTICE  ILAT  FOR A STEP  I1
C              ICODE=0 IF NO PERMUTATION IS NEEDED
C        I1 = +/-1,...,+/-NDIM
C
!     INITIALLY: DO 20
      DO I = 1, NDIM
C (0,19)
C        BEGIN BLOCK
C (0,20)
         ISTEP(I) = 2**(I-1)
C (0,21)
         LZ(I) = .FALSE.
C (0,22)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,23)
C
      ILAT = 0
C (0,24)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
100   CONTINUE
C (1,3)
      ILAT = ILAT+1
C (1,4)
C
      NEWLAT(ILAT,0) = -1
C (1,5)
      ICODE(ILAT,0) = -1
C (1,6)
C
!     INITIALLY: DO 110
      DO I1 = 1, NDIM
C (1,7)
C        BEGIN BLOCK
C (1,8)
C
         NEWLAT(ILAT,I1) = ILAT+ISTEP(I1)
C (1,9)
         NEWLAT(ILAT,-I1) = ILAT+ISTEP(I1)
C (1,10)
C
         IF (LZ(I1)) THEN
C (1,11)
C           BEGIN BLOCK
C (1,12)
            ICODE(ILAT,I1) = I1
C (1,13)
            ICODE(ILAT,-I1) = 0
C           END BLOCK
         ELSE
C (1,14)
C           BEGIN BLOCK
C (1,15)
            ICODE(ILAT,I1) = 0
C (1,16)
            ICODE(ILAT,-I1) = NDIM+I1
C           END BLOCK
         ENDIF
C (1,17)
C
110      CONTINUE
C        END BLOCK
      ENDDO
C (1,18)
      I = 1
C     END BLOCK
99988 CONTINUE
C (2,1)
C
C     DO loop 190 with exit had to be desugared
      IF (I.GT.NDIM) GOTO 99989
C (12,1)
C     BEGIN BLOCK
C (12,2)
      LZ(I) = .NOT.LZ(I)
C (12,3)
      ISTEP(I) = -ISTEP(I)
C     END BLOCK
C (13,1)
      IF (LZ(I)) GOTO 100
C (14,1)
C     BEGIN BLOCK
C (14,2)
190   CONTINUE
C (14,3)
      I = I+1
C     END BLOCK
      GOTO 99988
99989 CONTINUE
C (3,1)
C     BEGIN BLOCK
C (3,2)
C
C     COMPUTE THE INDEX VECTORS  INDPBC(...)  FOR PERMUTATIONS OF
C              VECTORS SUBJECT TO PERIODIC BOUNDARY CONDITIONS
C         INDPBC(IPT,IND)  CONTAINS THE LOCATION, WITHIN ITS VECTOR,
C              OF THE NEIGHBOUR OF THE (BLOCKED) POINT  IPT .
C              THE SHIFT  +/-I1  IS CODED IN  IND  AS DEFINED
C              DURING THE CONSTRUCTION OF THE ARRAY  ICODE(...) .
C
      IBASE(1) = 1
C (3,3)
!     INITIALLY: DO 210
      DO I = 2, NDIM
C (3,4)
C        BEGIN BLOCK
C (3,5)
         IBASE(I) = IBASE(I-1)*LHALF(I-1)
C (3,6)
         JUMP(I-1) = IBASE(I)-IBASE(I-1)
C (3,7)
210      CONTINUE
C        END BLOCK
      ENDDO
C (3,8)
      JUMP(NDIM) = IBASE(NDIM)*(LHALF(NDIM)-1)
C (3,9)
C
!     INITIALLY: DO 220
      DO I = 1, NDIM
C (3,10)
C        BEGIN BLOCK
C (3,11)
         IUP(I) = IBASE(I)
C (3,12)
         IDN(I) = JUMP(I)
C (3,13)
         IX(I) = 1
C (3,14)
220      CONTINUE
C        END BLOCK
      ENDDO
C (3,15)
      IPT = 0
C     END BLOCK
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
300   CONTINUE
C (4,3)
      IPT = IPT+1
C (4,4)
C
!     INITIALLY: DO 310
      DO I1 = 1, NDIM
C (4,5)
C        BEGIN BLOCK
C (4,6)
         INDPBC(IPT,I1) = IPT+IUP(I1)
C (4,7)
         INDPBC(IPT,NDIM+I1) = IPT+IDN(I1)
C (4,8)
310      CONTINUE
C        END BLOCK
      ENDDO
C (4,9)
      I = 1
C     END BLOCK
99986 CONTINUE
C (5,1)
C
C     DO loop 390 with exit had to be desugared
      IF (I.GT.NDIM) RETURN
C (7,1)
C     BEGIN BLOCK
C (7,2)
      IX(I) = IX(I)+1
C (7,3)
      IDN(I) = -IBASE(I)
C     END BLOCK
C (8,1)
      IF (IX(I).LT.LHALF(I)) GOTO 300
C (9,1)
      IF (IX(I).EQ.LHALF(I)) GOTO 99987
C (11,1)
C     BEGIN BLOCK
C (11,2)
      IX(I) = 1
C (11,3)
      IUP(I) = IBASE(I)
C (11,4)
      IDN(I) = JUMP(I)
C (11,5)
390   CONTINUE
C (11,6)
      I = I+1
C     END BLOCK
      GOTO 99986
99987 CONTINUE
C (10,1)
      IUP(I) = -JUMP(I)
      GOTO 300
C (6,1)
C
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE ADDAA(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99992 CONTINUE
C (0,3)
C
C     W = W + ADJ(U) * ADJ(V)
C
!     INITIALLY: DO 80
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)-U(I,0)*V(I,1)-U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)-U(I,0)*V(I,2)-U(I,1)*V(I,3)-U(I,2)*V(I,0)+U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)-U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)-U(
     &   I,3)*V(I,0)
C (0,9)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADJADJ(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99993 CONTINUE
C (0,3)
C
C     W = ADJ(U) * ADJ(V)
C
!     INITIALLY: DO 70
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = -U(I,0)*V(I,1)-U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(I,3)*V
     &   (I,2)
C (0,7)
         W(I,2) = -U(I,0)*V(I,2)-U(I,1)*V(I,3)-U(I,2)*V(I,0)+U(I,3)*V
     &   (I,1)
C (0,8)
         W(I,3) = -U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)-U(I,3)*V
     &   (I,0)
C (0,9)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDMA(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99994 CONTINUE
C (0,3)
C
C     W = W + U * ADJ(V)
C
!     INITIALLY: DO 60
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)-U(I,0)*V(I,1)+U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)-U(I,0)*V(I,2)+U(I,1)*V(I,3)+U(I,2)*V(I,0)-U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)-U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)+U(
     &   I,3)*V(I,0)
C (0,9)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE MATADJ(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99995 CONTINUE
C (0,3)
C
C     W = U * ADJ(V)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = -U(I,0)*V(I,1)+U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(I,3)*V
     &   (I,2)
C (0,7)
         W(I,2) = -U(I,0)*V(I,2)+U(I,1)*V(I,3)+U(I,2)*V(I,0)-U(I,3)*V
     &   (I,1)
C (0,8)
         W(I,3) = -U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)+U(I,3)*V
     &   (I,0)
C (0,9)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDAM(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99996 CONTINUE
C (0,3)
C
C     W = W + ADJ(U) * V
C
!     INITIALLY: DO 40
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)+U(I,0)*V(I,1)-U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)+U(I,0)*V(I,2)+U(I,1)*V(I,3)-U(I,2)*V(I,0)-U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)+U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)-U(
     &   I,3)*V(I,0)
C (0,9)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADJMAT(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99997 CONTINUE
C (0,3)
C
C     W = ADJ(U) * V
C
!     INITIALLY: DO 30
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = U(I,0)*V(I,0)+U(I,1)*V(I,1)+U(I,2)*V(I,2)+U(I,3)*V(
     &   I,3)
C (0,6)
         W(I,1) = U(I,0)*V(I,1)-U(I,1)*V(I,0)-U(I,2)*V(I,3)+U(I,3)*V(
     &   I,2)
C (0,7)
         W(I,2) = U(I,0)*V(I,2)+U(I,1)*V(I,3)-U(I,2)*V(I,0)-U(I,3)*V(
     &   I,1)
C (0,8)
         W(I,3) = U(I,0)*V(I,3)-U(I,1)*V(I,2)+U(I,2)*V(I,1)-U(I,3)*V(
     &   I,0)
C (0,9)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ADDMM(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99998 CONTINUE
C (0,3)
C
C     W = W + U * V
C
!     INITIALLY: DO 20
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
         W(I,0) = W(I,0)+U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(
     &   I,3)*V(I,3)
C (0,6)
         W(I,1) = W(I,1)+U(I,0)*V(I,1)+U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(
     &   I,3)*V(I,2)
C (0,7)
         W(I,2) = W(I,2)+U(I,0)*V(I,2)-U(I,1)*V(I,3)+U(I,2)*V(I,0)+U(
     &   I,3)*V(I,1)
C (0,8)
         W(I,3) = W(I,3)+U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)+U(
     &   I,3)*V(I,0)
C (0,9)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      RETURN
C     END BLOCK
      END
      SUBROUTINE MATMAT(U,V,W,LVEC,LDIM)
      INTEGER LVEC,LDIM,I
      REAL*8 U(1:LDIM,0:3),V(1:LDIM,0:3),W(1:LDIM,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     W = U * V
C
!     INITIALLY: DO 10
      DO I = 1, LVEC
C (0,3)
C        BEGIN BLOCK
C (0,4)
         W(I,0) = U(I,0)*V(I,0)-U(I,1)*V(I,1)-U(I,2)*V(I,2)-U(I,3)*V(
     &   I,3)
C (0,5)
         W(I,1) = U(I,0)*V(I,1)+U(I,1)*V(I,0)+U(I,2)*V(I,3)-U(I,3)*V(
     &   I,2)
C (0,6)
         W(I,2) = U(I,0)*V(I,2)-U(I,1)*V(I,3)+U(I,2)*V(I,0)+U(I,3)*V(
     &   I,1)
C (0,7)
         W(I,3) = U(I,0)*V(I,3)+U(I,1)*V(I,2)-U(I,2)*V(I,1)+U(I,3)*V(
     &   I,0)
C (0,8)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,9)
      RETURN
C     END BLOCK
      END
C*************************PERM**************************************
C
C     PERMUTE A VECTOR OF SU(2) MATRICES  U(..,..)  ACCORDING TO THE
C        INDEX VECTOR  INDPBC(..,IC)   AND RETURN THE RESULT IN
C        V(..,..)
C
C        LVEC: VECTOR LENGTH
C        LDIM: FIRST DIMENSIONAL PARAMETER OF U,V,W
C                 IN THE CALLING PROGRAM
C
      SUBROUTINE PERM(U,IC,V,LVEC)
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U,V
C
      COMMON/GEOM3/INDPBC(MAXVEC,2*4)
C
      DIMENSION U(MAXVEC,0:3),V(MAXVEC,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
!     INITIALLY: DO 10
      DO I = 2, LVEC, 2
C (0,3)
C        BEGIN BLOCK
C (0,4)
         V(I-1,0) = U(INDPBC(I-1,IC),0)
C (0,5)
         V(I-1,1) = U(INDPBC(I-1,IC),1)
C (0,6)
         V(I-1,2) = U(INDPBC(I-1,IC),2)
C (0,7)
         V(I-1,3) = U(INDPBC(I-1,IC),3)
C (0,8)
         V(I,0) = U(INDPBC(I,IC),0)
C (0,9)
         V(I,1) = U(INDPBC(I,IC),1)
C (0,10)
         V(I,2) = U(INDPBC(I,IC),2)
C (0,11)
         V(I,3) = U(INDPBC(I,IC),3)
C (0,12)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,13)
      RETURN
C     END BLOCK
      END
C*************************INTACT************************************
C
C     COMPUTE THE (VECTORISED) PRODUCT OF THREE INTERACTING NEIGHBOURS
C          OF A LINK  (ILAT2,I1)  AROUND THE PLAQUETTE  (I1,I2)
C       I1=1,..,NDIM
C       I2=+/-1,..,+/-NDIM
C
      SUBROUTINE INTACT(ILAT2,I1,I2,PROD)
*     *****************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U
      REAL*8 PROD,W1,W2
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION PROD(MAXVEC,0:3),W1(MAXVEC,0:3),W2(MAXVEC,0:3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     THE SUB-LATTICE POINTS ARE LABELLED AS FOLLOWS:
C
C               I1
C                .
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . ABS(I2)
C
C     ILAT2  REFERS TO POINT '2'
C     '2-5' IS THE CENTRAL LINK  (ILAT2,I1)
C
C     THE PRODUCT  '2-3-6-5'  (FOR POSITIVE  I2)
C              OR  '2-1-4-5'  (FOR NEGATIVE  I2)
C        IS RETURNED IN  PROD(...)
C
      IF (I2.GT.0) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
C
C     CASE  I1 POSITIVE , I2 POSITIVE
C
         ILAT3 = NEWLAT(ILAT2,I2)
C (0,5)
         ILAT5 = NEWLAT(ILAT2,I1)
C (0,6)
         IC23 = ICODE(ILAT2,I2)
C (0,7)
         IC25 = ICODE(ILAT2,I1)
C (0,8)
C
         IF (IC23.EQ.0) THEN
C (0,9)
            CALL MATMAT(U(1,0,ILAT3,I1), U(1,0,ILAT2,I2), W1, LVEC, 
     &      MAXVEC)
         ELSE
C (0,10)
C           BEGIN BLOCK
C (0,11)
            CALL PERM(U(1,0,ILAT3,I1), IC23, W2, LVEC)
C (0,12)
            CALL MATMAT(W2, U(1,0,ILAT2,I2), W1, LVEC, MAXVEC)
C           END BLOCK
         ENDIF
C (0,13)
C
         IF (IC25.EQ.0) THEN
C (0,14)
            CALL ADJMAT(U(1,0,ILAT5,I2), W1, PROD, LVEC, MAXVEC)
         ELSE
C (0,15)
C           BEGIN BLOCK
C (0,16)
            CALL PERM(U(1,0,ILAT5,I2), IC25, W2, LVEC)
C (0,17)
            CALL ADJMAT(W2, W1, PROD, LVEC, MAXVEC)
C           END BLOCK
         ENDIF
C
C        END BLOCK
      ELSE
C (0,19)
C        BEGIN BLOCK
C (0,20)
C
C     CASE  I1 POSITIVE , I2 NEGATIVE
C
         ILAT1 = NEWLAT(ILAT2,I2)
C (0,21)
         ILAT4 = NEWLAT(ILAT1,I1)
C (0,22)
         IC21 = ICODE(ILAT2,I2)
C (0,23)
         IC14 = ICODE(ILAT1,I1)
C (0,24)
C
         CALL MATADJ(U(1,0,ILAT1,I1), U(1,0,ILAT1,-I2), W1, LVEC, 
     &   MAXVEC)
C (0,25)
         IF (IC14.EQ.0) THEN
C (0,26)
            IF (IC21.EQ.0) THEN
C (0,27)
               CALL MATMAT(U(1,0,ILAT4,-I2), W1, PROD, LVEC, MAXVEC)
            ELSE
C (0,28)
C              BEGIN BLOCK
C (0,29)
               CALL MATMAT(U(1,0,ILAT4,-I2), W1, W2, LVEC, MAXVEC)
C (0,30)
               CALL PERM(W2, IC21, PROD, LVEC)
C              END BLOCK
            ENDIF
         ELSE
C (0,31)
            IF (IC21.EQ.0) THEN
C (0,32)
C              BEGIN BLOCK
C (0,33)
               CALL PERM(U(1,0,ILAT4,-I2), IC14, W2, LVEC)
C (0,34)
               CALL MATMAT(W2, W1, PROD, LVEC, MAXVEC)
C              END BLOCK
            ELSE
C (0,35)
C              BEGIN BLOCK
C (0,36)
               CALL PERM(U(1,0,ILAT4,-I2), IC14, PROD, LVEC)
C (0,37)
               CALL MATMAT(PROD, W1, W2, LVEC, MAXVEC)
C (0,38)
               CALL PERM(W2, IC21, PROD, LVEC)
C              END BLOCK
            ENDIF
         ENDIF
C
C        END BLOCK
      ENDIF
C (0,40)
C
      RETURN
C     END BLOCK
      END
C*************************BESTABNN*****************************
C
      SUBROUTINE BESTAB(BETA,NDIM)
*     *****************
C
      PARAMETER(ERROR=1.E-8)
C
      REAL*8 CD0,CD1,CD2,CD3,RD,SD,BCOEFF
C
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION CD(-1:200+2,2:20)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      BCOEFF = FLOAT(200)/((2*(NDIM-1))**2)
C (0,3)
C
      STEP = ((NDIM-1)*BETA)**2/200
C (0,4)
      BHALF = .5D0*BETA
C (0,5)
C
C     LOOP OVER POINTS
C
!     INITIALLY: DO 100
      DO IBSQ = -1, 200+2
C (0,6)
C        BEGIN BLOCK
C (0,7)
         U = IBSQ*STEP
C (0,8)
C
C     COMPUTE THE NUMERATOR AND DENOMINATOR SUMS FOR  CD(BETA,B)
C
         DENOM = 1.D0
C (0,9)
         CD(IBSQ,2) = .5D0
C (0,10)
!     INITIALLY: DO 10
         DO ND = 3, 20
C (0,11)
C           BEGIN BLOCK
C (0,12)
            CD(IBSQ,ND) = CD(IBSQ,ND-1)/ND
C (0,13)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,14)
         S = 1.
C (0,15)
         K = 0
C (0,16)
C        BEGIN UNSTRUCTURED
C (1,1)
C        BEGIN BLOCK
C (1,2)
C
20       CONTINUE
C (1,3)
         K = K+1
C (1,4)
         S = S*U/(K*(K+1))
C (1,5)
         DENOM = DENOM+S
C (1,6)
         S1 = S
C (1,7)
!     INITIALLY: DO 30
         DO ND = 2, 20
C (1,8)
C           BEGIN BLOCK
C (1,9)
            S1 = S1/(K+ND)
C (1,10)
            CD(IBSQ,ND) = CD(IBSQ,ND)+S1
C (1,11)
30          CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
C (2,1)
         IF (ABS(S).GT.DENOM*ERROR) GOTO 20
C
C     COMPUTE  CD(BETA,B)
C
C        END UNSTRUCTURED
C (0,17)
         F = 1./DENOM
C (0,18)
!     INITIALLY: DO 40
         DO ND = 2, 20
C (0,19)
C           BEGIN BLOCK
C (0,20)
            F = F*BHALF
C (0,21)
            CD(IBSQ,ND) = F*CD(IBSQ,ND)
C (0,22)
40          CONTINUE
C           END BLOCK
         ENDDO
C (0,23)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
C     COMPUTE THE COEFFICIENTS OF THE INTERPOLATING POLYNOMIALS
C
!     INITIALLY: DO 200
      DO IBSQ = 0, 200
C (0,25)
!     INITIALLY: DO 200
         DO ND = 2, 20
C (0,26)
C           BEGIN BLOCK
C (0,27)
            CD0(IBSQ,ND) = CD(IBSQ,ND)
C (0,28)
            CD1(IBSQ,ND) = -CD(IBSQ-1,ND)/3.D0-.5D0*CD(IBSQ,ND)+CD(
     &      IBSQ+1,ND)-CD(IBSQ+2,ND)/6.D0
C (0,29)
            CD2(IBSQ,ND) = .5D0*(CD(IBSQ-1,ND)+CD(IBSQ+1,ND))-CD(IBSQ
     &      ,ND)
C (0,30)
            CD3(IBSQ,ND) = (CD(IBSQ+2,ND)-CD(IBSQ-1,ND))/6.D0+.5D0*(
     &      CD(IBSQ,ND)-CD(IBSQ+1,ND))
C (0,31)
200         CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,32)
C
C     COMPUTE THE SUMS FOR  RD(BETA)
C
      RD(1) = 1.D0
C (0,33)
!     INITIALLY: DO 50
      DO ND = 2, 20
C (0,34)
C        BEGIN BLOCK
C (0,35)
         RD(ND) = RD(ND-1)/ND
C (0,36)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,37)
      U = BHALF**2
C (0,38)
      S = 1.
C (0,39)
      K = 0
C (0,40)
C     BEGIN UNSTRUCTURED
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
60    CONTINUE
C (4,3)
      K = K+1
C (4,4)
      S = S*U/(K**2)
C (4,5)
      S1 = S
C (4,6)
!     INITIALLY: DO 70
      DO ND = 1, 20
C (4,7)
C        BEGIN BLOCK
C (4,8)
         S1 = S1/(K+ND)
C (4,9)
         RD(ND) = RD(ND)+S1
C (4,10)
70       CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (5,1)
      IF (S.GT.RD(1)*ERROR) GOTO 60
C
C     COMPUTE  RD(BETA)  AND  SD(BETA)
C
C     END UNSTRUCTURED
C (0,41)
      F = 1./RD(1)
C (0,42)
      RD(1) = 1.
C (0,43)
!     INITIALLY: DO 80
      DO ND = 2, 20
C (0,44)
C        BEGIN BLOCK
C (0,45)
         D = ND
C (0,46)
         F = F*BHALF
C (0,47)
         RD(ND) = D*F*RD(ND)
C (0,48)
         SD(ND) = D/(D-1.D0)*RD(ND-1)-(D+1.D0)/BETA*RD(ND)
C (0,49)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,50)
      SD(1) = .5D0*RD(2)
C (0,51)
      RETURN
C     END BLOCK
      END
C*************************BESPOL****************************
C
C     COMPUTE THE INTERPOLATING POLYNOMIAL FOR TABULATED
C          RATIOS OF BESSEL FUNCTIONS
C
      SUBROUTINE BESPOL(ND,IND,DIFF,POL,LVEC)
*     *****************
C
      PARAMETER(ERROR=1.E-8)
C
      REAL*8 CD0,CD1,CD2,CD3
      REAL*8 DIFF,POL
C
      COMMON/BESS1/CD0(0:200,2:20),CD1(0:200,2:20)
      COMMON/BESS2/CD2(0:200,2:20),CD3(0:200,2:20)
C
      DIMENSION IND(LVEC),DIFF(LVEC),POL(LVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
!     INITIALLY: DO 10
      DO I = 2, LVEC, 2
C (0,3)
C        BEGIN BLOCK
C (0,4)
         POL(I-1) = CD0(IND(I-1),ND)+DIFF(I-1)*(CD1(IND(I-1),ND)+DIFF
     &   (I-1)*(CD2(IND(I-1),ND)+DIFF(I-1)*CD3(IND(I-1),ND)))
C (0,5)
         POL(I) = CD0(IND(I),ND)+DIFF(I)*(CD1(IND(I),ND)+DIFF(I)*(CD2
     &   (IND(I),ND)+DIFF(I)*CD3(IND(I),ND)))
C (0,6)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
C*************************INT4V*****************************
C
C     COMPUTE THE 4-LINK INTEGRAL EXPRESSIONS FOR THE
C          PLAQUETTE AVERAGE (VECTORISED VERSION)
C
      SUBROUTINE INT4V(B1,B2,B3,B4,PLINT)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR4=1.E-7,NDMAX4=8)
C
      REAL*8 BCOEFF,BETINV,RD,SD
      REAL*8 B1,B2,B3,B4,PLINT,W1,W2,TRACE,BSQ,D1,D2,D3,D4
      REAL*8 SUM1,SUM2,CHIDM1,CHID,BES1,BES2,BES3,BES4,F6
      REAL*8 B1SQ,B2SQ,B3SQ,B4SQ,CHIOLD,F5,ERR4,ZERO,ONE,TWO
      PARAMETER(ERR4=ERROR4,ZERO=0.D0,ONE=1.D0,TWO=2.D0)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION B1(MAXVEC,0:3),B2(MAXVEC,0:3)
      DIMENSION B3(MAXVEC,0:3),B4(MAXVEC,0:3),PLINT(MAXVEC)
C
      DIMENSION W1(MAXVEC,0:3),W2(MAXVEC,0:3),TRACE(MAXVEC),BSQ(MAXVEC)
      DIMENSION D1(MAXVEC),D2(MAXVEC),D3(MAXVEC),D4(MAXVEC)
      DIMENSION I1(MAXVEC),I2(MAXVEC),I3(MAXVEC),I4(MAXVEC)
      DIMENSION SUM1(MAXVEC),SUM2(MAXVEC),CHIDM1(MAXVEC),CHID(MAXVEC)
      DIMENSION BES1(MAXVEC),BES2(MAXVEC),BES3(MAXVEC),BES4(MAXVEC)
      DIMENSION F6(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C+++++EQUIVALENCE (BES1,W1(1,0)),(BES2,W1(1,1))
C+++++EQUIVALENCE (BES3,W1(1,2)),(BES4,W1(1,3))
C+++++EQUIVALENCE (D1,W2(1,0)),(D2,W2(1,1))
C+++++EQUIVALENCE (D3,W2(1,2)),(D4,W2(1,3))
C
C     PRODUCT B2*B1
C
      CALL MATMAT(B2, B1, W1, LVEC, MAXVEC)
C (0,3)
C
C     PRODUCT B3*B4
C
      CALL MATMAT(B3, B4, W2, LVEC, MAXVEC)
C (0,4)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,5)
C        BEGIN BLOCK
C (0,6)
C
         TRACE(I) = TWO*(W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I,2)*W2(I
     &   ,2)+W1(I,3)*W2(I,3))
C (0,7)
C
         B1SQ = B1(I,0)**2+B1(I,1)**2+B1(I,2)**2+B1(I,3)**2
C (0,8)
         B2SQ = B2(I,0)**2+B2(I,1)**2+B2(I,2)**2+B2(I,3)**2
C (0,9)
         B3SQ = B3(I,0)**2+B3(I,1)**2+B3(I,2)**2+B3(I,3)**2
C (0,10)
         B4SQ = B4(I,0)**2+B4(I,1)**2+B4(I,2)**2+B4(I,3)**2
C (0,11)
C
         BSQ(I) = B1SQ*B2SQ*B3SQ*B4SQ
C (0,12)
C
         D1(I) = BCOEFF*B1SQ
C (0,13)
         I1(I) = D1(I)
C (0,14)
         D1(I) = D1(I)-I1(I)
C (0,15)
C
         D2(I) = BCOEFF*B2SQ
C (0,16)
         I2(I) = D2(I)
C (0,17)
         D2(I) = D2(I)-I2(I)
C (0,18)
C
         D3(I) = BCOEFF*B3SQ
C (0,19)
         I3(I) = D3(I)
C (0,20)
         D3(I) = D3(I)-I3(I)
C (0,21)
C
         D4(I) = BCOEFF*B4SQ
C (0,22)
         I4(I) = D4(I)
C (0,23)
         D4(I) = D4(I)-I4(I)
C (0,24)
C
C     INITIALISE THE SUMS AND RECURSION RELATIONS FOR D=1
C
         SUM1(I) = SD(1)
C (0,25)
         SUM2(I) = ONE
C (0,26)
C
         CHIDM1(I) = ZERO
C (0,27)
         CHID(I) = ONE
C (0,28)
C
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)
C
C     LOOP OVER D=2,3,4,...,NDMAX4
C
!     INITIALLY: DO 100
      DO ND = 2, NDMAX4
C (0,30)
C        BEGIN BLOCK
C (0,31)
C
         CALL BESPOL(ND, I1, D1, BES1, LVEC)
C (0,32)
         CALL BESPOL(ND, I2, D2, BES2, LVEC)
C (0,33)
         CALL BESPOL(ND, I3, D3, BES3, LVEC)
C (0,34)
         CALL BESPOL(ND, I4, D4, BES4, LVEC)
C (0,35)
C
!     INITIALLY: DO 150
         DO I = 1, LVEC
C (0,36)
C           BEGIN BLOCK
C (0,37)
C
C     RECURSION RELATION FOR  CHI
C
            CHIOLD = CHIDM1(I)
C (0,38)
            CHIDM1(I) = CHID(I)
C (0,39)
            CHID(I) = TRACE(I)*CHID(I)-BSQ(I)*CHIOLD
C (0,40)
C
C     SUMMATION
C
            F5 = CHID(I)*BES1(I)*BES2(I)*BES3(I)*BES4(I)
C (0,41)
            F6(I) = RD(ND)*F5
C (0,42)
            SUM1(I) = SUM1(I)+SD(ND)*F5
C (0,43)
            SUM2(I) = SUM2(I)+F6(I)
C (0,44)
150         CONTINUE
C           END BLOCK
         ENDDO
C (0,45)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,46)
C
C     END OF LOOP OVER D
C
!     INITIALLY: DO 200
      DO I = 1, LVEC
C (0,47)
C        BEGIN BLOCK
C (0,48)
         PLINT(I) = SUM1(I)/SUM2(I)
C (0,49)
         IF (ABS(F6(I)).GT.SUM2(I)*ERR4) THEN
C (0,50)
            NERR4 = NERR4+1
         ELSE
C (0,51)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,52)
200      CONTINUE
C        END BLOCK
      ENDDO
C (0,53)
      RETURN
C     END BLOCK
      END
C*************************INT2V*****************************
C
C     COMPUTE THE 2-LINK INTEGRAL EXPRESSION FOR THE CORNER
C          (VECTORISED VERSION)
C
      SUBROUTINE INT2V(B1,B2,W,AV)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(ERROR=1.E-8)
      PARAMETER(ERROR2=1.E-7,NDMAX2=10)
C
      REAL*8 BCOEFF,BETINV,RD,SD
      REAL*8 B1,B2,W,AV,TRACE,BSQ,D1,D2,SUM1,SUM2,PHID,CHID
      REAL*8 C1,C2,F4,DENOM
      REAL*8 B1SQ,B2SQ,D,PHIOLD,F2,F3,ERR2,ZERO,ONE
      PARAMETER(ERR2=ERROR2,ZERO=0.D0,ONE=1.D0)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/BESS3/RD(20),SD(20)
      COMMON/BESS4/BCOEFF
C
      DIMENSION B1(MAXVEC,0:3),B2(MAXVEC,0:3)
      DIMENSION W(MAXVEC,0:3),AV(MAXVEC,0:3)
C
      DIMENSION TRACE(MAXVEC),BSQ(MAXVEC)
      DIMENSION I1(MAXVEC),I2(MAXVEC),D1(MAXVEC),D2(MAXVEC)
      DIMENSION SUM1(MAXVEC),SUM2(MAXVEC),PHID(MAXVEC),CHID(MAXVEC)
      DIMENSION C1(MAXVEC),C2(MAXVEC)
      DIMENSION F4(MAXVEC),DENOM(MAXVEC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     PRODUCT B2*B1
C
      CALL MATMAT(B2, B1, AV, LVEC, MAXVEC)
C (0,3)
C
!     INITIALLY: DO 50
      DO I = 1, LVEC
C (0,4)
C        BEGIN BLOCK
C (0,5)
C
         TRACE(I) = AV(I,0)*W(I,0)+AV(I,1)*W(I,1)+AV(I,2)*W(I,2)+AV(I
     &   ,3)*W(I,3)
C (0,6)
C
         B1SQ = B1(I,0)**2+B1(I,1)**2+B1(I,2)**2+B1(I,3)**2
C (0,7)
         B2SQ = B2(I,0)**2+B2(I,1)**2+B2(I,2)**2+B2(I,3)**2
C (0,8)
C
         BSQ(I) = B1SQ*B2SQ
C (0,9)
C
         D1(I) = BCOEFF*B1SQ
C (0,10)
         I1(I) = D1(I)
C (0,11)
         D1(I) = D1(I)-I1(I)
C (0,12)
C
         D2(I) = BCOEFF*B2SQ
C (0,13)
         I2(I) = D2(I)
C (0,14)
         D2(I) = D2(I)-I2(I)
C (0,15)
C
C     INITIALISE THE SUMS AND RECURSION RELATIONS FOR D=1
C
         SUM1(I) = SD(1)
C (0,16)
         SUM2(I) = ZERO
C (0,17)
         DENOM(I) = ONE
C (0,18)
C
         CHID(I) = ONE
C (0,19)
         PHID(I) = ZERO
C (0,20)
C
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,21)
C
C     LOOP OVER D=2,3,4,...,NDMAX2
C
!     INITIALLY: DO 100
      DO ND = 2, NDMAX2
C (0,22)
C        BEGIN BLOCK
C (0,23)
         D = ND
C (0,24)
C
         CALL BESPOL(ND, I1, D1, C1, LVEC)
C (0,25)
         CALL BESPOL(ND, I2, D2, C2, LVEC)
C (0,26)
C
!     INITIALLY: DO 150
         DO I = 1, LVEC
C (0,27)
C           BEGIN BLOCK
C (0,28)
C
C     RECURSION RELATION FOR  CHI  AND  PHI
C
            PHIOLD = PHID(I)
C (0,29)
            PHID(I) = D*CHID(I)+TRACE(I)*PHID(I)
C (0,30)
            CHID(I) = (TRACE(I)*PHID(I)-BSQ(I)*PHIOLD)/(D-ONE)
C (0,31)
C
C     SUMMATION
C
            F2 = C1(I)*C2(I)
C (0,32)
            F3 = CHID(I)*F2
C (0,33)
            F4(I) = RD(ND)*F3
C (0,34)
            SUM1(I) = SUM1(I)+SD(ND)*F3
C (0,35)
            SUM2(I) = SUM2(I)+RD(ND)*PHID(I)*F2
C (0,36)
            DENOM(I) = DENOM(I)+F4(I)
C (0,37)
C
150         CONTINUE
C           END BLOCK
         ENDDO
C (0,38)
C
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,39)
C
C     END OF LOOP OVER D
C
C     COMPUTE THE CORNER AVERAGE
C
!     INITIALLY: DO 200
      DO I = 1, LVEC
C (0,40)
C        BEGIN BLOCK
C (0,41)
C
         C2(I) = BETINV*SUM2(I)/DENOM(I)
C (0,42)
         C1(I) = SUM1(I)/DENOM(I)-TRACE(I)*C2(I)
C (0,43)
C
         AV(I,0) = C1(I)*W(I,0)+C2(I)*AV(I,0)
C (0,44)
         AV(I,1) = C1(I)*W(I,1)+C2(I)*AV(I,1)
C (0,45)
         AV(I,2) = C1(I)*W(I,2)+C2(I)*AV(I,2)
C (0,46)
         AV(I,3) = C1(I)*W(I,3)+C2(I)*AV(I,3)
C (0,47)
C
         IF (ABS(F4(I)).GT.DENOM(I)*ERR2) THEN
C (0,48)
            NERR2 = NERR2+1
         ELSE
C (0,49)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,50)
C
200      CONTINUE
C        END BLOCK
      ENDDO
C (0,51)
      RETURN
C     END BLOCK
      END
C*************************CORR***************************
C
C     ACCUMULATE THE GLUEBALL CORRELATIONS
C       (SUBROUTINE SPECIALISED TO 4 DIMENSIONS)
C
      SUBROUTINE CORR
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
C
      REAL*8 S110,S112,S110I,S112I
      REAL*8 S220,S222,S220I,S222I
      REAL*8 W11SUM(20,3),W11INT(20,3)
      REAL*8 W22SUM(20,3),W22INT(20,3)
      REAL*8 OP110(20),OP112(20),OP110I(20),OP112I(20)
      REAL*8 OP220(20),OP222(20),OP220I(20),OP222I(20)
      REAL*8 PR110(0:20/2),PR112(0:20/2)
      REAL*8 PR110I(0:20/2),PR112I(0:20/2)
      REAL*8 PR220(0:20/2),PR222(0:20/2)
      REAL*8 PR220I(0:20/2),PR222I(0:20/2)
      REAL*8 VECT(2+20/2,8)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      NT = LSIZE(NDIM)
C (0,3)
      MAXDST = NT/2
C (0,4)
      NDIST = MAXDST+1
C (0,5)
C
      S110 = 0.D0
C (0,6)
      S112 = 0.D0
C (0,7)
      S110I = 0.D0
C (0,8)
      S112I = 0.D0
C (0,9)
C
      S220 = 0.D0
C (0,10)
      S222 = 0.D0
C (0,11)
      S220I = 0.D0
C (0,12)
      S222I = 0.D0
C (0,13)
C
      CALL LOOPS(W11SUM, W11INT, W22SUM, W22INT)
C (0,14)
C
!     INITIALLY: DO 10
      DO IT = 1, NT
C (0,15)
C        BEGIN BLOCK
C (0,16)
C
         OP110(IT) = W11SUM(IT,3)+W11SUM(IT,2)+W11SUM(IT,1)
C (0,17)
         OP112(IT) = W11SUM(IT,3)+W11SUM(IT,2)-2*W11SUM(IT,1)
C (0,18)
         OP110I(IT) = W11INT(IT,3)+W11INT(IT,2)+W11INT(IT,1)
C (0,19)
         OP112I(IT) = W11INT(IT,3)+W11INT(IT,2)-2*W11INT(IT,1)
C (0,20)
C
         OP220(IT) = W22SUM(IT,3)+W22SUM(IT,2)+W22SUM(IT,1)
C (0,21)
         OP222(IT) = W22SUM(IT,3)+W22SUM(IT,2)-2*W22SUM(IT,1)
C (0,22)
         OP220I(IT) = W22INT(IT,3)+W22INT(IT,2)+W22INT(IT,1)
C (0,23)
         OP222I(IT) = W22INT(IT,3)+W22INT(IT,2)-2*W22INT(IT,1)
C (0,24)
C
         S110 = S110+OP110(IT)
C (0,25)
         S112 = S112+OP112(IT)
C (0,26)
         S110I = S110I+OP110I(IT)
C (0,27)
         S112I = S112I+OP112I(IT)
C (0,28)
C
         S220 = S220+OP220(IT)
C (0,29)
         S222 = S222+OP222(IT)
C (0,30)
         S220I = S220I+OP220I(IT)
C (0,31)
         S222I = S222I+OP222I(IT)
C (0,32)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,33)
C
      CALL ACCUM2(10, S110/NT)
C (0,34)
      CALL ACCUM2(11, S112/NT)
C (0,35)
      CALL ACCUM2(12, S110I/NT)
C (0,36)
      CALL ACCUM2(13, S112I/NT)
C (0,37)
C
      CALL ACCUM2(14, S220/NT)
C (0,38)
      CALL ACCUM2(15, S222/NT)
C (0,39)
      CALL ACCUM2(16, S220I/NT)
C (0,40)
      CALL ACCUM2(17, S222I/NT)
C (0,41)
C
      VECT(1,1) = S110/NT
C (0,42)
      VECT(1,2) = S112/NT
C (0,43)
      VECT(1,3) = S110I/NT
C (0,44)
      VECT(1,4) = S112I/NT
C (0,45)
      VECT(1,5) = S220/NT
C (0,46)
      VECT(1,6) = S222/NT
C (0,47)
      VECT(1,7) = S220I/NT
C (0,48)
      VECT(1,8) = S222I/NT
C (0,49)
C
!     INITIALLY: DO 20
      DO IDIST = 0, MAXDST
C (0,50)
C        BEGIN BLOCK
C (0,51)
         PR110(IDIST) = 0.D0
C (0,52)
         PR112(IDIST) = 0.D0
C (0,53)
         PR110I(IDIST) = 0.D0
C (0,54)
         PR112I(IDIST) = 0.D0
C (0,55)
C
         PR220(IDIST) = 0.D0
C (0,56)
         PR222(IDIST) = 0.D0
C (0,57)
         PR220I(IDIST) = 0.D0
C (0,58)
         PR222I(IDIST) = 0.D0
C (0,59)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,60)
C
!     INITIALLY: DO 30
      DO IT1 = 1, NT
C (0,61)
!     INITIALLY: DO 30
         DO IT2 = IT1, NT
C (0,62)
C           BEGIN BLOCK
C (0,63)
            IDIST = MIN(IT2-IT1, NT+IT1-IT2)
C (0,64)
            PR110(IDIST) = PR110(IDIST)+OP110(IT1)*OP110(IT2)
C (0,65)
            PR112(IDIST) = PR112(IDIST)+OP112(IT1)*OP112(IT2)
C (0,66)
            PR110I(IDIST) = PR110I(IDIST)+OP110I(IT1)*OP110I(IT2)
C (0,67)
            PR112I(IDIST) = PR112I(IDIST)+OP112I(IT1)*OP112I(IT2)
C (0,68)
C
            PR220(IDIST) = PR220(IDIST)+OP220(IT1)*OP220(IT2)
C (0,69)
            PR222(IDIST) = PR222(IDIST)+OP222(IT1)*OP222(IT2)
C (0,70)
            PR220I(IDIST) = PR220I(IDIST)+OP220I(IT1)*OP220I(IT2)
C (0,71)
            PR222I(IDIST) = PR222I(IDIST)+OP222I(IT1)*OP222I(IT2)
C (0,72)
30          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,73)
C
!     INITIALLY: DO 40
      DO IDIST = 0, MAXDST
C (0,74)
C        BEGIN BLOCK
C (0,75)
         IND = IDIST+1
C (0,76)
         IND1 = IND+1
C (0,77)
         FACT = 1.D0/NT
C (0,78)
         IF (2*IDIST.EQ.NT) THEN
C (0,79)
            FACT = 2.D0/NT
         ELSE
C (0,80)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,81)
C
         CALL ACCUM2(17+IND, PR110(IDIST)*FACT)
C (0,82)
         CALL ACCUM2(17+NDIST+IND, PR112(IDIST)*FACT)
C (0,83)
         CALL ACCUM2(17+2*NDIST+IND, PR110I(IDIST)*FACT)
C (0,84)
         CALL ACCUM2(17+3*NDIST+IND, PR112I(IDIST)*FACT)
C (0,85)
C
         CALL ACCUM2(17+4*NDIST+IND, PR220(IDIST)*FACT)
C (0,86)
         CALL ACCUM2(17+5*NDIST+IND, PR222(IDIST)*FACT)
C (0,87)
         CALL ACCUM2(17+6*NDIST+IND, PR220I(IDIST)*FACT)
C (0,88)
         CALL ACCUM2(17+7*NDIST+IND, PR222I(IDIST)*FACT)
C (0,89)
C
         VECT(IND1,1) = PR110(IDIST)*FACT
C (0,90)
         VECT(IND1,2) = PR112(IDIST)*FACT
C (0,91)
         VECT(IND1,3) = PR110I(IDIST)*FACT
C (0,92)
         VECT(IND1,4) = PR112I(IDIST)*FACT
C (0,93)
         VECT(IND1,5) = PR220(IDIST)*FACT
C (0,94)
         VECT(IND1,6) = PR222(IDIST)*FACT
C (0,95)
         VECT(IND1,7) = PR220I(IDIST)*FACT
C (0,96)
         VECT(IND1,8) = PR222I(IDIST)*FACT
C (0,97)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,98)
C
!     INITIALLY: DO 50
      DO IBL = 1, 8
C (0,99)
C        BEGIN BLOCK
C (0,100)
         CALL ACCUM4(IBL, VECT(1,IBL))
C (0,101)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,102)
      RETURN
C     END BLOCK
      END
C*************************LOOPS**************************
C
C     MEASUREMENT OF SUMS OF LOOPS (VECTORISED)
C          W11SUM(IT,IPLANE) : NAIVE PLAQUETTE EXPRESSION
C          W11INT(IT,IPLANE) : 4-LINK INTEGRAL
C          W22SUM(IT,IPLANE) : NAIVE 2X2 LOOP
C          W22INT(IT,IPLANE) : 2X2 LOOP INTEGRAL (4 CORNERS)
C        IT: TIME SLICE
C        IPLANE=1,2,...  FOR SPATIAL PLANES (1,2),(1,3),...
C
      SUBROUTINE LOOPS(W11SUM,W11INT,W22SUM,W22INT)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(NST=(4-1)*(4-2),MAXSL=2**(4-1))
C
      REAL*8 U,BETINV
      REAL*8 R,S,W1,W2,WP,WR,WL,W,WLOOP1,WLOOP2
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/GEOM1/NEWLAT(2**4,-4:4)
      COMMON/GEOM2/ICODE(2**4,-4:4)
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C
      DIMENSION R(MAXVEC,0:3,MAXSL,NST),S(MAXVEC,0:3,MAXSL,NST)
      DIMENSION W1(MAXVEC,0:3),W2(MAXVEC,0:3),WP(MAXVEC,0:3)
      DIMENSION WR(MAXVEC,0:3),WL(MAXVEC,0:3),W(MAXVEC,0:3)
      DIMENSION WLOOP1(MAXVEC),WLOOP2(MAXVEC)
C
      DIMENSION MPL(4,4),MPLANE(4,4)
C
      REAL*8 W11SUM(20,3),W11INT(20,3)
      REAL*8 W22SUM(20,3),W22INT(20,3)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      NT = LSIZE(NDIM)
C (0,3)
      NSPLPP = NDSP*(NDSP-1)/2
C (0,4)
      LSPVEC = NVOL/(2**NDSP)
C (0,5)
C
      BETINV = 1.D0/BETA
C (0,6)
C
      IPLANE = 0
C (0,7)
!     INITIALLY: DO 10
      DO I1 = 1, NDSP-1
C (0,8)
!     INITIALLY: DO 10
         DO I2 = I1+1, NDSP
C (0,9)
C           BEGIN BLOCK
C (0,10)
            IPLANE = IPLANE+1
C (0,11)
            MPLANE(I1,I2) = IPLANE
C (0,12)
            MPLANE(I2,I1) = IPLANE
C (0,13)
10          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,14)
C
      I1I2 = 0
C (0,15)
!     INITIALLY: DO 20
      DO I1 = 1, NDSP
C (0,16)
!     INITIALLY: DO 20
         DO I2 = 1, NDSP
C (0,17)
C           BEGIN UNSTRUCTURED
C (1,1)
            IF (I1.EQ.I2) GOTO 20
C (3,1)
C           BEGIN BLOCK
C (3,2)
            I1I2 = I1I2+1
C (3,3)
            MPL(I1,I2) = I1I2
C           END BLOCK
C (2,1)
20          CONTINUE
C           END UNSTRUCTURED
         ENDDO
      ENDDO
C (0,18)
C
!     INITIALLY: DO 40
      DO IPLANE = 1, NSPLPP
C (0,19)
!     INITIALLY: DO 40
         DO IT = 1, NT
C (0,20)
C           BEGIN BLOCK
C (0,21)
            W11SUM(IT,IPLANE) = 0.D0
C (0,22)
            W11INT(IT,IPLANE) = 0.D0
C (0,23)
            W22SUM(IT,IPLANE) = 0.D0
C (0,24)
            W22INT(IT,IPLANE) = 0.D0
C (0,25)
40          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,26)
C
C     LOOP OVER SUB-LATTICES WITH ODD AND EVEN TIME-SLICES
C
!     INITIALLY: DO 900
      DO IFIRST = 1, 2
C (0,27)
C        BEGIN BLOCK
C (0,28)
C
         IADD = 0
C (0,29)
         IF (IFIRST.EQ.2) THEN
C (0,30)
            IADD = 2**NDSP
         ELSE
C (0,31)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,32)
C.....................................................
C     COMPUTE THE SPACE-LIKE PRODUCTS R AND S
C
C     LOOP OVER SPATIAL PLAQUETTES (ILAT2,I1,I2)
C
!     INITIALLY: DO 100
         DO ILAT2 = 1, 2**NDSP
C (0,33)
!     INITIALLY: DO 100
            DO I1 = 1, NDSP-1
C (0,34)
!     INITIALLY: DO 100
               DO I2 = I1+1, NDSP
C (0,35)
C                 BEGIN BLOCK
C (0,36)
C
C               I1
C                .
C                .       5   6
C                .       2   3
C                . . . . . . . . . . I2
C
C     ILAT2  REFERS TO POINT '2'
C
                  I1I2 = MPL(I1,I2)
C (0,37)
                  I2I1 = MPL(I2,I1)
C (0,38)
C
                  ILAT3 = NEWLAT(ILAT2,I2)
C (0,39)
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,40)
C
                  IU2 = ILAT2+IADD
C (0,41)
                  IU3 = ILAT3+IADD
C (0,42)
                  IU5 = ILAT5+IADD
C (0,43)
C
                  IC23 = ICODE(ILAT2,I2)
C (0,44)
                  IC25 = ICODE(ILAT2,I1)
C (0,45)
                  IC32 = ICODE(ILAT3,-I2)
C (0,46)
                  IC52 = ICODE(ILAT5,-I1)
C (0,47)
C
C     PRODUCT '2-3-6' IN W1
C
                  IF (IC23.EQ.0) THEN
C (0,48)
                     CALL MATMAT(U(1,0,IU3,I1), U(1,0,IU2,I2), W1, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,49)
C                    BEGIN BLOCK
C (0,50)
                     CALL PERM(U(1,0,IU3,I1), IC23, WP, LVEC)
C (0,51)
                     CALL MATMAT(WP, U(1,0,IU2,I2), W1, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,52)
C
C     PRODUCT '2-3-6-5' IN R
C
                  IF (IC25.EQ.0) THEN
C (0,53)
                     CALL ADJMAT(U(1,0,IU5,I2), W1, R(1,0,ILAT2,I1I2)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,54)
C                    BEGIN BLOCK
C (0,55)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,56)
                     CALL ADJMAT(WP, W1, R(1,0,ILAT2,I1I2), LVEC, 
     &               MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,57)
C
C     PRODUCT '5-2-3-6' IN S
C
                  IF (IC52.EQ.0) THEN
C (0,58)
                     CALL MATADJ(W1, U(1,0,IU2,I1), S(1,0,ILAT5,I2I1)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,59)
C                    BEGIN BLOCK
C (0,60)
                     CALL MATADJ(W1, U(1,0,IU2,I1), WP, LVEC, MAXVEC)
C (0,61)
                     CALL PERM(WP, IC52, S(1,0,ILAT5,I2I1), LVEC)
C                    END BLOCK
                  ENDIF
C (0,62)
C
C     PRODUCT '2-5-6' IN W2
C
                  IF (IC25.EQ.0) THEN
C (0,63)
                     CALL MATMAT(U(1,0,IU5,I2), U(1,0,IU2,I1), W2, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,64)
C                    BEGIN BLOCK
C (0,65)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,66)
                     CALL MATMAT(WP, U(1,0,IU2,I1), W2, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,67)
C
C     PRODUCT '2-5-6-3' IN R
C
                  IF (IC23.EQ.0) THEN
C (0,68)
                     CALL ADJMAT(U(1,0,IU3,I1), W2, R(1,0,ILAT2,I2I1)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,69)
C                    BEGIN BLOCK
C (0,70)
                     CALL PERM(U(1,0,IU3,I1), IC23, WP, LVEC)
C (0,71)
                     CALL ADJMAT(WP, W2, R(1,0,ILAT2,I2I1), LVEC, 
     &               MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,72)
C
C     PRODUCT '3-2-5-6' IN S
C
                  IF (IC32.EQ.0) THEN
C (0,73)
                     CALL MATADJ(W2, U(1,0,IU2,I2), S(1,0,ILAT3,I1I2)
     &               , LVEC, MAXVEC)
                  ELSE
C (0,74)
C                    BEGIN BLOCK
C (0,75)
                     CALL MATADJ(W2, U(1,0,IU2,I2), WP, LVEC, MAXVEC)
C (0,76)
                     CALL PERM(WP, IC32, S(1,0,ILAT3,I1I2), LVEC)
C                    END BLOCK
                  ENDIF
C (0,77)
C
C     COMPUTE AND ACCUMULATE THE SPATIAL PLAQUETTES
C
!     INITIALLY: DO 110
                  DO I = 1, LVEC
C (0,78)
C                    BEGIN BLOCK
C (0,79)
                     WLOOP1(I) = W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I
     &               ,2)*W2(I,2)+W1(I,3)*W2(I,3)
C (0,80)
110                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,81)
C
                  IPLANE = MPLANE(I1,I2)
C (0,82)
                  N = 0
C (0,83)
!     INITIALLY: DO 120
                  DO IT = IFIRST, NT, 2
C (0,84)
C                    BEGIN BLOCK
C (0,85)
!     INITIALLY: DO 130
                     DO I = 1, LSPVEC
C (0,86)
C                       BEGIN BLOCK
C (0,87)
                        W11SUM(IT,IPLANE) = W11SUM(IT,IPLANE)+DBLE(
     &                  WLOOP1(N+I))
C (0,88)
130                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,89)
                     N = N+LSPVEC
C (0,90)
120                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,91)
C
100               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,92)
C
C     END OF LOOP OVER SPATIAL PLAQUETTES
C.....................................................
C     COMPUTE THE SPACE-LIKE 2X2 LOOPS
C
C     LOOP OVER SPATIAL PLANES (ILAT2,I1,I2)
C
!     INITIALLY: DO 200
         DO ILAT2 = 1, 2**NDSP
C (0,93)
!     INITIALLY: DO 200
            DO I1 = 1, NDSP-1
C (0,94)
!     INITIALLY: DO 200
               DO I2 = I1+1, NDSP
C (0,95)
C                 BEGIN BLOCK
C (0,96)
C
C               I1
C                .    7   8   9
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . I2
C
C     ILAT2  REFERS TO POINT '2'
C
                  I1I2 = MPL(I1,I2)
C (0,97)
C
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,98)
                  IC25 = ICODE(ILAT2,I1)
C (0,99)
C
C     PRODUCT '5-4-1-2-3-6-5' IN W1
C
                  CALL MATADJ(R(1,0,ILAT2,I1I2), S(1,0,ILAT2,I1I2), 
     &            W1, LVEC, MAXVEC)
C (0,100)
C
C     PRODUCT '5-4-7-8-9-6-5' IN W2
C
                  IF (IC25.EQ.0) THEN
C (0,101)
                     CALL ADJMAT(R(1,0,ILAT5,I1I2), S(1,0,ILAT5,I1I2)
     &               , W2, LVEC, MAXVEC)
                  ELSE
C (0,102)
C                    BEGIN BLOCK
C (0,103)
                     CALL ADJMAT(R(1,0,ILAT5,I1I2), S(1,0,ILAT5,I1I2)
     &               , WP, LVEC, MAXVEC)
C (0,104)
                     CALL PERM(WP, IC25, W2, LVEC)
C                    END BLOCK
                  ENDIF
C (0,105)
C
C     COMPUTE AND ACCUMULATE THE SPATIAL 2X2 LOOPS
C
!     INITIALLY: DO 210
                  DO I = 1, LVEC
C (0,106)
C                    BEGIN BLOCK
C (0,107)
                     WLOOP2(I) = W1(I,0)*W2(I,0)+W1(I,1)*W2(I,1)+W1(I
     &               ,2)*W2(I,2)+W1(I,3)*W2(I,3)
C (0,108)
210                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,109)
C
                  IPLANE = MPLANE(I1,I2)
C (0,110)
                  N = 0
C (0,111)
!     INITIALLY: DO 220
                  DO IT = IFIRST, NT, 2
C (0,112)
C                    BEGIN BLOCK
C (0,113)
!     INITIALLY: DO 230
                     DO I = 1, LSPVEC
C (0,114)
C                       BEGIN BLOCK
C (0,115)
                        W22SUM(IT,IPLANE) = W22SUM(IT,IPLANE)+DBLE(
     &                  WLOOP2(N+I))
C (0,116)
230                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,117)
                     N = N+LSPVEC
C (0,118)
220                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,119)
C
200               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,120)
C
C     END OF LOOP OVER SPATIAL PLANES
C..........................................................
C     COMPUTE THE TIME-LIKE PRODUCTS
C       AND REPLACE  R  AND  S  BY THE COMPLEMENTARY
C       BACKGROUND EXPRESSIONS  (SUM - R)  AND  (SUM - S)
C
C     LOOP OVER SPATIAL LINKS (ILAT,I1)
C
!     INITIALLY: DO 300
         DO ILAT = 1, 2**NDSP
C (0,121)
!     INITIALLY: DO 300
            DO I1 = 1, NDSP
C (0,122)
C              BEGIN BLOCK
C (0,123)
C
               CALL INTACT(ILAT+IADD, I1, NDIM, W1)
C (0,124)
               CALL INTACT(ILAT+IADD, I1, -NDIM, W2)
C (0,125)
!     INITIALLY: DO 310
               DO I = 1, LVEC
C (0,126)
C                 BEGIN BLOCK
C (0,127)
                  W1(I,0) = W1(I,0)+W2(I,0)
C (0,128)
                  W1(I,1) = W1(I,1)+W2(I,1)
C (0,129)
                  W1(I,2) = W1(I,2)+W2(I,2)
C (0,130)
                  W1(I,3) = W1(I,3)+W2(I,3)
C (0,131)
310               CONTINUE
C                 END BLOCK
               ENDDO
C (0,132)
C
!     INITIALLY: DO 320
               DO I2 = 1, NDSP
C (0,133)
C                 BEGIN UNSTRUCTURED
C (4,1)
                  IF (I1.EQ.I2) GOTO 320
C (6,1)
C                 BEGIN BLOCK
C (6,2)
                  I1I2 = MPL(I1,I2)
C (6,3)
!     INITIALLY: DO 321
                  DO I = 1, LVEC
C (6,4)
C                    BEGIN BLOCK
C (6,5)
                     W1(I,0) = W1(I,0)+R(I,0,ILAT,I1I2)+S(I,0,ILAT,
     &               I1I2)
C (6,6)
                     W1(I,1) = W1(I,1)+R(I,1,ILAT,I1I2)+S(I,1,ILAT,
     &               I1I2)
C (6,7)
                     W1(I,2) = W1(I,2)+R(I,2,ILAT,I1I2)+S(I,2,ILAT,
     &               I1I2)
C (6,8)
                     W1(I,3) = W1(I,3)+R(I,3,ILAT,I1I2)+S(I,3,ILAT,
     &               I1I2)
C (6,9)
321                  CONTINUE
C                    END BLOCK
                  ENDDO
C                 END BLOCK
C (5,1)
320               CONTINUE
C                 END UNSTRUCTURED
               ENDDO
C (0,134)
C
!     INITIALLY: DO 330
               DO I2 = 1, NDSP
C (0,135)
C                 BEGIN UNSTRUCTURED
C (7,1)
                  IF (I1.EQ.I2) GOTO 330
C (9,1)
C                 BEGIN BLOCK
C (9,2)
                  I1I2 = MPL(I1,I2)
C (9,3)
!     INITIALLY: DO 331
                  DO I = 1, LVEC
C (9,4)
C                    BEGIN BLOCK
C (9,5)
                     R(I,0,ILAT,I1I2) = W1(I,0)-R(I,0,ILAT,I1I2)
C (9,6)
                     R(I,1,ILAT,I1I2) = W1(I,1)-R(I,1,ILAT,I1I2)
C (9,7)
                     R(I,2,ILAT,I1I2) = W1(I,2)-R(I,2,ILAT,I1I2)
C (9,8)
                     R(I,3,ILAT,I1I2) = W1(I,3)-R(I,3,ILAT,I1I2)
C (9,9)
                     S(I,0,ILAT,I1I2) = W1(I,0)-S(I,0,ILAT,I1I2)
C (9,10)
                     S(I,1,ILAT,I1I2) = W1(I,1)-S(I,1,ILAT,I1I2)
C (9,11)
                     S(I,2,ILAT,I1I2) = W1(I,2)-S(I,2,ILAT,I1I2)
C (9,12)
                     S(I,3,ILAT,I1I2) = W1(I,3)-S(I,3,ILAT,I1I2)
C (9,13)
331                  CONTINUE
C                    END BLOCK
                  ENDDO
C                 END BLOCK
C (8,1)
330               CONTINUE
C                 END UNSTRUCTURED
               ENDDO
C (0,136)
C
300            CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
C (0,137)
C
C     END OF LOOP OVER SPATIAL LINKS
C..........................................................
C     COMPUTE THE SPACE-LIKE 1X1 AND 2X2 INTEGRALS
C
C     LOOP OVER SPATIAL PLANES (ILAT1,I1,I2)
C
!     INITIALLY: DO 400
         DO ILAT1 = 1, 2**NDSP
C (0,138)
!     INITIALLY: DO 400
            DO I1 = 1, NDSP-1
C (0,139)
!     INITIALLY: DO 400
               DO I2 = I1+1, NDSP
C (0,140)
C                 BEGIN BLOCK
C (0,141)
C
C               I1
C                .    7   8   9
C                .    4   5   6
C                .    1   2   3
C                . . . . . . . . . . I2
C
C     ILAT1  REFERS TO POINT '1'
C
                  I1I2 = MPL(I1,I2)
C (0,142)
                  I2I1 = MPL(I2,I1)
C (0,143)
C
                  ILAT2 = NEWLAT(ILAT1,I2)
C (0,144)
                  ILAT3 = NEWLAT(ILAT2,I2)
C (0,145)
                  ILAT4 = NEWLAT(ILAT1,I1)
C (0,146)
                  ILAT5 = NEWLAT(ILAT2,I1)
C (0,147)
                  ILAT6 = NEWLAT(ILAT3,I1)
C (0,148)
                  ILAT7 = NEWLAT(ILAT4,I1)
C (0,149)
                  ILAT8 = NEWLAT(ILAT5,I1)
C (0,150)
C
                  IU2 = ILAT2+IADD
C (0,151)
                  IU4 = ILAT4+IADD
C (0,152)
                  IU5 = ILAT5+IADD
C (0,153)
C
                  IC12 = ICODE(ILAT1,I2)
C (0,154)
                  IC14 = ICODE(ILAT1,I1)
C (0,155)
                  IC23 = ICODE(ILAT2,I2)
C (0,156)
                  IC25 = ICODE(ILAT2,I1)
C (0,157)
                  IC45 = ICODE(ILAT4,I2)
C (0,158)
                  IC47 = ICODE(ILAT4,I1)
C (0,159)
                  IC56 = ICODE(ILAT5,I2)
C (0,160)
                  IC58 = ICODE(ILAT5,I1)
C (0,161)
C
C     COMPUTE THE PLAQUETTE INTEGRAL FOR   4  5
C                                          1  2
C
                  IF (IC12.EQ.0) THEN
C (0,162)
                     IF (IC14.EQ.0) THEN
C (0,163)
                        CALL INT4V(R(1,0,ILAT1,I2I1), S(1,0,ILAT2,
     &                  I1I2), S(1,0,ILAT4,I2I1), R(1,0,ILAT1,I1I2), 
     &                  WLOOP1)
                     ELSE
C (0,164)
C                       BEGIN BLOCK
C (0,165)
                        CALL PERM(S(1,0,ILAT4,I2I1), IC14, WP, LVEC)
C (0,166)
                        CALL INT4V(R(1,0,ILAT1,I2I1), S(1,0,ILAT2,
     &                  I1I2), WP, R(1,0,ILAT1,I1I2), WLOOP1)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,167)
C                    BEGIN BLOCK
C (0,168)
                     CALL PERM(S(1,0,ILAT2,I1I2), IC12, W1, LVEC)
C (0,169)
                     IF (IC14.EQ.0) THEN
C (0,170)
                        CALL INT4V(R(1,0,ILAT1,I2I1), W1, S(1,0,ILAT4
     &                  ,I2I1), R(1,0,ILAT1,I1I2), WLOOP1)
                     ELSE
C (0,171)
C                       BEGIN BLOCK
C (0,172)
                        CALL PERM(S(1,0,ILAT4,I2I1), IC14, WP, LVEC)
C (0,173)
                        CALL INT4V(R(1,0,ILAT1,I2I1), W1, WP, R(1,0,
     &                  ILAT1,I1I2), WLOOP1)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,174)
C
C     COMPUTE THE 2X2 LOOP INTEGRALS
C
C     CORNER '2-3-6' IN  W1  (REFERENCE POINT '2')
C
                  IF (IC25.EQ.0) THEN
C (0,175)
                     CALL MATMAT(U(1,0,IU5,I2), U(1,0,IU2,I1), W, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,176)
C                    BEGIN BLOCK
C (0,177)
                     CALL PERM(U(1,0,IU5,I2), IC25, WP, LVEC)
C (0,178)
                     CALL MATMAT(WP, U(1,0,IU2,I1), W, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,179)
C
                  IF (IC23.EQ.0) THEN
C (0,180)
                     CALL INT2V(R(1,0,ILAT2,I2I1), S(1,0,ILAT3,I1I2)
     &               , W, W1)
                  ELSE
C (0,181)
C                    BEGIN BLOCK
C (0,182)
                     CALL PERM(S(1,0,ILAT3,I1I2), IC23, WP, LVEC)
C (0,183)
                     CALL INT2V(R(1,0,ILAT2,I2I1), WP, W, W1)
C                    END BLOCK
                  ENDIF
C (0,184)
C
C     CORNER '6-9-8' IN  W2  (REFERENCE POINT '5')
C
                  CALL MATADJ(U(1,0,IU5,I1), U(1,0,IU5,I2), W, LVEC, 
     &            MAXVEC)
C (0,185)
C
!     INITIALLY: DO 450
                  DO I = 1, LVEC
C (0,186)
C                    BEGIN BLOCK
C (0,187)
                     WR(I,0) = S(I,0,ILAT8,I2I1)
C (0,188)
                     WR(I,1) = -S(I,1,ILAT8,I2I1)
C (0,189)
                     WR(I,2) = -S(I,2,ILAT8,I2I1)
C (0,190)
                     WR(I,3) = -S(I,3,ILAT8,I2I1)
C (0,191)
450                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,192)
                  IF (IC58.EQ.0) THEN
C (0,193)
                     IF (IC56.EQ.0) THEN
C (0,194)
                        CALL INT2V(S(1,0,ILAT6,I1I2), WR, W, W2)
                     ELSE
C (0,195)
C                       BEGIN BLOCK
C (0,196)
                        CALL PERM(S(1,0,ILAT6,I1I2), IC56, WP, LVEC)
C (0,197)
                        CALL INT2V(WP, WR, W, W2)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,198)
C                    BEGIN BLOCK
C (0,199)
                     CALL PERM(WR, IC58, WL, LVEC)
C (0,200)
                     IF (IC56.EQ.0) THEN
C (0,201)
                        CALL INT2V(S(1,0,ILAT6,I1I2), WL, W, W2)
                     ELSE
C (0,202)
C                       BEGIN BLOCK
C (0,203)
                        CALL PERM(S(1,0,ILAT6,I1I2), IC56, WP, LVEC)
C (0,204)
                        CALL INT2V(WP, WL, W, W2)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,205)
C
C     PRODUCT '2-3-6-9-8' IN  WR  (REFERENCE POINT '2')
C
                  IF (IC25.EQ.0) THEN
C (0,206)
                     CALL MATMAT(W2, W1, WR, LVEC, MAXVEC)
                  ELSE
C (0,207)
C                    BEGIN BLOCK
C (0,208)
                     CALL PERM(W2, IC25, WP, LVEC)
C (0,209)
                     CALL MATMAT(WP, W1, WR, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,210)
C
C     CORNER '2-1-4' IN  W1  (REFERENCE POINT '1')
C
                  IF (IC12.EQ.0) THEN
C (0,211)
                     IF (IC14.EQ.0) THEN
C (0,212)
                        CALL ADJMAT(U(1,0,IU4,I2), U(1,0,IU2,I1), W, 
     &                  LVEC, MAXVEC)
                     ELSE
C (0,213)
C                       BEGIN BLOCK
C (0,214)
                        CALL PERM(U(1,0,IU4,I2), IC14, WP, LVEC)
C (0,215)
                        CALL ADJMAT(WP, U(1,0,IU2,I1), W, LVEC, 
     &                  MAXVEC)
C                       END BLOCK
                     ENDIF
                  ELSE
C (0,216)
C                    BEGIN BLOCK
C (0,217)
                     CALL PERM(U(1,0,IU2,I1), IC12, W2, LVEC)
C (0,218)
                     IF (IC14.EQ.0) THEN
C (0,219)
                        CALL ADJMAT(U(1,0,IU4,I2), W2, W, LVEC, 
     &                  MAXVEC)
                     ELSE
C (0,220)
C                       BEGIN BLOCK
C (0,221)
                        CALL PERM(U(1,0,IU4,I2), IC14, WP, LVEC)
C (0,222)
                        CALL ADJMAT(WP, W2, W, LVEC, MAXVEC)
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
C (0,223)
C
!     INITIALLY: DO 460
                  DO I = 1, LVEC
C (0,224)
C                    BEGIN BLOCK
C (0,225)
                     WL(I,0) = R(I,0,ILAT1,I2I1)
C (0,226)
                     WL(I,1) = -R(I,1,ILAT1,I2I1)
C (0,227)
                     WL(I,2) = -R(I,2,ILAT1,I2I1)
C (0,228)
                     WL(I,3) = -R(I,3,ILAT1,I2I1)
C (0,229)
460                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,230)
                  CALL INT2V(WL, R(1,0,ILAT1,I1I2), W, W1)
C (0,231)
C
C     CORNER '4-7-8' IN  W2  (REFERENCE POINT '4')
C
                  IF (IC45.EQ.0) THEN
C (0,232)
                     CALL MATMAT(U(1,0,IU5,I1), U(1,0,IU4,I2), W, 
     &               LVEC, MAXVEC)
                  ELSE
C (0,233)
C                    BEGIN BLOCK
C (0,234)
                     CALL PERM(U(1,0,IU5,I1), IC45, WP, LVEC)
C (0,235)
                     CALL MATMAT(WP, U(1,0,IU4,I2), W, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,236)
C
                  IF (IC47.EQ.0) THEN
C (0,237)
                     CALL INT2V(R(1,0,ILAT4,I1I2), S(1,0,ILAT7,I2I1)
     &               , W, W2)
                  ELSE
C (0,238)
C                    BEGIN BLOCK
C (0,239)
                     CALL PERM(S(1,0,ILAT7,I2I1), IC47, WP, LVEC)
C (0,240)
                     CALL INT2V(R(1,0,ILAT4,I1I2), WP, W, W2)
C                    END BLOCK
                  ENDIF
C (0,241)
C
C     PRODUCT '2-1-4-7-8' IN  WL  (REFERENCE POINT '1')
C
                  IF (IC14.EQ.0) THEN
C (0,242)
                     CALL MATMAT(W2, W1, WL, LVEC, MAXVEC)
                  ELSE
C (0,243)
C                    BEGIN BLOCK
C (0,244)
                     CALL PERM(W2, IC14, WP, LVEC)
C (0,245)
                     CALL MATMAT(WP, W1, WL, LVEC, MAXVEC)
C                    END BLOCK
                  ENDIF
C (0,246)
C
C     COMPUTE THE TRACE (REFERENCE POINT '1')
C
                  IF (IC12.EQ.0) THEN
C (0,247)
!     INITIALLY: DO 470
                     DO I = 1, LVEC
C (0,248)
C                       BEGIN BLOCK
C (0,249)
                        WLOOP2(I) = WR(I,0)*WL(I,0)+WR(I,1)*WL(I,1)+
     &                  WR(I,2)*WL(I,2)+WR(I,3)*WL(I,3)
C (0,250)
470                     CONTINUE
C                       END BLOCK
                     ENDDO
                  ELSE
C (0,251)
C                    BEGIN BLOCK
C (0,252)
                     CALL PERM(WR, IC12, WP, LVEC)
C (0,253)
!     INITIALLY: DO 480
                     DO I = 1, LVEC
C (0,254)
C                       BEGIN BLOCK
C (0,255)
                        WLOOP2(I) = WP(I,0)*WL(I,0)+WP(I,1)*WL(I,1)+
     &                  WP(I,2)*WL(I,2)+WP(I,3)*WL(I,3)
C (0,256)
480                     CONTINUE
C                       END BLOCK
                     ENDDO
C                    END BLOCK
                  ENDIF
C (0,257)
C
C     ACCUMULATE THE 1X1 AND 2X2 LOOP INTEGRALS
C
                  IPLANE = MPLANE(I1,I2)
C (0,258)
                  N = 0
C (0,259)
!     INITIALLY: DO 490
                  DO IT = IFIRST, NT, 2
C (0,260)
C                    BEGIN BLOCK
C (0,261)
!     INITIALLY: DO 495
                     DO I = 1, LSPVEC
C (0,262)
C                       BEGIN BLOCK
C (0,263)
                        W11INT(IT,IPLANE) = W11INT(IT,IPLANE)+DBLE(
     &                  WLOOP1(N+I))
C (0,264)
                        W22INT(IT,IPLANE) = W22INT(IT,IPLANE)+DBLE(
     &                  WLOOP2(N+I))
C (0,265)
495                     CONTINUE
C                       END BLOCK
                     ENDDO
C (0,266)
                     N = N+LSPVEC
C (0,267)
490                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,268)
C
400               CONTINUE
C                 END BLOCK
               ENDDO
            ENDDO
         ENDDO
C (0,269)
C
C     END OF LOOP OVER SPATIAL PLANES
C...........................................................
C
900      CONTINUE
C        END BLOCK
      ENDDO
C (0,270)
C
C     END OF LOOP OVER ODD/EVEN SUB-LATTICES
C
      RETURN
C     END BLOCK
      END
C*************************STAT2NN***************************
C                                               B.BUNK 1985
C     RELAXATION ANALYSIS
C
C     FOR INTERNAL COUNTERS IN REAL*8
C        REMOVE  C+++++
C
C     CLEAR COUNTERS
C
      SUBROUTINE CLEAR2(NVAR1,NCORR1)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H
      SAVE/ST2/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (NVAR1.GT.MAXVAR) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         WRITE (*, '('' ERROR IN STAT2: NVAR ='',I5)') NVAR1
C (0,5)
         STOP
C        END BLOCK
      ELSE
C (0,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,7)
      IF (NCORR1.GT.MAXCOR) THEN
C (0,8)
C        BEGIN BLOCK
C (0,9)
         WRITE (*, '('' ERROR IN STAT2: NCORR ='',I5)') NCORR1
C (0,10)
         STOP
C        END BLOCK
      ELSE
C (0,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,12)
      NVAR = NVAR1
C (0,13)
      NCORR = NCORR1
C (0,14)
!     INITIALLY: DO 10
      DO IVAR = 1, NVAR
C (0,15)
C        BEGIN BLOCK
C (0,16)
         NDAT(IVAR) = 0
C (0,17)
         SAV(IVAR) = 0.D0
C (0,18)
         SUM(IVAR,0) = 0.D0
C (0,19)
!     INITIALLY: DO 10
         DO ICORR = 1, NCORR
C (0,20)
C           BEGIN BLOCK
C (0,21)
            F(IVAR,ICORR) = 0.D0
C (0,22)
            SUM(IVAR,ICORR) = 0.D0
C (0,23)
10          CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,24)
      RETURN
C     END BLOCK
      END
C
C     ACCUMULATE DATA
C
      SUBROUTINE ACCUM2(IVAR,DFN)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H,DFN
      SAVE/ST2/
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NDAT(IVAR) = NDAT(IVAR)+1
C (3,3)
C+++++      DFN=FN
      SAV(IVAR) = SAV(IVAR)+DFN
C (3,4)
      SUM(IVAR,0) = SUM(IVAR,0)+DFN*DFN
C (3,5)
!     INITIALLY: DO 10
      DO ICORR = 1, NCORR
C (3,6)
10       SUM(IVAR,ICORR) = SUM(IVAR,ICORR)+DFN*F(IVAR,ICORR)
      ENDDO
C (3,7)
!     INITIALLY: DO 20
      DO ICORR = NCORR, 2, -1
C (3,8)
20       F(IVAR,ICORR) = F(IVAR,ICORR-1)
      ENDDO
C (3,9)
      F(IVAR,1) = DFN
C (3,10)
      IF (NDAT(IVAR).LE.NCORR) THEN
C (3,11)
         H(IVAR,NDAT(IVAR)) = DFN
      ELSE
C (3,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END
C
C     COMPUTE AVERAGES
C
      FUNCTION AVER2(IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H
      SAVE/ST2/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      AVER2 = 0.D0
C (0,3)
      ND = NDAT(IVAR)
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR.OR.ND.LT.1) RETURN
C (3,1)
      AVER2 = SAV(IVAR)/ND
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
C     STATISTICAL ANALYSIS, INCLUDING RELAXATION EFFECTS
C
      SUBROUTINE STAT2(IVAR,AV,SIG,RATIO,IUNIT)
*     ****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXVAR=25+4*20,MAXCOR=10)
* new common order against missalignments          a.w.
      COMMON/ST2/NVAR,NCORR,SAV(MAXVAR),F(MAXVAR,MAXCOR)
      COMMON/ST2/SUM(MAXVAR,0:MAXCOR),H(MAXVAR,MAXCOR),NDAT(MAXVAR)
      REAL*8 SAV,F,SUM,H,AV,S1,S2
      SAVE/ST2/
      DIMENSION GAM(0:MAXCOR),R(MAXCOR),T(MAXCOR)
C (0,1)
C     BEGIN BLOCK
C (0,2)
1050  FORMAT(' SIGMA(UNCORRELATED)  =',F12.6)
C (0,3)
1010  FORMAT
     &(' SIGMA   =',F12.6/' GAMMA(0)=',F12.6/' GAMMA(N)='/(10F12.6))
C (0,4)
1020  FORMAT(' GAMMA(N)/GAMMA(N-1) ='/(10F12.6))
C (0,5)
1030  FORMAT(' RELAXATION TIME T(N) ='/(10F12.4))
C (0,6)
1035  FORMAT(' RELAX. TIME T(',I2,',',I2,') =',F10.4)
C (0,7)
1040  FORMAT(' SIGMA/SIGMA(UNCORR.) =',F10.4)
C (0,8)
1000  FORMAT(' RELAXATION ANALYSIS WITH NDAT =',I5,'   ,NCORR =',I5)
C (0,9)
      AV = 0.D0
C (0,10)
      SIG = 0.D0
C (0,11)
      RATIO = 0.D0
C (0,12)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IVAR.LT.1.OR.IVAR.GT.NVAR) RETURN
C (13,1)
C     BEGIN BLOCK
C (13,2)
      ND = NDAT(IVAR)
C (13,3)
      NMAX = MIN(ND-1, NCORR)
C (13,4)
      IF (IUNIT.GT.0) THEN
C (13,5)
C        BEGIN BLOCK
C (13,6)
         WRITE (IUNIT, 1000) ND, NMAX
C (13,7)
         WRITE (IUNIT, '('' INTERNAL REAL*8'')') 
C        END BLOCK
      ELSE
C (13,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (12,1)
      IF (ND.LT.1) RETURN
C (11,1)
C     BEGIN BLOCK
C (11,2)
      AV = SAV(IVAR)/ND
C (11,3)
      IF (IUNIT.GT.0) THEN
C (11,4)
         WRITE (IUNIT, '('' AVERAGE ='',F12.6)') AV
      ELSE
C (11,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,6)
      GAM(0) = SUM(IVAR,0)/ND-AV*AV
C (11,7)
      SIG0 = SQRT(MAX(GAM(0)/ND, 0.))
C     END BLOCK
C (10,1)
      IF (NMAX.LT.1) GOTO 90
C (6,1)
C     BEGIN BLOCK
C (6,2)
C
      N1 = MAX(NMAX/5, 1)
C (6,3)
      N2 = NMAX/2
C (6,4)
      SIG = 0.D0
C (6,5)
      IFLAG = NMAX+1
C (6,6)
      U = GAM(0)
C (6,7)
      S1 = 0.D0
C (6,8)
      S2 = 0.D0
C (6,9)
C
!     INITIALLY: DO 10
      DO N = 1, NMAX
C (6,10)
C        BEGIN BLOCK
C (6,11)
         S1 = S1+H(IVAR,N)
C (6,12)
         S2 = S2+F(IVAR,N)
C (6,13)
         GAM(N) = (SUM(IVAR,N)+(S1+S2-(ND+N)*AV)*AV)/(ND-N)
C (6,14)
C
         R(N) = 0.D0
C (6,15)
         IF (U.NE.0.) THEN
C (6,16)
            R(N) = GAM(N)/U
         ELSE
C (6,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (6,18)
         U = GAM(N)
C (6,19)
C
         T(N) = 0.D0
C (6,20)
C        BEGIN UNSTRUCTURED
C (7,1)
         IF (IFLAG.LT.N) GOTO 10
C (9,1)
         IF (R(N).GT.0.D0.AND.R(N).LT.1.D0) THEN
C (9,2)
C           BEGIN BLOCK
C (9,3)
            T(N) = -1.D0/LOG(R(N))
C (9,4)
            SIG = SIG+GAM(N)*(ND-N)
C           END BLOCK
         ELSE
C (9,5)
            IFLAG = N
         ENDIF
C (8,1)
10       CONTINUE
C        END UNSTRUCTURED
C        END BLOCK
      ENDDO
C (6,21)
C
      IF (N2.GT.N1.AND.IFLAG.GT.N2) THEN
C (6,22)
C        BEGIN BLOCK
C (6,23)
         TAU = (GAM(N1)/GAM(N2))**(1.D0/(N2-N1))
C (6,24)
         SIG = GAM(0)+2.D0*GAM(N2)/(TAU-1.D0)
C (6,25)
!     INITIALLY: DO 20
         DO N = 1, N2
C (6,26)
C           BEGIN BLOCK
C (6,27)
            SIG = SIG+2.D0*GAM(N)
C (6,28)
20          CONTINUE
C           END BLOCK
         ENDDO
C (6,29)
         TAU = 1.D0/LOG(TAU)
C        END BLOCK
      ELSE
C (6,30)
C        BEGIN BLOCK
C (6,31)
         SIG = GAM(0)+2.D0/ND*SIG
C (6,32)
         TAU = 0.D0
C        END BLOCK
      ENDIF
C (6,33)
      SIG = SQRT(MAX(SIG/ND, 0.))
C (6,34)
      RATIO = 0.D0
C (6,35)
      IF (SIG0.GT.0.D0) THEN
C (6,36)
         RATIO = SIG/SIG0
      ELSE
C (6,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (5,1)
C
      IF (IUNIT.LE.0) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
C
      WRITE (IUNIT, 1010) SIG, (GAM(N), N = 0, NMAX)
C (4,3)
      WRITE (IUNIT, 1020) (R(N), N = 1, NMAX)
C (4,4)
      WRITE (IUNIT, 1030) (T(N), N = 1, NMAX)
C (4,5)
      WRITE (IUNIT, 1035) N1, N2, TAU
C (4,6)
      WRITE (IUNIT, 1040) RATIO
C     END BLOCK
C (3,1)
C     BEGIN BLOCK
C (3,2)
90    CONTINUE
C (3,3)
      IF (IUNIT.GT.0) THEN
C (3,4)
         WRITE (IUNIT, 1050) SIG0
      ELSE
C (3,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

C********************STAT4*********************************
C                                               B.BUNK 1986
C     STATISTICAL ANALYSIS FOR  NBL  BLOCKS
C        OF  NVAR  CORRELATED VARIABLES EACH
C
C     FOR INTERNAL COUNTERS IN REAL*8:
C        REMOVE C+++++
C
C     CLEAR COUNTERS
C
      SUBROUTINE CLEAR4(NBL1,NVAR1)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (NBL1.GT.MAXBL) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         WRITE (*, '('' ERROR IN STAT4: NBL ='',I5)') NBL1
C (0,5)
         STOP
C        END BLOCK
      ELSE
C (0,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,7)
      IF (NVAR1.GT.MAXVAR) THEN
C (0,8)
C        BEGIN BLOCK
C (0,9)
         WRITE (*, '('' ERROR IN STAT4: NVAR ='',I5)') NVAR1
C (0,10)
         STOP
C        END BLOCK
      ELSE
C (0,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,12)
      NBL = NBL1
C (0,13)
      NVAR = NVAR1
C (0,14)
!     INITIALLY: DO 10
      DO IBL = 1, NBL
C (0,15)
C        BEGIN BLOCK
C (0,16)
         NDAT(IBL) = 0
C (0,17)
!     INITIALLY: DO 10
         DO I = 1, NVAR
C (0,18)
C           BEGIN BLOCK
C (0,19)
            SAV(IBL,I) = 0.D0
C (0,20)
!     INITIALLY: DO 10
            DO J = 1, NVAR
C (0,21)
10             SUM(IBL,I,J) = 0.D0
            ENDDO
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,22)
      RETURN
C     END BLOCK
      END
C
C     ACCUMULATE DATA
C
      SUBROUTINE ACCUM4(IBL,F)
*     *****************
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM,DF
      REAL*8 F(-12*IBL+108)
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
C+++++      DIMENSION F(*)
      IF (IBL.LT.1.OR.IBL.GT.NBL) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NDAT(IBL) = NDAT(IBL)+1
C (3,3)
!     INITIALLY: DO 10
      DO I = 1, NVAR
C (3,4)
C        BEGIN BLOCK
C (3,5)
         DF = F(I)
C (3,6)
         SAV(IBL,I) = SAV(IBL,I)+DF
C (3,7)
!     INITIALLY: DO 10
         DO J = I, NVAR
C (3,8)
10          SUM(IBL,I,J) = SUM(IBL,I,J)+DF*F(J)
         ENDDO
C        END BLOCK
      ENDDO
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END
C
C     COMPUTE AVERAGES
C
      REAL*8 FUNCTION AVER4(IBL,IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      AVER4 = 0.D0
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IVAR.LT.1.OR.IVAR.GT.NVAR.OR.NDAT
     &(IBL).LT.1) RETURN
C (3,1)
      AVER4 = SAV(IBL,IVAR)/NDAT(IBL)
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
C     COMPUTE ERRORS
C
      REAL*8 FUNCTION SIGMA4(IBL,IVAR)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM,ZERO
      PARAMETER(ZERO=0.D0)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      SIGMA4 = 0.D0
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IVAR.LT.1.OR.IVAR.GT.NVAR.OR.NDAT
     &(IBL).LT.1) RETURN
C (3,1)
      SIGMA4 = SQRT(MAX(SUM(IBL,IVAR,IVAR)-SAV(IBL,IVAR)**2/NDAT(IBL)
     &, ZERO))/NDAT(IBL)
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
C     COMPUTE COVARIANCE MATRIX
C
      REAL*8 FUNCTION COVAR4(IBL,I,J)
      PARAMETER(MAXVEC=8**3*8+7)
      PARAMETER(MAXBL=8,MAXVAR=2+20/2)
      COMMON/ST4/NBL,NVAR,NDAT(MAXBL)
      COMMON/ST4/SAV(MAXBL,MAXVAR),SUM(MAXBL,MAXVAR,MAXVAR)
      SAVE/ST4/
      REAL*8 SAV,SUM
C (0,1)
C     BEGIN BLOCK
C (0,2)
      COVAR4 = 0.D0
C (0,3)
      IMIN = MIN(I, J)
C (0,4)
      IMAX = MAX(I, J)
C (0,5)
      ND = NDAT(IBL)
C (0,6)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IBL.LT.1.OR.IBL.GT.NBL.OR.IMIN.LT.1.OR.IMAX.GT.NVAR.OR.ND
     &.LT.1) RETURN
C (3,1)
      COVAR4 = (SUM(IBL,IMIN,IMAX)-SAV(IBL,I)*SAV(IBL,J)/ND)/ND/ND
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE TRNSET(ISEED)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER N103,LEFT,IFIRST,IMAX,N,I
      INTEGER ISEED(0:249),IREG(0:249+MAXVEC)
      REAL*8 RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99990 CONTINUE
C (0,3)
C
!     INITIALLY: DO 60
      DO I = 0, 249
C (0,4)
C        BEGIN BLOCK
C (0,5)
         IREG(I) = ISEED(I)
C (0,6)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
      SUBROUTINE TRNGET(ISEED)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER N103,LEFT,IFIRST,IMAX,N,I
      INTEGER ISEED(0:249),IREG(0:249+MAXVEC)
      REAL*8 RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C
99991 CONTINUE
C (0,3)
C
!     INITIALLY: DO 50
      DO I = 0, 249
C (0,4)
C        BEGIN BLOCK
C (0,5)
         ISEED(I) = IREG(I)
C (0,6)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
      SUBROUTINE TRNGV(RANVEC,LVEC,RMAX)
      INTEGER*4 MAXVEC
      PARAMETER (MAXVEC = 8**3*8+7)
      REAL*8 R1
      PARAMETER (R1 = 2.D0**(-31))
      INTEGER LVEC,N103,LEFT,IFIRST,IMAX,N,I
      INTEGER IREG(0:249+MAXVEC)
      REAL*8 RANVEC(1:LVEC),RMAX,RNORM
      COMMON /TRNBLK/ IREG
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      N103 = LVEC/103
C (0,3)
      LEFT = LVEC-103*N103
C (0,4)
C
C SOME LINES ARE NEW
      IFIRST = 0
C (0,5)
      IMAX = 2147483647
C (0,6)
!     INITIALLY: DO 100
      DO N = 1, N103
C (0,7)
C        BEGIN BLOCK
C (0,8)
!     INITIALLY: DO 10
         DO I = IFIRST, IFIRST+102
C (0,9)
C           BEGIN BLOCK
C (0,10)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
            IREG(I+250) = IREG(I+147)-IREG(I)
C (0,11)
            IF (IREG(I+250).LE.0) THEN
C (0,12)
               IREG(I+250) = IREG(I+250)+IMAX
            ELSE
C (0,13)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,14)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,15)
         IFIRST = IFIRST+103
C (0,16)
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,17)
C
C SOME LINES ARE NEW
!     INITIALLY: DO 20
      DO I = IFIRST, IFIRST+LEFT-1
C (0,18)
C        BEGIN BLOCK
C (0,19)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
         IREG(I+250) = IREG(I+147)-IREG(I)
C (0,20)
         IF (IREG(I+250).LE.0) THEN
C (0,21)
            IREG(I+250) = IREG(I+250)+IMAX
         ELSE
C (0,22)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,23)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
      RNORM = R1*RMAX
C (0,25)
!     INITIALLY: DO 30
      DO I = 1, LVEC
C (0,26)
C        BEGIN BLOCK
C (0,27)
         RANVEC(I) = RNORM*IREG(I+249)
C (0,28)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)
C
!     INITIALLY: DO 40
      DO I = 0, 249
C (0,30)
C        BEGIN BLOCK
C (0,31)
         IREG(I) = IREG(I+LVEC)
C (0,32)
40       CONTINUE
C        END BLOCK
      ENDDO
C
C (0,34)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE INIT(ISTART)
*     ***************
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      REAL*8 U,BETINV
      REAL*8 ZERO,ONE,TWO
      PARAMETER(ZERO=0.,ONE=1.,TWO=2.)
C
      COMMON/PAR1/NDIM,LSIZE(4),LVEC,NDSP
      COMMON/PAR2/NPTS,NLINKS,NPLAQS,NPLPP,NVOL
      COMMON/PAR3/BETA,GAMMA,ITER,IFREQ,MFREQ
      COMMON/INTBLK/BETINV,NERR4,NERR2
      COMMON/CONF/U(MAXVEC,0:3,2**4,4)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      ITER = 0
C (0,3)
      IFREQ = 0
C (0,4)
      NERR2 = 0
C (0,5)
      NERR4 = 0
C (0,6)
      CALL CLEAR2(2*NDIM+9+8*(LSIZE(NDIM)/2+1), 10)
C (0,7)
      CALL CLEAR4(8, 2+LSIZE(NDIM)/2)
C (0,8)
      WRITE (6, '(//'' RANDOM START'')') 
C (0,9)
!     INITIALLY: DO 30
      DO I1 = 1, NDIM
C (0,10)
!     INITIALLY: DO 30
         DO ILAT = 1, 2**NDIM
C (0,11)
!     INITIALLY: DO 30
            DO I30 = 1, 4
C (0,12)
C              BEGIN BLOCK
C (0,13)
               CALL TRNGV1(LVEC)
C (0,14)
30             CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
      ENDDO
C (0,15)
C
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE TRNGV1(LVEC)
*     ****************
C
      PARAMETER(MAXVEC=8**3*8+7)
      REAL*8 R1
      PARAMETER(R1=2.D0**(-31))
C
      COMMON/TRNBLK/IREG(0:249+MAXVEC)
      SAVE/TRNBLK/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      N103 = LVEC/103
C (0,3)
      LEFT = LVEC-103*N103
C (0,4)
C
C SOME LINES ARE NEW
      IFIRST = 0
C (0,5)
      IMAX = 2147483647
C (0,6)
!     INITIALLY: DO 100
      DO N = 1, N103
C (0,7)
C        BEGIN BLOCK
C (0,8)
!     INITIALLY: DO 10
         DO I = IFIRST, IFIRST+102
C (0,9)
C           BEGIN BLOCK
C (0,10)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
            IREG(I+250) = IREG(I+147)-IREG(I)
C (0,11)
            IF (IREG(I+250).LE.0) THEN
C (0,12)
               IREG(I+250) = IREG(I+250)+IMAX
            ELSE
C (0,13)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,14)
10          CONTINUE
C           END BLOCK
         ENDDO
C (0,15)
         IFIRST = IFIRST+103
C (0,16)
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,17)
C
C SOME LINES ARE NEW
!     INITIALLY: DO 20
      DO I = IFIRST, IFIRST+LEFT-1
C (0,18)
C        BEGIN BLOCK
C (0,19)
C     IREG(I+250)=IEOR(IREG(I+147),IREG(I))
         IREG(I+250) = IREG(I+147)-IREG(I)
C (0,20)
         IF (IREG(I+250).LE.0) THEN
C (0,21)
            IREG(I+250) = IREG(I+250)+IMAX
         ELSE
C (0,22)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,23)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
C
!     INITIALLY: DO 40
      DO I = 0, 249
C (0,25)
C        BEGIN BLOCK
C (0,26)
         IREG(I) = IREG(I+LVEC)
C (0,27)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,28)
C
      RETURN
C     END BLOCK
      END
!!
!! file for su2cor.data.f
!!
C
      BLOCK DATA TRINIT
C
      PARAMETER(MAXVEC=8**3*8+7)
C
      COMMON/TRNBLK/IREG(0:249+MAXVEC)
C     SAVE/TRNBLK/
      DATA (IREG(I),I=0,94)
     X  /1057053971,1145515795,1182139782,1196473049, 248765874
     X  , 534686421,1050572418, 731796842,1502042419,1492145362
     X  ,1797225520, 847047639, 579506234, 787124408, 946132864
     X  ,  25926130, 266266175,1858333429,1721014909,1217421528
     X  ,1796521010,1468167949,1057485866, 768967452, 274519193
     X  , 707533566,1625302755,  59874444, 633698365,1835941323
     X  , 122666301, 342034367,2106971542,1531340801, 812134079
     X  ,1812596212,1585311661, 925293127, 133452750,1293034937
     X  ,1865807557,    253678,1699606438, 872283510,1866505600
     X  ,1076142670,1589822366,1200648741, 772255620,1240750904
     X  , 417350462,1006051829, 844486985,1249441283, 185807612
     X  , 578607766, 540480896, 602664807,1312879003,1877544568
     X  ,1486285709,1125506799, 130890975,1934453800, 150062077
     X  ,  14692516,2104571412,1808456730,1965843868,  93409930
     X  ,1364923417,1576137641,1730335305,1388981056, 103839289
     X  , 337934237,1484884578, 614826256,1871738019, 390302980
     X  ,1743832705,1640901339,1308848769,1745529143,2116054309
     X  ,1102694887,1169403470, 145423485,  23368705,1201766168
     X  ,1196866266, 791295083,1853206267, 863391697,1729775662/
      DATA (IREG(I),I=95,189)
     X  / 965283864,1232715204, 355542440, 572362928, 690970242
     X  ,1118153838, 633804287, 228386269,  82124606,1290422595
     X  ,1526345751, 156299811,2010865450,2000487848,2079817809
     X  , 328899407, 518205501,1981676077,1104213191,1208863493
     X  ,1969410151, 725337377, 933155268, 867416891, 630881882
     X  ,2020953112,1236839192, 408196260, 192359135,1725697394
     X  ,1180727966,1518282382,1149562539, 667636557, 346315259
     X  ,1208785069, 905938759,2027087595,1261120781,1445557208
     X  , 263528130, 966902626,2062384673,1804839330, 344796300
     X  ,2078005932, 569756794, 324283636, 614510683, 813075189
     X  ,1221422926,2049836335, 799394936, 612493765, 346845898
     X  ,1642411002,1564443813, 274939435,1574214442,1262988177
     X  ,1683434479, 745663575, 710208465, 756641161, 245714850
     X  , 512299780, 539908198, 209055986,2019538320, 930230157
     X  , 427569491, 699674688, 455251044, 101032211,1452005575
     X  ,2084350456,1410129708, 423298345,1644820176,1495340621
     X  ,1825237870,2037018353,1402827438, 480748885,1486128650
     X  ,1964918509, 273872179,1969694340,  46957054,1935986403
     X  , 106110655,1866520308,1846870446, 814326429,1444113787/
      DATA (IREG(I),I=190,249)
     X  / 558018047, 123176283, 519594232,1918417115, 999046157
     X  , 215437722,1485546941, 906816480, 224200659,1618947708
     X  ,  11554939,1079082792,1016131542,1655167982, 977343684
     X  ,2071981174,1404263389,1192375964,1241251581,2059637941
     X  ,1106684308,1905764477,1132893620,1200569711,1503534254
     X  ,1715390625,1044222415, 149082666,1734303601,1157760999
     X  ,1077736894,1865300109,2098367446, 380179623, 776051004
     X  ,1436893074,1992757538,1360858314, 678264659, 479156451
     X  ,  23970028, 173988789, 790100986,1967224921,1651722002
     X  , 731153103,1423215887, 837071866,1760397607, 422933859
     X  , 395709846,1647231765,   6223740, 751895905,1214725134
     X  , 225744090,1288186184, 286268600,1385709059, 884994244/
C (0,1)
      RETURN
      END

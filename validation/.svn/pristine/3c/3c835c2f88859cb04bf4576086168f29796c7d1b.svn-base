#
# AIPO
#
#
# compile generated freia_scalar_07
#

! initial function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X"];
  "21 E8" -> "23 min" [label="X"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X_1"];
  "21 E8" -> "23 min" [label="X_1"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}

! updated function for AIPO

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}
#
# SPOC
#

! initial function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X"];
  "21 E8" -> "23 min" [label="X"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X_1"];
  "21 E8" -> "23 min" [label="X_1"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_spoc_helper_0_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_spoc_helper_0_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_spoc_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X_1" [shape=circle];

  // computation vertices
  "23 min" [shape=diamond];
  "21 E8" [shape=box];
  "21 E8" -> "23 min" [label="X_1"];
  "21 E8" -> "X_1";
  "17 max" [shape=diamond];
  "i" -> "21 E8";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_spoc_helper_0_1" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_spoc_helper_0_1": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_spoc_helper_0_1" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X" [shape=circle];

  // computation vertices
  "30 vol" [shape=diamond];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "30 vol" [label="X"];
  "29 +" -> "X";
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "i" -> "19 thr";
}
// graph for dag "freia_scalar_07_spoc_helper_0_2" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_spoc_helper_0_2": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_spoc_helper_0_2" {
  // inputs
  "X" [shape=circle];
  "X_1" [shape=circle];

  // outputs
  "tC" [shape=circle];
  "tD" [shape=circle];

  // computation vertices
  "25 thr" [shape=parallelogram];
  "25 thr" -> "tC";
  "X_1" -> "25 thr";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "tD";
  "X" -> "32 thr";
}
// graph for dag "freia_scalar_07_spoc_helper_0_3" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_spoc_helper_0_3": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_spoc_helper_0_3" {
  // inputs
  "tC" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "tC2";
  "tC" -> "26 *";
  "tC" -> "26 *";
}
// graph for dag "freia_scalar_07_spoc_helper_0_4" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_spoc_helper_0_4": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_spoc_helper_0_4" {
  // inputs
  "tC2" [shape=circle];
  "tD" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "tD" -> "33 -";
  "tC2" -> "33 -";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 11 ops and 0 copies, optimized to 11 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// split 4: 1 cut
// # SPOC calls: 5

// FREIA-SPoC helper function for module freia_scalar_07
freia_status freia_scalar_07_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po0,
  const int32_t * pi1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // STAGE 1
  // i [0 measure 0] -> [1 poc 0] 21 erode_8c
  // i [1 input 0] -> [1 poc 0] 21 erode_8c
  // nope
  // poc 21 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];

  // 0`X_1 [1 poc 0] -> [1 measure 0] 21 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;


  // output image 0`X_1 on 0
  // 0`X_1 [1 measure 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`X_1 [1 output 0] -> [7 output 0] 0 null
  // 0`X_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`X_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`X_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`X_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`X_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`X_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 17 global_max stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].maximum;

  // measure 23 global_min stage 1 side 0
  *po2 = (int32_t) reduc.measure[1][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_07
freia_status freia_scalar_07_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3,
  int32_t * po4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 threshold 0] 19 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 19 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 3
  // 0`tB [0 threshold 0] -> [3 poc 0] 28 dilate_8c
  // 0`tB [1 input 0] -> [3 poc 0] 28 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tB [2 input 0] -> [3 poc 0] 28 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tB [3 input 0] -> [3 poc 0] 28 dilate_8c
  // nope
  // poc 28 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi3[i];

  // 0`tB [2 poc 0] -> [3 alu] 29 add
  si.mux[2][1].op = SPOC_MUX_IN0;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`tB [3 input 1] -> [3 alu] 29 add
  // nope
  // 0`tB2 [3 poc 0] -> [3 alu] 29 add
  // nope
  // alu 29 add stage 3
  si.alu[3][0].op = SPOC_ALU_ADD_IN0_IN1;

  // 0`X [3 alu] -> [3 measure 0] 29 add
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;


  // output image 0`X on 0
  // 0`X [3 measure 0] -> [3 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`X [3 output 0] -> [7 output 0] 0 null
  // 0`X [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`X [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`X [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`X [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 30 global_vol stage 3 side 0
  *po4 = (int32_t) reduc.measure[3][0].volume;

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_07
freia_status freia_scalar_07_spoc_helper_0_2_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`X [0 input 0] -> [0 threshold 0] 32 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 32 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;

  // 0`X_1 [0 input 1] -> [0 threshold 1] 25 threshold
  si.mux[0][3].op = SPOC_MUX_IN1;
  // threshold 25 threshold stage 0 side 1
  si.th[0][1].op = pi5? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = pi3;
  sp.th[0][1].boundmax = pi4;


  // output image 0`tC on 1 and image 0`tD on 0
  // 0`tC [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`tC [0 output 1] -> [7 output 1] 0 null
  // 0`tC [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`tC [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`tC [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`tC [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`tC [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`tC [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`tC [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`tD [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`tD [0 output 0] -> [7 output 0] 0 null
  // 0`tD [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tD [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tD [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tD [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tD [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tD [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tD [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_07
freia_status freia_scalar_07_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tC [0 input 0] -> [0 alu] 26 mul
  // nope
  // 0`tC [0 input 1] -> [0 alu] 26 mul
  // nope
  // alu 26 mul stage 0
  si.alu[0][0].op = SPOC_ALU_MUL_IN0_IN1;


  // output image 0`tC2 on 0
  // 0`tC2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`tC2 [0 output 0] -> [7 output 0] 0 null
  // 0`tC2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`tC2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`tC2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`tC2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`tC2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`tC2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`tC2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_scalar_07
freia_status freia_scalar_07_spoc_helper_0_4_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`tC2 [0 input 0] -> [0 alu] 33 sub
  // nope
  // 0`tD [0 input 1] -> [0 alu] 33 sub
  // nope
  // alu 33 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [7 output 0] 0 null
  // o [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);        /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // hardware accelerator generated variable
   freia_data2d *X_1 = freia_common_create_data(X->bpp, X->widthWa, X->heightWa);
   
   // BUG: issue with X reuse...
   // A
   freia_scalar_07_spoc_helper_0_0_0(X_1, i, &sA, k, &sB);              /*0017*/
   // A
   // A
   // B
   freia_scalar_07_spoc_helper_0_1_0(X, i, sA-10, sA-1, false, k, &sC);                /*0019*/
   // B
   // C with X from A
   freia_scalar_07_spoc_helper_0_2_0(tC, tD, X, X_1, sC-10, sC-1, false, sB-10, sB-1, false);         /*0025*/
   // D with X from B
   freia_scalar_07_spoc_helper_0_3_0(tC2, tC);                          /*0026*/
   freia_scalar_07_spoc_helper_0_4_0(o, tC2, tD);                       /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(X_1);
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! cleaned up function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);        /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // hardware accelerator generated variable
   freia_data2d *X_1 = freia_common_create_data(X->bpp, X->widthWa, X->heightWa);
   
   // BUG: issue with X reuse...
   // A
   freia_scalar_07_spoc_helper_0_0_0(X_1, i, &sA, k, &sB);              /*0017*/
   // A
   // A
   // B
   freia_scalar_07_spoc_helper_0_1_0(X, i, sA-10, sA-1, 0, k, &sC);     /*0019*/
   // B
   // C with X from A
   freia_scalar_07_spoc_helper_0_2_0(tC, tD, X, X_1, sC-10, sC-1, 0, sB-10, sB-1, 0);  /*0025*/
   // D with X from B
   freia_scalar_07_spoc_helper_0_3_0(tC2, tC);                          /*0026*/
   freia_scalar_07_spoc_helper_0_4_0(o, tC2, tD);                       /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(X_1);
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return 0;                                                            /*0041*/
}
#
# TERAPIX
#

! initial function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X"];
  "21 E8" -> "23 min" [label="X"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X_1"];
  "21 E8" -> "23 min" [label="X_1"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_terapix_helper_0_0_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_terapix_helper_0_0_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_terapix_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X_1" [shape=circle];

  // computation vertices
  "23 min" [shape=diamond];
  "21 E8" [shape=box];
  "21 E8" -> "23 min" [label="X_1"];
  "21 E8" -> "X_1";
  "17 max" [shape=diamond];
  "i" -> "21 E8";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_terapix_helper_0_1_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_terapix_helper_0_1_0": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_terapix_helper_0_1_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X" [shape=circle];

  // computation vertices
  "30 vol" [shape=diamond];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "30 vol" [label="X"];
  "29 +" -> "X";
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "i" -> "19 thr";
}
// graph for dag "freia_scalar_07_terapix_helper_0_2_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_terapix_helper_0_2_0": #i=1 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_terapix_helper_0_2_0" {
  // inputs
  "X_1" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "tC2";
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "X_1" -> "25 thr";
}
// graph for dag "freia_scalar_07_terapix_helper_0_3_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_terapix_helper_0_3_0": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_terapix_helper_0_3_0" {
  // inputs
  "X" [shape=circle];
  "tC2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "tC2" -> "33 -";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "X" -> "32 thr";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 11 ops and 0 copies, optimized to 11 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_scalar_07
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 3 image operations in dag
 * dag length is 3, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 21
 * - communication: 48
 */
freia_status freia_scalar_07_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po2,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // array for reduction 0 extraction
  int32_t red_0[1];
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 4;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 338;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 340;
  int imagelet_3 = 680;

  // memory for reductions
  int reduction_0 = 1023;
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: max(1)
  // initializing  0_val
  p_0_val[0] = INT16_MIN;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = reduction_0;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at reduction_0
  mcu_macro[0][0].xmin2 = reduction_0;
  mcu_macro[1][0].xmin2 = reduction_0;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  // 1: E8(1) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_2;
  mcu_macro[1][1].xmin2 = imagelet_2;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi3[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: min(2)
  // initializing  2_val
  p_2_val[0] = INT16_MAX;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  // output copy 2 -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for X_1
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures
  // get measure max result from reduction_0
  redter.xres = reduction_0;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_0;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po2 = (int32_t) red_0[0];
  // get measure min result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


/* FREIA terapix helper function for module freia_scalar_07
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 4 image operations in dag
 * dag length is 5, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 27
 * - communication: 48
 */
freia_status freia_scalar_07_terapix_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  const int32_t * pi5,
  int32_t * po6)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 3_val initialization
  int16_t p_3_val[1];
  const int32_t x_3_val = 6;
  const int32_t y_3_val = 0;
  // array for reduction 3 extraction
  int32_t red_3[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 338;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 340;
  int imagelet_3 = 680;

  // memory for reductions
  int reduction_3 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: thr(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  p_0[1] = pi3;
  p_0[2] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: D8(1) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_2;
  mcu_macro[1][1].xmin2 = imagelet_2;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi5[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: +(2,1) -> 1
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_1_0;
  mcu_macro[1][2].xmin3 = imagelet_io_1_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADD3;
  // 3: vol(1)
  // initializing  3_val
  p_3_val[0] = 0;
  gram.xoffset = x_3_val;
  gram.yoffset = y_3_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 3_val
  mem_init.xmin1 = reduction_3;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_3
  mcu_macro[0][3].xmin2 = reduction_3;
  mcu_macro[1][3].xmin2 = reduction_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = 0;
  mcu_macro[1][3].xmin3 = 0;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for X
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures
  // get measure vol result from reduction_3
  redter.xres = reduction_3;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_3;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po6 = (int32_t) red_3[0];

  return ret;
}


/* FREIA terapix helper function for module freia_scalar_07
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 2 image operations in dag
 * dag length is 3, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 9
 * - communication: 48
 */
freia_status freia_scalar_07_terapix_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 512;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: thr(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  p_0[1] = pi3;
  p_0[2] = pi4;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: *(1,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_MUL3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_MUL3;


  // inputs:
  // - imagelet 1 is i0 for X_1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for tC2
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module freia_scalar_07
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 2 image operations in dag
 * dag length is 3, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 9
 * - communication: 72
 */
freia_status freia_scalar_07_terapix_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[3];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 256;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 256;
  int imagelet_3 = 512;
  int imagelet_4 = 768;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_4;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: thr(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi3;
  p_0[1] = pi4;
  p_0[2] = pi5;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 1: -(2,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_SUB3;


  // inputs:
  // - imagelet 1 is i0 for X
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for tC2
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);          /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // hardware accelerator generated variable
   freia_data2d *X_1 = freia_common_create_data(X->bpp, X->widthWa, X->heightWa);
   
   // BUG: issue with X reuse...
   // A
   freia_scalar_07_terapix_helper_0_0_0(X_1, i, &sA, k, &sB);           /*0017*/
   // A
   // A
   // B
   freia_scalar_07_terapix_helper_0_1_0(X, i, sA-10, sA-1, false, k, &sC);             /*0019*/
   // B
   // C with X from A
   freia_scalar_07_terapix_helper_0_2_0(tC2, X_1, sB-10, sB-1, false);  /*0025*/
   // D with X from B
   freia_scalar_07_terapix_helper_0_3_0(o, X, tC2, sC-10, sC-1, false);                /*0032*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(X_1);
   freia_common_destruct_data(tC2);                                     /*0039*/
   return FREIA_OK;                                                     /*0041*/
}

! cleaned up function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);          /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // hardware accelerator generated variable
   freia_data2d *X_1 = freia_common_create_data(X->bpp, X->widthWa, X->heightWa);
   
   // BUG: issue with X reuse...
   // A
   freia_scalar_07_terapix_helper_0_0_0(X_1, i, &sA, k, &sB);           /*0017*/
   // A
   // A
   // B
   freia_scalar_07_terapix_helper_0_1_0(X, i, sA-10, sA-1, 0, k, &sC);  /*0019*/
   // B
   // C with X from A
   freia_scalar_07_terapix_helper_0_2_0(tC2, X_1, sB-10, sB-1, 0);      /*0025*/
   // D with X from B
   freia_scalar_07_terapix_helper_0_3_0(o, X, tC2, sC-10, sC-1, 0);     /*0032*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(X_1);
   freia_common_destruct_data(tC2);                                     /*0039*/
   return 0;                                                            /*0041*/
}
#
# OPENCL
#

! initial function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X"];
  "21 E8" -> "23 min" [label="X"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X_1"];
  "21 E8" -> "23 min" [label="X_1"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_opencl_helper_0_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "X_1" [shape=circle];

  // computation vertices
  "23 min" [shape=diamond];
  "21 E8" [shape=box];
  "21 E8" -> "23 min" [label="X_1"];
  "21 E8" -> "X_1";
  "17 max" [shape=diamond];
  "i" -> "21 E8";
  "i" -> "17 max";
}
// graph for dag "freia_scalar_07_opencl_helper_0_1" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_1": #i=2 #o=2 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_1" {
  // inputs
  "X_1" [shape=circle];
  "i" [shape=circle];

  // outputs
  "tC2" [shape=circle];
  "X" [shape=circle];

  // computation vertices
  "30 vol" [shape=diamond];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "30 vol" [label="X"];
  "29 +" -> "X";
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "tC2";
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "X_1" -> "25 thr";
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "i" -> "19 thr";
}
// graph for dag "freia_scalar_07_opencl_helper_0_1_1" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_1_1": #i=1 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_1_1" {
  // inputs
  "X_1" [shape=circle];

  // outputs
  "tC2" [shape=circle];

  // computation vertices
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "tC2";
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "X_1" -> "25 thr";
}
// graph for dag "freia_scalar_07_opencl_helper_0_1_3" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_1_3": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_1_3" {
  // inputs
  "tB" [shape=circle];
  "tB2" [shape=circle];

  // outputs
  "X" [shape=circle];

  // computation vertices
  "30 vol" [shape=diamond];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "30 vol" [label="X"];
  "29 +" -> "X";
  "tB" -> "29 +";
  "tB2" -> "29 +";
}
// graph for dag "freia_scalar_07_opencl_helper_0_2" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_2": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_2" {
  // inputs
  "X" [shape=circle];
  "tC2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "tC2" -> "33 -";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "X" -> "32 thr";
}
// graph for dag "freia_scalar_07_opencl_helper_0_2_0" of module "freia_scalar_07" in dot format
// DAG "freia_scalar_07_opencl_helper_0_2_0": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_scalar_07_opencl_helper_0_2_0" {
  // inputs
  "X" [shape=circle];
  "tC2" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "tC2" -> "33 -";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "X" -> "32 thr";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 11 ops and 0 copies, optimized to 11 ops and 0+0+0 copies

// hold kernels for freia_scalar_07_opencl_helper_0_1_1
static cl_kernel freia_scalar_07_opencl_helper_0_1_1_kernel[2];

// compile kernels for freia_scalar_07_opencl_helper_0_1_1
static freia_status freia_scalar_07_opencl_helper_0_1_1_compile(void)
{
  // OpenCL source for freia_scalar_07_opencl_helper_0_1_1
  const char * freia_scalar_07_opencl_helper_0_1_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_scalar_07_opencl_helper_0_1_1\n"
    "KERNEL void freia_scalar_07_opencl_helper_0_1_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t25 = PIXEL_THRESHOLD(in0, c0, c1, c2);\n"
    "    PIXEL t26 = PIXEL_MUL(t25, t25);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t26;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_1_1_source, "freia_scalar_07_opencl_helper_0_1_1", "-DPIXEL8", &freia_scalar_07_opencl_helper_0_1_1_kernel[0]);
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_1_1_source, "freia_scalar_07_opencl_helper_0_1_1", "-DPIXEL16", &freia_scalar_07_opencl_helper_0_1_1_kernel[1]);
  return err;
}

// helper function freia_scalar_07_opencl_helper_0_1_1
freia_status freia_scalar_07_opencl_helper_0_1_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t c0,
  int32_t c1,
  int32_t c2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_scalar_07_opencl_helper_0_1_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_scalar_07_opencl_helper_0_1_1_kernel[bpp];

  // call kernel freia_scalar_07_opencl_helper_0_1_1
  err |= freia_op_call_kernel(kernel, 1, 1, 3, 0, o0, i0, c0, c1, c2);

  return err;
}

// hold kernels for freia_scalar_07_opencl_helper_0_1_3
static cl_kernel freia_scalar_07_opencl_helper_0_1_3_kernel[2];

// compile kernels for freia_scalar_07_opencl_helper_0_1_3
static freia_status freia_scalar_07_opencl_helper_0_1_3_compile(void)
{
  // OpenCL source for freia_scalar_07_opencl_helper_0_1_3
  const char * freia_scalar_07_opencl_helper_0_1_3_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_scalar_07_opencl_helper_0_1_3\n"
    "KERNEL void freia_scalar_07_opencl_helper_0_1_3(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t29 = PIXEL_ADD(in1, in0);\n"
    "    PIXEL_VOLUME(red30, t29);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t29;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_1_3_source, "freia_scalar_07_opencl_helper_0_1_3", "-DPIXEL8", &freia_scalar_07_opencl_helper_0_1_3_kernel[0]);
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_1_3_source, "freia_scalar_07_opencl_helper_0_1_3", "-DPIXEL16", &freia_scalar_07_opencl_helper_0_1_3_kernel[1]);
  return err;
}

// helper function freia_scalar_07_opencl_helper_0_1_3
freia_status freia_scalar_07_opencl_helper_0_1_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_scalar_07_opencl_helper_0_1_3_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_scalar_07_opencl_helper_0_1_3_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel freia_scalar_07_opencl_helper_0_1_3
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.volume;

  return err;
}

// hold kernels for freia_scalar_07_opencl_helper_0_2_0
static cl_kernel freia_scalar_07_opencl_helper_0_2_0_kernel[2];

// compile kernels for freia_scalar_07_opencl_helper_0_2_0
static freia_status freia_scalar_07_opencl_helper_0_2_0_compile(void)
{
  // OpenCL source for freia_scalar_07_opencl_helper_0_2_0
  const char * freia_scalar_07_opencl_helper_0_2_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_scalar_07_opencl_helper_0_2_0\n"
    "KERNEL void freia_scalar_07_opencl_helper_0_2_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t32 = PIXEL_THRESHOLD(in0, c0, c1, c2);\n"
    "    PIXEL t33 = PIXEL_SUB(in1, t32);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t33;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_2_0_source, "freia_scalar_07_opencl_helper_0_2_0", "-DPIXEL8", &freia_scalar_07_opencl_helper_0_2_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_scalar_07_opencl_helper_0_2_0_source, "freia_scalar_07_opencl_helper_0_2_0", "-DPIXEL16", &freia_scalar_07_opencl_helper_0_2_0_kernel[1]);
  return err;
}

// helper function freia_scalar_07_opencl_helper_0_2_0
freia_status freia_scalar_07_opencl_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_scalar_07_opencl_helper_0_2_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_scalar_07_opencl_helper_0_2_0_kernel[bpp];

  // call kernel freia_scalar_07_opencl_helper_0_2_0
  err |= freia_op_call_kernel(kernel, 1, 2, 3, 0, o0, i0, i1, c0, c1, c2);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_scalar_07

// opencl for dag 0

// opencl function freia_scalar_07_opencl_helper_0_1_1
KERNEL void freia_scalar_07_opencl_helper_0_1_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];

    // pixel computations
    PIXEL t25 = PIXEL_THRESHOLD(in0, c0, c1, c2);
    PIXEL t26 = PIXEL_MUL(t25, t25);

    // set output pixels
    p0[i] = t26;
  }
}

// opencl function freia_scalar_07_opencl_helper_0_1_3
KERNEL void freia_scalar_07_opencl_helper_0_1_3(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in1 = j1[i];
    PIXEL in0 = j0[i];

    // pixel computations
    PIXEL t29 = PIXEL_ADD(in1, in0);
    PIXEL_VOLUME(red30, t29);

    // set output pixels
    p0[i] = t29;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl function freia_scalar_07_opencl_helper_0_2_0
KERNEL void freia_scalar_07_opencl_helper_0_2_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];

    // pixel computations
    PIXEL t32 = PIXEL_THRESHOLD(in0, c0, c1, c2);
    PIXEL t33 = PIXEL_SUB(in1, t32);

    // set output pixels
    p0[i] = t33;
  }
}

! updated function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);       /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // C with X from A
   freia_scalar_07_opencl_helper_0_1_1(tC2, X, sB-10, sB-1, false);     /*0025*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_scalar_07_opencl_helper_0_1_3(X, tB, tB2, &sC);                /*0029*/
   // D with X from B
   freia_scalar_07_opencl_helper_0_2_0(o, X, tC2, sC-10, sC-1, false);  /*0032*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   return FREIA_OK;                                                     /*0041*/
}

! cleaned up function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);       /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, 0);                         /*0019*/
   // C with X from A
   freia_scalar_07_opencl_helper_0_1_1(tC2, X, sB-10, sB-1, 0);         /*0025*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_scalar_07_opencl_helper_0_1_3(X, tB, tB2, &sC);                /*0029*/
   // D with X from B
   freia_scalar_07_opencl_helper_0_2_0(o, X, tC2, sC-10, sC-1, 0);      /*0032*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   return 0;                                                            /*0041*/
}
#
# SIGMAC
#
#
# compile generated freia_scalar_07
#

! initial function

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tB = freia_common_create_data(16, 128, 128), *tB2 = freia_common_create_data(16, 128, 128), *tC = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128), *tD = freia_common_create_data(16, 128, 128);     /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   
   // BUG: issue with X reuse...
   // A
   freia_aipo_global_max(i, &sA);                                       /*0017*/
   // B
   freia_aipo_threshold(tB, i, sA-10, sA-1, false);                     /*0019*/
   // A
   freia_aipo_erode_8c(X, i, k);                                        /*0021*/
   // A
   freia_aipo_global_min(X, &sB);                                       /*0023*/
   // C with X from A
   freia_aipo_threshold(tC, X, sB-10, sB-1, false);                     /*0025*/
   freia_aipo_mul(tC2, tC, tC);                                         /*0026*/
   // B
   freia_aipo_dilate_8c(tB2, tB, k);                                    /*0028*/
   freia_aipo_add(X, tB2, tB);                                          /*0029*/
   freia_aipo_global_vol(X, &sC);                                       /*0030*/
   // D with X from B
   freia_aipo_threshold(tD, X, sC-10, sC-1, false);                     /*0032*/
   freia_aipo_sub(o, tC2, tD);                                          /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(tB);                                      /*0036*/
   freia_common_destruct_data(tB2);                                     /*0037*/
   freia_common_destruct_data(tC);                                      /*0038*/
   freia_common_destruct_data(tC2);                                     /*0039*/
   freia_common_destruct_data(tD);                                      /*0040*/
   return FREIA_OK;                                                     /*0041*/
}

! graphs

// graph for dag "dag_0" of module "freia_scalar_07" in dot format
// DAG "dag_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X"];
  "21 E8" -> "23 min" [label="X"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}
// graph for dag "dag_cleaned_0" of module "freia_scalar_07" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "33 -" [shape=trapezium,orientation=270];
  "33 -" -> "o";
  "32 thr" [shape=parallelogram];
  "32 thr" -> "33 -" [label="tD"];
  "30 vol" [shape=diamond];
  "30 vol" -> "32 thr" [arrowhead=empty,label="sC"];
  "29 +" [shape=trapezium,orientation=270];
  "29 +" -> "32 thr" [label="X"];
  "29 +" -> "30 vol" [label="X"];
  "28 D8" [shape=box];
  "28 D8" -> "29 +" [label="tB2"];
  "26 *" [shape=trapezium,orientation=270];
  "26 *" -> "33 -" [label="tC2"];
  "25 thr" [shape=parallelogram];
  "25 thr" -> "26 *" [label="tC"];
  "25 thr" -> "26 *" [label="tC"];
  "23 min" [shape=diamond];
  "23 min" -> "25 thr" [arrowhead=empty,label="sB"];
  "21 E8" [shape=box];
  "21 E8" -> "25 thr" [label="X_1"];
  "21 E8" -> "23 min" [label="X_1"];
  "19 thr" [shape=parallelogram];
  "19 thr" -> "29 +" [label="tB"];
  "19 thr" -> "28 D8" [label="tB"];
  "17 max" [shape=diamond];
  "17 max" -> "19 thr" [arrowhead=empty,label="sA"];
  "i" -> "21 E8";
  "i" -> "19 thr";
  "i" -> "17 max";
}

! updated function for OPENCL

freia_status freia_scalar_07(freia_data2d *o, freia_data2d *i, uint32_t *k)
{
   freia_data2d *X = freia_common_create_data(16, 128, 128), *tC2 = freia_common_create_data(16, 128, 128);          /*0012*/
   int sA, sB, sC;                                                      /*0013*/
   // hardware accelerator generated variable
   freia_data2d *X_1 = freia_common_create_data(X->bpp, X->widthWa, X->heightWa);
   
   // BUG: issue with X reuse...
   // A
   // A
   // A
   freia_mppa_launch(0, 1, 1, 0, 2, i, X_1, &sB, &sA);                  /*0023*/
   // B
   // C with X from A
   // B
   freia_mppa_launch(1, 2, 2, 6, 1, X_1, i, tC2, X, sB-10, sB-1, false, sA-10, sA-1, false, &sC);     /*0030*/
   // D with X from B
   freia_mppa_launch(2, 2, 1, 3, 0, X, tC2, o, sC-10, sC-1, false);     /*0033*/

   freia_common_destruct_data(X);                                       /*0035*/
   freia_common_destruct_data(X_1);
   freia_common_destruct_data(tC2);                                     /*0039*/
   return FREIA_OK;                                                     /*0041*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_scalar_07 fname=freia_scalar_07_sigmac_helper_0 split=0


/*#####################################################################*/
/*############ freia_scalar_07_sigmac_helper_0_0 Subgraph #############*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
freia_scalar_07_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 2);
    agent jo = new Join<int32_t>(2, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup1 = new rep(2, width);
    agent max0 = new img_global_max(width, height);
    agent dup0 = new rep(2, width);
    agent ero0 = new erode_pi0_0(width, height);
    agent min0 = new img_global_min(width, height);

    // connections...
    connect (strin.output[0] /* i */, dup1.input);
    connect (dup1.output[1], ero0.input);
    connect (dup1.output[0], max0.input);
    connect (max0.output, jo.input[1]);
    connect (ero0.output, dup0.input);
    connect (dup0.output[1], min0.input);
    connect (dup0.output[0], strout.input[0] /* X_1 */);
    connect (min0.output, jo.input[0]);
  }
}

// code module=freia_scalar_07 fname=freia_scalar_07_sigmac_helper_0 split=1


/*#####################################################################*/
/*############ freia_scalar_07_sigmac_helper_0_1 Subgraph #############*/
/*#####################################################################*/


#define pi0_1(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_1, int16_t)

subgraph
freia_scalar_07_sigmac_helper_0_1
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 6);
    agent sp = new Split<int32_t>(6, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup2 = new rep(2, width);
    agent thr1 = new thresholder_dyn(width, height);
    agent dup1 = new rep(2, width);
    agent thr0 = new thresholder_dyn(width, height);
    agent mul0 = new img_mul_img_16(width);
    agent dil0 = new dilate_pi0_1(width, height);
    agent dup0 = new rep(2, width);
    agent add0 = new img_add_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* i */, thr1.input);
    connect (thr1.output, dup2.input);
    connect (dup2.output[1], add0.input[1]);
    connect (dup2.output[0], dil0.input);
    connect (sp.output[5], thr1.param[2]);
    connect (sp.output[4], thr1.param[1]);
    connect (sp.output[3], thr1.param[0]);
    connect (strin.output[0] /* X_1 */, thr0.input);
    connect (thr0.output, dup1.input);
    connect (dup1.output[1], mul0.input[0]);
    connect (dup1.output[0], mul0.input[0]);
    connect (sp.output[2], thr0.param[2]);
    connect (sp.output[1], thr0.param[1]);
    connect (sp.output[0], thr0.param[0]);
    connect (mul0.output, strout.input[0] /* tC2 */);
    connect (dil0.output, add0.input[0]);
    connect (add0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[1] /* X */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=freia_scalar_07 fname=freia_scalar_07_sigmac_helper_0 split=2


/*#####################################################################*/
/*############ freia_scalar_07_sigmac_helper_0_2 Subgraph #############*/
/*#####################################################################*/

subgraph
freia_scalar_07_sigmac_helper_0_2
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 3);
    agent sp = new Split<int32_t>(3, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    // parameters declaration...

    // instantiations...
    agent thr0 = new thresholder_dyn(width, height);
    agent sub0 = new img_sub_img_16(width);

    // connections...
    connect (strin.output[0] /* X */, thr0.input);
    connect (thr0.output, sub0.input[1]);
    connect (sp.output[2], thr0.param[2]);
    connect (sp.output[1], thr0.param[1]);
    connect (sp.output[0], thr0.param[0]);
    connect (strin.output[1] /* tC2 */, sub0.input[0]);
    connect (sub0.output, strout.input[0] /* o */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 22;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_scalar_07_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

    new freia_scalar_07_sigmac_helper_0_1
    (pipes[14], pipes[15],
     width, height, sizeMax,
     pipes[16], pipes[17]);

    new freia_scalar_07_sigmac_helper_0_2
    (pipes[18], pipes[19],
     width, height, sizeMax,
     pipes[20], pipes[21]);

  }
}
#
# FREIA COMPILATION DONE
#


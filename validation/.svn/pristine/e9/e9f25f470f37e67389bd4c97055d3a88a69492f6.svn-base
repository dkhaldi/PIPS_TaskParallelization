void compute(int p, int n, float a[n][n])
{
   int t[n];
   int k = n, i, s;
   for(i = 0; i <= n-1; i += 1) {
      int j;
      for(j = 0; j <= n-1; j += 1)
         t[j] = a[i][j]+j;

      for(j = 0; j <= n-1; j += 1)
         if (p>0)
            a[i][j] = t[j];
   }
}
int main()
{
   float a[100][100];
   int n = read_input(100, a);
   int p = init_parameter(n, a);
   compute(p, n, a);
   write_output(n, a);
}
//  P() {n==100, 1<=p}
void compute(int p, int n, float a[n][n])
{
//  P() {n==100}
   int t[n];
//  P() {n==100}
   int k = n, i, s;
//  P() {n==100, 1<=p}
   for(i = 0; i <= n-1; i += 1) {
//  P() {}
      int j;
//  P(i) {n==100, 0<=i, i<=99}
      for(j = 0; j <= n-1; j += 1)
//  P(i,j) {n==100, 0<=i, i<=99, 0<=j, j<=99}
         t[j] = a[i][j]+j;
//  P(i,j) {j==100, n==100, 0<=i, i<=99, 1<=p}

      for(j = 0; j <= n-1; j += 1)
//  P(i,j) {n==100, 0<=i, i<=99, 0<=j, j<=99, 1<=p}
         if (p>0)
//  P(i,j) {n==100, 0<=i, i<=99, 0<=j, j<=99}
            a[i][j] = t[j];
   }
}
void compute(int p, int n, float a[n][n])
{
   int t[n];
   int k = n, i, s;
   for(i = 0; i <= n-1; i += 1) {
      int j;
      for(j = 0; j <= n-1; j += 1)
         t[j] = a[i][j]+j;

      for(j = 0; j <= n-1; j += 1)
         a[i][j] = t[j];
   }
}
void compute(int p, int n, float a[n][n])
{
   int t[n];
   int k = n, i, s;
   for(i = 0; i <= n-1; i += 1) {
      int j;
      for(j = 0; j <= n-1; j += 1)
         t[j] = a[i][j]+j;

      for(j = 0; j <= n-1; j += 1)
         a[i][j] = t[j];
   }
}
void compute(int p, int n, float a[n][n])
{
   int t[100];
   int k = 100, i, s;
   for(i = 0; i <= 99; i += 1) {
      int j;
      for(j = 0; j <= 99; j += 1)
         t[j] = a[i][j]+j;

      for(j = 0; j <= 99; j += 1)
         a[i][j] = t[j];
   }
}
void compute(int p, int n, float a[n][n])
{
   int t[100];
   int k = 100, i, s;
   for(i = 0; i <= 99; i += 1) {
      int j;
#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         t[j] = a[i][j]+j;
#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         a[i][j] = t[j];
   }
}
void compute(int p, int n, float a[n][n])
{
   int t[100];
   int k = 100, i, s;
   for(i = 0; i <= 99; i += 1) {
      int j;
#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         t[j] = a[i][j]+j;
#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         a[i][j] = t[j];
   }
}

//  <a[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    n==100, 1<=p}>

void compute(int p, int n, float a[n][n])
{

//  <a[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    n==100, 1<=p}>

   // BEGIN BLOCK
   int t[100];
   int k = 100, i, s;

//  <a[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    k==100, n==100, 1<=p}>

   for(i = 0; i <= 99; i += 1) {

//  <a[PHI1][PHI2]-IN-EXACT-{PHI1==i, 0<=PHI2, PHI2<=99, k==100,
//    n==100, 0<=i, i<=99, 1<=p}>

      // BEGIN BLOCK
      int j;

//  <a[PHI1][PHI2]-IN-EXACT-{PHI1==i, 0<=PHI2, PHI2<=99, k==100,
//    n==100, 0<=i, i<=99, 1<=p}>

      for(j = 0; j <= 99; j += 1)

//  <a[PHI1][PHI2]-IN-EXACT-{PHI1==i, PHI2==j, k==100, n==100, 0<=j,
//    j<=99, 0<=i, i<=99, 1<=p}>

         t[j] = a[i][j]+j;

//  <t[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=99, k==100, n==100, 0<=i, i<=99,
//    1<=p}>


      for(j = 0; j <= 99; j += 1)

//  <t[PHI1]-IN-EXACT-{PHI1==j, k==100, n==100, 0<=j, j<=99, 0<=i,
//    i<=99, 1<=p}>

         a[i][j] = t[j];
      // END BLOCK
   }
   // END BLOCK
}

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, n==100, 1<=p}>

void compute(int p, int n, float a[n][n])
{

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, n==100, 1<=p}>

   // BEGIN BLOCK
   int t[100];
   int k = 100, i, s;

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, k==100, n==100, 1<=p}>

   for(i = 0; i <= 99; i += 1) {

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, i==0, k==100, n==100,
//    1<=p}>

      // BEGIN BLOCK
      int j;

//  <t[PHI1]-OUT-EXACT-{0<=PHI1, PHI1<=99, k==100, n==100, 0<=i,
//    i<=99, 1<=p}>

      for(j = 0; j <= 99; j += 1)

//  <t[PHI1]-OUT-EXACT-{PHI1==j, k==100, n==100, 0<=j, j<=99, 0<=i,
//    i<=99, 1<=p}>

         t[j] = a[i][j]+j;

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, i==0, k==100, n==100,
//    1<=p}>


      for(j = 0; j <= 99; j += 1)

//  <a[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, j==0, i==0, k==100,
//    n==100, 1<=p}>

         a[i][j] = t[j];
      // END BLOCK
   }
   // END BLOCK
}
void compute(int p, int n, float a[n][n])
{
   int t[100];
   int k = 100, i, s;
#pragma omp parallel for private(t[100])
   for(i = 0; i <= 99; i += 1) {
      int j;
#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         t[j] = a[i][j]+j;

#pragma omp parallel for 
      for(j = 0; j <= 99; j += 1)
         a[i][j] = t[j];
   }
}

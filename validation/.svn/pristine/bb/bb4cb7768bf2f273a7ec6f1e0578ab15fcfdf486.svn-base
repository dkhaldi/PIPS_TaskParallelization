Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop a la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analysis:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:
Privatize scalar variables on all the modules of the program:
void conv_cpu(float a[100*100], float c[100*100], float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{
   int i, j;
   for(i = 0; i <= 99; i += 1)
      for(j = 0; j <= 99; j += 1) {
         int idx = i*100+j;

         if (0<i&&i<100-1&&0<j&&j<100-1)
            c[idx] = a00*a[idx-100-1]+a10*a[idx-1]+a20*a[idx+100-1]+a01*a[idx-100]+a11*a[idx]+a21*a[idx+100]+a02*a[idx-100+1]+a12*a[idx+1]+a22*a[idx+100+1];
         else if (i==0&&j==0)
            c[idx] = a11*a[idx]+a21*a[idx+100]+a12*a[idx+1]+a22*a[idx+100+1];
         else if (i==0&&j==100-1)
            c[idx] = a10*a[idx-1]+a20*a[idx+100-1]+a11*a[idx]+a21*a[idx+100];
         else if (i==100-1&&j==0)
            c[idx] = a01*a[idx-100]+a11*a[idx]+a02*a[idx-100+1]+a12*a[idx+1];
         else if (i==100-1&&j==100-1)
            c[idx] = a00*a[idx-100-1]+a10*a[idx-1]+a01*a[idx-100]+a11*a[idx];
         else if (i==0&&0<j&&j<100-1)
            c[idx] = a10*a[idx-1]+a20*a[idx+100-1]+a11*a[idx]+a21*a[idx+100]+a12*a[idx+1]+a22*a[idx+100+1];
         else if (i==100-1&&0<j&&j<100-1)
            c[idx] = a00*a[idx-100-1]+a10*a[idx-1]+a01*a[idx-100]+a11*a[idx]+a02*a[idx-100+1]+a12*a[idx+1];
         else if (j==0&&0<i&&i<100-1)
            c[idx] = a01*a[idx-100]+a11*a[idx]+a21*a[idx+100]+a02*a[idx-100+1]+a12*a[idx+1]+a22*a[idx+100+1];
         else if (j==100-1&&0<i&&i<100-1)
            c[idx] = a00*a[idx-100-1]+a10*a[idx-1]+a20*a[idx+100-1]+a01*a[idx-100]+a11*a[idx]+a21*a[idx+100];
      }
}

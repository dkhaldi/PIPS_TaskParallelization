
Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i, j, l1, l2, m, n, *p, *q;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   i = 0;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   l1 = i;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   j = 1;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   l2 = j;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   m = 10;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

   n = 11;

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT


   if (rand())

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

      q = &m;
   else

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT

      q = &n;

// Points To:
// p -> undefined , EXACT
// q -> m , MAY
// q -> n , MAY


   if (rand()) {

// Points To:
// p -> undefined , EXACT
// q -> m , MAY
// q -> n , MAY

      p = &i;

// Points To:
// p -> i , EXACT
// q -> m , MAY
// q -> n , MAY

      l1 = rand()?m:n;

// Points To:
// p -> i , EXACT
// q -> m , MAY
// q -> n , MAY

      l1 = l1;
   }
   else {

// Points To:
// p -> undefined , EXACT
// q -> m , MAY
// q -> n , MAY

      p = &j;

// Points To:
// p -> j , EXACT
// q -> m , MAY
// q -> n , MAY

      l2 = rand()?m:n;

// Points To:
// p -> j , EXACT
// q -> m , MAY
// q -> n , MAY

      l2 = l2;
   }

// Points To:
// p -> i , MAY
// p -> j , MAY
// q -> m , MAY
// q -> n , MAY


   *p = *q;

// Points To:
// p -> i , MAY
// p -> j , MAY
// q -> m , MAY
// q -> n , MAY


   return 0;
}

PROPER  EFFECTS

int main()
{
   int i, j, l1, l2, m, n, *p, *q;
//             <    is written>: i
   i = 0;
//             <    is read   >: i
//             <    is written>: l1
   l1 = i;
//             <    is written>: j
   j = 1;
//             <    is read   >: j
//             <    is written>: l2
   l2 = j;
//             <    is written>: m
   m = 10;
//             <    is written>: n
   n = 11;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED

   if (rand())
//             <    is written>: q
      q = &m;
   else
//             <    is written>: q
      q = &n;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED

   if (rand()) {
//             <    is written>: p
      p = &i;
//             <may be read   >: m n
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: l1 _RANDOM_EFFECTS:GEN_SEED
      l1 = rand()?m:n;
//             <    is read   >: l1
//             <    is written>: l1
      l1 = l1;
   }
   else {
//             <    is written>: p
      p = &j;
//             <may be read   >: m n
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: l2 _RANDOM_EFFECTS:GEN_SEED
      l2 = rand()?m:n;
//             <    is read   >: l2
//             <    is written>: l2
      l2 = l2;
   }
//             <may be read   >: m n
//             <may be written>: i j
//             <    is read   >: p q

   *p = *q;

   return 0;
}

Transformers with point-to


//  T(main) {main==0}

int main()
{

//  T() {}

   int i, j, l1, l2, m, n, *p, *q;

//  T(i) {i==0}

   i = 0;

//  T(l1) {i==0, l1==0}

   l1 = i;

//  T(j) {i==0, j==1, l1==0}

   j = 1;

//  T(l2) {i==0, j==1, l1==0, l2==1}

   l2 = j;

//  T(m) {i==0, j==1, l1==0, l2==1, m==10}

   m = 10;

//  T(n) {i==0, j==1, l1==0, l2==1, m==10, n==11}

   n = 11;

//  T(q) {i==0, j==1, l1==0, l2==1, m==10, n==11}


   if (rand())

//  T(q) {&m==q, i==0, j==1, l1==0, l2==1, m==10, n==11}

      q = &m;
   else

//  T(q) {&n==q, i==0, j==1, l1==0, l2==1, m==10, n==11}

      q = &n;

//  T(l1,l2,p) {i==0, j==1, l1#init==0, l2#init==1, m==10, n==11,
//    0<=l1, 100<=9l1+10l2, 10l1+11l2<=121, 1<=l2}


   if (rand()) {

//  T(p) {&i==p, i==0, j==1, l1==0, l2==1, m==10, n==11}

      p = &i;

//  T(l1) {&i==p, i==0, j==1, l1#init==0, l2==1, m==10, n==11, 10<=l1,
//    l1<=11}

      l1 = rand()?m:n;

//  T(l1) {&i==p, i==0, j==1, l1==l1#init, l2==1, m==10, n==11,
//    10<=l1, l1<=11}

      l1 = l1;
   }
   else {

//  T(p) {&j==p, i==0, j==1, l1==0, l2==1, m==10, n==11}

      p = &j;

//  T(l2) {&j==p, i==0, j==1, l1==0, l2#init==1, m==10, n==11, 10<=l2,
//    l2<=11}

      l2 = rand()?m:n;

//  T(l2) {&j==p, i==0, j==1, l1==0, l2==l2#init, m==10, n==11,
//    10<=l2, l2<=11}

      l2 = l2;
   }

//  T(i,j) {i#init==0, j#init==1, m==10, n==11, 0<=i, 100<=9i+10j,
//    10i+11j<=121, 1<=j, 0<=l1, 100<=9l1+10l2, 10l1+11l2<=121, 1<=l2}


   *p = *q;

//  T(main) {m==10, main==0, n==11, 0<=i, 100<=9i+10j, 10i+11j<=121,
//    1<=j, 0<=l1, 100<=9l1+10l2, 10l1+11l2<=121, 1<=l2}


   return 0;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   int i, j, l1, l2, m, n, *p, *q;

//  P() {}

   i = 0;

//  P(i) {i==0}

   l1 = i;

//  P(i,l1) {i==0, l1==0}

   j = 1;

//  P(i,j,l1) {i==0, j==1, l1==0}

   l2 = j;

//  P(i,j,l1,l2) {i==0, j==1, l1==0, l2==1}

   m = 10;

//  P(i,j,l1,l2,m) {i==0, j==1, l1==0, l2==1, m==10}

   n = 11;

//  P(i,j,l1,l2,m,n) {i==0, j==1, l1==0, l2==1, m==10, n==11}


   if (rand())

//  P(i,j,l1,l2,m,n) {i==0, j==1, l1==0, l2==1, m==10, n==11}

      q = &m;
   else

//  P(i,j,l1,l2,m,n) {i==0, j==1, l1==0, l2==1, m==10, n==11}

      q = &n;

//  P(i,j,l1,l2,m,n,q) {i==0, j==1, l1==0, l2==1, m==10, n==11}


   if (rand()) {

//  P(i,j,l1,l2,m,n,q) {i==0, j==1, l1==0, l2==1, m==10, n==11}

      p = &i;

//  P(i,j,l1,l2,m,n,p,q) {&i==p, i==0, j==1, l1==0, l2==1, m==10,
//    n==11}

      l1 = rand()?m:n;

//  P(i,j,l1,l2,m,n,p,q) {&i==p, i==0, j==1, l2==1, m==10, n==11,
//    10<=l1, l1<=11}

      l1 = l1;
   }
   else {

//  P(i,j,l1,l2,m,n,q) {i==0, j==1, l1==0, l2==1, m==10, n==11}

      p = &j;

//  P(i,j,l1,l2,m,n,p,q) {&j==p, i==0, j==1, l1==0, l2==1, m==10,
//    n==11}

      l2 = rand()?m:n;

//  P(i,j,l1,l2,m,n,p,q) {&j==p, i==0, j==1, l1==0, m==10, n==11,
//    10<=l2, l2<=11}

      l2 = l2;
   }

//  P(i,j,l1,l2,m,n,p,q) {i==0, j==1, m==10, n==11, 0<=l1,
//    100<=9l1+10l2, 10l1+11l2<=121, 1<=l2}


   *p = *q;

//  P(i,j,l1,l2,m,n,p,q) {m==10, n==11, 0<=i, 100<=9i+10j,
//    10i+11j<=121, 1<=j, 0<=l1, 100<=9l1+10l2, 10l1+11l2<=121, 1<=l2}


   return 0;
}

Warnings

TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.

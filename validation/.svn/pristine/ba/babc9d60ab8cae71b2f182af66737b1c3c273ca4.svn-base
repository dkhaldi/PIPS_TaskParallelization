      PROGRAM MATADD
      INTEGER M
      INTEGER N
      PARAMETER (M = 402, N = 160)
      INTEGER I, J
      REAL A(M, N), B(M, N), C(M, N)

      DO I = 1, M
         DO J = 1, N
            B(I,J) = I
            C(I,J) = J
         ENDDO
      ENDDO

      DO I = 1, M
         DO J = 1, N
            A(I,J) = B(I,J)+C(I,J)
         ENDDO
      ENDDO

      END


!>  Stub for freeing memory on the hardware accelerator.
!>
!>  @param[in] address is the address of a previously allocated memory
!>  zone on the hardware accelerator
	SUBROUTINE P4A_ACCEL_FREE(ADDRESS)
	INTEGER ADDRESS
! Do nothing since it is not representable in Fortran 77...
      END


!>  Stub for allocating memory on the hardware accelerator.
!>
!>  @param[out] address is the address of a variable that is updated by
!>  this macro to contains the address of the allocated memory block
!>  @param[in] size is the size to allocate in bytes
	SUBROUTINE P4A_ACCEL_MALLOC(ADDRESS, SIZE)
	INTEGER SIZE
	INTEGER ADDRESS
! Do nothing since it is not representable in Fortran 77...
      END

!>  Stub for copying memory from the hardware accelerator to the host.
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  @param[out] host_add is the address of a destination zone in the
!>  host memory
!>
!>  @param[in] accel_add is the address of a source zone in the
!>  accelerator memory
!>
!>  @param[in] size is the size in bytes of the memory zone to copy
	SUBROUTINE P4A_COPY_FROM_ACCEL(HOST_ADD, ACCEL_ADD, SIZE)
	INTEGER SIZE
	CHARACTER HOST_ADD(SIZE)
	CHARACTER ACCEL_ADD(SIZE)
	INTEGER I

      DO I = 1, SIZE
         HOST_ADD(I) = ACCEL_ADD(I)
      ENDDO
      END


!> Stub for copying memory from the host to the hardware accelerator.
!>
!> Since it is a stub so that PIPS can understand it, use simple
!> implementation with standard memory copy operations
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  This function could be quite simpler but is designed by symmetry with
!>  other functions.
!>
!>  @param[in] elem_size is the size of one element of the array in
!>  byte
!>
!>  @param[in] d1_size is the number of elements in the array.
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_block_size is the number of element to transfer
!>
!>  @param[in] d1_offset is the element order to start the transfer to
!>
!>  @param[out] host_add point to the array on the host to write into
!>
!>  @param[in] accel_add refer to the compact memory area to read
!>  data. In the general case, accel_add may be seen as a unique idea (FIFO)
!>  and not some address in some memory space.

	SUBROUTINE P4A_COPY_FROM_ACCEL_1D (ELEM_SIZE, D1_SIZE,
     &  D1_BLOCK_SIZE, D1_OFFSET, HOST_ADD, ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D1_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I
	INTEGER SIZE
	INTEGER OFFSET

      OFFSET = D1_OFFSET*ELEM_SIZE
      SIZE = D1_SIZE*ELEM_SIZE
      DO I = 1, SIZE
         HOST_ADD(OFFSET+I) = ACCEL_ADD(I)
      ENDDO
      END

!>  Stub for copying memory from the hardware accelerator to a 2D array in
!>  the host.

	SUBROUTINE P4A_COPY_FROM_ACCEL_2D (ELEM_SIZE, D1_SIZE, D2_SIZE,
     &  D1_BLOCK_SIZE, D2_BLOCK_SIZE, D1_OFFSET, D2_OFFSET, HOST_ADD,
     &  ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER D2_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D2_BLOCK_SIZE
	INTEGER D1_OFFSET
	INTEGER D2_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE, D2_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE,
     &                      D2_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I_1
	INTEGER I_2
	INTEGER OFFSET_1
	INTEGER OFFSET_2

      OFFSET_1 = D1_OFFSET*ELEM_SIZE
      OFFSET_2 = D2_OFFSET*ELEM_SIZE
      DO I_2 = 1, D2_BLOCK_SIZE*ELEM_SIZE
         DO I_1 = 1, D1_BLOCK_SIZE*ELEM_SIZE
            HOST_ADD(OFFSET_1+I_1,OFFSET_2+I_2) = ACCEL_ADD(I_1,I_2)
         ENDDO
      ENDDO
      END
!> @addtogroup p4a_accel_stubs

!> @{

!> @defgroup p4a_accel_Fortran_stubs Equivalent stubs in Fortran of Par4All runtime to have PIPS analyzes happy

!> @{

!>  Stub for copying memory from the host to the hardware accelerator.
!>
!>  Since it is a stub so that PIPS can understand it, use simple
!>  implementation with standard memory copy operations
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  @param[in] host_add is the address of a source zone in the host memory
!>
!>  @param[out] accel_add is the address of a destination zone in the
!>  accelerator memory
!>
!>  @param[in] size is the size in bytes of the memory zone to copy
	SUBROUTINE P4A_COPY_TO_ACCEL(HOST_ADD, ACCEL_ADD, SIZE)
	INTEGER SIZE
	CHARACTER HOST_ADD(SIZE)
	CHARACTER ACCEL_ADD(SIZE)
	INTEGER I

      DO I = 1, SIZE
         ACCEL_ADD(I) = HOST_ADD(I)
      ENDDO
      END


!>  Stub for copying a 1D memory zone from the hardware accelerator to the
!>  host.
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  This function could be quite simpler but is designed by symmetry with
!>  other functions.
!>
!>  @param[in] elem_size is the size of one element of the array in
!>  byte
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_block_size is the number of element to transfer
!>
!>  @param[in] d1_offset is element order to start the transfer from
!>
!>  @param[in] host_add point to the array on the host to read
!>
!>  @param[out] accel_add refer to the compact memory area to write
!>  data. In the general case, accel_add may be seen as a unique idea
!>  (FIFO) and not some address in some memory space.

	SUBROUTINE P4A_COPY_TO_ACCEL_1D(ELEM_SIZE, D1_SIZE,
     &  D1_BLOCK_SIZE, D1_OFFSET, HOST_ADD, ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D1_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I
	INTEGER SIZE
	INTEGER OFFSET

      OFFSET = D1_OFFSET*ELEM_SIZE
      SIZE = D1_SIZE*ELEM_SIZE
      DO I = 1, SIZE
         ACCEL_ADD(I) = HOST_ADD(OFFSET+I)
      ENDDO
      END

!>  Stub for copying a 2D memory zone from the host to a compact memory
!>  zone in the hardware accelerator.

	SUBROUTINE P4A_COPY_TO_ACCEL_2D (ELEM_SIZE, D1_SIZE, D2_SIZE,
     &  D1_BLOCK_SIZE, D2_BLOCK_SIZE, D1_OFFSET, D2_OFFSET, HOST_ADD,
     &  ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER D2_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D2_BLOCK_SIZE
	INTEGER D1_OFFSET
	INTEGER D2_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE, D2_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE,
     &                      D2_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I_1
	INTEGER I_2
	INTEGER OFFSET_1
	INTEGER OFFSET_2

      OFFSET_1 = D1_OFFSET*ELEM_SIZE
      OFFSET_2 = D2_OFFSET*ELEM_SIZE
      DO I_2 = 1, D2_BLOCK_SIZE*ELEM_SIZE
         DO I_1 = 1, D1_BLOCK_SIZE*ELEM_SIZE
            ACCEL_ADD(I_1,I_2) = HOST_ADD(OFFSET_1+I_1,OFFSET_2+I_2)
         ENDDO
      ENDDO
      END
      PROGRAM MATADD
      INTEGER M
      INTEGER N
      PARAMETER (M = 402, N = 160)
      INTEGER I, J
      REAL A(M, N), B(M, N), C(M, N)

      DO I = 0, M-1
         DO J = 0, N-1
            B(I+1,J+1) = I+1
            C(I+1,J+1) = J+1
         ENDDO
      ENDDO

      DO I = 0, M-1
         DO J = 0, N-1
            A(I+1,J+1) = B(I+1,J+1)+C(I+1,J+1)
         ENDDO
      ENDDO

      END


!>  Stub for freeing memory on the hardware accelerator.
!>
!>  @param[in] address is the address of a previously allocated memory
!>  zone on the hardware accelerator
	SUBROUTINE P4A_ACCEL_FREE(ADDRESS)
	INTEGER ADDRESS
! Do nothing since it is not representable in Fortran 77...
      END


!>  Stub for allocating memory on the hardware accelerator.
!>
!>  @param[out] address is the address of a variable that is updated by
!>  this macro to contains the address of the allocated memory block
!>  @param[in] size is the size to allocate in bytes
	SUBROUTINE P4A_ACCEL_MALLOC(ADDRESS, SIZE)
	INTEGER SIZE
	INTEGER ADDRESS
! Do nothing since it is not representable in Fortran 77...
      END

!>  Stub for copying memory from the hardware accelerator to the host.
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  @param[out] host_add is the address of a destination zone in the
!>  host memory
!>
!>  @param[in] accel_add is the address of a source zone in the
!>  accelerator memory
!>
!>  @param[in] size is the size in bytes of the memory zone to copy
	SUBROUTINE P4A_COPY_FROM_ACCEL(HOST_ADD, ACCEL_ADD, SIZE)
	INTEGER SIZE
	CHARACTER HOST_ADD(SIZE)
	CHARACTER ACCEL_ADD(SIZE)
	INTEGER I

      DO I = 1, SIZE
         HOST_ADD(I) = ACCEL_ADD(I)
      ENDDO
      END


!> Stub for copying memory from the host to the hardware accelerator.
!>
!> Since it is a stub so that PIPS can understand it, use simple
!> implementation with standard memory copy operations
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  This function could be quite simpler but is designed by symmetry with
!>  other functions.
!>
!>  @param[in] elem_size is the size of one element of the array in
!>  byte
!>
!>  @param[in] d1_size is the number of elements in the array.
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_block_size is the number of element to transfer
!>
!>  @param[in] d1_offset is the element order to start the transfer to
!>
!>  @param[out] host_add point to the array on the host to write into
!>
!>  @param[in] accel_add refer to the compact memory area to read
!>  data. In the general case, accel_add may be seen as a unique idea (FIFO)
!>  and not some address in some memory space.

	SUBROUTINE P4A_COPY_FROM_ACCEL_1D (ELEM_SIZE, D1_SIZE,
     &  D1_BLOCK_SIZE, D1_OFFSET, HOST_ADD, ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D1_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I
	INTEGER SIZE
	INTEGER OFFSET

      OFFSET = D1_OFFSET*ELEM_SIZE
      SIZE = D1_SIZE*ELEM_SIZE
      DO I = 1, SIZE
         HOST_ADD(OFFSET+I) = ACCEL_ADD(I)
      ENDDO
      END

!>  Stub for copying memory from the hardware accelerator to a 2D array in
!>  the host.

	SUBROUTINE P4A_COPY_FROM_ACCEL_2D (ELEM_SIZE, D1_SIZE, D2_SIZE,
     &  D1_BLOCK_SIZE, D2_BLOCK_SIZE, D1_OFFSET, D2_OFFSET, HOST_ADD,
     &  ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER D2_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D2_BLOCK_SIZE
	INTEGER D1_OFFSET
	INTEGER D2_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE, D2_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE,
     &                      D2_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I_1
	INTEGER I_2
	INTEGER OFFSET_1
	INTEGER OFFSET_2

      OFFSET_1 = D1_OFFSET*ELEM_SIZE
      OFFSET_2 = D2_OFFSET*ELEM_SIZE
      DO I_2 = 1, D2_BLOCK_SIZE*ELEM_SIZE
         DO I_1 = 1, D1_BLOCK_SIZE*ELEM_SIZE
            HOST_ADD(OFFSET_1+I_1,OFFSET_2+I_2) = ACCEL_ADD(I_1,I_2)
         ENDDO
      ENDDO
      END
!> @addtogroup p4a_accel_stubs

!> @{

!> @defgroup p4a_accel_Fortran_stubs Equivalent stubs in Fortran of Par4All runtime to have PIPS analyzes happy

!> @{

!>  Stub for copying memory from the host to the hardware accelerator.
!>
!>  Since it is a stub so that PIPS can understand it, use simple
!>  implementation with standard memory copy operations
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  @param[in] host_add is the address of a source zone in the host memory
!>
!>  @param[out] accel_add is the address of a destination zone in the
!>  accelerator memory
!>
!>  @param[in] size is the size in bytes of the memory zone to copy
	SUBROUTINE P4A_COPY_TO_ACCEL(HOST_ADD, ACCEL_ADD, SIZE)
	INTEGER SIZE
	CHARACTER HOST_ADD(SIZE)
	CHARACTER ACCEL_ADD(SIZE)
	INTEGER I

      DO I = 1, SIZE
         ACCEL_ADD(I) = HOST_ADD(I)
      ENDDO
      END


!>  Stub for copying a 1D memory zone from the hardware accelerator to the
!>  host.
!>
!>  Do not change the place of the pointers in the API. The host address
!>  is always in the first position...
!>
!>  This function could be quite simpler but is designed by symmetry with
!>  other functions.
!>
!>  @param[in] elem_size is the size of one element of the array in
!>  byte
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_size is the number of elements in the array. It is not
!>  used but here for symmetry with functions of higher dimensionality
!>
!>  @param[in] d1_block_size is the number of element to transfer
!>
!>  @param[in] d1_offset is element order to start the transfer from
!>
!>  @param[in] host_add point to the array on the host to read
!>
!>  @param[out] accel_add refer to the compact memory area to write
!>  data. In the general case, accel_add may be seen as a unique idea
!>  (FIFO) and not some address in some memory space.

	SUBROUTINE P4A_COPY_TO_ACCEL_1D(ELEM_SIZE, D1_SIZE,
     &  D1_BLOCK_SIZE, D1_OFFSET, HOST_ADD, ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D1_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I
	INTEGER SIZE
	INTEGER OFFSET

      OFFSET = D1_OFFSET*ELEM_SIZE
      SIZE = D1_SIZE*ELEM_SIZE
      DO I = 1, SIZE
         ACCEL_ADD(I) = HOST_ADD(OFFSET+I)
      ENDDO
      END

!>  Stub for copying a 2D memory zone from the host to a compact memory
!>  zone in the hardware accelerator.

	SUBROUTINE P4A_COPY_TO_ACCEL_2D (ELEM_SIZE, D1_SIZE, D2_SIZE,
     &  D1_BLOCK_SIZE, D2_BLOCK_SIZE, D1_OFFSET, D2_OFFSET, HOST_ADD,
     &  ACCEL_ADD)

	INTEGER D1_SIZE
	INTEGER D2_SIZE
	INTEGER ELEM_SIZE
	INTEGER D1_BLOCK_SIZE
	INTEGER D2_BLOCK_SIZE
	INTEGER D1_OFFSET
	INTEGER D2_OFFSET
	CHARACTER HOST_ADD(D1_SIZE * ELEM_SIZE, D2_SIZE * ELEM_SIZE)
	CHARACTER ACCEL_ADD(D1_BLOCK_SIZE * ELEM_SIZE,
     &                      D2_BLOCK_SIZE * ELEM_SIZE)
	INTEGER I_1
	INTEGER I_2
	INTEGER OFFSET_1
	INTEGER OFFSET_2

      OFFSET_1 = D1_OFFSET*ELEM_SIZE
      OFFSET_2 = D2_OFFSET*ELEM_SIZE
      DO I_2 = 1, D2_BLOCK_SIZE*ELEM_SIZE
         DO I_1 = 1, D1_BLOCK_SIZE*ELEM_SIZE
            ACCEL_ADD(I_1,I_2) = HOST_ADD(OFFSET_1+I_1,OFFSET_2+I_2)
         ENDDO
      ENDDO
      END
/* C pretty print for module MATADD. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

int
main (int argc, char *argv[])
{
  static const int m = 402;
  static const int n = 160;
  int i;
  int j;
  float a[n - 0][m - 0];
  float b[n - 0][m - 0];
  float c[n - 0][m - 0];

  for (i = 0; i <= m - 1; i++)
    {
      for (j = 0; j <= n - 1; j++)
	{
	  b[(j + 1) - 1][(i + 1) - 1] = (i + 1);
	  c[(j + 1) - 1][(i + 1) - 1] = (j + 1);
	}
    }
  for (i = 0; i <= m - 1; i++)
    {
      for (j = 0; j <= n - 1; j++)
	{
	  a[(j + 1) - 1][(i + 1) - 1] =
	    (b[(j + 1) - 1][(i + 1) - 1] + c[(j + 1) - 1][(i + 1) - 1]);
	}
    }
  return 0;
}
/* C pretty print for module P4A_ACCEL_FREE. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_accel_free (int *address_p4a_copy)
{
  int address = *address_p4a_copy;

  return;
}
/* C pretty print for module P4A_ACCEL_MALLOC. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_accel_malloc (int *address_p4a_copy, int *size_p4a_copy)
{
  int address = *address_p4a_copy;
  int size = *size_p4a_copy;

  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel (char host_add[(*size_p4a_copy) - 0],
		     char accel_add[(*size_p4a_copy) - 0], int *size_p4a_copy)
{
  int i;
  int size = *size_p4a_copy;

  for (i = 1; i <= size; i++)
    {
      host_add[i - 1] = accel_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL_1D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel_1d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
			int *d1_block_size_p4a_copy, int *d1_offset_p4a_copy,
			char host_add[(*d1_size * elem_size_p4a_copy) - 0],
			char accel_add[(*d1_block_size * elem_size_p4a_copy) -
				       0])
{
  int i;
  int size;
  int offset;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;

  offset = (d1_offset * elem_size);
  size = (d1_size * elem_size);
  for (i = 1; i <= size; i++)
    {
      host_add[(offset + i) - 1] = accel_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL_2D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel_2d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
			int *d2_size_p4a_copy, int *d1_block_size_p4a_copy,
			int *d2_block_size_p4a_copy, int *d1_offset_p4a_copy,
			int *d2_offset_p4a_copy,
			char host_add[(*d2_size * elem_size_p4a_copy) -
				      0][(*d1_size * elem_size_p4a_copy) - 0],
			char accel_add[(*d2_block_size * elem_size_p4a_copy) -
				       0][(*d1_block_size *
					   elem_size_p4a_copy) - 0])
{
  int i_1;
  int i_2;
  int offset_1;
  int offset_2;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d2_size = *d2_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d2_block_size = *d2_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;
  int d2_offset = *d2_offset_p4a_copy;

  offset_1 = (d1_offset * elem_size);
  offset_2 = (d2_offset * elem_size);
  for (i_2 = 1; i_2 <= d2_block_size * elem_size; i_2++)
    {
      for (i_1 = 1; i_1 <= d1_block_size * elem_size; i_1++)
	{
	  host_add[(offset_2 + i_2) - 1][(offset_1 + i_1) - 1] =
	    accel_add[i_2 - 1][i_1 - 1];
	}
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel (char host_add[(*size_p4a_copy) - 0],
		   char accel_add[(*size_p4a_copy) - 0], int *size_p4a_copy)
{
  int i;
  int size = *size_p4a_copy;

  for (i = 1; i <= size; i++)
    {
      accel_add[i - 1] = host_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL_1D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel_1d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
		      int *d1_block_size_p4a_copy, int *d1_offset_p4a_copy,
		      char host_add[(*d1_size * elem_size_p4a_copy) - 0],
		      char accel_add[(*d1_block_size * elem_size_p4a_copy) -
				     0])
{
  int i;
  int size;
  int offset;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;

  offset = (d1_offset * elem_size);
  size = (d1_size * elem_size);
  for (i = 1; i <= size; i++)
    {
      accel_add[i - 1] = host_add[(offset + i) - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL_2D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel_2d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
		      int *d2_size_p4a_copy, int *d1_block_size_p4a_copy,
		      int *d2_block_size_p4a_copy, int *d1_offset_p4a_copy,
		      int *d2_offset_p4a_copy,
		      char host_add[(*d2_size * elem_size_p4a_copy) -
				    0][(*d1_size * elem_size_p4a_copy) - 0],
		      char accel_add[(*d2_block_size * elem_size_p4a_copy) -
				     0][(*d1_block_size *
					 elem_size_p4a_copy) - 0])
{
  int i_1;
  int i_2;
  int offset_1;
  int offset_2;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d2_size = *d2_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d2_block_size = *d2_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;
  int d2_offset = *d2_offset_p4a_copy;

  offset_1 = (d1_offset * elem_size);
  offset_2 = (d2_offset * elem_size);
  for (i_2 = 1; i_2 <= d2_block_size * elem_size; i_2++)
    {
      for (i_1 = 1; i_1 <= d1_block_size * elem_size; i_1++)
	{
	  accel_add[i_2 - 1][i_1 - 1] =
	    host_add[(offset_2 + i_2) - 1][(offset_1 + i_1) - 1];
	}
    }
  return;
}
      PROGRAM MATADD
      INTEGER M
      INTEGER N
      PARAMETER (M = 402, N = 160)
      INTEGER I, J
      REAL A(M, N), B(M, N), C(M, N)


!$OMP PARALLEL DO PRIVATE(J)
      DO I = 0, M-1

!$OMP    PARALLEL DO 
         DO J = 0, N-1
            B(I+1,J+1) = I+1
            C(I+1,J+1) = J+1
         ENDDO
      ENDDO


!$OMP PARALLEL DO PRIVATE(J)
      DO I = 0, M-1

!$OMP    PARALLEL DO 
         DO J = 0, N-1
            A(I+1,J+1) = B(I+1,J+1)+C(I+1,J+1)
         ENDDO
      ENDDO

      END
      PROGRAM MATADD
      INTEGER M
      INTEGER N
      PARAMETER (M = 402, N = 160)
      INTEGER I, J
      REAL A(M, N), B(M, N), C(M, N)
      CALL P4A_LAUNCHER_MATADD(M, N, B, C)
      CALL P4A_LAUNCHER_MATADD_1(M, N, A, B, C)

      END
/* C pretty print for module MATADD. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

int
main (int argc, char *argv[])
{
  static const int m = 402;
  static const int n = 160;
  int i;
  int j;
  float a[n - 0][m - 0];
  float b[n - 0][m - 0];
  float c[n - 0][m - 0];

  p4a_launcher_matadd (m, n, b, c);
  p4a_launcher_matadd_1 (m, n, a, b, c);
  return 0;
}
/* C pretty print for module P4A_ACCEL_FREE. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_accel_free (int *address_p4a_copy)
{
  int address = *address_p4a_copy;

  return;
}
/* C pretty print for module P4A_ACCEL_MALLOC. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_accel_malloc (int *address_p4a_copy, int *size_p4a_copy)
{
  int address = *address_p4a_copy;
  int size = *size_p4a_copy;

  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel (char host_add[(*size_p4a_copy) - 0],
		     char accel_add[(*size_p4a_copy) - 0], int *size_p4a_copy)
{
  int i;
  int size = *size_p4a_copy;

  for (i = 1; i <= size; i++)
    {
      host_add[i - 1] = accel_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL_1D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel_1d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
			int *d1_block_size_p4a_copy, int *d1_offset_p4a_copy,
			char host_add[(*d1_size * elem_size_p4a_copy) - 0],
			char accel_add[(*d1_block_size * elem_size_p4a_copy) -
				       0])
{
  int i;
  int size;
  int offset;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;

  offset = (d1_offset * elem_size);
  size = (d1_size * elem_size);
  for (i = 1; i <= size; i++)
    {
      host_add[(offset + i) - 1] = accel_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_FROM_ACCEL_2D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_from_accel_2d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
			int *d2_size_p4a_copy, int *d1_block_size_p4a_copy,
			int *d2_block_size_p4a_copy, int *d1_offset_p4a_copy,
			int *d2_offset_p4a_copy,
			char host_add[(*d2_size * elem_size_p4a_copy) -
				      0][(*d1_size * elem_size_p4a_copy) - 0],
			char accel_add[(*d2_block_size * elem_size_p4a_copy) -
				       0][(*d1_block_size *
					   elem_size_p4a_copy) - 0])
{
  int i_1;
  int i_2;
  int offset_1;
  int offset_2;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d2_size = *d2_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d2_block_size = *d2_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;
  int d2_offset = *d2_offset_p4a_copy;

  offset_1 = (d1_offset * elem_size);
  offset_2 = (d2_offset * elem_size);
  for (i_2 = 1; i_2 <= d2_block_size * elem_size; i_2++)
    {
      for (i_1 = 1; i_1 <= d1_block_size * elem_size; i_1++)
	{
	  host_add[(offset_2 + i_2) - 1][(offset_1 + i_1) - 1] =
	    accel_add[i_2 - 1][i_1 - 1];
	}
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel (char host_add[(*size_p4a_copy) - 0],
		   char accel_add[(*size_p4a_copy) - 0], int *size_p4a_copy)
{
  int i;
  int size = *size_p4a_copy;

  for (i = 1; i <= size; i++)
    {
      accel_add[i - 1] = host_add[i - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL_1D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel_1d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
		      int *d1_block_size_p4a_copy, int *d1_offset_p4a_copy,
		      char host_add[(*d1_size * elem_size_p4a_copy) - 0],
		      char accel_add[(*d1_block_size * elem_size_p4a_copy) -
				     0])
{
  int i;
  int size;
  int offset;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;

  offset = (d1_offset * elem_size);
  size = (d1_size * elem_size);
  for (i = 1; i <= size; i++)
    {
      accel_add[i - 1] = host_add[(offset + i) - 1];
    }
  return;
}
/* C pretty print for module P4A_COPY_TO_ACCEL_2D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_copy_to_accel_2d (int *elem_size_p4a_copy, int *d1_size_p4a_copy,
		      int *d2_size_p4a_copy, int *d1_block_size_p4a_copy,
		      int *d2_block_size_p4a_copy, int *d1_offset_p4a_copy,
		      int *d2_offset_p4a_copy,
		      char host_add[(*d2_size * elem_size_p4a_copy) -
				    0][(*d1_size * elem_size_p4a_copy) - 0],
		      char accel_add[(*d2_block_size * elem_size_p4a_copy) -
				     0][(*d1_block_size *
					 elem_size_p4a_copy) - 0])
{
  int i_1;
  int i_2;
  int offset_1;
  int offset_2;
  int elem_size = *elem_size_p4a_copy;
  int d1_size = *d1_size_p4a_copy;
  int d2_size = *d2_size_p4a_copy;
  int d1_block_size = *d1_block_size_p4a_copy;
  int d2_block_size = *d2_block_size_p4a_copy;
  int d1_offset = *d1_offset_p4a_copy;
  int d2_offset = *d2_offset_p4a_copy;

  offset_1 = (d1_offset * elem_size);
  offset_2 = (d2_offset * elem_size);
  for (i_2 = 1; i_2 <= d2_block_size * elem_size; i_2++)
    {
      for (i_1 = 1; i_1 <= d1_block_size * elem_size; i_1++)
	{
	  accel_add[i_2 - 1][i_1 - 1] =
	    host_add[(offset_2 + i_2) - 1][(offset_1 + i_1) - 1];
	}
    }
  return;
}
/* C pretty print for module P4A_KERNEL_MATADD. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_kernel_matadd (int *m_p4a_copy, int *n_p4a_copy,
		   float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		   float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		   int *i_p4a_copy, int *j_p4a_copy)
{
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;
  int i = *i_p4a_copy;
  int j = *j_p4a_copy;

  b[(j + 1) - 1][(i + 1) - 1] = (i + 1);
  c[(j + 1) - 1][(i + 1) - 1] = (j + 1);
  return;
}
/* C pretty print for module P4A_KERNEL_MATADD_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_kernel_matadd_1 (int *m_p4a_copy, int *n_p4a_copy,
		     float a[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		     float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		     float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		     int *i_p4a_copy, int *j_p4a_copy)
{
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;
  int i = *i_p4a_copy;
  int j = *j_p4a_copy;

  a[(j + 1) - 1][(i + 1) - 1] =
    (b[(j + 1) - 1][(i + 1) - 1] + c[(j + 1) - 1][(i + 1) - 1]);
  return;
}
/* C pretty print for module P4A_LAUNCHER_MATADD. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_launcher_matadd (int *m_p4a_copy, int *n_p4a_copy,
		     float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		     float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0])
{
  int j;
  int i;
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;

  for (i = 0; i <= m - 1; i++)
    {
      for (j = 0; j <= n - 1; j++)
	{
	  p4a_wrapper_matadd (&m, &n, b, c, &i, &j);
	}
    }
  return;
}
/* C pretty print for module P4A_LAUNCHER_MATADD_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_launcher_matadd_1 (int *m_p4a_copy, int *n_p4a_copy,
		       float a[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		       float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		       float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0])
{
  int j;
  int i;
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;

  for (i = 0; i <= m - 1; i++)
    {
      for (j = 0; j <= n - 1; j++)
	{
	  p4a_wrapper_matadd_1 (&m, &n, a, b, c, &i, &j);
	}
    }
  return;
}
/* C pretty print for module P4A_WRAPPER_MATADD. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_wrapper_matadd (int *m_p4a_copy, int *n_p4a_copy,
		    float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		    float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		    int *i_p4a_copy, int *j_p4a_copy)
{
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;
  int i = *i_p4a_copy;
  int j = *j_p4a_copy;

  p4a_kernel_matadd (&m, &n, b, c, &i, &j);
  return;
}
/* C pretty print for module P4A_WRAPPER_MATADD_1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
p4a_wrapper_matadd_1 (int *m_p4a_copy, int *n_p4a_copy,
		      float a[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		      float b[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		      float c[(*n_p4a_copy) - 0][(*m_p4a_copy) - 0],
		      int *i_p4a_copy, int *j_p4a_copy)
{
  int m = *m_p4a_copy;
  int n = *n_p4a_copy;
  int i = *i_p4a_copy;
  int j = *j_p4a_copy;

  p4a_kernel_matadd_1 (&m, &n, a, b, c, &i, &j);
  return;
}

void alphablending(int n, int src0[n][n], int src1[n][n])
{
   unsigned int i, j;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         /*/100*/
         src0[i][j] = 40*src0[i][j]+(100-40)*src1[i][j];
}
tidy the code just in case of
void alphablending(int n, int src0[n][n], int src1[n][n])
{
   unsigned int i, j;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         /*/100*/
         src0[i][j] = 40*src0[i][j]+60*src1[i][j];
}
**** check ok ******
void alphablending(int n, int src0[n][n], int src1[n][n])
{
   unsigned int i, j;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         /*/100*/
         src0[i][j] = 40*src0[i][j]+60*src1[i][j];
}
detection and extraction
tiling
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      unsigned int i, j;
l99998:
#pragma terapix
      for(i = 0; i <= n-1; i += 1)
l99999:
         for(j = 0; j <= n-1; j += 1)
            /*/100*/
            src0[i][j] = 40*src0[i][j]+60*src1[i][j];
   }
}
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            for(i = I_9; i <= pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1); i += 1)
               for(j = I_14; j <= pips_min(2, n-1, I_14+__TERAPYPS_HEIGHT-1); j += 1)
                  /*/100*/
                  src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-1>I_9+__TERAPYPS_WIDTH-1)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
               else
                  for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                     for(j = I_14; j <= n-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
               for(i = I_9; i <= n-1; i += 1)
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else
               for(i = I_9; i <= n-1; i += 1)
                  for(j = I_14; j <= n-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
         I_9 = I_0*__TERAPYPS_WIDTH;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
            if (n-1>I_9+__TERAPYPS_WIDTH-1)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
               else
                  for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                     for(j = I_14; j <= n-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
               for(i = I_9; i <= n-1; i += 1)
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else
               for(i = I_9; i <= n-1; i += 1)
                  for(j = I_14; j <= n-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
group constants and isolate
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23;
   if (__TERAPYPS_HEIGHT>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
         I_9 = 128*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99989:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+127)-I_9+1), 0);
            if (n-1>I_9+127)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99996:
                  for(i = I_9; i <= I_9+127; i += 1)
l99997:
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
               else
l99994:
                  for(i = I_9; i <= I_9+127; i += 1)
l99995:
                     for(j = I_14; j <= n-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99992:
               for(i = I_9; i <= n-1; i += 1)
l99993:
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else
l99990:
               for(i = I_9; i <= n-1; i += 1)
l99991:
                  for(j = I_14; j <= n-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, I_22, I_23;
   __TERAPYPS_HEIGHT = 256;
   if (__TERAPYPS_HEIGHT>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
         I_9 = 128*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99989:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+127)-I_9+1), 0);
            if (n-1>I_9+127)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99996:
                  for(i = I_9; i <= I_9+127; i += 1)
l99997:
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
               else
l99994:
                  for(i = I_9; i <= I_9+127; i += 1)
l99995:
                     for(j = I_14; j <= n-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99992:
               for(i = I_9; i <= n-1; i += 1)
l99993:
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else
l99990:
               for(i = I_9; i <= n-1; i += 1)
l99991:
                  for(j = I_14; j <= n-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
**** check ok ******
void alphablending_l99998(int n, int src0[n][n], int src1[n][n])
{
   //PIPS generated variable
   int I_0, I_1;

   if (256>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
l99998:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
         for(I_1 = 0; I_1 <= (n-1)/256; I_1 += 1) {


            if (n-1>128*I_0+127)
               if (n-1>256*I_1+255)
l99996:
                  for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
                     for(j = 256*I_1; j <= 256*I_1+255; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
               else
l99994:
                  for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99995:
                     for(j = 256*I_1; j <= n-1; j += 1)
                        src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else if (n-1>256*I_1+255)
l99992:
               for(i = 128*I_0; i <= n-1; i += 1)
l99993:
                  for(j = 256*I_1; j <= 256*I_1+255; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
            else
l99990:
               for(i = 128*I_0; i <= n-1; i += 1)
l99991:
                  for(j = 256*I_1; j <= n-1; j += 1)
                     src0[i][j] = 40*src0[i][j]+60*src1[i][j];
         }
      }
   }
}
void tile_l99996(int n, int I_0, int I_1, int src0[n][n], int src1[n][n])
{
   // Declared by Pass Outlining
   int i, j;
l99996:
   for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
      for(j = 256*I_1; j <= 256*I_1+255; j += 1)
         src0[i][j] = 40*src0[i][j]+60*src1[i][j];
}
void tile_l99996(int n, int I_0, int I_1, int src0[n][n], int src1[n][n])
{
   // Declared by Pass Outlining
   int i, j;
   {
      //PIPS generated variable
      int (*src10)[128][256] = (int (*)[128][256]) 0, (*src00)[128][256] = (int (*)[128][256]) 0;
      P4A_accel_malloc((void **) &src00, sizeof(int)*32768);
      P4A_accel_malloc((void **) &src10, sizeof(int)*32768);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src1[0][0], *src10);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src0[0][0], *src00);

l99996:
      for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99997:
         for(j = 256*I_1; j <= 256*I_1+255; j += 1)
            (*src00)[i-128*I_0][j-256*I_1] = 40*(*src00)[i-128*I_0][j-256*I_1]+60*(*src10)[i-128*I_0][j-256*I_1];
      P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src0[0][0], *src00);
      P4A_accel_free(src00);
      P4A_accel_free(src10);
   }
}
**** check ok ******
outlining to launcher
void tile_l99996(int n, int I_0, int I_1, int src0[n][n], int src1[n][n])
{
   // Declared by Pass Outlining
   int i, j;
   {
      //PIPS generated variable
      int (*src10)[128][256] = (int (*)[128][256]) 0, (*src00)[128][256] = (int (*)[128][256]) 0;
      P4A_accel_malloc((void **) &src00, 32768*sizeof(int));
      P4A_accel_malloc((void **) &src10, 32768*sizeof(int));
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src1[0][0], *src10);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src0[0][0], *src00);

l99996:      launcher_0(255+1, *src00, *src10);
      P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 256, 128*I_0, 256*I_1, &src0[0][0], *src00);
      P4A_accel_free(src00);
      P4A_accel_free(src10);
   }
}

//  <src00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>
//  <src00[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>
//  <src10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>

void launcher_0(int I_24, int src00[128][256], int src10[128][256])
{
   // Declared by Pass Outlining
   int i, j;

//  <src00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>
//  <src00[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>
//  <src10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2,
//    PHI2<=255, I_24==256}>

l99996:
   for(i = 0; i <= 127; i += 1)

//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=255,
//    I_24==256, 0<=i, i<=127}>
//  <src00[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=255,
//    I_24==256, 0<=i, i<=127}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=255,
//    I_24==256, 0<=i, i<=127}>

l99997:
      for(j = 0; j <= I_24-1; j += 1)

//  <src00[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_24==256, 0<=i,
//    i<=127, 0<=j, j<=255}>
//  <src00[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, I_24==256, 0<=i,
//    i<=127, 0<=j, j<=255}>
//  <src10[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_24==256, 0<=i,
//    i<=127, 0<=j, j<=255}>

         src00[i][j] = 40*src00[i][j]+60*src10[i][j];
}
outlining to microcode
void launcher_0(int I_24, int src00[128][256], int src10[128][256])
{
   // Declared by Pass Outlining
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:
      for(j = 0; j <= I_24-1; j += 1)
         src00[i][j] = 40*src00[i][j]+60*src10[i][j];
}
void launcher_0(int I_24, int src00[128][256], int src10[128][256])
{
   // Declared by Pass Outlining
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:
      for(j = 0; j <= I_24-1; j += 1)
         src00[i][j] = 40*src00[i][j]+60*src10[i][j];
}
void launcher_0(int I_24, int src00[128][256], int src10[128][256])
{
   // Declared by Pass Outlining
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(I_24, *&src00[i], *&src10[i]);
}
void launcher_0_microcode(int I_24, int src000[256], int src100[256])
{
   // Declared by Pass Outlining
   int j;
l99997:
   for(j = 0; j <= I_24-1; j += 1)
      src000[j] = 40*src000[j]+60*src100[j];
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_24, int src000[256], int src100[256])
{
   // Declared by Pass Outlining
   int j;
l99997:
   for(j = 0; j <= I_24-1; j += 1)
      src000[j] = 40*src000[j]+60*src100[j];
}
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
l99997:
   for(j = 0; j <= I_24-1; j += 1)
      *(src000+j) = 40**(src000+j)+60**(src100+j);
}
**** check ok ******
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
l99997:
   for(j = 0; j <= I_24-1; j += 1)
      *(src000+j) = 40**(src000+j)+60**(j+src100);
}
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   src1000 = src100;
   src0000 = src000;
l99997:
   for(j = 0; j <= I_24-1; j += 1) {
      *src0000 = 40**src0000+60**src1000;
      src1000 += 1;
      src0000 += 1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   src1000 = src100;
   src0000 = src000;
l99997:
   for(j = 0; j <= I_24-1; j += 1) {
      *src0000 = 40**src0000+60**src1000;
      src1000 += 1;
      src0000 += 1;
   }
}
**** check ok ******
**** check ok ******
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   src1000 = src100;
   src0000 = src000;
l99997:
   for(j = 0; j <= I_24-1; j += 1) {
      *src0000 = 40**src0000+60**src1000;
      src1000 += 1;
      src0000 += 1;
   }
}
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   src1000 = src100;
   src0000 = src000;
l99997:
   for(j = 0; j <= I_24-1; j += 1) {
      *src0000 = 40**src0000+60**src1000;
      src1000 = src1000+1;
      src0000 = src0000+1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_24, int *src000, int *src100)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   src1000 = src100;
   src0000 = src000;
l99997:
   for(j = 0; j <= I_24-1; j += 1) {
      *src0000 = 40**src0000+60**src1000;
      src1000 = src1000+1;
      src0000 = src0000+1;
   }
}
**** check ok ******
I_24 belongs to a loop bound
src000 seems an image
src100 seems an image
void launcher_0_microcode(int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix src100 128 256
#pragma terapix src000 128 256
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *src000, *im3, *src100, *im4;
   //PIPS generated variable
   int re6, re7;
   //PIPS generated variable
   int *im5, *im6, *im7, *im8;
   //PIPS generated variable
   int P;
   im4 = FIFO2;
   im3 = FIFO1;
   im1 = im4;
   im2 = im3;
   im2 = im2-1;
   im1 = im1-1;
l99997:
   for(re6 = 0; re6 <= N1; re6 += 1) {
      //PIPS generated variable
      int I_25;
      *++im2 = 40**im2+60**++im1;
   }
}
**** check ok ******
void launcher_0_microcode(int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix src100 128 256
#pragma terapix src000 128 256
   int j;
   //PIPS generated variable
   int *src0000, *src1000;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *src000, *im3, *src100, *im4;
   //PIPS generated variable
   int re6, re7;
   //PIPS generated variable
   int *im5, *im6, *im7, *im8;
   //PIPS generated variable
   int P;
   im4 = FIFO2;
   im3 = FIFO1;
   im1 = im4;
   im2 = im3;
   im2 = im2-1;
   im1 = im1-1;
l99997:
   for(re6 = 0; re6 <= N1; re6 += 1) {
      //PIPS generated variable
      int I_25;
      *++im2 = 40**im2+60**++im1;
   }
}
void launcher_0(int I_24, int src00[128][256], int src10[128][256])
{
   // Declared by Pass Outlining
   int i, j;
l99996:
   for(i = 0; i <= 127; i += 1)
l99997:      launcher_0_microcode(*&src10[i], *&src00[i], I_24);
}
**** check ok ******
int main(int argc, char *argv[])
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int a[n][n], b[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 1, b[i][j] = 1;
   alphablending(n, a, b);
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += a[i][j];
   printf("%d\n", check);
   return 0;
}
tidy the code just in case of
int main(int argc, char *argv[])
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int a[n][n], b[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 1, b[i][j] = 1;
   alphablending(n, a, b);
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += a[i][j];
   printf("%d\n", check);
   return 0;
}
**** check ok ******
int main(int argc, char *argv[])
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int a[n][n], b[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 1, b[i][j] = 1;
   alphablending(n, a, b);
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += a[i][j];
   printf("%d\n", check);
   return 0;
}
detection and extraction
tiling

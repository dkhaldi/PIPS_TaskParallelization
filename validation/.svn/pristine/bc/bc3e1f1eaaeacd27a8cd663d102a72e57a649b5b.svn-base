int main(int argc, char **argv)
{
   int image_size = atoi(argv[1]);
   if (image_size>5) {
      int (*image)[image_size][image_size];
      int (*new_image)[image_size][image_size];
      int i, j, k, n;

//  <image-OUT-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-OUT-EXACT-{}>

      image = (int (*)[image_size][image_size]) malloc(sizeof(int)*image_size*image_size);

//  <new_image-OUT-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-OUT-EXACT-{}>

      new_image = (int (*)[image_size][image_size]) malloc(sizeof(int)*image_size*image_size);

//  <new_image[PHI1][PHI2][PHI3]-OUT-MAY-{PHI1==0, 2<=PHI2,
//    PHI2+3<=image_size, 1<=PHI3, PHI3+1<=image_size, 6<=image_size}>

      for(i = 0; i <= image_size-1; i += 1)

//  <new_image[PHI1][PHI2][PHI3]-OUT-MAY-{PHI1==0, PHI2==i, 2<=PHI2,
//    PHI2+3<=image_size, 1<=PHI3, PHI3+1<=image_size, 6<=image_size}>

         for(j = 0; j <= image_size-1; j += 1)

//  <new_image[PHI1][PHI2][PHI3]-OUT-MAY-{PHI1==0, PHI2==i, PHI3==j,
//    2<=PHI2, PHI2+3<=image_size, 1<=PHI3, j+1<=image_size,
//    6<=image_size}>

            ((*new_image)[i])[j] = i*j;

//  <image[PHI1][PHI2][PHI3]-OUT-EXACT-{PHI1==0, PHI2==PHI3, 2<=PHI2,
//    PHI3+3<=image_size, i==image_size, j==image_size, 6<=i}>


      for(k = 0; k <= 2; k += 1) {

//  <new_image[PHI1][PHI2][PHI3]-OUT-EXACT-{PHI1==0, 2<=PHI2,
//    PHI2+3<=image_size, 2<=PHI3, PHI3+3<=image_size, i==j,
//    j==image_size, 6<=i, 0<=k, k<=2}>

         erode(image_size, image_size, *new_image, *image);

//  <image[PHI1][PHI2][PHI3]-OUT-MAY-{PHI1==0, 2<=PHI2,
//    PHI3+k+4<=PHI2+i, PHI2+k+4<=PHI3+i, PHI2+3<=image_size, 2<=PHI3,
//    PHI3+3<=image_size, i==j, j==image_size, 6<=i, 0<=k, k<=2}>

         erode(image_size, image_size, *image, *new_image);
      }

      for(i = 0; i <= image_size-1; i += 1)

//  <stdout[PHI1]-OUT-MAY-{PHI1==0, 0<=i, i+1<=image_size}>
//  <__IO_EFFECTS:LUNS[PHI1]-OUT-MAY-{PHI1==1, 0<=i, i+1<=image_size}>

         printf("%f ", ((*image)[i])[i]);

//  <_MALLOC_EFFECTS:_MALLOC_-OUT-EXACT-{}>

      free(image);
      free(new_image);
   }

   return 0;
}

//  <new_image[PHI1][PHI2]-OUT-MAY-{2<=PHI1, PHI1+3<=isj, 2<=PHI2,
//    PHI2+3<=isj, isi==isj, 6<=isj}>

void erode(int isi, int isj, int new_image[isi][isj], int image[isi][isj])
{

   int i, j, k, l;

//  <new_image[PHI1][PHI2]-OUT-MAY-{2<=PHI1, PHI1+3<=isi, 2<=PHI2,
//    PHI2+3<=isj, isi==isj, 6<=isi}>

   for(l = 0; l <= 4; l += 1)

//  <new_image[PHI1][PHI2]-OUT-MAY-{2<=PHI1, PHI1+3<=isi, 2<=PHI2,
//    PHI2+3<=isj, 0`l==4, isi==isj, 0<=0`l, 6<=isi}>


      for(i = 5/2; i <= isi-5/2-1; i += 1)

//  <new_image[PHI1][PHI2]-OUT-MAY-{PHI1==i, 2<=PHI2, PHI2+3<=isj,
//    0`l==4, isi==isj, 2<=i, i+3<=isi, 6<=isi}>

         for(j = 5/2; j <= isj-5/2-1; j += 1) {
            int l = image[i][j];
            for(k = 0; k <= 4; k += 1)
               l = MIN(l, image[i][j+1-5/2+k]);

//  <new_image[PHI1][PHI2]-OUT-MAY-{PHI1==i, PHI2==j, k==5, 0`l==4,
//    isi==isj, 2<=i, i+3<=isi, 2<=j, j+3<=isi, 6<=isi}>

            new_image[i][j] = l;
         }
}

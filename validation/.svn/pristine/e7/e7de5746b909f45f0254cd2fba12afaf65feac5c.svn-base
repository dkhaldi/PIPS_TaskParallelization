Select some options to deal with th C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop Ã  la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analysis:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:
float test(int argc, char *argv[])
{
   int i, j, k;
//             <    is written>: i

   for(i = 0; i <= 8; i += 1)
//             <    is written>: j
      for(j = 0; j <= 8; j += 1) {
//             <    is read   >: i j
//             <    is written>: imagein[i][j].re
         imagein[i][j].re = 0.0;
//             <    is read   >: i j
//             <    is written>: imagein[i][j].im
         imagein[i][j].im = 0.0;
      }
//             <    is read   >: imagein[2][1].re
   return imagein[2][1].re;
}
//             <may be written>: imagein[*][*].im imagein[*][*].re
//             <    is read   >: imagein[2][1].re
float test(int argc, char *argv[])
{
   int i, j, k;
//             <may be written>: imagein[*][*].im imagein[*][*].re
//             <    is read   >: i j
//             <    is written>: i j

   for(i = 0; i <= 8; i += 1)
//             <may be written>: imagein[*][*].im imagein[*][*].re
//             <    is read   >: i j
//             <    is written>: j
      for(j = 0; j <= 8; j += 1) {
//             <may be written>: imagein[*][*].re
//             <    is read   >: i j
         imagein[i][j].re = 0.0;
//             <may be written>: imagein[*][*].im
//             <    is read   >: i j
         imagein[i][j].im = 0.0;
      }
//             <    is read   >: imagein[2][1].re
   return imagein[2][1].re;
}

//  <imagein[PHI1][PHI2].im-W-EXACT-{0<=PHI1, PHI1<=8, 0<=PHI2,
//    PHI2<=8}>
//  <imagein[PHI1][PHI2].re-R-EXACT-{PHI1==2, PHI2==1}>
//  <imagein[PHI1][PHI2].re-W-EXACT-{0<=PHI1, PHI1<=8, 0<=PHI2,
//    PHI2<=8}>

float test(int argc, char *argv[])
{
   int i, j, k;

//  <imagein[PHI1][PHI2].im-W-EXACT-{0<=PHI1, PHI1<=8, 0<=PHI2,
//    PHI2<=8}>
//  <imagein[PHI1][PHI2].re-W-EXACT-{0<=PHI1, PHI1<=8, 0<=PHI2,
//    PHI2<=8}>


   for(i = 0; i <= 8; i += 1)

//  <imagein[PHI1][PHI2].im-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=8, 0<=i,
//    i<=8}>
//  <imagein[PHI1][PHI2].re-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=8, 0<=i,
//    i<=8}>

      for(j = 0; j <= 8; j += 1) {

//  <imagein[PHI1][PHI2].re-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=8,
//    0<=j, j<=8}>

         imagein[i][j].re = 0.0;

//  <imagein[PHI1][PHI2].im-W-EXACT-{PHI1==i, PHI2==j, 0<=i, i<=8,
//    0<=j, j<=8}>

         imagein[i][j].im = 0.0;
      }

//  <imagein[PHI1][PHI2].re-R-EXACT-{PHI1==2, PHI2==1, i==9, j==9}>

   return imagein[2][1].re;
}
Privatize scalar variables on all the modules of the program:
float test(int argc, char *argv[])
{
   int i, j, k;

#pragma omp parallel for private(j)
   for(i = 0; i <= 8; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 8; j += 1) {
         imagein[i][j].re = 0.0;
         imagein[i][j].im = 0.0;
      }
   return imagein[2][1].re;
}

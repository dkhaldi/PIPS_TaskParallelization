raw file
int main(int argc, char *argv[])
{
   struct _ {
      int *a;
      int c[4];
   } __;
   int b = atoi(argv[1]);
   __.a = malloc(sizeof(int)*4);
   do {
      (__.a)[0] = b*2;
      (__.a)[1] = b*3;
      (__.a)[2] = b*4;
      (__.a)[3] = b*5;
   }
   while (0);
   do {
      (__.c)[0] = (__.a)[0]*2;
      (__.c)[1] = (__.a)[1]*3;
      (__.c)[2] = (__.a)[2]*4;
      (__.c)[3] = (__.a)[3]*5;
   }
   while (0);
   free(__.a);
   return (__.c)[0];
}
after sanitize
int main(int argc, char *argv[])
{
   struct _ {
      int *a;
      int c[4];
   } __;
   int b = atoi(argv[1]);
   //PIPS generated variable
   int *__a;
   //PIPS generated variable
   int __c[4];
   __a = malloc(sizeof(int)*4);
   do {
      __a[0] = b*2;
      __a[1] = b*3;
      __a[2] = b*4;
      __a[3] = b*5;
   }
   while (0);
   do {
      __c[0] = __a[0]*2;
      __c[1] = __a[1]*3;
      __c[2] = __a[2]*4;
      __c[3] = __a[3]*5;
   }
   while (0);
   free(__a);
   return __c[0];
}
after vectorization
int main(int argc, char *argv[])
{
   struct _ {
      int *a;
      int c[4];
   } __;
   int b = atoi(argv[1]);
   //PIPS generated variable
   int *__a;
   //SAC generated temporary array
   a4si pdata0 = {2, 3, 4, 5};
   //PIPS generated variable
   int __c[4];
   __a = malloc(sizeof(int)*4);
   do {
      //PIPS:SAC generated v4si vector(s)
      v4si vec00, vec10, vec20;
      SIMD_LOAD_BROADCAST_V4SI(vec20, b);
      SIMD_LOAD_V4SI(vec10, &pdata0[0]);
      SIMD_MULD(vec00, vec10, vec20);
      SIMD_STORE_V4SI(vec00, &__a[0]);
   }
   while (0);
   do {
      __c[0] = 2*__a[0];
      __c[1] = 3*__a[1];
      __c[2] = 4*__a[2];
      __c[3] = 5*__a[3];
   }
   while (0);
   free(__a);
   return __c[0];
}


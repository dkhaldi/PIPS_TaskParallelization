int main(int argc, char *argv[])
{
   //PIPS generated variable
   int j, i_0, i_1;
   scilab_rt_init(argc, argv, 0);
   
   /*  t41.sce: testing sqrt function */
   double _u_x = 4.;
   double _u_y = 3.;
   double _tmpxx0 = _u_x*_u_x;
   double _tmpxx1 = _u_y*_u_y;
   double _u_d = sqrt(_tmpxx0+_tmpxx1);
   scilab_rt_display_s0d0_("d", _u_d);
   int _u_a = 2;
   double _u_b = sqrt(_u_a);
   scilab_rt_display_s0d0_("b", _u_b);
   /* a3 = round(predicted_rand(3,2,3)*10); */
   double _u_a3[3][2][3];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 2; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 1; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1)
            _u_a3[__lv1][__lv2][__lv3] = (double) 1.0;
      }
   }

#pragma omp parallel for
   for(j = 0; j <= 1; j += 1) {
      //PIPS generated variable
      int k_0;
      for(k_0 = 0; k_0 <= 2; k_0 += 1)
         _u_a3[1][j][k_0] = 10;
   }

#pragma omp parallel for
   for(i_0 = 0; i_0 <= 2; i_0 += 1) {
      //PIPS generated variable
      int k_1;
      for(k_1 = 0; k_1 <= 2; k_1 += 1)
         _u_a3[i_0][1][k_1] = 20;
   }

#pragma omp parallel for
   for(i_1 = 0; i_1 <= 2; i_1 += 1)
      _u_a3[i_1][1][2] = 30;
   double _u_c[3][2][3];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 2; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 1; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1)
            _u_c[__lv1][__lv2][__lv3] = sqrt(_u_a3[__lv1][__lv2][__lv3]);
      }
   }
   scilab_rt_display_s0d3_("c", 3, 2, 3, _u_c);

   scilab_rt_terminate();
}

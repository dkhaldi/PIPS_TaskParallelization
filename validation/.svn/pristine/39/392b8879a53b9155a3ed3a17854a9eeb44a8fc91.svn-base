#
# Display print_code_preconditions for module induction01
#

//  P() {}

void induction01(double A[SIZE], double B[SIZE][SIZE])
{

//  P() {}

   int i, j;

//  P() {}

   int k = -1;

//  P(k) {k==-1}

   int l = 10;

//  P(k,l) {k==-1, l==10}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,j,k,l) {i==k+1, 2i==l-10, i+1<=SIZE, 0<=i}

      k = k+1;

//  P(i,j,k,l) {i==k, 2i==l-10, i+1<=SIZE, 0<=i}

      l += 2;

//  P(i,j,k,l) {i==k, 2i==l-12, i+1<=SIZE, 0<=i}

      for(j = 0; j <= SIZE-1; j += 1)

//  P(i,j,k,l) {i==k, 2i==l-12, i+1<=SIZE, j+1<=SIZE, 0<=i, 0<=j}

         A[k] = B[l][k]+A[k];
   }
}
#
# Code after induction_substitution for module induction01
#
void induction01(double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   int l = 10;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i-1+1;
      l = 2*i+12;
      for(j = 0; j <= SIZE-1; j += 1)
         A[i] = B[2*i+12][i]+A[i];
   }
}

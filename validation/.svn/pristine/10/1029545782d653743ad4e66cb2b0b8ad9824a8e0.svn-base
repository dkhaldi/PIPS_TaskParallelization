!
! File ARRAYS_host.h
! This file has been automatically generated by the HPF compiler
!
      COMMON /ARRAYS_HOST/ A(1:N, 1:M, 1:2), B(1:N), AVM
!
! That is all for ARRAYS_host.h
!
!
! File ARRAYS_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for ARRAYS
!
!
! initializing array A, number 2
!
      NODIMA(2) = 3
      ATOT(2) = 3

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 100
      RANGEA(2, 1, 3) = 100
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 50
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 77
      RANGEA(2, 2, 3) = 77
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 39
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      RANGEA(2, 3, 1) = 1
      RANGEA(2, 3, 2) = 2
      RANGEA(2, 3, 3) = 2
!
      RANGEA(2, 3, 4) = 0

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array B, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 3

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 100
      RANGEA(1, 1, 3) = 100
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 50
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 0
      ALIGN(1, 2, 2) = 0
      ALIGN(1, 2, 3) = 1
!
! That is all for ARRAYS_init.h
!
!
! File ARRAYS_node.h
! This file has been automatically generated by the HPF compiler
!
      COMMON /ARRAYS_NODE/ A(-1:50, 0:40, 1:2), B(1:50), AVM
!
! That is all for ARRAYS_node.h
!
!
! File ARRAYS_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for ARRAYS
!
      integer 
     $    ARRAYS A LO1,
     $    ARRAYS A UP1
      parameter(ARRAYS A LO1 = -1)
      parameter(ARRAYS A UP1 = 50)
      integer 
     $    ARRAYS A LO2,
     $    ARRAYS A UP2
      parameter(ARRAYS A LO2 = 0)
      parameter(ARRAYS A UP2 = 40)
      integer 
     $    ARRAYS A LO3,
     $    ARRAYS A UP3
      parameter(ARRAYS A LO3 = 1)
      parameter(ARRAYS A UP3 = 2)
      integer 
     $    ARRAYS B LO1,
     $    ARRAYS B UP1
      parameter(ARRAYS B LO1 = 1)
      parameter(ARRAYS B UP1 = 50)
!
! That is all for ARRAYS_parameters.h
!
!
! File COMPUTE_host.f
! This file has been automatically generated by the HPF compiler
!
      INTEGER*4 FUNCTION COMPUTE_HOST(IT)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "COMPUTE_parameters.h"
      INTEGER IT, COMPUTE, TIME, NEW, OLD
      REAL*8 AVM, AMIN
      include "ARRAYS_HOST_parameters.h"
      include "ARRAYS_HOST_host.h"
      PRINT *, 'COMPUTING ', IT, ' ITERATIONS'
      NEW = 2
      OLD = 1
      AVM = 0.0
      DO TIME = 1, IT
         AMIN = HRED 3 HPFC REAL8 MIN()
         AVM = AVM+AMIN
         OLD = NEW
         NEW = 3-NEW
      ENDDO
      AVM = AVM/IT
      COMPUTE_HOST = OLD
      END
!
! That is all for COMPUTE_host.f
!
!
! File COMPUTE_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for COMPUTE
!
!
! That is all for COMPUTE_init.h
!
!
! File COMPUTE_node.f
! This file has been automatically generated by the HPF compiler
!
      INTEGER*4 FUNCTION COMPUTE_NODE(IT)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "COMPUTE_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 M
      PARAMETER (M = 77)
      INTEGER I_10, I_11, I_12, I_5, I_6, I_7, I_8, I_9, IT, COMPUTE
     &, TIME, NEW, OLD
      REAL*8 A, AVM, AMIN
      include "ARRAYS_NODE_parameters.h"
      include "ARRAYS_NODE_node.h"
      CALL HPFC LOOP BOUNDS(I_10, I_11, I_12, 3, N, 2, 1)
      CALL HPFC LOOP BOUNDS(I_6, I_7, I_8, 2, M-1, 2, 2)
      NEW = 2
      OLD = 1
      AVM = 0.0
      DO TIME = 1, IT
! P(1, 2) send A(49:50, 1, X) to (+1)
         IF (MY POS(1,3).EQ.1.AND.MY POS(2,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      49, 50, 1, 1, 1, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 2) send A(1:48, 1, X) to (-1)
         IF (MY POS(2,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 1
     &      , 48, 1, 1, 1, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1, 1:2) send A(49:50, 2:39, X) to (+2)
         IF (MY POS(1,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      49, 50, 1, 2, 39, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1, 1) send A(50, 39, X) to (+3)
         IF (MY POS(1,3).EQ.1.AND.MY POS(2,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(3)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      50, 50, 1, 39, 39, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 1) send A(1:49, 39, X) to (+1)
         IF (MY POS(2,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 1
     &      , 49, 1, 39, 39, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1, 1:2) send A(50, 1:39, X) to (+2)
         IF (MY POS(1,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC REAL8 PACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      50, 50, 1, 1, 39, 1, OLD, OLD, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(2, 1) receive A(-1:0, 40, X) from (-1)
         IF (MY POS(1,3).EQ.2.AND.MY POS(2,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      -1, 0, 1, 40, 40, 1, OLD, OLD, 1)
         ENDIF
! P(1:2, 1) receive A(1:48, 40, X) from (+1)
         IF (MY POS(2,3).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 1
     &      , 48, 1, 40, 40, 1, OLD, OLD, 1)
         ENDIF
! P(2, 1:2) receive A(-1:0, 2:39, X) from (-2)
         IF (MY POS(1,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 
     &      -1, 0, 1, 2, 39, 1, OLD, OLD, 1)
         ENDIF
! P(2, 2) receive A(0, 0, X) from (-3)
         IF (MY POS(1,3).EQ.2.AND.MY POS(2,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-3)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 0
     &      , 0, 1, 0, 0, 1, OLD, OLD, 1)
         ENDIF
! P(1:2, 2) receive A(1:49, 0, X) from (-1)
         IF (MY POS(2,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 1
     &      , 49, 1, 0, 0, 1, OLD, OLD, 1)
         ENDIF
! P(2, 1:2) receive A(0, 1:39, X) from (-2)
         IF (MY POS(1,3).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(A, ARRAYS A LO1, ARRAYS A UP1, 
     &      ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, ARRAYS A UP3, 0
     &      , 0, 1, 1, 39, 1, OLD, OLD, 1)
         ENDIF
         DO I_5 = I_6, I_7
            DO I_9 = I_10, I_11
               A(I_9,I_5,NEW) = 0.25*(A(I_9,I_5,OLD)+A(I_9-1,I_5,OLD)
     &         +A(I_9-1,I_5-1,OLD)+A(I_9-2,I_5+1,OLD))
            ENDDO
         ENDDO
         AMIN = NRED 3 HPFC REAL8 MIN(A, 2, ARRAYS A LO1, 
     &   ARRAYS A UP1, ARRAYS A LO2, ARRAYS A UP2, ARRAYS A LO3, 
     &   ARRAYS A UP3, 3, N, 2, M-1, NEW, NEW)
         AVM = AVM+AMIN
         OLD = NEW
         NEW = 3-NEW
      ENDDO
      AVM = AVM/IT
      COMPUTE_NODE = OLD
      END
!
! That is all for COMPUTE_node.f
!
!
! File COMPUTE_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for COMPUTE
!
!
! That is all for COMPUTE_parameters.h
!
!
! File HPFTEST66_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST66_parameters.h"
      INTEGER*4 COMPUTE_HOST
      EXTERNAL COMPUTE_HOST
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER ITER, AGAIN, LAST
      CALL HPFC INIT HOST
      PRINT *, 'HPFTEST66 RUNNING'
c
c number of iterations
c
10    PRINT *, 'PLEASE ENTER THE NUMBER OF ITERATIONS (1-', N, ')'
      READ *, ITER
! updating shared variable ITER
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = ITER
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (ITER.LT.1.OR.ITER.GT.N) GOTO 10
c
c procedure calls
c
      CALL INIT_HOST
      LAST = COMPUTE_HOST(ITER)
      CALL OUTPUT_HOST(LAST)
c
c again ?
c
      PRINT *, 'AGAIN (0/1) ?'
      READ *, AGAIN
! updating shared variable AGAIN
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = AGAIN
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (AGAIN.EQ.1) GOTO 10
      PRINT *, 'HPFTEST66 ENDING'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST66_host.f
!
!
! File HPFTEST66_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST66
!
!
! That is all for HPFTEST66_init.h
!
!
! File HPFTEST66_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST66_parameters.h"
      INTEGER*4 COMPUTE_NODE
      EXTERNAL COMPUTE_NODE
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER ITER, AGAIN, LAST
      CALL HPFC INIT NODE
99999 CONTINUE
! updating shared variable ITER
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      ITER = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (ITER.LT.1.OR.ITER.GT.N) GOTO 99999
c
c procedure calls
c
      CALL INIT_NODE
      LAST = COMPUTE_NODE(ITER)
      CALL OUTPUT_NODE(LAST)
! updating shared variable AGAIN
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      AGAIN = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (AGAIN.EQ.1) GOTO 99999
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST66_node.f
!
!
! File HPFTEST66_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST66
!
!
! That is all for HPFTEST66_parameters.h
!
!
! File INIT_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE INIT_HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "INIT_parameters.h"
      include "ARRAYS_HOST_parameters.h"
      include "ARRAYS_HOST_host.h"
      PRINT *, 'INITIALIZING ARRAY A'
      END
!
! That is all for INIT_host.f
!
!
! File INIT_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for INIT
!
!
! That is all for INIT_init.h
!
!
! File INIT_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE INIT_NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "INIT_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 M
      PARAMETER (M = 77)
      INTEGER I_0, I_1, I_10, I_11, I_2, I_3, I_4, I_5, I_6, I_7, I_8
     &, I_9, I, J
      REAL*8 A, B, TMP
      include "ARRAYS_NODE_parameters.h"
      include "ARRAYS_NODE_node.h"
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, N, 1, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 2, 1)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, M, 2, 2)
      J = I_3
      DO I_0 = I_1, I_2
         J = J+1
         TMP = 7.84*J
         I = I_7
         DO I_4 = I_5, I_6
            I = I+1
            A(I_4,I_0,1) = TMP+3.14/4.2*I
         ENDDO
      ENDDO
      IF (MY POS(2,3).EQ.1) THEN
         I = I_11
         DO I_8 = I_9, I_10
            I = I+1
            B(I_8) = 78.0/I
         ENDDO
      ENDIF
      END
!
! That is all for INIT_node.f
!
!
! File INIT_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for INIT
!
!
! That is all for INIT_parameters.h
!
!
! File OUTPUT_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OUTPUT_HOST(LAST)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OUTPUT_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 77)
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 M
      PARAMETER (M = 77)
      INTEGER ALPHA1, ALPHA2, ALPHA3, LALPHA1, LALPHA2, LALPHA3, PSI1
     &, PSI2, T LID, LAST, I, UP
      REAL*8 A, AVM
      include "ARRAYS_HOST_parameters.h"
      include "ARRAYS_HOST_host.h"
      UP = MIN(N, M)
      PRINT *, 'average min is ', AVM
! collecting distributed variable A
      IF (1.LE.LAST.AND.LAST.LE.2) THEN
         DO PSI1 = 1, 2
            DO PSI2 = PSI1, 2
               BUF INDEX = 0
               RECEIVED NOT PERFORMED = .FALSE.
               SIZE OF RECEIVED BUFFER = 0
               T LID = 2*PSI1+PSI2-2
               CALL HPFC RCV FROM NODE(T LID)
               CALL HPFC REAL8 BUFUPK
               DO ALPHA2 = MAX(39*PSI2-38, 50*PSI1-49), MIN(77, 39*
     &         PSI2, 50*PSI1)
                  ALPHA3 = LAST
                  ALPHA1 = ALPHA2
                  LALPHA1 = ALPHA1-50*PSI1+50
                  LALPHA2 = ALPHA2-39*PSI2+39
                  LALPHA3 = ALPHA3
                  BUF INDEX = BUF INDEX+1
                  A(ALPHA1,ALPHA2,ALPHA3) = HPFC REAL8 BUFF(BUF INDEX
     &            )
               ENDDO
            ENDDO
         ENDDO
      ENDIF
! end of collect
      PRINT *, (A(I,I,LAST), I = 1, UP)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      END
!
! That is all for OUTPUT_host.f
!
!
! File OUTPUT_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for OUTPUT
!
!
! That is all for OUTPUT_init.h
!
!
! File OUTPUT_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OUTPUT_NODE(LAST)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OUTPUT_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 M
      PARAMETER (M = 77)
      INTEGER ALPHA1, ALPHA2, ALPHA3, LALPHA1, LALPHA2, LALPHA3, PSI1
     &, PSI2, LAST, I, UP
      REAL*8 A
      include "ARRAYS_NODE_parameters.h"
      include "ARRAYS_NODE_node.h"
      UP = MIN(N, M)
! collecting distributed variable A
      IF (1.LE.LAST.AND.LAST.LE.2) THEN
         PSI1 = MY POS(1,3)
         PSI2 = MY POS(2,3)
         IF (PSI1.LE.PSI2) THEN
            BUF INDEX = 0
            SEND NOT INITIALIZED = .TRUE.
            DO ALPHA2 = MAX(39*PSI2-38, 50*PSI1-49), MIN(77, 39*PSI2
     &      , 50*PSI1)
               ALPHA3 = LAST
               ALPHA1 = ALPHA2
               LALPHA1 = ALPHA1-50*PSI1+50
               LALPHA2 = ALPHA2-39*PSI2+39
               LALPHA3 = ALPHA3
               BUF INDEX = BUF INDEX+1
               HPFC REAL8 BUFF(BUF INDEX) = A(LALPHA1,LALPHA2,LALPHA3
     &         )
            ENDDO
            CALL HPFC REAL8 BUFPCK
            CALL HPFC SND TO HOST
         ENDIF
      ENDIF
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      END
!
! That is all for OUTPUT_node.f
!
!
! File OUTPUT_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for OUTPUT
!
!
! That is all for OUTPUT_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 100
      RANGET(1, 1, 3) = 100

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 77
      RANGET(1, 2, 3) = 77

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 50
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 39
!
! initializing template T, number 2
!
      NODIMT(2) = 2
      TTOP(2) = 2

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 100
      RANGET(2, 1, 3) = 100

      RANGET(2, 2, 1) = 1
      RANGET(2, 2, 2) = 77
      RANGET(2, 2, 3) = 77

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 50
      DIST(2, 2, 1) = 2
      DIST(2, 2, 2) = 39
!
! initializing template T, number 3
!
      NODIMT(3) = 2
      TTOP(3) = 3

      RANGET(3, 1, 1) = 1
      RANGET(3, 1, 2) = 100
      RANGET(3, 1, 3) = 100

      RANGET(3, 2, 1) = 1
      RANGET(3, 2, 2) = 77
      RANGET(3, 2, 3) = 77

      DIST(3, 1, 1) = 1
      DIST(3, 1, 2) = 50
      DIST(3, 2, 1) = 2
      DIST(3, 2, 2) = 39
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! initializing processors P, number 2
!
      NODIMP(2) = 2

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 2
      RANGEP(2, 1, 3) = 2

      RANGEP(2, 2, 1) = 1
      RANGEP(2, 2, 2) = 2
      RANGEP(2, 2, 3) = 2
!
! initializing processors P, number 3
!
      NODIMP(3) = 2

      RANGEP(3, 1, 1) = 1
      RANGEP(3, 1, 2) = 2
      RANGEP(3, 1, 3) = 2

      RANGEP(3, 2, 1) = 1
      RANGEP(3, 2, 2) = 2
      RANGEP(3, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 3)
      parameter(REALNBOFPROCESSORS = 3)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

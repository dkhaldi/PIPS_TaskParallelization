original code
void P4A_accel_free(void *ptr)
{
   free(ptr);
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void P4A_copy_from_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   char *csrc = accel_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = d1_offset*element_size+(char *) host_address;
   char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = host_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = d1_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
void erode(int isi, int isj, int new_image[isi][isj], int image[isi][isj])
{

   int i, j, k, l;
   for(l = 0; l <= 4; l += 1)

      for(i = 2; i <= isi-3; i += 1)
         for(j = 2; j <= isj-3; j += 1) {
            int l = image[i][j];
            for(k = 0; k <= 4; k += 1)
               l = MIN(l, image[i][j+k-1]);
            new_image[i][j] = l;
         }
}
int main(int argc, char **argv)
{
   int image_size = atoi(argv[1]);
   if (image_size>5) {
      int (*image)[image_size][image_size];
      int (*new_image)[image_size][image_size];
      int i, j, k, n;
      image = (int (*)[image_size][image_size]) malloc(sizeof(int)*image_size*image_size);
      new_image = (int (*)[image_size][image_size]) malloc(sizeof(int)*image_size*image_size);
      for(i = 0; i <= image_size-1; i += 1)
         for(j = 0; j <= image_size-1; j += 1)
            ((*new_image)[i])[j] = i*j;

      for(k = 0; k <= 2; k += 1) {
         erode(image_size, image_size, *new_image, *image);
         erode(image_size, image_size, *image, *new_image);
      }

      for(i = 0; i <= image_size-1; i += 1)
         printf("%f ", ((*image)[i])[i]);
      free(image);
      free(new_image);
   }

   return 0;
}
with r-w regions

//  <image[PHI1][PHI2]-R-EXACT-{2<=PHI1, PHI1+3<=isi, 1<=PHI2,
//    PHI2<=isj, isi==isj}>
//  <new_image[PHI1][PHI2]-W-EXACT-{2<=PHI1, PHI1+3<=isi, 2<=PHI2,
//    PHI2+3<=isj, isi==isj}>

void erode(int isi, int isj, int new_image[isi][isj], int image[isi][isj])
{

   int i, j, k, l;

//  <image[PHI1][PHI2]-R-EXACT-{2<=PHI1, PHI1+3<=isi, 1<=PHI2,
//    PHI2<=isj, isi==isj}>
//  <new_image[PHI1][PHI2]-W-EXACT-{2<=PHI1, PHI1+3<=isi, 2<=PHI2,
//    PHI2+3<=isj, isi==isj}>

   for(l = 0; l <= 4; l += 1)

//  <image[PHI1][PHI2]-R-EXACT-{2<=PHI1, PHI1+3<=isi, 1<=PHI2,
//    PHI2<=isj, isi==isj, 0<=0`l, 0`l<=4}>
//  <new_image[PHI1][PHI2]-W-EXACT-{2<=PHI1, PHI1+3<=isi, 2<=PHI2,
//    PHI2+3<=isj, isi==isj, 0<=0`l, 0`l<=4}>


      for(i = 2; i <= isi-3; i += 1)

//  <image[PHI1][PHI2]-R-EXACT-{PHI1==i, 2<=PHI1, PHI1+3<=isj,
//    1<=PHI2, PHI2<=isj, isi==isj, 0<=0`l, 0`l<=4, 5<=isj}>
//  <new_image[PHI1][PHI2]-W-EXACT-{PHI1==i, 2<=PHI2, PHI2+3<=isj,
//    isi==isj, 2<=i, i+3<=isi, 0<=0`l, 0`l<=4}>

         for(j = 2; j <= isj-3; j += 1) {

//  <image[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, isi==isj, 2<=i,
//    i+3<=isi, 2<=j, j+3<=isi, 0<=0`l, 0`l<=4}>

            int l = image[i][j];

//  <image[PHI1][PHI2]-R-EXACT-{PHI1==i, j<=PHI2+1, PHI2<=j+3,
//    isi==isj, 2<=i, i+3<=isi, 2<=j, j+3<=isi, 0<=0`l, 0`l<=4}>

            for(k = 0; k <= 4; k += 1)

//  <image[PHI1][PHI2]-R-EXACT-{PHI1==i, j+k==PHI2+1, isi==isj, 2<=i,
//    i+3<=isi, 2<=j, j+3<=isi, 0<=k, k<=4, 0<=0`l, 0`l<=4}>

               l = MIN(l, image[i][j+k-1]);

//  <new_image[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, k==5, isi==isj,
//    2<=i, i+3<=isi, 2<=j, j+3<=isi, 0<=0`l, 0`l<=4}>

            new_image[i][j] = l;
         }
}
isolated code
void erode(int isi, int isj, int new_image[isi][isj], int image[isi][isj])
{

   int i, j, k, l;
   {
      //PIPS generated variable
      int (*new_image0)[isi-5+1][isj-5+1] = (int (*)[isi-5+1][isj-5+1]) 0, (*image0)[isi-5+1][isj] = (int (*)[isi-5+1][isj]) 0;
      if (isi-5>0&&isj-5>0&&isi-5>0&&isj-1>0) {
         P4A_accel_malloc((void **) &image0, sizeof(int)*(isi-4)*isj);
         P4A_accel_malloc((void **) &new_image0, sizeof(int)*(isi-4)*(isj-4));
         P4A_copy_to_accel_2d(sizeof(int), isi, isj, isi-4, isj, 2, 1, &image[0][0], *image0);

l99996:
         for(l = 0; l <= 4; l += 1)

l99997:
            for(i = 2; i <= isi-3; i += 1)
l99998:
               for(j = 2; j <= isj-3; j += 1) {
                  int l = (*image0)[i-2][j-1];
l99999:
                  for(k = 0; k <= 4; k += 1)
                     l = MIN(l, (*image0)[i-2][j+k-1-1]);
                  (*new_image0)[i-2][j-2] = l;
               }
         P4A_copy_from_accel_2d(sizeof(int), isi, isj, isi-4, isj-4, 2, 2, &new_image[0][0], *new_image0);
         P4A_accel_free(image0);
         P4A_accel_free(new_image0);
      }
   }
}


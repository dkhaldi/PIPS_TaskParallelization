!
! File HPFTEST24_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST24_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, T LID, I
      INTEGER J(1:10)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest24 running'
! collecting distributed variable J
      DO PSI1 = 1, 3
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO ALPHA1 = -2+7*PSI1/2, MIN(10, (7*PSI1+1)/2)
            LALPHA1 = ALPHA1+HPFC DIVIDE(-7*PSI1+7, 2)
            BUF INDEX = BUF INDEX+1
            J(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      DO I = 1, 10
         PRINT *, 'j(', I, ') = ', J(I)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      PRINT *, 'hpftest24 ended'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST24_host.f
!
!
! File HPFTEST24_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST24
!
!
! initializing array J, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 7
      RANGEA(1, 1, 6) = 2
      RANGEA(1, 1, 7) = -2

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 2
      ALIGN(1, 1, 3) = -1
!
! That is all for HPFTEST24_init.h
!
!
! File HPFTEST24_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST24_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, I_1, I_11, I_12, I_3, I_4, I_6, 
     &I_7, I_9, I_10, I_8, I_5, I_2, I_0, I, K, D
      INTEGER J(1:4)
      CALL HPFC INIT NODE
      DO I = 1, 10
         CALL HPFC CMPCOMPUTER(1, I, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            I_0 = I
            I_1 = MOD(2*I-2, 7)/2+1
            J(I_1) = I_0
         ENDIF
      ENDDO
      DO I = 1, 5
         K = 11-I
         CALL HPFC CMPCOMPUTER(1, K, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            CALL HPFC CMPOWNERS(1, K, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_3 = MOD(2*K-2, 7)/2+1
               I_2 = J(I_3)
            ELSE
               CALL HPFC RCVFR S(HPFC INTEGER4, I_2)
            ENDIF
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_6 = MOD(2*I-2, 7)/2+1
               I_5 = J(I_6)
            ELSE
               CALL HPFC RCVFR S(HPFC INTEGER4, I_5)
            ENDIF
            D = I_5
            I_10 = I_2
            I_8 = D
            I_9 = MOD(2*K-2, 7)/2+1
            J(I_9) = I_8
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_11 = MOD(2*I-2, 7)/2+1
               J(I_11) = I_10
            ELSE
               CALL HPFC SNDTO O(HPFC INTEGER4, I_10)
            ENDIF
         ELSE
            CALL HPFC CMPOWNERS(1, K, 0, 0, 0, 0, 0, 0)
            IF (HPFC SENDERP()) THEN
               I_4 = MOD(2*K-2, 7)/2+1
               CALL HPFC SNDTO C(HPFC INTEGER4, J(I_4))
            ENDIF
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC SENDERP()) THEN
               I_7 = MOD(2*I-2, 7)/2+1
               CALL HPFC SNDTO C(HPFC INTEGER4, J(I_7))
            ENDIF
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_12 = MOD(2*I-2, 7)/2+1
               CALL HPFC RCVFR C(HPFC INTEGER4, J(I_12))
            ENDIF
         ENDIF
      ENDDO
! collecting distributed variable J
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA1 = -2+7*PSI1/2, MIN(10, (7*PSI1+1)/2)
         LALPHA1 = ALPHA1+HPFC DIVIDE(-7*PSI1+7, 2)
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = J(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST24_node.f
!
!
! File HPFTEST24_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST24
!
      integer 
     $    HPFTEST24 J LO1,
     $    HPFTEST24 J UP1
      parameter(HPFTEST24 J LO1 = 1)
      parameter(HPFTEST24 J UP1 = 4)
!
! That is all for HPFTEST24_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 20
      RANGET(1, 1, 3) = 20

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 7
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 3
      RANGEP(1, 1, 3) = 3
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 1)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 3)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

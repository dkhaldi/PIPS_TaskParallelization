
Transformers for "slope01"


//  T() {}

void slope01()
{

//  T() {}

   int x, y, k;

//  T() {0<=x, x<=10}

   
   /* create a bounding box */
   // assert(0<=x && x<=10 && 0<=y && 0<=10);
   if (!(0<=x&&x<=10))

//  T() {0==-1}

      abort();

//  T(k) {}

   
   /* Define a horizontal constraint that is slightly increasing in
      * rationals.  It links point (-1, 5) to point(11,6), 12y=x+61. It
      * should be simplified into y<=5.
      *
      * Problem for testing: the redundancy elimination kill one of the
      * bounding box inequalities... The analysis was wrong: you do not
      * need a bounding box but simply bounds for the x dimension if the
      * y coefficient is large and vice versa.
      */
   if (-x+12*y-61<=0)

//  T(k) {x+y==k}

      k = x+y;

//  T() {}

   return;
}

Preconditions for "slope01"


//  P() {}

void slope01()
{

//  P() {}

   int x, y, k;

//  P() {}

   
   /* create a bounding box */
   // assert(0<=x && x<=10 && 0<=y && 0<=10);
   if (!(0<=x&&x<=10))

//  P() {}

      abort();

//  P() {0<=x, x<=10}

   
   /* Define a horizontal constraint that is slightly increasing in
      * rationals.  It links point (-1, 5) to point(11,6), 12y=x+61. It
      * should be simplified into y<=5.
      *
      * Problem for testing: the redundancy elimination kill one of the
      * bounding box inequalities... The analysis was wrong: you do not
      * need a bounding box but simply bounds for the x dimension if the
      * y coefficient is large and vice versa.
      */
   if (-x+12*y-61<=0)

//  P() {0<=x, x<=10, y<=5}

      k = x+y;

//  P(k) {0<=x, x<=10}

   return;
}

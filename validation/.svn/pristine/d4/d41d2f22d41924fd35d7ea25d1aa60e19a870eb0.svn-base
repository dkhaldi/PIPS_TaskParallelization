!
! File DESCRIPTIVE_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DESCRIPTIVE_parameters.h"
      CALL HPFC INIT HOST
      CALL INIT_HOST
      CALL OUTPUT_HOST
      CALL HPFC HOST END
      END
!
! That is all for DESCRIPTIVE_host.f
!
!
! File DESCRIPTIVE_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for DESCRIPTIVE
!
!
! initializing array A1, number 3
!
      NODIMA(3) = 1
      ATOT(3) = 3

      MSTATUS(3) = 3
      LIVEMAPPING(3) = .TRUE.

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 100
      RANGEA(3, 1, 3) = 100
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 25
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
!
! That is all for DESCRIPTIVE_init.h
!
!
! File DESCRIPTIVE_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DESCRIPTIVE_parameters.h"
      INTEGER A1(1:25)
      CALL HPFC INIT NODE
! all livenesss for A1
      LIVE MAPPING(3) = .FALSE.
! begin remappings
      MSTATUS(3) = 3
! liveness management
! end of liveness management
! end remappings
      CALL INIT_NODE(A1, DESCRIPTIVE A1 LO1, DESCRIPTIVE A1 UP1)
! begin remappings
! liveness management
! end of liveness management
! end remappings
! begin remappings
      MSTATUS(3) = 3
! liveness management
! end of liveness management
! end remappings
      CALL OUTPUT_NODE(A1, DESCRIPTIVE A1 LO1, DESCRIPTIVE A1 UP1)
! begin remappings
! liveness management
! end of liveness management
! end remappings
      CALL HPFC NODE END
      END
!
! That is all for DESCRIPTIVE_node.f
!
!
! File DESCRIPTIVE_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for DESCRIPTIVE
!
      integer 
     $    DESCRIPTIVE A1 LO1,
     $    DESCRIPTIVE A1 UP1
      parameter(DESCRIPTIVE A1 LO1 = 1)
      parameter(DESCRIPTIVE A1 UP1 = 25)
!
! That is all for DESCRIPTIVE_parameters.h
!
!
! File INIT_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE INIT_HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "INIT_parameters.h"
      END
!
! That is all for INIT_host.f
!
!
! File INIT_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for INIT
!
!
! initializing array A, number 2
!
      NODIMA(2) = 1
      ATOT(2) = 2

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 100
      RANGEA(2, 1, 3) = 100
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 25
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
!
! That is all for INIT_init.h
!
!
! File INIT_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE INIT_NODE(A, INIT A LO1, INIT A UP1)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "INIT_parameters.h"
      INTEGER I_0, I_1, I_2, I_3, INIT A UP1, INIT A LO1, I
      INTEGER A(INIT A LO1:INIT A UP1)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, 100, 2, 1)
      I = I_3
      DO I_0 = I_1, I_2
         I = I+1
         A(I_0) = I
      ENDDO
      END
!
! That is all for INIT_node.f
!
!
! File INIT_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for INIT
!
!
! That is all for INIT_parameters.h
!
!
! File OUTPUT_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OUTPUT_HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OUTPUT_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, T LID, I
      INTEGER A(1:100)
! collecting distributed variable A
      PSI1 = 2
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = PSI1
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC INTEGER4 BUFUPK
      DO ALPHA1 = 45, 50
         LALPHA1 = ALPHA1-25
         BUF INDEX = BUF INDEX+1
         A(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
      ENDDO
! end of collect
      PRINT *, (A(I), I = 45, 50)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      END
!
! That is all for OUTPUT_host.f
!
!
! File OUTPUT_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for OUTPUT
!
!
! initializing array A, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 100
      RANGEA(1, 1, 3) = 100
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 25
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for OUTPUT_init.h
!
!
! File OUTPUT_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OUTPUT_NODE(A, OUTPUT A LO1, OUTPUT A UP1)
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OUTPUT_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, OUTPUT A UP1, OUTPUT A LO1, I
      INTEGER A(OUTPUT A LO1:OUTPUT A UP1)
! collecting distributed variable A
      PSI1 = MY POS(1,1)
      IF (PSI1.EQ.2) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA1 = 45, 50
            LALPHA1 = ALPHA1-25
            BUF INDEX = BUF INDEX+1
            HPFC INTEGER4 BUFF(BUF INDEX) = A(LALPHA1)
         ENDDO
         CALL HPFC INTEGER4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      END
!
! That is all for OUTPUT_node.f
!
!
! File OUTPUT_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for OUTPUT
!
!
! That is all for OUTPUT_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template A, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 100
      RANGET(1, 1, 3) = 100

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 25
!
! initializing template A, number 2
!
      NODIMT(2) = 1
      TTOP(2) = 2

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 100
      RANGET(2, 1, 3) = 100

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 25
!
! initializing template A1, number 3
!
      NODIMT(3) = 1
      TTOP(3) = 3

      RANGET(3, 1, 1) = 1
      RANGET(3, 1, 2) = 100
      RANGET(3, 1, 3) = 100

      DIST(3, 1, 1) = 1
      DIST(3, 1, 2) = 25
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 4
      RANGEP(1, 1, 3) = 4
!
! initializing processors P, number 2
!
      NODIMP(2) = 1

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 4
      RANGEP(2, 1, 3) = 4
!
! initializing processors P, number 3
!
      NODIMP(3) = 1

      RANGEP(3, 1, 1) = 1
      RANGEP(3, 1, 2) = 4
      RANGEP(3, 1, 3) = 4
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 3)
      parameter(REALNBOFTEMPLATES = 3)
      parameter(REALNBOFPROCESSORS = 3)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!


Points-to for "testResult"


// Points To IN:
// a -> *NULL* , MAY
// a -> _a_5[0] , MAY
// b -> *NULL* , MAY
// b -> _b_6[0] , MAY
// filenameIn -> *NULL* , MAY
// filenameIn -> _filenameIn_3[0] , MAY


// Points To OUT:
// a -> _a_5[0] , EXACT
// b -> _b_6[0] , EXACT
// filenameIn -> _filenameIn_3[0] , EXACT

int testResult(int x, float2 tab[x], char *filenameIn, char *fileNameOut, int *a, int *b, int c)
{
   //FILE *fichierIn , *fichierOut;

// Points To: none

   char abc[30];

// Points To: none

   char destination[40] = "";

// Points To:
// a -> *NULL* , MAY
// a -> _a_5[0] , MAY
// b -> *NULL* , MAY
// b -> _b_6[0] , MAY

   sprintf(abc, "%d%d%d.txt", *a, *b, c);

// Points To:
// a -> _a_5[0] , EXACT
// b -> _b_6[0] , EXACT
// filenameIn -> *NULL* , MAY
// filenameIn -> _filenameIn_3[0] , MAY

   strcat(destination, filenameIn);

// Points To:
// a -> _a_5[0] , EXACT
// b -> _b_6[0] , EXACT
// filenameIn -> _filenameIn_3[0] , EXACT

   //strcat(destination, abc);
   //fichierIn = fopen(destination, "r");
   return 0;
}

Points-to for "init"


// Points To IN:
// a -> *NULL* , MAY
// a -> _a_2[0] , MAY
// b -> *NULL* , MAY
// b -> _b_3[0] , MAY
// c -> *NULL* , MAY
// c -> _c_4[0] , MAY


// Points To OUT:
// a -> _a_2[0] , EXACT
// b -> _b_3[0] , EXACT
// c -> _c_4[0] , EXACT

void init(float2 Sig[256], int *a, int *b, int *c)
{

// Points To: none

   int n;

// Points To: none

   for(n = 0; n <= 255; n += 1) {

// Points To: none

      Sig[n].re = 0.0f;

// Points To: none

      Sig[n].im = 0.0f;
   }

// Points To:
// a -> *NULL* , MAY
// a -> _a_2[0] , MAY

   *a = -3;

// Points To:
// a -> _a_2[0] , EXACT
// b -> *NULL* , MAY
// b -> _b_3[0] , MAY

   *b = -2;

// Points To:
// a -> _a_2[0] , EXACT
// b -> _b_3[0] , EXACT
// c -> *NULL* , MAY
// c -> _c_4[0] , MAY

   *c = -2;

// Points To:
// a -> _a_2[0] , EXACT
// b -> _b_3[0] , EXACT
// c -> _c_4[0] , EXACT

   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   init(T0, &a, &b, &c);

// Points To: none

   testResult(256, T0, "m", "test.txt", &a, &b, c);

// Points To: none

   return 0;
}

Proper effects for "testResult"

int testResult(int x, float2 tab[x], char *filenameIn, char *fileNameOut, int *a, int *b, int c)
{
   //FILE *fichierIn , *fichierOut;
//             <    is declared>: abc
   char abc[30];
//             <may be written>: destination[*]
//             <    is declared>: destination
   char destination[40] = "";
//             <may be written>: abc[*]
//             <    is read   >: _a_5[0] _b_6[0] a b c
//             <    is referenced>: a abc b c
   sprintf(abc, "%d%d%d.txt", *a, *b, c);
//             <may be read   >: _filenameIn_3[*]
//             <may be written>: destination[*]
//             <    is read   >: filenameIn
//             <    is referenced>: destination filenameIn
   strcat(destination, filenameIn);
   //strcat(destination, abc);
   //fichierIn = fopen(destination, "r");
   return 0;
}

Transformers for "testResult"


//  T(testResult) {testResult==0}

int testResult(int x, float2 tab[x], char *filenameIn, char *fileNameOut, int *a, int *b, int c)
{
   //FILE *fichierIn , *fichierOut;

//  T() {}

   char abc[30];

//  T() {}

   char destination[40] = "";

//  T() {}

   sprintf(abc, "%d%d%d.txt", *a, *b, c);

//  T() {}

   strcat(destination, filenameIn);

//  T(testResult) {testResult==0}

   //strcat(destination, abc);
   //fichierIn = fopen(destination, "r");
   return 0;
}

Transformers for "init"


//  T(_a_2[0],_b_3[0],_c_4[0]) {_a_2[0]==-3, _b_3[0]==-2, _c_4[0]==-2}

void init(float2 Sig[256], int *a, int *b, int *c)
{

//  T() {}

   int n;

//  T(n) {0<=n, n<=255}

   for(n = 0; n <= 255; n += 1) {

//  T() {}

      Sig[n].re = 0.0f;

//  T() {}

      Sig[n].im = 0.0f;
   }

//  T(_a_2[0]) {_a_2[0]==-3}

   *a = -3;

//  T(_b_3[0]) {_b_3[0]==-2}

   *b = -2;

//  T(_c_4[0]) {_c_4[0]==-2}

   *c = -2;

//  T() {}

   return;
}

Transformers for "main"


//  T(a,b,c,main) {a==-3, b==-2, c==-2, main==0}

int main()
{

//  T(a,b,c) {a==-3, b==-2, c==-2}

   init(T0, &a, &b, &c);

//  T() {}

   testResult(256, T0, "m", "test.txt", &a, &b, c);

//  T(main) {main==0}

   return 0;
}

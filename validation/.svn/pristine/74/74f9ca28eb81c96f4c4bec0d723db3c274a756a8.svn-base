      INTEGER FUNCTION FUN1(I)
      INTEGER I
      FUN1 = 3                                                          0003
      END
      PROGRAM MAIN
      INTEGER I, FUN1
      EXTERNAL FUN1
      I = 1                                                             0004
      IF (I.EQ.1) THEN                                                  0005
         I = 2                                                          0006
      ELSE
         I = 3                                                          0008
      ENDIF
      CALL SUB(I, 10)                                                   0010
      CALL SUB2(10, 20)                                                 0011
      CALL SUB3                                                         0012
      I = FUN1(2)                                                       0013
      END
      SUBROUTINE SUB(J, K)
      INTEGER I
      PARAMETER (N=10)
      REAL*8 A(0:N)
      DO I = 0, K                                                       0005
         A(I) = 0                                                       0006
      ENDDO
      CALL SUB4(A)                                                      0008
      END
      SUBROUTINE SUB2(N, M)
      REAL*4 B(0:10,0:20)
      INTEGER I,J
      DO I = 0, M                                                       0004
         DO J = 0, N                                                    0005
            B(J,I) = I+J                                                0006
         ENDDO
      ENDDO
      END
      SUBROUTINE SUB3
      PARAMETER (N=2, M=3)
      INTEGER I, FUN1
      EXTERNAL FUN1
      I = N+M                                                           0005
      DO WHILE (I.GT.0)                                                 0006
         I = I-1                                                        0007
         I = I-FUN1(0)                                                  0008
      ENDDO
      END
      SUBROUTINE SUB4(A)
      PARAMETER (N=10)
      INTEGER I
      REAL*8 A(0:N)
      REAL*8 B(0:N)
      DO I = 0, N                                                       0006
         B(I) = A(I)                                                    0007
      ENDDO
      DO I = 1, N-1                                                     0009
         A(I) = 0.25*(B(I-1)+2*B(I)+B(I+1))                             0010
      ENDDO
      END
/* C pretty print for module FUN1. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

int
fun1 (int *i_p4a_copy)
{
  int result;
  int i = *i_p4a_copy;

  result = 3;
  return result;
}
/* C pretty print for module MAIN. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

int
main (int argc, char *argv[])
{
  int i;

  i = 1;
  if (i == 1)
    {
      i = 2;
    }
  else
    {
      i = 3;
    }
  sub (&i, 10);
  sub2 (10, 20);
  sub3 ();
  i = fun1 (2);
  return 0;
}
/* C pretty print for module SUB. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
sub (int *j_p4a_copy, int *k_p4a_copy)
{
  int i;
  static const int n = 10;
  double a[11];
  int j = *j_p4a_copy;
  int k = *k_p4a_copy;

  for (i = 0; i <= k; i++)
    {
      a[i] = 0;
    }
  sub4 (a);
  return;
}
/* C pretty print for module SUB2. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
sub2 (int *n_p4a_copy, int *m_p4a_copy)
{
  float b[21][11];
  int i;
  int j;
  int n = *n_p4a_copy;
  int m = *m_p4a_copy;

  for (i = 0; i <= m; i++)
    {
      for (j = 0; j <= n; j++)
	{
	  b[i][j] = (i + j);
	}
    }
  return;
}
/* C pretty print for module SUB3. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
sub3 (void)
{
  static const int n = 2;
  static const int m = 3;
  int i;

  i = (n + m);
  while (i > 0)
    {
      i = (i - 1);
      i = (i - fun1 (0));
    }
  return;
}
/* C pretty print for module SUB4. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
sub4 (double a[11])
{
  static const int n = 10;
  int i;
  double b[11];

  for (i = 0; i <= n; i++)
    {
      b[i] = a[i];
    }
  for (i = 1; i <= n - 1; i++)
    {
      a[i] = (0.25 * ((b[i - 1] + (2 * b[i])) + b[i + 1]));
    }
  return;
}


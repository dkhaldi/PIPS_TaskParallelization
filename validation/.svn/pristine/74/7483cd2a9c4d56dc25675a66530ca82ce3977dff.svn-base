void compute()
{
   int i, j;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
        could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)
         save[i][j] = 0.25*(space[i-1][j]+space[i+1][j]+space[i][j-1]+space[i][j+1]);
   for(i = 1; i <= 62; i += 1)
      for(j = 1; j <= 62; j += 1)
         space[i][j] = 0.25*(save[i-1][j]+save[i+1][j]+save[i][j-1]+save[i][j+1]);
}
void get_data(char filename[])
{
   int i, j, nx, ny;
   unsigned char c;
   FILE *fp;

   if ((fp = fopen(filename, "r"))==(void *) 0) {
      perror("Error loading file");
      exit(0);
   }
   
   /* Get *.pgm file type */
   c = fgetc(fp);
   c = fgetc(fp);
   do {
      while ((c = fgetc(fp))!='\n')
         ;
   }
   while ((c = fgetc(fp))=='#');
   
   /* Put back good char */
   ungetc(c, fp);
   
   /* Get image dimensions */
   fscanf(fp, "%d %d\n", &nx, &ny);
   /* Get grey levels */
   fscanf(fp, "%d", &i);
   /* Get ONE carriage return */
   fgetc(fp);
   printf("Input image  : x=%d y=%d grey=%d\n", nx, ny, i);
   
   
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         c = fgetc(fp);
         space[i][j] = c;
      }

   fclose(fp);
}
int main(int argc, char *argv[])
{
   int t;

   if (argc!=2) {
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);
      exit(0);
   }
   get_data(argv[1]);

   for(t = 0; t <= 63; t += 1)
      compute();

   write_data("output.pgm");

   return 0;
}
void write_data(char filename[])
{
   int i, j;
   unsigned char c;
   FILE *fp;

   if ((fp = fopen(filename, "w"))==(void *) 0) {
      perror("Error opening file");
      exit(0);
   }
   
   /* Write the PGM header: */
   fprintf(fp, "P5\n%d %d\n255\n", 64, 64);

   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         c = space[i][j];
         fputc(c, fp);
      }
   fclose(fp);
}
void compute()
{
   int i, j;
kernel1:   launch_kernel1(save, space);
#pragma omp parallel for private(j)
   for(i = 1; i <= 62; i += 1)
#pragma omp parallel for 
      for(j = 1; j <= 62; j += 1)
         space[i][j] = 0.25*(save[i-1][j]+save[i+1][j]+save[i][j-1]+save[i][j+1]);
}
void get_data(char filename[])
{
   int i, j, nx, ny;
   unsigned char c;
   FILE *fp;

   if ((fp = fopen(filename, "r"))==(void *) 0) {
      perror("Error loading file");
      exit(0);
   }
   
   /* Get *.pgm file type */
   c = fgetc(fp);
   c = fgetc(fp);
   do {
      while ((c = fgetc(fp))!='\n')
         ;
   }
   while ((c = fgetc(fp))=='#');
   
   /* Put back good char */
   ungetc(c, fp);
   
   /* Get image dimensions */
   fscanf(fp, "%d %d\n", &nx, &ny);
   /* Get grey levels */
   fscanf(fp, "%d", &i);
   /* Get ONE carriage return */
   fgetc(fp);
   printf("Input image  : x=%d y=%d grey=%d\n", nx, ny, i);
   
   
   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         c = fgetc(fp);
         space[i][j] = c;
      }

   fclose(fp);
}
void kernel1(float_t save[64][64], float_t space[64][64], int i)
{
   // Declared by Pass Outlining
   int j;
   for(j = 1; j <= 62; j += 1)
      save[i][j] = 0.25*(space[i-1][j]+space[i+1][j]+space[i][j-1]+space[i][j+1]);
}
void launch_kernel1(float_t save[64][64], float_t space[64][64])
{
   // Declared by Pass Outlining
   int i;
   
   /* Use 2 array in flip-flop to have dataparallel forall semantics. I
           could use also a flip-flop dimension instead... */
kernel1:
   for(i = 1; i <= 62; i += 1)
      kernel1(save, space, i);
}
int main(int argc, char *argv[])
{
   int t;

   if (argc!=2) {
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);
      exit(0);
   }
   get_data(argv[1]);

   for(t = 0; t <= 63; t += 1)
      compute();

   write_data("output.pgm");

   return 0;
}
void write_data(char filename[])
{
   int i, j;
   unsigned char c;
   FILE *fp;

   if ((fp = fopen(filename, "w"))==(void *) 0) {
      perror("Error opening file");
      exit(0);
   }
   
   /* Write the PGM header: */
   fprintf(fp, "P5\n%d %d\n255\n", 64, 64);

   for(i = 0; i <= 63; i += 1)
      for(j = 0; j <= 63; j += 1) {
         c = space[i][j];
         fputc(c, fp);
      }
   fclose(fp);
}

Code after cleanup

int main(int argc, char *argv[])
{
   int t;

   if (argc!=2) {
      fprintf(stderr, "%s needs only one argument that is the PGM image input file\n", argv[0]);
      exit(0);
   }
   get_data(argv[1]);

   for(t = 0; t <= 63; t += 1)
      compute();

   write_data("output.pgm");

   return 0;
}

Unsplit resulting code


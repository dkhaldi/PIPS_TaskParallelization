C     Initially from renault.f. The bug was SQRT(SQRT(X)) in an expression.
C     Modified to get rid of subroutines and functions

      SUBROUTINE RINPUT
c  
c
c - MODIFICATION CONCERNANT LA LECTURE DE LA VARIABLE ENTIERE MSHEXT
c   DANS LE FICHIER 5 APRES LA LECTURE DE NZ.
c - APRES LA LECTURE DE CYL, SI MSHEXT=1, ON FORCE CYL EGAL A ZERO
c - ON CONTOURNE LE CALCUL DE CERTAINES QUANTITES GEO. (SKIPCO ETC...)
c
c ======================================================================
c
c      rinput reads the input data file and computes derived quantities,
c      scalars, plot data, and the species and reaction tabular data.
c
c      rinput is called by:  kiva
c
c      rinput calls the following subroutines and functions:  fuel and
c             tran3d, and the system routines sample and sampon, which
c             are described in the epilog.
c
c ======================================================================
c
c      INCLUDE '../include/comd.h'
C
C ======================================================================
C
C           VERSION MODIFIEE ET CORRIGEE DE KIVA2 (KIVA2.UPD)
C
C                VERSION RECUE PAR RENAULT LE 5 NOV 90
C
C ======================================================================
C
C SIGNIFICATION DES VARIABLES :
C ---------------------------
C
C  NV     = MAXIMUM NO. OF VERTICES, =(NX+1)*(NY+1)*(NZ+1)
C  LNXPYP = MAXIMUM NO. OF VERTICES IN A PLANE, =(NX+1)*(NY+1)
C  LNSP   = MAXIMUM NO. OF SPECIES, MUST BE .GE. 3 WHEN CHOPPER IS USED
C  LNRK   = MAXIMUM NO. OF KINETIC CHEMICAL REACTIONS
C  LNRE   = MAXIMUM NO. OF EQUILIBRIUM CHEMICAL REACTIONS
C  NPAR   = MAXIMUM NO. OF PARTICLES PRESENT AT ANY ONE TIME
C  LP     = MAXIMUM NO. OF POINTS USED TO DEFINE PISTON SILHOUETTE
C           OR HEAD SILHOUETTE
C  LV     = MAX. NO. OF VIEWS OF EACH 3-D PLOT TYPE (ZONE,VECTOR,CONTOUR)
C  LVAP   = MAX. NO. OF ENTRIES IN LIQUID VAPOR PRES. TABLES IN FUELIB
C  LNZP   = MAXIMUM NO. OF PLANES, =(NZ+1)
C  LVEL   = MAX. NO. OF ENTRIES IN THE INJECTION VELOCITY TABLE
C  LNOZ   = MAX. NO. OF FUEL INJECTION NOZZLES (=1 IF NY=1)
C  LNPT1  = MAX. NO. DE POINTS DEFINISSANT LA LOI DE LEVEE: ZXL=F(ANGLE)
C  LNPT2  = MAX. NO. DE POINTS A L'ENTREE DE LA PIPE D'ADMISSION
C
C ===============PARAMETRE POUR OPTIMISATION DE LA CLASSE ==============
C
C MOYENC
C
      PARAMETER (NV=24000,LNXPYP=1700,LNSP=12,LNRK=4,LNRE=6,
C
C MOYEND
C
C      PARAMETER (NV=127500,LNXPYP=2500,LNSP=12,LNRK=4,LNRE=6,
C
C MOYENE
C
C      PARAMETER (NV=240000,LNXPYP=3500,LNSP=12,LNRK=4,LNRE=6,
C
C NUIT
C
C      PARAMETER (NV=340000,LNXPYP=6500,LNSP=12,LNRK=4,LNRE=6,
C
C ======================================================================
C

     &           NPAR=2000,LP=35,LV=5,LVAP=74,LNZP=NV/LNXPYP,LPLUS=60)

      PARAMETER (LVEL=100,LNOZ=12)
      PARAMETER (LNPT1=200,LNPT2=200,LNPDB=600)
      PARAMETER (NVXPYP = NV + LNXPYP + LPLUS )

c      INCLUDE 'common.h'
      LOGICAL   CROPEN,VOPEN
c
c +++ note: on short word-length machines, real numbers must be declared
c +++       double precision (60-64 bits required); however, 32 bits
c +++       will suffice for integers; this is why they are separated
c +++       from the real numbers in the common blocks below.
c
c +++ note: the common blocks are written with the implicit assumption
c +++       that they will be loaded exactly as they appear below.
c +++       because aa- and zz- names often span more than one common,
c +++       problems will result if the loader scatters the commons.
c +++       in this case, the loader must be instructed to load the
c +++       commons as a single module.  if this is not an option,
c +++       the user must restructure the commons and make appropriate
c +++       changes in subroutines begin, taperd, and tapewr.
c  
      COMMON /LC1/ AAA1(1),X(-LNXPYP:NVXPYP),Y(-LNXPYP:NVXPYP),
     1 Z(-LNXPYP:NVXPYP),U(-LNXPYP:NVXPYP),V(-LNXPYP:NVXPYP),
     2 W(-LNXPYP:NVXPYP),RO(-LNXPYP:NVXPYP),VOL(-LNXPYP:NVXPYP),
     3 P(-LNXPYP:NVXPYP),AMU(-LNXPYP:NVXPYP),F(-LNXPYP:NVXPYP),
     4 FV(-LNXPYP:NVXPYP),TEMP(-LNXPYP:NVXPYP),SIE(-LNXPYP:NVXPYP),
     5 ZZZ1
C
      COMMON /LC1I/ IAAA1(1),
     & ITAB(-LNXPYP:NVXPYP),JTAB(-LNXPYP:NVXPYP),KTAB(-LNXPYP:NVXPYP),
     1 NZZZ1
C
CCC      common /lc1z/ zzz1
C
      COMMON /LC2/ AAA2(1),TKE(-LNXPYP:NVXPYP),PIT(-LNXPYP:NVXPYP),
     1 PIT1(-LNXPYP:NVXPYP),UN(-LNXPYP:NVXPYP),VN(-LNXPYP:NVXPYP),
     2 WN(-LNXPYP:NVXPYP),SUVW(-LNXPYP:NVXPYP),ZZZ2
C
      COMMON /LC3/ AAA3(1),E1(-LNXPYP:NVXPYP),E2(-LNXPYP:NVXPYP),
     1 E3(-LNXPYP:NVXPYP),E4(-LNXPYP:NVXPYP),E5(-LNXPYP:NVXPYP),
     2 E6(-LNXPYP:NVXPYP),E7(-LNXPYP:NVXPYP),E8(-LNXPYP:NVXPYP),
     3 E9(-LNXPYP:NVXPYP),E10(-LNXPYP:NVXPYP),E11(-LNXPYP:NVXPYP),
     4 E12(-LNXPYP:NVXPYP),E13(-LNXPYP:NVXPYP),E14(-LNXPYP:NVXPYP),
     5 E15(-LNXPYP:NVXPYP),E16(-LNXPYP:NVXPYP),E17(-LNXPYP:NVXPYP),
     6 E18(-LNXPYP:NVXPYP),E19(-LNXPYP:NVXPYP),E20(-LNXPYP:NVXPYP),ZZZ3
C
      COMMON /LC4/ AAA4(1),E21(-LNXPYP:NVXPYP),E22(-LNXPYP:NVXPYP),
     1 E23(-LNXPYP:NVXPYP),E24(-LNXPYP:NVXPYP),E25(-LNXPYP:NVXPYP),
     2 E26(-LNXPYP:NVXPYP),E27(-LNXPYP:NVXPYP),E28(-LNXPYP:NVXPYP),
     3 E29(-LNXPYP:NVXPYP),E30(-LNXPYP:NVXPYP),E31(-LNXPYP:NVXPYP),
     4 E32(-LNXPYP:NVXPYP),E33(-LNXPYP:NVXPYP),E34(-LNXPYP:NVXPYP),
     5 E35(-LNXPYP:NVXPYP),E36(-LNXPYP:NVXPYP),E37(-LNXPYP:NVXPYP),
     6 E38(-LNXPYP:NVXPYP),E39(-LNXPYP:NVXPYP),E40(-LNXPYP:NVXPYP),ZZZ4
C
      COMMON /LC5/ AAA5(1),E41(-LNXPYP:NVXPYP),E42(-LNXPYP:NVXPYP),
     1 E43(-LNXPYP:NVXPYP),E44(-LNXPYP:NVXPYP),E45(-LNXPYP:NVXPYP),
     2 E46(-LNXPYP:NVXPYP),E47(-LNXPYP:NVXPYP),E48(-LNXPYP:NVXPYP),
     3 E49(-LNXPYP:NVXPYP),E50(-LNXPYP:NVXPYP),E51(-LNXPYP:NVXPYP),
     4 E52(-LNXPYP:NVXPYP),E53(-LNXPYP:NVXPYP),E54(-LNXPYP:NVXPYP),
     5 E55(-LNXPYP:NVXPYP),E56(-LNXPYP:NVXPYP),E57(-LNXPYP:NVXPYP),
     6 E58(-LNXPYP:NVXPYP),E59(-LNXPYP:NVXPYP),E60(-LNXPYP:NVXPYP),
     7 E61(-LNXPYP:NVXPYP),E62(-LNXPYP:NVXPYP),E63(-LNXPYP:NVXPYP),
     8 E64(-LNXPYP:NVXPYP),ZZZ5
C
      COMMON /LC6R/ AAA6(1),SPD(-LNXPYP:NVXPYP,LNSP),HTFORM(LNSP),
     1 MW(LNSP),RHOI(LNSP),RMW(LNSP),CB(LNRK),CF(LNRK),EB(LNRK),
     2 EF(LNRK),NELEM(LNRK),QR(LNRK),ZETAB(LNRK),ZETAF(LNRK),
     3 AE(LNSP,LNRK),BE(LNSP,LNRK),AS(LNRE),BS(LNRE),CS(LNRE),DS(LNRE),
     4 ES(LNRE),QEQ(LNRE),TSPM(LNSP),FAM(LNSP,LNRK),FBM(LNSP,LNRK),
     5 FBMAM(LNSP,LNRK),FBNAN(LNSP,LNRE),WDD(LNZP,LNSP),
     8 SPDIN0(LNSP),ROIN(LNXPYP),SPDIN(LNXPYP,LNSP),
     9 SPDAMB(LNSP),ROSIEIN(LNXPYP),ZDMAX(LNXPYP),ZZZ6
c
      COMMON /LC6I/ AAA6I(1),
     1 AM(LNSP,LNRK),BM(LNSP,LNRK),CM(LNSP,LNRK),
     2 AN(LNSP,LNRE),BN(LNSP,LNRE),CN(LNSP,LNRE),NLM(LNRE),ZZZ6I
c
c      common /lc6z/ zzz6
C
C
      EQUIVALENCE (E1,MV,RMV),(E2,GAMMA,RGAMMA),(E3,EPS,SCL),
     1 (E4,ALX),(E5,ALY),(E6,ALZ),(E7,AFX),(E8,AFY),(E9,AFZ),
     2 (E10,ABX),(E11,ABY),(E12,ABZ),(E13,CLI),(E14,CLJ),(E15,CLK),
     3 (E16,CFI),(E17,CFJ),(E18,CFK),(E19,CBI),(E20,CBJ),(E21,CBK)
      EQUIVALENCE (E22,FSUM14,RFSUM14,XO),
     1 (E23,FSUM34,RFSUM34,YO),
     2 (E24,FSUM84,RFSUM84,ZO),
     3 (E25,SUM3,YSPM,DUDX,UAL),
     4 (E26,SUM2,YSPD,DUDY,CV,UAF),
     5 (E27,CONQ,DUDZ,R,UAB),
     6 (E28,VAPM,XCEN,DVDX,SIETIL,RPA),
     7 (E29,ENTH0,YCEN,DVDY,PTEM),
     8 (E30,ZCEN,DVDZ,ML,RMLDT),
     9 (E31,XL,DWDX,CVTERM,MF,RMFDT),
     X (E32,YL,DWDY,MB,RMBDT),
     1 (E33,ZL,DWDZ),
     2 (E34,PHID,FXL),
     3 (E35,ENTHDF,DISPTIL,FXF),
     4 (E36,SPD14,DYP14,TEM14,RESU,UALA,FXB),
     5 (E37,AUGMV,SPD34,DYP34,TEM34,RESV,UAFA,VOLL,TOTIE),
     6 (E38,RU,SPD84,DYP84,TEM84,RESW,UABA,ROSIE,UMOM),
     7 (E39,RV,HISP,UTIL,ROTKE,VMOM),
     8 (E40,RW,SPMTIL,VTIL,ROSCL,WMOM)
      EQUIVALENCE (E41,ENTHTIL,WTIL,ROSIEV,SMOM,TTKE),
     1 (E42,DDY,RMVSU,RDRDE,ROTKEV,FXV,TEPS),
     2 (E43,RES,RESUO,ROSCLV,FXVM,ZCHOP),
     3 (E44,RESOLD,RESVO,MVP,ZNWCHP),
     4 (E45,DRES,RESWO,MP),
     5 (E46,RDRDY,DRESU,RDRDT,RDRDP,RDRDK,FXLM,WORK1),
     6 (E47,DELTAY,DRESV,DTEMP,DP,DELTKE,DEPS,FXFM,WORK2),
     7 (E48,TKE14,DRESW,FXBM,WORK3),
     8 (E49,TKE34,PN,DRDS,DUDS),
     9 (E50,TKE84,PHIP,DTDS,DVDS),
     X (E51,EPS14,UB,DWDS),
     1 (E52,EPS34,VB,DSDS),
     2 (E53,EPS84,WB,DVOL),
     3 (E54,TOTCM,DISSIP,FXI),
     4 (E55,DMTOT,DUHAT,HTC,RTERMK,FXJ),
     5 (E56,TOTH,DVHAT,VOLB,RTERME,FXK),
     6 (E57,DSIEP,DWHAT,RROVOLL,S),
     7 (E58,DTKEP,CPC),
     8 (E59,RON,HTCTIL)
      EQUIVALENCE (E60,SIEN,TTIL),(E61,TKETIL),(E62,EPSTIL),(E63,TKEN),
     1            (E64,EPSN)
      EQUIVALENCE (SPD,SPM)
c
      DIMENSION MV(-LNXPYP:NVXPYP),RMV(-LNXPYP:NVXPYP),
     1 GAMMA(-LNXPYP:NVXPYP),RGAMMA(-LNXPYP:NVXPYP),
     2 EPS(-LNXPYP:NVXPYP),SCL(-LNXPYP:NVXPYP),
     3 ALX(-LNXPYP:NVXPYP),ALY(-LNXPYP:NVXPYP),ALZ(-LNXPYP:NVXPYP),
     4 AFX(-LNXPYP:NVXPYP),AFY(-LNXPYP:NVXPYP),AFZ(-LNXPYP:NVXPYP),
     5 ABX(-LNXPYP:NVXPYP),ABY(-LNXPYP:NVXPYP),ABZ(-LNXPYP:NVXPYP),
     6 CLI(-LNXPYP:NVXPYP),CLJ(-LNXPYP:NVXPYP),CLK(-LNXPYP:NVXPYP),
     7 CFI(-LNXPYP:NVXPYP),CFJ(-LNXPYP:NVXPYP),CFK(-LNXPYP:NVXPYP),
     8 CBI(-LNXPYP:NVXPYP),CBJ(-LNXPYP:NVXPYP),CBK(-LNXPYP:NVXPYP)
      DIMENSION FSUM14(-LNXPYP:NVXPYP),RFSUM14(-LNXPYP:NVXPYP),
     1 XO(-LNXPYP:NVXPYP),FSUM34(-LNXPYP:NVXPYP),
     2 RFSUM34(-LNXPYP:NVXPYP),YO(-LNXPYP:NVXPYP),
     3 FSUM84(-LNXPYP:NVXPYP),RFSUM84(-LNXPYP:NVXPYP),
     4 ZO(-LNXPYP:NVXPYP),SUM3(-LNXPYP:NVXPYP),YSPM(-LNXPYP:NVXPYP),
     5 DUDX(-LNXPYP:NVXPYP),UAL(-LNXPYP:NVXPYP),SUM2(-LNXPYP:NVXPYP),
     6 YSPD(-LNXPYP:NVXPYP),DUDY(-LNXPYP:NVXPYP),CV(-LNXPYP:NVXPYP),
     7 UAF(-LNXPYP:NVXPYP),CONQ(-LNXPYP:NVXPYP),DUDZ(-LNXPYP:NVXPYP),
     8 R(-LNXPYP:NVXPYP),UAB(-LNXPYP:NVXPYP),VAPM(-LNXPYP:NVXPYP),
     9 XCEN(-LNXPYP:NVXPYP),DVDX(-LNXPYP:NVXPYP),SIETIL(-LNXPYP:NVXPYP),
     X RPA(-LNXPYP:NVXPYP),ENTH0(-LNXPYP:NVXPYP),YCEN(-LNXPYP:NVXPYP),
     1 DVDY(-LNXPYP:NVXPYP),PTEM(-LNXPYP:NVXPYP),ZCEN(-LNXPYP:NVXPYP),
     2 DVDZ(-LNXPYP:NVXPYP),ML(-LNXPYP:NVXPYP),RMLDT(-LNXPYP:NVXPYP),
     3 XL(-LNXPYP:NVXPYP),DWDX(-LNXPYP:NVXPYP),CVTERM(-LNXPYP:NVXPYP),
     4 MF(-LNXPYP:NVXPYP),RMFDT(-LNXPYP:NVXPYP),YL(-LNXPYP:NVXPYP),
     5 DWDY(-LNXPYP:NVXPYP),MB(-LNXPYP:NVXPYP),RMBDT(-LNXPYP:NVXPYP),
     6 ZL(-LNXPYP:NVXPYP),DWDZ(-LNXPYP:NVXPYP),PHID(-LNXPYP:NVXPYP),
     7 FXL(-LNXPYP:NVXPYP),ENTHDF(-LNXPYP:NVXPYP),
     8 DISPTIL(-LNXPYP:NVXPYP),FXF(-LNXPYP:NVXPYP),
     9 SPD14(-LNXPYP:NVXPYP),DYP14(-LNXPYP:NVXPYP)
       DIMENSION TEM14(-LNXPYP:NVXPYP),RESU(-LNXPYP:NVXPYP),
     1 UALA(-LNXPYP:NVXPYP),FXB(-LNXPYP:NVXPYP),AUGMV(-LNXPYP:NVXPYP),
     2 SPD34(-LNXPYP:NVXPYP),DYP34(-LNXPYP:NVXPYP),
     3 TEM34(-LNXPYP:NVXPYP),RESV(-LNXPYP:NVXPYP),UAFA(-LNXPYP:NVXPYP),
     4 VOLL(-LNXPYP:NVXPYP),TOTIE(-LNXPYP:NVXPYP),RU(-LNXPYP:NVXPYP),
     5 SPD84(-LNXPYP:NVXPYP),DYP84(-LNXPYP:NVXPYP),
     6 TEM84(-LNXPYP:NVXPYP),RESW(-LNXPYP:NVXPYP),UABA(-LNXPYP:NVXPYP),
     7 ROSIE(-LNXPYP:NVXPYP),UMOM(-LNXPYP:NVXPYP)
      DIMENSION RV(-LNXPYP:NVXPYP),HISP(-LNXPYP:NVXPYP),
     1 UTIL(-LNXPYP:NVXPYP),ROTKE(-LNXPYP:NVXPYP),VMOM(-LNXPYP:NVXPYP),
     2 RW(-LNXPYP:NVXPYP),SPMTIL(-LNXPYP:NVXPYP),VTIL(-LNXPYP:NVXPYP),
     3 ROSCL(-LNXPYP:NVXPYP),WMOM(-LNXPYP:NVXPYP)
      DIMENSION ENTHTIL(-LNXPYP:NVXPYP),WTIL(-LNXPYP:NVXPYP),
     1 ROSIEV(-LNXPYP:NVXPYP),SMOM(-LNXPYP:NVXPYP),TTKE(-LNXPYP:NVXPYP),
     2 DDY(-LNXPYP:NVXPYP),RMVSU(-LNXPYP:NVXPYP),RDRDE(-LNXPYP:NVXPYP),
     3 ROTKEV(-LNXPYP:NVXPYP),FXV(-LNXPYP:NVXPYP),TEPS(-LNXPYP:NVXPYP),
     4 RES(-LNXPYP:NVXPYP),RESUO(-LNXPYP:NVXPYP),ROSCLV(-LNXPYP:NVXPYP),
     5 FXVM(-LNXPYP:NVXPYP),ZCHOP(-LNXPYP:NVXPYP),
     6 RESOLD(-LNXPYP:NVXPYP),RESVO(-LNXPYP:NVXPYP),MVP(-LNXPYP:NVXPYP),
     7 ZNWCHP(-LNXPYP:NVXPYP),DRES(-LNXPYP:NVXPYP),
     8 RESWO(-LNXPYP:NVXPYP),MP(-LNXPYP:NVXPYP),RDRDY(-LNXPYP:NVXPYP),
     9 DRESU(-LNXPYP:NVXPYP),RDRDT(-LNXPYP:NVXPYP),
     X RDRDP(-LNXPYP:NVXPYP),RDRDK(-LNXPYP:NVXPYP),FXLM(-LNXPYP:NVXPYP),
     1 WORK1(-LNXPYP:NVXPYP),DELTAY(-LNXPYP:NVXPYP),
     2 DRESV(-LNXPYP:NVXPYP),DTEMP(-LNXPYP:NVXPYP),DP(-LNXPYP:NVXPYP),
     3 DELTKE(-LNXPYP:NVXPYP),DEPS(-LNXPYP:NVXPYP),FXFM(-LNXPYP:NVXPYP),
     4 WORK2(-LNXPYP:NVXPYP),TKE14(-LNXPYP:NVXPYP),
     5 DRESW(-LNXPYP:NVXPYP),FXBM(-LNXPYP:NVXPYP),WORK3(-LNXPYP:NVXPYP),
     6 TKE34(-LNXPYP:NVXPYP),PN(-LNXPYP:NVXPYP),DRDS(-LNXPYP:NVXPYP),
     7 DUDS(-LNXPYP:NVXPYP),TKE84(-LNXPYP:NVXPYP),PHIP(-LNXPYP:NVXPYP),
     8 DTDS(-LNXPYP:NVXPYP),DVDS(-LNXPYP:NVXPYP),EPS14(-LNXPYP:NVXPYP),
     9 UB(-LNXPYP:NVXPYP),DWDS(-LNXPYP:NVXPYP),EPS34(-LNXPYP:NVXPYP)
       DIMENSION VB(-LNXPYP:NVXPYP),DSDS(-LNXPYP:NVXPYP),
     1 EPS84(-LNXPYP:NVXPYP),WB(-LNXPYP:NVXPYP),DVOL(-LNXPYP:NVXPYP),
     2 TOTCM(-LNXPYP:NVXPYP),DISSIP(-LNXPYP:NVXPYP),FXI(-LNXPYP:NVXPYP),
     3 DMTOT(-LNXPYP:NVXPYP),DUHAT(-LNXPYP:NVXPYP),HTC(-LNXPYP:NVXPYP),
     4 RTERMK(-LNXPYP:NVXPYP),FXJ(-LNXPYP:NVXPYP),TOTH(-LNXPYP:NVXPYP),
     5 DVHAT(-LNXPYP:NVXPYP),VOLB(-LNXPYP:NVXPYP),
     6 RTERME(-LNXPYP:NVXPYP),FXK(-LNXPYP:NVXPYP),DSIEP(-LNXPYP:NVXPYP),
     7 DWHAT(-LNXPYP:NVXPYP),RROVOLL(-LNXPYP:NVXPYP),S(-LNXPYP:NVXPYP),
     8 DTKEP(-LNXPYP:NVXPYP),CPC(-LNXPYP:NVXPYP),RON(-LNXPYP:NVXPYP),
     9 HTCTIL(-LNXPYP:NVXPYP)
      DIMENSION SIEN(-LNXPYP:NVXPYP),TTIL(-LNXPYP:NVXPYP),
     1 TKETIL(-LNXPYP:NVXPYP),EPSTIL(-LNXPYP:NVXPYP),
     2 TKEN(-LNXPYP:NVXPYP),EPSN(-LNXPYP:NVXPYP)
c
      DIMENSION SPM(-LNXPYP:NVXPYP,LNSP)
C
C
      COMMON /LEKDATA/ EK(51,LNSP),ELIQ(51),PVAP(LVAP),VISLIQ(LVAP)
C
C
      EQUIVALENCE (EK,HK),(ELIQ,HLAT0)
      DIMENSION HK(51,LNSP),HLAT0(51)
C
      COMMON /SC1/ AASC1(1),
     & ADIA,AIRDIF,AIRLA1,AIRLA2,AIRMU1,AIRMU2,ANC4O2,
     1 ANGMOM,ANU0,ARROW,ATDC,A0ME,A0MOM,BOTCYL,BOTFAC,BOTIN,B0,
     2 CAFILM,CAFIN,CART3D,CDUMP,CES,CE1,CE13,CE2,CE3,CFILM,
     3 CFOCBCK,CMU,CMUEPS,CONROD,COSECT,CPS,
     4 CRANK,CSUBK,CSUBMU,CYL,CYLNY,C1,DCADMP,DISTAMB,DPREFIN,DT,DTACC,
     5 DTCAD,DTCON,DTCYC0,DTFA,DTFC,DTFST,DTGROF,DTMAX,DTMIN,
     6 DTMXCA,DTNM1,DTO4,DTPGS,DTWP,DY,DZCHOP,D1,EPSCHM,EPSE,EPSK,
     7 EPSM,EPSP,EPST,EPSV,EPSY,EXPDIF,FACSEC,FCHSP,
     8 FLBOWL,FLDOME,FLFACE,FLHEAD,FLSQSH,FNFLUXS,FORTHD,FRESLP,
     9 GRFAC,GRIND,GX,GY,GZ,
     & ZZSC1
C
      COMMON /SC1I/ IAASC1(1),
     & IBIGIT,ICART3,ICONT(26),ICYL,
     1 IEMAX(LP),IHO(LP),IIGNL(2),IIGNR(2),IJKALL,IJKVEC,
     2 IPO(LP),IPOST,IREC,IREST,IREZ,JIGND(2),JIGNF(2),JSECTR,JTERM,
     3 JTEST,KHO(LP),KHT,KIGNB(2),KIGNT(2),KPO(LP),KPTOP,
     4 KWIKEQ,LPR,LWALL,NAME(10),NCFILM,NCHOP,NCLAST,NCORR(LP),
     5 NCTAP8,NCYC,NDUMP,NEO,NFLUXS,NHO,NP,NPN,NPO,NRE,NRK,NSP,NSTRT,
     6 NUMCIT,NUMEIT,NUMKIT,NUMPIT,NUMVIT,NUMYIT,NUNIF,NX,NXP,
     7 NXPNY,NXPNYM,NXPNYP,NY,NYEQ1,NYNEW,NYP,NZ,NZP,
     8 NZZSC1
C
      COMMON /SC1R/ AASC1R(1),
     & OFFSET,OMCYL,OMGCHM,OMJSEC,OMNYQ1,PAMB,PARDON,
     1 PERR,PGS,PGSRAT,PGSSW,PHIDMX,PHIMAX,PI,PIO180,PIO2,PI2,PI4O3R,
     2 PM,PRL,Q0,RANB,RANS,RC,
     X RCORNR,RDT,RERF(21),RFNY,RGAMAMB,RGAMIN,RGAS,RHO(LP),
     1 RNFLUXS,ROAMB,ROIN0,RPGS2,RPM,RPO(LP),RPR,RPRE,RPRQ,RPS,RSC,
     2 RSCLMX,RTFAC,RTNOSLP,RTOUT,SAMPL,SCLAMB,SCLMX,SEMIMJ(LP),
     3 SEMIMN(LP),SGSL,SIXTH,SKIHCO(LP),SKIPCO(LP),SNSECT,SQUARE,
     4 ZZSC1R
C
      COMMON /SC1B/ AASC1B(1),
     & STB,STM,STROKE,SWIPRO,SWIRL,T,TCHEM,TCRIT,TCUT,
     1 TCUTE,TCYLWL,TEMPI,TEVAP,TFILM,THEAD,THIRD,THSECT,TIMLMT,
     2 TKEAMB,TKEI,TKELOW,TKESW,TLIMD,TOPFAC,TOPOUT,
     3 TPISTN,TVALVE,TWFILM,TWFIN,TWLVTH,TWOTHD,T1IGN,
     4 T2IGN,UNISCAL,U0,U1,VISRAT,WIN,WPISTN,XIGNIT,
     5 X0,Y0,ZHBOT,ZHEAD,ZHO(LP),ZPISTN,ZPO(LP),
     6 ZZSC1B
C
      COMMON /INJREAL/ AAINJ(1),
     & AMP0(LNOZ),ANOZ(LNOZ),BREAKUP,CONE(LNOZ),
     1 COSTXY(LNOZ),COSTXZ(LNOZ),DCONE(LNOZ),DRNOZ(LNOZ),
     2 DTHNOZ(LNOZ),DTINJ,DZNOZ(LNOZ),EAVEC(LNOZ,3),ENVEC(LNOZ,3),
     3 EOVEC(LNOZ,3),EVAPP,OSCIL0(LNOZ),PMINJ,PULSE,RDINJ(100),
     4 RHOP,SINTXY(LNOZ),SINTXZ(LNOZ),SMR(LNOZ),TDINJ,TFMASS(LVEL),
     5 TILTXY(LNOZ),TILTXZ(LNOZ),TM2INJ,TNPARC,TPI,TSPMAS,TURB,
     6 T1INJ,T2INJ,VELINJ(LVEL),XINJ(LNOZ),YINJ(LNOZ),ZINJ(LNOZ),
     7 ZZINJ
C
      COMMON /INJINTG/ IAAINJ(1),
     1 INJDIST,KOLIDE,NUMNOZ,NUMVEL,
     2 NZZINJ
C
      COMMON /CHARS/ IDCON,IDDT,IDSP,JNM
C
C
C +++ IL NE FAUT SURTOUT PAS INITIALISER DANS BEGIN LES VALEURS EN DATA  !
C +++ NE PAS DUMPER LES DATA  (VALEUR INITIALISEE A LA COMPILATION =>
C +++                           PROBLEME SI IL Y A EQUIVALENCE )
C
C
      COMMON /MEXT1/ AAA10(1),
     &               ZXL(LNPT1),BETA1(LNPT1),BETA2(LNPT2),PPOL(LNPT2),
     1               ROPOL(LNPT2),UPOL(LNPT2),SPDINL(LNSP),
     2               XLM1(NV),YLM1(NV),ZLM1(NV),
     4               XLM2(NV),YLM2(NV),ZLM2(NV),
     6               FVLU1(NV),FVLU2(NV),SKICO1(NV),
     7               UCRKIN(LNPDB),QFR(NV),
     8               ZZZ10
C
      COMMON /MEXT2/ III1(1),
     1               IUPCO(NV),IDNCO(NV),JUPCO(NV),JDNCO(NV),IEDGE(NV),
     3               NNN1
C
      COMMON /INDATA/ FLSOUP,FLDEB
C
      COMMON /MEXT3/ AAA11(1),
     &               RAYON,SQUISH,AOA,RFA,USOUP,VSOUP,WSOUP,ZXS,
     1               ZXJEU,ZXLMAX,ZXLMIN,RICH,REMP,XMW,XAIR,XCAR,RHO0,
     2               FO2,FN2,SCALIN,UXKIVA,UYKIVA,UZKIVA,ZPTOP1,ROKIVA,
     3               PKIVA,TKIVA,TKEIN,EPSIN,SIEIN,DEQ1,DEQ2,XLPIP,
     4               XCP,YCP,ZCP,TUMBLE,CEBU,TMCAR0,TMO20,TMN20,
     5               TGENE,ROGENE,PGENE,ROSIN,HISPGE,
     +               UMOY,UIN,VIN,UVWIN,BOLH,SIGMA0,
     6               ZZZ11
C
      COMMON /MEXT4/ III2(1),
     &               MSHEXT,NKB,NKC,NKSQSH,NKS,KPTOP2,NSOUP,NPT1,NPT2,
     1               NKDEB,JSEP,NPDB1,NPDB2,KIGNB1,KIGNT1,KIGNB2,KIGNT2,
     2               JSEP2,
     3               NNN2
C
      COMMON /LOGIC/ CROPEN,VOPEN
C
      REAL MB,MC,MF,ML,MP,MV,MVP,MW
      INTEGER AM,AN,BM,BN,CM,CN
      CHARACTER *8 IDCON(26),IDSP(15),JNM
      CHARACTER *4 IDDT



c      INCLUDE '../include/complt.h'
      COMMON /PLTINTG/ IAAPLT(1),
     & IEDG(LV),IFACE(LV*6),ISLC(LV),ISLV(LV),JSLC(LV),
     1 JSLV(LV),KSLC(LV),KSLV(LV),MIRROR,NVCONT,NVPVEC,NVVVEC,NVZONE,
     2 NZZPLT
C
      COMMON /PLTREAL/ AAPLT(1),
     & COSAL,COSPHC(LV),COSPHV(LV),COSPHZ(LV),
     1 COSTHC(LV),COSTHV(LV),COSTHZ(LV),SINAL,SINPHC(LV),SINPHV(LV),
     2 SINPHZ(LV),SINTHC(LV),SINTHV(LV),SINTHZ(LV),XBEC(LV),XBEV(LV),
     3 XBEZ(LV),XCPLOT,XEZ(LV),YBEC(LV),YBEV(LV),YBEZ(LV),YCPLOT,
     4 YEZ(LV),ZBEC(LV),ZBEV(LV),ZBEZ(LV),ZCPLOT,ZEZ(LV),ZZ

      DIMENSION KHOSAV(LP)
      CHARACTER *8 ID(4)
      CHARACTER *4 MESS
C
c +++
c +++ hk arrays are the enthalpies of the species, taken from the
c +++ janaf thermochemical tables.  intervals are t=100(n-1), and units
c +++ are kcal/mole (later get converted to sie in ergs/gm).
c +++ species #1 is assumed to be the fuel, and its hk is loaded by
c +++ subroutine fuel.  species #2-12 below are as follows:
c +++ 2=o2, 3=n2, 4=co2, 5=h20, 6=h, 7=h2, 8=o, 9=n, 10=oh,
c +++ 11=co, 12=no
c +++
c +++ -----------------------------------------------------
c +++
      DATA (HK(N,2),N=1,51) /-2.075,-1.381,-.685,.013,.724,1.455,2.21,2.
     1 988,3.786,4.6,5.427,6.266,7.114,7.971,8.835,9.706,10.583,11.465,1
     2 2.354,13.249,14.149,15.054,15.966,16.882,17.804,18.732,19.664,20.
     3 602,21.545,22.493,23.446,24.403,25.365,26.331,27.302,28.276,29.25
     4 4,30.236,31.221,32.209,33.201,34.196,35.193,36.193,37.196,38.201,
     5 39.208,40.218,41.229,42.242,43.257/
      DATA (HK(N,3),N=1,51) /-2.072,-1.379,-.683,.013,.71,1.413,2.125,2.
     1 853,3.596,4.355,5.129,5.917,6.718,7.529,8.35,9.179,10.015,10.858,
     2 11.707,12.56,13.418,14.28,15.146,16.015,16.886,17.761,18.638,19.5
     3 17,20.398,21.28,22.165,23.051,23.939,24.829,25.719,26.611,27.505,
     4 28.399,29.295,30.191,31.089,31.988,32.888,33.788,34.690,35.593,36
     5 .496,37.4,38.306,39.212,40.119/
      DATA (HK(N,4),N=1,51) /-2.238,-1.543,-.816,.016,.958,1.987,3.087,4
     1 .245,5.453,6.702,7.984,9.296,10.632,11.988,13.362,14.75,16.152,17
     2 .565,18.987,20.418,21.857,23.303,24.755,26.212,27.674,29.141,30.6
     3 13,32.088,33.567,35.049,36.535,38.024,39.515,41.01,42.507,44.006,
     4 45.508,47.012,48.518,50.027,51.538,53.051,54.566,56.082,57.601,59
     5 .122,60.644,62.169,63.695,65.223,66.753/
      DATA (HK(N,5),N=1,51) /-2.367,-1.581,-.784,.015,.825,1.654,2.509,3
     1 .39,4.3,5.24,6.209,7.21,8.24,9.298,10.384,11.495,12.63,13.787,14.
     2 964,16.16,17.373,18.602,19.846,21.103,22.372,23.653,24.945,26.246
     3 ,27.556,28.875,30.201,31.535,32.876,34.223,35.577,36.936,38.3,39.
     4 669,41.043,42.422,43.805,45.192,46.583,47.977,49.375,50.777,52.18
     5 1,53.589,55.,56.413,57.829/
      DATA (HK(N,6),N=1,51) /-1.481,-.984,-.488,.009,.506,1.003,1.5,1.99
     1 6,2.493,2.99,3.487,3.984,4.481,4.977,5.474,5.971,6.468,6.965,7.46
     2 1,7.958,8.455,8.952,9.449,9.945,10.442,10.939,11.436,11.933,12.43
     3 ,12.926,13.423,13.92,14.417,14.914,15.41,15.907,16.404,16.901,17.
     4 398,17.895,18.391,18.888,19.385,19.882,20.379,20.875,21.372,21.86
     5 9,22.366,22.863,23.359/
      DATA (HK(N,7),N=1,51) /-2.024,-1.265,-.662,.013,.707,1.406,2.106,2
     1 .808,3.514,4.226,4.944,5.67,6.404,7.148,7.902,8.668,9.446,10.233,
     2 11.03,11.836,12.651,13.475,14.307,15.146,15.993,16.848,17.708,18.
     3 575,19.448,20.326,21.21,22.098,22.992,23.891,24.794,25.703,26.616
     4 ,27.535,28.457,29.385,30.317,31.253,32.194,33.139,34.088,35.042,3
     5 5.999,36.961,37.926,38.895,39.868/
      DATA (HK(N,8),N=1,51) /-1.608,-1.08,-.523,.01,.528,1.038,1.544,2.0
     1 48,2.55,3.052,3.552,4.051,4.551,5.049,5.548,6.046,6.544,7.042,7.5
     2 40,8.038,8.536,9.034,9.532,10.029,10.527,11.026,11.524,12.023,12.
     3 522,13.022,13.522,14.023,14.524,15.026,15.529,16.033,16.537,17.04
     4 3,17.549,18.057,18.565,19.075,19.586,20.098,20.611,21.126,21.641,
     5 22.158,22.676,23.195,23.715/
      DATA (HK(N,9),N=1,51) /-1.481,-.984,-.488,.009,.506,1.003,1.5,1.99
     1 6,2.493,2.99,3.487,3.984,4.481,4.977,5.474,5.971,6.468,6.965,7.46
     2 1,7.958,8.455,8.952,9.449,9.946,10.444,10.941,11.439,11.938,12.43
     3 7,12.936,13.437,13.939,14.441,14.946,15.451,15.959,16.469,16.98,1
     4 7.495,18.012,18.531,19.054,19.58,20.11,20.643,21.18,21.721,22.266
     5 ,22.816,23.37,23.928/
      DATA (HK(N,10),N=1,51) /-2.192,-1.467,-.711,.013,.725,1.432,2.137,
     1 2.845,3.556,4.275,5.003,5.742,6.491,7.252,8.023,8.805,9.596,10.39
     2 7,11.207,12.024,12.849,13.681,14.52,15.364,16.214,17.069,17.929,1
     3 8.794,19.662,20.535,21.411,22.291,23.174,24.06,24.949,25.841,26.7
     4 35,27.632,28.532,29.434,30.338,31.245,32.153,33.064,33.976,34.89,
     5 35.807,36.725,37.644,38.566,39.489/
      DATA (HK(N,11),N=1,51) /-2.072,-1.379,-.683,.013,.711,1.417,2.137,
     1 2.873,3.627,4.397,5.183,5.983,6.794,7.616,8.446,9.285,10.13,10.98
     2 ,11.836,12.697,13.561,14.43,15.301,16.175,17.052,17.931,18.813,19
     3 .696,20.582,21.469,22.357,23.248,24.139,25.032,25.927,26.822,27.7
     4 19,28.617,29.516,30.416,31.316,32.218,33.121,34.025,34.93,35.835,
     5 36.741,37.649,38.557,39.465,40.375/
      DATA (HK(N,12),N=1,51) /-2.197,-1.451,-.705,.013,.727,1.448,2.186,
     1 2.942,3.716,4.507,5.313,6.131,6.96,7.798,8.644,9.496,10.354,11.21
     2 7,12.084,12.955,13.829,14.706,15.587,16.469,17.534,18.241,19.129,
     3 20.02,20.911,21.805,22.7,23.596,24.493,25.392,26.291,27.192,28.09
     4 4,28.997,29.9,30.805,31.71,32.616,33.523,34.431,35.34,36.249,37.1
     5 59,38.07,38.982,39.894,40.807/
c +++
c +++ -----------------------------------------------------
c +++
      DATA PI /3.14159 26535 89793 23846/
      DATA RGAS /8.3143E+7/
      DATA RC /122.0/
C
      DATA T,DTGROF,GRIND,TCHEM,TEVAP /0.0,1.02,0.0,1.0E-10,1.0E-10/
C
      DATA PGSRAT /0.04/
      DATA DTFC,DTFA,DTFST /0.2,0.5,0.5/
      DATA FLFACE,FLBOWL,FLSQSH,FLDOME,FLHEAD /1.0,2.0,3.0,4.0,5.0/
C
      DATA FLSOUP,FLDEB /6.0,7.0/
C
      DATA CE1,CE2,CE3,CES,CMU,CPS /1.44,1.92,-1.0,1.50,.09,.16432/
      DATA TKELOW / 1.0E-08 /
      DATA CSUBMU,CSUBK,CFOCB / 10.0,8.0,0.666666666666667 /
      DATA TM2INJ,TCRIT /2*0.0/
      DATA NCYC,NDUMP,NP /0,0,0/
      DATA RANB,RANS /2396745.,2396745./
c
c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
c
c +++ read data deck, compute derived and scalar quantities
c +++
c +++
c +++ if chopper is in use, current nz has been read in from
c +++ dump, and supersedes the value on itape; this is done
c +++ after this main block of reads.
c +++
      IF (IREST.GT.0) THEN                                              0517
         NYOLD = NY                                                     0518
         NZSAVE = NZ                                                    0519
      ENDIF
c +++
c +++ read flag for optional post-processor dumps, where:
c +++ 0 = no post-processor dump file desired,
c +++ 1 = start post-processor file tape9 with this run, and
c +++ 2 = continue dumping on previous tape9, which must exist in
c +++     local file space:
c +++
      READ (5, 600) ID(1), IPOST                                        0528
      IF (IREST.EQ.0) IPOST = MIN0(IPOST, 1)                            0529
      WRITE (12, 600) ID(1), IPOST                                      0530
      IF (IPOST.EQ.2) THEN                                              0531
c        call insist('tape9',irep9)
c        if(irep9.ne.(-1)) call exit
      ENDIF
      READ (5, 600) ID(1), NX, ID(2), NY, ID(3), NZ                     0535
      WRITE (12, 600) ID(1), NX, ID(2), NY, ID(3), NZ                   0536
C
      NZLU = NZ                                                         0538
CMODIF1
      READ (5, 600) ID(1), MSHEXT                                       0540
      WRITE (12, 600) ID(1), MSHEXT                                     0541
      IF (MSHEXT.EQ.1) THEN                                             0542
         WRITE (59, *) 'ON LIRA DONC UN MAILLAGE EXTERIEUR'             0543
         WRITE (12, *) 'ON LIRA DONC UN MAILLAGE EXTERIEUR'             0544
      ENDIF
CMODIF2
      READ (5, 600) ID(1), LWALL, ID(2), NCHOP, ID(3), LPR, ID(4),      0547
     &JSECTR                                                            0547
      WRITE (12, 600) ID(1), LWALL, ID(2), NCHOP, ID(3), LPR, ID(4),    0548
     &JSECTR                                                            0548
      READ (5, 600) ID(1), IREZ, ID(2), NCFILM, ID(3), NCTAP8, ID(4)    0549
     &, NCLAST                                                          0549
      WRITE (12, 600) ID(1), IREZ, ID(2), NCFILM, ID(3), NCTAP8, ID(4   0550
     &), NCLAST                                                         0550
      READ (5, 610) ID(1), CAFILM, ID(2), CAFIN, ID(3), CADUMP, ID(4)   0551
     &, DCADMP                                                          0551
      WRITE (12, 620) ID(1), CAFILM, ID(2), CAFIN, ID(3), CADUMP, ID(   0552
     &4), DCADMP                                                        0552
      READ (5, 610) ID(1), ANGMOM, ID(2), CYL, ID(3), DY, ID(4),        0553
     &PGSSW                                                             0553
CMODIF1
      IF (MSHEXT.EQ.1) CYL = 0.                                         0555
CMODIF2
      WRITE (12, 620) ID(1), ANGMOM, ID(2), CYL, ID(3), DY, ID(4),      0557
     &PGSSW                                                             0557
      READ (5, 610) ID(1), SAMPL, ID(2), DTI, ID(3), DTMXCA             0558
      WRITE (12, 620) ID(1), SAMPL, ID(2), DTI, ID(3), DTMXCA           0559
      READ (5, 610) ID(1), DTMAX, ID(2), TLIMD, ID(3), TWFILM, ID(4)    0560
     &, TWFIN                                                           0560
      WRITE (12, 620) ID(1), DTMAX, ID(2), TLIMD, ID(3), TWFILM, ID(4   0561
     &), TWFIN                                                          0561
      READ (5, 610) ID(1), FCHSP, ID(2), STROKE, ID(3), SQUISH, ID(4)   0562
     &, RPM                                                             0562
      WRITE (12, 620) ID(1), FCHSP, ID(2), STROKE, ID(3), SQUISH, ID(   0563
     &4), RPM                                                           0563
      READ (5, 610) ID(1), ATDC, ID(2), CONROD, ID(3), OFFSET, ID(4)    0564
     &, SWIRL                                                           0564
      WRITE (12, 620) ID(1), ATDC, ID(2), CONROD, ID(3), OFFSET, ID(4   0565
     &), SWIRL                                                          0565
      READ (5, 610) ID(1), SWIPRO, ID(2), THSECT, ID(3), EPSY           0566
      WRITE (12, 620) ID(1), SWIPRO, ID(2), THSECT, ID(3), EPSY         0567
      READ (5, 610) ID(1), EPSV, ID(2), EPSP, ID(3), EPST, ID(4),       0568
     &EPSK                                                              0568
      WRITE (12, 620) ID(1), EPSV, ID(2), EPSP, ID(3), EPST, ID(4),     0569
     &EPSK                                                              0569
      READ (5, 610) ID(1), EPSE, ID(2), GX, ID(3), GY, ID(4), GZ        0570
      WRITE (12, 620) ID(1), EPSE, ID(2), GX, ID(3), GY, ID(4), GZ      0571
      READ (5, 610) ID(1), TCYLWL, ID(2), THEAD, ID(3), TPISTN, ID(4)   0572
     &, TVALVE                                                          0572
      WRITE (12, 620) ID(1), TCYLWL, ID(2), THEAD, ID(3), TPISTN, ID(   0573
     &4), TVALVE                                                        0573
      READ (5, 610) ID(1), TEMPI, ID(2), PARDON, ID(3), A0, ID(4), B0   0574
      WRITE (12, 620) ID(1), TEMPI, ID(2), PARDON, ID(3), A0, ID(4),    0575
     &B0                                                                0575
      READ (5, 610) ID(1), ANC4, ID(2), ADIA                            0576
      WRITE (12, 620) ID(1), ANC4, ID(2), ADIA                          0577
      READ (5, 610) ID(1), ANU0, ID(2), VISRAT, ID(3), TCUT             0578
      WRITE (12, 620) ID(1), ANU0, ID(2), VISRAT, ID(3), TCUT           0579
      READ (5, 610) ID(1), TCUTE, ID(2), EPSCHM, ID(3), OMGCHM, ID(4)   0580
     &, TKEI                                                            0580
      WRITE (12, 620) ID(1), TCUTE, ID(2), EPSCHM, ID(3), OMGCHM, ID(   0581
     &4), TKEI                                                          0581
      READ (5, 610) ID(1), TKESW, ID(2), SGSL, ID(3), UNISCAL           0582
      WRITE (12, 620) ID(1), TKESW, ID(2), SGSL, ID(3), UNISCAL         0583
      READ (5, 610) ID(1), AIRMU1, ID(2), AIRMU2, ID(3), AIRLA1, ID(4   0584
     &), AIRLA2                                                         0584
      WRITE (12, 620) ID(1), AIRMU1, ID(2), AIRMU2, ID(3), AIRLA1, ID   0585
     &(4), AIRLA2                                                       0585
      READ (5, 610) ID(1), EXPDIF, ID(2), PRL, ID(3), RPR, ID(4),       0586
     &RPRQ                                                              0586
      WRITE (12, 620) ID(1), EXPDIF, ID(2), PRL, ID(3), RPR, ID(4),     0587
     &RPRQ                                                              0587
      READ (5, 610) ID(1), RPRE, ID(2), RSC, ID(3), XIGNIT              0588
      WRITE (12, 620) ID(1), RPRE, ID(2), RSC, ID(3), XIGNIT            0589
C
      READ (5, 610) ID(1), CEBU                                         0591
      WRITE (12, 620) ID(1), CEBU                                       0592
C
      READ (5, 610) ID(1), T1IGN, ID(2), TDIGN, ID(3), CA1IGN, ID(4)    0594
     &, CADIGN                                                          0594
      WRITE (12, 620) ID(1), T1IGN, ID(2), TDIGN, ID(3), CA1IGN, ID(4   0595
     &), CADIGN                                                         0595
      READ (5, 600) ID(1), IIGNL(1), ID(2), IIGNR(1), ID(3), JIGNF(1)   0596
      WRITE (12, 600) ID(1), IIGNL(1), ID(2), IIGNR(1), ID(3), JIGNF(   0597
     &1)                                                                0597
      READ (5, 600) ID(1), JIGND(1), ID(2), KIGNB(1), ID(3), KIGNT(1)   0598
      WRITE (12, 600) ID(1), JIGND(1), ID(2), KIGNB(1), ID(3), KIGNT(   0599
     &1)                                                                0599
      READ (5, 600) ID(1), IIGNL(2), ID(2), IIGNR(2), ID(3), JIGNF(2)   0600
      WRITE (12, 600) ID(1), IIGNL(2), ID(2), IIGNR(2), ID(3), JIGNF(   0601
     &2)                                                                0601
      READ (5, 600) ID(1), JIGND(2), ID(2), KIGNB(2), ID(3), KIGNT(2)   0602
      WRITE (12, 600) ID(1), JIGND(2), ID(2), KIGNB(2), ID(3), KIGNT(   0603
     &2)                                                                0603
      READ (5, 600) ID(1), KWIKEQ                                       0604
      WRITE (12, 600) ID(1), KWIKEQ                                     0605
c      if(sampl.eq.1.0) call sample('tfile',4)
c      if(sampl.eq.1.0) call sampon
c +++
c +++ if ny differs on input file, convert 2-d cylindrical mesh
c +++ to 3-d sector or full circle mesh
c +++
      IF (IREST.GT.0) THEN                                              0612
         NZ = NZSAVE                                                    0613
         IF (NY.NE.NYOLD) THEN                                          0614
            NYNEW = NY                                                  0615
            NY = NYOLD                                                  0616
c          call tran3d
         ENDIF
      ENDIF
      THIRD = 1./3.                                                     0620
      TWOTHD = 2.*THIRD                                                 0621
      FORTHD = 4.*THIRD                                                 0622
      SIXTH = 0.5*THIRD                                                 0623
      TWLVTH = 0.5*SIXTH                                                0624
      PI2 = PI*2.0                                                      0625
      PIO2 = PI*0.5                                                     0626
      PIO180 = PI/180.                                                  0627
      ARROW = TAN(30.0*PIO180)                                          0628
      ANGMOM = ANGMOM*CYL                                               0629
c      icart3=icvmgt(1,0,cyl.eq.0.0 .and. ny.gt.1)
      CART3D = FLOAT(ICART3)                                            0631
c      icyl=icvmgz(0,1,cyl)
c      cylny=cvmgt(1.0,0.0,cyl.eq.1.0 .and. ny.gt.1)
      OMCYL = 1.0-CYL                                                   0634
c      nyeq1=icvmgt(1,0,ny.eq.1)
      OMNYQ1 = 1.-FLOAT(NYEQ1)                                          0636
      IF (JSECTR.EQ.1.AND.NY.GT.1.AND.AMOD(360.0, THSECT).NE.0.0        0637
     &) THEN                                                            0637
         WRITE (59, '(a)')                                              0638
     &   ' thsect is not an even fraction of 360 degrees'               0638
c        call exita(5)
      ENDIF
      THREAD = THSECT                                                   0641
      IF (CYL.EQ.0.) JSECTR = 0                                         0642
      IF (CYL.EQ.1.0.AND.NY.EQ.1) JSECTR = 1                            0643
c      thsect=cvmgzi(360.,thsect,jsectr)
c      thsect=cvmgzi(thsect,0.500,nyeq1)*pio180
      COSECT = COS(THSECT)                                              0646
      SNSECT = SIN(THSECT)                                              0647
      OMJSEC = 1.-FLOAT(JSECTR)                                         0648
      JTEST = MAX0(JSECTR, NYEQ1)                                       0649
      OFFSET = OFFSET*OMNYQ1*OMJSEC                                     0650
c      den=cvmgz(1.0,thsect,thsect)
c      facsec=cvmgz(1.0,pi2/den,cyl)
      NXP = NX+1                                                        0653
      NYP = NY+1                                                        0654
      NZP = NZ+1                                                        0655
      NXPNY = NXP*NY                                                    0656
      NXPNYP = NXP*NYP                                                  0657
      IJKALL = NXPNYP*NZP                                               0658
      IF (IJKALL.GT.NV.OR.NXPNYP.GT.LNXPYP.OR.NZP.GT.LNZP) THEN         0659
         WRITE (59, '(a)')                                              0660
     &   ' parameter error: check nv, lnxpyp, and lnzp'                 0660
c        call exita(5)
      ENDIF
      JTERM = NXP*(1-NYEQ1)                                             0663
      NXPNYM = NXP*(NY-1)                                               0664
      KHT = NZ*NXPNYP                                                   0665
      IJKVEC = KHT-NXP-1                                                0666
      RPS = RPM/60.                                                     0667
      IF (TKESW.EQ.1.0.AND.LWALL.NE.1) THEN                             0668
         WRITE (59, '(a)')                                              0669
     &   ' resetting lwall=+1, because tke switch is on'                0669
         LWALL = 1                                                      0670
      ENDIF
c      freslp=cvmgpi(1.0,0.0,lwall)
      IF (TKESW.EQ.1.0) VISRAT = -TWOTHD                                0673
c      tkei=cvmgz(tkei,tkei*2.0*(stroke*rps)**2,rpm)
      TKEI = TKEI*TKESW                                                 0675
      PHIMAX = AMAX1(RPR, RSC, 2.+VISRAT, TKESW*RPRQ, TKESW*RPRE)       0676
      CMUEPS = SQRT(CMU*RPRE/(CE2-CE1))                                 0677
      CE13 = TWOTHD*CE1-CE3                                             0678
      U0 = 0.875/SQRT(SQRT(CMU)*(CE2-CE1)/RPRE)                         0679
      U1 = SQRT(RC)-U0*ALOG(RC)                                         0680
      Q0 = (PRL*RPR-1.0)*SQRT(RC)                                       0681
      A0ME = A0                                                         0682
      A0MOM = A0                                                        0683
      ANC4O2 = ANC4*0.5                                                 0684
      IF (T.EQ.0.0.OR.PGSSW.EQ.0.0) PGS = 1.0                           0685
      RPGS2 = 1./(PGS**2)                                               0686
      GRFAC = 1000./FLOAT(NX*NY*NZ)                                     0687
      CFOCBCK = CFOCB/CSUBK                                             0688
      X0 = OFFSET                                                       0689
      Y0 = 0.                                                           0690
      DTCAD = 0.0                                                       0691
c      dtmxca=cvmgz(9.9e+9,dtmxca,rpm)
      IF (RPS.GT.0.0) THEN                                              0693
         RRPS36 = 1./(RPS*360.)                                         0694
         DTCAD = RRPS36                                                 0695
         DTMXCA = DTMXCA*DTCAD                                          0696
      ENDIF
      IF (T1IGN.LT.0.0.AND.RPM.GT.0.0) THEN                             0698
         T1IGN = ABS(ATDC-CA1IGN)*RRPS36                                0699
         TDIGN = ABS(CADIGN)*RRPS36                                     0700
      ENDIF
      T2IGN = T1IGN+TDIGN                                               0702
      IF (T.EQ.0.0) THEN                                                0703
         DT = DTI                                                       0704
         CDUMP = CADUMP                                                 0705
         CFILM = ATDC+CAFILM                                            0706
         TFILM = TWFILM                                                 0707
      ENDIF
c +++
c +++ read injector data
c +++
      READ (5, 600) ID(1), NUMNOZ, ID(2), NUMVEL, ID(3), INJDIST, ID(   0712
     &4), KOLIDE                                                        0712
      WRITE (12, 600) ID(1), NUMNOZ, ID(2), NUMVEL, ID(3), INJDIST,     0713
     &ID(4), KOLIDE                                                     0713
      READ (5, 610) ID(1), T1INJ, ID(2), TDINJ, ID(3), CA1INJ, ID(4)    0714
     &, CADINJ                                                          0714
      WRITE (12, 620) ID(1), T1INJ, ID(2), TDINJ, ID(3), CA1INJ, ID(4   0715
     &), CADINJ                                                         0715
      READ (5, 610) ID(1), TSPMAS, ID(2), PULSE, ID(3), TNPARC, ID(4)   0716
     &, RHOP                                                            0716
      WRITE (12, 620) ID(1), TSPMAS, ID(2), PULSE, ID(3), TNPARC, ID(   0717
     &4), RHOP                                                          0717
      READ (5, 610) ID(1), TPI, ID(2), TURB, ID(3), BREAKUP, ID(4),     0718
     &EVAPP                                                             0718
      WRITE (12, 620) ID(1), TPI, ID(2), TURB, ID(3), BREAKUP, ID(4)    0719
     &, EVAPP                                                           0719
      PI4O3R = PI*FORTHD*RHOP                                           0720
      IF (NUMNOZ.EQ.0) GOTO 25                                          0721
      IF (NUMNOZ.GT.LNOZ) THEN                                          0722
         WRITE (59, '(a)') ' parameter error:  numnoz > lnoz'           0723
c        call exita(5)
      ENDIF
      IF (NUMVEL.GT.LVEL) THEN                                          0726
         WRITE (59, '(a)') ' parameter error:  numvel > lvel'           0727
c        call exita(5)
      ENDIF
      IF (TNPARC.GT.NPAR.AND.PULSE.GT.0.0) WRITE (59, '(a)')            0730
     &' warning:  tnparc > npar for pulsed spray'                       0730
      ATOTAL = 0.0                                                      0732
      DO 5 I = 1, NUMNOZ                                                0733
         READ (5, 610) ID(1), DRNOZ(I), ID(2), DZNOZ(I), ID(3),         0734
     &   DTHNOZ(I)                                                      0734
         WRITE (12, 620) ID(1), DRNOZ(I), ID(2), DZNOZ(I), ID(3),       0735
     &   DTHNOZ(I)                                                      0735
         READ (5, 610) ID(1), TILTXY(I), ID(2), TILTXZ(I), ID(3),       0736
     &   CONE(I), ID(4), DCONE(I)                                       0736
         WRITE (12, 620) ID(1), TILTXY(I), ID(2), TILTXZ(I), ID(3),     0738
     &   CONE(I), ID(4), DCONE(I)                                       0738
         READ (5, 610) ID(1), ANOZ(I), ID(2), SMR(I), ID(3), AMP0(I)    0740
         WRITE (12, 620) ID(1), ANOZ(I), ID(2), SMR(I), ID(3), AMP0(I   0741
     &   )                                                              0741
         DTHNOZ(I) = DTHNOZ(I)*PIO180                                   0742
         TILTXY(I) = TILTXY(I)*PIO180                                   0743
         TILTXZ(I) = TILTXZ(I)*PIO180                                   0744
         CONE(I) = CONE(I)*PIO180                                       0745
         DCONE(I) = DCONE(I)*PIO180                                     0746
         ATOTAL = ATOTAL+ANOZ(I)                                        0747
5        CONTINUE                                                       0748
      IF (NY.EQ.1) THEN                                                 0749
         NUMNOZ = 1                                                     0750
         DTHNOZ(1) = 0.5*THSECT                                         0751
         TILTXY(1) = 0.5*THSECT                                         0752
         IF (CONE(1).NE.DCONE(1)) THEN                                  0753
            TILTXZ(1) = 0.5*CONE(1)                                     0754
            CONE(1) = DCONE(1)                                          0755
         ENDIF
         ANOZ(1) = ANOZ(1)/FACSEC                                       0757
         ATOTAL = ANOZ(1)                                               0758
      ENDIF
      READ (5, *) (VELINJ(I), I = 1, NUMVEL)                            0760
      IF (T1INJ.LT.0.0.AND.RPM.GT.0.0) THEN                             0761
         T1INJ = ABS(ATDC-CA1INJ)*RRPS36                                0762
         TDINJ = ABS(CADINJ)*RRPS36                                     0763
      ENDIF
      T2INJ = T1INJ+TDINJ                                               0765
      IF (PULSE.LT.3.0) THEN                                            0766
         TSPMAS = TSPMAS*ANOZ(1)/(ATOTAL*FACSEC)                        0767
c        pminj=cvmgz(1.0,tnparc,tnparc)
         PMINJ = TSPMAS/PMINJ                                           0769
      ELSE
c +++
c +++ calculate total fuel mass predicted by the velocity table,
c +++ and correct the velocities by the ratio of mass desired to
c +++ mass predicted:
c +++
         DTINJ = TDINJ/FLOAT(NUMVEL-1)                                  0776
         ARODT = ATOTAL*RHOP*DTINJ*FACSEC                               0777
         FMPRED = 0.0                                                   0778
         DO 10 I = 2, NUMVEL                                            0779
            FMPRED = FMPRED+ARODT*0.5*(VELINJ(I)+VELINJ(I-1))           0780
10          CONTINUE                                                    0781
         CORECT = TSPMAS/FMPRED                                         0782
         VELINJ(1) = VELINJ(1)*CORECT                                   0783
         TFMASS(1) = 0.0                                                0784
         ARODT = ANOZ(1)*RHOP*DTINJ                                     0785
         DO 15 I = 2, NUMVEL                                            0786
            VELINJ(I) = VELINJ(I)*CORECT                                0787
            TFMASS(I) = TFMASS(I-1)+ARODT*0.5*(VELINJ(I)+VELINJ(I-1))   0788
15          CONTINUE                                                    0789
         PMINJ = TFMASS(NUMVEL)/TNPARC                                  0790
      ENDIF
      WRITE (12, 880) (I, VELINJ(I), I = 1, NUMVEL)                     0792
c +++
c +++ compute 3 unit vectors (a, n, & o) for each nozzle, for use
c +++ in setting velocities in subroutine inject, where a is
c +++ along the axis of injection, n is the normal to a, and o is
c +++ other, given by the cross product of a and n:
c +++
      DO 20 I = 1, NUMNOZ                                               0799
         COSTXY(I) = COS(TILTXY(I))                                     0800
         SINTXY(I) = SIN(TILTXY(I))                                     0801
         COSTXZ(I) = COS(TILTXZ(I))                                     0802
         SINTXZ(I) = SIN(TILTXZ(I))                                     0803
         EAVEC(I,1) = SINTXZ(I)*COSTXY(I)                               0804
         EAVEC(I,2) = SINTXZ(I)*SINTXY(I)                               0805
         EAVEC(I,3) = -COSTXZ(I)                                        0806
         ENVEC(I,1) = SIN(TILTXZ(I)+PIO2)*COSTXY(I)                     0807
         ENVEC(I,2) = SIN(TILTXZ(I)+PIO2)*SINTXY(I)                     0808
         ENVEC(I,3) = -COS(TILTXZ(I)+PIO2)                              0809
         EOVEC(I,1) = EAVEC(I,2)*ENVEC(I,3)-EAVEC(I,3)*ENVEC(I,2)       0810
         EOVEC(I,2) = EAVEC(I,3)*ENVEC(I,1)-EAVEC(I,1)*ENVEC(I,3)       0811
         EOVEC(I,3) = EAVEC(I,1)*ENVEC(I,2)-EAVEC(I,2)*ENVEC(I,1)       0812
20       CONTINUE                                                       0813
25    CONTINUE                                                          0814
c +++
c +++ read data defining piston outline
c +++
      READ (5, 600) ID(1), NPO, ID(2), NUNIF                            0818
      WRITE (12, 630) NPO, NUNIF                                        0819
CMODIF1
      IF (NPO.GT.LP.AND.MSHEXT.EQ.0) THEN                               0821
         WRITE (59, '(a)') ' parameter error: npo > lp'                 0822
c        call exita(5)
      ELSEIF (NPO.EQ.0.AND.MSHEXT.EQ.0) THEN                            0821
CMODIF2
         WRITE (59, '(a)') ' cannot have npo = 0'                       0826
c        call exita(5)
      ENDIF
      DO 30 N = 1, NPO                                                  0829
         READ (5, 640) IPO(N), KPO(N), RPO(N), ZPO(N)                   0830
30       WRITE (12, 640) IPO(N), KPO(N), RPO(N), ZPO(N)                 0831
C
C      if(sgsl.eq.0.0) sgsl=rpo(npo)
C      sclmx=sgsl/cmueps
C      rsclmx=1.0/sclmx
C
c +++
c +++ skipco table indicates sharp corners, which we define as a corner
c +++ with less than a 125 degree included angle measured through the
c +++ obstacle.  these  points are skipped (left unchanged) in the
c +++ general freeslip velocity treatment in subroutine bc, and are
c +++ flagged by setting skipco(n) = 0.0 in the test below.  on the
c +++ other hand, if the corner is acute (included angle measured
c +++ through the obstacle is > 235 degrees), skipco(n) = -1.0 to
c +++ indicate a separate corner treatment in subroutine bc.
c +++
C +++
C +++ LES DEFINITIONS DE SKIPCO ET DE SKIHCO DANS LE CAS D'UN
C +++ MAILLAGE LU EST DIFFERE JUSQU'A L'EXECUTION DE SETUP
C +++
C +++ LA MEME CHOSE POUR LA DEFINITION DE KPTOP, ZHEAD, ZBOT ETC....
C +++ ET TOUTE AUTRE QUANTITE GEOMETRIQUE RELATIVE AU BOL ET CAVITE.
C +++
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) GOTO 99999                                       0857
CMODIF2
50    READ (5, 600) ID(1), NHO                                          0901
      WRITE (12, 600) ID(1), NHO                                        0902
CMODIF1
      IF (NHO.GT.LP.AND.MSHEXT.EQ.0) THEN                               0904
         WRITE (59, '(a)') ' parameter error:  nho > lp'                0905
c        call exita(5)
      ENDIF
      IF (MSHEXT.EQ.1) GOTO 90                                          0908
      IF (NHO.EQ.0.AND.MSHEXT.EQ.0) GOTO 90                             0909
CMODIF2       
      ZMAX = -1.0E+10                                                   0911
      DO 60 N = 1, NHO                                                  0912
         IF (IREST.GT.0) KHOSAV(N) = KHO(N)                             0913
         READ (5, 640) IHO(N), KHO(N), RHO(N), ZHO(N)                   0914
         WRITE (12, 640) IHO(N), KHO(N), RHO(N), ZHO(N)                 0915
         IF (IREST.GT.0) KHO(N) = KHOSAV(N)                             0916
         ZMAX = AMAX1(ZMAX, ZHO(N))                                     0917
60       CONTINUE                                                       0918
CMODIF1
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) THEN                                             0923
CMODIF2
         ZHEAD = ZHEAD+ZMAX                                             0925
         SKIHCO(1) = 1.0                                                0926
         SKIHCO(NHO) = 1.0                                              0927
         DO 70 N = 2, NHO-1                                             0928
            NF = N+1                                                    0929
            NB = N-1                                                    0930
            DRF = RHO(NF)-RHO(N)                                        0931
            DZF = ZHO(NF)-ZHO(N)                                        0932
            DRB = RHO(NB)-RHO(N)                                        0933
            DZB = ZHO(NB)-ZHO(N)                                        0934
            DFDB = SQRT((DRF**2+DZF**2)*(DRB**2+DZB**2))                0935
            COSINE = (DRF*DRB+DZF*DZB)/DFDB                             0936
            SINE = DRF*DZB-DRB*DZF                                      0937
c      skihco(n)=cvmgt(0.0,1.0,cosine.gt.-0.573576 .and. sine.gt.0.0)
c      skihco(n)=cvmgt(-1.0,skihco(n),
c     &                cosine.gt.-0.573576 .and. sine.lt.0.0)
70          CONTINUE                                                    0941
CMODIF1
      ENDIF
CMODIF2
      READ (5, 600) ID(1), NEO                                          0945
      WRITE (12, 600) ID(1), NEO                                        0946
      IF (NEO.EQ.0) GOTO 90                                             0947
      DO 80 N = 1, NEO                                                  0948
         READ (5, 640) NCORR(N), IEMAX(N), SEMIMJ(N), SEMIMN(N)         0949
         WRITE (12, 640) NCORR(N), IEMAX(N), SEMIMJ(N), SEMIMN(N)       0950
80       CONTINUE                                                       0951
c +++
c +++ read and check data for the square bowl option
c +++
90    READ (5, 610) ID(1), SQUARE, ID(2), RCORNR                        0955
      WRITE (12, 620) ID(1), SQUARE, ID(2), RCORNR                      0956
      READ (5, 600) ID(1), NSTRT                                        0957
      WRITE (12, 600) ID(1), NSTRT                                      0958
CMODIF1
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) THEN                                             0963
CMODIF2
         IF (SQUARE.EQ.1.0) THEN                                        0965
            IF (OFFSET.NE.0.0) THEN                                     0966
               WRITE (59, '(a)') ' offset square bowls not allowed'     0967
c          call exita(5)
            ELSEIF (RCORNR.LE.0.0) THEN                                 0966
               WRITE (59, '(a)')                                        0970
     &         ' rcornr must be > 0.0 for square bowl'                  0970
c          call exita(5)
            ELSEIF (NHO.GT.0) THEN                                      0966
               WRITE (59, '(a)') ' nho must be 0 for square bowls'      0973
c          call exita(5)
            ELSEIF (CYL.EQ.0.0) THEN                                    0966
               WRITE (59, '(a)') ' cyl must be 1.0 for square bowls'    0976
c          call exita(5)
            ELSEIF (NY-2*NSTRT.LT.1) THEN                               0966
               WRITE (59, '(a)')                                        0979
     &         ' ny incompatible with nstrt for square bowl'            0979
c          call exita(5)
            ELSEIF (THREAD.NE.90.0.OR.JSECTR.EQ.0) THEN                 0966
               WRITE (59, '(a)')                                        0982
     &         ' square bowl requires 90-degree sector mesh'            0982
c          call exita(5)
            ENDIF
         ENDIF
CMODIF1
      ENDIF
CMODIF2
c +++
c +++ read contour plot binary flags and
c +++ setup zone, velocity vector, and contour plots
c +++ ensure kslv & kslc choices within mesh, as chopper can affect them
c +++ (x-,y-,zcplot specialize plot center to engine geometry)
c +++
      READ (5, '(a8,26i1)') ID(1), (ICONT(N), N = 1, 26)                0995
      WRITE (12, '(a8,26i1)') ID(1), (ICONT(N), N = 1, 26)              0996
      XCPLOT = 0.0                                                      0997
      YCPLOT = 0.0                                                      0998
      ZCPLOT = ZHEAD-0.5*STROKE                                         0999
      READ (5, 600) ID(1), MIRROR                                       1000
c      mirror=cvmgt(mirror,0,ny.eq.1 .and. cyl.eq.1.0)
      WRITE (12, 600) ID(1), MIRROR                                     1002
      RFNY = 1.0/FLOAT(NY)                                              1003
      THONY = THSECT*RFNY                                               1004
      COSAL = COS(THONY)                                                1005
      SINAL = SIN(THONY)                                                1006
      OMEPS = 1.-1.E-10                                                 1007
      READ (5, 600) ID(1), NVZONE                                       1008
      WRITE (12, 650) NVZONE                                            1009
      IF (NVZONE.GT.LV) THEN                                            1010
         WRITE (59, '(a)') ' parameter error:  nvzone > lv'             1011
c        call exita(5)
      ENDIF
      IF (NVZONE.EQ.0) GOTO 110                                         1014
      DO 100 N = 1, NVZONE                                              1015
         IF1 = (N-1)*6+1                                                1016
         IF6 = IF1+5                                                    1017
         READ (5, 660) XEZ(N), YEZ(N), ZEZ(N), (IFACE(I), I = IF1,      1018
     &   IF6), IEDG(N)                                                  1018
         WRITE (12, 670) XEZ(N), YEZ(N), ZEZ(N), (IFACE(I), I = IF1,    1019
     &   IF6), IEDG(N)                                                  1019
         IF (XEZ(N).EQ.XCPLOT) XEZ(N) = XEZ(N)+1.E-6                    1020
         IF (YEZ(N).EQ.YCPLOT) YEZ(N) = YEZ(N)+1.E-6                    1021
         IF (ZEZ(N).EQ.ZCPLOT) ZEZ(N) = ZEZ(N)+1.E-6                    1022
         XDIST = XEZ(N)-XCPLOT                                          1023
         YDIST = YEZ(N)-YCPLOT                                          1024
         ZDIST = ZEZ(N)-ZCPLOT                                          1025
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)                 1026
         RADEYE = SQRT(ZDIST**2+GROUND**2)                              1027
         XOG = XDIST/GROUND                                             1028
c +++
c +++ avoid asin of 1.0 + low-order bit, which can occur on cray
c +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)                     1032
         THETA = ASIN(XOG)                                              1033
         YOG = YDIST/GROUND                                             1034
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)                     1035
         Q1 = ASIN(YOG)+PIO2                                            1036
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1                    1037
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1                   1038
         ZOR = ZDIST/RADEYE                                             1039
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)                     1040
         PHI = ASIN(ZOR)                                                1041
         SINTHZ(N) = SIN(THETA)                                         1042
         COSTHZ(N) = COS(THETA)                                         1043
         SINPHZ(N) = SIN(PHI)                                           1044
         COSPHZ(N) = COS(PHI)                                           1045
         XBEZ(N) = XDIST*COSTHZ(N)+YDIST*SINTHZ(N)                      1046
         YZTERM = YDIST*COSTHZ(N)-XDIST*SINTHZ(N)                       1047
         YBEZ(N) = COSPHZ(N)*YZTERM-ZDIST*SINPHZ(N)                     1048
         ZBEZ(N) = SINPHZ(N)*YZTERM+ZDIST*COSPHZ(N)                     1049
c +++
c +++ ensure left, front, derriere faces not plotted in 3-d cyl.
c +++
c      inop=cvmgt(0,1,cyl.eq.1.0 .and. ny.gt.1 .and. jsectr.eq.0)
         IFX = (N-1)*6                                                  1054
         IFACE(IFX+1) = IFACE(IFX+1)*INOP                               1055
         IFACE(IFX+3) = IFACE(IFX+3)*INOP                               1056
         IFACE(IFX+4) = IFACE(IFX+4)*INOP                               1057
100      CONTINUE                                                       1058
110   IF (NY.EQ.1) NVZONE = 1                                           1059
      READ (5, 600) ID(1), NVVVEC, ID(2), NVPVEC                        1060
      WRITE (12, 680) NVVVEC, NVPVEC                                    1061
      IF (NVVVEC.GT.LV) THEN                                            1062
         WRITE (59, '(a)') ' parameter error:  nvvvec > lv'             1063
c        call exita(5)
      ENDIF
      IF (NVVVEC.EQ.0.AND.NY.GT.1) GOTO 150                             1066
c      nvvv=icvmgt(1,nvvvec,nvvvec.eq.0 .and. ny.eq.1)
      DO 140 N = 1, NVVV                                                1068
         IF (NVVVEC.EQ.0.AND.NY.EQ.1) GOTO 120                          1069
         READ (5, 690) XEV, YEV, ZEV, ISLV(N), JSLV(N), KSLV(N)         1070
         KSLV(N) = MIN0(KSLV(N), NZ)                                    1071
         WRITE (12, 695) XEV, YEV, ZEV, ISLV(N), JSLV(N), KSLV(N)       1072
         IF (NY.GT.1) GOTO 130                                          1073
120      XEV = 0.                                                       1074
         YEV = -1.0E10                                                  1075
         ZEV = ZCPLOT                                                   1076
         ISLV(N) = 0                                                    1077
         JSLV(N) = 1                                                    1078
         KSLV(N) = 0                                                    1079
130      CONTINUE                                                       1080
         IF (XEV.EQ.XCPLOT) XEV = XEV+1.E-6                             1080
         IF (YEV.EQ.YCPLOT) YEV = YEV+1.E-6                             1081
         IF (ZEV.EQ.ZCPLOT) ZEV = ZEV+1.E-6                             1082
         XDIST = XEV-XCPLOT                                             1083
         YDIST = YEV-YCPLOT                                             1084
         ZDIST = ZEV-ZCPLOT                                             1085
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)                 1086
         RADEYE = SQRT(ZDIST**2+GROUND**2)                              1087
         XOG = XDIST/GROUND                                             1088
c +++
c +++ avoid asin of 1.0 + low-order bit, which can occur on cray
c +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)                     1092
         THETA = ASIN(XOG)                                              1093
         YOG = YDIST/GROUND                                             1094
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)                     1095
         Q1 = ASIN(YOG)+PIO2                                            1096
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1                    1097
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1                   1098
         ZOR = ZDIST/RADEYE                                             1099
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)                     1100
         PHI = ASIN(ZOR)                                                1101
         SINTHV(N) = SIN(THETA)                                         1102
         COSTHV(N) = COS(THETA)                                         1103
         SINPHV(N) = SIN(PHI)                                           1104
         COSPHV(N) = COS(PHI)                                           1105
         XBEV(N) = XDIST*COSTHV(N)+YDIST*SINTHV(N)                      1106
         YZTERM = YDIST*COSTHV(N)-XDIST*SINTHV(N)                       1107
         YBEV(N) = COSPHV(N)*YZTERM-ZDIST*SINPHV(N)                     1108
         ZBEV(N) = SINPHV(N)*YZTERM+ZDIST*COSPHV(N)                     1109
140      CONTINUE                                                       1110
      IF (NY.EQ.1) NVVVEC = 1                                           1111
150   READ (5, 600) ID(1), NVCONT                                       1112
      WRITE (12, 700) NVCONT                                            1113
      IF (NVCONT.GT.LV) THEN                                            1114
         WRITE (59, '(a)') ' parameter error:  nvcont > lv'             1115
c        call exita(5)
      ENDIF
      IF (NVCONT.EQ.0.AND.NY.GT.1) GOTO 190                             1118
c      nvco=icvmgt(1,nvcont,nvcont.eq.0 .and. ny.eq.1)
      DO 180 N = 1, NVCO                                                1120
         IF (NVCONT.EQ.0.AND.NY.EQ.1) GOTO 160                          1121
         READ (5, 690) XEC, YEC, ZEC, ISLC(N), JSLC(N), KSLC(N)         1122
         KSLC(N) = MIN0(KSLC(N), NZ)                                    1123
         WRITE (12, 695) XEC, YEC, ZEC, ISLC(N), JSLC(N), KSLC(N)       1124
         IF (NY.GT.1) GOTO 170                                          1125
160      XEC = 0.                                                       1126
         YEC = -1.0E10                                                  1127
         ZEC = ZCPLOT                                                   1128
         ISLC(N) = 0                                                    1129
         JSLC(N) = 1                                                    1130
         KSLC(N) = 0                                                    1131
170      CONTINUE                                                       1132
         IF (XEC.EQ.XCPLOT) XEC = XEC+1.E-6                             1132
         IF (YEC.EQ.YCPLOT) YEC = YEC+1.E-6                             1133
         IF (ZEC.EQ.ZCPLOT) ZEC = ZEC+1.E-6                             1134
         XDIST = XEC-XCPLOT                                             1135
         YDIST = YEC-YCPLOT                                             1136
         ZDIST = ZEC-ZCPLOT                                             1137
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)                 1138
         RADEYE = SQRT(ZDIST**2+GROUND**2)                              1139
         XOG = XDIST/GROUND                                             1140
c +++
c +++ avoid asin of 1.0 + low-order bit, which can occur on cray
c +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)                     1144
         THETA = ASIN(XOG)                                              1145
         YOG = YDIST/GROUND                                             1146
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)                     1147
         Q1 = ASIN(YOG)+PIO2                                            1148
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1                    1149
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1                   1150
         ZOR = ZDIST/RADEYE                                             1151
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)                     1152
         PHI = ASIN(ZOR)                                                1153
         SINTHC(N) = SIN(THETA)                                         1154
         COSTHC(N) = COS(THETA)                                         1155
         SINPHC(N) = SIN(PHI)                                           1156
         COSPHC(N) = COS(PHI)                                           1157
         XBEC(N) = XDIST*COSTHC(N)+YDIST*SINTHC(N)                      1158
         YZTERM = YDIST*COSTHC(N)-XDIST*SINTHC(N)                       1159
         YBEC(N) = COSPHC(N)*YZTERM-ZDIST*SINPHC(N)                     1160
         ZBEC(N) = SINPHC(N)*YZTERM+ZDIST*COSPHC(N)                     1161
180      CONTINUE                                                       1162
      IF (NY.EQ.1) NVCONT = 1                                           1163
c +++
c +++ species data input:
c +++ species #1 is assumed to be the fuel, and subroutine
c +++ fuel is called to identify it from the formula
c +++ supplied below, and to assign all required data beyond
c +++ the initial density.  for the remaining species, the
c +++ formula, initial density, molecular weight, and heat
c +++ of formation are read in below.  htform is converted
c +++ from kcal/mole to cgs units for all the species.
c +++ copy species formulae to idcon table, for contour plot labels
c +++
190   READ (5, 600) ID(1), NSP                                          1175
      WRITE (12, 710) ID(1), NSP                                        1176
      IF (NSP.GT.LNSP.OR.LNSP.LT.3.AND.NCHOP.GT.0) THEN                 1177
         WRITE (59, '(a)') ' nsp > lnsp, or lnsp < 3 and chopper on'    1178
c        call exita(5)
      ENDIF
      DO 200 ISP = 1, NSP                                               1181
         IF (ISP.EQ.1) THEN                                             1182
            READ (5, 720) IDSP(1), ID(1), RHOI(1)                       1183
c        call fuel
            ID(2) = ' mw1  '                                            1185
            ID(3) = ' htf1 '                                            1186
         ELSE
            READ (5, 730) IDSP(ISP), ID(1), RHOI(ISP), ID(2), MW(ISP)   1188
     &      , ID(3), HTFORM(ISP)                                        1188
         ENDIF
         RMW(ISP) = 1./MW(ISP)                                          1191
         HTFORM(ISP) = HTFORM(ISP)*4.184E+10                            1192
         WRITE (12, 740) IDSP(ISP), ID(1), RHOI(ISP), ID(2), MW(ISP)    1193
     &   , ID(3), HTFORM(ISP)                                           1193
         IDCON(ISP+11) = IDSP(ISP)                                      1195
200      CONTINUE                                                       1196
c +++
c +++ calculate initial droplet oscillation frequency at injector.
c +++ stinj is surface tension of injected fuel, visinj is its viscosity
c +++
      IF (TPI.GT.TCRIT.OR.BREAKUP.EQ.0.0.OR.NUMNOZ.EQ.0) GOTO 210       1201
      STINJ = AMAX1(STM*TPI+STB, 1.E-6)                                 1202
      TB = TPI*0.1                                                      1203
      ITB = INT(TB)                                                     1204
      FR = TB-FLOAT(ITB)                                                1205
      VISINJ = FR*VISLIQ(ITB+2)+(1.0-FR)*VISLIQ(ITB+1)                  1206
      VISINJ = AMAX1(VISINJ, 1.E-10)                                    1207
      DO 205 I = 1, NUMNOZ                                              1208
         OSCIL0(I) = SQRT(CSUBK*STINJ/(RHOP*SMR(I)**3)-(CSUBMU*VISINJ   1209
     &   /(2.0*RHOP*SMR(I)**2))**2)                                     1209
205      CONTINUE                                                       1211
c +++
c +++ read in boundary condition data for right, top, bottom
c +++
210   READ (5, 610) ID(1), RTOUT, ID(2), TOPOUT, ID(3), BOTIN           1215
      WRITE (12, 620) ID(1), RTOUT, ID(2), TOPOUT, ID(3), BOTIN         1216
      BOTFAC = FRESLP*(1.-BOTIN)                                        1217
      RTFAC = FRESLP*(1.-RTOUT)                                         1218
      TOPFAC = FRESLP*(1.-TOPOUT)                                       1219
      BOTCYL = BOTIN*CYL                                                1220
c      rtnoslp=cvmgt(1.0,0.0,rtout.eq.0.0 .and. freslp.eq.0.0)
C
CAS STATIONNAIRE
      IF (MSHEXT.EQ.1.AND.RPM.EQ.0..AND.BOTIN+TOPOUT.GT.0.0) GOTO       1224
     &99998                                                             1224
C
      IF (RTOUT+TOPOUT+BOTIN.GT.0.0) THEN                               1232
         READ (5, 610) ID(1), DISTAMB, ID(2), PAMB, ID(3), TKEAMB, ID   1233
     &   (4), SCLAMB                                                    1233
         WRITE (12, 620) ID(1), DISTAMB, ID(2), PAMB, ID(3), TKEAMB,    1234
     &   ID(4), SCLAMB                                                  1234
         SCLAMB = SCLAMB/CMUEPS                                         1235
         DO 215 ISP = 1, NSP                                            1236
            READ (5, 610) ID(1), SPDAMB(ISP)                            1237
            WRITE (12, 620) ID(1), SPDAMB(ISP)                          1238
215         CONTINUE                                                    1239
      ENDIF
      IF (BOTIN.EQ.1.0) THEN                                            1241
         READ (5, 610) ID(1), WIN                                       1242
         WRITE (12, 620) ID(1), WIN                                     1243
         DO 220 ISP = 1, NSP                                            1244
            READ (5, 610) ID(1), SPDIN0(ISP)                            1245
            WRITE (12, 620) ID(1), SPDIN0(ISP)                          1246
220         CONTINUE                                                    1247
      ENDIF
c +++
c +++ read in kinetic reaction data
c +++
224   CONTINUE                                                          1252
C
      READ (5, 600) ID(1), NRK                                          1254
      WRITE (12, 600) ID(1), NRK                                        1255
      IF (NRK.EQ.0) GOTO 250                                            1256
      IF (NRK.GT.LNRK) THEN                                             1257
         WRITE (59, '(a)') ' parameter error:  nrk > lnrk'              1258
c        call exita(5)
      ENDIF
      DO 240 IR = 1, NRK                                                1261
         READ (5, 750) CF(IR), EF(IR), ZETAF(IR)                        1262
         READ (5, 750) CB(IR), EB(IR), ZETAB(IR)                        1263
         READ (5, 780) (AM(ISP,IR), ISP = 1, NSP)                       1264
         READ (5, 780) (BM(ISP,IR), ISP = 1, NSP)                       1265
         READ (5, 790) (AE(ISP,IR), ISP = 1, NSP)                       1266
         READ (5, 790) (BE(ISP,IR), ISP = 1, NSP)                       1267
c +++
c +++ set reaction-species index arrays
c +++
         NK = 0                                                         1271
         QR(IR) = 0.                                                    1272
         DO 230 ISP = 1, NSP                                            1273
            IF (AM(ISP,IR).EQ.0.AND.BM(ISP,IR).EQ.0) GOTO 230           1274
            NK = NK+1                                                   1275
            CM(NK,IR) = ISP                                             1276
            FAM(ISP,IR) = FLOAT(AM(ISP,IR))                             1277
            FBM(ISP,IR) = FLOAT(BM(ISP,IR))                             1278
            FBMAM(ISP,IR) = FBM(ISP,IR)-FAM(ISP,IR)                     1279
            QR(IR) = QR(IR)-FBMAM(ISP,IR)*HTFORM(ISP)                   1280
230         CONTINUE                                                    1281
         NELEM(IR) = NK                                                 1282
         WRITE (12, 800) IR, QR(IR)                                     1283
         WRITE (12, 810) CF(IR), EF(IR), ZETAF(IR)                      1284
         WRITE (12, 820) CB(IR), EB(IR), ZETAB(IR)                      1285
         MESS = ' lhs'                                                  1286
         WRITE (12, 830) MESS, (AM(ISP,IR), ISP = 1, NSP)               1287
         MESS = ' rhs'                                                  1288
         WRITE (12, 830) MESS, (BM(ISP,IR), ISP = 1, NSP)               1289
         MESS = ' for'                                                  1290
         WRITE (12, 840) MESS, (AE(ISP,IR), ISP = 1, NSP)               1291
         MESS = 'back'                                                  1292
         WRITE (12, 840) MESS, (BE(ISP,IR), ISP = 1, NSP)               1293
240      CONTINUE                                                       1294
c +++
c +++ read in equilibrium reaction data only when the general
c +++ equilibrium solver is specified (kwikeq=0):
c +++
250   IF (KWIKEQ.EQ.1) GOTO 280                                         1299
      READ (5, 600) ID(1), NRE                                          1300
      WRITE (12, 600) ID(1), NRE                                        1301
      IF (NRE.EQ.0) GOTO 280                                            1302
      IF (NRE.GT.LNRE) THEN                                             1303
         WRITE (59, '(a)') ' parameter error:  nre > lnre'              1304
c        call exita(5)
      ENDIF
      DO 270 IRE = 1, NRE                                               1307
         READ (5, 760) AS(IRE), BS(IRE), CS(IRE), DS(IRE), ES(IRE)      1308
         READ (5, 780) (AN(ISP,IRE), ISP = 1, NSP)                      1309
         READ (5, 780) (BN(ISP,IRE), ISP = 1, NSP)                      1310
         NK = 0                                                         1311
         QEQ(IRE) = 0.                                                  1312
         DO 260 ISP = 1, NSP                                            1313
            IF (AN(ISP,IRE).EQ.0.AND.BN(ISP,IRE).EQ.0) GOTO 260         1314
            NK = NK+1                                                   1315
            CN(NK,IRE) = ISP                                            1316
            FBNAN(ISP,IRE) = FLOAT(BN(ISP,IRE))-FLOAT(AN(ISP,IRE))      1317
            QEQ(IRE) = QEQ(IRE)-FBNAN(ISP,IRE)*HTFORM(ISP)              1318
260         CONTINUE                                                    1319
         NLM(IRE) = NK                                                  1320
         WRITE (12, 850) IRE, AS(IRE), BS(IRE), CS(IRE), DS(IRE), ES(   1321
     &   IRE)                                                           1321
         WRITE (12, 860) QEQ(IRE), NLM(IRE)                             1322
         MESS = 'an'                                                    1323
         WRITE (12, 870) MESS, (AN(ISP,IRE), ISP = 1, NSP)              1324
         MESS = 'bn'                                                    1325
         WRITE (12, 870) MESS, (BN(ISP,IRE), ISP = 1, NSP)              1326
         MESS = 'cn'                                                    1327
         WRITE (12, 870) MESS, (CN(ISP,IRE), ISP = 1, NSP)              1328
270      CONTINUE                                                       1329
      GOTO 280
99998 CONTINUE
      READ (5, 610) ID(1), DISTAMB, ID(2), PAMB, ID(3), SCLAMB          1225
      WRITE (12, 620) ID(1), DISTAMB, ID(2), PAMB, ID(3), SCLAMB        1226
      SCLAMB = SCLAMB/CMUEPS                                            1227
C +++     LES AUTRES VALEURS SONT DEFINIES DANS SETUP.
      GOTO 224
99999 CONTINUE
C
      IF (SGSL.EQ.0.0) SGSL = RPO(NPO)                                  0859
      SCLMX = SGSL/CMUEPS                                               0860
      RSCLMX = 1.0/SCLMX                                                0861
C
      SKIPCO(1) = 1.0                                                   0863
      SKIPCO(NPO) = 1.0                                                 0864
      FLAT = 1.0                                                        0865
      DO 40 N = 2, NPO-1                                                0866
c      flat=cvmgt(0.0,flat,zpo(n).ne.zpo(1))
         NF = N+1                                                       0868
         NB = N-1                                                       0869
         DRF = RPO(NF)-RPO(N)                                           0870
         DZF = ZPO(NF)-ZPO(N)                                           0871
         DRB = RPO(NB)-RPO(N)                                           0872
         DZB = ZPO(NB)-ZPO(N)                                           0873
         DFDB = SQRT((DRF**2+DZF**2)*(DRB**2+DZB**2))                   0874
         COSINE = (DRF*DRB+DZF*DZB)/DFDB                                0875
         SINE = DRB*DZF-DRF*DZB                                         0876
c      skipco(n)=cvmgt(0.0,1.0,cosine.gt.-0.573576 .and. sine.gt.0.0)
c      skipco(n)=cvmgt(-1.0,skipco(n),
c     &                cosine.gt.-0.573576 .and. sine.lt.0.0)
40       CONTINUE                                                       0880
      ZHEAD = STROKE+ZPO(NPO)+SQUISH                                    0881
      ZHBOT = ZHEAD                                                     0882
      KPTOP = KPO(NPO)                                                  0883
c      nchop=icvmgz(0,nchop,rpm)
c      nchop=cvmgt(0,nchop,nchop.ge.nz)
c      nchop=cvmgt(2,nchop,nchop.eq.1)
      IF (NCHOP.EQ.0) GOTO 50                                           0887
c +++
c +++ alternatively, to delay chopping in bowl geometry, set
c +++ dzchop = 0.999*squish / float(nchop)
c +++
c      dzchop=cvmgz(float(nchop+1),0.999,flat) * squish/float(nchop)
      WRITE (12, 770) DZCHOP                                            0893
      WRITE (59, 770) DZCHOP                                            0894
c +++
c +++ read data defining head outline
c +++
CMODIF1
      GOTO 50
c +++
c +++ convert hk arrays of enthalpy (in kcal/mole) to ek arrays
c +++ of sie (in ergs/gm).  1.987e-03 is universal gas constant
c +++ in kcal/mole degree kelvin; 4.184e+10 is ergs/kcal.  terms
c +++ in () represent sie in kcal/mole, with reference to zero
c +++ at absolute zero:
c +++
280   CONTINUE                                                          1337
      DO 290 ISP = 1, LNSP                                              1337
         HKZERO = HK(1,ISP)                                             1338
         DO 290 N = 1, 51                                               1339
            TEMPE = 100.*FLOAT(N-1)                                     1340
            EK(N,ISP) = 4.184E+10*RMW(ISP)*(HK(N,ISP)-HKZERO-           1341
     &      1.987E-03*TEMPE)                                            1341
290         CONTINUE                                                    1342
CMODIF1
C       DO 291 ISP=13,14
C       DO 291 N=1,51
C       EK(N,ISP)=EK(N,1)
C  291 CONTINUE
CMODIF2
c +++
c +++ convert latent heat of the liquid using these ek(n,1) values
c +++
      DO 310 N = 1, 51                                                  1352
         TEMPE = 100.*FLOAT(N-1)                                        1353
         IF (TEMPE.GE.TCRIT) GOTO 300                                   1354
         ELIQ(N) = EK(N,1)+RGAS*TEMPE*RMW(1)-PVAP(10*N-9)/RHOP-HLAT0(   1355
     &   N)                                                             1355
         GOTO 310
300      ELIQ(N) = EK(N,1)                                              1357
310      CONTINUE                                                       1358
c +++
c +++ create inverse error function table, used in subroutine
c +++ pmovtv for computing turbulent velocity components
c +++
      RERF(1) = 0.                                                      1363
      RERF(21) = 2.                                                     1364
      DO 330 K = 2, 20                                                  1365
         ERR = 0.05*FLOAT(K-1)                                          1366
         XG = ERR*(1.+ERR)                                              1367
320      CONTINUE                                                       1368
c     fn=erf(xg)-err
         DFN = 0.8862269255*EXP(XG*XG)                                  1370
         DIFF = -FN*DFN                                                 1371
         XG = XG+DIFF                                                   1372
         IF (ABS(DIFF).LT.1.E-07) THEN                                  1373
         ELSE
            GOTO 320
         ENDIF
330      CONTINUE                                                       1375
         RERF(K) = XG                                                   1375
c +++
c +++ create spray mass fraction table, used to calc. radp in inject
c +++
      XX = 12.0                                                         1379
      RRD100 = 1.0/(1.0-EXP(-XX)*(1.+XX+.5*XX**2+SIXTH*XX**3))          1380
      DO 340 N = 1, 100                                                 1381
         XX = 0.12*FLOAT(N)                                             1382
         RDINJ(N) = (1.0-EXP(-XX)*(1.+XX+.5*XX**2+SIXTH*XX**3))*        1383
     &   RRD100                                                         1383
340      CONTINUE                                                       1384
C
C
C       MODIF POUR RESTART:
C
      IF (MSHEXT.EQ.1.AND.IREST.NE.0) THEN                              1389
         NPO = 1                                                        1390
         NHO = 0                                                        1391
         IF (NKC.NE.0) NHO = 1                                          1392
         RPO(NPO) = RAYON                                               1393
         KPO(NPO) = KPTOP                                               1394
         KHO(NHO) = KPTOP2                                              1395
         IF (SGSL.EQ.0.0) SGSL = RPO(NPO)                               1396
         SCLMX = SGSL/CMUEPS                                            1397
         RSCLMX = 1.0/SCLMX                                             1398
C
         IF (NZLU.NE.NZSAVE) THEN                                       1400
            KIGNB(1) = KIGNB1                                           1401
            KIGNB(2) = KIGNB2                                           1402
            KIGNT(1) = KIGNT1                                           1403
            KIGNT(2) = KIGNT2                                           1404
         ENDIF
C
         IF (CRANK.LT.CADUMP) CDUMP = CADUMP                            1407
C
         RHOI(1) = XCAR*RHO0                                            1409
         RHOI(2) = XAIR*RHO0*FO2                                        1410
         RHOI(3) = XAIR*RHO0*FN2                                        1411
         RHOI(4) = 0.0                                                  1412
         RHOI(5) = 0.0                                                  1413
         OPEN (UNIT=13,FILE='swirl.evol',FORM='FORMATTED')              1414
         OPEN (UNIT=14,FILE='tumbl.evol',FORM='FORMATTED')              1415
         OPEN (UNIT=10,FILE='brule.ebu',FORM='FORMATTED')               1416
         OPEN (UNIT=15,FILE='debit.ncyc',FORM='FORMATTED')              1417
         WRITE (13, 8007)                                               1418
         WRITE (14, 8006)                                               1419
         WRITE (10, 8012)                                               1420
         WRITE (15, 8015)                                               1421
      ENDIF
C
C
C
      END

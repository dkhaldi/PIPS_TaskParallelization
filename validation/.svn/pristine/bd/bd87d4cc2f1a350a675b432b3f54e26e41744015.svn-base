
Source code with transformers


//  T(shift05) {0<=shift05}

int shift05(int i, int k)
{

//  T(j) {i==j}

   int j = i;

//  T(l) {i==j, l==-1}

   int l = -1;

//  T() {i==j, l==-1}

   int m;

//  T() {i==j, l==-1}

   int n;

//  T() {i==j, l==-1}

   int o;

//  T(j,o) {i==j#init, l==-1, 0<=j}


   if (i>0) {

//  T(j) {i==j#init, l==-1, 1<=i, 4<=j}

      j = 2<<i;

//  T(o) {j==o, l==-1, 1<=i, 4<=j}

      o = j;
   }
   else if (i==0)

//  T(j) {i==0, j==2, j#init==0, l==-1}

      j = 2<<i;
   else

//  T(j) {i==j#init, j==0, l==-1, i+1<=0}

      // i<0
      j = 2<<i;

//  T(m) {l==-1, 0<=j, 0<=m}


   m = 2<<i;

//  T(n) {l==-1, 0<=j, 0<=m, n<=0}

   n = -2<<i;

//  T() {l==-1, 0<=j, 0<=m, n<=0}

   
   // j=2097152, l=-1, m=2097152, n=-2097152, o=2097152
   printf("j=%d, l=%d, m=%d, n=%d, o=%d\n", j, l, m, n, o);

//  T(shift05) {j==shift05, l==-1, 0<=j, 0<=m, n<=0}

   return j;
}

Source code with preconditions


//  P() {i==20, k==2}

int shift05(int i, int k)
{

//  P() {i==20, k==2}

   int j = i;

//  P(j) {i==20, j==20, k==2}

   int l = -1;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int m;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int n;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int o;

//  P(j,l) {i==20, j==20, k==2, l==-1}


   if (i>0) {

//  P(j,l) {i==20, j==20, k==2, l==-1}

      j = 2<<i;

//  P(j,l) {i==20, k==2, l==-1, 4<=j}

      o = j;
   }
   else if (i==0)

//  P() {0==-1}

      j = 2<<i;
   else

//  P() {0==-1}

      // i<0
      j = 2<<i;

//  P(j,l,o) {i==20, j==o, k==2, l==-1, 4<=j}


   m = 2<<i;

//  P(j,l,m,o) {i==20, j==o, k==2, l==-1, 4<=j, 0<=m}

   n = -2<<i;

//  P(j,l,m,n,o) {i==20, j==o, k==2, l==-1, 4<=j, 0<=m, n<=0}

   
   // j=2097152, l=-1, m=2097152, n=-2097152, o=2097152
   printf("j=%d, l=%d, m=%d, n=%d, o=%d\n", j, l, m, n, o);

//  P(j,l,m,n,o) {i==20, j==o, k==2, l==-1, 4<=j, 0<=m, n<=0}

   return j;
}

Source code with preconditions after transformer refinment


//  P() {i==20, k==2}

int shift05(int i, int k)
{

//  P() {i==20, k==2}

   int j = i;

//  P(j) {i==20, j==20, k==2}

   int l = -1;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int m;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int n;

//  P(j,l) {i==20, j==20, k==2, l==-1}

   int o;

//  P(j,l) {i==20, j==20, k==2, l==-1}


   if (i>0) {

//  P(j,l) {i==20, j==20, k==2, l==-1}

      j = 2<<i;

//  P(j,l) {i==20, j==2097152, k==2, l==-1}

      o = j;
   }
   else if (i==0)

//  P() {0==-1}

      j = 2<<i;
   else

//  P() {0==-1}

      // i<0
      j = 2<<i;

//  P(j,l,o) {i==20, j==2097152, k==2, l==-1, o==2097152}


   m = 2<<i;

//  P(j,l,m,o) {i==20, j==2097152, k==2, l==-1, m==2097152,
//    o==2097152}

   n = -2<<i;

//  P(j,l,m,n,o) {i==20, j==2097152, k==2, l==-1, m==2097152,
//    n==-2097152, o==2097152}

   
   // j=2097152, l=-1, m=2097152, n=-2097152, o=2097152
   printf("j=%d, l=%d, m=%d, n=%d, o=%d\n", j, l, m, n, o);

//  P(j,l,m,n,o) {i==20, j==2097152, k==2, l==-1, m==2097152,
//    n==-2097152, o==2097152}

   return j;
}


TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x, y, m, n, i1, i2;

//  T(i1,i2,x,y) {i1==0, i2==0, x==0, y==0}

   x = y = i1 = i2 = 0;

//  T(m) {i1==0, i2==0, x==0, y==0, 0<=m}

   m = rand();

//  T(n) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   n = rand();

//  T() {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(i1<=m&&i2<=n))

//  T() {0==-1}

      checking_error();

//  T(i1,i2,x,y) {i2==x, i2#init==x#init, i1<=m, 0<=i2, i2<=n,
//    x#init<=i2, 0<=m, y<=m}

   while (rand_b())

//  T(i1,i2,x,y) {i2+x#init==i2#init+x, i1<=m, i2<=n, 0<=m, y<=m,
//    0<=n, x#init+1<=n, x#init<=x, x<=x#init+1, x+y<=x#init+y#init+1}

      if (rand_b()) {

//  T() {0<=m, y+1<=m, 0<=n, x+1<=n}

         if (!(x<n&&y<m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==y#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         y++;

//  T(i1) {i1==i1#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         i1++;

//  T() {i1<=m, i2<=n, 0<=m, y<=m, 0<=n, x+1<=n}

         if (!(i1<=m&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {0<=m, m<=y, 0<=n, x+1<=n}

         if (!(x<n&&y>=m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==0, 0<=m, m<=y#init, 0<=n, x+1<=n}

         y = 0;

//  T(x) {x==x#init+1, y==0, 0<=m, 0<=n, x<=n}

         x++;

//  T(i1) {i1==0, y==0, 0<=m, 0<=n, x<=n}

         i1 = 0;

//  T(i2) {i1==0, i2==i2#init+1, y==0, 0<=m, 0<=n, x<=n}

         i2++;

//  T() {i1==0, y==0, i2<=n, 0<=m, 0<=n, x<=n}

         if (!(i1<=m&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x, y, m, n, i1, i2;

//  T(i1,i2,x,y) {i1==0, i2==0, x==0, y==0}

   x = y = i1 = i2 = 0;

//  T(m) {i1==0, i2==0, x==0, y==0, 0<=m}

   m = rand();

//  T(n) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   n = rand();

//  T() {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(i1<=m&&i2<=n))

//  T() {0==-1}

      checking_error();

//  T() {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  T() {i1==0, i2==0, x==0, y==0, 0<=m, 1<=n}

   if (y<m) goto L1;

//  T() {i1==m, i1==y, i2==0, x==0, 0<=i1, 1<=n}

L2:   ;

//  T(i1,i2,x,y) {i1==m, i1==y, i2==x, i2#init==x#init, 0<=i1,
//    i1<=y#init, 0<=i2, i2#init<=i2, i2+1<=n}

   while (rand_b())

//  T(i1,i2,x,y) {i1==m, i1==y, i2==i2#init+1, x==x#init+1, 0<=i1,
//    i1<=y#init, i2<=n, 1<=n, x+1<=n}

      if (rand_b()) {

//  T() {m==0, 1<=n, x+2<=n, 0<=y}

         if (!(x<n-1&&y>=m&&0>=m))

//  T() {0==-1}

            deadlock();

//  T(y) {m==0, y==0, 1<=n, x+2<=n, 0<=y#init}

         y = 0;

//  T(x) {m==0, x==x#init+1, y==0, 1<=n, x+1<=n}

         x++;

//  T(i1) {i1==0, m==0, y==0, 1<=n, x+1<=n}

         i1 = 0;

//  T(i2) {i1==0, i2==i2#init+1, m==0, y==0, 1<=n, x+1<=n}

         i2++;

//  T() {i1==0, m==0, y==0, i2<=n, 1<=n, x+1<=n}

         if (!(i1<=m&&i2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {1<=m, m<=y, 1<=n, x+2<=n}

         if (!(x<n-1&&y>=m&&0<m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==0, 1<=m, m<=y#init, 1<=n, x+2<=n}

         y = 0;

//  T(x) {x==x#init+1, y==0, 1<=m, 1<=n, x+1<=n}

         x++;

//  T(i1) {i1==0, y==0, 1<=m, 1<=n, x+1<=n}

         i1 = 0;

//  T(i2) {i1==0, i2==i2#init+1, y==0, 1<=m, 1<=n, x+1<=n}

         i2++;

//  T() {i1==0, y==0, i2<=n, 1<=m, 1<=n, x+1<=n}

         if (!(i1<=m&&i2<=n))

//  T() {0==-1}

            checking_error();

//  T(i1,y) {i1==y, i1#init==y#init, 0<=i1, i1+1<=m, y#init<=i1,
//    i2<=n, 1<=n, x+1<=n}

         while (rand_b()) {

//  T() {i2<=n, 1<=m, y+2<=m, 1<=n, x+1<=n}

            if (!(x<n&&y<m-1))

//  T() {0==-1}

               deadlock();

//  T(y) {y==y#init+1, i2<=n, 1<=m, y+1<=m, 1<=n, x+1<=n}

            y++;

//  T(i1) {i1==i1#init+1, i2<=n, 1<=m, y+1<=m, 1<=n, x+1<=n}

            i1++;

//  T() {i1<=m, i2<=n, 1<=m, y+1<=m, 1<=n, x+1<=n}

            if (!(i1<=m&&i2<=n))

//  T() {0==-1}

               checking_error();
         }

//  T() {i1==m-1, i1==y, 0<=i1, i2<=n, 1<=n, x+1<=n}

         if (!(x<n&&y==m-1))

//  T() {0==-1}

            deadlock();

//  T(y) {i1==m-1, i1==y-1, i1==y#init, 0<=i1, i2<=n, 1<=n, x+1<=n}

         y++;

//  T(i1) {i1==i1#init+1, i1==m, i1==y, 1<=i1, i2<=n, 1<=n, x+1<=n}

         i1++;

//  T() {i1==m, i1==y, 1<=i1, i2<=n, 1<=n, x+1<=n}

         if (!(i1<=m&&i2<=n))

//  T() {0==-1}

            checking_error();
      }

//  T() {i2==n-1, i2==x, m==y, 0<=i2, 0<=m}

   if (!(x==n-1&&y>=m))

//  T() {0==-1}

      deadlock();

//  T(y) {i2==n-1, i2==x, m==y#init, y==0, 0<=i2, 0<=m}

   y = 0;

//  T(x) {i2==n-1, i2==x-1, i2==x#init, y==0, 0<=i2, 0<=m}

   x++;

//  T(i1) {i1==0, i2==n-1, i2==x-1, y==0, 0<=i2, 0<=m}

   i1 = 0;

//  T(i2) {i1==0, i2==i2#init+1, i2==n, i2==x, y==0, 1<=i2, 0<=m}

   i2++;

//  T() {i1==0, i2==n, i2==x, y==0, 1<=i2, 0<=m}

   if (!(i1<=m&&i2<=n))

//  T() {0==-1}

      checking_error();
   goto L3;

//  T() {i1==0, i2==0, x==0, y==0, 1<=m, 1<=n}

L1:   ;

//  T(i1,y) {i1==y, i1#init==y#init, i2==0, x==0, 0<=i1, i1+1<=m,
//    y#init<=i1, 1<=n}

   while (rand_b()) {

//  T() {i2==0, x==0, 1<=m, y+2<=m, 1<=n}

      if (!(x<n&&y<m-1))

//  T() {0==-1}

         deadlock();

//  T(y) {i2==0, x==0, y==y#init+1, 1<=m, y+1<=m, 1<=n}

      y++;

//  T(i1) {i1==i1#init+1, i2==0, x==0, 1<=m, y+1<=m, 1<=n}

      i1++;

//  T() {i2==0, x==0, i1<=m, 1<=m, y+1<=m, 1<=n}

      if (!(i1<=m&&i2<=n))

//  T() {0==-1}

         checking_error();
   }

//  T() {i1==m-1, i1==y, i2==0, x==0, 0<=i1, 1<=n}

   if (!(x<n&&y==m-1))

//  T() {0==-1}

      deadlock();

//  T(y) {i1==m-1, i1==y-1, i1==y#init, i2==0, x==0, 0<=i1, 1<=n}

   y++;

//  T(i1) {i1==i1#init+1, i1==m, i1==y, i2==0, x==0, 1<=i1, 1<=n}

   i1++;

//  T() {i1==m, i1==y, i2==0, x==0, 1<=i1, 1<=n}

   if (!(i1<=m&&i2<=n))

//  T() {0==-1}

      checking_error();
   goto L2;

//  T() {i1==0, i2==n, i2==x, y==0, 0<=i2, 0<=m}

L3:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x, y, m, n, i1, i2;

//  P() {}

   x = y = i1 = i2 = 0;

//  P(i1,i2,x,y) {i1==0, i2==0, x==0, y==0}

   m = rand();

//  P(i1,i2,m,x,y) {i1==0, i2==0, x==0, y==0, 0<=m}

   n = rand();

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(i1<=m&&i2<=n))

//  P() {0==-1}

      checking_error();

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   while (rand_b())

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2<=n, 0<=m, y<=m}

      if (rand_b()) {

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2<=n, 0<=m, y<=m}

         if (!(x<n&&y<m))

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2<=n, 0<=m, y<=m}

            deadlock();

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2+1<=n, 0<=m, y+1<=m}

         y++;

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2+1<=n, 0<=m, y<=m, 0<=n}

         i1++;

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m+1, 0<=i2, i2+1<=n, 0<=m, y<=m,
//    0<=n}

         if (!(i1<=m&&i2<=n))

//  P(i1,i2,m,n,x,y) {i1==m+1, i2==x, 1<=i1, y+1<=i1, 0<=i2, i2+1<=n,
//    0<=n}

            checking_error();
      }
      else {

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2<=n, 0<=m, y<=m}

         if (!(x<n&&y>=m))

//  P(i1,i2,m,n,x,y) {i2==x, i1<=m, 0<=i2, i2<=n, 0<=m, y<=m}

            deadlock();

//  P(i1,i2,m,n,x,y) {i2==x, m==y, i1<=m, 0<=i2, i2+1<=n, 0<=m}

         y = 0;

//  P(i1,i2,m,n,x,y) {i2==x, y==0, i1<=m, 0<=i2, i2+1<=n, 0<=m, 0<=n}

         x++;

//  P(i1,i2,m,n,x,y) {i2==x-1, y==0, i1<=m, 0<=i2, i2+1<=n, 0<=m,
//    0<=n}

         i1 = 0;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x-1, y==0, 0<=i2, i2+1<=n, 0<=m,
//    0<=n}

         i2++;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, y==0, 1<=i2, i2<=n, 0<=m, 0<=n}

         if (!(i1<=m&&i2<=n))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x, y, m, n, i1, i2;

//  P() {}

   x = y = i1 = i2 = 0;

//  P(i1,i2,x,y) {i1==0, i2==0, x==0, y==0}

   m = rand();

//  P(i1,i2,m,x,y) {i1==0, i2==0, x==0, y==0, 0<=m}

   n = rand();

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(i1<=m&&i2<=n))

//  P() {0==-1}

      checking_error();

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 0<=m, 0<=n}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 0<=m, 1<=n}

   if (y<m) goto L1;

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==0, x==0, 0<=i1, 1<=n}

L2:   ;

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==0, x==0, 0<=i1, 1<=n}

   while (rand_b())

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

      if (rand_b()) {

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

         if (!(x<n-1&&y>=m&&0>=m))

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

            deadlock();

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, m==0, y==0, 0<=i2, i2+2<=n}

         y = 0;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, m==0, y==0, 0<=i2, i2+2<=n, 1<=n}

         x++;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x-1, m==0, y==0, 0<=i2, i2+2<=n,
//    1<=n}

         i1 = 0;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x-1, m==0, y==0, 0<=i2, i2+2<=n,
//    1<=n}

         i2++;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, m==0, y==0, 1<=i2, i2+1<=n, 1<=n}

         if (!(i1<=m&&i2<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

         if (!(x<n-1&&y>=m&&0<m))

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

            deadlock();

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 1<=i1, 0<=i2, i2+2<=n}

         y = 0;

//  P(i1,i2,m,n,x,y) {i1==m, i2==x, y==0, 1<=i1, 0<=i2, i2+2<=n, 1<=n}

         x++;

//  P(i1,i2,m,n,x,y) {i1==m, i2==x-1, y==0, 1<=i1, 0<=i2, i2+2<=n,
//    1<=n}

         i1 = 0;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x-1, y==0, 0<=i2, i2+2<=n, 1<=m,
//    1<=n}

         i2++;

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, y==0, 1<=i2, i2+1<=n, 1<=m, 1<=n}

         if (!(i1<=m&&i2<=n))

//  P() {0==-1}

            checking_error();

//  P(i1,i2,m,n,x,y) {i1==0, i2==x, y==0, 1<=i2, i2+1<=n, 1<=m, 1<=n}

         while (rand_b()) {

//  P(i1,i2,m,n,x,y) {i1==y, i2==x, 0<=i1, i1+1<=m, 1<=i2, i2+1<=n}

            if (!(x<n&&y<m-1))

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y, i2==x, 0<=i1, 1<=i2, i2+1<=n}

               deadlock();

//  P(i1,i2,m,n,x,y) {i1==y, i2==x, 0<=i1, i1+2<=m, 1<=i2, i2+1<=n}

            y++;

//  P(i1,i2,m,n,x,y) {i1==y-1, i2==x, 0<=i1, i1+2<=m, 1<=i2, i2+1<=n,
//    1<=m, 1<=n}

            i1++;

//  P(i1,i2,m,n,x,y) {i1==y, i2==x, 1<=i1, i1+1<=m, 1<=i2, i2+1<=n,
//    1<=m, 1<=n}

            if (!(i1<=m&&i2<=n))

//  P() {0==-1}

               checking_error();
         }

//  P(i1,i2,m,n,x,y) {i1==y, i2==x, 0<=i1, i1+1<=m, 1<=i2, i2+1<=n,
//    1<=n}

         if (!(x<n&&y==m-1))

//  P(i1,i2,m,n,x,y) {i1==y, i2==x, 0<=i1, i1+2<=m, 1<=i2, i2+1<=n,
//    1<=n}

            deadlock();

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y, i2==x, 0<=i1, 1<=i2, i2+1<=n,
//    1<=n}

         y++;

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y-1, i2==x, 0<=i1, 1<=i2, i2+1<=n,
//    1<=n}

         i1++;

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 1<=i1, 1<=i2, i2+1<=n,
//    1<=n}

         if (!(i1<=m&&i2<=n))

//  P() {0==-1}

            checking_error();
      }

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+1<=n}

   if (!(x==n-1&&y>=m))

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==x, 0<=i1, 0<=i2, i2+2<=n}

      deadlock();

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==n-1, i2==x, 0<=i1, 0<=i2}

   y = 0;

//  P(i1,i2,m,n,x,y) {i1==m, i2==n-1, i2==x, y==0, 0<=i1, 0<=i2}

   x++;

//  P(i1,i2,m,n,x,y) {i1==m, i2==n-1, i2==x-1, y==0, 0<=i1, 0<=i2}

   i1 = 0;

//  P(i1,i2,m,n,x,y) {i1==0, i2==n-1, i2==x-1, y==0, 0<=i2, 0<=m}

   i2++;

//  P(i1,i2,m,n,x,y) {i1==0, i2==n, i2==x, y==0, 1<=i2, 0<=m}

   if (!(i1<=m&&i2<=n))

//  P() {0==-1}

      checking_error();
   goto L3;

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 1<=m, 1<=n}

L1:   ;

//  P(i1,i2,m,n,x,y) {i1==0, i2==0, x==0, y==0, 1<=m, 1<=n}

   while (rand_b()) {

//  P(i1,i2,m,n,x,y) {i1==y, i2==0, x==0, 0<=i1, i1+1<=m, 1<=n}

      if (!(x<n&&y<m-1))

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y, i2==0, x==0, 0<=i1, 1<=n}

         deadlock();

//  P(i1,i2,m,n,x,y) {i1==y, i2==0, x==0, 0<=i1, i1+2<=m, 1<=n}

      y++;

//  P(i1,i2,m,n,x,y) {i1==y-1, i2==0, x==0, 0<=i1, i1+2<=m, 1<=m,
//    1<=n}

      i1++;

//  P(i1,i2,m,n,x,y) {i1==y, i2==0, x==0, 1<=i1, i1+1<=m, 1<=m, 1<=n}

      if (!(i1<=m&&i2<=n))

//  P() {0==-1}

         checking_error();
   }

//  P(i1,i2,m,n,x,y) {i1==y, i2==0, x==0, 0<=i1, i1+1<=m, 1<=n}

   if (!(x<n&&y==m-1))

//  P(i1,i2,m,n,x,y) {i1==y, i2==0, x==0, 0<=i1, i1+2<=m, 1<=n}

      deadlock();

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y, i2==0, x==0, 0<=i1, 1<=n}

   y++;

//  P(i1,i2,m,n,x,y) {i1==m-1, i1==y-1, i2==0, x==0, 0<=i1, 1<=n}

   i1++;

//  P(i1,i2,m,n,x,y) {i1==m, i1==y, i2==0, x==0, 1<=i1, 1<=n}

   if (!(i1<=m&&i2<=n))

//  P() {0==-1}

      checking_error();
   goto L2;

//  P(i1,i2,m,n,x,y) {i1==0, i2==n, i2==x, y==0, 0<=i2, 0<=m}

L3:   ;
}

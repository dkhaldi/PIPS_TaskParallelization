 c_print_results
 create_seq
     randlc
 elapsed_time
     wtime_
 full_verify
 main
     timer_clear
     timer_start
         elapsed_time
             wtime_
     create_seq
         randlc
     timer_stop
         elapsed_time
             wtime_
     rank
     timer_read
     full_verify
     c_print_results
 randlc
 rank
 timer_clear
 timer_read
 timer_start
     elapsed_time
         wtime_
 timer_stop
     elapsed_time
         wtime_
 wtime_
accurate analysis
by pass some subscripts
restructuring
privatize
// loop detection
omp display
void c_print_results(char *name, char class, int n1, int n2, int n3, int niter, double t, double mops, char *optype, int passed_verification, char *npbversion, char *compiletime, char *cc, char *clink, char *c_lib, char *c_inc, char *cflags, char *clinkflags)
{
   printf("\n\n %s Benchmark Completed\n", name);

   printf(" Class           =                        %c\n", class);

   if (n3==0) {
      long int nn = n1;
      if (n2!=0)
         nn *= n2;
      printf(" Size            =             %12ld\n", nn);
   }
   else
      printf(" Size            =             %4dx%4dx%4d\n", n1, n2, n3);

   printf(" Iterations      =             %12d\n", niter);

   printf(" Time in seconds =             %12.2f\n", t);

   printf(" Mop/s total     =             %12.2f\n", mops);

   printf(" Operation type  = %24s\n", optype);

   if (passed_verification<0)
      printf(" Verification    =            NOT PERFORMED\n");
   else if (passed_verification)
      printf(" Verification    =               SUCCESSFUL\n");
   else
      printf(" Verification    =             UNSUCCESSFUL\n");

   printf(" Version         =             %12s\n", npbversion);

   printf(" Compile date    =             %12s\n", compiletime);

   printf("\n Compile options:\n");

   printf("    CC           = %s\n", cc);

   printf("    CLINK        = %s\n", clink);

   printf("    C_LIB        = %s\n", c_lib);

   printf("    C_INC        = %s\n", c_inc);

   printf("    CFLAGS       = %s\n", cflags);

   printf("    CLINKFLAGS   = %s\n", clinkflags);
   
   
   
   
   
   printf("\n\n");
   printf(" Please send all errors/feedbacks to:\n\n");
   printf(" NPB Development Team\n");
   printf(" npb@nas.nasa.gov\n\n\n");
}
void create_seq(double seed, double a)
{
   double x;
   int i, k;

   k = (1<<11)/4;

   for(i = 0; i <= (1<<16)-1; i += 1) {
      x = randlc(&seed, &a);
      x += randlc(&seed, &a);
      x += randlc(&seed, &a);
      x += randlc(&seed, &a);

      key_array[i] = k*x;
   }
}
double elapsed_time(void)
{
   double t;

   wtime_(&t);
   return t;
}
void full_verify(void)
{
   INT_TYPE i, j;
   
   
   
   /*  Now, finally, sort the keys:  */
   
   
   
   /* key_buff2[] already has the proper information, so do nothing */
   for(i = 0; i <= (1<<16)-1; i += 1)
      key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];
   
   
   /*  Confirm keys correctly sorted: count incorrectly sorted keys, if any */
   
   j = 0;
   for(i = 1; i <= (1<<16)-1; i += 1)
      if (key_array[i-1]>key_array[i])
         j++;
   
   
   if (j!=0)
      printf("Full_verify: number of keys out of sort: %ld\n", (long int) j);
   else
      passed_verification++;
}
int main(int argc, char **argv)
{

   int i, iteration, timer_on;

   double timecounter;

   FILE *fp;
   
   
   /*  Initialize timers  */
   timer_on = 0;
   if ((fp = fopen("timer.flag", "r"))!=(void *) 0) {
      fclose(fp);
      timer_on = 1;
   }
   timer_clear(0);
   if (timer_on) {
      timer_clear(1);
      timer_clear(2);
      timer_clear(3);
   }

   if (timer_on)
      timer_start(3);
   
   
   /*  Initialize the verification arrays if a valid class */
#pragma omp parallel for 
   for(i = 0; i <= 4; i += 1) {
      if ('S'=='S') goto _switch_2_case_S;
      if ('S'=='A') goto _switch_2_case_A;
      if ('S'=='W') goto _switch_2_case_W;
      if ('S'=='B') goto _switch_2_case_B;
      if ('S'=='C') goto _switch_2_case_C;
      if ('S'=='D') {
      }
      else {
         goto _break_2;
      }
_switch_2_case_D:      ;
      test_index_array[i] = D_test_index_array[i];
      test_rank_array[i] = D_test_rank_array[i];
      goto _break_2;
_switch_2_case_C:      ;
      test_index_array[i] = C_test_index_array[i];
      test_rank_array[i] = C_test_rank_array[i];
      goto _break_2;
_switch_2_case_B:      ;
      test_index_array[i] = B_test_index_array[i];
      test_rank_array[i] = B_test_rank_array[i];
      goto _break_2;
_switch_2_case_W:      ;
      test_index_array[i] = W_test_index_array[i];
      test_rank_array[i] = W_test_rank_array[i];
      goto _break_2;
_switch_2_case_A:      ;
      test_index_array[i] = A_test_index_array[i];
      test_rank_array[i] = A_test_rank_array[i];
      goto _break_2;
_switch_2_case_S:      ;
      test_index_array[i] = S_test_index_array[i];
      test_rank_array[i] = S_test_rank_array[i];
_break_2:      ;
   }
   
   
   
   /*  Printout initial NPB info */
   printf("\n\n NAS Parallel Benchmarks (NPB3.3-SER) - IS Benchmark\n\n");
   printf(" Size:  %ld  (class %c)\n", (long int) (1<<16), 'S');
   printf(" Iterations:   %d\n", 10);

   if (timer_on)
      timer_start(1);
   
   /*  Generate random number sequence and subsequent keys on all procs */
   /* Random number gen seed */
   create_seq(314159265.00, 1220703125.00);
   /* Random number gen mult */
   if (timer_on)
      timer_stop(1);
   
   
   /*  Do one interation for free (i.e., untimed) to guarantee initialization of  
       all data and code pages and respective tables */
   rank(1);
   
   /*  Start verification counter */
   passed_verification = 0;

   if ('S'!='S')
      printf("\n   iteration\n");
   
   /*  Start timer  */
   timer_start(0);
   
   
   /*  This is the main iteration */
   for(iteration = 1; iteration <= 10; iteration += 1) {
      if ('S'!='S')
         printf("        %d\n", iteration);
      rank(iteration);
   }
   
   
   /*  End of timing, obtain maximum time of all processors */
   timer_stop(0);
   timecounter = timer_read(0);
   
   
   /*  This tests that keys are in sequence: sorting of last ranked key seq
       occurs here, but is an untimed operation                             */
   if (timer_on)
      timer_start(2);
   full_verify();
   if (timer_on)
      timer_stop(2);

   if (timer_on)
      timer_stop(3);
   
   
   /*  The final printout  */
   if (passed_verification!=5*10+1)
      passed_verification = 0;
   c_print_results("IS", 'S', (int) ((1<<16)/64), 64, 0, 10, timecounter, (double) (10*(1<<16))/timecounter/1000000., "keys ranked", passed_verification, "3.3.1", "06 Dec 2010", "cc", "$(CC)", "(none)", "(none)", "-O", "-O");
   
   
   /*  Print additional timers  */
   if (timer_on) {
      double t_total, t_percent;

      t_total = timer_read(3);
      printf("\nAdditional timers -\n");
      printf(" Total execution: %8.3f\n", t_total);
      if (t_total==0.0)
         t_total = 1.0;
      timecounter = timer_read(1);
      t_percent = timecounter/t_total*100.;
      printf(" Initialization : %8.3f (%5.2f%%)\n", timecounter, t_percent);
      timecounter = timer_read(0);
      t_percent = timecounter/t_total*100.;
      printf(" Benchmarking   : %8.3f (%5.2f%%)\n", timecounter, t_percent);
      timecounter = timer_read(2);
      t_percent = timecounter/t_total*100.;
      printf(" Sorting        : %8.3f (%5.2f%%)\n", timecounter, t_percent);
   }
   
   
   return 0;
}
double randlc(double *X, double *A)
{
   static int KS = 0;
   static double R23, R46, T23, T46;
   double T1, T2, T3, T4;
   double A1;
   double A2;
   double X1;
   double X2;
   double Z;
   int i, j;

   if (KS==0) {
      R23 = 1.0;
      R46 = 1.0;
      T23 = 1.0;
      T46 = 1.0;

      for(i = 1; i <= 23; i += 1)
         R23 = 0.50*R23;
      for(i = 1; i <= 23; i += 1)
         T23 = 2.0*T23;
      for(i = 1; i <= 46; i += 1)
         R46 = 0.50*R46;
      for(i = 1; i <= 46; i += 1)
         T46 = 2.0*T46;
      KS = 1;
   }
   
   /*  Break A into two parts such that A = 2^23 * A1 + A2 and set X = N.  */
   
   T1 = R23**A;
   j = T1;
   A1 = j;
   A2 = *A-T23*A1;
   
   /*  Break X into two parts such that X = 2^23 * X1 + X2, compute
       Z = A1 * X2 + A2 * X1  (mod 2^23), and then
       X = 2^23 * Z + A2 * X2  (mod 2^46).                            */
   
   T1 = R23**X;
   j = T1;
   X1 = j;
   X2 = *X-T23*X1;
   T1 = A1*X2+A2*X1;

   j = R23*T1;
   T2 = j;
   Z = T1-T23*T2;
   T3 = T23*Z+A2*X2;
   j = R46*T3;
   T4 = j;
   *X = T3-T46*T4;
   return R46**X;
}
void rank(int iteration)
{

   INT_TYPE i, k;

   INT_TYPE *key_buff_ptr, *key_buff_ptr2;
   
   
   int shift = 11-9;
   INT_TYPE key;
   
   
   
   key_array[iteration] = iteration;
   key_array[iteration+10] = (1<<11)-iteration;
   
   
   /*  Determine where the partial verify test keys are, load into  */
   /*  top of array bucket_size                                     */
#pragma omp parallel for 
   for(i = 0; i <= 4; i += 1)
      partial_verify_vals[i] = key_array[test_index_array[i]];
   
   
   
   /*  Initialize */
#pragma omp parallel for 
   for(i = 0; i <= (1<<9)-1; i += 1)
      bucket_size[i] = 0;
   
   /*  Determine the number of keys in each bucket */
   for(i = 0; i <= (1<<16)-1; i += 1)
      bucket_size[key_array[i]>>shift]++;
   
   
   /*  Accumulative bucket sizes are the bucket pointers */
   bucket_ptrs[0] = 0;
   for(i = 1; i <= (1<<9)-1; i += 1)
      bucket_ptrs[i] = bucket_ptrs[i-1]+bucket_size[i-1];
   
   
   /*  Sort into appropriate bucket */
   for(i = 0; i <= (1<<16)-1; i += 1) {
      key = key_array[i];
      key_buff2[bucket_ptrs[key>>shift]++] = key;
   }

   key_buff_ptr2 = key_buff2;
   
   
   
   
   
   
   
   /*  Clear the work array */
#pragma omp parallel for 
   for(i = 0; i <= (1<<11)-1; i += 1)
      key_buff1[i] = 0;
   
   
   /*  Ranking of all keys occurs in this section:                 */
   
   key_buff_ptr = key_buff1;
   
   /*  In this section, the keys themselves are used as their 
       own indexes to determine how many of each there are: their
       individual population                                       */
   
   for(i = 0; i <= (1<<16)-1; i += 1)
      key_buff_ptr[key_buff_ptr2[i]]++;
   /* Now they have individual key   */
   /* population                     */
   
   /*  To obtain ranks of each key, successively add the individual key
       population                                                  */
   
   
   for(i = 0; i <= (1<<11)-1-1; i += 1)
      key_buff_ptr[i+1] += key_buff_ptr[i];
   
   
   /* This is the partial verify test section */
   /* Observe that test_rank_array vals are   */
   /* shifted differently for different cases */
   for(i = 0; i <= 4; i += 1) {
      k = partial_verify_vals[i];
      /* test vals were put here */
      if (0<k&&k<=(1<<16)-1) {
         INT_TYPE key_rank = key_buff_ptr[k-1];
         int failed = 0;

         if ('S'=='S') goto _switch_10_case_S;
         if ('S'=='W') goto _switch_10_case_W;
         if ('S'=='A') goto _switch_10_case_A;
         if ('S'=='B') goto _switch_10_case_B;
         if ('S'=='C') goto _switch_10_case_C;
         if ('S'=='D') {
         }
         else {
            goto _break_10;
         }
_switch_10_case_D:         ;
         if (i<2)
            if (key_rank!=test_rank_array[i]+iteration)
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-iteration)
            failed = 1;
         else
            passed_verification++;
         goto _break_10;
_switch_10_case_C:         ;
         if (i<=2)
            if (key_rank!=test_rank_array[i]+iteration)
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-iteration)
            failed = 1;
         else
            passed_verification++;
         goto _break_10;
_switch_10_case_B:         ;
         if (i==1||i==2||i==4)
            if (key_rank!=test_rank_array[i]+iteration)
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-iteration)
            failed = 1;
         else
            passed_verification++;
         goto _break_10;
_switch_10_case_A:         ;
         if (i<=2)
            if (key_rank!=test_rank_array[i]+(iteration-1))
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-(iteration-1))
            failed = 1;
         else
            passed_verification++;
         goto _break_10;
_switch_10_case_W:         ;
         if (i<2)
            if (key_rank!=test_rank_array[i]+(iteration-2))
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-iteration)
            failed = 1;
         else
            passed_verification++;
         goto _break_10;
_switch_10_case_S:         ;
         if (i<=2)
            if (key_rank!=test_rank_array[i]+iteration)
               failed = 1;
            else
               passed_verification++;
         else if (key_rank!=test_rank_array[i]-iteration)
            failed = 1;
         else
            passed_verification++;
_break_10:         ;
         if (failed==1)
            printf("Failed partial verification: ""iteration %d, test key %d\n", iteration, (int) i);
      }
   }
   
   
   
   
   /*  Make copies of rank info for use by full_verify: these variables
       in rank are local; making them global slows down the code, probably
       since they cannot be made register by compiler                        */
   
   if (iteration==10)
      key_buff_ptr_global = key_buff_ptr;
}
void timer_clear(int n)
{
   elapsed[n] = 0.0;
}
double timer_read(int n)
{
   return elapsed[n];
}
void timer_start(int n)
{
   start[n] = elapsed_time();
}
void timer_stop(int n)
{
   double t, now;

   now = elapsed_time();
   t = now-start[n];
   elapsed[n] += t;
}
void wtime_(double *t)
{
   static int sec = -1;
   struct timeval tv;
   gettimeofday(&tv, (void *) 0);
   if (sec<0)
      sec = tv.tv_sec;
   *t = tv.tv_sec-sec+1.0e-6*tv.tv_usec;
}

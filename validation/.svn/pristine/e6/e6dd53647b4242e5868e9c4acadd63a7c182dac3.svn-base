void crni__d2(int _u_U_n0, int _u_U_n1, double _u_U[_u_U_n0][_u_U_n1])
{
   double _u_a = 2.5;
   double _u_b = 1.5;
   double _u_c = 5.0;
   int _u_m = 230;
   int _u_n = 230;
   int _tmpxx1 = _u_n-1;
   double _u_h = _u_a/_tmpxx1;
   int _tmpxx2 = _u_m-1;
   double _u_k = _u_b/_tmpxx2;
   double _tmpxx3 = pow(_u_c, 2);
   double _tmpxx4 = _tmpxx3*_u_k;
   double _tmpxx5 = pow(_u_h, 2);
   double _u_r = _tmpxx4/_tmpxx5;
   double _tmpxx6 = 2/_u_r;
   double _u_s1 = 2.0+_tmpxx6;
   double _tmpxx7 = 2.0/_u_r;
   double _u_s2 = _tmpxx7-2;
   //PIPS generated variable
   int _u_i1_0;
   //PIPS generated variable
   int _u_j1;
   //PIPS generated variable
   double _u_X[1][230], _u_A[1][229], _u_D[1][230], _u_C[1][229], _u_B[1][230];
   (int) _u_n==_u_U_n0&&(int) _u_m==_u_U_n1?(void) 0:__assert_fail("(int)_u_n == _u_U_n0 && (int)_u_m == _u_U_n1", ".t225.tmp/t225.c", 38, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= _u_U_n0-1; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= _u_U_n1-1; __lv2 += 1)
         _u_U[__lv1][__lv2] = (double) 0.0;
   }
#pragma omp parallel for
   for(_u_i1_0 = 2; _u_i1_0 <= _u_n-1; _u_i1_0 += 1) {
      //PIPS generated variable
      double _tmpxx8;
      _tmpxx8 = sin(SCILAB_PI*_u_h*(_u_i1_0-1))+sin(3*SCILAB_PI*_u_h*(_u_i1_0-1));
      _u_U[_u_i1_0-1][0] = _tmpxx8;
   }
   (int) _u_n==230?(void) 0:__assert_fail("(int)1 == 1 && (int)_u_n == 230", ".t225.tmp/t225.c", 44, __func__);
   __lv1 = 0+1;
   double _u_Vd[1][230];
#pragma omp parallel for
   for(__lv2 = 0; __lv2 <= 229; __lv2 += 1) {
      //PIPS generated variable
      register double _tmpxx9_0;
      _tmpxx9_0 = (double) 1.0;
      _u_Vd[0][__lv2] = _u_s1*_tmpxx9_0;
   }
   __lv1 = 0+1;
   _u_Vd[0][1-1] = 1;
   _u_Vd[0][_u_n-1] = 1;
   (int) (_u_n-1)==229?(void) 0:__assert_fail("(int)1 == 1 && (int)(_u_n-1) == 229", ".t225.tmp/t225.c", 50, __func__);
   __lv1 = 0+1;
   double _u_Va[1][229];
#pragma omp parallel for
   for(__lv2 = 0; __lv2 <= 228; __lv2 += 1) {
      //PIPS generated variable
      register double _tmpxx10_0;
      _tmpxx10_0 = (double) 1.0;
      _u_Va[0][__lv2] = -_tmpxx10_0;
   }
   __lv1 = 0+1;
   _u_Va[0][_u_n-1-1] = 0;
   (int) (_u_n-1)==229?(void) 0:__assert_fail("(int)1 == 1 && (int)(_u_n-1) == 229", ".t225.tmp/t225.c", 55, __func__);
   __lv1 = 0+1;
   double _u_Vc[1][229];
#pragma omp parallel for
   for(__lv2 = 0; __lv2 <= 228; __lv2 += 1) {
      //PIPS generated variable
      register double _tmpxx11_0;
      _tmpxx11_0 = (double) 1.0;
      _u_Vc[0][__lv2] = -_tmpxx11_0;
   }
   __lv1 = 0+1;
   _u_Vc[0][1-1] = 0;
   double _u_Vb[1][230];
   (int) _u_n==230?(void) 0:__assert_fail("(int)1 == 1 && (int)_u_n == 230", ".t225.tmp/t225.c", 60, __func__);
#pragma omp parallel for
   for(__lv2 = 0; __lv2 <= 229; __lv2 += 1)
      _u_Vb[0][__lv2] = (double) 1.0;
   __lv1 = 0+1;
   _u_Vb[0][1-1] = 0;
   _u_Vb[0][_u_n-1] = 0;
   for(_u_j1 = 2; _u_j1 <= _u_m; _u_j1 += 1) {
      //PIPS generated variable
      int __lv2;
      //PIPS generated variable
      double _tmpxx13, _tmpxx14, _tmpxx15, _tmpxx16, _tmpxx17, _tmpxx18;
      //PIPS generated variable
      int _u_i, _u_i1_1, _u_l_0, _u_l_1;
      //PIPS generated variable
      double _u_mult;
      //PIPS generated variable
      int _u_s;
#pragma omp parallel for
      for(_u_i1_1 = 2; _u_i1_1 <= _u_n-1; _u_i1_1 += 1) {
         //PIPS generated variable
         double _tmpxx12;
         _tmpxx12 = _u_U[_u_i1_1-1-1][_u_j1-1-1]+_u_U[_u_i1_1+1-1][_u_j1-1-1]+_u_s2*_u_U[_u_i1_1-1][_u_j1-1-1];
         _u_Vb[0][_u_i1_1-1] = _tmpxx12;
      }
      /* X = tridiagonal(Va, Vd, Vc, Vb); */
      (int) _u_n==230?(void) 0:__assert_fail("(int)1 == 1 && (int)_u_n == 230", ".t225.tmp/t225.c", 70, __func__);
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 229; __lv2 += 1)
         _u_X[0][__lv2] = (double) 0.0;
      __lv1 = 0+1;
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 228; __lv2 += 1)
         _u_A[0][__lv2] = _u_Va[0][__lv2];
      __lv1 = 0+1;
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 229; __lv2 += 1)
         _u_D[0][__lv2] = _u_Vd[0][__lv2];
      __lv1 = 0+1;
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 228; __lv2 += 1)
         _u_C[0][__lv2] = _u_Vc[0][__lv2];
      __lv1 = 0+1;
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 229; __lv2 += 1)
         _u_B[0][__lv2] = _u_Vb[0][__lv2];
      __lv1 = 0+1;
      *&_u_s = (int) 230;
      for(_u_l_0 = 2; _u_l_0 <= _u_s; _u_l_0 += 1) {
         _tmpxx13 = _u_A[0][_u_l_0-1-1];
         _tmpxx14 = _u_D[0][_u_l_0-1-1];
         _u_mult = _tmpxx13/_tmpxx14;
         _tmpxx15 = _u_D[0][_u_l_0-1]-_u_mult*_u_C[0][_u_l_0-1-1];
         _u_D[0][_u_l_0-1] = _tmpxx15;
         _tmpxx16 = _u_B[0][_u_l_0-1]-_u_mult*_u_B[0][_u_l_0-1-1];
         _u_B[0][_u_l_0-1] = _tmpxx16;
      }
      _tmpxx17 = _u_B[0][_u_s-1]/_u_D[0][_u_s-1];
      _u_X[0][_u_s-1] = _tmpxx17;
      for(_u_l_1 = 1; _u_l_1 <= _u_s-1; _u_l_1 += 1) {
         _tmpxx18 = (_u_B[0][_u_s-1-_u_l_1+1-1]-_u_C[0][_u_s-1-_u_l_1+1-1]*_u_X[0][_u_s-1-_u_l_1+1+1-1])/_u_D[0][_u_s-1-_u_l_1+1-1];
         _u_X[0][_u_s-1-_u_l_1+1-1] = _tmpxx18;
      }
      /* //////////////////////////////////////////////////// */
      /* U(1:n, j1) = X'; */
#pragma omp parallel for
      for(_u_i = 1; _u_i <= _u_n; _u_i += 1)
         _u_U[_u_i-1][_u_j1-1] = _u_X[0][_u_i-1];
   }
}
int main(int argc, char *argv[])
{
   scilab_rt_init(argc, argv, 0);
   
   /*  t225.sce - from mcgill/crni_function.sce */
   scilab_rt_tic__();
   double _u_U[230][230];
   crni__d2(230, 230, _u_U);
   double _u_elapsedTime = scilab_rt_toc__();
   /* disp("Elapsed Time: "); */
   /* disp(elapsedTime); */
   scilab_rt_disp_s0_("Mean of matrix U");
   double _tmpxx0;
   scilab_rt_mean_d2_d0(230, 230, _u_U, &_tmpxx0);
   scilab_rt_disp_d0_(_tmpxx0);

   scilab_rt_terminate();
}

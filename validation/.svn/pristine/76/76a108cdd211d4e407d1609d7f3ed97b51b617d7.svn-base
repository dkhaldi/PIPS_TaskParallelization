
POINTS-TO


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY


// Points To OUT:
// p -> _p_1[0] , EXACT

int bla(int *p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY

   *p = 13;

// Points To:
// p -> _p_1[0] , EXACT

   return 17;
}

// Points To IN:
// q -> *NULL* , MAY
// q -> _q_1[0] , MAY


// Points To OUT:
// q -> _q_1[0] , EXACT

int call19(int *q)
{

// Points To: none

   int i, k;

// Points To: none

   something st;

// Points To:
// q -> *NULL* , MAY
// q -> _q_1[0] , MAY

   // bla(int *)
   i = bla(q);

// Points To:
// q -> _q_1[0] , EXACT

   i += *q;

// Points To:
// q -> _q_1[0] , EXACT

   i += bla(&k);

// Points To:
// q -> _q_1[0] , EXACT

   i += k;

// Points To:
// q -> _q_1[0] , EXACT

   i += bla(&st.data);

// Points To:
// q -> _q_1[0] , EXACT

   i += st.data;

// Points To:
// q -> _q_1[0] , EXACT

   // foo(int)
   i += foo(*q);

// Points To:
// q -> _q_1[0] , EXACT

   i += foo(k);

// Points To:
// q -> _q_1[0] , EXACT

   i += foo(st.data);

// Points To:
// q -> _q_1[0] , EXACT

   return i;
}

// Points To IN: none


// Points To OUT: none

int foo(int a)
{

// Points To: none

   return a*3;
}

PROPER  EFFECTS WITH POINTS TO

int bla(int *p)
{
//             <    is read   >: p
//             <    is written>: _p_1[0]
   *p = 13;
   return 17;
}
int call19(int *q)
{
   int i, k;
   something st;
//             <    is read   >: q
//             <    is written>: _q_1[0] i
   // bla(int *)
   i = bla(q);
//             <    is read   >: _q_1[0] i q
//             <    is written>: i
   i += *q;
//             <    is read   >: i
//             <    is written>: i k
   i += bla(&k);
//             <    is read   >: i k
//             <    is written>: i
   i += k;
//             <    is read   >: i
//             <    is written>: i st.data
   i += bla(&st.data);
//             <    is read   >: i st.data
//             <    is written>: i
   i += st.data;
//             <    is read   >: _q_1[0] i q
//             <    is written>: i
   // foo(int)
   i += foo(*q);
//             <    is read   >: i k
//             <    is written>: i
   i += foo(k);
//             <    is read   >: i st.data
//             <    is written>: i
   i += foo(st.data);
//             <    is read   >: i
   return i;
}
int foo(int a)
{
//             <    is read   >: a
   return a*3;
}

 *********************** Use-Def Chains *********************


****************** End of Dependence Graph ******************

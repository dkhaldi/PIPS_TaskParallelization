
Privatize scalar variables


Privatize scalar variables


 **************** Effective Dependence Graph ****************

	18 --> 16 with conflicts
		from <Matrix[i][j]-W-EXACT> to <j-W-EXACT> at levels  1
	18 --> 16 with conflicts
		from <Matrix[i]-R-EXACT> to <j-W-EXACT> at levels  1
	16 --> 15 with conflicts
		from <j-W-EXACT> to <Matrix[i]-W-EXACT> at levels  1
	15 --> 18 with conflicts
		from <Matrix[i]-W-EXACT> to <Matrix[i][j]-W-EXACT> at levels  2
	15 --> 18 with conflicts
		from <Matrix[i]-W-EXACT> to <Matrix[i]-R-EXACT> at levels  2
	15 --> 16 with conflicts
		from <Matrix[i]-W-EXACT> to <j-W-EXACT> at levels  1 2
	15 --> 15 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1
	15 --> 15 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> at levels  1
	15 --> 15 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1

****************** End of Dependence Graph ******************

// OMP style

int main(void)
{
   int i, j;                                                            /*0010*/

   Matrix = (int **) malloc(N*sizeof(int *));                           /*0012*/
   for(i = 0; i <= N-1; i += 1) {                                       /*0013*/
      Matrix[i] = (int *) malloc(Z*sizeof(int));                        /*0015*/
#pragma omp parallel for 
      for(j = 0; j <= Z-1; j += 1)                                      /*0016*/
         Matrix[i][j] = i*j;                                            /*0018*/
   }
   return 0;                                                            /*0021*/
}

Internalize parallel code

int main(void)
{
   int i, j;                                                            /*0010*/

   Matrix = (int **) malloc(N*sizeof(int *));                           /*0012*/
   for(i = 0; i <= N-1; i += 1) {                                       /*0013*/
      Matrix[i] = (int *) malloc(Z*sizeof(int));                        /*0015*/
#pragma omp parallel for 
      for(j = 0; j <= Z-1; j += 1)                                      /*0016*/
         Matrix[i][j] = i*j;                                            /*0018*/
   }
   return 0;                                                            /*0021*/
}

Ompify code

int main(void)
{
   int i, j;                                                            /*0010*/

   Matrix = (int **) malloc(N*sizeof(int *));                           /*0012*/
   for(i = 0; i <= N-1; i += 1) {                                       /*0013*/
      Matrix[i] = (int *) malloc(Z*sizeof(int));                        /*0015*/
#pragma omp parallel for
      for(j = 0; j <= Z-1; j += 1)                                      /*0016*/
         Matrix[i][j] = i*j;                                            /*0018*/
   }
   return 0;                                                            /*0021*/
}

Unsplit code



Source code with proper effects

int call12(void)
{
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0007*/
//             <    is read   >: j

   return j;                                                            /*0009*/
}

Source code with cumulated effects

//             <    is read   >: j
//             <    is written>: j
int call12(void)
{
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0007*/
//             <    is read   >: j

   return j;                                                            /*0009*/
}

Source code with transformers for "call12"


//  T(call12,j) {call12==j, call12==j#init+1}

int call12(void)
{

//  T(j) {j==j#init+1}

   j++;                                                                 /*0007*/

//  T(call12) {call12==j}


   return j;                                                            /*0009*/
}

Source code with transformers for "main"


//  T(j) {j==j#init+2}

int main()
{

//  T(ai) {ai==3}

   int ai = 3;                                                          /*0014*/

//  T(ai,j) {ai==j, ai==j#init+1}


   ai = call12();                                                       /*0016*/

//  T(ai,j) {ai==j, ai==j#init+1}


   ai = call12();                                                       /*0018*/

//  T(ai) {ai==0}


   ai = 0;                                                              /*0020*/
}

Source code with preconditions for "call12"


//  P() {0<=j, j<=1}

int call12(void)
{

//  P() {0<=j, j<=1}

   j++;                                                                 /*0007*/

//  P(j) {j==j#init+1, 1<=j, j<=2}


   return j;                                                            /*0009*/
}

Source code with preconditions for "main"


//  P() {j==0}

int main()
{

//  P() {j==0}

   int ai = 3;                                                          /*0014*/

//  P(ai) {ai==3, j==0}


   ai = call12();                                                       /*0016*/

//  P(ai,j) {ai==1, j==1, j#init==0}


   ai = call12();                                                       /*0018*/

//  P(ai,j) {ai==2, j==2, j#init==0}


   ai = 0;                                                              /*0020*/
}

Warnings

(activate_phase) Rule `C_PARSER' already active
(activate_phase) Rule `PRINT_CODE_TRANSFORMERS' already active
(activate_phase) Rule `PRINT_CODE_PRECONDITIONS' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[call12!] (ordinary_summary_precondition) empty precondition to call12! because not in call tree from main.

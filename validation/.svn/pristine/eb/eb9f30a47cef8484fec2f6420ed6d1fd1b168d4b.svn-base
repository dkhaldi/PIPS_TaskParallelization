
Init Code

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0009*/
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            in[i*1024+j] = 5;                                           /*0015*/
            /* A dummy initialisation, we could load a true image instead */
            in[i*1024+(j+1)] = 3;                                       /*0016*/
            in[i*1024+(j+2)] = 7;                                       /*0016*/
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1)                                  /*0025*/
            Gx[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i-1)*1024+(j+1)]+2*(in[i*1024+(j-1)]-in[i*1024+(j+1)])+in[(i+1)*1024+(j-1)]-in[(i+1)*1024+(j+1)])/8;         /*0026*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1)                                  /*0032*/
            Gy[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i+1)*1024+(j-1)]+2*(in[(i-1)*1024+j]-in[(i+1)*1024+j])+in[(i-1)*1024+(j+1)]+in[(i+1)*1024+(j+1)])/8;         /*0033*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1)                                  /*0041*/
            Ixx[i*1024+j] = Gx[i*1024+j]*Gx[i*1024+j];                  /*0042*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1)                                  /*0047*/
            Iyy[i*1024+j] = Gy[i*1024+j]*Gy[i*1024+j];                  /*0048*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1)                                  /*0053*/
            Ixy[i*1024+j] = Gx[i*1024+j]*Gy[i*1024+j];                  /*0054*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1)                                  /*0061*/
            Sxx[i*1024+j] = (Ixx[(i-1)*1024+(j-1)]+2*Ixx[(i-1)*1024+j]+Ixx[(i-1)*1024+(j+1)]+2*(Ixx[i*1024+(j-1)]+2*Ixx[i*1024+j]+Ixx[i*1024+(j+1)])+Ixx[(i+1)*1024+(j-1)]+Ixx[(i+1)*1024+j]+Ixx[(i+1)*1024+(j+1)])/16;       /*0062*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1)                                  /*0067*/
            Syy[i*1024+j] = (Iyy[(i-1)*1024+(j-1)]+2*Iyy[(i-1)*1024+j]+Iyy[(i-1)*1024+(j+1)]+2*(Iyy[i*1024+(j-1)]+2*Iyy[i*1024+j]+Iyy[i*1024+(j+1)])+Iyy[(i+1)*1024+(j-1)]+Iyy[(i+1)*1024+j]+Iyy[(i+1)*1024+(j+1)])/16;       /*0068*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1)                                  /*0073*/
            Sxy[i*1024+j] = (Ixy[(i-1)*1024+(j-1)]+2*Ixy[(i-1)*1024+j]+Ixy[(i-1)*1024+(j+1)]+2*(Ixy[i*1024+(j-1)]+2*Ixy[i*1024+j]+Ixy[i*1024+(j+1)])+Ixy[(i+1)*1024+(j-1)]+Ixy[(i+1)*1024+j]+Ixy[(i+1)*1024+(j+1)])/16;       /*0074*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1)                                  /*0081*/
            out[i*1024+j] = Sxx[i*1024+j]*Syy[i*1024+j]-Sxy[i*1024+j]*Sxy[i*1024+j];   /*0082*/
   }
}

TASK_MAPPING

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0009*/
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            in[i*1024+j] = 5;                                           /*0015*/
            /* A dummy initialisation, we could load a true image instead */
            in[i*1024+(j+1)] = 3;                                       /*0016*/
            in[i*1024+(j+2)] = 7;                                       /*0016*/
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1)                                  /*0025*/
            Gx[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i-1)*1024+(j+1)]+2*(in[i*1024+(j-1)]-in[i*1024+(j+1)])+in[(i+1)*1024+(j-1)]-in[(i+1)*1024+(j+1)])/8;         /*0026*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1)                                  /*0032*/
            Gy[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i+1)*1024+(j-1)]+2*(in[(i-1)*1024+j]-in[(i+1)*1024+j])+in[(i-1)*1024+(j+1)]+in[(i+1)*1024+(j+1)])/8;         /*0033*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1)                                  /*0041*/
            Ixx[i*1024+j] = Gx[i*1024+j]*Gx[i*1024+j];                  /*0042*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1)                                  /*0047*/
            Iyy[i*1024+j] = Gy[i*1024+j]*Gy[i*1024+j];                  /*0048*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1)                                  /*0053*/
            Ixy[i*1024+j] = Gx[i*1024+j]*Gy[i*1024+j];                  /*0054*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1)                                  /*0061*/
            Sxx[i*1024+j] = (Ixx[(i-1)*1024+(j-1)]+2*Ixx[(i-1)*1024+j]+Ixx[(i-1)*1024+(j+1)]+2*(Ixx[i*1024+(j-1)]+2*Ixx[i*1024+j]+Ixx[i*1024+(j+1)])+Ixx[(i+1)*1024+(j-1)]+Ixx[(i+1)*1024+j]+Ixx[(i+1)*1024+(j+1)])/16;       /*0062*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1)                                  /*0067*/
            Syy[i*1024+j] = (Iyy[(i-1)*1024+(j-1)]+2*Iyy[(i-1)*1024+j]+Iyy[(i-1)*1024+(j+1)]+2*(Iyy[i*1024+(j-1)]+2*Iyy[i*1024+j]+Iyy[i*1024+(j+1)])+Iyy[(i+1)*1024+(j-1)]+Iyy[(i+1)*1024+j]+Iyy[(i+1)*1024+(j+1)])/16;       /*0068*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1)                                  /*0073*/
            Sxy[i*1024+j] = (Ixy[(i-1)*1024+(j-1)]+2*Ixy[(i-1)*1024+j]+Ixy[(i-1)*1024+(j+1)]+2*(Ixy[i*1024+(j-1)]+2*Ixy[i*1024+j]+Ixy[i*1024+(j+1)])+Ixy[(i+1)*1024+(j-1)]+Ixy[(i+1)*1024+j]+Ixy[(i+1)*1024+(j+1)])/16;       /*0074*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1)                                  /*0081*/
            out[i*1024+j] = Sxx[i*1024+j]*Syy[i*1024+j]-Sxy[i*1024+j]*Sxy[i*1024+j];   /*0082*/
   }
}

VARIABLE_REPLICATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0009*/
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            in[i*1024+j] = 5;                                           /*0015*/
            /* A dummy initialisation, we could load a true image instead */
            in[i*1024+(j+1)] = 3;                                       /*0016*/
            in[i*1024+(j+2)] = 7;                                       /*0016*/
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1)                                  /*0025*/
            Gx[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i-1)*1024+(j+1)]+2*(in[i*1024+(j-1)]-in[i*1024+(j+1)])+in[(i+1)*1024+(j-1)]-in[(i+1)*1024+(j+1)])/8;         /*0026*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1)                                  /*0032*/
            Gy[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i+1)*1024+(j-1)]+2*(in[(i-1)*1024+j]-in[(i+1)*1024+j])+in[(i-1)*1024+(j+1)]+in[(i+1)*1024+(j+1)])/8;         /*0033*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1)                                  /*0041*/
            Ixx[i*1024+j] = Gx[i*1024+j]*Gx[i*1024+j];                  /*0042*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1)                                  /*0047*/
            Iyy[i*1024+j] = Gy[i*1024+j]*Gy[i*1024+j];                  /*0048*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1)                                  /*0053*/
            Ixy[i*1024+j] = Gx[i*1024+j]*Gy[i*1024+j];                  /*0054*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1)                                  /*0061*/
            Sxx[i*1024+j] = (Ixx[(i-1)*1024+(j-1)]+2*Ixx[(i-1)*1024+j]+Ixx[(i-1)*1024+(j+1)]+2*(Ixx[i*1024+(j-1)]+2*Ixx[i*1024+j]+Ixx[i*1024+(j+1)])+Ixx[(i+1)*1024+(j-1)]+Ixx[(i+1)*1024+j]+Ixx[(i+1)*1024+(j+1)])/16;       /*0062*/
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1)                                  /*0067*/
            Syy[i*1024+j] = (Iyy[(i-1)*1024+(j-1)]+2*Iyy[(i-1)*1024+j]+Iyy[(i-1)*1024+(j+1)]+2*(Iyy[i*1024+(j-1)]+2*Iyy[i*1024+j]+Iyy[i*1024+(j+1)])+Iyy[(i+1)*1024+(j-1)]+Iyy[(i+1)*1024+j]+Iyy[(i+1)*1024+(j+1)])/16;       /*0068*/
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1)                                  /*0073*/
            Sxy[i*1024+j] = (Ixy[(i-1)*1024+(j-1)]+2*Ixy[(i-1)*1024+j]+Ixy[(i-1)*1024+(j+1)]+2*(Ixy[i*1024+(j-1)]+2*Ixy[i*1024+j]+Ixy[i*1024+(j+1)])+Ixy[(i+1)*1024+(j-1)]+Ixy[(i+1)*1024+j]+Ixy[(i+1)*1024+(j+1)])/16;       /*0074*/
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1)                                  /*0081*/
            out[i*1024+j] = Sxx[i*1024+j]*Syy[i*1024+j]-Sxy[i*1024+j]*Sxy[i*1024+j];   /*0082*/
   }
}

COPY_VALUE_OF_WRITE

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0009*/
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            in[i*1024+j] = 5;                                           /*0015*/
            __in_0[i*1024+j] = in[i*1024+j];
            __in_1[i*1024+j] = in[i*1024+j];
            __in_2[i*1024+j] = in[i*1024+j];
            __in_3[i*1024+j] = in[i*1024+j];
            /* A dummy initialisation, we could load a true image instead */
            in[i*1024+(j+1)] = 3;                                       /*0016*/
            __in_0[i*1024+(j+1)] = in[i*1024+(j+1)];
            __in_1[i*1024+(j+1)] = in[i*1024+(j+1)];
            __in_2[i*1024+(j+1)] = in[i*1024+(j+1)];
            __in_3[i*1024+(j+1)] = in[i*1024+(j+1)];
            in[i*1024+(j+2)] = 7;                                       /*0016*/
            __in_0[i*1024+(j+2)] = in[i*1024+(j+2)];
            __in_1[i*1024+(j+2)] = in[i*1024+(j+2)];
            __in_2[i*1024+(j+2)] = in[i*1024+(j+2)];
            __in_3[i*1024+(j+2)] = in[i*1024+(j+2)];
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1) {                                /*0025*/
            Gx[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i-1)*1024+(j+1)]+2*(in[i*1024+(j-1)]-in[i*1024+(j+1)])+in[(i+1)*1024+(j-1)]-in[(i+1)*1024+(j+1)])/8;         /*0026*/
            __Gx_0[i*1024+j] = Gx[i*1024+j];
            __Gx_1[i*1024+j] = Gx[i*1024+j];
            __Gx_2[i*1024+j] = Gx[i*1024+j];
            __Gx_3[i*1024+j] = Gx[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1) {                                /*0032*/
            Gy[i*1024+j] = (in[(i-1)*1024+(j-1)]-in[(i+1)*1024+(j-1)]+2*(in[(i-1)*1024+j]-in[(i+1)*1024+j])+in[(i-1)*1024+(j+1)]+in[(i+1)*1024+(j+1)])/8;         /*0033*/
            __Gy_0[i*1024+j] = Gy[i*1024+j];
            __Gy_1[i*1024+j] = Gy[i*1024+j];
            __Gy_2[i*1024+j] = Gy[i*1024+j];
            __Gy_3[i*1024+j] = Gy[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1) {                                /*0041*/
            Ixx[i*1024+j] = Gx[i*1024+j]*Gx[i*1024+j];                  /*0042*/
            __Ixx_0[i*1024+j] = Ixx[i*1024+j];
            __Ixx_1[i*1024+j] = Ixx[i*1024+j];
            __Ixx_2[i*1024+j] = Ixx[i*1024+j];
            __Ixx_3[i*1024+j] = Ixx[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1) {                                /*0047*/
            Iyy[i*1024+j] = Gy[i*1024+j]*Gy[i*1024+j];                  /*0048*/
            __Iyy_0[i*1024+j] = Iyy[i*1024+j];
            __Iyy_1[i*1024+j] = Iyy[i*1024+j];
            __Iyy_2[i*1024+j] = Iyy[i*1024+j];
            __Iyy_3[i*1024+j] = Iyy[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1) {                                /*0053*/
            Ixy[i*1024+j] = Gx[i*1024+j]*Gy[i*1024+j];                  /*0054*/
            __Ixy_0[i*1024+j] = Ixy[i*1024+j];
            __Ixy_1[i*1024+j] = Ixy[i*1024+j];
            __Ixy_2[i*1024+j] = Ixy[i*1024+j];
            __Ixy_3[i*1024+j] = Ixy[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1) {                                /*0061*/
            Sxx[i*1024+j] = (Ixx[(i-1)*1024+(j-1)]+2*Ixx[(i-1)*1024+j]+Ixx[(i-1)*1024+(j+1)]+2*(Ixx[i*1024+(j-1)]+2*Ixx[i*1024+j]+Ixx[i*1024+(j+1)])+Ixx[(i+1)*1024+(j-1)]+Ixx[(i+1)*1024+j]+Ixx[(i+1)*1024+(j+1)])/16;       /*0062*/
            __Sxx_0[i*1024+j] = Sxx[i*1024+j];
            __Sxx_1[i*1024+j] = Sxx[i*1024+j];
            __Sxx_2[i*1024+j] = Sxx[i*1024+j];
            __Sxx_3[i*1024+j] = Sxx[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1) {                                /*0067*/
            Syy[i*1024+j] = (Iyy[(i-1)*1024+(j-1)]+2*Iyy[(i-1)*1024+j]+Iyy[(i-1)*1024+(j+1)]+2*(Iyy[i*1024+(j-1)]+2*Iyy[i*1024+j]+Iyy[i*1024+(j+1)])+Iyy[(i+1)*1024+(j-1)]+Iyy[(i+1)*1024+j]+Iyy[(i+1)*1024+(j+1)])/16;       /*0068*/
            __Syy_0[i*1024+j] = Syy[i*1024+j];
            __Syy_1[i*1024+j] = Syy[i*1024+j];
            __Syy_2[i*1024+j] = Syy[i*1024+j];
            __Syy_3[i*1024+j] = Syy[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1) {                                /*0073*/
            Sxy[i*1024+j] = (Ixy[(i-1)*1024+(j-1)]+2*Ixy[(i-1)*1024+j]+Ixy[(i-1)*1024+(j+1)]+2*(Ixy[i*1024+(j-1)]+2*Ixy[i*1024+j]+Ixy[i*1024+(j+1)])+Ixy[(i+1)*1024+(j-1)]+Ixy[(i+1)*1024+j]+Ixy[(i+1)*1024+(j+1)])/16;       /*0074*/
            __Sxy_0[i*1024+j] = Sxy[i*1024+j];
            __Sxy_1[i*1024+j] = Sxy[i*1024+j];
            __Sxy_2[i*1024+j] = Sxy[i*1024+j];
            __Sxy_3[i*1024+j] = Sxy[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1) {                                /*0081*/
            out[i*1024+j] = Sxx[i*1024+j]*Syy[i*1024+j]-Sxy[i*1024+j]*Sxy[i*1024+j];   /*0082*/
            __out_0[i*1024+j] = out[i*1024+j];
            __out_1[i*1024+j] = out[i*1024+j];
            __out_2[i*1024+j] = out[i*1024+j];
            __out_3[i*1024+j] = out[i*1024+j];
         }
   }
}

ELIMINATE_ORIGINAL_VARIABLES

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0009*/
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            __in_0[i*1024+j] = 5;                                       /*0015*/
            __in_0[i*1024+j] = __in_0[i*1024+j];
            __in_1[i*1024+j] = __in_0[i*1024+j];
            __in_2[i*1024+j] = __in_0[i*1024+j];
            __in_3[i*1024+j] = __in_0[i*1024+j];
            /* A dummy initialisation, we could load a true image instead */
            __in_0[i*1024+(j+1)] = 3;                                   /*0016*/
            __in_0[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_1[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_2[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_3[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_0[i*1024+(j+2)] = 7;                                   /*0016*/
            __in_0[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_1[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_2[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_3[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1) {                                /*0025*/
            __Gx_3[i*1024+j] = (__in_3[(i-1)*1024+(j-1)]-__in_3[(i-1)*1024+(j+1)]+2*(__in_3[i*1024+(j-1)]-__in_3[i*1024+(j+1)])+__in_3[(i+1)*1024+(j-1)]-__in_3[(i+1)*1024+(j+1)])/8;           /*0026*/
            __Gx_0[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_1[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_2[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_3[i*1024+j] = __Gx_3[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1) {                                /*0032*/
            __Gy_1[i*1024+j] = (__in_1[(i-1)*1024+(j-1)]-__in_1[(i+1)*1024+(j-1)]+2*(__in_1[(i-1)*1024+j]-__in_1[(i+1)*1024+j])+__in_1[(i-1)*1024+(j+1)]+__in_1[(i+1)*1024+(j+1)])/8;           /*0033*/
            __Gy_0[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_1[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_2[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_3[i*1024+j] = __Gy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1) {                                /*0041*/
            __Ixx_0[i*1024+j] = __Gx_0[i*1024+j]*__Gx_0[i*1024+j];      /*0042*/
            __Ixx_0[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_1[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_2[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_3[i*1024+j] = __Ixx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1) {                                /*0047*/
            __Iyy_1[i*1024+j] = __Gy_1[i*1024+j]*__Gy_1[i*1024+j];      /*0048*/
            __Iyy_0[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_1[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_2[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_3[i*1024+j] = __Iyy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1) {                                /*0053*/
            __Ixy_2[i*1024+j] = __Gx_2[i*1024+j]*__Gy_2[i*1024+j];      /*0054*/
            __Ixy_0[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_1[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_2[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_3[i*1024+j] = __Ixy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1) {                                /*0061*/
            __Sxx_0[i*1024+j] = (__Ixx_0[(i-1)*1024+(j-1)]+2*__Ixx_0[(i-1)*1024+j]+__Ixx_0[(i-1)*1024+(j+1)]+2*(__Ixx_0[i*1024+(j-1)]+2*__Ixx_0[i*1024+j]+__Ixx_0[i*1024+(j+1)])+__Ixx_0[(i+1)*1024+(j-1)]+__Ixx_0[(i+1)*1024+j]+__Ixx_0[(i+1)*1024+(j+1)])/16;            /*0062*/
            __Sxx_0[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_1[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_2[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_3[i*1024+j] = __Sxx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1) {                                /*0067*/
            __Syy_1[i*1024+j] = (__Iyy_1[(i-1)*1024+(j-1)]+2*__Iyy_1[(i-1)*1024+j]+__Iyy_1[(i-1)*1024+(j+1)]+2*(__Iyy_1[i*1024+(j-1)]+2*__Iyy_1[i*1024+j]+__Iyy_1[i*1024+(j+1)])+__Iyy_1[(i+1)*1024+(j-1)]+__Iyy_1[(i+1)*1024+j]+__Iyy_1[(i+1)*1024+(j+1)])/16;            /*0068*/
            __Syy_0[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_1[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_2[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_3[i*1024+j] = __Syy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1) {                                /*0073*/
            __Sxy_2[i*1024+j] = (__Ixy_2[(i-1)*1024+(j-1)]+2*__Ixy_2[(i-1)*1024+j]+__Ixy_2[(i-1)*1024+(j+1)]+2*(__Ixy_2[i*1024+(j-1)]+2*__Ixy_2[i*1024+j]+__Ixy_2[i*1024+(j+1)])+__Ixy_2[(i+1)*1024+(j-1)]+__Ixy_2[(i+1)*1024+j]+__Ixy_2[(i+1)*1024+(j+1)])/16;            /*0074*/
            __Sxy_0[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_1[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_2[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_3[i*1024+j] = __Sxy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1) {                                /*0081*/
            __out_0[i*1024+j] = __Sxx_0[i*1024+j]*__Syy_0[i*1024+j]-__Sxy_0[i*1024+j]*__Sxy_0[i*1024+j];             /*0082*/
            __out_0[i*1024+j] = __out_0[i*1024+j];
            __out_1[i*1024+j] = __out_0[i*1024+j];
            __out_2[i*1024+j] = __out_0[i*1024+j];
            __out_3[i*1024+j] = __out_0[i*1024+j];
         }
   }
}

CLEAN_DECLARATIONS

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            __in_0[i*1024+j] = 5;                                       /*0015*/
            __in_0[i*1024+j] = __in_0[i*1024+j];
            __in_1[i*1024+j] = __in_0[i*1024+j];
            __in_2[i*1024+j] = __in_0[i*1024+j];
            __in_3[i*1024+j] = __in_0[i*1024+j];
            /* A dummy initialisation, we could load a true image instead */
            __in_0[i*1024+(j+1)] = 3;                                   /*0016*/
            __in_0[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_1[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_2[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_3[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_0[i*1024+(j+2)] = 7;                                   /*0016*/
            __in_0[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_1[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_2[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_3[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1) {                                /*0025*/
            __Gx_3[i*1024+j] = (__in_3[(i-1)*1024+(j-1)]-__in_3[(i-1)*1024+(j+1)]+2*(__in_3[i*1024+(j-1)]-__in_3[i*1024+(j+1)])+__in_3[(i+1)*1024+(j-1)]-__in_3[(i+1)*1024+(j+1)])/8;           /*0026*/
            __Gx_0[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_1[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_2[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_3[i*1024+j] = __Gx_3[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1) {                                /*0032*/
            __Gy_1[i*1024+j] = (__in_1[(i-1)*1024+(j-1)]-__in_1[(i+1)*1024+(j-1)]+2*(__in_1[(i-1)*1024+j]-__in_1[(i+1)*1024+j])+__in_1[(i-1)*1024+(j+1)]+__in_1[(i+1)*1024+(j+1)])/8;           /*0033*/
            __Gy_0[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_1[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_2[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_3[i*1024+j] = __Gy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1) {                                /*0041*/
            __Ixx_0[i*1024+j] = __Gx_0[i*1024+j]*__Gx_0[i*1024+j];      /*0042*/
            __Ixx_0[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_1[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_2[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_3[i*1024+j] = __Ixx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1) {                                /*0047*/
            __Iyy_1[i*1024+j] = __Gy_1[i*1024+j]*__Gy_1[i*1024+j];      /*0048*/
            __Iyy_0[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_1[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_2[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_3[i*1024+j] = __Iyy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1) {                                /*0053*/
            __Ixy_2[i*1024+j] = __Gx_2[i*1024+j]*__Gy_2[i*1024+j];      /*0054*/
            __Ixy_0[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_1[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_2[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_3[i*1024+j] = __Ixy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1) {                                /*0061*/
            __Sxx_0[i*1024+j] = (__Ixx_0[(i-1)*1024+(j-1)]+2*__Ixx_0[(i-1)*1024+j]+__Ixx_0[(i-1)*1024+(j+1)]+2*(__Ixx_0[i*1024+(j-1)]+2*__Ixx_0[i*1024+j]+__Ixx_0[i*1024+(j+1)])+__Ixx_0[(i+1)*1024+(j-1)]+__Ixx_0[(i+1)*1024+j]+__Ixx_0[(i+1)*1024+(j+1)])/16;            /*0062*/
            __Sxx_0[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_1[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_2[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_3[i*1024+j] = __Sxx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1) {                                /*0067*/
            __Syy_1[i*1024+j] = (__Iyy_1[(i-1)*1024+(j-1)]+2*__Iyy_1[(i-1)*1024+j]+__Iyy_1[(i-1)*1024+(j+1)]+2*(__Iyy_1[i*1024+(j-1)]+2*__Iyy_1[i*1024+j]+__Iyy_1[i*1024+(j+1)])+__Iyy_1[(i+1)*1024+(j-1)]+__Iyy_1[(i+1)*1024+j]+__Iyy_1[(i+1)*1024+(j+1)])/16;            /*0068*/
            __Syy_0[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_1[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_2[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_3[i*1024+j] = __Syy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1) {                                /*0073*/
            __Sxy_2[i*1024+j] = (__Ixy_2[(i-1)*1024+(j-1)]+2*__Ixy_2[(i-1)*1024+j]+__Ixy_2[(i-1)*1024+(j+1)]+2*(__Ixy_2[i*1024+(j-1)]+2*__Ixy_2[i*1024+j]+__Ixy_2[i*1024+(j+1)])+__Ixy_2[(i+1)*1024+(j-1)]+__Ixy_2[(i+1)*1024+j]+__Ixy_2[(i+1)*1024+(j+1)])/16;            /*0074*/
            __Sxy_0[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_1[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_2[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_3[i*1024+j] = __Sxy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1) {                                /*0081*/
            __out_0[i*1024+j] = __Sxx_0[i*1024+j]*__Syy_0[i*1024+j]-__Sxy_0[i*1024+j]*__Sxy_0[i*1024+j];             /*0082*/
            __out_0[i*1024+j] = __out_0[i*1024+j];
            __out_1[i*1024+j] = __out_0[i*1024+j];
            __out_2[i*1024+j] = __out_0[i*1024+j];
            __out_3[i*1024+j] = __out_0[i*1024+j];
         }
   }
}

IDENTITY_ELIMINATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0012*/
      for(i = 0; i <= 1023; i += 1)                                     /*0013*/
         for(j = 0; j <= 1023; j += 3) {                                /*0014*/
            __in_0[i*1024+j] = 5;                                       /*0015*/

            __in_1[i*1024+j] = __in_0[i*1024+j];
            __in_2[i*1024+j] = __in_0[i*1024+j];
            __in_3[i*1024+j] = __in_0[i*1024+j];
            /* A dummy initialisation, we could load a true image instead */
            __in_0[i*1024+(j+1)] = 3;                                   /*0016*/

            __in_1[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_2[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_3[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_0[i*1024+(j+2)] = 7;                                   /*0016*/

            __in_1[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_2[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_3[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;                                                /*0023*/
      for(i = 1; i <= 1022; i += 1)                                     /*0024*/
         for(j = 1; j <= 1022; j += 1) {                                /*0025*/
            __Gx_3[i*1024+j] = (__in_3[(i-1)*1024+(j-1)]-__in_3[(i-1)*1024+(j+1)]+2*(__in_3[i*1024+(j-1)]-__in_3[i*1024+(j+1)])+__in_3[(i+1)*1024+(j-1)]-__in_3[(i+1)*1024+(j+1)])/8;           /*0026*/
            __Gx_0[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_1[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_2[i*1024+j] = __Gx_3[i*1024+j];

         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0030*/
      for(i = 1; i <= 1022; i += 1)                                     /*0031*/
         for(j = 1; j <= 1022; j += 1) {                                /*0032*/
            __Gy_1[i*1024+j] = (__in_1[(i-1)*1024+(j-1)]-__in_1[(i+1)*1024+(j-1)]+2*(__in_1[(i-1)*1024+j]-__in_1[(i+1)*1024+j])+__in_1[(i-1)*1024+(j+1)]+__in_1[(i+1)*1024+(j+1)])/8;           /*0033*/
            __Gy_0[i*1024+j] = __Gy_1[i*1024+j];

            __Gy_2[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_3[i*1024+j] = __Gy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0039*/
      for(i = 0; i <= 1023; i += 1)                                     /*0040*/
         for(j = 0; j <= 1023; j += 1) {                                /*0041*/
            __Ixx_0[i*1024+j] = __Gx_0[i*1024+j]*__Gx_0[i*1024+j];      /*0042*/

            __Ixx_1[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_2[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_3[i*1024+j] = __Ixx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0045*/
      for(i = 0; i <= 1023; i += 1)                                     /*0046*/
         for(j = 0; j <= 1023; j += 1) {                                /*0047*/
            __Iyy_1[i*1024+j] = __Gy_1[i*1024+j]*__Gy_1[i*1024+j];      /*0048*/
            __Iyy_0[i*1024+j] = __Iyy_1[i*1024+j];

            __Iyy_2[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_3[i*1024+j] = __Iyy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0051*/
      for(i = 0; i <= 1023; i += 1)                                     /*0052*/
         for(j = 0; j <= 1023; j += 1) {                                /*0053*/
            __Ixy_2[i*1024+j] = __Gx_2[i*1024+j]*__Gy_2[i*1024+j];      /*0054*/
            __Ixy_0[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_1[i*1024+j] = __Ixy_2[i*1024+j];

            __Ixy_3[i*1024+j] = __Ixy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0059*/
      for(i = 1; i <= 1022; i += 1)                                     /*0060*/
         for(j = 1; j <= 1022; j += 1) {                                /*0061*/
            __Sxx_0[i*1024+j] = (__Ixx_0[(i-1)*1024+(j-1)]+2*__Ixx_0[(i-1)*1024+j]+__Ixx_0[(i-1)*1024+(j+1)]+2*(__Ixx_0[i*1024+(j-1)]+2*__Ixx_0[i*1024+j]+__Ixx_0[i*1024+(j+1)])+__Ixx_0[(i+1)*1024+(j-1)]+__Ixx_0[(i+1)*1024+j]+__Ixx_0[(i+1)*1024+(j+1)])/16;            /*0062*/

            __Sxx_1[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_2[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_3[i*1024+j] = __Sxx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;                                                /*0065*/
      for(i = 1; i <= 1022; i += 1)                                     /*0066*/
         for(j = 1; j <= 1022; j += 1) {                                /*0067*/
            __Syy_1[i*1024+j] = (__Iyy_1[(i-1)*1024+(j-1)]+2*__Iyy_1[(i-1)*1024+j]+__Iyy_1[(i-1)*1024+(j+1)]+2*(__Iyy_1[i*1024+(j-1)]+2*__Iyy_1[i*1024+j]+__Iyy_1[i*1024+(j+1)])+__Iyy_1[(i+1)*1024+(j-1)]+__Iyy_1[(i+1)*1024+j]+__Iyy_1[(i+1)*1024+(j+1)])/16;            /*0068*/
            __Syy_0[i*1024+j] = __Syy_1[i*1024+j];

            __Syy_2[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_3[i*1024+j] = __Syy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;                                                /*0071*/
      for(i = 1; i <= 1022; i += 1)                                     /*0072*/
         for(j = 1; j <= 1022; j += 1) {                                /*0073*/
            __Sxy_2[i*1024+j] = (__Ixy_2[(i-1)*1024+(j-1)]+2*__Ixy_2[(i-1)*1024+j]+__Ixy_2[(i-1)*1024+(j+1)]+2*(__Ixy_2[i*1024+(j-1)]+2*__Ixy_2[i*1024+j]+__Ixy_2[i*1024+(j+1)])+__Ixy_2[(i+1)*1024+(j-1)]+__Ixy_2[(i+1)*1024+j]+__Ixy_2[(i+1)*1024+(j+1)])/16;            /*0074*/
            __Sxy_0[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_1[i*1024+j] = __Sxy_2[i*1024+j];

            __Sxy_3[i*1024+j] = __Sxy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;                                                /*0079*/
      for(i = 0; i <= 1023; i += 1)                                     /*0080*/
         for(j = 0; j <= 1023; j += 1) {                                /*0081*/
            __out_0[i*1024+j] = __Sxx_0[i*1024+j]*__Syy_0[i*1024+j]-__Sxy_0[i*1024+j]*__Sxy_0[i*1024+j];             /*0082*/

            __out_1[i*1024+j] = __out_0[i*1024+j];
            __out_2[i*1024+j] = __out_0[i*1024+j];
            __out_3[i*1024+j] = __out_0[i*1024+j];
         }
   }
}


Final Code

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {
      unsigned int i, j;
      for(i = 0; i <= 1023; i += 1)
         for(j = 0; j <= 1023; j += 3) {
            __in_0[i*1024+j] = 5;

            __in_1[i*1024+j] = __in_0[i*1024+j];
            __in_2[i*1024+j] = __in_0[i*1024+j];
            __in_3[i*1024+j] = __in_0[i*1024+j];
            /* A dummy initialisation, we could load a true image instead */
            __in_0[i*1024+(j+1)] = 3;

            __in_1[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_2[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_3[i*1024+(j+1)] = __in_0[i*1024+(j+1)];
            __in_0[i*1024+(j+2)] = 7;

            __in_1[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_2[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
            __in_3[i*1024+(j+2)] = __in_0[i*1024+(j+2)];
         }
   }
#pragma distributed on_cluster=03
   {
      unsigned int i, j;
      for(i = 1; i <= 1022; i += 1)
         for(j = 1; j <= 1022; j += 1) {
            __Gx_3[i*1024+j] = (__in_3[(i-1)*1024+(j-1)]-__in_3[(i-1)*1024+(j+1)]+2*(__in_3[i*1024+(j-1)]-__in_3[i*1024+(j+1)])+__in_3[(i+1)*1024+(j-1)]-__in_3[(i+1)*1024+(j+1)])/8;
            __Gx_0[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_1[i*1024+j] = __Gx_3[i*1024+j];
            __Gx_2[i*1024+j] = __Gx_3[i*1024+j];

         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;
      for(i = 1; i <= 1022; i += 1)
         for(j = 1; j <= 1022; j += 1) {
            __Gy_1[i*1024+j] = (__in_1[(i-1)*1024+(j-1)]-__in_1[(i+1)*1024+(j-1)]+2*(__in_1[(i-1)*1024+j]-__in_1[(i+1)*1024+j])+__in_1[(i-1)*1024+(j+1)]+__in_1[(i+1)*1024+(j+1)])/8;
            __Gy_0[i*1024+j] = __Gy_1[i*1024+j];

            __Gy_2[i*1024+j] = __Gy_1[i*1024+j];
            __Gy_3[i*1024+j] = __Gy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;
      for(i = 0; i <= 1023; i += 1)
         for(j = 0; j <= 1023; j += 1) {
            __Ixx_0[i*1024+j] = __Gx_0[i*1024+j]*__Gx_0[i*1024+j];

            __Ixx_1[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_2[i*1024+j] = __Ixx_0[i*1024+j];
            __Ixx_3[i*1024+j] = __Ixx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;
      for(i = 0; i <= 1023; i += 1)
         for(j = 0; j <= 1023; j += 1) {
            __Iyy_1[i*1024+j] = __Gy_1[i*1024+j]*__Gy_1[i*1024+j];
            __Iyy_0[i*1024+j] = __Iyy_1[i*1024+j];

            __Iyy_2[i*1024+j] = __Iyy_1[i*1024+j];
            __Iyy_3[i*1024+j] = __Iyy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;
      for(i = 0; i <= 1023; i += 1)
         for(j = 0; j <= 1023; j += 1) {
            __Ixy_2[i*1024+j] = __Gx_2[i*1024+j]*__Gy_2[i*1024+j];
            __Ixy_0[i*1024+j] = __Ixy_2[i*1024+j];
            __Ixy_1[i*1024+j] = __Ixy_2[i*1024+j];

            __Ixy_3[i*1024+j] = __Ixy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;
      for(i = 1; i <= 1022; i += 1)
         for(j = 1; j <= 1022; j += 1) {
            __Sxx_0[i*1024+j] = (__Ixx_0[(i-1)*1024+(j-1)]+2*__Ixx_0[(i-1)*1024+j]+__Ixx_0[(i-1)*1024+(j+1)]+2*(__Ixx_0[i*1024+(j-1)]+2*__Ixx_0[i*1024+j]+__Ixx_0[i*1024+(j+1)])+__Ixx_0[(i+1)*1024+(j-1)]+__Ixx_0[(i+1)*1024+j]+__Ixx_0[(i+1)*1024+(j+1)])/16;

            __Sxx_1[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_2[i*1024+j] = __Sxx_0[i*1024+j];
            __Sxx_3[i*1024+j] = __Sxx_0[i*1024+j];
         }
   }
#pragma distributed on_cluster=1
   {
      unsigned int i, j;
      for(i = 1; i <= 1022; i += 1)
         for(j = 1; j <= 1022; j += 1) {
            __Syy_1[i*1024+j] = (__Iyy_1[(i-1)*1024+(j-1)]+2*__Iyy_1[(i-1)*1024+j]+__Iyy_1[(i-1)*1024+(j+1)]+2*(__Iyy_1[i*1024+(j-1)]+2*__Iyy_1[i*1024+j]+__Iyy_1[i*1024+(j+1)])+__Iyy_1[(i+1)*1024+(j-1)]+__Iyy_1[(i+1)*1024+j]+__Iyy_1[(i+1)*1024+(j+1)])/16;
            __Syy_0[i*1024+j] = __Syy_1[i*1024+j];

            __Syy_2[i*1024+j] = __Syy_1[i*1024+j];
            __Syy_3[i*1024+j] = __Syy_1[i*1024+j];
         }
   }
#pragma distributed on_cluster=2
   {
      unsigned int i, j;
      for(i = 1; i <= 1022; i += 1)
         for(j = 1; j <= 1022; j += 1) {
            __Sxy_2[i*1024+j] = (__Ixy_2[(i-1)*1024+(j-1)]+2*__Ixy_2[(i-1)*1024+j]+__Ixy_2[(i-1)*1024+(j+1)]+2*(__Ixy_2[i*1024+(j-1)]+2*__Ixy_2[i*1024+j]+__Ixy_2[i*1024+(j+1)])+__Ixy_2[(i+1)*1024+(j-1)]+__Ixy_2[(i+1)*1024+j]+__Ixy_2[(i+1)*1024+(j+1)])/16;
            __Sxy_0[i*1024+j] = __Sxy_2[i*1024+j];
            __Sxy_1[i*1024+j] = __Sxy_2[i*1024+j];

            __Sxy_3[i*1024+j] = __Sxy_2[i*1024+j];
         }
   }
#pragma distributed on_cluster=0
   {
      unsigned int i, j;
      for(i = 0; i <= 1023; i += 1)
         for(j = 0; j <= 1023; j += 1) {
            __out_0[i*1024+j] = __Sxx_0[i*1024+j]*__Syy_0[i*1024+j]-__Sxy_0[i*1024+j]*__Sxy_0[i*1024+j];

            __out_1[i*1024+j] = __out_0[i*1024+j];
            __out_2[i*1024+j] = __out_0[i*1024+j];
            __out_3[i*1024+j] = __out_0[i*1024+j];
         }
   }
}

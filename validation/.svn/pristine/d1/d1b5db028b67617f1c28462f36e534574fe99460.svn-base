#
# Display print_code_preconditions for module imine
#

//  P() {}

el imine(int n)
{

//  P() {}

   int a[n*n];
   {

//  P() {}

      int i;

//  P() {}

      for(i = n*n; i >= 0; i += -1)

//  P(i) {0<=i}

         a[i] = i;
   }

//  P() {}

   return a;
}
#
# Code after linearize_loop_range for module imine
#
el imine(int n)
{
   int a[n*n];
   {
      int i;
      {
         //PIPS generated variable
         int I_0 = n*n;

         for(i = I_0; i >= 0; i += -1)
            a[i] = i;
      }
   }
   return a;
}
#
# Display print_code_preconditions for module imine
#

//  P() {}

el imine(int n)
{

//  P() {}

   int a[n*n];
   {

//  P() {}

      int i;
      {
         //PIPS generated variable

//  P() {}

         int I_0 = n*n;

//  P(I_0) {0<=I_0+n, n<=I_0}



//  P(I_0) {0<=I_0+n, n<=I_0}

         for(i = I_0; i >= 0; i += -1)

//  P(I_0,i) {i<=I_0, 0<=I_0+n, n<=I_0, 0<=i}

            a[i] = i;
      }
   }

//  P() {}

   return a;
}
#
# Code after loop_normalize for module imine
#
el imine(int n)
{
   int a[n*n];
   {
      int i;
      {
         //PIPS generated variable
         int I_0 = n*n;

         for(i = 1; i <= I_0+1; i += 1)
            a[-i+I_0+1] = -i+I_0+1;
         i = -1*pips_max(2, I_0+1, 0)+I_0;
      }
   }
   return a;
}
#
# Display print_code_regions for module imine
#
el imine(int n)
{
   int a[n*n];
   {
      int i;
      {
         //PIPS generated variable
         int I_0 = n*n;


//  <a[PHI1]-W-MAY-{0<=PHI1, PHI1<=I_0, 0<=I_0+n, n<=I_0}>

         for(i = 1; i <= I_0+1; i += 1)

//  <a[PHI1]-W-EXACT-{PHI1+i==I_0+1, 1<=i, i<=I_0+1, 0<=I_0+n,
//    n<=I_0}>

            a[-i+I_0+1] = -i+I_0+1;
         i = -1*pips_max(2, I_0+1, 0)+I_0;
      }
   }
   return a;
}

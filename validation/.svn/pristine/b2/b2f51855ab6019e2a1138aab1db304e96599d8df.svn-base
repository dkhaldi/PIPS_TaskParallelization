!!
!! file for wave5.f
!!
c
c
c modifications for spec
c
c
c initialized some uninitialized (assumed to be zero) values
c disabled some code paths not used in the benchmark
c scaled down benchmark (5 iterations instead of 20)
c 11/5/90 mrg changed view of array BUFFER
c 11/5/90 mrg changed STOP 'NSTOP' since it caused verification difficulties
c 11/5/90 mrg eliminated use of unitialized varable CPTIM
c  4/11/91 J.Lo changed CDIR$ to CCDIR$ 
C 8/6/91  dzn Use legal ANSI FORTRAN-77 array bounds declarations; completely
C             remove `CDIR$ IVDEP' vectorizer directives; suppress
C             uninitialized formal warnings in SETB.
C 10/20 change to double precision
C           
c
C **********************************************************************
C *                                                                    *
C *  Copyright, 1986, The Regents of the University of California.     *
C *  This software was produced under a U. S. Government contract      *
C *  (W-7405-ENG-36) by the Los Alamos National Laboratory, which is   *
C *  operated by the University of California for the U. S. Department *
C *  of Energy. The U. S. Government is licensed to use, reproduce,    *
C *  and distribute this software. Permission is granted to the public *
C *  to copy and use this software without charge, provided that this  *
C *  Notice and any statement of authorship are reproduced on all      *
C *  copies. Neither the Government nor the University makes any       *
C *  warranty, express or implied, or assumes any liability            *
C *  responsibility for the use of this software.                      *
C *                                                                    *
C **********************************************************************
C
      PROGRAM WAVE
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C     WAVE   CRAY VERSION: 2.1, REVISED 85/2/21
C     APERIODIC IN Y, INJECTION, RESTRUCTURED
C
      PARAMETER ( NBB=512)
C THE NEXT NUMBER MUST BE GREATER THAN NX2 * NY2:
      PARAMETER( NC1 = 78885)
      PARAMETER ( N1D=5000 )
      PARAMETER ( NYY=514 )
      PARAMETER ( NNS=25 )
      PARAMETER ( NDIM=503 )
      PARAMETER ( NNS1 = NNS + 1, NNS2 = NNS * 2 )
      PARAMETER ( NCL = 3 * NYY)
C
      COMMON /HTIM/ PSHCPT, PSHELT, FIOCPT, FIOELT
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON /POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON /POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON /POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON /CURR/   CX(NC1),CY(NC1),CZ(NC1)
      COMMON /EFIELD/ EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON /QBK/    QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
      COMMON /NSTEPS/ NTIMES
C
      CHARACTER*72 TITLE
      DATA TITLE /' SAMPLE WEIBEL INSTABILITY           '/
C THE NEXT NUMBER IS THE NUMBER OF CYCLES TO BE RUN:
c orig version was 20 steps - for spec, we have selected 5 steps
C	PLV
      DATA TLMIN /1800.D0/
c specmod
	DATA KSP0 / 0 /
        DATA CPTIM/ 0.0D0 /
C (0,1)
C     BEGIN BLOCK
C (0,2)

100   FORMAT('  NSTOP STOP ',I6,' CYCLES COMPLETED')
C (0,3)
120   FORMAT(' OVERALL       ELAPSED TIME IS ',F10.4)
C (0,4)
140   FORMAT('  NEW YMAX=',E12.4)
C (0,5)
150   FORMAT(1X,A72/'0  NX=',I4,'  NY=',I4,'  XMAX=',E12.4,'  YMAX=',E12
     &.4,'  DT=',E12.4)
C (0,6)
160   FORMAT(' WARNING**BAD COURANT CONDITION, DT2DX2 = ',E10.3)
C (0,7)
170   FORMAT(' INITIALIZATION COMPLETED!')
C (0,8)
180   FORMAT(' NUM TIMESTEPS TO BE RUN = ',I6)
C (0,9)
190   FORMAT(' TIME STEP',I6,' COMPLETED ')
C (0,10)
250   FORMAT(' INITIALIZING  ELAPSED TIME IS ',F10.4)
C (0,11)
510   FORMAT('  CPTIME STOP   CPTIME=',F7.0,12X)
C (0,12)
520   FORMAT(6X,' IT=',I6,3X,' PROBLEM TIME=',F9.3)
C (0,13)

CHW   CALL SAMPLE(5HTFILE,4)
CHW   CALL SAMPON
c        call fpi
      NC = NC1
C (0,14)
      NB = NBB
C (0,15)
      TRUN = 620.D0
C (0,16)
C
      OPEN (UNIT=9,FILE='WAVE.OUT',STATUS='UNKNOWN') 
C (0,17)
C
C          BEGINING OF DATA READ CYCLE
C
      CALL GENPRB
C (0,18)
      CALL JOBTIM(TIM1)
C (0,19)
C
      IF ((NX+2)*(NY+2).GT.NC) THEN
C (0,20)
         STOP 'DIMEN'
      ELSE
C (0,21)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,22)
      IF (SINA.NE.0.D0) THEN
C (0,23)
C        BEGIN BLOCK
C (0,24)
C
C          ADJUST YMAX TO FIT OBLIQUELY INCIDENT WAVE
C
         INT = MAX0(1, IDINT(SINA*YMAX*.5D0/PI+.5D0))
C (0,25)
         YMAX = 2.D0*PI*INT/SINA
C (0,26)
         WRITE (9, 140) YMAX
C        END BLOCK
      ELSE
C (0,27)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,28)
      WRITE (9, 150) TITLE, NX, NY, XMAX, YMAX, DT
C (0,29)
      DT2DX2 = DT**2*((NX/XMAX)**2+(NY/YMAX)**2)
C (0,30)
      IF (DT2DX2.GT.1.D0) THEN
C (0,31)
         WRITE (9, 160) DT2DX2
      ELSE
C (0,32)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,33)
      IF (DT2DX2.GT.1.D0.AND.IMPSW.EQ.0) THEN
C (0,34)
         CALL ENDRUN('COURANT')
      ELSE
C (0,35)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,36)

C                   ** INITIALIZE PROBLEM **
      T = 0.D0
C (0,37)
      CALL JOBTIM(TMI1)
C (0,38)
      CALL INIT
C (0,39)
      CALL JOBTIM(TMI2)
C (0,40)
      TMICP = TMI2-TMI1
C (0,41)
      WRITE (9, 170) 
C (0,42)
      WRITE (9, 180) NTIMES
C (0,43)
C     BEGIN UNSTRUCTURED
C (1,1)
10    IF (NTIMES.EQ.0) GOTO 99938
C (7,1)

30    IF (NTIMES.LE.IT) GOTO 99937
C (9,1)
C     BEGIN BLOCK
C (9,2)
C MAIN LOOP.....
      IT = IT+1
C (9,3)
      T = T+DT
C (9,4)
      CALL TRANS
C (9,5)
      CALL FIELD
C (9,6)
      L3 = -1
C (9,7)
      CALL DIAGNS
C (9,8)
      IF (MOD(IT, 5).EQ.0) THEN
C (9,9)
         WRITE (9, 190) IT
      ELSE
C (9,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (9,11)
C  CHECK TIME:
      IF (CPTIM.GT.TRUN.AND.TRUN.LT.TLMIN) THEN
C (9,12)
C        BEGIN BLOCK
C (9,13)
         WRITE (9, 510) CPTIM
C (9,14)
         WRITE (9, 520) IT, T
C (9,15)
c                STOP 'CPTIME'
         STOP
C        END BLOCK
      ELSE
C (9,16)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
      GOTO 30
99938 CONTINUE
C (2,1)
      LDEC = -LDEC
C (3,1)
C     BEGIN BLOCK
C (3,2)
20    CONTINUE
C (3,3)
CHW        CALL GETB(PBUF,L4,KSP0,TBUF)
      L3 = 1
C     END BLOCK
C (4,1)
      IF (KSP0.NE.0) GOTO 99936
C (6,1)
C     BEGIN BLOCK
C (6,2)
      L3 = -1
C (6,3)
CHW        CALL DIAGNS
      LDEC = IABS(LDEC)
C (6,4)
      NTIMES = -1
C     END BLOCK
      GOTO 10
99936 CONTINUE
C (5,1)
C     BEGIN BLOCK
C (5,2)
      KSP = IABS(KSP0)
C (5,3)
      XLEFT = XLJ(KSP)
C (5,4)
      XRIGHT = XRJ(KSP)
C (5,5)
      QMULT = QSPEC(KSP)
C (5,6)
      WMULT = WSPEC(KSP)
CHW              CALL PDIAG
C     END BLOCK
      GOTO 20
99937 CONTINUE
C   ** RUN COMPLETED! **
CHW        CALL SAMPOFF
CHW        CALL SAMPTRM
C     END UNSTRUCTURED
C (0,44)
      CALL JOBTIM(TIM2)
C (0,45)
      WRITE (9, 100) IT
C (0,46)
      CPUTIM = TIM2-TIM1
C (0,47)
C          WRITE(9,120) CPUTIM
C          WRITE(9,250) TMICP
c           call printfpi_counts
c ** spec mod
c some systems print out the nstop differently and this caused a problem
c with verification.  To resolve this issue, we modified the statement
c below.
c old code
c           STOP 'NSTOP'
c new code
      STOP
C (0,48)
      RETURN
C     END BLOCK
      END
!!
!! file for wave5_data.f
!!
      BLOCK DATA INIDAT
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON /PART/ FIRST, KNEW,KTEST
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
C 11-Apr-91 Intergraph; ANSI FORTRAN-77 Changes
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      PARAMETER (NNS3=NNS-2)
      DATA PI /3.141592653589793D0/, T /0.D0/, IT /0/
      DATA KNEW /1/, FIRST / 0.D0/, KTEST /0/
C
C     NUMERICAL PARAMETERS
C
      DATA NX /32/,NY /4/,DT /.15D0/,IMPSW /1/,KJSMTH /1/,KQSMTH /1/
      DATA NRAND /-2/, NPTIME /0/
C
C     PHYSICAL PARAMETERS
C
      DATA XMAX /8.D0/, YMAX /1.D0/,KBND /0/,KBNDY/0/,KEI /0/,KEE /1/
C
C     INPUT E.M. WAVE PARAMETERS
C
      DATA AA, SINA, SINP /0.D0,0.D0,1.D0/, AMPH /0.D0/, TDLAZ /10.D0/
      DATA VEA, FNK /0.D0,1.0D0/
C
C     INPUT FOR PARTICLE HEATING
C
      DATA DXKICK,YK1,YK2/0.D0,0.D0,0.D0/
      DATA FNKICK/1.D0/,XKICK/0.D0/,VOSC/0.D0/,TPEAK/0.D0/,TWIDTH/1.D0/
      DATA VMPXH/0.D0/, VMPYH/0.D0/,DELE/0.D0/,DLASER/0.D0/,XLASER/0.D0/
     x 
C
C     EXTERNAL FIELD PARAMETERS
C
      DATA EXC, EYC, EZC, BXC, BYC, BZC /6*0.D0/
C
C     PARTICLE PARAMETERS
C
      DATA NSP /1/
      DATA NPX /NNS*120/, NPY /NNS*30/, NSPEC /NNS*0/
     1 QSPEC /-1.D0,1.D0,NNS3*0.D0/, WSPEC /1.D0,100.D0,NNS3*0.D0/,
     1 VMPX   /NNS*.1D0/, VMPY  /NNS*0.D0/, VMPZ   /NNS*0.D0/,
     1 XDRIFT /NNS*0.D0/, YDRIFT/NNS*0.D0/, ZDRIFT /NNS*0.D0/
      DATA IDNX /NNS1*2/, XN /NNS2*0.D0/, DENX /NNS2*1.D0/,
     1     IDNY /NNS1*2/, YN /NNS2*0.D0/, DENY /NNS2*1.D0/
C
C     PARTICLE BOUNDARY CONDITIONS
C
      DATA IBCNDL /NNS*1 /, IBCNDR /NNS*1/,
     1     IBCNDT /NNS*1 /, IBCNDB /NNS*1/,
     1     XLJ    /NNS*0.D0/, XRJ    /NNS*0.D0/,
     1     XTJ    /NNS*0.D0/, XBJ    /NNS*0/
      DATA FEREM /.7D0/, AFRACR /1.D0/
      DATA TAU/0.D0/,TAU1/1.D0/,TAU2/0.D0/
C
C     DIAGNOSTIC PARAMETERS
C
      DATA KSPLIT /2/, VLIMA /1.D0/, VLIMB /.1D0/, NPTSA /1/,  NPTSB /1/
     x 
      DATA NPLOT /0/,  NENRG /0/,  NHIST /0/
      DATA NFT1  /1/,  NFT2  /0/
      DATA EPMAX /0.D0/
      DATA TFIN  /0.D0/, EFIN  /0.D0/, NENRG2 /3/
C
C     OTHER INITIALIZED VARIABLES
C
      DATA NEP /50/, TEP /0.D0/
      DATA LDEC, TDEC(1), EDEC(1,1) /3,0.D0,0.D0/
      DATA AVPOYN /0.D0/, EKJ/NNS*0.D0/
      DATA APOYNT /N1D*0.D0/
      DATA EPOUTR, EPOUTL, EPINR, EPINL /200*0.D0/
      DATA EHEAT/0.D0/, EINJ/0/
      DATA ELOSTB /0.D0/, KDIAG /0/
C (0,1)
      RETURN
      END

       SUBROUTINE GENPRB
       IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER ( NYY = 514 )
      PARAMETER ( NNS = 25 )
      PARAMETER ( NNS1 = NNS + 1, NNS2 = NNS * 2 )
      PARAMETER ( NCL = 3 * NYY )
      PARAMETER ( N1D = 5000 )
      PARAMETER ( NDIM = 503 )
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
      COMMON /NSTEPS/ NTIMES
C (0,1)
C     BEGIN BLOCK
C (0,2)

      READ (5, *) 
C (0,3)
      READ (5, *) NTIMES
C (0,4)
      READ (5, *) 
C (0,5)
      READ (5, *) NPX(1), NPY(1)
C (0,6)
      READ (5, *) 
C (0,7)
      READ (5, *) NPLOT
C (0,8)
      READ (5, *) 
C (0,9)
      READ (5, *) NX, NY
C (0,10)
      READ (5, *) 
C (0,11)
      READ (5, *) XMAX, YMAX
C (0,12)
C     NPLOT = 10
C     XMAX = 125.0
C     YMAX = 4.0
C     NX = 2500
C     NY = 80
      DT = .03D0
C (0,13)
      KBOUND = 0
C (0,14)
      NSP = 1
C (0,15)
C     NPY(1) = 200
C     NPX(1) = 10000
C USE IMPSW = -1 IF KEE = KEI = 1 OR 0
C     IMPSW = -1
      KEE = 2
C (0,16)
      KEI = 2
C (0,17)
      VMPX(1) = .1D0
C (0,18)
      VMPY(1) = .2D0
C (0,19)
      VMPZ(1) = .2D0
C (0,20)
      VLIMB = 1.D0
C (0,21)
      VLIMA = 1.D0
C (0,22)
      QSPEC(1) = -1.D0
C (0,23)
      WSPEC(1) = 1.D0
C (0,24)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE INIT
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER ( NBB = 512 )
      PARAMETER( NC1 = 78885)
      PARAMETER ( N1D = 5000 )
      COMMON  PBUF(NBB,5), Q(NC1), TEMP(2*N1D), TBUF(5,NBB)
      COMMON /POTEN1/ SS(NC1), W(NC1), AX(NC1)
      COMMON /POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON /POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON /CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON /EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON /QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)), (Y(1),PBUF(1,2)), (VX(1),PBUF(1,3)),
     x 
     *  (VY(1),PBUF(1,4)), (VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER (NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER (NNS1=NNS+1, NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      DIMENSION DNX(N1D), DNY(512)
      EQUIVALENCE(DNX,TEMP), (DNY,TEMP(N1D))
      EXTERNAL RANF
c specmod
	DOUBLE PRECISION RRR
	DATA RRR /0.0D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
250   FORMAT(/' TOTAL OF ',I8,' PARTICLES')
C (0,3)
260   FORMAT(' KSP = ',I5,' QSPEC(KSP) = ',E15.5)
C (0,4)
270   FORMAT(/' NP1=',I7,' QMULT=',F6.1,' WMULT=',F6.1,' VMPX=',F8.3,' V
     x 
     &MPY=',F8.3/'  XDRIFT=',F8.3,' YDRIFT=',F8.3,/)
C (0,5)
280   FORMAT(' NET CHARGE IN SYSTEM = ',E15.5)
C (0,6)
290   FORMAT(' INIT CALL TO TRANS')
C (0,7)
300   FORMAT(' INIT CALL TO FIELD')
C (0,8)
310   FORMAT(' INIT CALL TO DIAGNOS')
C (0,9)
320   FORMAT(' ELECTROSTATIC PARTICLE PUSH')
C (0,10)
321   FORMAT(' NONRELATIVISTIC ELECTROMAGNETIC PARTICLE PUSH')
C (0,11)
322   FORMAT('    RELATIVISTIC ELECTROMAGNETIC PARTICLE PUSH')
C (0,12)
111   FORMAT('SPECIES (',I5,') MAY REQUIRE ',I10,' PARTICLES')
C (0,13)
C
      NX1 = NX+1
C (0,14)
      NX2 = NX+2
C (0,15)
      NY1 = NY+1
C (0,16)
      NY2 = NY+2
C (0,17)
      NX2NY2 = NX2*NY2
C (0,18)
      HX = XMAX/NX
C (0,19)
      HY = YMAX/NY
C (0,20)
      HXI = 1.D0/HX
C (0,21)
      HYI = 1.D0/HY
C (0,22)
      NBUF = 1
C (0,23)
      LEN = 200000
C (0,24)
      QLOSTL = 0.D0
C (0,25)
      QLOSTR = 0.D0
C (0,26)
      QLOSTB = 0.D0
C (0,27)
      QLOSTT = 0.D0
C (0,28)
      IF (NFT2.EQ.0) THEN
C (0,29)
         NFT2 = NX
      ELSE
C (0,30)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,31)
      NFT2 = MIN0(NX-NFT1+1, NFT2)
C (0,32)
      IF (NENRG.EQ.0) THEN
C (0,33)
         NENRG = NPLOT
      ELSE
C (0,34)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,35)
      IF (NHIST.EQ.0) THEN
C (0,36)
         NHIST = NPLOT
      ELSE
C (0,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,38)
C
      FKX = 2.D0*PI*FNK/XMAX
C (0,39)
      PHAS = 0.D0
C (0,40)
      IF (VOSC.EQ.0) THEN
C (0,41)
         XLASER = 0.D0
      ELSE
C (0,42)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,43)
C
C   SET RANDOM NO. GENRATOR
C
      IF (NRAND.GE.-1) THEN
C (0,44)
C        BEGIN BLOCK
C (0,45)
         ICNT = NRAND
C (0,46)
         NRAND = -2
C (0,47)
         IF (ICNT.GT.0) THEN
C (0,48)
!     INITIALLY: DO 10
            DO I = 1, ICNT
C (0,49)
10             DUM = RANF(0.0D0)
            ENDDO
         ELSE
C (0,50)
            IF (ICNT.LT.0) THEN
C (0,51)
               RR = RANF(-1.0D0)
            ELSE
C (0,52)
               IF (ICNT.EQ.0) THEN
C (0,53)
                  DUM = RANF(RRR)
               ELSE
C (0,54)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
            ENDIF
         ENDIF
C        END BLOCK
      ELSE
C (0,55)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,56)
C     BEGIN UNSTRUCTURED
C (1,1)
40    IF (NSP.LE.0) RETURN
C (20,1)
C     BEGIN BLOCK
C (20,2)
      IT = 0
C (20,3)
      T = 0.D0
C (20,4)
      TDEC(1) = 0.D0
C (20,5)
      LDEC = 3
C (20,6)
      NP = 0
C (20,7)
!     INITIALLY: DO 50
      DO ISP = 1, NSP
C (20,8)
C        BEGIN BLOCK
C (20,9)
         IF (VMPZ(ISP).EQ.0.) THEN
C (20,10)
            VMPZ(ISP) = VMPX(ISP)
         ELSE
C (20,11)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (20,12)
         IF (VMPY(ISP).EQ.0.) THEN
C (20,13)
            VMPY(ISP) = VMPX(ISP)
         ELSE
C (20,14)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (20,15)
         NSPEC(ISP) = MAX0(NSPEC(ISP), NPX(ISP)*NPY(ISP))
C (20,16)
50       NP = NP+NSPEC(ISP)
C        END BLOCK
      ENDDO
C (20,17)
      WRITE (9, 250) NP
C (20,18)
      CALL SETB(NP, NSP, NB, 5)
C (20,19)
      NP1 = 0
C (20,20)
      KSP = 0
C (20,21)
      QAV = 0.D0
C (20,22)
      Q1 = 0.D0
C     END BLOCK
C (17,1)
C     BEGIN BLOCK
C (17,2)
60    CONTINUE
C (17,3)
      Q1 = 0.D0
C     END BLOCK
C (18,1)
      IF (NP1.EQ.0) GOTO 99970
99969 CONTINUE
C (6,1)
C     BEGIN BLOCK
C (6,2)
      L3 = 1
C (6,3)
      L4 = MIN0(NP1, NB)
C (6,4)
      ISP = KSP
C (6,5)
      IF (NP1.GT.0) THEN
C (6,6)
C        BEGIN BLOCK
C (6,7)
!     INITIALLY: DO 170
         DO L = L3, L4
C (6,8)
C           BEGIN BLOCK
C (6,9)
            IF (NP1XA.EQ.0) THEN
C (6,10)
C              BEGIN BLOCK
C (6,11)
               NP1XA = NP1X
C (6,12)
               NP1Y = NP1Y-1
C (6,13)
               JSX = 2
C (6,14)
               PP = 1-(NP1Y-.5D0)*P1YINV
C (6,15)
               J = JSY
C (6,16)
C              BEGIN UNSTRUCTURED
99968          CONTINUE
C (7,1)
C     DO loop 150 with exit had to be desugared
               IF (J.GT.NY1) GOTO 160
C (11,1)
               JSY = J
C (9,1)
               IF (PP.LT.DNY(J)) GOTO 160
C (10,1)
C              BEGIN BLOCK
C (10,2)
150            CONTINUE
C (10,3)
               J = J+1
C              END BLOCK
               GOTO 99968
C (8,1)
160            CONTINUE
C              END UNSTRUCTURED
C (6,17)
               YSAV = (PP-DNY(JSY-1))*HY/(DNY(JSY)-DNY(JSY-1))+(JSY-2
     &         )*HY
C (6,18)
               DNX(1) = 0.D0
C (6,19)
!     INITIALLY: DO 125
               DO I = 2, NX1
C (6,20)
C                 BEGIN BLOCK
C (6,21)
                  XX = (I-1.5D0)*HX
C (6,22)
125               DNX(I) = DNX(I-1)+DENS(XX, YSAV)*HX*HY
C                 END BLOCK
               ENDDO
C (6,23)
!     INITIALLY: DO 126
               DO I = 2, NX1
C (6,24)
126               DNX(I) = DNX(I)/DNX(NX1)
               ENDDO
C              END BLOCK
            ELSE
C (6,25)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (6,26)
            VMAG = DSQRT(-DLOG(1.D0-.99999D0*RANF(0.0D0)))
C (6,27)
            TH = 2.D0*PI*RANF(0.0D0)
C (6,28)
            VX(L) = VMPX1*VMAG*DCOS(TH)+XDRIF
C (6,29)
            VY(L) = VMPY1*VMAG*DSIN(TH)+YDRIF
C (6,30)
            VMAG = DSQRT(-DLOG(1.D0-.99999D0*RANF(0.0D0)))
C (6,31)
            TH = 2.D0*PI*RANF(0.0D0)
C (6,32)
            VZ(L) = VMPZ1*VMAG*DCOS(TH)+ZDRIF
C (6,33)
            Q1 = Q1+QMULT
C (6,34)
            PP = 1.D0-(NP1XA-.5D0)*P1XINV
C (6,35)
            J = JSX
C (6,36)
C           BEGIN UNSTRUCTURED
99967       CONTINUE
C (12,1)
C     DO loop 130 with exit had to be desugared
            IF (J.GT.NX1) GOTO 140
C (16,1)
            JSX = J
C (14,1)
            IF (PP.LT.DNX(J)) GOTO 140
C (15,1)
C           BEGIN BLOCK
C (15,2)
130         CONTINUE
C (15,3)
            J = J+1
C           END BLOCK
            GOTO 99967
C (13,1)
140         CONTINUE
C           END UNSTRUCTURED
C (6,37)
            X(L) = (PP-DNX(JSX-1))*HX/(DNX(JSX)-DNX(JSX-1))+(JSX-2)*
     &      HX
C (6,38)
            Y(L) = YSAV
C (6,39)
C     IF(VEA.NE.0.D0)VY(L)=VY(L)+VSA*DCOS(FKX*X(L))
            IF (VEA.NE.0.D0) THEN
C (6,40)
               VZ(L) = VZ(L)+VSA*DCOS(FKX*X(L))
            ELSE
C (6,41)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (6,42)
C
C
            NP1XA = NP1XA-1
C (6,43)
            NP1 = NP1-1
C (6,44)
170         CONTINUE
C           END BLOCK
         ENDDO
C (6,45)
         QAV = QAV+Q1
C        END BLOCK
      ELSE
C (6,46)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,47)
      IF (L4.EQ.0) THEN
C (6,48)
C        BEGIN BLOCK
C (6,49)
         L4 = 2
C (6,50)
         X(1) = -1.D0
C (6,51)
         X(2) = -1.D0
C        END BLOCK
      ELSE
C (6,52)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,53)
      CALL PUTB(PBUF(1,1), L4, ISP, TBUF)
C     END BLOCK
      GOTO 60
99970 CONTINUE
C (19,1)
      KSP = KSP+1
C (4,1)
      IF (KSP.GT.NSP) GOTO 180
C (5,1)
C     BEGIN BLOCK
C (5,2)
      IF (KSP.GT.10) THEN
C (5,3)
         STOP
      ELSE
C (5,4)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,5)
      IF (QSPEC(KSP).LT.0.) THEN
C (5,6)
         KEJ = KEE
      ELSE
C (5,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,8)
      IF (QSPEC(KSP).GT.0.) THEN
C (5,9)
         KEJ = KEI
      ELSE
C (5,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,11)
      IF (NPX(KSP)*NPY(KSP).GT.0) THEN
C (5,12)
C        BEGIN BLOCK
C (5,13)
         JSX = 2
C (5,14)
         JSY = 2
C (5,15)
         DNSUM = 0
C (5,16)
         DNY(1) = 0.D0
C (5,17)
!     INITIALLY: DO 80
         DO J = 2, NY1
C (5,18)
C           BEGIN BLOCK
C (5,19)
            DNT = 0.D0
C (5,20)
!     INITIALLY: DO 70
            DO I = 2, NX1
C (5,21)
C              BEGIN BLOCK
C (5,22)
               XX = (I-1.5D0)*HX
C (5,23)
               YY = (J-1.5D0)*HY
C (5,24)
               DN = DENS(XX, YY)
C (5,25)
               DNSUM = DNSUM+DN*HX*HY
C (5,26)
70             DNT = DNT+DN*HX
C              END BLOCK
            ENDDO
C (5,27)
80          DNY(J) = DNY(J-1)+DNT*HY
C           END BLOCK
         ENDDO
C (5,28)
!     INITIALLY: DO 90
         DO J = 2, NY1
C (5,29)
90          DNY(J) = DNY(J)/DNSUM
         ENDDO
C (5,30)
         QSPEC(KSP) = SIGN(DNSUM/(HX*HY*NPX(KSP)*NPY(KSP)), QSPEC(KSP
     &   ))
C (5,31)
         IF (IBCNDL(KSP).EQ.6.OR.IBCNDL(KSP).EQ.7) THEN
C (5,32)
C           BEGIN BLOCK
C (5,33)
            TINJ = TAU
C (5,34)
            VAV = VAVG(VMPX(KSP), XDRIFT(KSP))
C (5,35)
            IF (KEJ.EQ.2) THEN
C (5,36)
               VAV = VAV/DSQRT(1.D0+VAV**2)
            ELSE
C (5,37)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,38)
            NMAX = DENITL(YMAX)*TPART(TINJ)*VAV/(DABS(QSPEC(KSP))*HX*
     &      HY)
C (5,39)
            WRITE (9, 111) KSP, NMAX
C           END BLOCK
         ELSE
C (5,40)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (5,41)
C              IF SPECIES IS TO BE INJECTED, DEFINE QSPEC WITH DENS(0,Y)
C
         IF (IBCNDL(KSP).EQ.6.OR.IBCNDL(KSP).EQ.7) THEN
C (5,42)
C           BEGIN BLOCK
C (5,43)
            TINJ = TAU
C (5,44)
            VAV = VAVG(VMPX(KSP), XDRIFT(KSP))
C (5,45)
            IF (KEJ.EQ.2) THEN
C (5,46)
               VAV = VAV/DSQRT(1.D0+VAV**2)
            ELSE
C (5,47)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (5,48)
            QSPEC(KSP) = SIGN(DENITL(YMAX)*TPART(TINJ)*VAV/(NSPEC(KSP
     &      )*HX*HY), QSPEC(KSP))
C                   QSPEC(KSP)=SIGN(DBLE(NX*NY)/DBLE(NSPEC(KSP))
C     1             ,QSPEC(KSP))
C                   QSPEC(KSP) = 1.5D0 * DINJL(KSP) * QSPEC(KSP)
C                   QSPEC(KSP)=(1.0D0+ERF(XDRIFT(KSP)/VMPX(KSP)))*QSPEC(KS
C           END BLOCK
         ELSE
C (5,50)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ENDIF
C (5,51)
      WRITE (9, 260) KSP, QSPEC(KSP)
C (5,52)
      QMULT = QSPEC(KSP)
C (5,53)
      WMULT = WSPEC(KSP)
C (5,54)
      NP1X = NPX(KSP)
C (5,55)
      NP1Y = NPY(KSP)
C (5,56)
      NP1 = NP1X*NP1Y
C (5,57)
      VMPX1 = VMPX(KSP)
C (5,58)
      VMPY1 = VMPY(KSP)
C (5,59)
      XDRIF = XDRIFT(KSP)
C (5,60)
      YDRIF = YDRIFT(KSP)
C (5,61)
      VMPZ1 = VMPZ(KSP)
C (5,62)
      ZDRIF = ZDRIFT(KSP)
C (5,63)
      IF (XRJ(KSP).EQ.0.D0) THEN
C (5,64)
         XRJ(KSP) = XMAX
      ELSE
C (5,65)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,66)
      IF (XTJ(KSP).EQ.0.D0) THEN
C (5,67)
         XTJ(KSP) = YMAX
      ELSE
C (5,68)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,69)
      WRITE (9, 270) NP1, QMULT, WMULT, VMPX1, VMPY1, XDRIF, YDRIF
C (5,70)
      NP1XA = 0
C (5,71)
      IF (NP1X.NE.0) THEN
C (5,72)
         P1XINV = 1.D0/NP1X
      ELSE
C (5,73)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,74)
      IF (NP1Y.NE.0) THEN
C (5,75)
         P1YINV = 1.D0/NP1Y
      ELSE
C (5,76)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (5,77)
      NP1Y = NP1Y+1
C (5,78)
      IF (VEA.NE.0) THEN
C (5,79)
         VSA = DSIGN(1.0D0, QMULT)*VEA/WMULT
      ELSE
C (5,80)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
      GOTO 99969
C (3,1)
C     BEGIN BLOCK
C (3,2)
180   CONTINUE
C (3,3)
      IF (EPMAX.EQ.0.D0) THEN
C (3,4)
         EPMAX = 25.D0*.5D0*WSPEC(1)*VMPX(1)**2
      ELSE
C (3,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,6)
      DEP = DABS(QSPEC(1))*EPMAX/NEP
C (3,7)
!     INITIALLY: DO 190
      DO IJ = 1, NX2NY2
C (3,8)
C        BEGIN BLOCK
C (3,9)
         Q(IJ) = 0.D0
C (3,10)
         AX(IJ) = 0.D0
C (3,11)
         AX1(IJ) = 0.D0
C (3,12)
         AY(IJ) = 0.D0
C (3,13)
         AY1(IJ) = 0.D0
C (3,14)
         AZ(IJ) = 0.D0
C (3,15)
         AZ1(IJ) = 0.D0
C (3,16)
         EX(IJ) = 0.D0
C (3,17)
         EY(IJ) = 0.D0
C (3,18)
         EZ(IJ) = 0.D0
C (3,19)
         BX(IJ) = 0.D0
C (3,20)
         BY(IJ) = 0.D0
C (3,21)
         BZ(IJ) = 0.D0
C (3,22)
190      CONTINUE
C        END BLOCK
      ENDDO
C (3,23)
!     INITIALLY: DO 210
      DO I = 2, NX1
C (3,24)
C        BEGIN BLOCK
C (3,25)
         Q1 = 0.D0
C (3,26)
!     INITIALLY: DO 200
         DO J = 2, NY1
C (3,27)
C           BEGIN BLOCK
C (3,28)
            XX = (I-1.5D0)*HX
C (3,29)
            YY = (J-1.5D0)*HY
C (3,30)
            L = I+(J-1)*NX2
C (3,31)
!     INITIALLY: DO 200
            DO KSP = 1, NSP
C (3,32)
C              BEGIN BLOCK
C (3,33)
               TM = DENS(XX, YY)*DSIGN(1.0D0, QSPEC(KSP))
C (3,34)
               IF (NPX(KSP)*NPY(KSP).EQ.0) THEN
C (3,35)
                  TM = 0.D0
               ELSE
C (3,36)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (3,37)
               Q(L) = Q(L)-TM
C (3,38)
               Q1 = Q1+TM
C (3,39)
200            CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDDO
C (3,40)
         QAV = QAV-Q1
C (3,41)
210      CONTINUE
C        END BLOCK
      ENDDO
C (3,42)
      WRITE (9, 280) QAV
C (3,43)
      CALL ECWR(Q, QBK, NX2NY2)
C (3,44)
      IF (KBND.EQ.1.AND.IMPSW.EQ.0) THEN
C (3,45)
         CALL INIBND
      ELSE
C (3,46)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,47)
      IF (VEA.NE.0.) THEN
C (3,48)
C        BEGIN BLOCK
C (3,49)
C
C     INITIALIZE WAVE
C
         AMAG = -VEA
C (3,50)
         FKX = 2.D0*PI*FNK/XMAX
C (3,51)
         WKA = DSQRT(1.D0+FKX**2)
C (3,52)
         XX = 0.D0
C (3,53)
!     INITIALLY: DO 230
         DO IX = 1, NX2
C (3,54)
C           BEGIN BLOCK
C (3,55)
            AYA = AMAG*DCOS(FKX*XX)
C (3,56)
            AYB = AMAG*DCOS(FKX*XX+WKA*DT)
C (3,57)
            IJ = IX
C (3,58)
!     INITIALLY: DO 220
            DO IY = 1, NY2
C (3,59)
C              BEGIN BLOCK
C (3,60)
C          AY(IJ)=AYA
C          AY1(IJ)=AYB
               AZ(IJ) = AYA
C (3,61)
               AZ1(IJ) = AYB
C (3,62)
220            IJ = IJ+NX2
C              END BLOCK
            ENDDO
C (3,63)
230         XX = XX+HX
C           END BLOCK
         ENDDO
C        END BLOCK
      ELSE
C (3,64)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,65)
      WRITE (9, 290) 
C (3,66)
      IF (KEE.EQ.0) THEN
C (3,67)
         WRITE (9, 320) 
      ELSE
C (3,68)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,69)
      IF (KEE.EQ.1) THEN
C (3,70)
         WRITE (9, 321) 
      ELSE
C (3,71)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,72)
      IF (KEE.EQ.2) THEN
C (3,73)
         WRITE (9, 322) 
      ELSE
C (3,74)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,75)
      DTSAV = DT
C (3,76)
      DT = 0.D0
C (3,77)
      CALL TRANS
C (3,78)
C     WRITE (9,300)
      DT = DTSAV
C (3,79)
      CALL FIELD
C (3,80)
C     WRITE (9,310)
      L3 = -1
C (3,81)
      CALL DIAGNS
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      FUNCTION IP2(X)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IP2 = INT(DLOG(X)/DLOG(2.D0)+.01D0)
C (0,3)
      RETURN
C     END BLOCK
      END

      FUNCTION DENS(X,Y)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      DENS = DENSX(X)*DENSY(Y)
C (0,3)
C      DENS=0.
C      R=SQRT((X-.5*XMAX)**2+(Y-YMAX*.5)**2)
C      IF (R.LT.XMAX*.1) DENS=1.
C      IF(R.GT..4*XMAX.AND. R.LT..5*XMAX) DENS=1.
C      IF(X.GT..45*XMAX.AND.X.LT..55*XMAX.AND.Y.LT.YMAX*.5) DENS=1.
      RETURN
C     END BLOCK
      END

      FUNCTION DENSX (X)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      DENSX = DENPT(X, IDNX, XN, DENX, XMAX, KSP)
C (0,3)
      RETURN
C     END BLOCK
      END

      FUNCTION DENSY (Y)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      DENSY = DENPT(Y, IDNY, YN, DENY, YMAX, KSP)
C (0,3)
      RETURN
C     END BLOCK
      END

      FUNCTION DENPT (XX,IDN,XN,DEN,XL,KSP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION IDN(26), XN(50), DEN(50)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      J1 = 1
C (0,3)
      J2 = IDN(1)
C (0,4)
      JM = KSP
C (0,5)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (KSP.EQ.1) GOTO 20
C (7,1)
!     INITIALLY: DO 10
      DO I = 2, JM
C (7,2)
C        BEGIN BLOCK
C (7,3)
         J1 = J1+IDN(I-1)
C (7,4)
         J2 = J2+IDN(I)
C (7,5)
10       CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
C     BEGIN BLOCK
C (2,2)
20    CONTINUE
C (2,3)
      IF (XN(J2).EQ.0) THEN
C (2,4)
         XN(J2) = XL
      ELSE
C (2,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (3,1)
      IF (XX.GE.XN(J1).AND.XX.LE.XN(J2)) GOTO 30
C (6,1)
      DENPT = 0.
      RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
30    CONTINUE
C (4,3)
      IF (XX.EQ.XN(J1)) THEN
C (4,4)
         DENPT = DEN(J1)
      ELSE
C (4,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (4,6)
      J1 = J1+1
C (4,7)
!     INITIALLY: DO 40
      DO J = J1, J2
C (4,8)
C        BEGIN BLOCK
C (4,9)
         IF (XX.EQ.XN(J)) THEN
C (4,10)
            DENPT = DEN(J)
         ELSE
C (4,11)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (4,12)
         IF (XX.GT.XN(J-1).AND.XX.LT.XN(J)) THEN
C (4,13)
            DENPT = (DEN(J)-DEN(J-1))*(XX-XN(J))/(XN(J)-XN(J-1))+DEN(
     &      J)
         ELSE
C (4,14)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (4,15)
40       CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (5,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE TRANS
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON /HTIM/ PSHCPT, PSHELT, FIOCPT, FIOELT
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C
      NX1 = NX+1
C (0,3)
      NX2 = NX+2
C (0,4)
      NY1 = NY+1
C (0,5)
      NY2 = NY+2
C (0,6)
      NX2NY2 = NX2*NY2
C (0,7)
      KDIAG = 0
C (0,8)
C
!     INITIALLY: DO 10
      DO IJ = 1, NX2NY2
C (0,9)
C        BEGIN BLOCK
C (0,10)
         Q(IJ) = 0.D0
C (0,11)
         CX(IJ) = 0.D0
C (0,12)
         CY(IJ) = 0.D0
C (0,13)
         CZ(IJ) = 0.D0
C (0,14)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,15)
      CALL ECRD(Q, QBK, NX2NY2)
C (0,16)
      CALL LASPOW
C (0,17)
      NTHOLS = 0
C (0,18)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
C
30    CONTINUE
C (1,3)
      CALL GETB(PBUF, L4, KSP0, TBUF)
C (1,4)
      L3 = 1
C     END BLOCK
C (2,1)
      IF (KSP0.EQ.0) GOTO 100
C (17,1)
C     BEGIN BLOCK
C (17,2)
      IF (KSP.NE.IABS(KSP0)) THEN
C (17,3)
C        BEGIN BLOCK
C (17,4)
         KSP = IABS(KSP0)
C (17,5)
         QMULT = QSPEC(KSP)
C (17,6)
         WMULT = WSPEC(KSP)*DABS(QMULT)
C (17,7)
         VMPX1 = VMPX(KSP)
C (17,8)
         VMPY1 = VMPY(KSP)
C (17,9)
         VMPZ1 = VMPZ(KSP)
C (17,10)
         IBCDL = IBCNDL(KSP)
C (17,11)
         IBCDR = IBCNDR(KSP)
C (17,12)
         IBCDT = IBCNDT(KSP)
C (17,13)
         IBCDB = IBCNDB(KSP)
C (17,14)
         XLEFT = XLJ(KSP)
C (17,15)
         XRIGHT = XRJ(KSP)
C (17,16)
         CALL SETINJ
C        END BLOCK
      ELSE
C (17,17)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (17,18)
      ELOST = 0.D0
C     END BLOCK
C (13,1)
      IF (KDIAG.EQ.0) GOTO 99944
99942 CONTINUE
C (12,1)
      CALL PDIAG
      GOTO 30
99944 CONTINUE
C (14,1)
C     BEGIN BLOCK
C (14,2)
      IF (QMULT.LT.0.D0) THEN
C (14,3)
         KBR = KEE+1
      ELSE
C (14,4)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (14,5)
      IF (QMULT.GT.0.D0) THEN
C (14,6)
         KBR = KEI+1
      ELSE
C (14,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (14,8)
      DTSAV = DT
C (14,9)
      IF (QMULT.GT.0.D0.AND.IT.LT.NPTIME) THEN
C (14,10)
         DT = 0.D0
      ELSE
C (14,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (14,12)
      IF (KBR.EQ.1) THEN
C (14,13)
         CALL PARMVE
      ELSE
C (14,14)
         IF (KBR.EQ.2) THEN
C (14,15)
            CALL PARMOV
         ELSE
C (14,16)
            IF (KBR.EQ.3) THEN
C (14,17)
               CALL PARMVR
            ELSE
C (14,18)
               STOP 'KBR'
            ENDIF
         ENDIF
      ENDIF
C (14,19)
      IF (XLASER.GT.0.AND.IT.NE.0.AND.QMULT.LT.0.D0) THEN
C (14,20)
         CALL LASER
      ELSE
C (14,21)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (14,22)
      IF (KSP0.LT.0) THEN
C (14,23)
         CALL LASDEN
      ELSE
C (14,24)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (15,1)
      IF (IBCDL.GE.6.OR.IBCDR.GE.6) GOTO 99943
99941 CONTINUE
C (11,1)
C     BEGIN BLOCK
C (11,2)
      ELOSTB = ELOSTB+ELOST
C (11,3)
      DT = DTSAV
C     END BLOCK
      GOTO 99942
99943 CONTINUE
C (16,1)
C     BEGIN BLOCK
C (16,2)
      CALL INJCON(NTHOLS)
C (16,3)
      IF (KSP0.LT.0) THEN
C (16,4)
         CALL INJBAT(KSP0, NTHOLS)
      ELSE
C (16,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (10,1)
      IF (KSP0.EQ.0) THEN
      ELSE
         GOTO 99941
      ENDIF
C (3,1)
100   KSP = 0
C (4,1)
      IF (KDIAG.EQ.0) GOTO 99940
C (9,1)
      IF (KDIAG.LT.0) THEN
C (9,2)
         KDIAG = 0
      ELSE
C (9,3)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
      GOTO 99939
99940 CONTINUE
C (5,1)
      IF (NPLOT.NE.0) THEN
      ELSE
         GOTO 99939
      ENDIF
C (6,1)
      IF (MOD(IT, NPLOT).EQ.0) THEN
      ELSE
         GOTO 99939
      ENDIF
C (7,1)
      KDIAG = -1
      GOTO 30
99939 CONTINUE
C     END UNSTRUCTURED
C (0,19)
      CALL INJCHK(NTHOLS)
C (0,20)
C
C     ADD CONTRIBUTION FROM GHOST CELLS TO REAL CELLS AND SET B.C.
C
      CALL CELBND(Q, NX, NY, NX2, KBND, KBNDY, HX, HY, 0, 0, KQSMTH, 
     &TEMP)
C (0,21)
      CALL CELBND(CX, NX, NY, NX2, KBND, KBNDY, HX, HY, 1, 0, KJSMTH
     &, TEMP)
C (0,22)
      CALL CELBND(CY, NX, NY, NX2, KBND, KBNDY, HX, HY, 0, 1, KJSMTH
     &, TEMP)
C (0,23)
      CALL CELBND(CZ, NX, NY, NX2, KBND, KBNDY, HX, HY, 0, 0, KJSMTH
     &, TEMP)
C (0,24)
      RETURN
C     END BLOCK
      END

      SUBROUTINE CELBND(Q,NX,NY,NXD,KBNDX,KBNDY,
     1  HX,HY,ISYMX,ISYMY,KSMTH,SCRTCH)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C     ROUTINE TO ADD GHOST CELLS OF Q INTO INTERNAL CELLS AND
C       SET GHOST CELLS USING APPROPRIATE BOUNDARY CONDITIONS
C
C       NX IS THE NUMBER OF CELLS IN X (NOT INCLUDING GHOST CELLS)
C       NY IS THE NUMBER OF CELLS IN Y (NOT INCLUDING GHOST CELLS)
C
C       KBNDX = 0 : PERIODIC IN X
C               1 : APERIODIC IN X
C       KBNDY = 0 : PERIODIC IN Y
C               1 : APERIODIC IN Y
C
C       ISYMX = 0 : MAKE FUNCTION Q CONTINUOUS AT X BOUNDARY
C               1 : MAKE FUNCTION Q 0 AT X BOUNDARY
C       ISYMY = 0 : MAKE FUNCTION Q CONTINUOUS AT Y BOUNDARY
C               1 : MAKE FUNCTION 0 AT Y BOUNDARY
C
C       BOUNDARIES ARE DEFINED AT CELL EDGES, Q HAS VALUES AT CELL
C         CENTERS
C
C       KSMTH = 1 : SMOOTH FUNCTION Q
C
      DIMENSION Q(NXD,78885/NXD),SYMX(4),ASYMX(4),SYMY(4),ASYMY(4),SCRTC
     x H(10000)
      DATA  SYMX/0.D0,1.D0,0.D0,1.D0/, SYMY/0.D0,1.D0,0.D0,1.D0/
      DATA ASYMX/1.D0,0.D0,1.D0,0.D0/,ASYMY/1.D0,0.D0,1.D0,0.D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      NX1 = NX+1
C (0,3)
      NY1 = NY+1
C (0,4)
      NY2 = NY+2
C (0,5)
      NX2 = NX+2
C (0,6)
      SYMX(2) = 1.D0
C (0,7)
      SYMY(2) = 1.D0
C (0,8)
      ISYMMX = MIN0(IABS(ISYMX), 1)
C (0,9)
      ISYMMY = MIN0(IABS(ISYMY), 1)
C (0,10)
      IF (KBNDX.EQ.0) THEN
C (0,11)
C        BEGIN BLOCK
C (0,12)
         ISYMMX = 0
C (0,13)
         SYMX(2) = 0.D0
C        END BLOCK
      ELSE
C (0,14)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,15)
      IF (KBNDY.EQ.0) THEN
C (0,16)
C        BEGIN BLOCK
C (0,17)
         ISYMMY = 0
C (0,18)
         SYMY(2) = 0.D0
C        END BLOCK
      ELSE
C (0,19)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,20)
C
C          ADD IN GHOST CELLS ALONG X BOUNDARIES
C
      IF (KBNDX.EQ.0) THEN
C (0,21)
C
C          PERIODIC BOUNDARY CONDITIONS IN X
C
!     INITIALLY: DO 150
         DO J = 1, NY2
C (0,22)
C           BEGIN BLOCK
C (0,23)
            Q(2,J) = Q(2,J)+Q(NX2,J)
C (0,24)
            Q(NX1,J) = Q(NX1,J)+Q(1,J)
C (0,25)
150         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,26)
C
C          APERIODIC BOUNDARY CONDITIONS IN X
C
!     INITIALLY: DO 155
         DO J = 1, NY2
C (0,27)
C           BEGIN BLOCK
C (0,28)
            Q(2,J) = Q(2,J)+Q(1,J)
C (0,29)
            Q(NX1,J) = Q(NX1,J)+Q(NX2,J)
C (0,30)
155         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (0,31)
C
C     ADD IN GHOST CELLS ALONG Y BOUNDARIES
C
      IF (KBNDY.EQ.0) THEN
C (0,32)
C
C           PERIODIC IN Y
C
!     INITIALLY: DO 160
         DO I = 2, NX1
C (0,33)
C           BEGIN BLOCK
C (0,34)
            Q(I,2) = Q(I,2)+Q(I,NY2)
C (0,35)
            Q(I,NY1) = Q(I,NY1)+Q(I,1)
C (0,36)
160         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,37)
C
C           APERIODIC IN Y
C
!     INITIALLY: DO 165
         DO I = 2, NX1
C (0,38)
C           BEGIN BLOCK
C (0,39)
            Q(I,2) = Q(I,2)+Q(I,1)
C (0,40)
            Q(I,NY1) = Q(I,NY1)+Q(I,NY2)
C (0,41)
165         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (0,42)
C
C     IMPOSE BOUNDARY CONDITIONS
C
      IF (KBNDX.EQ.0) THEN
C (0,43)
C
C          PERIODIC IN X
C
!     INITIALLY: DO 170
         DO J = 2, NY1
C (0,44)
C           BEGIN BLOCK
C (0,45)
            Q(1,J) = Q(NX1,J)
C (0,46)
            Q(NX2,J) = Q(2,J)
C (0,47)
170         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,48)
C        BEGIN BLOCK
C (0,49)
C
C          APERIODIC IN X
C
         FAC = 1.D0-2.D0*ISYMMX
C (0,50)
!     INITIALLY: DO 175
         DO J = 2, NY1
C (0,51)
C           BEGIN BLOCK
C (0,52)
            Q(1,J) = FAC*Q(2,J)
C (0,53)
            Q(NX2,J) = FAC*Q(NX1,J)
C (0,54)
175         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDIF
C (0,55)
      IF (KBNDY.EQ.0) THEN
C (0,56)
C
C          PERIODIC IN Y
C
!     INITIALLY: DO 200
         DO I = 1, NX2
C (0,57)
C           BEGIN BLOCK
C (0,58)
            Q(I,1) = Q(I,NY1)
C (0,59)
            Q(I,NY2) = Q(I,2)
C (0,60)
200         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,61)
C        BEGIN BLOCK
C (0,62)
C
C          APERIODIC IN Y
C
         FAC = 1-2*ISYMMY
C (0,63)
!     INITIALLY: DO 205
         DO I = 1, NX2
C (0,64)
C           BEGIN BLOCK
C (0,65)
            Q(I,1) = FAC*Q(I,2)
C (0,66)
            Q(I,NY2) = FAC*Q(I,NY1)
C (0,67)
205         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDIF
C (0,68)
C
      IF (KSMTH.NE.0) THEN
C (0,69)
         IF (ISYMMX.EQ.0.AND.ISYMMY.EQ.0) THEN
C (0,70)
            CALL SMOOTH(NX2, NY2, HX, HY, Q, SYMX, SYMY, SCRTCH)
         ELSE
C (0,71)
            IF (ISYMMX.EQ.0.AND.ISYMMY.EQ.1) THEN
C (0,72)
               CALL SMOOTH(NX2, NY2, HX, HY, Q, SYMX, ASYMY, SCRTCH)
            ELSE
C (0,73)
               IF (ISYMMX.EQ.1.AND.ISYMMY.EQ.0) THEN
C (0,74)
                  CALL SMOOTH(NX2, NY2, HX, HY, Q, ASYMX, SYMY, 
     &            SCRTCH)
               ELSE
C (0,75)
                  IF (ISYMMX.EQ.1.AND.ISYMMX.EQ.1) THEN
C (0,76)
                     CALL SMOOTH(NX2, NY2, HX, HY, Q, ASYMX, ASYMY, 
     &               SCRTCH)
                  ELSE
C (0,77)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
      ELSE
C (0,78)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,79)
      RETURN
C     END BLOCK
      END

      SUBROUTINE BCND
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON /PARBD1/ JB, LB,IB(NBB),IBEG,IEND
      DIMENSION GA(NBB), XH(NBB), YH(NBB), VXH(NBB)
      COMMON /SCR/ SCR(NBB,18)
      EQUIVALENCE (GA,SCR(1,12)), (XH,SCR(1,2)), (YH,SCR(1,3)), (VXH,SCR
     x 
     1 (1,1))
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      YBOT = 0.D0
C (0,3)
      YTOP = YMAX
C (0,4)
      XLEF2 = 2.D0*XLEFT
C (0,5)
      XRIT2 = 2.D0*XRIGHT
C (0,6)
      YTOP2 = 2.D0*YTOP
C (0,7)
      YBOT2 = YBOT
C (0,8)
C     WRITE (6,*) (X(L),Y(L),VX(L),L=L3,L4)
!     INITIALLY: DO 90
      DO L = 1, JB
C (0,9)
C        BEGIN BLOCK
C (0,10)
         LB = IB(L)
C (0,11)
C     WRITE (6,*) 'L,JB,LB,X(LB)= ',L,JB,LB,X(LB),Y(LB),VX(LB),VY(LB)
         IF (X(LB).NE.-1..AND.X(LB).NE.-2.) THEN
C (0,12)
C           BEGIN BLOCK
C (0,13)
            IF (KBND.NE.0) THEN
C (0,14)
C
C     X BOUNDARY CONDITION
C
               IF (X(LB).GT.XRIGHT) THEN
C (0,15)
                  CALL BCNDR
               ELSE
C (0,16)
                  IF (X(LB).LT.XLEFT) THEN
C (0,17)
                     CALL BCNDL
                  ELSE
C (0,18)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ELSE
C (0,19)
               IF (X(LB).GT.XMAX) THEN
C (0,20)
C                 BEGIN BLOCK
C (0,21)
                  X(LB) = X(LB)-XMAX
C (0,22)
                  IF (XH(LB).GE.XMAX) THEN
C (0,23)
                     XH(LB) = XH(LB)-XMAX
                  ELSE
C (0,24)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C                 END BLOCK
               ELSE
C (0,25)
                  IF (X(LB).LT.0.D0) THEN
C (0,26)
C                    BEGIN BLOCK
C (0,27)
                     X(LB) = X(LB)+XMAX
C (0,28)
                     IF (XH(LB).LT.0.D0) THEN
C (0,29)
                        XH(LB) = XH(LB)+XMAX
                     ELSE
C (0,30)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ELSE
C (0,31)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
C (0,32)
            IF (KBNDY.EQ.0) THEN
C (0,33)
C
C              Y BOUNDARY CONDITIONS
C
               IF (Y(LB).GE.YMAX) THEN
C (0,34)
C                 BEGIN BLOCK
C (0,35)
                  Y(LB) = Y(LB)-YMAX
C (0,36)
                  IF (YH(LB).GE.YMAX) THEN
C (0,37)
                     YH(LB) = YH(LB)-YMAX
                  ELSE
C (0,38)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C                 END BLOCK
               ELSE
C (0,39)
                  IF (Y(LB).LT.0.D0) THEN
C (0,40)
C                    BEGIN BLOCK
C (0,41)
                     Y(LB) = Y(LB)+YMAX
C (0,42)
                     IF (YH(LB).LT.0.D0) THEN
C (0,43)
                        YH(LB) = YH(LB)+YMAX
                     ELSE
C (0,44)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ELSE
C (0,45)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ELSE
C (0,46)
               IF (Y(LB).GT.YTOP) THEN
C (0,47)
                  CALL BCNDT
               ELSE
C (0,48)
                  IF (Y(LB).LT.YBOT) THEN
C (0,49)
                     CALL BCNDB
                  ELSE
C (0,50)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
C           END BLOCK
         ELSE
C (0,51)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,52)
90       CONTINUE
C        END BLOCK
      ENDDO
C (0,53)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (DT.EQ.0) RETURN
C (4,1)
      IF (IBCDL.LT.6.AND.IBCDR.LT.6) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      CALL INJALL
C (3,3)
      LOSTL(KSP) = LSTL
C (3,4)
      LOSTR(KSP) = LSTR
C (3,5)
      IF (TRPAR.GT.TINJR(KSP)) THEN
C (3,6)
         TINJR(KSP) = TRPAR
      ELSE
C (3,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,8)
      IF (TLPAR.GT.TINJL(KSP)) THEN
C (3,9)
         TINJL(KSP) = TLPAR
      ELSE
C (3,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,11)
      INJR(KSP) = NINJR
C (3,12)
      INJL(KSP) = NINJL
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE BCNDB
      INTEGER*4 IBIN
      EXTERNAL IBIN
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,JB,LB,IBEG,IEND,IT,
     &NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,
     &KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,
     &LDEC,NEP,L,IEPO
      INTEGER IB(1:NBB),NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:
     &NNS1),IDNY(1:NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),
     &IBCNDB(1:NNS),LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:
     &NNS),INJR(1:NNS),IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XH(1:NBB),VXH(1:NBB),YH(1:
     &NBB),VYH(1:NBB),SCR(1:NBB,1:18),XKICK,DXKICK,YK1,YK2,FNKICK,
     &VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,PI,T,AA,
     &SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC,EZC,BXC
     &,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL),AYLD(1
     &:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),AZRD(1:NCL)
     &,VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),YDRIFT(1:NNS
     &),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),DENY(1:NNS2)
     &,XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,AFRACR,DINJR
     &(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),TINJR(1:NNS),
     &TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(1:NNS),VLIMA,
     &VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC(
     &1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:N1D),EPOUTR(1:
     &50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(1:50),EPINL(1:
     &50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EPOUT,EPIN
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /SCR/ SCR
      COMMON /PARBD1/ JB,LB,IB,IBEG,IEND
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (SCR,VXH), (SCR(1,2),XH), (SCR(1,3),YH)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99994 CONTINUE
C (0,3)
      L = LB
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (QLOSTB/QMULT.LT.-.75D0) GOTO 99987
C (7,1)
      IF (IBCDB.EQ.1.OR.IBCDB.EQ.3) GOTO 99986
C (8,1)
      IF (IBCDB.EQ.2) THEN
C (8,2)
C        BEGIN BLOCK
C (8,3)
C
C     RECREATE PARTICLE
C
         CALL RECRE(1.0D0, 0.0D0, L, Y, VY, VX, VZ, YH, VYH, YBOT, 
     &   VMPY1, VMPX1, VMPZ1, EPOUTB, EPINB)
C
C        END BLOCK
      ELSE
C (8,5)
         IF (IBCDB.EQ.4) THEN
C (8,6)
C           BEGIN BLOCK
C (8,7)
C
C          ABSORB PARTICLE
C
            QLOSTB = QLOSTB+QMULT
C (8,8)
            X(L) = -1.D0
C (8,9)
            EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (8,10)
            IF (KBR.EQ.3) THEN
C (8,11)
               EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
            ELSE
C (8,12)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,13)
            EPOUT = EPOUT*WMULT
C (8,14)
            ELOST = ELOST+EPOUT
C (8,15)
            IEPO = IBIN(EPOUT)
C (8,16)
            EPOUTB(IEPO) = EPOUTB(IEPO)+EPOUT
C           END BLOCK
         ELSE
C (8,17)
            IF (IBCDB.EQ.5) THEN
C (8,18)
C              BEGIN BLOCK
C (8,19)
C
C         RECREATE AFRACR OF ELECTRONS
C
               CALL RECRE(AFRACR, FEREM, L, Y, VY, VX, VZ, YH, VYH, 
     &         YBOT, VMPY1, VMPX1, VMPZ1, EPOUTB, EPINB)
C
C              END BLOCK
            ELSE
C (8,21)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ENDIF
      ENDIF
      RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
99986 CONTINUE
C (6,3)
C
C           REFLECT PARTICLE
C
      Y(L) = 2.D0*YBOT-Y(L)
C (6,4)
      VY(L) = -VY(L)
C     END BLOCK
C (5,1)
      IF (YH(L).LT.YBOT) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
      YH(L) = 2.D0*YBOT-YH(L)
C          VYH(L)=-VYH(L)
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
99987 CONTINUE
C (2,3)
C
C           ABSORB PARTICLE
C
      QLOSTB = QLOSTB+QMULT
C (2,4)
      X(L) = -1.D0
C (2,5)
      EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (2,6)
      IF (KBR.EQ.3) THEN
C (2,7)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (2,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,9)
      EPOUT = EPOUT*WMULT
C (2,10)
      ELOST = ELOST+EPOUT
C (2,11)
      IEPO = IBIN(EPOUT)
C (2,12)
      EPOUTB(IEPO) = EPOUTB(IEPO)+EPOUT
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE BCNDT
      INTEGER*4 IBIN
      EXTERNAL IBIN
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,JB,LB,IBEG,IEND,IT,
     &NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,
     &KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,
     &LDEC,NEP,L,IEPO
      INTEGER IB(1:NBB),NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:
     &NNS1),IDNY(1:NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),
     &IBCNDB(1:NNS),LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:
     &NNS),INJR(1:NNS),IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XH(1:NBB),VXH(1:NBB),YH(1:
     &NBB),VYH(1:NBB),SCR(1:NBB,1:18),XKICK,DXKICK,YK1,YK2,FNKICK,
     &VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,PI,T,AA,
     &SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC,EZC,BXC
     &,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL),AYLD(1
     &:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),AZRD(1:NCL)
     &,VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),YDRIFT(1:NNS
     &),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),DENY(1:NNS2)
     &,XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,AFRACR,DINJR
     &(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),TINJR(1:NNS),
     &TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(1:NNS),VLIMA,
     &VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC(
     &1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:N1D),EPOUTR(1:
     &50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(1:50),EPINL(1:
     &50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EPOUT,EPIN
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /SCR/ SCR
      COMMON /PARBD1/ JB,LB,IB,IBEG,IEND
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (SCR,VXH), (SCR(1,2),XH), (SCR(1,3),YH)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99995 CONTINUE
C (0,3)
      L = LB
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (QLOSTT/QMULT.LT.-.75D0) GOTO 99989
C (7,1)
      IF (IBCDT.EQ.1.OR.IBCDT.EQ.3) GOTO 99988
C (8,1)
      IF (IBCDT.EQ.2) THEN
C (8,2)
C        BEGIN BLOCK
C (8,3)
C
C     RECREATE PARTICLE
C
         CALL RECRE(1.0D0, 0.0D0, L, Y, VY, VX, VZ, YH, VYH, YTOP, -
     &   VMPY1, VMPX1, VMPZ1, EPOUTT, EPINT)
C
C        END BLOCK
      ELSE
C (8,5)
         IF (IBCDT.EQ.4) THEN
C (8,6)
C           BEGIN BLOCK
C (8,7)
C
C          ABSORB PARTICLE
C
            QLOSTT = QLOSTT+QMULT
C (8,8)
            X(L) = -1.D0
C (8,9)
            EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (8,10)
            IF (KBR.EQ.3) THEN
C (8,11)
               EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
            ELSE
C (8,12)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,13)
            EPOUT = EPOUT*WMULT
C (8,14)
            ELOST = ELOST+EPOUT
C (8,15)
            IEPO = IBIN(EPOUT)
C (8,16)
            EPOUTT(IEPO) = EPOUTT(IEPO)+EPOUT
C           END BLOCK
         ELSE
C (8,17)
            IF (IBCDT.EQ.5) THEN
C (8,18)
C              BEGIN BLOCK
C (8,19)
C
C         RECREATE AFRACR OF ELECTRONS
C
               CALL RECRE(AFRACR, FEREM, L, Y, VY, VX, VZ, YH, VYH, 
     &         YTOP, -VMPY1, VMPX1, VMPZ1, EPOUTT, EPINT)
C
C              END BLOCK
            ELSE
C (8,21)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ENDIF
      ENDIF
      RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
99988 CONTINUE
C (6,3)
C
C           REFLECT PARTICLE
C
      Y(L) = 2.D0*YTOP-Y(L)
C (6,4)
      VY(L) = -VY(L)
C     END BLOCK
C (5,1)
      IF (YH(L).LT.YTOP) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
      YH(L) = 2.D0*YTOP-YH(L)
C          VYH(L)=-VYH(L)
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
99989 CONTINUE
C (2,3)
C
C           ABSORB PARTICLE
C
      QLOSTT = QLOSTT+QMULT
C (2,4)
      X(L) = -1.D0
C (2,5)
      EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (2,6)
      IF (KBR.EQ.3) THEN
C (2,7)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (2,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,9)
      EPOUT = EPOUT*WMULT
C (2,10)
      ELOST = ELOST+EPOUT
C (2,11)
      IEPO = IBIN(EPOUT)
C (2,12)
      EPOUTT(IEPO) = EPOUTT(IEPO)+EPOUT
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE BCNDL
      INTEGER*4 IBIN
      EXTERNAL IBIN
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,JB,LB,IBEG,IEND,IT,
     &NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,
     &KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,
     &LDEC,NEP,L,IEPO
      INTEGER IB(1:NBB),NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:
     &NNS1),IDNY(1:NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),
     &IBCNDB(1:NNS),LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:
     &NNS),INJR(1:NNS),IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XH(1:NBB),VXH(1:NBB),YH(1:
     &NBB),VYH(1:NBB),SCR(1:NBB,1:18),XKICK,DXKICK,YK1,YK2,FNKICK,
     &VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,PI,T,AA,
     &SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC,EZC,BXC
     &,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL),AYLD(1
     &:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),AZRD(1:NCL)
     &,VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),YDRIFT(1:NNS
     &),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),DENY(1:NNS2)
     &,XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,AFRACR,DINJR
     &(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),TINJR(1:NNS),
     &TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(1:NNS),VLIMA,
     &VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC(
     &1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:N1D),EPOUTR(1:
     &50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(1:50),EPINL(1:
     &50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EPOUT,EPIN
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /SCR/ SCR
      COMMON /PARBD1/ JB,LB,IB,IBEG,IEND
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (SCR,VXH), (SCR(1,2),XH), (SCR(1,3),YH)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99996 CONTINUE
C (0,3)
      L = LB
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (QLOSTL/QMULT.LT.-.75D0) GOTO 99991
C (7,1)
      IF (IBCDL.EQ.1.OR.IBCDL.EQ.3) GOTO 99990
C (8,1)
      IF (IBCDL.EQ.2) THEN
C (8,2)
C        BEGIN BLOCK
C (8,3)
C
C     RECREATE PARTICLE
C
         CALL RECRE(1.0D0, 0.0D0, L, X, VX, VY, VZ, XH, VXH, XLEFT, 
     &   VMPX1, VMPY1, VMPZ1, EPOUTL, EPINL)
C
C        END BLOCK
      ELSE
C (8,5)
         IF (IBCDL.EQ.4.OR.IBCDL.GE.6) THEN
C (8,6)
C           BEGIN BLOCK
C (8,7)
C
C          ABSORB PARTICLE
C
            QLOSTL = QLOSTL+QMULT
C (8,8)
            X(L) = -1.D0
C (8,9)
            EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (8,10)
            IF (KBR.EQ.3) THEN
C (8,11)
               EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
            ELSE
C (8,12)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,13)
            LSTL = LSTL+1
C (8,14)
            EPOUT = EPOUT*WMULT
C (8,15)
            ELOST = ELOST+EPOUT
C (8,16)
            IEPO = IBIN(EPOUT)
C (8,17)
            EPOUTL(IEPO) = EPOUTL(IEPO)+EPOUT
C           END BLOCK
         ELSE
C (8,18)
            IF (IBCDL.EQ.5) THEN
C (8,19)
C              BEGIN BLOCK
C (8,20)
C
C         RECREATE AFRACR OF ELECTRONS
C
               CALL RECRE(AFRACR, FEREM, L, X, VX, VY, VZ, XH, VXH, 
     &         XLEFT, VMPX1, VMPY1, VMPZ1, EPOUTL, EPINL)
C
C              END BLOCK
            ELSE
C (8,22)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ENDIF
      ENDIF
      RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
99990 CONTINUE
C (6,3)
C
C           REFLECT PARTICLE
C
      X(L) = 2.D0*XLEFT-X(L)
C (6,4)
      VX(L) = -VX(L)
C     END BLOCK
C (5,1)
      IF (XH(L).LT.XLEFT) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
      XH(L) = 2.D0*XLEFT-XH(L)
C (4,3)
      VXH(L) = -VXH(L)
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
99991 CONTINUE
C (2,3)
C
C           ABSORB PARTICLE
C
      QLOSTL = QLOSTL+QMULT
C (2,4)
      X(L) = -1.D0
C (2,5)
      EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (2,6)
      IF (KBR.EQ.3) THEN
C (2,7)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (2,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,9)
      EPOUT = EPOUT*WMULT
C (2,10)
      LSTL = LSTL+1
C (2,11)
      ELOST = ELOST+EPOUT
C (2,12)
      IEPO = IBIN(EPOUT)
C (2,13)
      EPOUTL(IEPO) = EPOUTL(IEPO)+EPOUT
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE BCNDR
      INTEGER*4 IBIN
      EXTERNAL IBIN
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,JB,LB,IBEG,IEND,IT,
     &NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,
     &KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,
     &LDEC,NEP,L,IEPO
      INTEGER IB(1:NBB),NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:
     &NNS1),IDNY(1:NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),
     &IBCNDB(1:NNS),LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:
     &NNS),INJR(1:NNS),IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XH(1:NBB),VXH(1:NBB),YH(1:
     &NBB),VYH(1:NBB),SCR(1:NBB,1:18),XKICK,DXKICK,YK1,YK2,FNKICK,
     &VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,PI,T,AA,
     &SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC,EZC,BXC
     &,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL),AYLD(1
     &:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),AZRD(1:NCL)
     &,VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),YDRIFT(1:NNS
     &),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),DENY(1:NNS2)
     &,XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,AFRACR,DINJR
     &(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),TINJR(1:NNS),
     &TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(1:NNS),VLIMA,
     &VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC(
     &1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:N1D),EPOUTR(1:
     &50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(1:50),EPINL(1:
     &50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EPOUT,EPIN
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /SCR/ SCR
      COMMON /PARBD1/ JB,LB,IB,IBEG,IEND
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (SCR,VXH), (SCR(1,2),XH), (SCR(1,3),YH)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     DATA W1 /0./, W2 /0./, W3 /0./, W4 /0./, XLEF2 /0./, XRIT2 /0./, H
C    1 /0./, HH /0./, HHH /0./, EXA /0./, EYA /0./, EZA /0./, BXA /0./,
C    2 BYA /0./, BZA /0./, G /0./, VXH /0./, XMULT /0./, YMULT /0./,
C    3 ZMULT /0./, XH /0./, YH /0./, L /0./
C
C  BOUNDARY CONDITIONS FOR PARTICLES
C
C     IBCDL=0 PERIODIC
C     IBCDL=1 REFLECTING
C     IBCDL=2  RECREATE/ABSORB
C     IBCDL=3  REFLECT/ABSORB
C     IBCDL=4 ABSORB
C     IBCDR=5 RECREATE AFRACR WITH INITIAL TEMP
C         AND REDUCE ENERGY OF REMAINING BY FEREM AND RANDOMIZE ANGLE
C     IBCDR=6 ABSORB/INJECT PARTICLES AT PROPER TIME
C     IBCDR=7 ABSORB/INJECT TO KEEP CHARGE BALANCED
C     SAME FOR IBCDR
99997 CONTINUE
C (0,3)
      L = LB
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (QLOSTR/QMULT.LT.-.75D0) GOTO 99993
C (7,1)
      IF (IBCDR.EQ.1.OR.IBCDR.EQ.3) GOTO 99992
C (8,1)
      IF (IBCDR.EQ.2) THEN
C (8,2)
C        BEGIN BLOCK
C (8,3)
C
C     RECREATE PARTICLE
C
         CALL RECRE(1.0D0, 0.0D0, L, X, VX, VY, VZ, XH, VXH, XRIGHT, 
     &   -VMPX1, VMPY1, VMPZ1, EPOUTR, EPINR)
C
C        END BLOCK
      ELSE
C (8,5)
         IF (IBCDR.EQ.4.OR.IBCDR.GE.6) THEN
C (8,6)
C           BEGIN BLOCK
C (8,7)
C
C          ABSORB PARTICLE
C
            QLOSTR = QLOSTR+QMULT
C (8,8)
            X(L) = -2.D0
C (8,9)
            EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (8,10)
            IF (KBR.EQ.3) THEN
C (8,11)
               EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
            ELSE
C (8,12)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,13)
            EPIN = 0.D0
C (8,14)
            LSTR = LSTR+1
C (8,15)
            EPOUT = EPOUT*WMULT
C (8,16)
            ELOST = ELOST+EPOUT
C (8,17)
            IEPO = IBIN(EPOUT)
C (8,18)
            EPOUTR(IEPO) = EPOUTR(IEPO)+EPOUT
C           END BLOCK
         ELSE
C (8,19)
            IF (IBCDR.EQ.5) THEN
C (8,20)
C              BEGIN BLOCK
C (8,21)
C
C         RECREATE AFRACR OF ELECTRONS
C
               CALL RECRE(AFRACR, FEREM, L, X, VX, VY, VZ, XH, VXH, 
     &         XRIGHT, -VMPX1, VMPY1, VMPZ1, EPOUTR, EPINR)
C

C              END BLOCK
            ELSE
C (8,23)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ENDIF
      ENDIF
      RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
99992 CONTINUE
C (6,3)
C
C           REFLECT PARTICLE
C
      X(L) = 2.D0*XRIGHT-X(L)
C (6,4)
      VX(L) = -VX(L)
C     END BLOCK
C (5,1)
      IF (XH(L).LT.XRIGHT) RETURN
C (4,1)
C     BEGIN BLOCK
C (4,2)
      XH(L) = 2.D0*XRIGHT-XH(L)
C (4,3)
      VXH(L) = -VXH(L)
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
99993 CONTINUE
C (2,3)
C
C           ABSORB PARTICLE
C
      QLOSTR = QLOSTR+QMULT
C (2,4)
      X(L) = -2.D0
C (2,5)
      EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (2,6)
      IF (KBR.EQ.3) THEN
C (2,7)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (2,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,9)
      LSTR = LSTR+1
C (2,10)
      EPOUT = EPOUT*WMULT
C (2,11)
      ELOST = ELOST+EPOUT
C (2,12)
      IEPO = IBIN(EPOUT)
C (2,13)
      EPOUTR(IEPO) = EPOUTR(IEPO)+EPOUT
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE BCNDS
      INTEGER*4 IBIN
      EXTERNAL IBIN
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,JB,LB,IBEG,IEND,IT,
     &NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,
     &KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,
     &LDEC,NEP,L,IEPO
      INTEGER IB(1:NBB),NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:
     &NNS1),IDNY(1:NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),
     &IBCNDB(1:NNS),LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:
     &NNS),INJR(1:NNS),IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XH(1:NBB),VXH(1:NBB),YH(1:
     &NBB),VYH(1:NBB),SCR(1:NBB,1:18),XKICK,DXKICK,YK1,YK2,FNKICK,
     &VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,PI,T,AA,
     &SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC,EZC,BXC
     &,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL),AYLD(1
     &:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),AZRD(1:NCL)
     &,VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),YDRIFT(1:NNS
     &),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),DENY(1:NNS2)
     &,XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,AFRACR,DINJR
     &(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),TINJR(1:NNS),
     &TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(1:NNS),VLIMA,
     &VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC(
     &1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:N1D),EPOUTR(1:
     &50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(1:50),EPINL(1:
     &50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EPOUT,EPIN
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /SCR/ SCR
      COMMON /PARBD1/ JB,LB,IB,IBEG,IEND
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (SCR,VXH), (SCR(1,2),XH), (SCR(1,3),YH)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     DATA W1 /0./, W2 /0./, W3 /0./, W4 /0./, XLEF2 /0./, XRIT2 /0./, H
C    1 /0./, HH /0./, HHH /0./, EXA /0./, EYA /0./, EZA /0./, BXA /0./,
C    2 BYA /0./, BZA /0./, G /0./, VXH /0./, XMULT /0./, YMULT /0./,
C    3 ZMULT /0./, XH /0./, YH /0./, L /0./
C
C  BOUNDARY CONDITIONS FOR PARTICLES
C
C     IBCDL=0 PERIODIC
C     IBCDL=1 REFLECTING
C     IBCDL=2  RECREATE/ABSORB
C     IBCDL=3  REFLECT/ABSORB
C     IBCDL=4 ABSORB
C     IBCDR=5 RECREATE AFRACR WITH INITIAL TEMP
C         AND REDUCE ENERGY OF REMAINING BY FEREM AND RANDOMIZE ANGLE
C     IBCDR=6 ABSORB/INJECT PARTICLES AT PROPER TIME
C     IBCDR=7 ABSORB/INJECT TO KEEP CHARGE BALANCED
C     SAME FOR IBCDR
99997 CONTINUE
C (0,3)
      L = LB
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (QLOSTR/QMULT.LT.-.75D0) GOTO 99977
C (7,1)
      IF (IBCDR.EQ.1.OR.IBCDR.EQ.3) GOTO 99976
C (8,1)
      IF (IBCDR.EQ.2) THEN
C (8,2)
C        BEGIN BLOCK
C (8,3)
C
C     RECREATE PARTICLE
C
         CALL RECRE(1.0D0, 0.0D0, L, X, VX, VY, VZ, XH, VXH, XRIGHT, 
     &   -VMPX1, VMPY1, VMPZ1, EPOUTR, EPINR)
C
C        END BLOCK
      ELSE
C (8,5)
         IF (IBCDR.EQ.4.OR.IBCDR.GE.6) THEN
C (8,6)
C           BEGIN BLOCK
C (8,7)
C
C          ABSORB PARTICLE
C
            QLOSTR = QLOSTR+QMULT
C (8,8)
            X(L) = -2.D0
C (8,9)
            EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (8,10)
            IF (KBR.EQ.3) THEN
C (8,11)
               EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
            ELSE
C (8,12)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,13)
            EPIN = 0.D0
C (8,14)
            LSTR = LSTR+1
C (8,15)
            EPOUT = EPOUT*WMULT
C (8,16)
            ELOST = ELOST+EPOUT
C (8,17)
            IEPO = IBIN(EPOUT)
C (8,18)
            EPOUTR(IEPO) = EPOUTR(IEPO)+EPOUT
C           END BLOCK
         ELSE
C (8,19)
            IF (IBCDR.EQ.5) THEN
C (8,20)
C              BEGIN BLOCK
C (8,21)
C
C         RECREATE AFRACR OF ELECTRONS
C
               CALL RECRE(AFRACR, FEREM, L, X, VX, VY, VZ, XH, VXH, 
     &         XRIGHT, -VMPX1, VMPY1, VMPZ1, EPOUTR, EPINR)
C

C              END BLOCK
            ELSE
C (8,23)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ENDIF
      ENDIF
      RETURN
99976 CONTINUE
C (6,1)
C     BEGIN BLOCK
C (6,2)
C
C           REFLECT PARTICLE
C
      X(L) = 2.D0*XRIGHT-X(L)
C (6,3)
      VX(L) = -VX(L)
C     END BLOCK
C (4,1)
      IF (XH(L).LT.XRIGHT) RETURN
C (5,1)
C     BEGIN BLOCK
C (5,2)
      XH(L) = 2.D0*XRIGHT-XH(L)
C (5,3)
      VXH(L) = -VXH(L)
C     END BLOCK
      RETURN
99977 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
C
C           ABSORB PARTICLE
C
      QLOSTR = QLOSTR+QMULT
C (2,3)
      X(L) = -2.D0
C (2,4)
      EPOUT = VX(L)**2+VY(L)**2+VZ(L)**2
C (2,5)
      IF (KBR.EQ.3) THEN
C (2,6)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (2,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,8)
      LSTR = LSTR+1
C (2,9)
      EPOUT = EPOUT*WMULT
C (2,10)
      ELOST = ELOST+EPOUT
C (2,11)
      IEPO = IBIN(EPOUT)
C (2,12)
      EPOUTR(IEPO) = EPOUTR(IEPO)+EPOUT
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      FUNCTION IBIN(Z)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      IBIN = MIN0(NEP, 1+INT(Z/DEP))
C (0,3)
      RETURN
C     END BLOCK
      END

      SUBROUTINE RECRE(AFRAC,FEREM,L,X,VX,VY,VZ,XH,VXH,XBND,
     1  VMPX,VMPY,VMPZ,EPOUTB,EPINB)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION X(512),VX(512),VY(512),VZ(512),XH(512),VXH(512),EPOUTB(5
     x 0),EPINB(50)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      EXTERNAL RANF
      DATA TWOPI /6.283185307D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C      ROUTINE TO RESET PARTICLE ENERGY AT BOUNDARY AND REPLACE PARTICLE
C        BACK ONTO GRID
C
C      SIGN OF VMPX DETERMINES DIRECTION PARTICLE IS DISPLACED
C        WHEN REINSERTED INTO GRID
C         E.G. AT RIGHT BOUNDARY, VMPX SHOULD BE NEGATIVE
C
      VYS = VY(L)
C (0,3)
      VXS = VX(L)
C (0,4)
      VZS = VZ(L)
C (0,5)
      EPOUT = VXS**2+VYS**2+VZS**2
C (0,6)
      A = RANF(0.0D0)
C (0,7)
      IF (A.LT.AFRAC) THEN
C (0,8)
C        BEGIN BLOCK
C (0,9)
C
C      RECREATE AFRAC  WITH SPECIFIED  TEMPERATURE
C
         VX(L) = VMPX*DSQRT(-DLOG(1.D0-.999999D0*RANF(0.0D0)))
C (0,10)
         VMAG = DSQRT(-DLOG(1.D0-.999999D0*RANF(0.0D0)))
C (0,11)
         TH = TWOPI*RANF(0.0D0)
C (0,12)
         VY(L) = VMPY*VMAG*DSIN(TH)
C (0,13)
         VZ(L) = VMPZ*VMAG*DCOS(TH)
C        END BLOCK
      ELSE
C (0,14)
C        BEGIN BLOCK
C (0,15)
C
C          REDUCE ENERGY BY FEREM AND RANDOMIZE
C
         EPO = EPOUT
C (0,16)
         IF (KBR.EQ.3) THEN
C (0,17)
            EPO = 2.D0*(DSQRT(EPO+1.D0)-1.D0)
         ELSE
C (0,18)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,19)
         EPO = FEREM*EPO
C (0,20)
         IF (KBR.EQ.3) THEN
C (0,21)
            VMAG = DSQRT((.5D0*EPO+1.D0)**2-1.D0)
         ELSE
C (0,22)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,23)
         IF (KBR.NE.3) THEN
C (0,24)
            VMAG = DSQRT(EPO)
         ELSE
C (0,25)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,26)
         TH = .25D0*TWOPI*(2.D0*RANF(0.0D0)-1.D0)
C (0,27)
         TH1 = TWOPI*RANF(0.0D0)
C (0,28)
         VZ(L) = VMAG*DSIN(TH)*DSIN(TH1)
C (0,29)
         VY(L) = VMAG*DSIN(TH)*DCOS(TH1)
C (0,30)
         VX(L) = SIGN(VMAG*DCOS(TH), VMPX)
C        END BLOCK
      ENDIF
C (0,31)
      EPIN = VX(L)**2+VY(L)**2+VZ(L)**2
C (0,32)
      IF (KBR.EQ.3) THEN
C (0,33)
         EPOUT = 2.D0*(DSQRT(EPOUT+1.D0)-1.D0)
      ELSE
C (0,34)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,35)
      IF (KBR.EQ.3) THEN
C (0,36)
         EPIN = 2.D0*(DSQRT(EPIN+1.D0)-1.D0)
      ELSE
C (0,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,38)
      EPOUT = EPOUT*WMULT
C (0,39)
      EPIN = EPIN*WMULT
C (0,40)
      VXH(L) = VX(L)
C (0,41)
      DX = VX(L)*DT*RANF(0.0D0)
C (0,42)
      XH(L) = XBND+DX*.5D0
C (0,43)
      X(L) = XBND+DX
C (0,44)
      ELOST = ELOST+EPOUT-EPIN
C (0,45)
C
C   ADD ENERGY TO DIAGNOSTIC BINS
C
      IEPO = IBIN(EPOUT)
C (0,46)
      IEPI = IBIN(EPIN)
C (0,47)
      EPOUTB(IEPO) = EPOUTB(IEPO)+EPOUT
C (0,48)
      EPINB(IEPI) = EPINB(IEPI)+EPIN
C (0,49)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SETINJ
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (N1D=5000)
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      VRINJ = XDRIFT(KSP)
C (0,3)
      VLINJ = XDRIFT(KSP)
C (0,4)
c specmod
c      DRINJ = DINJR(KSP)
c      DLINJ = DINJL(KSP)
      DRINJ = 0.0D0
C (0,5)
      DLINJ = 0.0D0
C (0,6)
      TRPAR = TINJR(KSP)
C (0,7)
      TLPAR = TINJL(KSP)
C (0,8)
      NINJL = INJL(KSP)
C (0,9)
      NINJR = INJR(KSP)
C (0,10)
      LSTR = LOSTR(KSP)
C (0,11)
      LSTL = LOSTL(KSP)
C (0,12)
      IF (IBCDL.EQ.6) THEN
C (0,13)
C        BEGIN BLOCK
C (0,14)
         VAVGL = VAVG(VMPX1, VLINJ)
C (0,15)
         IF (KBR.EQ.3) THEN
C (0,16)
            VAVGL = VAVGL/DSQRT(1.D0+VAVGL**2)
         ELSE
C (0,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,18)
         DTLPAR = DABS(HX*HY*DABS(QMULT)/(DENITL(YMAX)*VAVGL))
C        END BLOCK
      ELSE
C (0,19)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,20)
      IF (IBCDR.EQ.6) THEN
C (0,21)
C        BEGIN BLOCK
C (0,22)
         VAVGR = VAVG(VMPX1, -VRINJ)
C (0,23)
         IF (KBR.EQ.3) THEN
C (0,24)
            VAVGR = VAVGR/DSQRT(1.D0+VAVGR**2)
         ELSE
C (0,25)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,26)
         DTRPAR = DABS(HX*HY*DABS(QMULT)/(DENITR(YMAX)*VAVGR))
C        END BLOCK
      ELSE
C (0,27)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,28)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (T.NE.0.0D0) THEN
      ENDIF
C (2,1)
C      TINJL(1) = 0.0
C      TINJL(2) = 0.0
C      TINJR(1) = 0.0
C      TINJR(2) = 0.0
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
      FUNCTION VAVG (VTH,VD)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DATA WING /7.0D0/, SQRPI/1.772453851D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      X = VD/VTH
C (0,3)
      VAVG = VD
C (0,4)
      IF (X.LT.WING) THEN
C (0,5)
         VAVG = .5D0*(VTH*DEXP(-X*X)/SQRPI+VD*(1+ERF(X)))
      ELSE
C (0,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,7)
      RETURN
C     END BLOCK
      END
C
      FUNCTION TPART(TIN)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
	      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C
C    COMPUTE NORMALIZED TIME TO INJECT PARTICLE
C
C      THIS FUNCTION PROVIDES THE INTEGRAL OF N DT / N MAX
C
C          AT THE PEAK OF PULSE (N MAX) TPART VS TIN HAS A SLOPE
C           OF 1
C
      PI = 3.1415926D0
C (0,3)
      IF (TAU1.EQ.0.0D0) THEN
C (0,4)
         IF (TIN.LE.2.0D0*TAU2) THEN
C (0,5)
C
C          N = DSIN (T*PI/2*TAU2) **2
C
            ANSWER = TIN-TAU2*DSIN(TIN*PI/TAU2)/PI
         ELSE
C (0,6)
            ANSWER = 0.0D0
         ENDIF
      ELSE
C (0,7)
         IF (TAU2.EQ.0.0) THEN
C (0,8)
C
C          N = CONSTANT IN TIME
C
            ANSWER = TIN
         ELSE
C (0,9)
C           BEGIN BLOCK
C (0,10)
C     CODED HERE IS THE CO2 PULSE SHAPE WHERE TAU1 < TAU2
C
C            TAU1 IS THE RISE TIME
C            TAU2 IS THE FALL TIME
C
            A0 = 3.0D0/TAU2
C (0,11)
            A1 = 2.0D0/TAU2+1.0D0/TAU1
C (0,12)
            A2 = 1.0D0/TAU2+2.0D0/TAU1
C (0,13)
            A3 = 3.0D0/TAU1
C (0,14)
C          A4 = 1. / (1.0/A0 - 3.0/A1 + 3.0/A2 - 1.0/A3)
            TAUX = DLOG(TAU2/TAU1)/(1/TAU1-1/TAU2)
C (0,15)
C
C   TAUX IS THE PEAK OF THE PULSE
C
            A4 = 1/((DEXP(-TAUX/TAU2)-DEXP(-TAUX/TAU1))**3)
C (0,16)
            T0 = 1.0D0-DEXP(-A0*TIN)
C (0,17)
            T1 = 1.0D0-DEXP(-A1*TIN)
C (0,18)
            T2 = 1.0D0-DEXP(-A2*TIN)
C (0,19)
            T3 = 1.0D0-DEXP(-A3*TIN)
C (0,20)
            ANSWER = (T0/A0-3.0D0*T1/A1+3.0D0*T2/A2-T3/A3)*A4
C           END BLOCK
         ENDIF
      ENDIF
C (0,21)
C
      TPART = ANSWER
C (0,22)
      RETURN
C     END BLOCK
      END
C
      FUNCTION TCOMP(TPAR)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
C
C     BINARY SEARCH TO CONVERT PROBLEM TIME TO INJECT TIME
C
      DATA BIG /1.D25/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      TMIN = 0.0D0
C (0,3)
      IF (TAU2.EQ.0.0D0) THEN
C (0,4)
         ANSWER = TPAR
      ELSE
C (0,5)
         IF (TAU1.EQ.0.0D0) THEN
C (0,6)
C           BEGIN BLOCK
C (0,7)
            TMAX = 2.0D0*TAU2
C (0,8)
            ANSWER = BIG
C (0,9)
            IF (TPAR.LE.TMAX) THEN
C (0,10)
C              BEGIN BLOCK
C (0,11)
!     INITIALLY: DO 444
               DO I = 1, 25
C (0,12)
C                 BEGIN BLOCK
C (0,13)
                  TMID = (TMIN+TMAX)/2.0D0
C (0,14)
                  XMID = TPART(TMID)
C (0,15)
                  IF (XMID.GT.TPAR) THEN
C (0,16)
                     TMAX = TMID
                  ELSE
C (0,17)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,18)
                  IF (XMID.LT.TPAR) THEN
C (0,19)
                     TMIN = TMID
                  ELSE
C (0,20)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,21)
444               CONTINUE
C                 END BLOCK
               ENDDO
C (0,22)
               ANSWER = TMID
C              END BLOCK
            ELSE
C (0,23)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C           END BLOCK
         ELSE
C (0,24)
C           BEGIN BLOCK
C (0,25)
            TMAX = TMIN+0.1D0*TAU
C (0,26)
            TMIN = 0.0D0
C (0,27)
!     INITIALLY: DO 445
            DO I = 1, 25
C (0,28)
C              BEGIN BLOCK
C (0,29)
               TMID = (TMIN+TMAX)/2.0D0
C (0,30)
               XMID = TPART(TMID)
C (0,31)
               IF (XMID.GT.TPAR) THEN
C (0,32)
                  TMAX = TMID
               ELSE
C (0,33)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (0,34)
               IF (XMID.LT.TPAR) THEN
C (0,35)
                  TMIN = TMID
               ELSE
C (0,36)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (0,37)
445            CONTINUE
C              END BLOCK
            ENDDO
C (0,38)
            ANSWER = TMID
C           END BLOCK
         ENDIF
      ENDIF
C (0,39)
      TCOMP = ANSWER
C (0,40)
      RETURN
C     END BLOCK
      END
C
      FUNCTION DENITL(Y)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      DIMENSION SUM(NYY)
      SAVE SUM
C
C     NORMALIZED INTEGRAL OF DENSITY AT LEFT BOUNDARY
C
      DATA ISET/0/,KSPP/-1/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (ISET.EQ.0.OR.KSP.NE.KSPP) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         SUM(1) = 0.D0
C (0,5)
!     INITIALLY: DO 10
         DO J = 1, NY
C (0,6)
10          SUM(J+1) = SUM(J)+DENS(0.0D0, HY*(J-.5D0))*HY
         ENDDO
C (0,7)
         ISET = 1
C (0,8)
         KSPP = KSP
C        END BLOCK
      ELSE
C (0,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,10)
      J = Y/HY+1
C (0,11)
      FY = Y/HY+1-J
C (0,12)
      FYC = 1.D0-FY
C (0,13)
      DENITL = SUM(J)*FYC+SUM(J+1)*FY
C (0,14)
      RETURN
C     END BLOCK
      END
C
      FUNCTION DENITR(Y)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      DIMENSION SUM(NYY)
      SAVE SUM
C
C     NORMALIZED INTEGRAL OF DENSITY AT RIGHT BOUNDARY
C
      DATA ISET/0/,KSPP/-1/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (ISET.EQ.0.OR.KSP.NE.KSPP) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         SUM(1) = 0.D0
C (0,5)
!     INITIALLY: DO 10
         DO J = 1, NY
C (0,6)
10          SUM(J+1) = SUM(J)+DENS(XMAX, HY*(J-.5D0))*HY
         ENDDO
C (0,7)
         ISET = 1
C (0,8)
         KSPP = KSP
C        END BLOCK
      ELSE
C (0,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,10)
      J = Y/HY+1
C (0,11)
      FY = Y/HY+1-J
C (0,12)
      FYC = 1.D0-FY
C (0,13)
      DENITR = SUM(J)*FYC+SUM(J+1)*FY
C (0,14)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE LINJ
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C     INJECT - LEFT - ELECTROMAGNETIC
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON /PARBD1/ JB,LB,IB(NBB),IBEG,IEND
      DATA TWOPI/6.283185307D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      NINJL = NINJL+1
C (0,3)
      QINJL = QINJL+QMULT
C (0,4)
      VX(LB) = VNEWL(VMPX1, VLINJ)
C (0,5)
      VMAG = DSQRT(-DLOG(1.D0-.999999D0*RANF(0.0D0)))
C (0,6)
      TH = TWOPI*RANF(0.0D0)
C (0,7)
      VY(LB) = VMPY1*VMAG*DSIN(TH)
C (0,8)
      VZ(LB) = VMPZ1*VMAG*DCOS(TH)
C (0,9)
      VPART = VX(LB)
C (0,10)
      IF (KBR.EQ.3) THEN
C (0,11)
         VPART = VPART/DSQRT(1.D0+VPART**2)
      ELSE
C (0,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,13)
      IF (IBCDL.EQ.6) THEN
C (0,14)
         X(LB) = XLEFT+VPART*(T-TCOMP(TLPAR))
      ELSE
C (0,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,16)
      IF (IBCDL.NE.6) THEN
C (0,17)
         X(LB) = XLEFT+VPART*DT*RANF(0.0D0)
      ELSE
C (0,18)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,19)
C      CONST = 2* YMAX / TWOPI
C
C  LOAD Y POSITION WITH SIN(PI*Y/YMAX) DISTRIBUTION
C
C      ARG = -.999999 + 1.999998 * RANF(0.0D0)
C      Y(LB) =  CONST * ACOS(ARG)
      YMN = 0.0D0
C (0,20)
      YMX = YMAX
C (0,21)
      RN = RANF(0.0D0)
C (0,22)
      RDNL = 1.D0/DENITL(YMAX)
C (0,23)
!     INITIALLY: DO 20
      DO I = 1, 25
C (0,24)
C        BEGIN BLOCK
C (0,25)
         YMID = (YMN+YMX)/2.D0
C (0,26)
         XX = DENITL(YMID)*RDNL
C (0,27)
         IF (XX.GT.RN) THEN
C (0,28)
            YMX = YMID
         ELSE
C (0,29)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,30)
20       IF (XX.LT.RN) THEN
C (0,31)
            YMN = YMID
         ELSE
C (0,32)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,33)
      Y(LB) = YMID
C (0,34)
      TLPAR = TLPAR+DTLPAR
C (0,35)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE RINJ
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C     INJECT - RIGHT - ELECTROMAGNETIC
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON /PARBD1/ JB,LB,IB(NBB),IBEG,IEND
      DATA TWOPI/6.283185307D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      NINJR = NINJR+1
C (0,3)
      QINJR = QINJR+QMULT
C (0,4)
      VX(LB) = -VNEWL(VMPX1, -VRINJ)
C (0,5)
      VMAG = DSQRT(-DLOG(1.D0-.999999D0*RANF(0.0D0)))
C (0,6)
      TH = TWOPI*RANF(0.0D0)
C (0,7)
      VY(LB) = VMPY1*VMAG*DSIN(TH)
C (0,8)
      VZ(LB) = VMPZ1*VMAG*DCOS(TH)
C (0,9)
      VPART = VX(LB)
C (0,10)
      IF (KBR.EQ.3) THEN
C (0,11)
         VPART = VPART/DSQRT(1.D0+VPART**2)
      ELSE
C (0,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,13)
      IF (IBCDR.EQ.6) THEN
C (0,14)
         X(LB) = XRIGHT+VPART*(T-TCOMP(TRPAR))
      ELSE
C (0,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,16)
      IF (IBCDR.NE.6) THEN
C (0,17)
         X(LB) = XRIGHT+VPART*DT*RANF(0.0D0)
      ELSE
C (0,18)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,19)
C      CONST = 2* YMAX / TWOPI
C
C  LOAD Y POSITION WITH SIN(PI*Y/YMAX) DISTRIBUTION
C
C      ARG = -.999999D0 + 1.999998D0 * RANF(0.0D0)
C      Y(LB) = CONST * ACOS(ARG)
      YMN = 0.0D0
C (0,20)
      YMX = YMAX
C (0,21)
      RN = RANF(0.0D0)
C (0,22)
      RDNR = 1.D0/DENITR(YMAX)
C (0,23)
!     INITIALLY: DO 20
      DO I = 1, 25
C (0,24)
C        BEGIN BLOCK
C (0,25)
         YMID = (YMN+YMX)/2.D0
C (0,26)
         XX = DENITR(YMID)/RDNR
C (0,27)
         IF (XX.GT.RN) THEN
C (0,28)
            YMX = YMID
         ELSE
C (0,29)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,30)
20       IF (XX.LT.RN) THEN
C (0,31)
            YMN = YMID
         ELSE
C (0,32)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,33)
      Y(LB) = YMID
C (0,34)
      TRPAR = TRPAR+DTRPAR
C (0,35)
      RETURN
C     END BLOCK
      END
C
      FUNCTION VNEWL(VTHX,VDRIFT)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      DATA WING/7.0D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      X0 = VDRIFT/VTHX
C (0,3)
      XMAX = .5D0*(X0+DSQRT(2.0D0+X0*X0))
C (0,4)
      ZMAX = XMAX*DEXP(-(XMAX-X0)**2)
C (0,5)
      XMIN = X0-WING
C (0,6)
      IF (XMIN.LT.0.0D0) THEN
C (0,7)
         XMIN = 0.0D0
      ELSE
C (0,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,9)
      XDIF = X0+WING-XMIN
C (0,10)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
100   X = XDIF*RANF(0.0D0)+XMIN
C (1,3)
      EX = DEXP(-(X-X0)**2)
C (1,4)
      TAU = X*EX
C (1,5)
      Z = ZMAX*RANF(0.0D0)
C     END BLOCK
C (2,1)
      IF (Z.GT.TAU) GOTO 100
C     END UNSTRUCTURED
C (0,11)
      VNEWL = VTHX*X
C (0,12)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE INJBAT(KSP0,NTHOLE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C     INJECT PARTICLES IN NEW BATCH
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON /PARBD1/ JB,LB,IB(NBB),IBEG,IEND
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
C
C     CHECK IF ANY PARTICLES TO INJECT
C
      IF (TLPAR.LT.TPART(T).AND.IBCDL.EQ.6.OR.TRPAR.LT.TPART(T).AND.
     &IBCDR.EQ.6.OR.QLOSTL/QMULT.GT.0.75D0.AND.IBCDL.EQ.7.OR.QLOSTR/
     &QMULT.GT.0.75D0.AND.IBCDR.EQ.7) THEN
      ELSE
         RETURN
      ENDIF
C (2,1)
C     BEGIN BLOCK
C (2,2)
      LB = 0
C (2,3)
C
C     INJECT - LEFT - ELECTROMAGNETIC
C
C
C     WRITE OUT OLD BATCH
C
      KSP0 = KSP
C (2,4)
      CALL PUTB(PBUF, L4, KSP0, TBUF)
C     END BLOCK
C (3,1)
100   IF (QLOSTL/QMULT.GT.0.75D0.AND.IBCDL.EQ.7.OR.TLPAR.LT.TPART(T)
     &.AND.IBCDL.EQ.6) GOTO 99963
C (7,1)
C
C     INJECT - RIGHT - ELECTROMAGNETIC
C
300   IF (QLOSTR/QMULT.GT.0.75D0.AND.IBCDR.EQ.7.OR.TRPAR.LT.TPART(T)
     &.AND.IBCDR.EQ.6) GOTO 99962
C (11,1)
C     BEGIN BLOCK
C (11,2)
C
C     WRITE OUT NEW PARTIAL BATCH
C
      IF (TRPAR.GT.TINJR(KSP)) THEN
C (11,3)
         TINJR(KSP) = TRPAR
      ELSE
C (11,4)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,5)
      IF (TLPAR.GT.TINJL(KSP)) THEN
C (11,6)
         TINJL(KSP) = TLPAR
      ELSE
C (11,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,8)
      INJR(KSP) = NINJR
C (11,9)
      INJL(KSP) = NINJL
C     END BLOCK
C (12,1)
      IF (LB.EQ.0) RETURN
C (14,1)
C     BEGIN BLOCK
C (14,2)
      IF (LB/2*2.NE.LB) THEN
C (14,3)
C        BEGIN BLOCK
C (14,4)
C
C      NUMBER OF PARTICLES IS ODD, MAKE EVEN
C
         NTHOLE = NTHOLE+1
C (14,5)
         LB = LB+1
C (14,6)
         X(LB) = -1.D0
C (14,7)
         Y(LB) = 0.0D0
C (14,8)
         VX(LB) = 0.0D0
C (14,9)
         VY(LB) = 0.0D0
C (14,10)
         VZ(LB) = 0.0D0
C        END BLOCK
      ELSE
C (14,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (14,12)
      KSP0 = KSP
C (14,13)
      DTSAV = DT
C (14,14)
      DT = 0.0D0
C (14,15)
      L4 = LB
C (14,16)
      IF (KBR.EQ.1) THEN
C (14,17)
         CALL PARMVE
      ELSE
C (14,18)
         IF (KBR.EQ.2) THEN
C (14,19)
            CALL PARMOV
         ELSE
C (14,20)
            CALL PARMVR
         ENDIF
      ENDIF
C (14,21)
      DT = DTSAV
C (14,22)
      CALL PUTB(PBUF, LB, KSP0, TBUF)
C     END BLOCK
      RETURN
99962 CONTINUE
C (8,1)
C     BEGIN BLOCK
C (8,2)
      LB = LB+1
C (8,3)
      CALL RINJ
C (8,4)
      EPIN = VX(LB)**2+VY(LB)**2+VZ(LB)**2
C (8,5)
      IF (KBR.EQ.3) THEN
C (8,6)
         EPIN = 2.D0*(DSQRT(EPIN+1.D0)-1.D0)
      ELSE
C (8,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (8,8)
      EPIN = WMULT*EPIN
C (8,9)
      ELOST = ELOST-EPIN
C (8,10)
      EINJ = EINJ+EPIN
C (8,11)
      IEPI = MIN0(NEP, 1+INT(EPIN/DEP))
C (8,12)
      EPINR(IEPI) = EPINR(IEPI)+EPIN
C (8,13)
      QLOSTR = QLOSTR-QMULT
C     END BLOCK
C (9,1)
      IF (LB.LT.NB) GOTO 300
C (10,1)
C     BEGIN BLOCK
C (10,2)
C
C     WRITE OUT NEW FULL BATCH
C
      KSP0 = KSP
C (10,3)
      DTSAV = DT
C (10,4)
      DT = 0.0D0
C (10,5)
      L4 = NB
C (10,6)
      IF (KBR.EQ.1) THEN
C (10,7)
         CALL PARMVE
      ELSE
C (10,8)
         IF (KBR.EQ.2) THEN
C (10,9)
            CALL PARMOV
         ELSE
C (10,10)
            CALL PARMVR
         ENDIF
      ENDIF
C (10,11)
      DT = DTSAV
C (10,12)
      CALL PUTB(PBUF, NB, KSP0, TBUF)
C (10,13)
      LB = 0
C     END BLOCK
      GOTO 300
99963 CONTINUE
C (4,1)
C     BEGIN BLOCK
C (4,2)
      LB = LB+1
C (4,3)
      CALL LINJ
C (4,4)
      EPIN = VX(LB)**2+VY(LB)**2+VZ(LB)**2
C (4,5)
      IF (KBR.EQ.3) THEN
C (4,6)
         EPIN = 2.D0*(DSQRT(EPIN+1.D0)-1.D0)
      ELSE
C (4,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (4,8)
      EPIN = WMULT*EPIN
C (4,9)
      ELOST = ELOST-EPIN
C (4,10)
      EINJ = EINJ+EPIN
C (4,11)
      IEPI = MIN0(NEP, 1+INT(EPIN/DEP))
C (4,12)
      EPINL(IEPI) = EPINL(IEPI)+EPIN
C (4,13)
      QLOSTL = QLOSTL-QMULT
C     END BLOCK
C (5,1)
      IF (LB.LT.NB) GOTO 100
C (6,1)
C     BEGIN BLOCK
C (6,2)
C
C     WRITE OUT NEW FULL BATCH
C
      KSP0 = KSP
C (6,3)
      DTSAV = DT
C (6,4)
      DT = 0.0D0
C (6,5)
      L4 = NB
C (6,6)
      IF (KBR.EQ.1) THEN
C (6,7)
         CALL PARMVE
      ELSE
C (6,8)
         IF (KBR.EQ.2) THEN
C (6,9)
            CALL PARMOV
         ELSE
C (6,10)
            CALL PARMVR
         ENDIF
      ENDIF
C (6,11)
      DT = DTSAV
C (6,12)
      CALL PUTB(PBUF, NB, KSP0, TBUF)
C (6,13)
      LB = 0
C     END BLOCK
      GOTO 100
C (13,1)
      RETURN
C     END UNSTRUCTURED
      END
C
      SUBROUTINE INJALL
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C     INJECT PARTICLES IN HOLES
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      COMMON /PARBD1/ JB,LB,IB(NBB),IBEG,IEND
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (DT.EQ.0.0D0) RETURN
C (20,1)
      LL = L3
C (4,1)
C
C     INJECT - LEFT - ELECTROMAGNETIC
C
100   IF (TLPAR.LT.TPART(T).AND.IBCDL.EQ.6.OR.QLOSTL/QMULT.GT.-.75D0
     &.AND.IBCDL.EQ.7) GOTO 99966
C (12,1)
300   IF (TRPAR.LT.TPART(T).AND.IBCDR.EQ.6.OR.QLOSTR/QMULT.GT.-.75D0
     &.AND.IBCDR.EQ.7) THEN
      ELSE
         RETURN
      ENDIF
C (13,1)
      J = LL
99965 CONTINUE
C (14,1)
C     NUMBER = L4 + 1 - LL
C
C     LOOK AT MAXIMUM GROUP OF 64
C
C     DO loop 20 with exit had to be desugared
      IF (J.GT.L4) RETURN
C (15,1)
      LB = J
C (16,1)
20    IF (X(LB).LT.0) GOTO 310
C (19,1)
      J = J+1
      GOTO 99965
C (17,1)
C     BEGIN BLOCK
C (17,2)
C     IF(NUMBER .GT. 64)NUMBER = 64
C     NMASK = MASKVM(X(LL),NUMBER,1)
C     LB = LEADZ(NMASK)
C     IF(LB .LT. 64)GO TO 310
C
C     NONE IN THIS GROUP, TRY NEXT 64
C
C     LL = LL + 64
C
C     IF NONE, THEN BATCH IS FULL
C
C     IF(LL .GT. L4)GO TO 400
C     GO TO 300
C 310 LB = LB + LL
310   CONTINUE
C (17,3)
C     IF(LB .GT. L4)GO TO 400
      CALL RINJ
C (17,4)
      EPIN = VX(LB)**2+VY(LB)**2+VZ(LB)**2
C (17,5)
      IF (KBR.EQ.3) THEN
C (17,6)
         EPIN = 2.D0*(DSQRT(EPIN+1.D0)-1.D0)
      ELSE
C (17,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (17,8)
      EPIN = WMULT*EPIN
C (17,9)
      ELOST = ELOST-EPIN
C (17,10)
      EINJ = EINJ+EPIN
C (17,11)
      IEPI = MIN0(NEP, 1+INT(EPIN/DEP))
C (17,12)
      EPINR(IEPI) = EPINR(IEPI)+EPIN
C (17,13)
      QLOSTR = QLOSTR-QMULT
C (17,14)
      LL = LB+1
C     END BLOCK
C (18,1)
      IF (LL.LE.L4) THEN
         GOTO 300
      ELSE
         RETURN
      ENDIF
99966 CONTINUE
C (5,1)
      J = LL
99964 CONTINUE
C (6,1)
C     DO loop 10 with exit had to be desugared
      IF (J.GT.L4) RETURN
C (7,1)
      LB = J
C (8,1)
10    IF (X(LB).LT.0) GOTO 999
C (11,1)
      J = J+1
      GOTO 99964
C (9,1)
C 110 LB = LB + LL
999   IF (.FALSE.) GOTO 999
C (10,1)
C     BEGIN BLOCK
C (10,2)
C     IF(LB .GT. L4)GO TO 400
      CALL LINJ
C (10,3)
      EPIN = VX(LB)**2+VY(LB)**2+VZ(LB)**2
C (10,4)
      IF (KBR.EQ.3) THEN
C (10,5)
         EPIN = 2.D0*(DSQRT(EPIN+1.D0)-1.D0)
      ELSE
C (10,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (10,7)
      EPIN = WMULT*EPIN
C (10,8)
      ELOST = ELOST-EPIN
C (10,9)
      EINJ = EINJ+EPIN
C (10,10)
      IEPI = MIN0(NEP, 1+INT(EPIN/DEP))
C (10,11)
      EPINL(IEPI) = EPINL(IEPI)+EPIN
C (10,12)
      QLOSTL = QLOSTL-QMULT
C (10,13)
      LL = LB+1
C     END BLOCK
C (3,1)
      IF (LL.LE.L4) GOTO 100
C (2,1)
C     NUMBER = L4 + 1 - LL
C
C     LOOK AT MAXIMUM GROUP OF 64
C
C     IF(NUMBER .GT. 64)NUMBER = 64
C     NMASK = MASKVM(X(LL),NUMBER,1)
C     LB = LEADZ(NMASK)
C     IF(LB .LT. 64)GO TO 110
C
C     NONE IN THIS GROUP, TRY NEXT 64
C
C     LL = LL + 64
C
C     IF NONE, THEN BATCH IS FULL
C
C     IF(LL .GT. L4)GO TO 400
      RETURN
C     END UNSTRUCTURED
      END
C
      SUBROUTINE INJCON(NTHOLE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C      CONSOLIDATE BATCH
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      NHOLES = 0
C (0,3)
      LOOK = 1
C (0,4)
      LB = 0
C (0,5)
C
C     COUNT NUMBER OF HOLES IN BATCH
C
!     INITIALLY: DO 200
      DO L = L3, L4
C (0,6)
C        BEGIN BLOCK
C (0,7)
C
C     LB IS ADDRESS OF FIRST HOLE
C
         IF (LB.EQ.0.AND.X(L).LT.0) THEN
C (0,8)
            LB = L
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,10)
200      IF (X(L).LT.0) THEN
C (0,11)
            NHOLES = NHOLES+1
         ELSE
C (0,12)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,13)
C 100 NUMBER = L4 + 1 - LOOK
C     IF(NUMBER .GT. 64)NUMBER = 64
C     NMASK =  MASKVM(X(LOOK),NUMBER,1)
C     MHOLES = POPCNT(NMASK)
C     IF(MHOLES .EQ. 0)GO TO 200
C     NHOLES = NHOLES + MHOLES
C     IF(LB .EQ. 0)LB = LOOK + LEADZ(NMASK)
C 200 LOOK = LOOK + NUMBER
C     IF(LOOK .LE. L4)GO TO 100
C
C     NOW HAVE NUMBER OF HOLES, RETURN IF < NB / 4
C
      NTHOLE = NTHOLE+NHOLES
C (0,14)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (NHOLES.LT.NB/4) RETURN
C (8,1)
C     BEGIN BLOCK
C (8,2)
C
C     WRING HOLES OUT OF BATCH, RESET L4
C
      LOUT = LB-1
C (8,3)
      LIN = LB+1
C     END BLOCK
C (7,1)
C     BEGIN BLOCK
C (7,2)
250   IF (X(LIN).GE.0.0D0) THEN
C (7,3)
C        BEGIN BLOCK
C (7,4)
         LOUT = LOUT+1
C (7,5)
         X(LOUT) = X(LIN)
C (7,6)
         Y(LOUT) = Y(LIN)
C (7,7)
         VX(LOUT) = VX(LIN)
C (7,8)
         VY(LOUT) = VY(LIN)
C (7,9)
         VZ(LOUT) = VZ(LIN)
C        END BLOCK
      ELSE
C (7,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (7,11)
      LIN = LIN+1
C     END BLOCK
C (6,1)
      IF (LIN.LE.L4) GOTO 250
C (5,1)
C     BEGIN BLOCK
C (5,2)
      L4 = LOUT
C (5,3)
      NTHOLE = NTHOLE-NHOLES
C     END BLOCK
C (4,1)
      IF (L4/2*2.EQ.L4) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
C
C      NUMBER OF PARTICLES IS ODD, MAKE EVEN
C
      L4 = L4+1
C (3,3)
      X(L4) = -1.D0
C (3,4)
      Y(L4) = 0.0D0
C (3,5)
      VX(L4) = 0.0D0
C (3,6)
      VY(L4) = 0.0D0
C (3,7)
      VZ(L4) = 0.0D0
C (3,8)
      NTHOLE = NTHOLE+1
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
      SUBROUTINE INJCHK(NTHOLE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (N1D=5000)
      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C (0,1)
C     BEGIN BLOCK
C (0,2)
1000  FORMAT(3X,'TIME= ',F10.5,' SPECIES = ',I7,' NET INJECTED= ',I7/,' 
     x 
     & INJECTED: (LEFT)= ',I7,' (RIGHT)= ',I7,' TOTAL= ',I7/,'  LOST: (L
     x 
     &EFT)    = ',I7,' (RIGHT)= ',I7,' TOTAL= ',I7,' TOTAL ON DISK= ',I7
     x 
     &)
C (0,3)
1100  FORMAT(3X,' NO. LOST LEFT= ',F15.5,' NO LOST RIGHT= ',F15.5,'  HOL
     x 
     &ES= ',I7)
C (0,4)
1200  FORMAT
     &(3X,'CHARGE LOST LEFT= ',E15.5,' CHARGE LOST RIGHT= ',E15.5)
C (0,5)
1300  FORMAT('T= ',F12.5,' IST= ',I5,' DISK= ',I10,' TOTAL= ',I10,' NTHO
     x 
     &LES= ',I10)
C (0,6)
C
      CALL NUMB(IBATCH, NUMSP)
C (0,7)
      INJ = 0
C (0,8)
      LTOT = 0
C (0,9)
      LDSK = 0
C (0,10)
!     INITIALLY: DO 10
      DO KSP = 1, NSP
C (0,11)
C        BEGIN BLOCK
C (0,12)
         IF (IBCNDR(KSP).GE.6.OR.IBCNDL(KSP).GE.6) THEN
C (0,13)
C           BEGIN BLOCK
C (0,14)
            IF (TINJR(KSP).LT.TPART(T).AND.IBCNDR(KSP).EQ.6) THEN
C (0,15)
               CALL ENDRUN('INJECTR')
            ELSE
C (0,16)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,17)
            IF (TINJL(KSP).LT.TPART(T).AND.IBCNDL(KSP).EQ.6) THEN
C (0,18)
               CALL ENDRUN('INJECTL')
            ELSE
C (0,19)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,20)
            INJ = INJ+1
C (0,21)
            NINJL = INJL(KSP)
C (0,22)
            NINJR = INJR(KSP)
C (0,23)
            LSTR = LOSTR(KSP)
C (0,24)
            LSTL = LOSTL(KSP)
C (0,25)
            INJT = INJR(KSP)+INJL(KSP)
C (0,26)
            LOSTT = LOSTR(KSP)+LOSTL(KSP)
C (0,27)
            ITOT = INJT-LOSTT
C (0,28)
            LTOT = LTOT+ITOT+NPX(KSP)*NPY(KSP)
C (0,29)
            LDSK = LDSK+IBATCH(KSP)
C (0,30)
            IF (MOD(IT, 50).EQ.0) THEN
C (0,31)
               WRITE (9, 1000) T, KSP, ITOT, INJL(KSP), INJR(KSP), 
     &         INJT, LOSTL(KSP), LOSTR(KSP), LOSTT, IBATCH(KSP)
            ELSE
C (0,32)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C           END BLOCK
         ELSE
C (0,33)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,34)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,35)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (INJ.EQ.0) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      IST = LDSK-LTOT-NTHOLE
C (3,3)
      IF (IABS(IST).NE.0) THEN
C (3,4)
C        BEGIN BLOCK
C (3,5)
         WRITE (9, 1300) T, IST, LDSK, LTOT, NTHOLE
C (3,6)
         IF (IABS(IST).GT.5) THEN
C (3,7)
            CALL ENDRUN('NUMBER')
         ELSE
C (3,8)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (3,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,10)
      QDIV = DABS(QMULT)
C (3,11)
      IF (MOD(IT, 5).EQ.0) THEN
C (3,12)
C        BEGIN BLOCK
C (3,13)
         WRITE (9, 1100) QLOSTL/QDIV, QLOSTR/QDIV, NTHOLE
C (3,14)
         WRITE (9, 1200) QLOSTL, QLOSTR
C        END BLOCK
      ELSE
C (3,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      FUNCTION ERF(X)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DATA A1/.0705230784D0/,
     C     A2/.0422820123D0/,
     C     A3/.0092705272D0/,
     C     A4/.0001520143D0/,
     C     A5/.0002765672D0/,
     C     A6/.0000430638D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      A = A1+X*(A2+X*(A3+X*(A4+X*(A5+X*A6))))
C (0,3)
      ERF = 1.D0-1.D0/((1.D0+A*X)**16)
C (0,4)
      RETURN
C     END BLOCK
      END

      SUBROUTINE FIELD
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
C     DIMENSION IB(2)
      EQUIVALENCE (BZ0,BZC), (EY0,EYC), (EX0,EXC)
      EXTERNAL RANF
      DIMENSION VDOT(NC1), V(NC1)
      DIMENSION BC(4)
      DIMENSION BD(4)
      EQUIVALENCE (VDOT,SS), (V,W)
      DIMENSION BDY1(4),BDY2(4)
       DATA BC /1.D0,0.D0,1.D0,0.D0/,BDY1/0.D0,0.D0,0.D0,0.D0/,
     * BDY2/0.D0,0.D0,0.D0,0.D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
530   FORMAT(' CHARGE IMBALANCE = ',E15.5)
C (0,3)
C     DATA IB /2,2/
      NX1 = NX+1
C (0,4)
      NY1 = NY+1
C (0,5)
      NX2 = NX+2
C (0,6)
      NY2 = NY+2
C (0,7)
      NX2NY = NX2*NY
C (0,8)
      NX2NY1 = NX2*NY1
C (0,9)
      NX2NY2 = NX2*NY2
C (0,10)
      NXD = NX2
C (0,11)
      NXD1 = NXD+1
C (0,12)
      NXD2 = NXD+2
C (0,13)
      NXDNY = NXD*NY
C (0,14)
      NXDNY1 = NXD*NY1
C (0,15)
      NXDNY2 = NXD*NY2
C (0,16)
      NXD1NY = NXD*NY+1
C (0,17)
      NXD2NY = NXD*NY+2
C (0,18)
      HX = XMAX/NX
C (0,19)
      HY = YMAX/NY
C (0,20)
      HXI = 1.D0/HX
C (0,21)
      HYI = 1.D0/HY
C (0,22)
      DTI = 1.D0/DT
C (0,23)
      HXI2 = .5D0*HXI
C (0,24)
      HXI4 = .5D0*HXI2
C (0,25)
      HYI2 = .5D0*HYI
C (0,26)
      HYI4 = .5D0*HYI2
C (0,27)
      HXSQI = HXI**2
C (0,28)
      HYSQI = HYI**2
C (0,29)
      DTSQ = DT**2
C (0,30)
      HXY = HX*HYI
C (0,31)
      BC(3) = 1.D0
C (0,32)
      IF (KBND.EQ.0) THEN
C (0,33)
         BC(1) = 0.D0
      ELSE
C (0,34)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,35)
      IF (KBNDY.EQ.1) THEN
C (0,36)
C        BEGIN BLOCK
C (0,37)
C
C       BDY1 IS USED TO SET  F = 0 AT Y BOUNDARIES
C
         BDY1(1) = 1.D0
C (0,38)
         BDY1(3) = 1.D0
C (0,39)
C
C       BDY2 IS USED TO SET DF/DY = 0 AT Y BOUNDARIES
C
         BDY2(2) = 1.D0
C (0,40)
         BDY2(4) = 1.D0
C        END BLOCK
      ELSE
C (0,41)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,42)
      PHAS = PHAS+2.D0*AMPH*(.5D0-RANF(0.0D0))*DT
C (0,43)
      TA = T/TDLAZ
C (0,44)
      AMP = AA
C (0,45)
      IF (TA.LT.1) THEN
C (0,46)
         AMP = AA*(10.D0*TA**3-15.D0*TA**4+6.D0*TA**5)
      ELSE
C (0,47)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,48)
      COSA = DSQRT(1.D0-SINA**2)
C (0,49)
      CPI = 1.D0/(1.D0+DT*HXI)
C (0,50)
      CMP = (1.D0-DT*HXI)*CPI
C (0,51)
      DCI = 4.D0*DT*CPI
C (0,52)
      CPI = CPI*DT*HXI
C (0,53)
      QFAC = 0.D0
C (0,54)
      IF (NP.GT.0) THEN
C (0,55)
         QFAC = 1.D0
      ELSE
C (0,56)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,57)
      QFX = QFAC*HXI
C (0,58)
      QFX2 = QFX/2.D0
C (0,59)
      QFY = QFAC*HYI
C (0,60)
      QFY2 = QFY/2.D0
C (0,61)
      COSP = DSQRT(1.D0-SINP**2)
C (0,62)
      DTSQI = 1.D0/DTSQ
C (0,63)
      CFT = -4.D0*DTSQI
C (0,64)
      CL = 1.D0
C (0,65)
      BF12 = .5D0*DT*CL*HXI
C (0,66)
      BF34 = .5D0*DT*HXI
C (0,67)
      BF1 = .5D0-BF12
C (0,68)
      BF2 = .5D0+BF12
C (0,69)
      BF3 = .5D0-BF34
C (0,70)
      BF4 = .5D0+BF34
C (0,71)
      KBSW = KBND+1
C (0,72)
      IF (KBND.EQ.0) THEN
C (0,73)
C        BEGIN BLOCK
C (0,74)
         BD(1) = 0.D0
C (0,75)
         BD(2) = 0.D0
C (0,76)
         BD(3) = 0.D0
C (0,77)
         BD(4) = 0.D0
C        END BLOCK
      ELSE
C (0,78)
         IF (KBND.EQ.1) THEN
C (0,79)
C           BEGIN BLOCK
C (0,80)
            BD(1) = 1.0D0
C (0,81)
            BD(2) = .5D0*DT*CL
C (0,82)
            BD(3) = 1.0D0
C (0,83)
            BD(4) = .5D0*DT
C           END BLOCK
         ELSE
C (0,84)
C           BEGIN BLOCK
C (0,85)
40          BD(1) = 1.D0
C (0,86)
            BD(2) = 0.D0
C (0,87)
            BD(3) = 1.D0
C (0,88)
            BD(4) = 0.D0
C (0,89)
            IF (T.LE.TDLAZ) THEN
C (0,90)
               AMP = .5D0*AA*T**2/TDLAZ
            ELSE
C (0,91)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,92)
            IF (T.GT.TDLAZ) THEN
C (0,93)
               AMP = AA*(T-.5D0*TDLAZ)
            ELSE
C (0,94)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C           END BLOCK
         ENDIF
      ENDIF
C (0,95)
      AXC = -AMP*SINP*SINA
C (0,96)
      AYC = AMP*SINP*COSA
C (0,97)
      AZC = AMP*COSP
C (0,98)
      CAYIN = DCI*AYC
C (0,99)
      CAZIN = DCI*AZC
C (0,100)
      AXDT2 = AXC*2.D0*DT
C (0,101)
      AYDT2 = AYC*2.D0*DT
C (0,102)
      AZDT2 = AZC*2.D0*DT
C (0,103)
C
      DKX = COSA*HX
C (0,104)
      DKY = SINA*HY
C (0,105)
C
      QAV = 0.D0
C (0,106)
!     INITIALLY: DO 70
      DO IJ1 = NXD2, NXD2NY, NXD
C (0,107)
C        BEGIN BLOCK
C (0,108)
         V(IJ1-1) = 0.D0
C (0,109)
         Q1 = 0.D0
C (0,110)
         IJ2 = IJ1+NX-1
C (0,111)
!     INITIALLY: DO 60
         DO IJ = IJ1, IJ2
C (0,112)
C           BEGIN BLOCK
C (0,113)
            V(IJ) = -QFAC*Q(IJ)
C (0,114)
            Q1 = Q1+Q(IJ)
C (0,115)
60          CONTINUE
C           END BLOCK
         ENDDO
C (0,116)
         V(IJ2+1) = 0.D0
C (0,117)
         QAV = QAV+Q1
C (0,118)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,119)
C
C     SET  PHI = 0 AT Y BOUNDARIES
C
!     INITIALLY: DO 75
      DO IJ = 1, NX2
C (0,120)
C        BEGIN BLOCK
C (0,121)
         V(IJ) = 0
C (0,122)
         V(IJ+NXDNY1) = 0.D0
C (0,123)
75       CONTINUE
C        END BLOCK
      ENDDO
C (0,124)
      IF (DABS(QAV).GT.1.D-13*NP) THEN
C (0,125)
         WRITE (9, 530) QAV
      ELSE
C (0,126)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,127)
      IF (KBND.EQ.2) THEN
C (0,128)
C        BEGIN BLOCK
C (0,129)
C
C          PHI= 0 AT X = 0,XMAX
C
         BC(1) = 0.0D0
C (0,130)
         BC(2) = 1.0D0
C (0,131)
         BC(3) = 1.0D0
C (0,132)
         BC(4) = 0.0D0
C        END BLOCK
      ELSE
C (0,133)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,134)
      CALL SOLV2Y(NX2, NY2, HX, HY, 0.0D0, V, BC, BDY1, BX)
C (0,135)
      IF (IMPSW.GE.0) THEN
C (0,136)
C        BEGIN BLOCK
C (0,137)
C
C       ELECTROMAGNETIC FIELD SOLVE
C
!     INITIALLY: DO 90
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,138)
C           BEGIN BLOCK
C (0,139)
            VDOT(IJ1-1) = 0.D0
C (0,140)
            IJ2 = IJ1+NX-1
C (0,141)
!     INITIALLY: DO 80
            DO IJ = IJ1, IJ2
C (0,142)
C              BEGIN BLOCK
C (0,143)
               VDOT(IJ) = QFX2*(CX(IJ+1)-CX(IJ-1))+QFY2*(CY(IJ+NXD)-
     &         CY(IJ-NXD))
C (0,144)
80             CONTINUE
C              END BLOCK
            ENDDO
C (0,145)
            VDOT(IJ2+1) = 0.D0
C (0,146)
90          CONTINUE
C           END BLOCK
         ENDDO
C (0,147)
C
C     SET D VDOT/DY  = 0 AT Y BOUNDARIES
C
!     INITIALLY: DO 95
         DO IJ = 1, NX2
C (0,148)
C           BEGIN BLOCK
C (0,149)
            VDOT(IJ) = 0.D0
C (0,150)
            VDOT(IJ+NXDNY1) = 0.D0
C (0,151)
95          CONTINUE
C           END BLOCK
         ENDDO
C (0,152)
         IF (KBND.EQ.2) THEN
C (0,153)
C           BEGIN BLOCK
C (0,154)
C
C          SET D VDOT /DX = 0 AT X = 0,XMAX
C
            BC(1) = 0.0D0
C (0,155)
            BC(2) = 1.0D0
C (0,156)
            BC(3) = 0.0D0
C (0,157)
            BC(4) = 1.0D0
C           END BLOCK
         ELSE
C (0,158)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,159)
         CALL SOLV2Y(NX2, NY2, HX, HY, 0.0D0, VDOT, BC, BDY1, BX)
C        END BLOCK
      ELSE
C (0,160)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,161)
      IF (IMPSW.EQ.0) THEN
C (0,162)
C        BEGIN BLOCK
C (0,163)
C
C     EXPLICIT VECTOR POTENTIAL
C
         IF (KBND.EQ.1) THEN
C (0,164)
            CALL ADVBND
         ELSE
C (0,165)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,166)
C
C     CALCULATE AY
C
         TK = T-.5D0*DKY
C (0,167)
         TK = TK+PHAS
C (0,168)
!     INITIALLY: DO 220
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,169)
C           BEGIN BLOCK
C (0,170)
            TK = TK-DKY
C (0,171)
            FIN = DSIN(TK)
C (0,172)
            IJ2 = IJ1+NX-1
C (0,173)
!     INITIALLY: DO 200
            DO IJ = IJ1, IJ2
C (0,174)
C              BEGIN BLOCK
C (0,175)
               Q(IJ) = 2.D0*AY(IJ)-AY1(IJ)+DTSQ*(HXSQI*(AY(IJ+1)+AY(
     &         IJ-1)-2*AY(IJ))+HYSQI*(AY(IJ+NXD)+AY(IJ-NXD)-2.D0*AY(
     &         IJ))+QFAC*(.25D0*CY(IJ-NXD)+.5D0*CY(IJ)+.25D0*CY(IJ+
     &         NXD))-HYI2*(VDOT(IJ+NXD)-VDOT(IJ-NXD)))
C (0,176)
200            CONTINUE
C              END BLOCK
            ENDDO
C (0,177)
            IJ = IJ2+1
C (0,178)
            IF (KBND.GE.2) THEN
C (0,179)
C              BEGIN BLOCK
C (0,180)
C
C     SET AY=0 AT X = 0,XMAX
C
               Q(IJ) = -Q(IJ-1)
C (0,181)
               Q(IJ-NX-1) = -Q(IJ-NX)
C              END BLOCK
            ELSE
C (0,182)
               IF (KBND.EQ.0) THEN
C (0,183)
C                 BEGIN BLOCK
C (0,184)
C
C          PERIODIC IN X BOUNDARY CONDITIONS
C
                  Q(IJ) = Q(IJ-NX)
C (0,185)
                  Q(IJ-NX-1) = Q(IJ-1)
C                 END BLOCK
               ELSE
C (0,186)
                  IF (KBND.EQ.1) THEN
C (0,187)
C                    BEGIN BLOCK
C (0,188)
C
C          OUTGOING LIGHT WAVE BOUNDARY CONDITIONS
C
                     Q(IJ-NX1) = CMP*(AY(IJ-NX1)-Q(IJ-NX))+AY(IJ-NX)+
     &               CPI*AY1(IJ-NX1)-CAYIN*FIN
C (0,189)
                     Q(IJ) = CMP*(AY(IJ)-Q(IJ-1))+AY(IJ-1)+CPI*AY1(IJ
     &               )
C                    END BLOCK
                  ELSE
C (0,190)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
C (0,191)
220         CONTINUE
C           END BLOCK
         ENDDO
C (0,192)
         IF (KBND.EQ.1) THEN
C (0,193)
C           BEGIN BLOCK
C (0,194)
            ASL = 0.D0
C (0,195)
            ASR = 0.D0
C (0,196)
!     INITIALLY: DO 230
            DO IJ = NXD1, NXD1NY, NXD
C (0,197)
C              BEGIN BLOCK
C (0,198)
               ASL = Q(IJ)-ASL
C (0,199)
               ASR = Q(IJ+NX1)-ASR
C (0,200)
230            CONTINUE
C              END BLOCK
            ENDDO
C (0,201)
            ASL = ASL/NY
C (0,202)
            ASR = ASR/NY
C (0,203)
!     INITIALLY: DO 240
            DO IJ = NXD1, NXD1NY, NXD
C (0,204)
C              BEGIN BLOCK
C (0,205)
               Q(IJ) = Q(IJ)+ASL
C (0,206)
               ASL = -ASL
C (0,207)
               Q(IJ+NX1) = Q(IJ+NX1)+ASR
C (0,208)
               ASR = -ASR
C (0,209)
240            CONTINUE
C              END BLOCK
            ENDDO
C (0,210)
250         CONTINUE
C           END BLOCK
         ELSE
C (0,211)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,212)
         IF (KBNDY.EQ.0) THEN
C (0,213)
C           BEGIN BLOCK
C (0,214)
            NB1 = NXDNY
C (0,215)
            NB2 = NXD
C (0,216)
            FAC = 1.D0
C           END BLOCK
         ELSE
C (0,217)
C           BEGIN BLOCK
C (0,218)
C
C          SET D AY/DY = 0 AT Y BOUNDARIES
C
            NB1 = NXD
C (0,219)
            NB2 = NXDNY
C (0,220)
            FAC = 1.D0
C           END BLOCK
         ENDIF
C (0,221)
!     INITIALLY: DO 260
         DO IJ = 1, NX2
C (0,222)
C           BEGIN BLOCK
C (0,223)
            Q(IJ) = FAC*Q(IJ+NB1)
C (0,224)
            Q(IJ+NXDNY1) = FAC*Q(IJ+NB2)
C (0,225)
260         CONTINUE
C           END BLOCK
         ENDDO
C (0,226)
C
C     REPLACE AY WITH NEW VALUES
C
!     INITIALLY: DO 270
         DO IJ = 1, NXDNY2
C (0,227)
C           BEGIN BLOCK
C (0,228)
            AY1(IJ) = AY(IJ)
C (0,229)
270         AY(IJ) = Q(IJ)
C           END BLOCK
         ENDDO
C (0,230)
C
C     CALCULATE AX
C
         TK = T-.5D0*DKY
C (0,231)
         TK = TK+PHAS
C (0,232)
!     INITIALLY: DO 130
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,233)
C           BEGIN BLOCK
C (0,234)
            TK = TK-DKY
C (0,235)
            FIN = DSIN(TK)
C (0,236)
            IJ2 = IJ1+NX-1
C (0,237)
!     INITIALLY: DO 110
            DO IJ = IJ1, IJ2
C (0,238)
C              BEGIN BLOCK
C (0,239)
               Q(IJ) = 2.D0*AX(IJ)-AX1(IJ)+DTSQ*(HXSQI*(AX(IJ+1)+AX(
     &         IJ-1)-2.D0*AX(IJ))+HYSQI*(AX(IJ+NXD)+AX(IJ-NXD)-2.D0*
     &         AX(IJ))+QFAC*(.25D0*CX(IJ-1)+.5D0*CX(IJ)+.25D0*CX(IJ+1
     &         ))-HXI2*(VDOT(IJ+1)-VDOT(IJ-1)))
C (0,240)
110            CONTINUE
C              END BLOCK
            ENDDO
C (0,241)
            IJ = IJ2+1
C (0,242)
            IF (KBND.GE.2) THEN
C (0,243)
C              BEGIN BLOCK
C (0,244)
C
C        SET D AX/DX = 0. AT X = 0,XMAX
C
               Q(IJ) = Q(IJ-1)
C (0,245)
               Q(IJ-NX-1) = Q(IJ-NX)
C              END BLOCK
            ELSE
C (0,246)
               IF (KBND.EQ.0) THEN
C (0,247)
C                 BEGIN BLOCK
C (0,248)
                  Q(IJ) = Q(IJ-NX)
C (0,249)
                  Q(IJ-NX-1) = Q(IJ-1)
C                 END BLOCK
               ELSE
C (0,250)
                  IF (KBND.EQ.1) THEN
C (0,251)
C                    BEGIN BLOCK
C (0,252)
                     IJ = IJ-NX1
C (0,253)
                     Q(IJ) = Q(IJ+1)+Q(IJ+1-NXD)+HXY*(AY(IJ)+AY(IJ+1)
     &               -AY(IJ-NXD)-AY(IJ+1-NXD))
C (0,254)
                     IJ = IJ+NX1
C (0,255)
                     Q(IJ) = Q(IJ-1)+Q(IJ-1-NXD)-HXY*(AY(IJ)+AY(IJ-1)
     &               -AY(IJ-NXD)-AY(IJ-1-NXD))
C                    END BLOCK
                  ELSE
C (0,256)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
C (0,257)
130         CONTINUE
C           END BLOCK
         ENDDO
C (0,258)
         IF (KBND.EQ.1) THEN
C (0,259)
C           BEGIN BLOCK
C (0,260)
            Q(1) = 0.D0
C (0,261)
            Q(NX2) = 0.D0
C (0,262)
            ASL = 0.D0
C (0,263)
            ASR = 0.D0
C (0,264)
!     INITIALLY: DO 140
            DO IJ = NXD1, NXD1NY, NXD
C (0,265)
C              BEGIN BLOCK
C (0,266)
               Q(IJ) = Q(IJ)-Q(IJ-NXD)
C (0,267)
               ASL = Q(IJ)-ASL
C (0,268)
               Q(IJ+NX1) = Q(IJ+NX1)-Q(IJ-1)
C (0,269)
               ASR = Q(IJ+NX1)-ASR
C (0,270)
140            CONTINUE
C              END BLOCK
            ENDDO
C (0,271)
            ASL = ASL/NY
C (0,272)
            ASR = ASR/NY
C (0,273)
!     INITIALLY: DO 150
            DO IJ = NXD1, NXD1NY, NXD
C (0,274)
C              BEGIN BLOCK
C (0,275)
               Q(IJ) = Q(IJ)+ASL
C (0,276)
               ASL = -ASL
C (0,277)
               Q(IJ+NX1) = Q(IJ+NX1)+ASR
C (0,278)
               ASR = -ASR
C (0,279)
150            CONTINUE
C              END BLOCK
            ENDDO
C (0,280)
160         CONTINUE
C           END BLOCK
         ELSE
C (0,281)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,282)
         IF (KBNDY.EQ.0) THEN
C (0,283)
C           BEGIN BLOCK
C (0,284)
C
C          PERIODIC IN Y
C
            NB1 = NXDNY
C (0,285)
            NB2 = NXD
C (0,286)
            FAC = 1.D0
C           END BLOCK
         ELSE
C (0,287)
C           BEGIN BLOCK
C (0,288)
C
C          SET AX = 0 AT Y BOUNDARIES
C
            NB1 = NXD
C (0,289)
            NB2 = NXDNY
C (0,290)
            FAC = -1
C           END BLOCK
         ENDIF
C (0,291)
!     INITIALLY: DO 170
         DO IJ = 1, NX2
C (0,292)
C           BEGIN BLOCK
C (0,293)
            Q(IJ) = FAC*Q(IJ+NB1)
C (0,294)
            Q(IJ+NXDNY1) = FAC*Q(IJ+NB2)
C (0,295)
170         CONTINUE
C           END BLOCK
         ENDDO
C (0,296)
C
C     REPLACE AY WITH NEW AY
C
!     INITIALLY: DO 180
         DO IJ = 1, NXDNY2
C (0,297)
C           BEGIN BLOCK
C (0,298)
            AX1(IJ) = AX(IJ)
C (0,299)
180         AX(IJ) = Q(IJ)
C           END BLOCK
         ENDDO
C (0,300)
C
C     CALCULATE AZ
C
         TK = T-.5D0*DKY
C (0,301)
         TK = TK+PHAS
C (0,302)
!     INITIALLY: DO 310
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,303)
C           BEGIN BLOCK
C (0,304)
            TK = TK-DKY
C (0,305)
            FIN = DSIN(TK)
C (0,306)
            IJ2 = IJ1+NX-1
C (0,307)
!     INITIALLY: DO 290
            DO IJ = IJ1, IJ2
C (0,308)
C              BEGIN BLOCK
C (0,309)
               Q(IJ) = 2.D0*AZ(IJ)-AZ1(IJ)+DTSQ*(HXSQI*(AZ(IJ+1)+AZ(
     &         IJ-1)-2.D0*AZ(IJ))+HYSQI*(AZ(IJ+NXD)+AZ(IJ-NXD)-2.D0*
     &         AZ(IJ))+QFAC*CZ(IJ))
C (0,310)
290            CONTINUE
C              END BLOCK
            ENDDO
C (0,311)
            IJ = IJ2+1
C (0,312)
            IF (KBND.GE.2) THEN
C (0,313)
C              BEGIN BLOCK
C (0,314)
C
C     SET AZ=0 AT BOTH X BOUNDARIES
C
               Q(IJ) = -Q(IJ-1)
C (0,315)
               Q(IJ-NX-1) = -Q(IJ-NX)
C              END BLOCK
            ELSE
C (0,316)
               IF (KBND.EQ.0) THEN
C (0,317)
C                 BEGIN BLOCK
C (0,318)
C
C     PERIODIC IN X
C
                  Q(IJ) = Q(IJ-NX)
C (0,319)
                  Q(IJ-NX-1) = Q(IJ-1)
C                 END BLOCK
               ELSE
C (0,320)
                  IF (KBND.EQ.1) THEN
C (0,321)
C                    BEGIN BLOCK
C (0,322)
C
C     OUTGOING WAVES IN X
C
                     Q(IJ-NX1) = CMP*(AZ(IJ-NX1)-Q(IJ-NX))+AZ(IJ-NX)+
     &               CPI*AZ1(IJ-NX1)-CAZIN*FIN
C (0,323)
                     Q(IJ) = CMP*(AZ(IJ)-Q(IJ-1))+AZ(IJ-1)+CPI*AZ1(IJ
     &               )
C                    END BLOCK
                  ELSE
C (0,324)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
C (0,325)
310         CONTINUE
C           END BLOCK
         ENDDO
C (0,326)
         IF (KBNDY.EQ.0) THEN
C (0,327)
C           BEGIN BLOCK
C (0,328)
C
C     PERIODIC IN Y
C
            NB1 = NXDNY
C (0,329)
            NB2 = NXD
C (0,330)
            FAC = 1.D0
C           END BLOCK
         ELSE
C (0,331)
C           BEGIN BLOCK
C (0,332)
C
C          SET  AZ = 0 AT Y BOUNDARIES
C
            NB1 = NXD
C (0,333)
            NB2 = NXDNY
C (0,334)
            FAC = -1.D0
C           END BLOCK
         ENDIF
C (0,335)
!     INITIALLY: DO 320
         DO IJ = 1, NX2
C (0,336)
C           BEGIN BLOCK
C (0,337)
            Q(IJ) = FAC*Q(IJ+NB1)
C (0,338)
            Q(IJ+NXDNY1) = FAC*Q(IJ+NB2)
C (0,339)
320         CONTINUE
C           END BLOCK
         ENDDO
C (0,340)
C
C     SET AZ TO NEW AZ
C
!     INITIALLY: DO 330
         DO IJ = 1, NXDNY2
C (0,341)
C           BEGIN BLOCK
C (0,342)
            AZ1(IJ) = AZ(IJ)
C (0,343)
330         AZ(IJ) = Q(IJ)
C           END BLOCK
         ENDDO
C
C        END BLOCK
      ELSE
C (0,345)
         IF (IMPSW.EQ.1) THEN
C (0,346)
C           BEGIN BLOCK
C (0,347)
C
C    IMPLICIT FIELD SOLVER
C
C
C     CALCULATE AX
C
            TK = T-.5D0*DKY
C (0,348)
!     INITIALLY: DO 370
            DO IJ1 = NXD2, NXD2NY, NXD
C (0,349)
C              BEGIN BLOCK
C (0,350)
               TK = TK-DKY
C (0,351)
               IJ2 = IJ1+NX-1
C (0,352)
!     INITIALLY: DO 350
               DO IJ = IJ1, IJ2
C (0,353)
C                 BEGIN BLOCK
C (0,354)
                  Q(IJ) = -4.D0*QFAC*(.25D0*CX(IJ-1)+.5D0*CX(IJ)+
     &            .25D0*CX(IJ+1))+4.D0*HXI2*(VDOT(IJ+1)-VDOT(IJ-1))-
     &            DTSQI*(8.D0*AX(IJ)-4.D0*AX1(IJ))-2.D0*HXSQI*(AX(IJ+
     &            1)+AX(IJ-1)-2.D0*AX(IJ))-2.D0*HYSQI*(AX(IJ+NXD)+AX(
     &            IJ-NXD)-2.D0*AX(IJ))-HXSQI*(AX1(IJ+1)+AX1(IJ-1)-
     &            2.D0*AX1(IJ))-HYSQI*(AX1(IJ+NXD)+AX1(IJ-NXD)-2.D0*
     &            AX1(IJ))
C (0,355)
350               CONTINUE
C                 END BLOCK
               ENDDO
C (0,356)
               IJ = IJ2+1
C (0,357)
               IF (KBND.EQ.1) THEN
C (0,358)
C                 BEGIN BLOCK
C (0,359)
C
C     OUTGOING WAVE BOUNDARY CONDITIONS
C
                  Q(IJ-NX-1) = BF1*AX(IJ-NX-1)+BF2*AX(IJ-NX)+2.*AXDT2
     &            *DCOS(TK)
C (0,360)
                  Q(IJ) = BF3*AX(IJ)+BF4*AX(IJ-1)
C                 END BLOCK
               ELSE
C (0,361)
                  IF (KBND.EQ.2) THEN
C (0,362)
C                    BEGIN BLOCK
C (0,363)
C
C
                     Q(IJ-NX-1) = 0.D0
C (0,364)
                     Q(IJ) = 0.D0
C                    END BLOCK
                  ELSE
C (0,365)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
C (0,366)
370            CONTINUE
C              END BLOCK
            ENDDO
C (0,367)
C
C     SET  AX = 0 AT Y = 0,YMAX FOR KBNDY=1
C
!     INITIALLY: DO 375
            DO IJ = 1, NX2
C (0,368)
C              BEGIN BLOCK
C (0,369)
               Q(IJ) = 0
C (0,370)
               Q(IJ+NXDNY1) = 0.D0
C (0,371)
375            CONTINUE
C              END BLOCK
            ENDDO
C (0,372)
            IF (KBND.EQ.2) THEN
C (0,373)
C              BEGIN BLOCK
C (0,374)
C
C     SET D AX /DX = 0 AT X = 0,XMAX
C
               BC(1) = 0.0D0
C (0,375)
               BC(2) = 1.0D0
C (0,376)
               BC(3) = 0.0D0
C (0,377)
               BC(4) = 1.0D0
C              END BLOCK
            ELSE
C (0,378)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,379)
            CALL SOLV2Y(NX2, NY2, HX, HY, CFT, Q, BC, BDY1, BX)
C (0,380)
C
C     SET AX TO NEW AX
C
!     INITIALLY: DO 380
            DO IJ = 1, NXDNY2
C (0,381)
C              BEGIN BLOCK
C (0,382)
               AX1(IJ) = AX(IJ)
C (0,383)
380            AX(IJ) = Q(IJ)
C              END BLOCK
            ENDDO
C (0,384)
C
C     CALCULATE AY
C
            TK = T-.5D0*DKY
C (0,385)
!     INITIALLY: DO 410
            DO IJ1 = NXD2, NXD2NY, NXD
C (0,386)
C              BEGIN BLOCK
C (0,387)
               TK = TK-DKY
C (0,388)
               IJ2 = IJ1+NX-1
C (0,389)
!     INITIALLY: DO 390
               DO IJ = IJ1, IJ2
C (0,390)
C                 BEGIN BLOCK
C (0,391)
                  Q(IJ) = -4.D0*QFAC*(.25D0*CY(IJ-NXD)+.5D0*CY(IJ)+
     &            .25D0*CY(IJ+NXD))+4.D0*HYI2*(VDOT(IJ+NXD)-VDOT(IJ-
     &            NXD))-DTSQI*(8.D0*AY(IJ)-4.D0*AY1(IJ))-2.D0*HXSQI*(
     &            AY(IJ+1)+AY(IJ-1)-2.D0*AY(IJ))-2.D0*HYSQI*(AY(IJ+
     &            NXD)+AY(IJ-NXD)-2.D0*AY(IJ))-HXSQI*(AY1(IJ+1)+AY1(
     &            IJ-1)-2.D0*AY1(IJ))-HYSQI*(AY1(IJ+NXD)+AY1(IJ-NXD)-
     &            2.D0*AY1(IJ))
C (0,392)
390               CONTINUE
C                 END BLOCK
               ENDDO
C (0,393)
               IJ = IJ2+1
C (0,394)
               IF (KBND.EQ.1) THEN
C (0,395)
C                 BEGIN BLOCK
C (0,396)
C
C     OUTGOING WAVE BOUNDARY CONDITIONS
C
                  Q(IJ-NX-1) = BF1*AY(IJ-NX-1)+BF2*AY(IJ-NX)+2.D0*
     &            AYDT2*DCOS(TK)
C (0,397)
                  Q(IJ) = BF3*AY(IJ)+BF4*AY(IJ-1)
C                 END BLOCK
               ELSE
C (0,398)
                  IF (KBND.EQ.2) THEN
C (0,399)
C                    BEGIN BLOCK
C (0,400)
C
C     SET AY = 0 AT X=0 AND AY=AYC AT X=XMAX
C
                     Q(IJ-NX-1) = 0.D0
C (0,401)
                     Q(IJ) = AYC
C                    END BLOCK
                  ELSE
C (0,402)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
C (0,403)
410            CONTINUE
C              END BLOCK
            ENDDO
C (0,404)
C
C     SET  D AY/DY = 0 AT Y BOUNDARIES  IF KBNDY=1
C
!     INITIALLY: DO 415
            DO IJ = 1, NX2
C (0,405)
C              BEGIN BLOCK
C (0,406)
               Q(IJ) = 0.D0
C (0,407)
               Q(IJ+NXDNY1) = 0.D0
C (0,408)
415            CONTINUE
C              END BLOCK
            ENDDO
C (0,409)
            CALL SOLV2Y(NX2, NY2, HX, HY, CFT, Q, BD, BDY2, BX)
C (0,410)
C
C     SET AY TO NEW AY
C
!     INITIALLY: DO 420
            DO IJ = 1, NXDNY2
C (0,411)
C              BEGIN BLOCK
C (0,412)
               AY1(IJ) = AY(IJ)
C (0,413)
420            AY(IJ) = Q(IJ)
C              END BLOCK
            ENDDO
C (0,414)
C
C     CALCULATE AZ
C
            TK = T-.5D0*DKY
C (0,415)
!     INITIALLY: DO 450
            DO IJ1 = NXD2, NXD2NY, NXD
C (0,416)
C              BEGIN BLOCK
C (0,417)
               TK = TK-DKY
C (0,418)
               IJ2 = IJ1+NX-1
C (0,419)
!     INITIALLY: DO 430
               DO IJ = IJ1, IJ2
C (0,420)
C                 BEGIN BLOCK
C (0,421)
                  Q(IJ) = -4.D0*QFAC*CZ(IJ)-DTSQI*(8.D0*AZ(IJ)-4.D0*
     &            AZ1(IJ))-2.D0*HXSQI*(AZ(IJ+1)+AZ(IJ-1)-2.D0*AZ(IJ))
     &            -2.D0*HYSQI*(AZ(IJ+NXD)+AZ(IJ-NXD)-2.D0*AZ(IJ))-
     &            HXSQI*(AZ1(IJ+1)+AZ1(IJ-1)-2.*AZ1(IJ))-HYSQI*(AZ1(
     &            IJ+NXD)+AZ1(IJ-NXD)-2.*AZ1(IJ))
C (0,422)
430               CONTINUE
C                 END BLOCK
               ENDDO
C (0,423)
               IJ = IJ2+1
C (0,424)
               IF (KBND.EQ.1) THEN
C (0,425)
C                 BEGIN BLOCK
C (0,426)
C
C     OUTGOING WAVES IN X
C
                  Q(IJ-NX-1) = BF1*AZ(IJ-NX-1)+BF2*AZ(IJ-NX)+2.D0*
     &            AZDT2*DCOS(TK)
C (0,427)
                  Q(IJ) = BF3*AZ(IJ)+BF4*AZ(IJ-1)
C                 END BLOCK
               ELSE
C (0,428)
                  IF (KBND.EQ.2) THEN
C (0,429)
C                    BEGIN BLOCK
C (0,430)
C
C     AZ = 0 AT X = 0 AND AZ = AZC AT Y=YMAX
                     Q(IJ-NX-1) = 0.D0
C (0,431)
                     Q(IJ) = AZC
C                    END BLOCK
                  ELSE
C (0,432)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
               ENDIF
C (0,433)
450            CONTINUE
C              END BLOCK
            ENDDO
C (0,434)
C
C     SET  AZ = 0 AT Y BOUNDARIES, IF KBNDY = 1
C
!     INITIALLY: DO 455
            DO IJ = 1, NX2
C (0,435)
C              BEGIN BLOCK
C (0,436)
               Q(IJ) = 0.D0
C (0,437)
               Q(IJ+NXDNY1) = 0.D0
C (0,438)
455            CONTINUE
C              END BLOCK
            ENDDO
C (0,439)
            CALL SOLV2Y(NX2, NY2, HX, HY, CFT, Q, BD, BDY1, BX)
C (0,440)
C
C     SET AZ TO NEW AZ
C
!     INITIALLY: DO 460
            DO IJ = 1, NXDNY2
C (0,441)
C              BEGIN BLOCK
C (0,442)
               AZ1(IJ) = AZ(IJ)
C (0,443)
460            AZ(IJ) = Q(IJ)
C              END BLOCK
            ENDDO
C
C           END BLOCK
         ELSE
C (0,445)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ENDIF
C (0,446)
      IF (IMPSW.GE.0) THEN
C (0,447)
C        BEGIN BLOCK
C (0,448)
C
C     CALCULATE NEW EX,EY,EZ,BX,BY,BZ
C
!     INITIALLY: DO 490
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,449)
C           BEGIN BLOCK
C (0,450)
            IJ2 = IJ1+NX-1
C (0,451)
!     INITIALLY: DO 480
            DO IJ = IJ1, IJ2
C (0,452)
C              BEGIN BLOCK
C (0,453)
               EX(IJ) = EXC-HXI2*(V(IJ+1)-V(IJ-1))-DTI*(.5D0*(AX(IJ)-
     &         AX1(IJ))+.25D0*(AX(IJ+NXD)-AX1(IJ+NXD)+AX(IJ-NXD)-AX1(
     &         IJ-NXD)))
C (0,454)
               EY(IJ) = EYC-HYI2*(V(IJ+NXD)-V(IJ-NXD))-DTI*(.5D0*(AY(
     &         IJ)-AY1(IJ))+.25D0*(AY(IJ+1)-AY1(IJ+1)+AY(IJ-1)-AY1(IJ
     &         -1)))
C (0,455)
               EZ(IJ) = EZC-DTI*(.25D0*(AZ(IJ)-AZ1(IJ))+.125D0*(AZ(IJ
     &         +NXD)-AZ1(IJ+NXD)+AZ(IJ-NXD)-AZ1(IJ-NXD)+AZ(IJ+1)-AZ1(
     &         IJ+1)+AZ(IJ-1)-AZ1(IJ-1))+.0625D0*(AZ(IJ+1+NXD)-AZ1(IJ
     &         +1+NXD)+AZ(IJ-1-NXD)-AZ1(IJ-1-NXD)+AZ(IJ-1+NXD)-AZ1(IJ
     &         -1+NXD)+AZ(IJ+1-NXD)-AZ1(IJ+1-NXD)))
C (0,456)
               BX(IJ) = HYI4*(AZ(IJ+NXD)-AZ(IJ-NXD)+AZ1(IJ+NXD)-AZ1(
     &         IJ-NXD))+BXC
C (0,457)
               BY(IJ) = -HXI4*(AZ(IJ+1)-AZ(IJ-1)+AZ1(IJ+1)-AZ1(IJ-1))
     &         +BYC
C (0,458)
               BZ(IJ) = HXI4*(AY(IJ+1)-AY(IJ-1)+AY1(IJ+1)-AY1(IJ-1))-
     &         HYI4*(AX(IJ+NXD)-AX(IJ-NXD)+AX1(IJ+NXD)-AX1(IJ-NXD))+
     &         BZ0
C (0,459)
480            CONTINUE
C              END BLOCK
            ENDDO
C (0,460)
490         CONTINUE
C           END BLOCK
         ENDDO
C (0,461)
C
C     SET BOUNDARY CONDITIONS AT X=0,XMAX
C
         IF (KBND.NE.0) THEN
C (0,462)
C           BEGIN BLOCK
C (0,463)
            NB1 = 1
C (0,464)
            NB2 = NX
C (0,465)
            FAC = -1.D0
C           END BLOCK
         ELSE
C (0,466)
C           BEGIN BLOCK
C (0,467)
            NB1 = NX
C (0,468)
            NB2 = 1
C (0,469)
            FAC = 1.D0
C           END BLOCK
         ENDIF
C (0,470)
!     INITIALLY: DO 510
         DO IJ = NXD1, NXD1NY, NXD
C (0,471)
C           BEGIN BLOCK
C (0,472)
            EX(IJ) = FAC*EX(IJ+NB1)
C (0,473)
            EY(IJ) = EY(IJ+NB1)
C (0,474)
            EZ(IJ) = EZ(IJ+NB1)
C (0,475)
            BX(IJ) = BX(IJ+NB1)
C (0,476)
            BY(IJ) = BY(IJ+NB1)
C (0,477)
            BZ(IJ) = BZ(IJ+NB1)
C (0,478)
            EX(IJ+NX1) = FAC*EX(IJ+NB2)
C (0,479)
            EY(IJ+NX1) = EY(IJ+NB2)
C (0,480)
            EZ(IJ+NX1) = EZ(IJ+NB2)
C (0,481)
            BX(IJ+NX1) = BX(IJ+NB2)
C (0,482)
            BY(IJ+NX1) = BY(IJ+NB2)
C (0,483)
            BZ(IJ+NX1) = BZ(IJ+NB2)
C (0,484)
510         CONTINUE
C           END BLOCK
         ENDDO
C (0,485)
         IF (KBNDY.EQ.0) THEN
C (0,486)
C           BEGIN BLOCK
C (0,487)
            NB1 = NXDNY
C (0,488)
            NB2 = NXD
C           END BLOCK
         ELSE
C (0,489)
C           BEGIN BLOCK
C (0,490)
            NB1 = NXD
C (0,491)
            NB2 = NXDNY
C           END BLOCK
         ENDIF
C (0,492)
!     INITIALLY: DO 520
         DO IJ = 1, NX2
C (0,493)
C           BEGIN BLOCK
C (0,494)
            EX(IJ) = EX(IJ+NB1)
C (0,495)
            EY(IJ) = EY(IJ+NB1)
C (0,496)
            EZ(IJ) = EZ(IJ+NB1)
C (0,497)
            BX(IJ) = BX(IJ+NB1)
C (0,498)
            BY(IJ) = BY(IJ+NB1)
C (0,499)
            BZ(IJ) = BZ(IJ+NB1)
C (0,500)
            EX(IJ+NXDNY1) = EX(IJ+NB2)
C (0,501)
            EY(IJ+NXDNY1) = EY(IJ+NB2)
C (0,502)
            EZ(IJ+NXDNY1) = EZ(IJ+NB2)
C (0,503)
            BX(IJ+NXDNY1) = BX(IJ+NB2)
C (0,504)
            BY(IJ+NXDNY1) = BY(IJ+NB2)
C (0,505)
            BZ(IJ+NXDNY1) = BZ(IJ+NB2)
C (0,506)
520         CONTINUE
C           END BLOCK
         ENDDO
C
C        END BLOCK
      ELSE
C (0,508)
C        BEGIN BLOCK
C (0,509)
C
C     CALCULATE NEW EX,EY : PURE ELECTROSTATIC
C
!     INITIALLY: DO 540
         DO IJ1 = NXD2, NXD2NY, NXD
C (0,510)
C           BEGIN BLOCK
C (0,511)
            IJ2 = IJ1+NX-1
C (0,512)
!     INITIALLY: DO 535
            DO IJ = IJ1, IJ2
C (0,513)
C              BEGIN BLOCK
C (0,514)
               EX(IJ) = EXC-HXI2*(V(IJ+1)-V(IJ-1))
C (0,515)
               EY(IJ) = EYC-HYI2*(V(IJ+NXD)-V(IJ-NXD))
C (0,516)
535            CONTINUE
C              END BLOCK
            ENDDO
C (0,517)
540         CONTINUE
C           END BLOCK
         ENDDO
C (0,518)
C
C     SET BOUNDARY CONDITIONS AT X=0,XMAX
C
         IF (KBND.NE.0) THEN
C (0,519)
C           BEGIN BLOCK
C (0,520)
            NB1 = 1
C (0,521)
            NB2 = NX
C (0,522)
            FAC = -1.D0
C           END BLOCK
         ELSE
C (0,523)
C           BEGIN BLOCK
C (0,524)
            NB1 = NX
C (0,525)
            NB2 = 1
C (0,526)
            FAC = 1.D0
C           END BLOCK
         ENDIF
C (0,527)
!     INITIALLY: DO 550
         DO IJ = NXD1, NXD1NY, NXD
C (0,528)
C           BEGIN BLOCK
C (0,529)
            EX(IJ) = FAC*EX(IJ+NB1)
C (0,530)
            EY(IJ) = EY(IJ+NB1)
C (0,531)
            EX(IJ+NX1) = FAC*EX(IJ+NB2)
C (0,532)
            EY(IJ+NX1) = EY(IJ+NB2)
C (0,533)
550         CONTINUE
C           END BLOCK
         ENDDO
C (0,534)
         IF (KBNDY.EQ.0) THEN
C (0,535)
C           BEGIN BLOCK
C (0,536)
            NB1 = NXDNY
C (0,537)
            NB2 = NXD
C           END BLOCK
         ELSE
C (0,538)
C           BEGIN BLOCK
C (0,539)
            NB1 = NXD
C (0,540)
            NB2 = NXDNY
C           END BLOCK
         ENDIF
C (0,541)
!     INITIALLY: DO 560
         DO IJ = 1, NX2
C (0,542)
C           BEGIN BLOCK
C (0,543)
            EX(IJ) = EX(IJ+NB1)
C (0,544)
            EY(IJ) = EY(IJ+NB1)
C (0,545)
            EX(IJ+NXDNY1) = EX(IJ+NB2)
C (0,546)
            EY(IJ+NXDNY1) = EY(IJ+NB2)
C (0,547)
560         CONTINUE
C           END BLOCK
         ENDDO
C (0,548)
C
!     INITIALLY: DO 570
         DO IJ = 1, NX2NY2
C (0,549)
C           BEGIN BLOCK
C (0,550)
            EZ(IJ) = EZC
C (0,551)
            BX(IJ) = BXC
C (0,552)
            BY(IJ) = BYC
C (0,553)
            BZ(IJ) = BZC
C (0,554)
570         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDIF
C (0,555)
      RETURN
C     END BLOCK
      END
      SUBROUTINE INIBND
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,IT,NC,NB,NP,IMPSW,
     &NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,KSPLIT,NPTSA,NPTSB,
     &NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,LDEC,NEP,ISET,INISW,
     &IDIAGR,NAB,NJMAX,IJ,J,NJ,N,IJP,IJM
      INTEGER NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:NNS1),IDNY(1:
     &NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),IBCNDB(1:NNS),
     &LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:NNS),INJR(1:NNS)
     &,IBATCH(1:NNS)
      REAL*8 XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,
     &VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,
     &DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,
     &EINJ,PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),SS(
     &1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ(1:
     &NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1:
     &NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:NBB
     &),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XKICK,DXKICK,YK1,YK2,
     &FNKICK,VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,
     &PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC
     &,EZC,BXC,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL
     &),AYLD(1:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),
     &AZRD(1:NCL),VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),
     &YDRIFT(1:NNS),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),
     &DENY(1:NNS2),XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,
     &AFRACR,DINJR(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),
     &TINJR(1:NNS),TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(
     &1:NNS),VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,
     &TFIN,EFIN,TDEC(1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:
     &N1D),EPOUTR(1:50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(
     &1:50),EPINL(1:50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EYOUTL(
     &1:NC1),EZOUTL(1:NC1-NYY),EYINL(1:NC1-2*NYY),EZINL(1:NC1-3*NYY),
     &EYOUTR(1:NC1-4*NYY),EZOUTR(1:NC1-5*NYY),EYINR(1:NC1-6*NYY),
     &EZINR(1:NC1-7*NYY),ALPHA(1:3),BETA(1:3),TYS,DTIH,HXIQ,RYL,RZL,
     &RYR,RZR,AL,EYL,EZL,EYR,EZR,BT
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /_ENTRY_ADVBND/ NJMAX,NAB,IDIAGR,HXIQ,DTIH,TYS,INISW,
     &ISET,BETA,ALPHA
      EQUIVALENCE (EYOUTL,Q), (EYOUTL(515),EZOUTL), (EYOUTL(1029),
     &EYINL), (EYOUTL(1543),EZINL), (EYOUTL(2057),EYOUTR), (EYOUTL(
     &2571),EZOUTR), (EYOUTL(3085),EYINR), (EYOUTL(3599),EZINR)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
99998 CONTINUE
C (0,3)
      INISW = 1
C (0,4)
130   NX1 = NX+1
C (0,5)
      NX2 = NX+2
C (0,6)
      NY1 = NY+1
C (0,7)
      NY2 = NY+2
C (0,8)
      HY = YMAX/NY
C (0,9)
      TYS = (DT/HY)**2
C (0,10)
      DTIH = .5D0/DT
C (0,11)
      HXIQ = .25D0/HX
C (0,12)
      IDIAGR = 1
C (0,13)
      NAB = 3
C (0,14)
      ALPHA(1) = .32645D0
C (0,15)
      ALPHA(2) = .12716D0
C (0,16)
      ALPHA(3) = .030905D0
C (0,17)
      BETA(1) = .73754D0
C (0,18)
      BETA(2) = .983846D0
C (0,19)
      BETA(3) = .99964720D0
C (0,20)
!     INITIALLY: DO 140
      DO N = 1, NAB
C (0,21)
C        BEGIN BLOCK
C (0,22)
         ALPHA(N) = ALPHA(N)*TYS
C (0,23)
140      BETA(N) = BETA(N)*TYS
C        END BLOCK
      ENDDO
C (0,24)
      ISET = 0
C (0,25)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (INISW.EQ.0) GOTO 10
C (7,1)
C     BEGIN BLOCK
C (7,2)
      NJMAX = NAB*NY2
C (7,3)
!     INITIALLY: DO 150
      DO NJ = 1, NJMAX
C (7,4)
C        BEGIN BLOCK
C (7,5)
         AYL(NJ) = 0.D0
C (7,6)
         AYLD(NJ) = 0.D0
C (7,7)
         AYR(NJ) = 0.D0
C (7,8)
         AYRD(NJ) = 0.D0
C (7,9)
         AZL(NJ) = 0.D0
C (7,10)
         AZLD(NJ) = 0.D0
C (7,11)
         AZR(NJ) = 0.D0
C (7,12)
         AZRD(NJ) = 0.D0
C (7,13)
150      CONTINUE
C        END BLOCK
      ENDDO
C (7,14)
      INISW = 0
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
10    CONTINUE
C (2,3)
C
C-----DIAGNOSTICS
C
      IJ = 2
C (2,4)
!     INITIALLY: DO 30
      DO J = 1, NY2
C (2,5)
C        BEGIN BLOCK
C (2,6)
         RYL = 0.D0
C (2,7)
         RZL = 0.D0
C (2,8)
         RYR = 0.D0
C (2,9)
         RZR = 0.D0
C (2,10)
         NJ = J
C (2,11)
!     INITIALLY: DO 20
         DO N = 1, NAB
C (2,12)
C           BEGIN BLOCK
C (2,13)
            AL = ALPHA(N)
C (2,14)
            RYL = RYL+AL*AYL(NJ)
C (2,15)
            RZL = RZL+AL*AZL(NJ)
C (2,16)
            IF (IDIAGR.NE.0) THEN
C (2,17)
C              BEGIN BLOCK
C (2,18)
               RYR = RYR+AL*AYR(NJ)
C (2,19)
               RZR = RZR+AL*AZR(NJ)
C              END BLOCK
            ELSE
C (2,20)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (2,21)
20          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (2,22)
         EYL = -DTIH*(AY(IJ)+AY(IJ-1)-AY1(IJ)-AY1(IJ-1))
C (2,23)
         EYOUTL(J) = .5D0*EYL-HXIQ*(AY(IJ)+AY1(IJ)-AY(IJ-1)-AY1(IJ-1)
     &   -RYL)
C (2,24)
         EYINL(J) = EYL-EYOUTL(J)
C (2,25)
         EZL = -DTIH*(AZ(IJ)+AZ(IJ-1)-AZ1(IJ)-AZ1(IJ-1))
C (2,26)
         EZOUTL(J) = .5D0*EZL-HXIQ*(AZ(IJ)+AZ1(IJ)-AZ(IJ-1)-AZ1(IJ-1)
     &   -RZL)
C (2,27)
         EZINL(J) = EZL-EZOUTL(J)
C (2,28)
         IJ = IJ+NX
C (2,29)
         IF (IDIAGR.NE.0) THEN
C (2,30)
C           BEGIN BLOCK
C (2,31)
            EYR = -DTIH*(AY(IJ)+AY(IJ-1)-AY1(IJ)-AY1(IJ-1))
C (2,32)
            EYOUTR(J) = .5D0*EYR+HXIQ*(AY(IJ)+AY1(IJ)-AY(IJ-1)-AY1(IJ
     &      -1)+RYR)
C (2,33)
            EYINR(J) = EYR-EYOUTR(J)
C (2,34)
            EZR = -DTIH*(AZ(IJ)+AZ(IJ-1)-AZ1(IJ)-AZ1(IJ-1))
C (2,35)
            EZOUTR(J) = .5D0*EZR+HXIQ*(AZ(IJ)+AZ1(IJ)-AZ(IJ-1)-AZ1(IJ
     &      -1)+RZR)
C (2,36)
            EZINR(J) = EZR-EZOUTR(J)
C           END BLOCK
         ELSE
C (2,37)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (2,38)
30       IJ = IJ+2
C        END BLOCK
      ENDDO
C (2,39)
C
C----BOUNDARY CONDITION
C
      IJ = NX2+1
C (2,40)
!     INITIALLY: DO 60
      DO J = 2, NY1
C (2,41)
C        BEGIN BLOCK
C (2,42)
         IJP = IJ+NX2
C (2,43)
         IJM = IJ-NX2
C (2,44)
         RYL = 2.D0*(AY(IJ+1)+AY1(IJ+1)-AY(IJ)-AY1(IJ))+AY(IJP)+AY1(
     &   IJP)+AY(IJM)+AY1(IJM)-AY(IJP+1)-AY1(IJP+1)-AY(IJM+1)-AY1(IJM
     &   +1)
C (2,45)
         RZL = 2.D0*(AZ(IJ+1)+AZ1(IJ+1)-AZ(IJ)-AZ1(IJ))+AZ(IJP)+AZ1(
     &   IJP)+AZ(IJM)+AZ1(IJM)-AZ(IJP+1)-AZ1(IJP+1)-AZ(IJM+1)-AZ1(IJM
     &   +1)
C (2,46)
         IJ = IJ+NX1
C (2,47)
         IJP = IJ+NX2
C (2,48)
         IJM = IJ-NX2
C (2,49)
         RYR = 2.D0*(AY(IJ-1)+AY1(IJ-1)-AY(IJ)-AY1(IJ))+AY(IJP)+AY1(
     &   IJP)+AY(IJM)+AY1(IJM)-AY(IJP-1)-AY1(IJP-1)-AY(IJM-1)-AY1(IJM
     &   -1)
C (2,50)
         RZR = 2.D0*(AZ(IJ-1)+AZ1(IJ-1)-AZ(IJ)-AZ1(IJ))+AZ(IJP)+AZ1(
     &   IJP)+AZ(IJM)+AZ1(IJM)-AZ(IJP-1)-AZ1(IJP-1)-AZ(IJM-1)-AZ1(IJM
     &   -1)
C (2,51)
         NJ = J
C (2,52)
!     INITIALLY: DO 50
         DO N = 1, NAB
C (2,53)
C           BEGIN BLOCK
C (2,54)
            BT = BETA(N)
C (2,55)
            AYLD(NJ) = AYLD(NJ)+RYL+BT*(AYL(NJ+1)-2.D0*AYL(NJ)+AYL(NJ
     &      -1))
C (2,56)
            AZLD(NJ) = AZLD(NJ)+RZL+BT*(AZL(NJ+1)-2.D0*AZL(NJ)+AZL(NJ
     &      -1))
C (2,57)
            AYRD(NJ) = AYRD(NJ)+RYR+BT*(AYR(NJ+1)-2.D0*AYR(NJ)+AYR(NJ
     &      -1))
C (2,58)
            AZRD(NJ) = AZRD(NJ)+RZR+BT*(AZR(NJ+1)-2.D0*AZR(NJ)+AZR(NJ
     &      -1))
C (2,59)
50          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (2,60)
60       IJ = IJ+1
C        END BLOCK
      ENDDO
C (2,61)
C
!     INITIALLY: DO 80
      DO J = 2, NY1
C (2,62)
C        BEGIN BLOCK
C (2,63)
         NJ = J
C (2,64)
!     INITIALLY: DO 70
         DO N = 1, NAB
C (2,65)
C           BEGIN BLOCK
C (2,66)
            AYL(NJ) = AYL(NJ)+AYLD(NJ)
C (2,67)
            AZL(NJ) = AZL(NJ)+AZLD(NJ)
C (2,68)
            AYR(NJ) = AYR(NJ)+AYRD(NJ)
C (2,69)
            AZR(NJ) = AZR(NJ)+AZRD(NJ)
C (2,70)
70          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (2,71)
80       CONTINUE
C        END BLOCK
      ENDDO
C (2,72)
C
      NJ = 1
C (2,73)
!     INITIALLY: DO 90
      DO N = 1, NAB
C (2,74)
C        BEGIN BLOCK
C (2,75)
         AYL(NJ) = AYL(NJ+NY)
C (2,76)
         AZL(NJ) = AZL(NJ+NY)
C (2,77)
         AYR(NJ) = AYR(NJ+NY)
C (2,78)
         AZR(NJ) = AZR(NJ+NY)
C (2,79)
         NJ = NJ+1
C (2,80)
         AYL(NJ+NY) = AYL(NJ)
C (2,81)
         AZL(NJ+NY) = AZL(NJ)
C (2,82)
         AYR(NJ+NY) = AYR(NJ)
C (2,83)
         AZR(NJ+NY) = AZR(NJ)
C (2,84)
90       NJ = NJ+NY1
C        END BLOCK
      ENDDO
C (2,85)
C
      IJ = 1
C (2,86)
!     INITIALLY: DO 120
      DO J = 1, NY2
C (2,87)
C        BEGIN BLOCK
C (2,88)
         RYL = 0.D0
C (2,89)
         RZL = 0.D0
C (2,90)
         RYR = 0.D0
C (2,91)
         RZR = 0.D0
C (2,92)
C        BEGIN UNSTRUCTURED
C (3,1)
         IF (NAB.EQ.0) GOTO 110
C (5,1)
C        BEGIN BLOCK
C (5,2)
         NJ = J
C (5,3)
!     INITIALLY: DO 100
         DO N = 1, NAB
C (5,4)
C           BEGIN BLOCK
C (5,5)
            AL = ALPHA(N)
C (5,6)
            RYL = RYL+AL*AYL(NJ)
C (5,7)
            RZL = RZL+AL*AZL(NJ)
C (5,8)
            RYR = RYR+AL*AYR(NJ)
C (5,9)
            RZR = RZR+AL*AZR(NJ)
C (5,10)
100         NJ = NJ+NY2
C           END BLOCK
         ENDDO
C        END BLOCK
C (4,1)
110      CONTINUE
C        END UNSTRUCTURED
C (2,93)
         AY1(IJ) = -RYL
C (2,94)
         AZ1(IJ) = -RZL
C (2,95)
         IJ = IJ+NX1
C (2,96)
         AY1(IJ) = -RYR
C (2,97)
         AZ1(IJ) = -RZR
C (2,98)
120      IJ = IJ+1
C        END BLOCK
      ENDDO
C     END BLOCK
C (6,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE ADVBND
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,IT,NC,NB,NP,IMPSW,
     &NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,KSPLIT,NPTSA,NPTSB,
     &NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,LDEC,NEP,ISET,INISW,
     &IDIAGR,NAB,NJMAX,IJ,J,NJ,N,IJP,IJM
      INTEGER NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:NNS1),IDNY(1:
     &NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),IBCNDB(1:NNS),
     &LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:NNS),INJR(1:NNS)
     &,IBATCH(1:NNS)
      REAL*8 XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,
     &VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,
     &DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,
     &EINJ,PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),SS(
     &1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ(1:
     &NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1:
     &NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:NBB
     &),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XKICK,DXKICK,YK1,YK2,
     &FNKICK,VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,
     &PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC
     &,EZC,BXC,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL
     &),AYLD(1:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),
     &AZRD(1:NCL),VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),
     &YDRIFT(1:NNS),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),
     &DENY(1:NNS2),XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,
     &AFRACR,DINJR(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),
     &TINJR(1:NNS),TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(
     &1:NNS),VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,
     &TFIN,EFIN,TDEC(1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:
     &N1D),EPOUTR(1:50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(
     &1:50),EPINL(1:50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,EYOUTL(
     &1:NC1),EZOUTL(1:NC1-NYY),EYINL(1:NC1-2*NYY),EZINL(1:NC1-3*NYY),
     &EYOUTR(1:NC1-4*NYY),EZOUTR(1:NC1-5*NYY),EYINR(1:NC1-6*NYY),
     &EZINR(1:NC1-7*NYY),ALPHA(1:3),BETA(1:3),TYS,DTIH,HXIQ,RYL,RZL,
     &RYR,RZR,AL,EYL,EZL,EYR,EZR,BT
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /_ENTRY_ADVBND/ NJMAX,NAB,IDIAGR,HXIQ,DTIH,TYS,INISW,
     &ISET,BETA,ALPHA
      EQUIVALENCE (EYOUTL,Q), (EYOUTL(515),EZOUTL), (EYOUTL(1029),
     &EYINL), (EYOUTL(1543),EZINL), (EYOUTL(2057),EYOUTR), (EYOUTL(
     &2571),EZOUTR), (EYOUTL(3085),EYINR), (EYOUTL(3599),EZINR)
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
      DATA INISW /0/
      DATA ISET /1/
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
C
      IF (ISET.EQ.1) GOTO 130
C (4,1)
C     BEGIN BLOCK
C (4,2)
10    CONTINUE
C (4,3)
C
C-----DIAGNOSTICS
C
      IJ = 2
C (4,4)
!     INITIALLY: DO 30
      DO J = 1, NY2
C (4,5)
C        BEGIN BLOCK
C (4,6)
         RYL = 0.D0
C (4,7)
         RZL = 0.D0
C (4,8)
         RYR = 0.D0
C (4,9)
         RZR = 0.D0
C (4,10)
         NJ = J
C (4,11)
!     INITIALLY: DO 20
         DO N = 1, NAB
C (4,12)
C           BEGIN BLOCK
C (4,13)
            AL = ALPHA(N)
C (4,14)
            RYL = RYL+AL*AYL(NJ)
C (4,15)
            RZL = RZL+AL*AZL(NJ)
C (4,16)
            IF (IDIAGR.NE.0) THEN
C (4,17)
C              BEGIN BLOCK
C (4,18)
               RYR = RYR+AL*AYR(NJ)
C (4,19)
               RZR = RZR+AL*AZR(NJ)
C              END BLOCK
            ELSE
C (4,20)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (4,21)
20          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (4,22)
         EYL = -DTIH*(AY(IJ)+AY(IJ-1)-AY1(IJ)-AY1(IJ-1))
C (4,23)
         EYOUTL(J) = .5D0*EYL-HXIQ*(AY(IJ)+AY1(IJ)-AY(IJ-1)-AY1(IJ-1)
     &   -RYL)
C (4,24)
         EYINL(J) = EYL-EYOUTL(J)
C (4,25)
         EZL = -DTIH*(AZ(IJ)+AZ(IJ-1)-AZ1(IJ)-AZ1(IJ-1))
C (4,26)
         EZOUTL(J) = .5D0*EZL-HXIQ*(AZ(IJ)+AZ1(IJ)-AZ(IJ-1)-AZ1(IJ-1)
     &   -RZL)
C (4,27)
         EZINL(J) = EZL-EZOUTL(J)
C (4,28)
         IJ = IJ+NX
C (4,29)
         IF (IDIAGR.NE.0) THEN
C (4,30)
C           BEGIN BLOCK
C (4,31)
            EYR = -DTIH*(AY(IJ)+AY(IJ-1)-AY1(IJ)-AY1(IJ-1))
C (4,32)
            EYOUTR(J) = .5D0*EYR+HXIQ*(AY(IJ)+AY1(IJ)-AY(IJ-1)-AY1(IJ
     &      -1)+RYR)
C (4,33)
            EYINR(J) = EYR-EYOUTR(J)
C (4,34)
            EZR = -DTIH*(AZ(IJ)+AZ(IJ-1)-AZ1(IJ)-AZ1(IJ-1))
C (4,35)
            EZOUTR(J) = .5D0*EZR+HXIQ*(AZ(IJ)+AZ1(IJ)-AZ(IJ-1)-AZ1(IJ
     &      -1)+RZR)
C (4,36)
            EZINR(J) = EZR-EZOUTR(J)
C           END BLOCK
         ELSE
C (4,37)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (4,38)
30       IJ = IJ+2
C        END BLOCK
      ENDDO
C (4,39)
C
C----BOUNDARY CONDITION
C
      IJ = NX2+1
C (4,40)
!     INITIALLY: DO 60
      DO J = 2, NY1
C (4,41)
C        BEGIN BLOCK
C (4,42)
         IJP = IJ+NX2
C (4,43)
         IJM = IJ-NX2
C (4,44)
         RYL = 2.D0*(AY(IJ+1)+AY1(IJ+1)-AY(IJ)-AY1(IJ))+AY(IJP)+AY1(
     &   IJP)+AY(IJM)+AY1(IJM)-AY(IJP+1)-AY1(IJP+1)-AY(IJM+1)-AY1(IJM
     &   +1)
C (4,45)
         RZL = 2.D0*(AZ(IJ+1)+AZ1(IJ+1)-AZ(IJ)-AZ1(IJ))+AZ(IJP)+AZ1(
     &   IJP)+AZ(IJM)+AZ1(IJM)-AZ(IJP+1)-AZ1(IJP+1)-AZ(IJM+1)-AZ1(IJM
     &   +1)
C (4,46)
         IJ = IJ+NX1
C (4,47)
         IJP = IJ+NX2
C (4,48)
         IJM = IJ-NX2
C (4,49)
         RYR = 2.D0*(AY(IJ-1)+AY1(IJ-1)-AY(IJ)-AY1(IJ))+AY(IJP)+AY1(
     &   IJP)+AY(IJM)+AY1(IJM)-AY(IJP-1)-AY1(IJP-1)-AY(IJM-1)-AY1(IJM
     &   -1)
C (4,50)
         RZR = 2.D0*(AZ(IJ-1)+AZ1(IJ-1)-AZ(IJ)-AZ1(IJ))+AZ(IJP)+AZ1(
     &   IJP)+AZ(IJM)+AZ1(IJM)-AZ(IJP-1)-AZ1(IJP-1)-AZ(IJM-1)-AZ1(IJM
     &   -1)
C (4,51)
         NJ = J
C (4,52)
!     INITIALLY: DO 50
         DO N = 1, NAB
C (4,53)
C           BEGIN BLOCK
C (4,54)
            BT = BETA(N)
C (4,55)
            AYLD(NJ) = AYLD(NJ)+RYL+BT*(AYL(NJ+1)-2.D0*AYL(NJ)+AYL(NJ
     &      -1))
C (4,56)
            AZLD(NJ) = AZLD(NJ)+RZL+BT*(AZL(NJ+1)-2.D0*AZL(NJ)+AZL(NJ
     &      -1))
C (4,57)
            AYRD(NJ) = AYRD(NJ)+RYR+BT*(AYR(NJ+1)-2.D0*AYR(NJ)+AYR(NJ
     &      -1))
C (4,58)
            AZRD(NJ) = AZRD(NJ)+RZR+BT*(AZR(NJ+1)-2.D0*AZR(NJ)+AZR(NJ
     &      -1))
C (4,59)
50          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (4,60)
60       IJ = IJ+1
C        END BLOCK
      ENDDO
C (4,61)
C
!     INITIALLY: DO 80
      DO J = 2, NY1
C (4,62)
C        BEGIN BLOCK
C (4,63)
         NJ = J
C (4,64)
!     INITIALLY: DO 70
         DO N = 1, NAB
C (4,65)
C           BEGIN BLOCK
C (4,66)
            AYL(NJ) = AYL(NJ)+AYLD(NJ)
C (4,67)
            AZL(NJ) = AZL(NJ)+AZLD(NJ)
C (4,68)
            AYR(NJ) = AYR(NJ)+AYRD(NJ)
C (4,69)
            AZR(NJ) = AZR(NJ)+AZRD(NJ)
C (4,70)
70          NJ = NJ+NY2
C           END BLOCK
         ENDDO
C (4,71)
80       CONTINUE
C        END BLOCK
      ENDDO
C (4,72)
C
      NJ = 1
C (4,73)
!     INITIALLY: DO 90
      DO N = 1, NAB
C (4,74)
C        BEGIN BLOCK
C (4,75)
         AYL(NJ) = AYL(NJ+NY)
C (4,76)
         AZL(NJ) = AZL(NJ+NY)
C (4,77)
         AYR(NJ) = AYR(NJ+NY)
C (4,78)
         AZR(NJ) = AZR(NJ+NY)
C (4,79)
         NJ = NJ+1
C (4,80)
         AYL(NJ+NY) = AYL(NJ)
C (4,81)
         AZL(NJ+NY) = AZL(NJ)
C (4,82)
         AYR(NJ+NY) = AYR(NJ)
C (4,83)
         AZR(NJ+NY) = AZR(NJ)
C (4,84)
90       NJ = NJ+NY1
C        END BLOCK
      ENDDO
C (4,85)
C
      IJ = 1
C (4,86)
!     INITIALLY: DO 120
      DO J = 1, NY2
C (4,87)
C        BEGIN BLOCK
C (4,88)
         RYL = 0.D0
C (4,89)
         RZL = 0.D0
C (4,90)
         RYR = 0.D0
C (4,91)
         RZR = 0.D0
C (4,92)
C        BEGIN UNSTRUCTURED
C (5,1)
         IF (NAB.EQ.0) GOTO 110
C (7,1)
C        BEGIN BLOCK
C (7,2)
         NJ = J
C (7,3)
!     INITIALLY: DO 100
         DO N = 1, NAB
C (7,4)
C           BEGIN BLOCK
C (7,5)
            AL = ALPHA(N)
C (7,6)
            RYL = RYL+AL*AYL(NJ)
C (7,7)
            RZL = RZL+AL*AZL(NJ)
C (7,8)
            RYR = RYR+AL*AYR(NJ)
C (7,9)
            RZR = RZR+AL*AZR(NJ)
C (7,10)
100         NJ = NJ+NY2
C           END BLOCK
         ENDDO
C        END BLOCK
C (6,1)
110      CONTINUE
C        END UNSTRUCTURED
C (4,93)
         AY1(IJ) = -RYL
C (4,94)
         AZ1(IJ) = -RZL
C (4,95)
         IJ = IJ+NX1
C (4,96)
         AY1(IJ) = -RYR
C (4,97)
         AZ1(IJ) = -RZR
C (4,98)
120      IJ = IJ+1
C        END BLOCK
      ENDDO
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
130   NX1 = NX+1
C (2,3)
      NX2 = NX+2
C (2,4)
      NY1 = NY+1
C (2,5)
      NY2 = NY+2
C (2,6)
      HY = YMAX/NY
C (2,7)
      TYS = (DT/HY)**2
C (2,8)
      DTIH = .5D0/DT
C (2,9)
      HXIQ = .25D0/HX
C (2,10)
      IDIAGR = 1
C (2,11)
      NAB = 3
C (2,12)
      ALPHA(1) = .32645D0
C (2,13)
      ALPHA(2) = .12716D0
C (2,14)
      ALPHA(3) = .030905D0
C (2,15)
      BETA(1) = .73754D0
C (2,16)
      BETA(2) = .983846D0
C (2,17)
      BETA(3) = .99964720D0
C (2,18)
!     INITIALLY: DO 140
      DO N = 1, NAB
C (2,19)
C        BEGIN BLOCK
C (2,20)
         ALPHA(N) = ALPHA(N)*TYS
C (2,21)
140      BETA(N) = BETA(N)*TYS
C        END BLOCK
      ENDDO
C (2,22)
      ISET = 0
C     END BLOCK
C (3,1)
      IF (INISW.EQ.0) GOTO 10
C (9,1)
C     BEGIN BLOCK
C (9,2)
      NJMAX = NAB*NY2
C (9,3)
!     INITIALLY: DO 150
      DO NJ = 1, NJMAX
C (9,4)
C        BEGIN BLOCK
C (9,5)
         AYL(NJ) = 0.D0
C (9,6)
         AYLD(NJ) = 0.D0
C (9,7)
         AYR(NJ) = 0.D0
C (9,8)
         AYRD(NJ) = 0.D0
C (9,9)
         AZL(NJ) = 0.D0
C (9,10)
         AZLD(NJ) = 0.D0
C (9,11)
         AZR(NJ) = 0.D0
C (9,12)
         AZRD(NJ) = 0.D0
C (9,13)
150      CONTINUE
C        END BLOCK
      ENDDO
C (9,14)
      INISW = 0
C     END BLOCK
C (8,1)
      RETURN
C     END UNSTRUCTURED
      END
      SUBROUTINE LASPOW
      REAL*8 RANF
      EXTERNAL RANF
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,IT,NC,NB,NP,IMPSW,
     &NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,KSPLIT,NPTSA,NPTSB,
     &NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,LDEC,NEP,L,IY1,IY2,I,
     &II,J,IS
      INTEGER NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:NNS1),IDNY(1:
     &NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),IBCNDB(1:NNS),
     &LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:NNS),INJR(1:NNS)
     &,IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XKICK,DXKICK,YK1,YK2,
     &FNKICK,VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,
     &PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC
     &,EZC,BXC,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL
     &),AYLD(1:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),
     &AZRD(1:NCL),VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),
     &YDRIFT(1:NNS),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),
     &DENY(1:NNS2),XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,
     &AFRACR,DINJR(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),
     &TINJR(1:NNS),TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(
     &1:NNS),VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,
     &TFIN,EFIN,TDEC(1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:
     &N1D),EPOUTR(1:50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(
     &1:50),EPINL(1:50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,DVX,XK1
     &,XK2,VXS,VYS,FYY,DE,SUM,ARG
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99979 CONTINUE
C (0,3)
      DELE = 0.D0
C (0,4)
      ARG = ((T-TPEAK)/TWIDTH)**2
C (0,5)
      IF (ARG.GE.36.D0) THEN
C (0,6)
         DLASER = 0.D0
      ELSE
C (0,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,8)
      IF (ARG.LT.36.D0) THEN
C (0,9)
         DLASER = .5D0*VOSC**2*(YK2-YK1)*DT*DEXP(-ARG)
      ELSE
C (0,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,11)
      RETURN
C     END BLOCK
      END
      SUBROUTINE LASDEN
      REAL*8 RANF
      EXTERNAL RANF
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,IT,NC,NB,NP,IMPSW,
     &NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,KSPLIT,NPTSA,NPTSB,
     &NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,LDEC,NEP,L,IY1,IY2,I,
     &II,J,IS
      INTEGER NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:NNS1),IDNY(1:
     &NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),IBCNDB(1:NNS),
     &LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:NNS),INJR(1:NNS)
     &,IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XKICK,DXKICK,YK1,YK2,
     &FNKICK,VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,
     &PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC
     &,EZC,BXC,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL
     &),AYLD(1:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),
     &AZRD(1:NCL),VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),
     &YDRIFT(1:NNS),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),
     &DENY(1:NNS2),XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,
     &AFRACR,DINJR(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),
     &TINJR(1:NNS),TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(
     &1:NNS),VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,
     &TFIN,EFIN,TDEC(1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:
     &N1D),EPOUTR(1:50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(
     &1:50),EPINL(1:50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,DVX,XK1
     &,XK2,VXS,VYS,FYY,DE,SUM,ARG
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99980 CONTINUE
C (0,3)
      XLASER = DXKICK+YK1+YK2
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (FNKICK.EQ.0.OR.XLASER.LE.0) RETURN
C (8,1)
      IF (QMULT.GT.0) RETURN
C (7,1)
C     BEGIN BLOCK
C (7,2)
C
C SEARCH FOR X POSITION OF FNKICK DENSITY
C
C     XKICK IS SET TO FIRST PLACE FROM THE LEFT WHERE DENSITY
C        DROPS BELOW FNKICK (AVERAGED OVER YK1 TO YK2)
C
      IY1 = YK1/HY+1
C (7,3)
      IY2 = YK2/HY+1
C (7,4)
!     INITIALLY: DO 300
      DO I = 2, NX1
C (7,5)
C        BEGIN BLOCK
C (7,6)
         II = IY1*NX2+I
C (7,7)
         SUM = 0.D0
C (7,8)
!     INITIALLY: DO 350
         DO J = IY1, IY2
C (7,9)
C           BEGIN BLOCK
C (7,10)
            SUM = SUM+Q(II)
C (7,11)
350         II = II+NX2
C           END BLOCK
         ENDDO
C (7,12)
300      TEMP(I) = -SUM/(IY2-IY1+1)
C        END BLOCK
      ENDDO
C (7,13)
      IS = 2
C     END BLOCK
99961 CONTINUE
C (6,1)
C     DO loop 400 with exit had to be desugared
      IF (IS.GT.NX1) GOTO 410
C (4,1)
400   IF (TEMP(IS).LT.FNKICK) GOTO 410
C (5,1)
      IS = IS+1
      GOTO 99961
C (3,1)
410   XKICK = (IS-1.5D0)*HX
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE LASER
      REAL*8 RANF
      EXTERNAL RANF
      INTEGER*4 NBB
      PARAMETER (NBB = 512)
      INTEGER*4 NC1
      PARAMETER (NC1 = 78885)
      INTEGER*4 N1D
      PARAMETER (N1D = 5000)
      INTEGER*4 NYY
      PARAMETER (NYY = 514)
      INTEGER*4 NNS
      PARAMETER (NNS = 25)
      INTEGER*4 NDIM
      PARAMETER (NDIM = 503)
      INTEGER*4 NNS1
      PARAMETER (NNS1 = NNS+1)
      INTEGER*4 NNS2
      PARAMETER (NNS2 = NNS*2)
      INTEGER*4 NCL
      PARAMETER (NCL = 3*NYY)
      INTEGER NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,IBCDT,
     &IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,IT,NC,NB,NP,IMPSW,
     &NRAND,KJSMTH,KQSMTH,KEI,KEE,KSP,NPTIME,NSP,KSPLIT,NPTSA,NPTSB,
     &NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2,KDIAG,LDEC,NEP,L,IY1,IY2,I,
     &II,J,IS
      INTEGER NPX(1:NNS),NPY(1:NNS),NSPEC(1:NNS),IDNX(1:NNS1),IDNY(1:
     &NNS1),IBCNDL(1:NNS),IBCNDR(1:NNS),IBCNDT(1:NNS),IBCNDB(1:NNS),
     &LOADED(1:NNS),LOSTL(1:NNS),LOSTR(1:NNS),INJL(1:NNS),INJR(1:NNS)
     &,IBATCH(1:NNS)
      REAL*8 PBUF(1:NBB,1:5),Q(1:NC1),TEMP(1:2*N1D),TBUF(1:5,1:NBB),
     &SS(1:NC1),W(1:NC1),AX(1:NC1),AX1(1:NC1),AY(1:NC1),AY1(1:NC1),AZ
     &(1:NC1),AZ1(1:NC1),CX(1:NC1),CY(1:NC1),CZ(1:NC1),EX(1:NC1),EY(1
     &:NC1),EZ(1:NC1),BX(1:NC1),BY(1:NC1),BZ(1:NC1),QBK(1:NC1),X(1:
     &NBB),Y(1:NBB),VX(1:NBB),VY(1:NBB),VZ(1:NBB),XMAX,YMAX,DT,QMULT,
     &WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,QLOSTL
     &,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,TRPAR,
     &TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ,XKICK,DXKICK,YK1,YK2,
     &FNKICK,VMPXH,VMPYH,EHEAT,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER,
     &PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,TAU1,TAU2,EXC,EYC
     &,EZC,BXC,BYC,BZC,WSPEC(1:NNS),QSPEC(1:NNS),AYL(1:NCL),AYR(1:NCL
     &),AYLD(1:NCL),AYRD(1:NCL),AZL(1:NCL),AZR(1:NCL),AZLD(1:NCL),
     &AZRD(1:NCL),VMPX(1:NNS),VMPY(1:NNS),VMPZ(1:NNS),XDRIFT(1:NNS),
     &YDRIFT(1:NNS),ZDRIFT(1:NNS),XN(1:NNS2),DENX(1:NNS2),YN(1:NNS2),
     &DENY(1:NNS2),XLJ(1:NNS),XRJ(1:NNS),XTJ(1:NNS),XBJ(1:NNS),FEREM,
     &AFRACR,DINJR(1:NNS),DINJL(1:NNS),VINJR(1:NNS),VINJL(1:NNS),
     &TINJR(1:NNS),TINJL(1:NNS),EKX(1:NNS),EKY(1:NNS),EKZ(1:NNS),EKJ(
     &1:NNS),VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,VYAVGB,VZAVGA,VZAVGB,
     &TFIN,EFIN,TDEC(1:NDIM),EDEC(1:NDIM,1:6),ELOSTB,AVPOYN,APOYNT(1:
     &N1D),EPOUTR(1:50),EPOUTL(1:50),EPOUTB(1:50),EPOUTT(1:50),EPINR(
     &1:50),EPINL(1:50),EPINB(1:50),EPINT(1:50),DEP,TEP,EPMAX,DVX,XK1
     &,XK2,VXS,VYS,FYY,DE,SUM,ARG
      COMMON /PARAM1/ EKX,EKY,EKZ,EKJ,VLIMA,VLIMB,VXAVGA,VXAVGB,
     &VYAVGA,VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,TDEC,EDEC,ELOSTB,AVPOYN,
     &APOYNT,EPOUTR,EPOUTL,EPOUTB,EPOUTT,EPINR,EPINL,EPINB,EPINT,DEP,
     &TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,NENRG2
     &,KDIAG,LDEC,NEP
      COMMON /PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,TAU,
     &TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC,QSPEC,AYL,AYR,AYLD,AYRD
     &,AZL,AZR,AZLD,AZRD,VMPX,VMPY,VMPZ,XDRIFT,YDRIFT,ZDRIFT,XN,DENX,
     &YN,DENY,XLJ,XRJ,XTJ,XBJ,FEREM,AFRACR,DINJR,DINJL,VINJR,VINJL,
     &TINJR,TINJL,IBATCH
      COMMON /PARAM/ IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,KEI,KEE,
     &KSP,NPTIME,NSP,NPX,NPY,NSPEC,IDNX,IDNY,IBCNDL,IBCNDR,IBCNDT,
     &IBCNDB,LOADED,LOSTL,LOSTR,INJL,INJR
      COMMON /FKICK/ XKICK,DXKICK,YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT,
     &VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON /PARCM/ NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     &IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,XMAX,YMAX,DT,
     &QMULT,WMULT,XLEFT,XRIGHT,HX,HY,HXI,HYI,VMPX1,VMPY1,VMPZ1,ELOST,
     &QLOSTL,QLOSTR,QLOSTT,QLOSTB,YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     &TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      COMMON /QBK/ QBK
      COMMON /EFIELD/ EX,EY,EZ,BX,BY,BZ
      COMMON /CURR/ CX,CY,CZ
      COMMON /POTEN3/ AZ,AZ1
      COMMON /POTEN2/ AX1,AY,AY1
      COMMON /POTEN1/ SS,W,AX
      COMMON PBUF,Q,TEMP,TBUF
      EQUIVALENCE (PBUF,X), (PBUF(1,2),Y), (PBUF(1,3),VX), (PBUF(1,4)
     &,VY), (PBUF(1,5),VZ)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C     ASSUMING CONSTANT ACCELERATION, VMPXH IS THE FINAL VELOCITY
C       TO BE REACHED OVER THE ACCELERATION DISTANCE DXKICK
C
      DVX = DT*VMPXH**2/DXKICK
C (0,3)
      XK1 = XKICK-.5D0*DXKICK
C (0,4)
      XK2 = XKICK+.5D0*DXKICK
C (0,5)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (DELE.GT.DLASER) RETURN
C (3,1)
!     INITIALLY: DO 100
      DO L = L3, L4
C (3,2)
C        BEGIN BLOCK
C (3,3)
         VXS = VX(L)
C (3,4)
         VYS = VY(L)
C (3,5)
         IF (VXS*VMPXH.GT.0.AND.DELE.LT.DLASER) THEN
C (3,6)
C
C        PARTICLE VELOCITY HAS CORRECT SIGN AND MORE DEPOSITION IS NEEDE
C
            IF (X(L).GE.XK1.AND.X(L).LE.XK2.AND.Y(L).GE.YK1.AND.Y(L)
     &      .LE.YK2) THEN
C (3,7)
C              BEGIN BLOCK
C (3,8)
C
C           PARTICLE IS INSIDE ACCELERATING REGION
C
               FYY = ((2.D0*Y(L)-YK2-YK1)/(YK2-YK1))**2
C (3,9)
               FYY = 1.D0-FYY
C (3,10)
               VX(L) = VX(L)+DVX*RANF(0.0D0)*FYY
C (3,11)
               VY(L) = VY(L)+DVX*VMPYH*2*(.5D0-RANF(0.0D0))*FYY
C (3,12)
               DE = WMULT*(VX(L)**2+VY(L)**2-VXS**2-VYS**2)
C (3,13)
               DELE = DELE+DE
C (3,14)
               EHEAT = EHEAT+DE
C              END BLOCK
            ELSE
C (3,15)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
         ELSE
C (3,16)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (3,17)
100      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE PDIAG
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      DIMENSION XSC(2), YSC(2), VSC(2), VSC1(2)
      COMMON /DIST/FVX1(101,2), FVX2(101,2), FVY1(101,2), FVY2(101,2),
     1             FVZ1(101,2), FVZ2(101,2), NFX(2), NFY(2), DV(2), NFV
      COMMON /PART/ FIRST, KNEW, KTEST
      COMMON/ENERMO/ VXAV(NNS),VYAV(NNS),VXRMSD(NNS),VYRMSD(NNS),
     1                VZAV(NNS),VZRMSD(NNS)
c specmod
	REAL XD1,XD2,YD1,YD2
      SAVE IS
C	Definition of LSKIP as SAVE, JWR/SPEC 4/5/94 
      SAVE LSKIP
	DATA XD1,XD2,YD1,YD2/ 0.D0, 0.D0, 0.D0, 0.D0 /
C (0,1)
C     BEGIN BLOCK
C (0,2)
      NFV = 0
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
C
C    PARTICLE DIAGNOSTICS
C
      IF (KDIAG.LT.0) THEN
      ENDIF
C (2,1)
C
C    PHASE SPACE AND DISTRIBUTION FUNCTION CALCULATION
C
40    IF (NPLOT.LE.0) GOTO 140
C (10,1)
      IF (MOD(IT, NPLOT).NE.0) GOTO 140
C (9,1)
C     BEGIN BLOCK
C (9,2)
      IF (KSP.EQ.KNEW.OR.KTEST.NE.KDIAG) THEN
C (9,3)
C        BEGIN BLOCK
C (9,4)
C
C           START A NEW SPECIES PLOT AT SPECIES NUMBER KSPLIT
C
         IF (KNEW.LE.1.OR.KTEST.NE.KDIAG) THEN
C (9,5)
C           BEGIN BLOCK
C (9,6)
            VLIM = VLIMA
C (9,7)
c specmod
c            VXAVG=VXAVGA
c            VYAVG=VYAVGA
c            VZAVG=VZAVGA
            VXAVG = 0.D0
C (9,8)
            VYAVG = 0.D0
C (9,9)
            VZAVG = 0.D0
C (9,10)
            LSKIP = NPTSA
C (9,11)
            KNEW = KSPLIT
C (9,12)
            KTEST = KDIAG
C (9,13)
            XSC(1) = 0.D0
C (9,14)
            XSC(2) = XMAX
C (9,15)
            YSC(1) = 0.D0
C (9,16)
            YSC(2) = YMAX
C (9,17)
            XSC(1) = XLJ(KSP)
C (9,18)
            XSC(2) = XRJ(KSP)
C (9,19)
            IS = 1
C           END BLOCK
         ELSE
C (9,20)
C           BEGIN BLOCK
C (9,21)
            VLIM = VLIMB
C (9,22)
c specmod
c            VXAVG=VXAVGB
c            VYAVG=VYAVGB
c            VZAVG=VZAVGB
            VXAVG = 0.D0
C (9,23)
            VYAVG = 0.D0
C (9,24)
            VZAVG = 0.D0
C (9,25)
            LSKIP = NPTSB
C (9,26)
            KNEW = 1
C (9,27)
            IS = 2
C           END BLOCK
         ENDIF
C (9,28)
         IF (KDIAG.GE.0) THEN
C (9,29)
C           BEGIN BLOCK
C (9,30)
C
C             FIRST FRAME FOR SPECIES
C
            VSC(1) = VXAVG-VLIM
C (9,31)
            VSC(2) = VXAVG+VLIM
C (9,32)
            VSC(1) = VYAVG-VLIM
C (9,33)
            VSC(2) = VYAVG+VLIM
C (9,34)
            VSC(1) = VZAVG-VLIM
C (9,35)
            VSC(2) = VZAVG+VLIM
C (9,36)
            NFX(IS) = 0
C (9,37)
            NFY(IS) = 0
C (9,38)
!     INITIALLY: DO 95
            DO I = 1, NFV
C (9,39)
C              BEGIN BLOCK
C (9,40)
               FVX1(I,IS) = 0.D0
C (9,41)
               FVX2(I,IS) = 0.D0
C (9,42)
               FVY1(I,IS) = 0.D0
C (9,43)
               FVY2(I,IS) = 0.D0
C (9,44)
               FVZ1(I,IS) = 0.D0
C (9,45)
               FVZ2(I,IS) = 0.D0
C (9,46)
95             CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (9,47)
C           BEGIN BLOCK
C (9,48)
C
C             SECOND FRAME FOR SPECIES
C
            LSKIPM = 2*LSKIP
C (9,49)
            VSC(1) = VXAVG-VLIM
C (9,50)
            VSC(2) = VXAVG+VLIM
C (9,51)
            VSC1(1) = VYAVG-VLIM
C (9,52)
            VSC1(2) = VYAVG+VLIM
C (9,53)
            VSC1(1) = VZAVG-VLIM
C (9,54)
            VSC1(2) = VZAVG+VLIM
C (9,55)
            VSC(1) = VYAVG-VLIM
C (9,56)
            VSC(2) = VYAVG+VLIM
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (9,57)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (9,58)
      NPTS = 1+(L4-L3)/LSKIP
C     END BLOCK
C (7,1)
      IF (KDIAG.GE.0) GOTO 99960
C (6,1)
C     BEGIN BLOCK
C (6,2)
C
C        PLOT SECOND SET OF DISTRIBUTION PLOTS
C
      NPTS = 1+(L4-L3)/LSKIPM
C (6,3)
      NPTS = 1+(L4-L3)/LSKIP
C     END BLOCK
      RETURN
99960 CONTINUE
C (8,1)
C     BEGIN BLOCK
C (8,2)
C
C        FIRST SET OF PHASE SPACE PLOTS
C
C        ADD PARTICLES TO DISTRIBUTION FUNCTIONS
C
      DV(IS) = 2.D0*VLIM/(NFV-1)
C (8,3)
!     INITIALLY: DO 120
      DO L = L3, L4
C (8,4)
C        BEGIN BLOCK
C (8,5)
         J = 0
C (8,6)
         IF (X(L).GE.XD1.AND.X(L).LE.XD2) THEN
C (8,7)
            J = J+1
         ELSE
C (8,8)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (8,9)
         IF (Y(L).GE.YD1.AND.Y(L).LE.YD2) THEN
C (8,10)
            J = J+2
         ELSE
C (8,11)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (8,12)
         IF (J.NE.0) THEN
C (8,13)
C           BEGIN BLOCK
C (8,14)
C
C           PARTICLE IS WITHIN BOUNDARY OF DISTRIBUTION PLOTS
C
            JX = MIN0(NFV, MAX0(1, INT((NFV-1)*(VX(L)+VLIM-VXAVG)/(2*
     &      VLIM)+1)))
C (8,15)
            JY = MIN0(NFV, MAX0(1, INT((NFV-1)*(VY(L)+VLIM-VYAVG)/(2*
     &      VLIM)+1)))
C (8,16)
            JZ = MIN0(NFV, MAX0(1, INT((NFV-1)*(VZ(L)+VLIM-VZAVG)/(2*
     &      VLIM)+1)))
C (8,17)
            IF (J.NE.2) THEN
C (8,18)
C              BEGIN BLOCK
C (8,19)
C
C              ADD PARTICLE TO LEFT DISTRIBUTION FUNCTION
C
               NFX(IS) = NFX(IS)+1
C (8,20)
               FVX1(JX,IS) = FVX1(JX,IS)+1.D0
C (8,21)
               FVY1(JY,IS) = FVY1(JY,IS)+1.D0
C (8,22)
               FVZ1(JZ,IS) = FVZ1(JZ,IS)+1.D0
C              END BLOCK
            ELSE
C (8,23)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (8,24)
            IF (J.NE.1) THEN
C (8,25)
C              BEGIN BLOCK
C (8,26)
C
C              ADD PARTICLE TO RIGHT DISTRIBUTION FUNCTION
C
               NFY(IS) = NFY(IS)+1
C (8,27)
               FVX2(JX,IS) = FVX2(JX,IS)+1.D0
C (8,28)
               FVY2(JY,IS) = FVY2(JY,IS)+1.D0
C (8,29)
               FVZ2(JZ,IS) = FVZ2(JZ,IS)+1.D0
C              END BLOCK
            ELSE
C (8,30)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C           END BLOCK
         ELSE
C (8,31)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (8,32)
120      CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (3,1)
C
C    PARTICLE ENERGY CALCULATION
C
140   IF (NENRG2.LE.0) GOTO 180
C (15,1)
      IF (MOD(IT, NENRG2).NE.0) GOTO 180
C (11,1)
C     BEGIN BLOCK
C (11,2)
      IF (FIRST.EQ.0.) THEN
C (11,3)
C        BEGIN BLOCK
C (11,4)
C
C        INITIALIZE ARRAYS
C
         VSQ = 0.D0
C (11,5)
!     INITIALLY: DO 150
         DO KS = 1, NSP
C (11,6)
C           BEGIN BLOCK
C (11,7)
            VXAV(KS) = 0.D0
C (11,8)
            VYAV(KS) = 0.D0
C (11,9)
            VXRMSD(KS) = 0.D0
C (11,10)
            VYRMSD(KS) = 0.D0
C (11,11)
            VZAV(KS) = 0.D0
C (11,12)
            VZRMSD(KS) = 0.D0
C (11,13)
150         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ELSE
C (11,14)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,15)
      VX1 = 0.D0
C (11,16)
      VY1 = 0.D0
C (11,17)
      VXS1 = 0.D0
C (11,18)
      VYS1 = 0.D0
C (11,19)
      VZ1 = 0.D0
C (11,20)
      VZS1 = 0.D0
C (11,21)
!     INITIALLY: DO 170
      DO L = L3, L4
C (11,22)
C        BEGIN UNSTRUCTURED
C (12,1)
         IF (X(L).LT.0) GOTO 170
C (14,1)
C        BEGIN BLOCK
C (14,2)
         VX1 = VX1+VX(L)
C (14,3)
         VXS1 = VXS1+VX(L)**2
C (14,4)
         VY1 = VY1+VY(L)
C (14,5)
         VYS1 = VYS1+VY(L)**2
C (14,6)
         VZ1 = VZ1+VZ(L)
C (14,7)
         VZS1 = VZS1+VZ(L)**2
C        END BLOCK
C (13,1)
170      CONTINUE
C        END UNSTRUCTURED
      ENDDO
C (11,23)
      VXAV(KSP) = VXAV(KSP)+VX1
C (11,24)
      VXRMSD(KSP) = VXRMSD(KSP)+VXS1
C (11,25)
      VYAV(KSP) = VYAV(KSP)+VY1
C (11,26)
      VYRMSD(KSP) = VYRMSD(KSP)+VYS1
C (11,27)
      VZAV(KSP) = VZAV(KSP)+VZ1
C (11,28)
      VZRMSD(KSP) = VZRMSD(KSP)+VZS1
C (11,29)
      VSQ = VSQ+WMULT*(VXS1+VYS1+VZS1)
C     END BLOCK
C (4,1)
C     BEGIN BLOCK
C (4,2)
180   CONTINUE
C (4,3)
      FIRST = 1.
C     END BLOCK
C (5,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
C
      SUBROUTINE DIAGNS
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON /PART/ FIRST, KNEW, KTEST
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C      CELL DIAGNOSTICS
C
      LE1 = 0
C (0,3)
      IF (NENRG.GT.0) THEN
C (0,4)
         IF (MOD(IT, NENRG).EQ.0) THEN
C (0,5)
            LE1 = 1
         ELSE
C (0,6)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ELSE
C (0,7)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,8)
      LE2 = 0
C (0,9)
      IF (NENRG2.GT.0) THEN
C (0,10)
         IF (MOD(IT, NENRG2).EQ.0) THEN
C (0,11)
            LE2 = 1
         ELSE
C (0,12)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ELSE
C (0,13)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,14)
C
C       CALCULATE FIELD ENERGY
C
      IF (LE1+LE2.GT.0) THEN
C (0,15)
         CALL ENERGY(LE1, LE2)
      ELSE
C (0,16)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,17)

      IF (NHIST.GT.0.AND.IT.GT.0) THEN
C (0,18)
C        BEGIN BLOCK
C (0,19)
C
C       ACCUMULATE POYNTING VECTOR AVERAGED OVER Y
C
         I1 = 2
C (0,20)
         I2 = NX1
C (0,21)
         I3 = I2-I1+1
C (0,22)
!     INITIALLY: DO 100
         DO I = I1, I2
C (0,23)
C           BEGIN BLOCK
C (0,24)
            POYN = 0.
C (0,25)
!     INITIALLY: DO 200
            DO J = 2, NY1
C (0,26)
C              BEGIN BLOCK
C (0,27)
               K = (J-1)*NX2+I
C (0,28)
200            POYN = POYN+EY(K)*BZ(K)-EZ(K)*BY(K)
C              END BLOCK
            ENDDO
C (0,29)
100         APOYNT(I) = APOYNT(I)+POYN/NY
C           END BLOCK
         ENDDO
C
C        END BLOCK
      ELSE
C (0,31)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,32)
C
      FIRST = 0.
C (0,33)
      KNEW = 1
C (0,34)
      KTEST = 0
C (0,35)
      RETURN
C     END BLOCK
      END

      SUBROUTINE ENERGY(LE1,LE2)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (NBB=512)
      PARAMETER(NC1 = 78885)
      PARAMETER (N1D=5000)
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
C
      PARAMETER (NYY=514)
      PARAMETER(NNS=25)
      PARAMETER (NDIM=503)
      PARAMETER(NNS1=NNS+1,NNS2=NNS*2)
C
      PARAMETER(NCL=3*NYY)
C
      COMMON/FKICK/XKICK,DXKICK, YK1,YK2,FNKICK,VMPXH,VMPYH,EHEAT
     1 ,VOSC,DELE,DLASER,TWIDTH,TPEAK,XLASER
      COMMON/PARAM/IT,NC,NB,NP,IMPSW,NRAND,KJSMTH,KQSMTH,
     *    KEI,KEE,KSP,NPTIME,
     *    NSP,NPX(NNS),NPY(NNS),NSPEC(NNS),IDNX(NNS1),IDNY(NNS1),
     *    IBCNDL(NNS),IBCNDR(NNS),IBCNDT(NNS),IBCNDB(NNS),
     *    LOADED(NNS),LOSTL(NNS),LOSTR(NNS),INJL(NNS),INJR(NNS)
      COMMON/PARAMR/ PI,T,AA,SINA,SINP,TDLAZ,AMPH,PHAS,VEA,FNK,
     *    TAU,TAU1,TAU2,EXC,EYC,EZC,BXC,BYC,BZC,WSPEC(NNS),QSPEC(NNS),
     *    AYL(NCL),AYR(NCL),AYLD(NCL),AYRD(NCL),
     *    AZL(NCL),AZR(NCL),AZLD(NCL),AZRD(NCL),
     *    VMPX(NNS),VMPY(NNS),VMPZ(NNS),
     *    XDRIFT(NNS),YDRIFT(NNS),ZDRIFT(NNS),
     *    XN(NNS2),DENX(NNS2),YN(NNS2),DENY(NNS2),
     *    XLJ(NNS),XRJ(NNS),XTJ(NNS),XBJ(NNS),FEREM,AFRACR,
     *    DINJR(NNS),DINJL(NNS),VINJR(NNS),VINJL(NNS),
     *    TINJR(NNS),TINJL(NNS),IBATCH(NNS)
      COMMON /PARAM1/ EKX(NNS),EKY(NNS),EKZ(NNS),EKJ(NNS),
     *    VLIMA,VLIMB,VXAVGA,VXAVGB,VYAVGA,
     *    VYAVGB,VZAVGA,VZAVGB,TFIN,EFIN,
     *    TDEC(NDIM),EDEC(NDIM,6),ELOSTB,AVPOYN,APOYNT(N1D),
     *    EPOUTR(50),EPOUTL(50),EPOUTB(50),EPOUTT(50),
     *    EPINR(50),EPINL(50),EPINB(50),EPINT(50),
     *    DEP,TEP,EPMAX,KSPLIT,NPTSA,NPTSB,NPLOT,NENRG,NHIST,NFT1,NFT2,
     *    NENRG2,KDIAG,LDEC,NEP
C
      COMMON /ENERMO/VXAV(NNS),VYAV(NNS),VXRMSD(NNS),VYRMSD(NNS),
     1                VZAV(NNS),VZRMSD(NNS)
      CHARACTER*16 LABELP
      DIMENSION NSPC(NNS)
C (0,1)
C     BEGIN BLOCK
C (0,2)
500   FORMAT(/' ',A16,' IT=',I6,'  T=',F9.3)
C (0,3)
600   FORMAT(/' ',5X,'EFE=',E11.4,' EFB=',E11.4,' EF=',E11.4,' KINETIC='
     x 
     &,E11.4,'  TOTAL=',E11.4,' ELOSTB=',E11.4)
C (0,4)
700   FORMAT(/'    VXAV       VYAV       VZAV        VXRMSD       VYRMSD
     x 
     &      VZRMSD     EKX          EKY         EKZ         EKT')
C (0,5)
800   FORMAT(1X,10E12.4)
C (0,6)
900   FORMAT(' EHEAT = ',E11.4)
C (0,7)
      ESQ = 0.D0
C (0,8)
      ESQE = 0.D0
C (0,9)
      ESQB = 0.D0
C (0,10)
      IJ = NX+4
C (0,11)
!     INITIALLY: DO 100
      DO J = 2, NY1
C (0,12)
C        BEGIN BLOCK
C (0,13)
!     INITIALLY: DO 200
         DO I = 2, NX1
C (0,14)
C           BEGIN BLOCK
C (0,15)
            ESQE = ESQE+EX(IJ)**2+EY(IJ)**2+EZ(IJ)**2
C (0,16)
            ESQB = ESQB+BX(IJ)**2+BY(IJ)**2+BZ(IJ)**2
C (0,17)
200         IJ = IJ+1
C           END BLOCK
         ENDDO
C (0,18)
100      IJ = IJ+2
C        END BLOCK
      ENDDO
C (0,19)
      CF = .5D0*HX*HY
C (0,20)
      EFE = CF*ESQE
C (0,21)
      EFB = CF*ESQB
C (0,22)
      EF = EFE+EFB
C (0,23)
      EK = 0.D0
C (0,24)
!     INITIALLY: DO 300
      DO KS = 1, NSP
C (0,25)
C        BEGIN BLOCK
C (0,26)
         EKX(KS) = VXRMSD(KS)*CF*WSPEC(KS)*DABS(QSPEC(KS))
C (0,27)
         EKY(KS) = VYRMSD(KS)*CF*WSPEC(KS)*DABS(QSPEC(KS))
C (0,28)
         EKZ(KS) = VZRMSD(KS)*CF*WSPEC(KS)*DABS(QSPEC(KS))
C (0,29)
         EKJ(KS) = EKX(KS)+EKY(KS)+EKZ(KS)
C (0,30)
         EK = EK+EKJ(KS)
C (0,31)
300      CONTINUE
C        END BLOCK
      ENDDO
C (0,32)
      IF (LE1.NE.0) THEN
C (0,33)
C        BEGIN BLOCK
C (0,34)
         ETOT = EK+EF
C (0,35)
         EB = CF*ELOSTB
C (0,36)
         LABELP = 'ENERGY CHECK'
C (0,37)
         WRITE (9, 500) LABELP, IT, T
C (0,38)
         WRITE (9, 600) EFE, EFB, EF, EK, ETOT, EB
C (0,39)
C        WRITE (9,700)
         EH = EHEAT*CF
C (0,40)
c         WRITE(9,900) EH
         CALL NUMB(NSPC, NSP)
C (0,41)
!     INITIALLY: DO 400
         DO KS = 1, NSP
C (0,42)
C           BEGIN BLOCK
C (0,43)
            FN = 1.D0/NSPC(KS)
C (0,44)
            VXAV(KS) = VXAV(KS)*FN
C (0,45)
            VYAV(KS) = VYAV(KS)*FN
C (0,46)
            VXRMSD(KS) = DSQRT(VXRMSD(KS)*FN-VXAV(KS)**2)
C (0,47)
            VYRMSD(KS) = DSQRT(VYRMSD(KS)*FN-VYAV(KS)**2)
C (0,48)
            VZAV(KS) = VZAV(KS)*FN
C (0,49)
            VZRMSD(KS) = DSQRT(VZRMSD(KS)*FN-VZAV(KS)**2)
C (0,50)
c            WRITE (9,800) VXAV(KS),VYAV(KS),VZAV(KS),
c     1        VXRMSD(KS),VYRMSD(KS),VZRMSD(KS),
c     1        EKX(KS),EKY(KS),EKZ(KS),EKJ(KS)
400         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ELSE
C (0,51)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,52)
      IF (LE2.NE.0.AND.LDEC.GE.0) THEN
C (0,53)
C        BEGIN BLOCK
C (0,54)
         IF (LDEC.GT.NDIM) THEN
C (0,55)
C           BEGIN BLOCK
C (0,56)
C
C          REINITIALIZE HISTORY ARRAYS
C
            TDEC(1) = TDEC(NDIM)
C (0,57)
            TDEC(3) = TDEC(NDIM)
C (0,58)
            LDEC = 4
C (0,59)
            EDEC(3,1) = EDEC(NDIM,1)
C (0,60)
            EDEC(3,2) = EDEC(NDIM,2)
C (0,61)
            EDEC(3,3) = EDEC(NDIM,3)
C (0,62)
            EDEC(3,4) = EDEC(NDIM,4)
C (0,63)
            EDEC(3,5) = EDEC(NDIM,5)
C (0,64)
            EDEC(3,6) = EDEC(NDIM,6)
C           END BLOCK
         ELSE
C (0,65)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,66)
         TDEC(LDEC) = T
C (0,67)
         EDEC(LDEC,1) = EFE
C (0,68)
         EDEC(LDEC,2) = EFB
C (0,69)
         EDEC(LDEC,3) = EKJ(1)
C (0,70)
         EDEC(LDEC,4) = EKJ(2)
C (0,71)
         EDEC(LDEC,5) = (EHEAT+EINJ)*CF
C (0,72)
         EDEC(LDEC,6) = ELOSTB*CF
C (0,73)
         LDEC = LDEC+1
C
C        END BLOCK
      ELSE
C (0,75)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,76)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SOLV2P(NX2,NY2,HX,HY,DD,Q,BC,TMP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C (0,1)
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
C     BEGIN BLOCK
C (0,2)
      I_PIPS_SLV2XP_Q = 1
      CALL SLV2XP(NX2-2, NY2-2, NX2, HX, HY, DUMMY, DD, Q, BC, TMP, 0
     &)
C (0,3)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SLV2PD(NX2,NY2,HX,HY,GX,DD,Q,BC,TMP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION Q(NX2,I_PIPS_SLV2PD_Q/NX2),TMP(NX2,I_PIPS_SLV2PD_TMP/NX2
     x ),BC(4),GX(NX2)
C (0,1)
      INTEGER*8 I_PIPS_SLV2PD_Q
      COMMON /PIPS_SLV2PD_Q/ I_PIPS_SLV2PD_Q
      INTEGER*8 I_PIPS_SLV2PD_TMP
      COMMON /PIPS_SLV2PD_TMP/ I_PIPS_SLV2PD_TMP
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
C     BEGIN BLOCK
C (0,2)
      NX = NX2-2
C (0,3)
      NX1 = NX+1
C (0,4)
      NY = NY2-2
C (0,5)
      IGXSW = 0
C (0,6)
!     INITIALLY: DO 20
      DO IX = 2, NX1
C (0,7)
C        BEGIN BLOCK
C (0,8)
         IF (GX(IX).NE.0.D0) THEN
C (0,9)
            IGXSW = 1
         ELSE
C (0,10)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,11)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,12)
      I_PIPS_SLV2XP_Q = NX2*I_PIPS_SLV2PD_Q/NX2
      CALL SLV2XP(NX, NY, NX2, HX, HY, GX, DD, Q, BC, TMP, IGXSW)
C (0,13)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SLV2XP(NX,NY,NXD,HX,HY,GX,DD,Q,BC,TMP,IGXSW)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C  SOLVES(V(I+1,J)+V(I-1,J)-2.*V(I,J))/HX**2
C     +(V(I,J+1)+V(I,J-1)-2.*V(I,J))/HY**2+GX(I)*V(I,J)=Q(I,J)
C     V(I,J) AND Q(I,J) ARE SPECIFIED AT X=(I-1.5)*HX FOR I=2,NX+1,
C     AND AT Y=(J-1.5)*HY FOR J=2,NY+1
C     IF(IGXSW.EQ.0)GX(I) IS IGNORED (TREATED AS ZERO)
C     ZEROS IN ALL OF GX WITH IGXSW NOT ZERO WILL NOT WORK
C     IN SINGULAR CASES (DOUBLY-PERIODIC OR DOUBLY-NEUMANN)
C
C  BOUNDARY CONDITIONS
C     PERIODIC IN Y
C     BC(1)*V(X=0,J)+BC(2)*DV/DX(X=0,J)=Q(1,J)  J=2,NY+1
C     BC(3)*V(X=NX*HX,J)+BC(4)*DV/DX(X=NX*HX,J)=Q(NX+2,J)  J=2,NY+1
C     (BC(1)=.5*HX*BC(1) AND BC(4)=-.5*HX*BC(3) ARE FORBIDDEN)
C     PERIODIC IN X IF BOTH BC(1)AND BC(2) ARE 0.
C
C  RETURNS V(I,J) IN Q(I,J) INCLUDING GHOST CELL VALUES
C     TO GIVE PROPER INTERPOLATED BOUNDARY CONDITIONS
C
C  CONSISTENCY FOR DOUBLY-PERIODIC IS
C     SUM(I=2,NX+1;J=2,NY+1)Q(I,J)=0.
C     CONSISTENCY FOR DOUBLY-NEUMANN IS
C     SUM(I=2,NX+1;J=2,NY+1)Q(I,J)=SUM(J=2,NY+1)(Q(NX+2,J)-Q(1,J))/HX
C
C  Q IS DIMENSIONED AT LEAST (NXD,NY+2)
C     NY MUST BE A POWER OF 2 BETWEEN 8 AND 512
C     NX IS ARBITRARY .GE. 3
C     TMP IS DIMENSIONED AT LEAST (NXD,NY) FOR APERIODIC,
C     TMP IS DIMENSIONED AT LEAST (NXD,NY,2) FOR PERIODIC
C     MAX NY IS 512
C
      COMMON/FFT00/C(65),S(65),EIG(512)
      DIMENSION Q(NXD,I_PIPS_SLV2XP_Q/NXD),TMP(NXD,NY,2),BC(4),GX(NXD)
      DATA NA/0/,HYA/0.D0/,DDA/0.D0/
C (0,1)
      INTEGER*8 I_PIPS_SLV2PD_Q
      COMMON /PIPS_SLV2PD_Q/ I_PIPS_SLV2PD_Q
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
      INTEGER*8 I_PIPS_VSLV1P_Q
      COMMON /PIPS_VSLV1P_Q/ I_PIPS_VSLV1P_Q
      INTEGER*8 I_PIPS_VSLV1X_Q
      COMMON /PIPS_VSLV1X_Q/ I_PIPS_VSLV1X_Q
C     BEGIN BLOCK
C (0,2)
C
      ISING = 1
C (0,3)
      IF (BC(1).NE.0.D0.OR.IGXSW.NE.0.OR.DD.NE.0.D0) THEN
C (0,4)
         ISING = 0
      ELSE
C (0,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,6)
      IF (BC(2).NE.0D0.AND.BC(3).NE.0.D0) THEN
C (0,7)
         ISING = 0
      ELSE
C (0,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,9)
      NX2 = NX+2
C (0,10)
      NY2 = NY+2
C (0,11)
      NY1 = NY+1
C (0,12)
      IF (NY.NE.NA.OR.HY.NE.HYA.OR.DD.NE.DDA) THEN
C (0,13)
C        BEGIN BLOCK
C (0,14)
C
         CALL GEN(NY)
C (0,15)
         N4 = NY/4
C (0,16)
         HYSQI = 1.D0/(HY**2)
C (0,17)
         IE = 1
C (0,18)
!     INITIALLY: DO 45
         DO K = 1, N4
C (0,19)
C           BEGIN BLOCK
C (0,20)
            COSS = C(K)
C (0,21)
!     INITIALLY: DO 40
            DO IS = 1, 2
C (0,22)
C              BEGIN BLOCK
C (0,23)
!     INITIALLY: DO 35
               DO IR = 1, 2
C (0,24)
C                 BEGIN BLOCK
C (0,25)
                  EIG(IE) = HYSQI*(2.D0*COSS-2.D0)+DD
C (0,26)
                  IE = IE+1
C (0,27)
                  IF (IE.EQ.2) THEN
C (0,28)
                     COSS = -COSS
                  ELSE
C (0,29)
C                    BEGIN BLOCK
C                    END BLOCK
                  ENDIF
C (0,30)
35                CONTINUE
C                 END BLOCK
               ENDDO
C (0,31)
               COSS = -COSS
C (0,32)
               IF (IE.EQ.3) THEN
C (0,33)
                  COSS = 0
               ELSE
C (0,34)
C                 BEGIN BLOCK
C                 END BLOCK
               ENDIF
C (0,35)
40             CONTINUE
C              END BLOCK
            ENDDO
C (0,36)
45          CONTINUE
C           END BLOCK
         ENDDO
C (0,37)
         NA = NY
C (0,38)
         HYA = HY
C (0,39)
         DDA = DD
C
C        END BLOCK
      ELSE
C (0,41)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,42)
      CALL VFFA(Q(1,2), NX2, NY, NXD)
C (0,43)
C
      IF (BC(1).EQ.0..AND.BC(2).EQ.0.) THEN
C (0,44)
      I_PIPS_VSLV1P_Q = NXD*I_PIPS_SLV2XP_Q/NXD-(2-1)*NXD
         CALL VSLV1P(NX, NY, NXD, HX, GX, EIG, Q(1,2), TMP, TMP(1,1,2
     &   ), IGXSW, ISING)
      ELSE
C (0,45)
      I_PIPS_VSLV1X_Q = NXD*I_PIPS_SLV2XP_Q/NXD-(2-1)*NXD
         CALL VSLV1X(NX, NY, NXD, HX, GX, EIG, Q(1,2), BC, TMP, IGXSW
     &   , ISING)
      ENDIF
C (0,46)
C
      CALL VFFS(Q(1,2), NX2, NY, NXD)
C (0,47)
C
!     INITIALLY: DO 80
      DO I = 1, NX2
C (0,48)
C        BEGIN BLOCK
C (0,49)
         Q(I,1) = Q(I,NY1)
C (0,50)
80       Q(I,NY2) = Q(I,2)
C        END BLOCK
      ENDDO
C (0,51)
      RETURN
C     END BLOCK
      END

      SUBROUTINE VSLV1P(NX,NY,NXD,HX,GX,GY,Q,TMP1,TMP2,IGXSW,ISING)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C  SOLVES(V(I+1,J)+V(I-1,J)-2.*V(I,J))/HX**2+(GX(I)+GY(J))*V(I,J)=Q(I,J)
C     V(I,J) AND Q(I,J) SPECIFIED AT (I-1.5)*HX FOR I=2,NX+1, J=1,NY
C     IF (IGXSW.EQ.0) GX(I) IS IGNORED AND TREATED AS ZERO
C     IF(ISING.NE.0) THE J=1 EQUATION IS TREATED AS SINGULAR
C     RETURNS V(I,J) IN Q(I,J), GX(I) AND GY(J) ARE NOT CHANGED
C
C  PERIODIC BOUNDARY CONDITIONS
C     RETURNS PERIODIC VALUES IN Q(1,J) AND Q(NX+2,J) J=1,NY
C
C  TMP1(I,J) AND TMP2(I,J) ARE SCRATCH ARRAYS WITH AT LEAST NXD*NY EACH
C     Q IS DIMENSIONED (NXD,NY+2)
C
      DIMENSION GX(NXD),GY(NY),Q(NXD,I_PIPS_VSLV1P_Q/NXD),TMP1(NXD,NY),T
     x MP2(NXD,NY)
C (0,1)
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
      INTEGER*8 I_PIPS_VSLV1P_Q
      COMMON /PIPS_VSLV1P_Q/ I_PIPS_VSLV1P_Q
C     BEGIN BLOCK
C (0,2)
      NX1 = NX+1
C (0,3)
      NX2 = NX+2
C (0,4)
      NXM1 = NX-1
C (0,5)
C
      FAC = HX**2
C (0,6)
      IF (IGXSW.NE.0) THEN
C (0,7)
!     INITIALLY: DO 10
         DO I = 2, NX1
C (0,8)
!     INITIALLY: DO 10
            DO IV = 1, NY
C (0,9)
C              BEGIN BLOCK
C (0,10)
               Q(I,IV) = FAC*Q(I,IV)
C (0,11)
               TMP1(I,IV) = FAC*(GX(I)+GY(IV))-2.D0
C (0,12)
10             CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
      ELSE
C (0,13)
!     INITIALLY: DO 12
         DO I = 2, NX1
C (0,14)
!     INITIALLY: DO 12
            DO IV = 1, NY
C (0,15)
C              BEGIN BLOCK
C (0,16)
               Q(I,IV) = FAC*Q(I,IV)
C (0,17)
               TMP1(I,IV) = FAC*GY(IV)-2.D0
C (0,18)
12             CONTINUE
C              END BLOCK
            ENDDO
         ENDDO
      ENDIF
C (0,19)
!     INITIALLY: DO 20
      DO IV = 1, NY
C (0,20)
C        BEGIN BLOCK
C (0,21)
         TMP2(1,IV) = 1.D0
C (0,22)
20       TMP2(2,IV) = 1.D0
C        END BLOCK
      ENDDO
C (0,23)
!     INITIALLY: DO 30
      DO I = 3, NX
C (0,24)
!     INITIALLY: DO 30
         DO IV = 1, NY
C (0,25)
C           BEGIN BLOCK
C (0,26)
            TMP1(1,IV) = 1.D0/TMP1(I-1,IV)
C (0,27)
            TMP1(I-1,IV) = TMP1(1,IV)
C (0,28)
            Q(I-1,IV) = TMP1(1,IV)*Q(I-1,IV)
C (0,29)
c
c *** spec
c *** for spec portability reasons, we check for possible underflow
c     (not an exhaustive check) and set the result to zero, rather
c     than depending upon different system approaches for handling exceptions
c
c      TMP2(I-1,IV)=TMP1(1,IV)*TMP2(I-1,IV)
c
            IF (TMP1(1,IV).LT.1.0D-15) THEN
C (0,30)
               TMP1(1,IV) = 0.0D0
            ELSE
C (0,31)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,32)
            IF (TMP2(I-1,IV).LT.1.0D-15) THEN
C (0,33)
               TMP2(I-1,IV) = 0.0D0
            ELSE
C (0,34)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,35)
c
            TMP2(I-1,IV) = TMP1(1,IV)*TMP2(I-1,IV)
C (0,36)
            TMP1(I,IV) = TMP1(I,IV)-TMP1(1,IV)
C (0,37)
            TMP2(I,IV) = -TMP2(I-1,IV)
C (0,38)
            Q(I,IV) = Q(I,IV)-Q(I-1,IV)
C (0,39)
            Q(NX1,IV) = Q(NX1,IV)-TMP2(1,IV)*Q(I-1,IV)
C (0,40)
c
c *** spec
c *** for spec portability reasons, we check for possible underflow
c     (not an exhaustive check) and set the result to zero, rather
c     than depending upon different system approaches for handling exceptions
c
c      TMP1(NX1,IV)=TMP1(NX1,IV)-TMP2(1,IV)*TMP2(I-1,IV)
c
            IF (TMP2(1,IV).LT.1.0D-15) THEN
C (0,41)
               TMP2(1,IV) = 0.0D0
            ELSE
C (0,42)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,43)
            IF (TMP2(I-1,IV).LT.1.0D-15) THEN
C (0,44)
               TMP2(I-1,IV) = 0.0D0
            ELSE
C (0,45)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,46)
C
            TMP1(NX1,IV) = TMP1(NX1,IV)-TMP2(1,IV)*TMP2(I-1,IV)
C (0,47)
            TMP2(1,IV) = -TMP2(1,IV)*TMP1(1,IV)
C (0,48)
30          CONTINUE
C           END BLOCK
         ENDDO
      ENDDO
C (0,49)
!     INITIALLY: DO 40
      DO IV = 1, NY
C (0,50)
C        BEGIN BLOCK
C (0,51)
         TMP2(NX,IV) = TMP2(NX,IV)+1.D0
C (0,52)
         TMP2(1,IV) = TMP2(1,IV)+1.D0
C (0,53)
         TMP1(1,IV) = 1.D0/TMP1(NX,IV)
C (0,54)
         TMP1(NX,IV) = TMP1(1,IV)
C (0,55)
         Q(NX,IV) = TMP1(1,IV)*Q(NX,IV)
C (0,56)
         TMP2(NX,IV) = TMP1(1,IV)*TMP2(NX,IV)
C (0,57)
         Q(NX1,IV) = Q(NX1,IV)-TMP2(1,IV)*Q(NX,IV)
C (0,58)
40       TMP1(NX1,IV) = TMP1(NX1,IV)-TMP2(1,IV)*TMP2(NX,IV)
C        END BLOCK
      ENDDO
C (0,59)
      IF (ISING.NE.0) THEN
C (0,60)
         TMP1(NX1,1) = 1.D15
      ELSE
C (0,61)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,62)
!     INITIALLY: DO 50
      DO IV = 1, NY
C (0,63)
C        BEGIN BLOCK
C (0,64)
         Q(NX1,IV) = Q(NX1,IV)/TMP1(NX1,IV)
C (0,65)
50       Q(NX,IV) = Q(NX,IV)-TMP2(NX,IV)*Q(NX1,IV)
C        END BLOCK
      ENDDO
C (0,66)
!     INITIALLY: DO 60
      DO J = 2, NXM1
C (0,67)
C        BEGIN BLOCK
C (0,68)
         I = NX1-J
C (0,69)
!     INITIALLY: DO 60
         DO IV = 1, NY
C (0,70)
C           BEGIN BLOCK
C (0,71)
            Q(I,IV) = Q(I,IV)-TMP2(I,IV)*Q(NX1,IV)-TMP1(I,IV)*Q(I+1,
     &      IV)
C (0,72)
60          CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (0,73)
!     INITIALLY: DO 70
      DO IV = 1, NY
C (0,74)
C        BEGIN BLOCK
C (0,75)
         Q(1,IV) = Q(NX1,IV)
C (0,76)
         Q(NX2,IV) = Q(2,IV)
C (0,77)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,78)
      RETURN
C     END BLOCK
      END

      SUBROUTINE VSLV1X(NX,NY,NXD,HX,GX,GY,Q,BC,TMP,IGXSW,ISING)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C  SOLVES (V(I+1,J)+V(I-1,J)-2.*V(I,J))/HX**2+(GX(I)+GY(J))*V(I,J)=Q(I,J
C     V(I,J) AND Q(I,J) SPECIFIED AT(I-1.5)*HX FOR I=2,NX+1, J=1,NY
C     EXCEPT IF IGXSW.EQ.0, GX(I)IGNORED
C     IF(ISING.NE.0),ASSUMED SINGULAR FOR J=1 ONLY
C
C  BOUNDARY CONDITIONS
C     BC(1)*V(X=0,J)+BC(2)*DV/DX(X=0,J)=Q(1,J)
C     BC(3)*V(X=NX*HX,J)+BC(4)*DV/DX(X=NX*HX,J)=Q(NX+2,J)
C     (BC(2)=.5*HX*BC(1) AND BC(4)=-.5*HX*BC(3) ARE FORBIDDEN)
C
C  RETURNS V(I,J) IN Q(I,J) INCLUDING Q(1,J) AND Q(NX+2,J) VALUES WHICH
C     RESULT IN ABOVE BOUNDARY CONDITIONS BY INTERPOLATION
C
C  Q IS DIMENSION (NXD,NY+2)
C     TMP IS DIMENSIONED AT LEAST (NXD,NY)
C
      DIMENSION Q(NXD,I_PIPS_VSLV1X_Q/NXD),TMP(NXD,NY),BC(4),GX(NXD),GY(
     x NY)
C (0,1)
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
      INTEGER*8 I_PIPS_VSLV1X_Q
      COMMON /PIPS_VSLV1X_Q/ I_PIPS_VSLV1X_Q
C     BEGIN BLOCK
C (0,2)
      HXI = 1.D0/HX
C (0,3)
      HXSQ = HX**2
C (0,4)
      NX1 = NX+1
C (0,5)
      NX2 = NX+2
C (0,6)
      R1 = .5D0*BC(1)
C (0,7)
      R2 = HXI*BC(2)
C (0,8)
      F1 = R1+R2
C (0,9)
      F2I = 1.D0/(R1-R2)
C (0,10)
      R3 = .5D0*BC(3)
C (0,11)
      R4 = HXI*BC(4)
C (0,12)
      F3 = R3-R4
C (0,13)
      F4I = 1.D0/(R3+R4)
C (0,14)
      IF (IGXSW.NE.0) THEN
C (0,15)
!     INITIALLY: DO 10
         DO I = 2, NX1
C (0,16)
!     INITIALLY: DO 10
            DO IV = 1, NY
C (0,17)
C              BEGIN BLOCK
C (0,18)
               TMP(I,IV) = (GX(I)+GY(IV))*HXSQ-2.D0
C (0,19)
10             Q(I,IV) = HXSQ*Q(I,IV)
C              END BLOCK
            ENDDO
         ENDDO
      ELSE
C (0,20)
!     INITIALLY: DO 12
         DO I = 2, NX1
C (0,21)
!     INITIALLY: DO 12
            DO IV = 1, NY
C (0,22)
C              BEGIN BLOCK
C (0,23)
               TMP(I,IV) = GY(IV)*HXSQ-2.D0
C (0,24)
12             Q(I,IV) = HXSQ*Q(I,IV)
C              END BLOCK
            ENDDO
         ENDDO
      ENDIF
C (0,25)
!     INITIALLY: DO 20
      DO IV = 1, NY
C (0,26)
C        BEGIN BLOCK
C (0,27)
         TMP(2,IV) = TMP(2,IV)-F1*F2I
C (0,28)
         TMP(NX1,IV) = TMP(NX1,IV)-F3*F4I
C (0,29)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,30)
!     INITIALLY: DO 30
      DO IV = 1, NY
C (0,31)
C        BEGIN BLOCK
C (0,32)
         Q(2,IV) = Q(2,IV)-F2I*Q(1,IV)
C (0,33)
         Q(NX1,IV) = Q(NX1,IV)-F4I*Q(NX1+1,IV)
C (0,34)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,35)
!     INITIALLY: DO 50
40    DO I = 3, NX1
C (0,36)
!     INITIALLY: DO 50
         DO IV = 1, NY
C (0,37)
C           BEGIN BLOCK
C (0,38)
            TMP(I-1,IV) = 1.D0/TMP(I-1,IV)
C (0,39)
            Q(I,IV) = Q(I,IV)-TMP(I-1,IV)*Q(I-1,IV)
C (0,40)
50          TMP(I,IV) = TMP(I,IV)-TMP(I-1,IV)
C           END BLOCK
         ENDDO
      ENDDO
C (0,41)
      IF (ISING.EQ.0) THEN
C (0,42)
         Q(NX1,1) = Q(NX1,1)/TMP(NX1,1)
      ELSE
C (0,43)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,44)
      IF (ISING.NE.0) THEN
C (0,45)
         Q(NX1,1) = 0.D0
      ELSE
C (0,46)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,47)
!     INITIALLY: DO 60
      DO IV = 2, NY
C (0,48)
C        BEGIN BLOCK
C (0,49)
         Q(NX1,IV) = Q(NX1,IV)/TMP(NX1,IV)
C (0,50)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,51)
      NX3 = NX1+2
C (0,52)
!     INITIALLY: DO 70
      DO II = 3, NX1
C (0,53)
C        BEGIN BLOCK
C (0,54)
         I = NX3-II
C (0,55)
!     INITIALLY: DO 70
         DO IV = 1, NY
C (0,56)
70          Q(I,IV) = (Q(I,IV)-Q(I+1,IV))*TMP(I,IV)
         ENDDO
C        END BLOCK
      ENDDO
C (0,57)
!     INITIALLY: DO 80
      DO IV = 1, NY
C (0,58)
C        BEGIN BLOCK
C (0,59)
         Q(1,IV) = F2I*Q(1,IV)-F1*F2I*Q(2,IV)
C (0,60)
         Q(NX1+1,IV) = F4I*Q(NX1+1,IV)-F3*F4I*Q(NX1,IV)
C (0,61)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,62)
      RETURN
C     END BLOCK
      END

      SUBROUTINE GEN(N)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C  GENERATES COS, SIN(I*2*PI/N), I=0,1,...,N/4 IN BERGLAND ORDER
C
      COMMON/FFT00/C(65),S(65),EIG(512)
      DATA NA/0/
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.NA) RETURN
C (14,1)
      NA = N
C (12,1)
      IF (N.EQ.4) GOTO 40
C (11,1)
C     BEGIN BLOCK
C (11,2)
      IF (N.GT.512.OR.N.LT.8) THEN
C (11,3)
         CALL ABRT('GEN--N OUT OF RANGE', 19)
      ELSE
C (11,4)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (11,5)
      M = N/4
C (11,6)
      K = 1
C (11,7)
      C(1) = 0.D0
C (11,8)
      S(1) = 1.D0
C (11,9)
      KH = 0
C     END BLOCK
C (10,1)
C     BEGIN BLOCK
C (10,2)
10    C(K+1) = DSQRT(.5D0+.5D0*C(KH+1))
C (10,3)
      S(K+1) = DSQRT(.5D0-.5D0*C(KH+1))
C (10,4)
      KH = K
C (10,5)
      K = K+K
C     END BLOCK
C (9,1)
      IF (K.LT.M) GOTO 10
C (8,1)
C     BEGIN BLOCK
C (8,2)
      IF (N.NE.4*K) THEN
C (8,3)
         CALL ABRT('GEN--N NOT POWER OF 2', 21)
      ELSE
C (8,4)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (8,5)
      K = M/4
C     END BLOCK
C (4,1)
C     BEGIN BLOCK
C (4,2)
20    KH = K/2
C (4,3)
      CC = C(KH+1)
C (4,4)
      SS = S(KH+1)
C (4,5)
      K2 = K+K
C (4,6)
      K3 = K2+K
C     END BLOCK
C (5,1)
      IF (K3.EQ.0) GOTO 99971
C (7,1)
C     BEGIN BLOCK
C (7,2)
!     INITIALLY: DO 30
      DO J = K3, M, K2
C (7,3)
C        BEGIN BLOCK
C (7,4)
         C(J+1) = CC*C(J-K+1)+SS*S(J-K+1)
C (7,5)
         S(J+1) = SS*C(J-K+1)-CC*S(J-K+1)
C (7,6)
30       CONTINUE
C        END BLOCK
      ENDDO
C (7,7)
      K = K/2
C     END BLOCK
C (3,1)
      IF (K.GT.0) THEN
         GOTO 20
      ELSE
         RETURN
      ENDIF
99971 CONTINUE
C (6,1)
C     BEGIN BLOCK
C (6,2)
      C(1) = 1.D0
C (6,3)
      S(1) = 0.D0
C     END BLOCK
      RETURN
C (13,1)
C     BEGIN BLOCK
C (13,2)
40    C(1) = 1.D0
C (13,3)
      S(1) = 0.D0
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE VFFA(DATA,M,N,MD)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      COMMON/FFT00/C(65),S(65),EIG(512)
      DIMENSION DATA(MD,I_PIPS_SLV2XP_Q/MD-(2-1))
C (0,1)
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
C     BEGIN BLOCK
C (0,2)
      NG = 1
C (0,3)
      K = N/4
C (0,4)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
10    K2 = K+K
C (1,3)
      K3 = K+K2
C (1,4)
      J1 = 1
C (1,5)
      K4 = K3+K
C (1,6)
      J2 = K
C (1,7)
      KA = K
C (1,8)
      KB = K2
C (1,9)
!     INITIALLY: DO 40
      DO IG = 1, NG
C (1,10)
C        BEGIN BLOCK
C (1,11)
         CC = C(IG)
C (1,12)
         SS = S(IG)
C (1,13)
!     INITIALLY: DO 30
         DO J = J1, J2
C (1,14)
C           BEGIN BLOCK
C (1,15)
!     INITIALLY: DO 20
            DO IV = 1, M
C (1,16)
C              BEGIN BLOCK
C (1,17)
               R1 = DATA(IV,J)
C (1,18)
               F1 = DATA(IV,J+KA)
C (1,19)
               T1 = CC*DATA(IV,J+KB)+SS*DATA(IV,J+K3)
C (1,20)
               T2 = CC*DATA(IV,J+K3)-SS*DATA(IV,J+KB)
C (1,21)
               DATA(IV,J) = R1+T1
C (1,22)
               DATA(IV,J+K) = F1+T2
C (1,23)
               DATA(IV,J+K2) = R1-T1
C (1,24)
               DATA(IV,J+K3) = T2-F1
C (1,25)
20             CONTINUE
C              END BLOCK
            ENDDO
C (1,26)
30          CONTINUE
C           END BLOCK
         ENDDO
C (1,27)
         KA = K2
C (1,28)
         KB = K
C (1,29)
         J1 = J1+K4
C (1,30)
         J2 = J2+K4
C (1,31)
40       CONTINUE
C        END BLOCK
      ENDDO
C (1,32)
      K = K/2
C (1,33)
      NG = NG+NG
C     END BLOCK
C (2,1)
      IF (K.GE.1) GOTO 10
C     END UNSTRUCTURED
C (0,5)
!     INITIALLY: DO 50
      DO IV = 1, M
C (0,6)
C        BEGIN BLOCK
C (0,7)
         T1 = DATA(IV,1)-DATA(IV,2)
C (0,8)
         DATA(IV,1) = DATA(IV,1)+DATA(IV,2)
C (0,9)
         DATA(IV,2) = T1
C (0,10)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,11)
      RETURN
C     END BLOCK
      END

      SUBROUTINE VFFS(DATA,M,N,MD)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      COMMON/FFT00/C(65),S(65),EIG(512)
      DIMENSION DATA(MD,I_PIPS_SLV2XP_Q/MD-(2-1))
C (0,1)
      INTEGER*8 I_PIPS_SLV2XP_Q
      COMMON /PIPS_SLV2XP_Q/ I_PIPS_SLV2XP_Q
C     BEGIN BLOCK
C (0,2)
      K = 1
C (0,3)
      NG = N/4
C (0,4)
!     INITIALLY: DO 10
      DO IV = 1, M
C (0,5)
C        BEGIN BLOCK
C (0,6)
         T1 = .5D0*(DATA(IV,1)-DATA(IV,2))
C (0,7)
         DATA(IV,1) = .5D0*(DATA(IV,1)+DATA(IV,2))
C (0,8)
10       DATA(IV,2) = T1
C        END BLOCK
      ENDDO
C (0,9)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
20    K2 = K+K
C (1,3)
      K3 = K+K2
C (1,4)
      J1 = 1
C (1,5)
      K4 = K3+K
C (1,6)
      J2 = K
C (1,7)
      KA = K
C (1,8)
      KB = K2
C (1,9)
!     INITIALLY: DO 50
      DO IG = 1, NG
C (1,10)
C        BEGIN BLOCK
C (1,11)
         CC = C(IG)
C (1,12)
         SS = S(IG)
C (1,13)
!     INITIALLY: DO 40
         DO J = J1, J2
C (1,14)
C           BEGIN BLOCK
C (1,15)
!     INITIALLY: DO 30
            DO IV = 1, M
C (1,16)
C              BEGIN BLOCK
C (1,17)
               R1 = .5D0*DATA(IV,J)
C (1,18)
               F1 = .5D0*DATA(IV,J+K)
C (1,19)
               R2 = .5D0*DATA(IV,J+K2)
C (1,20)
               F2 = .5D0*DATA(IV,J+K3)
C (1,21)
               T1 = R1-R2
C (1,22)
               T2 = F1+F2
C (1,23)
               DATA(IV,J) = R1+R2
C (1,24)
               DATA(IV,J+KA) = F1-F2
C (1,25)
               DATA(IV,J+KB) = CC*T1-SS*T2
C (1,26)
               DATA(IV,J+K3) = CC*T2+SS*T1
C (1,27)
30             CONTINUE
C              END BLOCK
            ENDDO
C (1,28)
40          CONTINUE
C           END BLOCK
         ENDDO
C (1,29)
         KA = K2
C (1,30)
         KB = K
C (1,31)
         J1 = J1+K4
C (1,32)
         J2 = J2+K4
C (1,33)
50       CONTINUE
C        END BLOCK
      ENDDO
C (1,34)
      K = K+K
C (1,35)
      NG = NG/2
C     END BLOCK
C (2,1)
      IF (NG.GE.1) GOTO 20
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE ABRT(MESS,NC)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      CHARACTER MESS(NC)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99    FORMAT(1X,8A10)
C (0,3)
      NW = (NC+9)/10
C (0,4)
      WRITE (*, 99) (MESS(I), I = 1, NW)
C (0,5)
      STOP 'SOLVE'
C (0,6)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SOLV2Y(NX2,NY2,HX,HY,DD,Q,BX,BY,TMP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION BX(4),Q(NX2,78885/NX2),TMP(NX2,78885/NX2),BY(4)
C (0,1)
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
C     BEGIN BLOCK
C (0,2)
      I_PIPS_SLV2XY_Q = NX2*78885/NX2
      CALL SLV2XY(NX2-2, NY2-2, NX2, HX, HY, DUMMY, DD, Q, BX, BY, 
     &TMP, 0)
C (0,3)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SLV2XD(NX2,NY2,HX,HY,GX,DD,Q,BX,BY,TMP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION Q(NX2,I_PIPS_SLV2XD_Q/NX2),TMP(NX2,I_PIPS_SLV2XD_TMP/NX2
     x ),BX(4),GX(NX2),BY(4)
C (0,1)
      INTEGER*8 I_PIPS_SLV2XD_Q
      COMMON /PIPS_SLV2XD_Q/ I_PIPS_SLV2XD_Q
      INTEGER*8 I_PIPS_SLV2XD_TMP
      COMMON /PIPS_SLV2XD_TMP/ I_PIPS_SLV2XD_TMP
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
C     BEGIN BLOCK
C (0,2)
      NX = NX2-2
C (0,3)
      NX1 = NX+1
C (0,4)
      NY = NY2-2
C (0,5)
      IGXSW = 0
C (0,6)
!     INITIALLY: DO 20
      DO IX = 2, NX1
C (0,7)
C        BEGIN BLOCK
C (0,8)
         IF (GX(IX).NE.0.D0) THEN
C (0,9)
            IGXSW = 1
         ELSE
C (0,10)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,11)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,12)
      I_PIPS_SLV2XY_Q = NX2*I_PIPS_SLV2XD_Q/NX2
      CALL SLV2XY(NX, NY, NX2, HX, HY, GX, DD, Q, BX, BY, TMP, IGXSW)
C (0,13)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SLV2XY(NX,NY,NXD,HX,HY,GX,DD,Q,BX,BY,TMP,IGXSW)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C  SOLVES(V(I+1,J)+V(I-1,J)-2.*V(I,J))/HX**2
C     +(V(I,J+1)+V(I,J-1)-2.*V(I,J))/HY**2+GX(I)*V(I,J)=Q(I,J)
C     V(I,J) AND Q(I,J) ARE SPECIFIED AT X=(I-1.5)*HX FOR I=2,NX+1,
C     AND AT Y=(J-1.5)*HY FOR J=2,NY+1
C     IF(IGXSW.EQ.0)GX(I) IS IGNORED (TREATED AS ZERO)
C     ZEROS IN ALL OF GX WITH IGXSW NOT ZERO WILL NOT WORK
C     IN SINGULAR CASES (DOUBLY-PERIODIC OR DOUBLY-NEUMANN)
C
C  BOUNDARY CONDITIONS
C
C     BX(1)*V(X=0,J)+BX(2)*DV/DX(X=0,J)=Q(1,J)  J=2,NY+1
C     BX(3)*V(X=NX*HX,J)+BX(4)*DV/DX(X=NX*HX,J)=Q(NX+2,J)  J=2,NY+1
C     (BX(1)=.5*HX*BX(1) AND BX(4)=-.5*HX*BX(3) ARE FORBIDDEN)
C     PERIODIC IN X IF BOTH BX(1)AND BX(2) ARE 0.
C
C     BOUNDARY CONDITIONS IN Y
C
C     IF BY(1)=1 V(I,Y=0)=Q(I,1)
C     IF BY(2)=1 DV(I,Y=0)/DX=Q(1,I) I=2,NX+1
C     IF(BY(1)=0 AND BY(2) = 0 PERIODIC
C     BY(1) AND BY(2) CAN'T BE BOTH BE 1 AT PRESENT
C     SAME FOR RIGHT BOUNDARY FOR BY(3) AND BY(4)
C  RETURNS V(I,J) IN Q(I,J) INCLUDING GHOST CELL VALUES
C     TO GIVE PROPER INTERPOLATED BOUNDARY CONDITIONS
C
C  CONSISTENCY FOR DOUBLY-PERIODIC IS
C     SUM(I=2,NX+1;J=2,NY+1)Q(I,J)=0.
C     CONSISTENCY FOR DOUBLY-NEUMANN IS
C     SUM(I=2,NX+1;J=2,NY+1)Q(I,J)=SUM(J=2,NY+1)(Q(NX+2,J)-Q(1,J))/HX
C
C  Q IS DIMENSIONED AT LEAST (NXD,NY+2)
C     NY CAN BE ANY INTEGER GREATER THAN 2 AND LESS THAN NDY
C     NX IS ARBITRARY .GE. 3
C     TMP IS DIMENSIONED AT LEAST (NXD,NY) FOR APERIODIC,
C     TMP IS DIMENSIONED AT LEAST (NXD,NY,2) FOR PERIODIC
C
      PARAMETER (NDY=512,NCOEF=3*NDY+15)
      COMMON/FFT01/TEMP(NDY),COEF(NCOEF),DIAG(NDY),IB
      DIMENSION Q(NXD,I_PIPS_SLV2XY_Q/NXD),TMP(NXD,NY,2),BX(4),GX(NXD),B
     x Y(4)
      DATA NA/0/,HYA/0.D0/,DDA/0.D0/,IBA/-1/
C (0,1)
      INTEGER*8 I_PIPS_SLV2XD_Q
      COMMON /PIPS_SLV2XD_Q/ I_PIPS_SLV2XD_Q
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
      INTEGER*8 I_PIPS_VSLV1P_Q
      COMMON /PIPS_VSLV1P_Q/ I_PIPS_VSLV1P_Q
      INTEGER*8 I_PIPS_VSLV1X_Q
      COMMON /PIPS_VSLV1X_Q/ I_PIPS_VSLV1X_Q
C     BEGIN BLOCK
C (0,2)
C
      ISING = 1
C (0,3)
      IF (BX(1).NE.0.D0.OR.BY(1).NE.0.OR.IGXSW.NE.0.OR.DD.NE.0.D0
     &) THEN
C (0,4)
         ISING = 0
      ELSE
C (0,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,6)
      IF (BX(2).NE.0.AND.BX(3).NE.0.D0) THEN
C (0,7)
         ISING = 0
      ELSE
C (0,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,9)
      IF (BY(2).NE.0.AND.BY(3).NE.0.D0) THEN
C (0,10)
         ISING = 0
      ELSE
C (0,11)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,12)
      NX1 = NX+1
C (0,13)
      NX2 = NX+2
C (0,14)
      NY2 = NY+2
C (0,15)
      NY1 = NY+1
C (0,16)
      IF (NY.NE.NA.OR.HY.NE.HYA.OR.DD.NE.DDA.OR.IB.NE.IBA) THEN
C (0,17)
C        BEGIN BLOCK
C (0,18)
C
30       CALL GENB(NY, BY)
C (0,19)
         PI = 2*DCOS(0.D0)
C (0,20)
         HYSQI = 1.D0/(HY**2)
C (0,21)
         IF (IB.NE.0) THEN
C (0,22)
C
C                APERIODIC BOUNDARY CONDITIONS IN Y
C
!     INITIALLY: DO 45
            DO I = 1, NY
C (0,23)
C              BEGIN BLOCK
C (0,24)
               DIAG(I) = HYSQI*(2*DCOS((I-IB+1)*PI/NY)-2)+DD
C (0,25)
45             CONTINUE
C              END BLOCK
            ENDDO
         ELSE
C (0,26)
C           BEGIN BLOCK
C (0,27)
C
C                PERIODIC BOUNDARY CONDITIONS IN Y
C
            DIAG(1) = DD
C (0,28)
            DIAG(NY) = -4*HYSQI+DD
C (0,29)
!     INITIALLY: DO 47
            DO I = 3, NY, 2
C (0,30)
C              BEGIN BLOCK
C (0,31)
               DIAG(I-1) = HYSQI*(2*DCOS((I-1)*PI/NY)-2)+DD
C (0,32)
47             DIAG(I) = DIAG(I-1)
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDIF
C (0,33)
         NA = NY
C (0,34)
         HYA = HY
C (0,35)
         DDA = DD
C (0,36)
         IBA = IB
C        END BLOCK
      ELSE
C (0,37)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,38)
      IF (IB.NE.0) THEN
C (0,39)
C
C     PUT  Y BOUNDARY CONDITIONS INTO ADJOINING CELLS
C
!     INITIALLY: DO 35
         DO I = 2, NX1
C (0,40)
C           BEGIN BLOCK
C (0,41)
            Q(I,2) = Q(I,2)+((-2)*BY(1)/HY+BY(2))*Q(I,1)/HY
C (0,42)
            Q(I,NY1) = Q(I,NY1)+((-2)*BY(3)/HY-BY(4))*Q(I,NY2)/HY
C (0,43)
35          CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,44)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,45)
      CALL FFTF(Q(1,2), NX2, NY, NXD)
C (0,46)
C
      IF (BX(1).EQ.0.D0.AND.BX(2).EQ.0.D0) THEN
C (0,47)
      I_PIPS_VSLV1P_Q = NXD*I_PIPS_SLV2XY_Q/NXD-(2-1)*NXD
C
C         PERIODIC BOUNDARY CONDITIONS IN X
C
         CALL VSLV1P(NX, NY, NXD, HX, GX, DIAG, Q(1,2), TMP, TMP(1,1,
     &   2), IGXSW, ISING)
      ELSE
C (0,48)
      I_PIPS_VSLV1X_Q = NXD*I_PIPS_SLV2XY_Q/NXD-(2-1)*NXD
C
C         APERIODIC BOUNDARY CONDITIONS IN X
C
         CALL VSLV1X(NX, NY, NXD, HX, GX, DIAG, Q(1,2), BX, TMP, 
     &   IGXSW, ISING)
      ENDIF
C (0,49)
C
      CALL FFTB(Q(1,2), NX2, NY, NXD)
C (0,50)
C
      IF (IB.NE.0) THEN
C (0,51)
C
C         APERIODIC BOUNDARY CONDITIONS IN Y
C
!     INITIALLY: DO 80
         DO I = 1, NX2
C (0,52)
C           BEGIN BLOCK
C (0,53)
            Q(I,1) = (2*BY(1)-BY(2)*HY)*Q(I,1)+(BY(2)-BY(1))*Q(I,2)
C (0,54)
80          Q(I,NY2) = (2*BY(3)+BY(4)*HY)*Q(I,NY2)+(BY(2)-BY(1))*Q(I,
     &      NY1)
C           END BLOCK
         ENDDO
      ELSE
C (0,55)
C
C          PERIODIC BOUNDARY CONDITIONS IN Y
C
!     INITIALLY: DO 87
         DO I = 1, NX2
C (0,56)
C           BEGIN BLOCK
C (0,57)
            Q(I,1) = Q(I,NY1)
C (0,58)
87          Q(I,NY2) = Q(I,2)
C           END BLOCK
         ENDDO
      ENDIF
C (0,59)
C
      RETURN
C     END BLOCK
      END

      SUBROUTINE GENB(N,BY)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C INITIALIZES FFT ROUTINES
C
      DIMENSION BY(4)
      PARAMETER (NDY=512,NCOEF=3*NDY+15)
      COMMON/FFT01/TEMP(NDY),COEF(NCOEF),DIAG(NDY),IB
      DATA NA/0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.NA) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NA = N
C (3,3)
      IF (BY(1).EQ.0.D0) THEN
C (3,4)
         IF (BY(2).EQ.0) THEN
C (3,5)
C           BEGIN BLOCK
C (3,6)
      I_PIPS_RFFTI_WSAVE = NCOEF
C
C                PERIODIC FFT
C
            CALL RFFTI(N, COEF)
C (3,7)
            IB = 0
C           END BLOCK
         ELSE
C (3,8)
            IF (BY(3).EQ.0) THEN
C (3,9)
C              BEGIN BLOCK
C (3,10)
C
C               SET DERIVATIVES TO ZERO AT BOUNDARIES
C
               CALL COSQI(N, COEF)
C (3,11)
               IB = 2
C              END BLOCK
            ELSE
C (3,12)
               CALL ABRT('BAD BY', 6)
            ENDIF
         ENDIF
      ELSE
C (3,13)
         IF (BY(2).EQ.0) THEN
C (3,14)
C           BEGIN BLOCK
C (3,15)
C
C          SET FUNCTION TO ZERO AT BOUNDARIES
C
            IB = 1
C (3,16)
            CALL SINQI(N, COEF)
C           END BLOCK
         ELSE
C (3,17)
            CALL ABRT('BAD BY', 6)
         ENDIF
      ENDIF
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE FFTF(DATA,M,N,MD)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION DATA(MD,I_PIPS_SLV2XY_Q/MD-(2-1))
      PARAMETER (NDY=512,NCOEF=3*NDY+15)
      COMMON/FFT01/TEMP(NDY),COEF(NCOEF),DIAG(NDY),IB
C (0,1)
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 10
      DO I = 1, M
C (0,3)
C        BEGIN BLOCK
C (0,4)
!     INITIALLY: DO 20
         DO J = 1, N
C (0,5)
20          TEMP(J) = DATA(I,J)
         ENDDO
C (0,6)
         IF (IB.EQ.0) THEN
C (0,7)
      I_PIPS_RFFTF_R = NDY
      I_PIPS_RFFTF_WSAVE = NCOEF
            CALL RFFTF(N, TEMP, COEF)
         ELSE
C (0,8)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,9)
         IF (IB.EQ.1) THEN
C (0,10)
            CALL SINQB(N, TEMP, COEF)
         ELSE
C (0,11)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,12)
         IF (IB.EQ.2) THEN
C (0,13)
            CALL COSQB(N, TEMP, COEF)
         ELSE
C (0,14)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,15)
!     INITIALLY: DO 15
         DO J = 1, N
C (0,16)
C           BEGIN BLOCK
C (0,17)
            DATA(I,J) = TEMP(J)
C (0,18)
15          CONTINUE
C           END BLOCK
         ENDDO
C (0,19)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,20)
      RETURN
C     END BLOCK
      END
C
      SUBROUTINE FFTB(DATA,M,N,MD)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION DATA(MD,I_PIPS_SLV2XY_Q/MD-(2-1))
      PARAMETER (NDY=512,NCOEF=3*NDY+15)
      COMMON/FFT01/TEMP(NDY),COEF(NCOEF),DIAG(NDY),IB
C (0,1)
      INTEGER*8 I_PIPS_SLV2XY_Q
      COMMON /PIPS_SLV2XY_Q/ I_PIPS_SLV2XY_Q
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 10
      DO I = 1, M
C (0,3)
C        BEGIN BLOCK
C (0,4)
!     INITIALLY: DO 20
         DO J = 1, N
C (0,5)
20          TEMP(J) = DATA(I,J)
         ENDDO
C (0,6)
         IF (IB.EQ.0) THEN
C (0,7)
      I_PIPS_RFFTB_WSAVE = NCOEF
            CALL RFFTB(N, TEMP, COEF)
         ELSE
C (0,8)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,9)
         IF (IB.EQ.1) THEN
C (0,10)
            CALL SINQF(N, TEMP, COEF)
         ELSE
C (0,11)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,12)
         IF (IB.EQ.2) THEN
C (0,13)
            CALL COSQF(N, TEMP, COEF)
         ELSE
C (0,14)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,15)
         K = 4
C (0,16)
         IF (IB.EQ.0) THEN
C (0,17)
            K = 1
         ELSE
C (0,18)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,19)
!     INITIALLY: DO 15
         DO J = 1, N
C (0,20)
C           BEGIN BLOCK
C (0,21)
            DATA(I,J) = TEMP(J)/(K*N)
C (0,22)
15          CONTINUE
C           END BLOCK
         ENDDO
C (0,23)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,24)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SMOOTH (NX2,NY2,HX,HY,Q,BC,BD,TEMP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION BD(4)
      DIMENSION Q(NX2,NY2), BC(4), TEMP(10000)
      DIMENSION CS(5), DS(5)
      DATA CS /4*.25D0,-1.25D0/, DS /4*.5D0,3.5D0/, NS /5/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
C      SMOOTH IN X AND Y WITH BOUNDARY CONDITIONS
C
C     BC(1)*Q(X=0,J)+BC(2)*DQ/DX(X=0,J)= 0 (J=2,NY+1)
C     BC(3)*Q(X=NX*HX,J)+BC(4)*DQ(DX(X=NX*HX,J) = 0 (J=2,NY+1)
C     BD(1)*Q(I,Y=0)+BD(2)*DQ/DY(I,Y=0) = 0 (I=2,NX+1)
C     BD(3)*Q(I,Y=NY*HY)+BD(4)*DQ/DY(I,Y=NY*HY) = 0 (I=2,NX+1)
C
      NX1 = NX2-1
C (0,3)
      NX = NX1-1
C (0,4)
      NY1 = NY2-1
C (0,5)
      NY = NY1-1
C (0,6)
      NX2NY = NX2*NY
C (0,7)
      NX2NY1 = NX2*NY1
C (0,8)
      I1 = 0
C (0,9)
      I2 = NX2
C (0,10)
      J1 = 0
C (0,11)
      J2 = NY2
C (0,12)
      KSX = 1
C (0,13)
      IF (BC(1).EQ.0.D0.AND.BC(2).EQ.0.D0) THEN
C (0,14)
         KSX = 0
      ELSE
C (0,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,16)
      IF (KSX.NE.0) THEN
C (0,17)
C        BEGIN BLOCK
C (0,18)
         BC1 = .5D0*BC(1)-BC(2)/HX
C (0,19)
         BC2 = .5D0*BC(1)+BC(2)/HX
C (0,20)
         BC3 = .5D0*BC(3)-BC(4)/HX
C (0,21)
         BC4 = .5D0*BC(3)+BC(4)/HX
C        END BLOCK
      ELSE
C (0,22)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,23)
      KSY = 1
C (0,24)
      IF (BD(1).EQ.0.D0.AND.BD(2).EQ.0.D0) THEN
C (0,25)
         KSY = 0
      ELSE
C (0,26)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,27)
      IF (KSY.NE.0) THEN
C (0,28)
C        BEGIN BLOCK
C (0,29)
         BD1 = .5D0*BD(1)-BD(2)/HY
C (0,30)
         BD2 = .5D0*BD(1)+BD(2)/HY
C (0,31)
         BD3 = .5D0*BD(3)-BD(4)/HY
C (0,32)
         BD4 = .5D0*BD(3)+BD(4)/HY
C        END BLOCK
      ELSE
C (0,33)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,34)
      NTEMP = 2*MAX0(NX2, NY2)
C (0,35)
!     INITIALLY: DO 20
      DO I = 1, NTEMP
C (0,36)
20       TEMP(I) = 0.D0
      ENDDO
C (0,37)
C
C     X-SMOOTHING
C
!     INITIALLY: DO 110
      DO IS = 1, NS
C (0,38)
C        BEGIN BLOCK
C (0,39)
         C = CS(IS)
C (0,40)
         DC = DS(IS)/C
C (0,41)
         IF (KSX.NE.0) THEN
C (0,42)
C           BEGIN BLOCK
C (0,43)
            B1 = BC1/C
C (0,44)
            B2 = BC2/C
C (0,45)
            B3 = BC3/C
C (0,46)
            B4 = BC4/C
C (0,47)
            IJ = 1
C (0,48)
!     INITIALLY: DO 30
            DO J = 1, NY2
C (0,49)
C              BEGIN BLOCK
C (0,50)
               TEMP(J+J2) = B1*Q(1,J)+B2*Q(2,J)
C (0,51)
30             CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (0,52)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,53)
!     INITIALLY: DO 70
         DO I = 2, NX1
C (0,54)
C           BEGIN BLOCK
C (0,55)
!     INITIALLY: DO 50
            DO J = 1, NY2
C (0,56)
C              BEGIN BLOCK
C (0,57)
               TEMP(J+J1) = Q(I-1,J)+DC*Q(I,J)+Q(I+1,J)
C (0,58)
50             CONTINUE
C              END BLOCK
            ENDDO
C (0,59)
!     INITIALLY: DO 60
            DO J = 1, NY2
C (0,60)
C              BEGIN BLOCK
C (0,61)
               Q(I-1,J) = C*TEMP(J+J2)
C (0,62)
60             CONTINUE
C              END BLOCK
            ENDDO
C (0,63)
            JH = J1
C (0,64)
            J1 = J2
C (0,65)
70          J2 = JH
C           END BLOCK
         ENDDO
C (0,66)
         IF (KSX.NE.0) THEN
C (0,67)
C           BEGIN BLOCK
C (0,68)
C
C         APERIODIC IN X
C
            B1I = 1.D0/BC1
C (0,69)
            B21 = BC2*B1I
C (0,70)
            B4I = 1.D0/BC4
C (0,71)
            B34 = BC3*B4I
C (0,72)
            I = 1
C (0,73)
!     INITIALLY: DO 80
            DO J = 1, NY2
C (0,74)
C              BEGIN BLOCK
C (0,75)
               Q(1,J) = -B21*Q(2,J)+B1I*Q(1,J)
C (0,76)
               Q(NX2,J) = BC3*Q(NX1,J)+BC4*Q(NX2,J)
C (0,77)
               Q(NX1,J) = C*TEMP(J+J2)
C (0,78)
               Q(NX2,J) = -B34*Q(NX1,J)+B4I*Q(NX2,J)
C (0,79)
80             CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (0,80)
C
C         PERIODIC IN X
C
!     INITIALLY: DO 100
            DO J = 1, NY2
C (0,81)
C              BEGIN BLOCK
C (0,82)
               Q(NX1,J) = C*TEMP(J+J2)
C (0,83)
               Q(1,J) = Q(NX1,J)
C (0,84)
               Q(NX2,J) = Q(2,J)
C (0,85)
100            CONTINUE
C              END BLOCK
            ENDDO
         ENDIF
C (0,86)
110      CONTINUE
C        END BLOCK
      ENDDO
C (0,87)
C
C     Y-SMOOTHING
C
!     INITIALLY: DO 105
      DO I = 1, NTEMP
C (0,88)
105      TEMP(I) = 0.D0
      ENDDO
C (0,89)
!     INITIALLY: DO 160
      DO IS = 1, NS
C (0,90)
C        BEGIN BLOCK
C (0,91)
         C = CS(IS)
C (0,92)
         DC = DS(IS)/C
C (0,93)
         IJ = NX2+1
C (0,94)
         IF (KSY.NE.0) THEN
C (0,95)
C           BEGIN BLOCK
C (0,96)
            B1 = BD1/C
C (0,97)
            B2 = BD2/C
C (0,98)
            B3 = BD3/C
C (0,99)
            B4 = BD4/C
C (0,100)
!     INITIALLY: DO 115
            DO I = 1, NX2
C (0,101)
C              BEGIN BLOCK
C (0,102)
               TEMP(I+I2) = B1*Q(I,1)+B2*Q(I,2)
C (0,103)
115            CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (0,104)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,105)
!     INITIALLY: DO 140
         DO J = 2, NY1
C (0,106)
C           BEGIN BLOCK
C (0,107)
!     INITIALLY: DO 120
            DO I = 1, NX2
C (0,108)
C              BEGIN BLOCK
C (0,109)
               TEMP(I+I1) = Q(I,J-1)+DC*Q(I,J)+Q(I,J+1)
C (0,110)
120            CONTINUE
C              END BLOCK
            ENDDO
C (0,111)
!     INITIALLY: DO 130
            DO I = 1, NX2
C (0,112)
C              BEGIN BLOCK
C (0,113)
               Q(I,J-1) = C*TEMP(I+I2)
C (0,114)
130            CONTINUE
C              END BLOCK
            ENDDO
C (0,115)
            IH = I1
C (0,116)
            I1 = I2
C (0,117)
140         I2 = IH
C           END BLOCK
         ENDDO
C (0,118)
         IF (KSY.NE.0) THEN
C (0,119)
C           BEGIN BLOCK
C (0,120)
C
C       APERIODIC IN Y
C
            B1I = 1.D0/BD1
C (0,121)
            B21 = BD2*B1I
C (0,122)
            B4I = 1.D0/BD4
C (0,123)
            B34 = BD3*B4I
C (0,124)
!     INITIALLY: DO 147
            DO J = 1, NX2
C (0,125)
C              BEGIN BLOCK
C (0,126)
               Q(J,1) = -B21*Q(J,2)+B1I*Q(J,1)
C (0,127)
               Q(J,NY2) = BD3*Q(J,NY1)+BD4*Q(J,NY2)
C (0,128)
               Q(J,NY1) = C*TEMP(J+I2)
C (0,129)
               Q(J,NY2) = -B34*Q(J,NY1)+B4I*Q(J,NY2)
C (0,130)
147            CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (0,131)
C
C         PERIODIC IN Y
C
!     INITIALLY: DO 150
            DO I = 1, NX2
C (0,132)
C              BEGIN BLOCK
C (0,133)
               Q(I,NY1) = C*TEMP(I+I2)
C (0,134)
               Q(I,1) = Q(I,NY1)
C (0,135)
150            Q(I,NY2) = Q(I,2)
C              END BLOCK
            ENDDO
         ENDIF
C (0,136)
160      CONTINUE
C        END BLOCK
      ENDDO
C (0,137)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ECWR(X,Y,N)
      INTEGER N,I
      REAL*8 X(1:N),Y(1:N)
C (0,1)
C     BEGIN BLOCK
C (0,2)
99985 CONTINUE
C (0,3)
!     INITIALLY: DO 20
      DO I = 1, N
C (0,4)
C        BEGIN BLOCK
C (0,5)
         Y(I) = X(I)
C (0,6)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
      RETURN
C     END BLOCK
      END
      SUBROUTINE ECRD(X,Y,N)
      INTEGER N,I
      REAL*8 X(1:N),Y(1:N)
C (0,1)
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 10
      DO I = 1, N
C (0,3)
C        BEGIN BLOCK
C (0,4)
         X(I) = Y(I)
C (0,5)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,6)
      RETURN
C     END BLOCK
      END


       FUNCTION RANF(R)
       DOUBLE PRECISION RANF

C             random number,special functions,uniform
C***author  fullerton, w., (lanl)
C***purpose  generates a uniformly distributed random number.
C***description
C
C      this pseudo-random number generator is portable among a wide
C variety of computers.  rand(r) undoubtedly is not as good as many
C readily available installation dependent versions, and so this
C routine is not recommended for widespread usage.  its redeeming
C feature is that the exact same random numbers (to within final round-
C off error) can be generated from machine to machine.  thus, programs
C that make use of random numbers can be easily transported to and
C checked in a new environment.
C      the random numbers are generated by the linear congruential
C method described, e.g., by knuth in seminumerical methods (p.9),
C addison-wesley, 1969.  given the i-th number of a pseudo-random
C sequence, the i+1 -st number is generated from
C             x(i+1) = (a*x(i) + c) mod m,
C where here m = 2**22 = 4194304, c = 1731 and several suitable values
C of the multiplier a are discussed below.  both the multiplier a and
C random number x are represented in double precision as two 11-bit
C words.  the constants are chosen so that the period is the maximum
C possible, 4194304.
C      in order that the same numbers be generated from machine to
C machine, it is necessary that 23-bit integers be reducible modulo
C 2**11 exactly, that 23-bit integers be added exactly, and that 11-bit
C integers be multiplied exactly.  furthermore, if the restart option
C is used (where r is between 0 and 1), then the product r*2**22 =
C r*4194304 must be correct to the nearest integer.
C      the first four random numbers should be .0004127026,
C .6750836372, .1614754200, and .9086198807.  the tenth random number
C is .5527787209, and the hundredth is .3600893021 .  the thousandth
C number should be .2176990509 .
C      in order to generate several effectively independent sequences
C with the same generator, it is necessary to know the random number
C for several widely spaced calls.  the i-th random number times 2**22,
C where i=k*p/8 and p is the period of the sequence (p = 2**22), is
C still of the form l*p/8.  in particular we find the i-th random
C number multiplied by 2**22 is given by
C i   =  0  1*p/8  2*p/8  3*p/8  4*p/8  5*p/8  6*p/8  7*p/8  8*p/8
C rand=  0  5*p/8  2*p/8  7*p/8  4*p/8  1*p/8  6*p/8  3*p/8  0
C thus the 4*p/8 = 2097152 random number is 2097152/2**22.
C      several multipliers have been subjected to the spectral test
C (see knuth, p. 82).  four suitable multipliers roughly in order of
C goodness according to the spectral test are
C    3146757 = 1536*2048 + 1029 = 2**21 + 2**20 + 2**10 + 5
C    2098181 = 1024*2048 + 1029 = 2**21 + 2**10 + 5
C    3146245 = 1536*2048 +  517 = 2**21 + 2**20 + 2**9 + 5
C    2776669 = 1355*2048 + 1629 = 5**9 + 7**7 + 1
C
C      in the table below log10(nu(i)) gives roughly the number of
C random decimal digits in the random numbers considered i at a time.
C c is the primary measure of goodness.  in both cases bigger is better.
C
C                   log10 nu(i)              c(i)
C       a       i=2  i=3  i=4  i=5    i=2  i=3  i=4  i=5
C
C    3146757    3.3  2.0  1.6  1.3    3.1  1.3  4.6  2.6
C    2098181    3.3  2.0  1.6  1.2    3.2  1.3  4.6  1.7
C    3146245    3.3  2.2  1.5  1.1    3.2  4.2  1.1  0.4
C    2776669    3.3  2.1  1.6  1.3    2.5  2.0  1.9  2.6
C   best
C    possible   3.3  2.3  1.7  1.4    3.6  5.9  9.7  14.9
C
C             input argument --
C r      if r=0., the next random number of the sequence is generated.
C        if r .lt. 0., the last generated number will be returned for
C          possible use in a restart procedure.
C        if r .gt. 0., the sequence of random numbers will start with
C          the seed r mod 1.  this seed is also returned as the value of
C          rand provided the arithmetic is done exactly.
C
C             output value --
C rand   a pseudo-random number between 0. and 1.
      SAVE IX1, IX0
      PARAMETER (IA1=1536, IA0=1029, IA1MA0=507, IC=1731)
      DATA IX1, IX0 /0, 0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
C***first executable statement  rand
C
C           a*x = 2**22*ia1*ix1 + 2**11*(ia1*ix1 + (ia1-ia0)*(ix0-ix1)
C                   + ia0*ix0) + ia0*ix0
C
      IY0 = IA0*IX0
C (0,3)
      IY1 = IA1*IX1+IA1MA0*(IX0-IX1)+IY0
C (0,4)
      IY0 = IY0+IC
C (0,5)
      IX0 = MOD(IY0, 2048)
C (0,6)
      IY1 = IY1+(IY0-IX0)/2048
C (0,7)
      IX1 = MOD(IY1, 2048)
C (0,8)
C
10    RANF = IX1*2048+IX0
C (0,9)
      RANF = RANF*2.38418579D-07
C (0,10)
      RETURN
C     END BLOCK
      END



      SUBROUTINE PARMVR
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C       RELATIVISTIC PARTICLE MOVER
      PARAMETER (NBB=512)
      PARAMETER (NC1 = 78885)
      PARAMETER (N1D=5000)
c specmod
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFILD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))


      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ
      DIMENSION HHA(NBB),HHASQ(NBB),C(NBB),F(NBB),G(NBB),XMULT(NBB),
     1 YMULT(NBB),ZMULT(NBB),GA(NBB),XH(NBB),YH(NBB),VXH(NBB),DX(NBB)
     2 ,DY(NBB),W1(NBB),W2(NBB),W3(NBB),W4(NBB),IJ(NBB),EXA(NBB),
     3 EYA(NBB),EZA(NBB),BXA(NBB),BYA(NBB),BZA(NBB),H(NBB),QMLT(NBB)
      COMMON /SCR/ SCR(NBB,18)
      COMMON /PARBD1/ JB, LB,IB(NBB),IBEG,IEND
      DIMENSION I(NBB),FX(NBB),FY(NBB),VXA(NBB),VYA(NBB),VZA(NBB)
      EQUIVALENCE (EXA,SCR(1,1)), (EYA,SCR(1,2))
      EQUIVALENCE (EZA,SCR(1,3)), (BXA,SCR(1,4))
      EQUIVALENCE (BYA,SCR(1,5)), (BZA,SCR(1,6))
      EQUIVALENCE (W1,SCR(1,7)), (W2,SCR(1,8))
      EQUIVALENCE (W3,SCR(1,9)), (W4,SCR(1,10))
      EQUIVALENCE (IJ,SCR(1,11)), (GA,SCR(1,12))
      EQUIVALENCE (VXA,SCR(1,13)), (VYA,SCR(1,14))
      EQUIVALENCE (VZA,SCR(1,15)), (XMULT,SCR(1,16))
      EQUIVALENCE (YMULT,SCR(1,17)), (ZMULT,SCR(1,18))
      EQUIVALENCE (EXA,VXH), (W1,HHA), (W2,HHASQ), (W3,C)
      EQUIVALENCE (EYA,XH), (EZA,YH),(BYA,DX), (BZA,DY)
      EQUIVALENCE (W4,F), (IJ,G), (XMULT,H), (BYA,QMLT)
      EQUIVALENCE (VZA,FY)
      EQUIVALENCE (VYA,FX)
      EQUIVALENCE (VXA,I)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      H1 = DT*QMULT/WMULT
C (0,3)
      HH = .5D0*H1
C (0,4)
!     INITIALLY: DO 10
      DO L = L3, L4
C (0,5)
C        BEGIN BLOCK
C (0,6)
         H(L) = H1
C (0,7)
10       IF (X(L).LT.0.) THEN
C (0,8)
            H(L) = 0.D0
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,10)
C
C    CALCULATE OLD GAMMAS.
!     INITIALLY: DO 20
      DO L = L3, L4
C (0,11)
C        BEGIN BLOCK
C (0,12)
         GA(L) = VX(L)**2+VY(L)**2+VZ(L)**2+1.D0
C (0,13)
         GA(L) = DSQRT(GA(L))
C (0,14)
         GA(L) = 1.D0/GA(L)
C (0,15)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,16)
C    CALCULATE AREA WEIGHT VECTORS
!     INITIALLY: DO 30
      DO L = L3, L4
C (0,17)
C        BEGIN BLOCK
C (0,18)
         RX = HXI*X(L)+1.5D0
C (0,19)
         RY = HYI*Y(L)+1.5D0
C (0,20)
         I(L) = RX
C (0,21)
         IF (I(L).LT.1) THEN
C (0,22)
            I(L) = 1
         ELSE
C (0,23)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,24)
         FX(L) = RX-I(L)
C (0,25)
         FXC = 1.D0-FX(L)
C (0,26)
         J = RY
C (0,27)
         FY(L) = RY-J
C (0,28)
         FYC = 1.D0-FY(L)
C (0,29)
         IJ(L) = I(L)+NX2*(J-1)
C (0,30)
         W1(L) = FXC*FYC
C (0,31)
         W2(L) = FX(L)*FYC
C (0,32)
         W3(L) = FXC*FY(L)
C (0,33)
         W4(L) = FX(L)*FY(L)
C (0,34)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,35)
C  FETCH EX FIELD VECTOR
C    CALCULATE AVERAGE FIELD ON PARTICLE
C     1EF4,NX2,324)
!     INITIALLY: DO 40
      DO L = L3, L4
C (0,36)
C        BEGIN BLOCK
C (0,37)
         EXA(L) = W1(L)*EX(IJ(L))+W2(L)*EX(IJ(L)+1)+W3(L)*EX(IJ(L)+
     &   NX2)+W4(L)*EX(IJ(L)+NX2+1)
C (0,38)
         EYA(L) = W1(L)*EY(IJ(L))+W2(L)*EY(IJ(L)+1)+W3(L)*EY(IJ(L)+
     &   NX2)+W4(L)*EY(IJ(L)+NX2+1)
C (0,39)
         EZA(L) = W1(L)*EZ(IJ(L))+W2(L)*EZ(IJ(L)+1)+W3(L)*EZ(IJ(L)+
     &   NX2)+W4(L)*EZ(IJ(L)+NX2+1)
C (0,40)
         BXA(L) = W1(L)*BX(IJ(L))+W2(L)*BX(IJ(L)+1)+W3(L)*BX(IJ(L)+
     &   NX2)+W4(L)*BX(IJ(L)+NX2+1)
C (0,41)
         BYA(L) = W1(L)*BY(IJ(L))+W2(L)*BY(IJ(L)+1)+W3(L)*BY(IJ(L)+
     &   NX2)+W4(L)*BY(IJ(L)+NX2+1)
C (0,42)
         BZA(L) = W1(L)*BZ(IJ(L))+W2(L)*BZ(IJ(L)+1)+W3(L)*BZ(IJ(L)+
     &   NX2)+W4(L)*BZ(IJ(L)+NX2+1)
C (0,43)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,44)
C  ADVANCE THREE COMPONENTS OF MOMENTUM
!     INITIALLY: DO 50
      DO L = L3, L4
C (0,45)
C        BEGIN BLOCK
C (0,46)
         HHA(L) = HH*GA(L)
C (0,47)
         HHASQ(L) = HHA(L)*GA(L)
C (0,48)
         C(L) = GA(L)*(1.-HHASQ(L)*(VX(L)*EXA(L)+VY(L)*EYA(L)+VZ(L)*
     &   EZA(L)))
C (0,49)
         F(L) = 1.D0-H(L)*HHASQ(L)*(BXA(L)**2+BYA(L)**2+BZA(L)**2)
C (0,50)
         G(L) = HHASQ(L)*(VX(L)*BXA(L)+VY(L)*BYA(L)+VZ(L)*BZA(L))
C (0,51)
         VXA(L) = C(L)*VX(L)+HHA(L)*EXA(L)
C (0,52)
         VYA(L) = C(L)*VY(L)+HHA(L)*EYA(L)
C (0,53)
         VZA(L) = C(L)*VZ(L)+HHA(L)*EZA(L)
C (0,54)
         VX(L) = F(L)*VX(L)+H(L)*(EXA(L)+G(L)*BXA(L)+VYA(L)*BZA(L)-
     &   VZA(L)*BYA(L))
C (0,55)
         VY(L) = F(L)*VY(L)+H(L)*(EYA(L)+G(L)*BYA(L)+VZA(L)*BXA(L)-
     &   VXA(L)*BZA(L))
C (0,56)
         VZ(L) = F(L)*VZ(L)+H(L)*(EZA(L)+G(L)*BZA(L)+VXA(L)*BYA(L)-
     &   VYA(L)*BXA(L))
C (0,57)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,58)
C   COMPUTE NEW GAMMAS
!     INITIALLY: DO 60
      DO L = L3, L4
C (0,59)
C        BEGIN BLOCK
C (0,60)
         GA(L) = VX(L)**2+VY(L)**2+VZ(L)**2+1.D0
C (0,61)
         GA(L) = DSQRT(GA(L))
C (0,62)
         GA(L) = 1.D0/GA(L)
C (0,63)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,64)
C   ADVANCE WHOLE AND HALF-TIME POSITIONS.
!     INITIALLY: DO 70
      DO L = L3, L4
C (0,65)
C        BEGIN BLOCK
C (0,66)
         VXH(L) = VX(L)
C (0,67)
         DX(L) = GA(L)*DT*VX(L)
C (0,68)
         DY(L) = GA(L)*DT*VY(L)
C (0,69)
         IF (X(L).LT.0.) THEN
C (0,70)
            DX(L) = 0.D0
         ELSE
C (0,71)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,72)
         IF (X(L).LT.0.) THEN
C (0,73)
            DY(L) = 0.D0
         ELSE
C (0,74)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,75)
         XH(L) = X(L)+.5D0*DX(L)
C (0,76)
         X(L) = X(L)+DX(L)
C (0,77)
         YH(L) = Y(L)+.5D0*DY(L)
C (0,78)
         Y(L) = Y(L)+DY(L)
C (0,79)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,80)

C   CHECK FOR PARTICLE BOUNDARY CROSSINGS

      JB = 0
C (0,81)
!     INITIALLY: DO 80
      DO L = L3, L4
C (0,82)
C        BEGIN BLOCK
C (0,83)
         IB(L) = 0
C (0,84)
         IF (X(L).GE.XRIGHT) THEN
C (0,85)
            IB(L) = 1
         ELSE
C (0,86)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,87)
         IF (X(L).LT.XLEFT) THEN
C (0,88)
            IB(L) = 1
         ELSE
C (0,89)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,90)
         IF (Y(L).LT.0.) THEN
C (0,91)
            IB(L) = 1
         ELSE
C (0,92)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,93)
         IF (Y(L).GE.YMAX) THEN
C (0,94)
            IB(L) = 1
         ELSE
C (0,95)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,96)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,97)
!     INITIALLY: DO 81
      DO L = L3, L4
C (0,98)
C        BEGIN BLOCK
C (0,99)
         JB = JB+IB(L)
C (0,100)
         IF (IB(L).NE.0) THEN
C (0,101)
            IB(JB) = L
         ELSE
C (0,102)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,103)
81       CONTINUE
C        END BLOCK
      ENDDO
C (0,104)
      IF (JB.GT.0) THEN
C (0,105)
         CALL BCND
      ELSE
C (0,106)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,107)

C   CALCULATE AREA WEIGHT VECTORS AT HALF-TIME STEP.

!     INITIALLY: DO 90
      DO L = L3, L4
C (0,108)
C        BEGIN BLOCK
C (0,109)
         RX = HXI*XH(L)+1.5D0
C (0,110)
         RY = HYI*YH(L)+1.5D0
C (0,111)
         I(L) = RX
C (0,112)
         IF (I(L).LT.1) THEN
C (0,113)
            I(L) = 1
         ELSE
C (0,114)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,115)
         FX(L) = RX-I(L)
C (0,116)
         FXC = 1.D0-FX(L)
C (0,117)
         J = RY
C (0,118)
         FY(L) = RY-J
C (0,119)
         FYC = 1.D0-FY(L)
C (0,120)
         IJ(L) = I(L)+NX2*(J-1)
C (0,121)
         W1(L) = FXC*FYC
C (0,122)
         W2(L) = FX(L)*FYC
C (0,123)
         W3(L) = FXC*FY(L)
C (0,124)
         W4(L) = FX(L)*FY(L)
C (0,125)
90       CONTINUE
C        END BLOCK
      ENDDO
C (0,126)
C   AREA WEIGHT PARTICLES ONTO CURRENT GRIDS
!     INITIALLY: DO 100
      DO L = L3, L4
C (0,127)
C        BEGIN BLOCK
C (0,128)
         QMLT(L) = QMULT
C (0,129)
100      IF (X(L).LT.0.) THEN
C (0,130)
            QMLT(L) = 0.D0
         ELSE
C (0,131)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,132)
!     INITIALLY: DO 110
      DO L = L3, L4
C (0,133)
C        BEGIN BLOCK
C (0,134)
         QMA = QMLT(L)*GA(L)
C (0,135)
         XMULT(L) = QMA*VXH(L)
C (0,136)
         YMULT(L) = QMA*VY(L)
C (0,137)
110      ZMULT(L) = QMA*VZ(L)
C        END BLOCK
      ENDDO
C (0,138)
!     INITIALLY: DO 120
      DO L = L3, L4
C (0,139)
C        BEGIN BLOCK
C (0,140)
         CX(IJ(L)) = CX(IJ(L))+XMULT(L)*W1(L)
C (0,141)
         CX(IJ(L)+1) = CX(IJ(L)+1)+XMULT(L)*W2(L)
C (0,142)
         CX(IJ(L)+NX2) = CX(IJ(L)+NX2)+XMULT(L)*W3(L)
C (0,143)
         CX(IJ(L)+NX2+1) = CX(IJ(L)+NX2+1)+XMULT(L)*W4(L)
C (0,144)
         CY(IJ(L)) = CY(IJ(L))+YMULT(L)*W1(L)
C (0,145)
         CY(IJ(L)+1) = CY(IJ(L)+1)+YMULT(L)*W2(L)
C (0,146)
         CY(IJ(L)+NX2) = CY(IJ(L)+NX2)+YMULT(L)*W3(L)
C (0,147)
         CY(IJ(L)+NX2+1) = CY(IJ(L)+NX2+1)+YMULT(L)*W4(L)
C (0,148)
         CZ(IJ(L)) = CZ(IJ(L))+ZMULT(L)*W1(L)
C (0,149)
         CZ(IJ(L)+1) = CZ(IJ(L)+1)+ZMULT(L)*W2(L)
C (0,150)
         CZ(IJ(L)+NX2) = CZ(IJ(L)+NX2)+ZMULT(L)*W3(L)
C (0,151)
         CZ(IJ(L)+NX2+1) = CZ(IJ(L)+NX2+1)+ZMULT(L)*W4(L)
C (0,152)
120      CONTINUE
C        END BLOCK
      ENDDO
C (0,153)
C    CALCULATE AREA WEIGHT VECTORS AT WHOLE TIME
!     INITIALLY: DO 130
      DO L = L3, L4
C (0,154)
C        BEGIN BLOCK
C (0,155)
         RX = HXI*X(L)+1.5D0
C (0,156)
         RY = HYI*Y(L)+1.5D0
C (0,157)
         I(L) = RX
C (0,158)
         IF (I(L).LT.1) THEN
C (0,159)
            I(L) = 1
         ELSE
C (0,160)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,161)
         FX(L) = RX-I(L)
C (0,162)
         FXC = 1.D0-FX(L)
C (0,163)
         J = RY
C (0,164)
         FY(L) = RY-J
C (0,165)
         FYC = 1.D0-FY(L)
C (0,166)
         IJ(L) = I(L)+NX2*(J-1)
C (0,167)
         W1(L) = FXC*FYC
C (0,168)
         W2(L) = FX(L)*FYC
C (0,169)
         W3(L) = FXC*FY(L)
C (0,170)
         W4(L) = FX(L)*FY(L)
C (0,171)
130      CONTINUE
C        END BLOCK
      ENDDO
C (0,172)
C  AREA WEIGHT PARTICLES ONTO CHARGE GRID
!     INITIALLY: DO 140
      DO L = L3, L4
C (0,173)
C        BEGIN BLOCK
C (0,174)
         Q(IJ(L)) = Q(IJ(L))+W1(L)*QMLT(L)
C (0,175)
         Q(IJ(L)+1) = Q(IJ(L)+1)+W2(L)*QMLT(L)
C (0,176)
         Q(IJ(L)+NX2) = Q(IJ(L)+NX2)+W3(L)*QMLT(L)
C (0,177)
         Q(IJ(L)+NX2+1) = Q(IJ(L)+NX2+1)+W4(L)*QMLT(L)
C (0,178)
C
140      CONTINUE
C        END BLOCK
      ENDDO
C (0,179)
      RETURN
C     END BLOCK
      END

      SUBROUTINE PARMOV
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C       NONRELATIVISTIC ELECTROMAGNETIC PARTICLE MOVER
C REVISION 2.3  86/01/13  22:22:06  DWF
      PARAMETER (NBB=512)
      PARAMETER (NC1 = 78885)
      PARAMETER (N1D=5000)
c specmod
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ

      DIMENSION HHA(NBB),HHASQ(NBB),C(NBB),F(NBB),G(NBB),XMULT(NBB),
     1 YMULT(NBB),ZMULT(NBB),GA(NBB),XH(NBB),YH(NBB),VXH(NBB),DX(NBB)
     2 ,DY(NBB),W1(NBB),W2(NBB),W3(NBB),W4(NBB),IJ(NBB),EXA(NBB),
     3 EYA(NBB),EZA(NBB),BXA(NBB),BYA(NBB),BZA(NBB),H(NBB),QMLT(NBB)
      COMMON /SCR/ SCR(NBB,18)
      COMMON /PARBD1/ JB, LB,IB(NBB),IBEG,IEND
      DIMENSION I(NBB),FX(NBB),FY(NBB),VXA(NBB),VYA(NBB),VZA(NBB)
      EQUIVALENCE (EXA,SCR(1,1)), (EYA,SCR(1,2))
      EQUIVALENCE (EZA,SCR(1,3)), (BXA,SCR(1,4))
      EQUIVALENCE (BYA,SCR(1,5)), (BZA,SCR(1,6))
      EQUIVALENCE (W1,SCR(1,7)), (W2,SCR(1,8))
      EQUIVALENCE (W3,SCR(1,9)), (W4,SCR(1,10))
      EQUIVALENCE (IJ,SCR(1,11)), (GA,SCR(1,12))
      EQUIVALENCE (VXA,SCR(1,13)), (VYA,SCR(1,14))
      EQUIVALENCE (VZA,SCR(1,15)), (XMULT,SCR(1,16))
      EQUIVALENCE (YMULT,SCR(1,17)), (ZMULT,SCR(1,18))
      EQUIVALENCE (EXA,VXH), (W1,HHA), (W2,HHASQ), (W3,C)
      EQUIVALENCE (EYA,XH), (EZA,YH),(BYA,DX), (BZA,DY)
      EQUIVALENCE (W4,F), (IJ,G), (XMULT,H), (BYA,QMLT)
      EQUIVALENCE (VZA,FY)
      EQUIVALENCE (VYA,FX)
      EQUIVALENCE (VXA,I)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      H1 = DT*QMULT/WMULT
C (0,3)
      HH = .5D0*H1
C (0,4)
!     INITIALLY: DO 10
      DO L = L3, L4
C (0,5)
C        BEGIN BLOCK
C (0,6)
         H(L) = H1
C (0,7)
10       IF (X(L).LT.0.D0) THEN
C (0,8)
            H(L) = 0.D0
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,10)
C
C    CALCULATE AREA WEIGHT VECTORS

!     INITIALLY: DO 20
      DO L = L3, L4
C (0,11)
C        BEGIN BLOCK
C (0,12)
         RX = HXI*X(L)+1.5D0
C (0,13)
         RY = HYI*Y(L)+1.5D0
C (0,14)
         I(L) = RX
C (0,15)
         IF (I(L).LT.1) THEN
C (0,16)
            I(L) = 1
         ELSE
C (0,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,18)
         FX(L) = RX-I(L)
C (0,19)
         FXC = 1.D0-FX(L)
C (0,20)
         J = RY
C (0,21)
         FY(L) = RY-J
C (0,22)
         FYC = 1.D0-FY(L)
C (0,23)
         IJ(L) = I(L)+NX2*(J-1)
C (0,24)
         W1(L) = FXC*FYC
C (0,25)
         W2(L) = FX(L)*FYC
C (0,26)
         W3(L) = FXC*FY(L)
C (0,27)
         W4(L) = FX(L)*FY(L)
C (0,28)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)

C    FETCH EX FIELD VECTOR
C    CALCULATE AVERAGE FIELD ON PARTICLE

!     INITIALLY: DO 30
      DO L = L3, L4
C (0,30)
C        BEGIN BLOCK
C (0,31)
         EXA(L) = W1(L)*EX(IJ(L))+W2(L)*EX(IJ(L)+1)+W3(L)*EX(IJ(L)+
     &   NX2)+W4(L)*EX(IJ(L)+NX2+1)
C (0,32)
         EYA(L) = W1(L)*EY(IJ(L))+W2(L)*EY(IJ(L)+1)+W3(L)*EY(IJ(L)+
     &   NX2)+W4(L)*EY(IJ(L)+NX2+1)
C (0,33)
         EZA(L) = W1(L)*EZ(IJ(L))+W2(L)*EZ(IJ(L)+1)+W3(L)*EZ(IJ(L)+
     &   NX2)+W4(L)*EZ(IJ(L)+NX2+1)
C (0,34)
         BXA(L) = W1(L)*BX(IJ(L))+W2(L)*BX(IJ(L)+1)+W3(L)*BX(IJ(L)+
     &   NX2)+W4(L)*BX(IJ(L)+NX2+1)
C (0,35)
         BYA(L) = W1(L)*BY(IJ(L))+W2(L)*BY(IJ(L)+1)+W3(L)*BY(IJ(L)+
     &   NX2)+W4(L)*BY(IJ(L)+NX2+1)
C (0,36)
         BZA(L) = W1(L)*BZ(IJ(L))+W2(L)*BZ(IJ(L)+1)+W3(L)*BZ(IJ(L)+
     &   NX2)+W4(L)*BZ(IJ(L)+NX2+1)
C (0,37)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,38)
C  ADVANCE THREE COMPONENTS OF VELOCITY
!     INITIALLY: DO 40
      DO L = L3, L4
C (0,39)
C        BEGIN BLOCK
C (0,40)
         HHA(L) = HH
C (0,41)
         F(L) = 1.D0-H(L)*HHA(L)*(BXA(L)**2+BYA(L)**2+BZA(L)**2)
C (0,42)
         G(L) = HHA(L)*(VX(L)*BXA(L)+VY(L)*BYA(L)+VZ(L)*BZA(L))
C (0,43)
         VXA(L) = VX(L)+HHA(L)*EXA(L)
C (0,44)
         VYA(L) = VY(L)+HHA(L)*EYA(L)
C (0,45)
         VZA(L) = VZ(L)+HHA(L)*EZA(L)
C (0,46)
         VX(L) = F(L)*VX(L)+H(L)*(EXA(L)+G(L)*BXA(L)+VYA(L)*BZA(L)-
     &   VZA(L)*BYA(L))
C (0,47)
         VY(L) = F(L)*VY(L)+H(L)*(EYA(L)+G(L)*BYA(L)+VZA(L)*BXA(L)-
     &   VXA(L)*BZA(L))
C (0,48)
         VZ(L) = F(L)*VZ(L)+H(L)*(EZA(L)+G(L)*BZA(L)+VXA(L)*BYA(L)-
     &   VYA(L)*BXA(L))
C (0,49)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,50)
C   ADVANCE WHOLE AND HALF-TIME POSITIONS.
!     INITIALLY: DO 50
      DO L = L3, L4
C (0,51)
C        BEGIN BLOCK
C (0,52)
         VXH(L) = VX(L)
C (0,53)
         DX(L) = DT*VX(L)
C (0,54)
         DY(L) = DT*VY(L)
C (0,55)
         IF (X(L).LT.0.) THEN
C (0,56)
            DX(L) = 0.D0
         ELSE
C (0,57)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,58)
         IF (X(L).LT.0.) THEN
C (0,59)
            DY(L) = 0.D0
         ELSE
C (0,60)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,61)
         XH(L) = X(L)+.5D0*DX(L)
C (0,62)
         X(L) = X(L)+DX(L)
C (0,63)
         YH(L) = Y(L)+.5D0*DY(L)
C (0,64)
         Y(L) = Y(L)+DY(L)
C (0,65)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,66)
C   CHECK FOR PARTICLE BOUNDARY CROSSINGS
      JB = 0
C (0,67)
!     INITIALLY: DO 60
      DO L = L3, L4
C (0,68)
C        BEGIN BLOCK
C (0,69)
         IB(L) = 0
C (0,70)
         IF (X(L).GE.XRIGHT) THEN
C (0,71)
            IB(L) = 1
         ELSE
C (0,72)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,73)
         IF (X(L).LT.XLEFT) THEN
C (0,74)
            IB(L) = 1
         ELSE
C (0,75)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,76)
         IF (Y(L).LT.0.) THEN
C (0,77)
            IB(L) = 1
         ELSE
C (0,78)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,79)
         IF (Y(L).GE.YMAX) THEN
C (0,80)
            IB(L) = 1
         ELSE
C (0,81)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,82)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,83)
!     INITIALLY: DO 61
      DO L = L3, L4
C (0,84)
C        BEGIN BLOCK
C (0,85)
         JB = JB+IB(L)
C (0,86)
         IF (IB(L).NE.0) THEN
C (0,87)
            IB(JB) = L
         ELSE
C (0,88)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,89)
61       CONTINUE
C        END BLOCK
      ENDDO
C (0,90)
      IF (JB.GT.0) THEN
C (0,91)
         CALL BCND
      ELSE
C (0,92)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,93)

C   CALCULATE AREA WEIGHT VECTORS A HALF-TIME STEP.

!     INITIALLY: DO 70
      DO L = L3, L4
C (0,94)
C        BEGIN BLOCK
C (0,95)
         RX = HXI*XH(L)+1.5D0
C (0,96)
         RY = HYI*YH(L)+1.5D0
C (0,97)
         I(L) = RX
C (0,98)
         IF (I(L).LT.1) THEN
C (0,99)
            I(L) = 1
         ELSE
C (0,100)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,101)
         FX(L) = RX-I(L)
C (0,102)
         FXC = 1.D0-FX(L)
C (0,103)
         J = RY
C (0,104)
         FY(L) = RY-J
C (0,105)
         FYC = 1.D0-FY(L)
C (0,106)
         IJ(L) = I(L)+NX2*(J-1)
C (0,107)
         W1(L) = FXC*FYC
C (0,108)
         W2(L) = FX(L)*FYC
C (0,109)
         W3(L) = FXC*FY(L)
C (0,110)
         W4(L) = FX(L)*FY(L)
C (0,111)
70       CONTINUE
C        END BLOCK
      ENDDO
C (0,112)

C   AREA WEIGHT PARTICLES ONTO CURRENT GRIDS

!     INITIALLY: DO 80
      DO L = L3, L4
C (0,113)
C        BEGIN BLOCK
C (0,114)
         QMLT(L) = QMULT
C (0,115)
80       IF (X(L).LT.0.) THEN
C (0,116)
            QMLT(L) = 0.D0
         ELSE
C (0,117)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,118)
!     INITIALLY: DO 90
      DO L = L3, L4
C (0,119)
C        BEGIN BLOCK
C (0,120)
         XMULT(L) = QMLT(L)*VXH(L)
C (0,121)
         YMULT(L) = QMLT(L)*VY(L)
C (0,122)
90       ZMULT(L) = QMLT(L)*VZ(L)
C        END BLOCK
      ENDDO
C (0,123)
!     INITIALLY: DO 100
      DO L = L3, L4
C (0,124)
C        BEGIN BLOCK
C (0,125)
         CX(IJ(L)) = CX(IJ(L))+XMULT(L)*W1(L)
C (0,126)
         CX(IJ(L)+1) = CX(IJ(L)+1)+XMULT(L)*W2(L)
C (0,127)
         CX(IJ(L)+NX2) = CX(IJ(L)+NX2)+XMULT(L)*W3(L)
C (0,128)
         CX(IJ(L)+NX2+1) = CX(IJ(L)+NX2+1)+XMULT(L)*W4(L)
C (0,129)
         CY(IJ(L)) = CY(IJ(L))+YMULT(L)*W1(L)
C (0,130)
         CY(IJ(L)+1) = CY(IJ(L)+1)+YMULT(L)*W2(L)
C (0,131)
         CY(IJ(L)+NX2) = CY(IJ(L)+NX2)+YMULT(L)*W3(L)
C (0,132)
         CY(IJ(L)+NX2+1) = CY(IJ(L)+NX2+1)+YMULT(L)*W4(L)
C (0,133)
         CZ(IJ(L)) = CZ(IJ(L))+ZMULT(L)*W1(L)
C (0,134)
         CZ(IJ(L)+1) = CZ(IJ(L)+1)+ZMULT(L)*W2(L)
C (0,135)
         CZ(IJ(L)+NX2) = CZ(IJ(L)+NX2)+ZMULT(L)*W3(L)
C (0,136)
         CZ(IJ(L)+NX2+1) = CZ(IJ(L)+NX2+1)+ZMULT(L)*W4(L)
C (0,137)
100      CONTINUE
C        END BLOCK
      ENDDO
C (0,138)
C    CALCULATE AREA WEIGHT VECTORS AT WHOLE TIME
!     INITIALLY: DO 110
      DO L = L3, L4
C (0,139)
C        BEGIN BLOCK
C (0,140)
         RX = HXI*X(L)+1.5D0
C (0,141)
         RY = HYI*Y(L)+1.5D0
C (0,142)
         I(L) = RX
C (0,143)
         IF (I(L).LT.1) THEN
C (0,144)
            I(L) = 1
         ELSE
C (0,145)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,146)
         FX(L) = RX-I(L)
C (0,147)
         FXC = 1.D0-FX(L)
C (0,148)
         J = RY
C (0,149)
         FY(L) = RY-J
C (0,150)
         FYC = 1.D0-FY(L)
C (0,151)
         IJ(L) = I(L)+NX2*(J-1)
C (0,152)
         W1(L) = FXC*FYC
C (0,153)
         W2(L) = FX(L)*FYC
C (0,154)
         W3(L) = FXC*FY(L)
C (0,155)
         W4(L) = FX(L)*FY(L)
C (0,156)
110      CONTINUE
C        END BLOCK
      ENDDO
C (0,157)
C  AREA WEIGHT PARTICLES ONTO CHARGE GRID
!     INITIALLY: DO 120
      DO L = L3, L4
C (0,158)
C        BEGIN BLOCK
C (0,159)
         Q(IJ(L)) = Q(IJ(L))+W1(L)*QMLT(L)
C (0,160)
         Q(IJ(L)+1) = Q(IJ(L)+1)+W2(L)*QMLT(L)
C (0,161)
         Q(IJ(L)+NX2) = Q(IJ(L)+NX2)+W3(L)*QMLT(L)
C (0,162)
         Q(IJ(L)+NX2+1) = Q(IJ(L)+NX2+1)+W4(L)*QMLT(L)
C (0,163)
C
120      CONTINUE
C        END BLOCK
      ENDDO
C (0,164)
      RETURN
C     END BLOCK
      END

      SUBROUTINE PARMVE
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C       ELECTROSTATIC PARTICLE MOVER
C REVISION 2.3  86/01/13  22:22:06  DWF

      PARAMETER (NBB=512)
      PARAMETER (NC1 = 78885)
      PARAMETER (N1D=5000)

c specmod
      COMMON  PBUF(NBB,5),Q(NC1),TEMP(2*N1D),TBUF(5,NBB)
      COMMON/POTEN1/ SS(NC1),W(NC1),AX(NC1)
      COMMON/POTEN2/ AX1(NC1),AY(NC1),AY1(NC1)
      COMMON/POTEN3/ AZ(NC1),AZ1(NC1)
      COMMON/CURR/ CX(NC1),CY(NC1),CZ(NC1)
      COMMON/EFIELD/EX(NC1),EY(NC1),EZ(NC1),BX(NC1),BY(NC1),BZ(NC1)
      COMMON/QBK/ QBK(NC1)
      DIMENSION X(NBB),Y(NBB),VX(NBB),VY(NBB),VZ(NBB)
      EQUIVALENCE (X(1),PBUF(1,1)),(Y(1),PBUF(1,2)),(VX(1),PBUF(1,3)),
     *  (VY(1),PBUF(1,4)),(VZ(1),PBUF(1,5))

      COMMON/PARCM/NX,NY,L3,L4,KBND,NX2,NX1,NY1,NY2,IBCDL,IBCDR,
     *   IBCDT,IBCDB,KBR,LSTL,LSTR,NINJL,NINJR,KBNDY,INOP,
     *   XMAX,YMAX,DT,QMULT,WMULT,XLEFT,XRIGHT,
     *   HX,HY,HXI,HYI,VMPX1,VMPY1,
     *   VMPZ1,ELOST,QLOSTL,QLOSTR,QLOSTT,QLOSTB,
     *   YTOP,YBOT,DRINJ,DLINJ,VRINJ,VLINJ,
     *   TRPAR,TLPAR,DTLPAR,DTRPAR,QINJL,QINJR,EINJ

      DIMENSION HHA(NBB),HHASQ(NBB),C(NBB),F(NBB),G(NBB),XMULT(NBB),
     1 YMULT(NBB),ZMULT(NBB),GA(NBB),XH(NBB),YH(NBB),VXH(NBB),DX(NBB)
     2 ,DY(NBB),W1(NBB),W2(NBB),W3(NBB),W4(NBB),IJ(NBB),EXA(NBB),
     3 EYA(NBB),EZA(NBB),BXA(NBB),BYA(NBB),BZA(NBB),H(NBB),QMLT(NBB)
      COMMON /SCR/ SCR(NBB,18)
      COMMON /PARBD1/ JB,LB,IB(NBB),IBEG,IEND
      DIMENSION I(NBB),FX(NBB),FY(NBB),VXA(NBB),VYA(NBB),VZA(NBB)
      EQUIVALENCE (EXA,SCR(1,1)), (EYA,SCR(1,2))
      EQUIVALENCE (EZA,SCR(1,3)), (BXA,SCR(1,4))
      EQUIVALENCE (BYA,SCR(1,5)), (BZA,SCR(1,6))
      EQUIVALENCE (W1,SCR(1,7)), (W2,SCR(1,8))
      EQUIVALENCE (W3,SCR(1,9)), (W4,SCR(1,10))
      EQUIVALENCE (IJ,SCR(1,11)), (GA,SCR(1,12))
      EQUIVALENCE (VXA,SCR(1,13)), (VYA,SCR(1,14))
      EQUIVALENCE (VZA,SCR(1,15)), (XMULT,SCR(1,16))
      EQUIVALENCE (YMULT,SCR(1,17)), (ZMULT,SCR(1,18))
      EQUIVALENCE (EXA,VXH), (W1,HHA), (W2,HHASQ), (W3,C)
      EQUIVALENCE (EYA,XH), (EZA,YH), (BYA,DX), (BZA,DY)
      EQUIVALENCE (W4,F), (IJ,G), (XMULT,H), (BYA,QMLT)
      EQUIVALENCE (VZA,FY)
      EQUIVALENCE (VYA,FX)
      EQUIVALENCE (VXA,I)
C (0,1)
C     BEGIN BLOCK
C (0,2)
C
      H1 = DT*QMULT/WMULT
C (0,3)
      HH = .5D0*H1
C (0,4)
!     INITIALLY: DO 10
      DO L = L3, L4
C (0,5)
C        BEGIN BLOCK
C (0,6)
         H(L) = H1
C (0,7)
10       IF (X(L).LT.0.) THEN
C (0,8)
            H(L) = 0.D0
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,10)
C
C    CALCULATE AREA WEIGHT VECTORS
!     INITIALLY: DO 20
      DO L = L3, L4
C (0,11)
C        BEGIN BLOCK
C (0,12)
         RX = HXI*X(L)+1.5D0
C (0,13)
         RY = HYI*Y(L)+1.5D0
C (0,14)
         I(L) = RX
C (0,15)
         IF (I(L).LT.1) THEN
C (0,16)
            I(L) = 1
         ELSE
C (0,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,18)
         FX(L) = RX-I(L)
C (0,19)
         FXC = 1.D0-FX(L)
C (0,20)
         J = RY
C (0,21)
         FY(L) = RY-J
C (0,22)
         FYC = 1.D0-FY(L)
C (0,23)
         IJ(L) = I(L)+NX2*(J-1)
C (0,24)
         W1(L) = FXC*FYC
C (0,25)
         W2(L) = FX(L)*FYC
C (0,26)
         W3(L) = FXC*FY(L)
C (0,27)
         W4(L) = FX(L)*FY(L)
C (0,28)
20       CONTINUE
C        END BLOCK
      ENDDO
C (0,29)

C    FETCH EX FIELD VECTOR
C    CALCULATE AVERAGE FIELD ON PARTICLE

!     INITIALLY: DO 30
      DO L = L3, L4
C (0,30)
C        BEGIN BLOCK
C (0,31)
         EXA(L) = W1(L)*EX(IJ(L))+W2(L)*EX(IJ(L)+1)+W3(L)*EX(IJ(L)+
     &   NX2)+W4(L)*EX(IJ(L)+NX2+1)
C (0,32)
         EYA(L) = W1(L)*EY(IJ(L))+W2(L)*EY(IJ(L)+1)+W3(L)*EY(IJ(L)+
     &   NX2)+W4(L)*EY(IJ(L)+NX2+1)
C (0,33)
30       CONTINUE
C        END BLOCK
      ENDDO
C (0,34)

C  ADVANCE TWO COMPONENTS OF VELOCITY

!     INITIALLY: DO 40
      DO L = L3, L4
C (0,35)
C        BEGIN BLOCK
C (0,36)
         VX(L) = VX(L)+H(L)*EXA(L)
C (0,37)
         VY(L) = VY(L)+H(L)*EYA(L)
C (0,38)
40       CONTINUE
C        END BLOCK
      ENDDO
C (0,39)

C   ADVANCE WHOLE POSITIONS.

!     INITIALLY: DO 50
      DO L = L3, L4
C (0,40)
C        BEGIN BLOCK
C (0,41)
         H(L) = 1.D0
C (0,42)
         IF (X(L).LT.0.D0) THEN
C (0,43)
            H(L) = 0.D0
         ELSE
C (0,44)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,45)
         X(L) = X(L)+DT*VX(L)*H(L)
C (0,46)
         Y(L) = Y(L)+DT*VY(L)*H(L)
C (0,47)
50       CONTINUE
C        END BLOCK
      ENDDO
C (0,48)

C   CHECK FOR PARTICLE BOUNDARY CROSSINGS

      JB = 0
C (0,49)
!     INITIALLY: DO 60
      DO L = L3, L4
C (0,50)
C        BEGIN BLOCK
C (0,51)
         IB(L) = 0
C (0,52)
         IF (X(L).GE.XRIGHT) THEN
C (0,53)
            IB(L) = 1
         ELSE
C (0,54)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,55)
         IF (X(L).LT.XLEFT) THEN
C (0,56)
            IB(L) = 1
         ELSE
C (0,57)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,58)
         IF (Y(L).LT.0.) THEN
C (0,59)
            IB(L) = 1
         ELSE
C (0,60)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,61)
         IF (Y(L).GE.YMAX) THEN
C (0,62)
            IB(L) = 1
         ELSE
C (0,63)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,64)
60       CONTINUE
C        END BLOCK
      ENDDO
C (0,65)
!     INITIALLY: DO 61
      DO L = L3, L4
C (0,66)
C        BEGIN BLOCK
C (0,67)
         JB = JB+IB(L)
C (0,68)
         IF (IB(L).NE.0) THEN
C (0,69)
            IB(JB) = L
         ELSE
C (0,70)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,71)
61       CONTINUE
C        END BLOCK
      ENDDO
C (0,72)
      IF (JB.GT.0) THEN
C (0,73)
         CALL BCND
      ELSE
C (0,74)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,75)

C    CALCULATE AREA WEIGHT VECTORS AT WHOLE TIME

!     INITIALLY: DO 70
      DO L = L3, L4
C (0,76)
C        BEGIN BLOCK
C (0,77)
         QMLT(L) = QMULT
C (0,78)
70       IF (X(L).LT.0) THEN
C (0,79)
            QMLT(L) = 0.D0
         ELSE
C (0,80)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ENDDO
C (0,81)
!     INITIALLY: DO 80
      DO L = L3, L4
C (0,82)
C        BEGIN BLOCK
C (0,83)
         RX = HXI*X(L)+1.5D0
C (0,84)
         RY = HYI*Y(L)+1.5D0
C (0,85)
         I(L) = RX
C (0,86)
         IF (I(L).LT.1) THEN
C (0,87)
            I(L) = 1
         ELSE
C (0,88)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,89)
         FX(L) = RX-I(L)
C (0,90)
         FXC = 1.D0-FX(L)
C (0,91)
         J = RY
C (0,92)
         FY(L) = RY-J
C (0,93)
         FYC = 1.D0-FY(L)
C (0,94)
         IJ(L) = I(L)+NX2*(J-1)
C (0,95)
         W1(L) = FXC*FYC
C (0,96)
         W2(L) = FX(L)*FYC
C (0,97)
         W3(L) = FXC*FY(L)
C (0,98)
         W4(L) = FX(L)*FY(L)
C (0,99)
80       CONTINUE
C        END BLOCK
      ENDDO
C (0,100)
C  AREA WEIGHT PARTICLES ONTO CHARGE GRID
!     INITIALLY: DO 90
      DO L = L3, L4
C (0,101)
C        BEGIN BLOCK
C (0,102)
         Q(IJ(L)) = Q(IJ(L))+W1(L)*QMLT(L)
C (0,103)
         Q(IJ(L)+1) = Q(IJ(L)+1)+W2(L)*QMLT(L)
C (0,104)
         Q(IJ(L)+NX2) = Q(IJ(L)+NX2)+W3(L)*QMLT(L)
C (0,105)
         Q(IJ(L)+NX2+1) = Q(IJ(L)+NX2+1)+W4(L)*QMLT(L)
C (0,106)
C
90       CONTINUE
C        END BLOCK
      ENDDO
C (0,107)
      RETURN
C     END BLOCK
      END

c** for spec benchmark portability, a timer routine is NOT used.
c
	SUBROUTINE JOBTIM(T)
	IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      T = 0.0
C (0,3)
      RETURN
C     END BLOCK
      END
      SUBROUTINE NUMB(NSPEC,NSP)
      INTEGER*4 NLCM
      PARAMETER (NLCM = 3750010)
      INTEGER NSP,NWDSW,NWDSR,NWS,NBUF,NDM,NV,NSP0,ISP0,IWSAVE,IRSAVE
     &,LCMW,LCMR,IFL,NPACK,LCMMAX,ISW,ITIN,ITOUT,ISAVE,I,NWDS,J,K1,K2
     &,NWDS2,K,L,ITMP,NMAX
      INTEGER NSPEC(25),NPSR(1:10),NPSW(1:10)
      REAL*8 BUFFER(1:NLCM),WSAVE,RSAVE
      LOGICAL DSKPRT
      COMMON /BUFDSK/ BUFFER
      COMMON /_ENTRY_PARTBL/ ISAVE,ITOUT,ITIN,ISW,LCMMAX,RSAVE,NPACK,
     &IFL,LCMR,LCMW,WSAVE,IRSAVE,IWSAVE,ISP0,NSP0,NV,NDM,NBUF,NWS,
     &NWDSR,NWDSW,NPSW,NPSR,DSKPRT
C (0,1)
C     BEGIN BLOCK
C (0,2)
99981 CONTINUE
C (0,3)
!     INITIALLY: DO 120
      DO I = 1, NSP0
C (0,4)
120      NSPEC(I) = NPSW(I)/NV
      ENDDO
C (0,5)
      NSP = NSP0
C (0,6)
      RETURN
C     END BLOCK
      END
      SUBROUTINE PUTB(PBUF,NPTS,ISP,SHIFT)
      INTEGER*4 NLCM
      PARAMETER (NLCM = 3750010)
      INTEGER NPTS,ISP,NWDSW,NWDSR,NWS,NBUF,NDM,NV,NSP0,ISP0,IWSAVE,
     &IRSAVE,LCMW,LCMR,IFL,NPACK,LCMMAX,ISW,ITIN,ITOUT,ISAVE,I,NWDS,J
     &,K1,K2,NWDS2,K,L,ITMP,NMAX
      INTEGER NPSR(1:10),NPSW(1:10)
      REAL*8 PBUF(2560),SHIFT(2560),BUFFER(1:NLCM),WSAVE,RSAVE
      LOGICAL DSKPRT
      COMMON /BUFDSK/ BUFFER
      COMMON /_ENTRY_PARTBL/ ISAVE,ITOUT,ITIN,ISW,LCMMAX,RSAVE,NPACK,
     &IFL,LCMR,LCMW,WSAVE,IRSAVE,IWSAVE,ISP0,NSP0,NV,NDM,NBUF,NWS,
     &NWDSR,NWDSW,NPSW,NPSR,DSKPRT
C (0,1)
C     BEGIN BLOCK
C (0,2)
99982 CONTINUE
C (0,3)
      IF (NPTS.GT.NDM) THEN
C (0,4)
         CALL ENDRUN('NPTS')
      ELSE
C (0,5)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,6)
      IFL = 0
C (0,7)
30    CONTINUE
C (0,8)
C
C  WRITE DATA TO DISK
C
      NWDS = NV*NPTS
C (0,9)
      IF (IABS(ISP).NE.ISP0) THEN
C (0,10)
C        BEGIN BLOCK
C (0,11)
         ISP0 = ISP0+1
C (0,12)
         IF (ISP0.GT.NSP0) THEN
C (0,13)
            CALL ENDRUN('BAD ISP')
         ELSE
C (0,14)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,15)
         IF (ISP0.NE.IABS(ISP).AND.IFL.EQ.0) THEN
C (0,16)
            CALL ENDRUN('ORDER')
         ELSE
C (0,17)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (0,18)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,19)
      NPSW(ISP0) = NPSW(ISP0)+NWDS
C (0,20)
      IF (NPTS.GT.0) THEN
C (0,21)
C        BEGIN BLOCK
C (0,22)
         SHIFT(1) = WSAVE
C (0,23)
!     INITIALLY: DO 35
         DO J = 1, NV
C (0,24)
C           BEGIN BLOCK
C (0,25)
            K1 = J+IWSAVE
C (0,26)
            K2 = (J-1)*NDM+1
C (0,27)
!     INITIALLY: DO 35
            DO I = 1, NPTS
C (0,28)
C              BEGIN BLOCK
C (0,29)
               SHIFT(K1) = PBUF(K2)
C (0,30)
               K1 = K1+NV
C (0,31)
35             K2 = K2+1
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDDO
C (0,32)
         NWDS = NWDS+IWSAVE
C (0,33)
         IWSAVE = 0
C (0,34)
         WSAVE = 0.
C (0,35)
         IF (MOD(NWDS, NPACK).NE.0) THEN
C (0,36)
C           BEGIN BLOCK
C (0,37)
            WSAVE = PBUF(NDM*(NV-1)+NPTS)
C (0,38)
            NWDS = NWDS-1
C (0,39)
            IWSAVE = 1
C           END BLOCK
         ELSE
C (0,40)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,41)
         NWDSW = NWDSW+NWDS
C (0,42)
         IF (NWDSW.GT.NWS) THEN
C (0,43)
            CALL ENDRUN('NOSPACE')
         ELSE
C (0,44)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (0,45)
         IF (DSKPRT) THEN
C (0,46)
            CALL PUTDT(ITOUT, SHIFT, NWDS)
         ELSE
C (0,47)
C           BEGIN BLOCK
C (0,48)
            NWDS2 = NWDS/NPACK
C (0,49)
            K = LCMW+NWDS2-LCMR
C (0,50)
            IF (K.GT.0.AND.LCMMAX.GT.LCMR) THEN
C (0,51)
C              BEGIN BLOCK
C (0,52)
C
C       SHIFT BUFFER TO ALLOW FOR THE NEW DATA
C
!     INITIALLY: DO 52
               DO L = LCMMAX, LCMR, -1
C (0,53)
C                 BEGIN BLOCK
C (0,54)
                  BUFFER(L+K) = BUFFER(L)
C (0,55)
52                CONTINUE
C                 END BLOCK
               ENDDO
C (0,56)
               LCMR = LCMR+K
C (0,57)
               LCMMAX = LCMMAX+NWDS2
C              END BLOCK
            ELSE
C (0,58)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,59)
CHW          IF(NPACK.EQ.2)  CALL PACK(SHIFT,BUFFER(LCMW),NWDS)
            IF (NPACK.EQ.1) THEN
C (0,60)
               CALL ECWR(SHIFT, BUFFER(LCMW), NWDS)
            ELSE
C (0,61)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (0,62)
            LCMW = LCMW+NWDS2
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (0,63)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,64)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IFL.EQ.0.AND.NWDSR.GT.0) RETURN
C (4,1)
      IF (NWDSR.GT.0) GOTO 80
C (5,1)
C     BEGIN BLOCK
C (5,2)
      ISP = 0
C (5,3)
      NWDSR = -1
C     END BLOCK
      RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
80    CONTINUE
C (3,3)
C
C  READ DATA FROM DISK
C
      IFL = 1
C (3,4)
      IF (NPSR(ISP0).EQ.0) THEN
C (3,5)
         ISP0 = ISP0+1
      ELSE
C (3,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,7)
      IF (ISP0.GT.NSP0) THEN
C (3,8)
         CALL ENDRUN('ERR READ')
      ELSE
C (3,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,10)
      ISP = ISP0
C (3,11)
      NWDS = MIN0(NBUF, NPSR(ISP0))
C (3,12)
      NPSR(ISP0) = MAX0(0, NPSR(ISP0)-NWDS)
C (3,13)
      IF (NPSR(ISP0).EQ.0) THEN
C (3,14)
         ISP = -ISP
      ELSE
C (3,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,16)
      IF (MOD(NWDS, NPACK).NE.0) THEN
C (3,17)
C        BEGIN BLOCK
C (3,18)
         ISW = -ISW
C (3,19)
         NWDS = NWDS+ISW
C (3,20)
         ISAVE = (ISW+1)/2
C        END BLOCK
      ELSE
C (3,21)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,22)
      NWDSR = NWDSR-NWDS
C (3,23)
      IF (NWDSR.LT.0) THEN
C (3,24)
         CALL ENDRUN('READERR')
      ELSE
C (3,25)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,26)
      IF (DSKPRT) THEN
C (3,27)
         CALL GETDT(ITIN, SHIFT, NWDS)
      ELSE
C (3,28)
C        BEGIN BLOCK
C (3,29)
         NWDS2 = NWDS/NPACK
C (3,30)
CHW          IF(NPACK.EQ.2) CALL UNPACK(BUFFER(LCMR),SHIFT,NWDS2)
         IF (NPACK.EQ.1) THEN
C (3,31)
            CALL ECRD(SHIFT, BUFFER(LCMR), NWDS)
         ELSE
C (3,32)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (3,33)
         LCMR = LCMR+NWDS2
C        END BLOCK
      ENDIF
C (3,34)
      NPTS = NWDS/NV
C (3,35)
      NMAX = NPTS
C (3,36)
!     INITIALLY: DO 110
      DO J = 1, NV
C (3,37)
C        BEGIN BLOCK
C (3,38)
         K1 = J-IRSAVE
C (3,39)
         K2 = 1+(J-1)*NDM
C (3,40)
!     INITIALLY: DO 110
         DO I = 1, NMAX
C (3,41)
C           BEGIN BLOCK
C (3,42)
            PBUF(K2) = SHIFT(K1)
C (3,43)
            K1 = K1+NV
C (3,44)
110         K2 = K2+1
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (3,45)
      IF (IRSAVE.EQ.1) THEN
C (3,46)
         PBUF(1) = RSAVE
      ELSE
C (3,47)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (3,48)
      RSAVE = SHIFT(NWDS)
C (3,49)
      IRSAVE = ISAVE
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END
      SUBROUTINE GETB(PBUF,NPTS,ISP,SHIFT)
      INTEGER*4 NLCM
      PARAMETER (NLCM = 3750010)
      INTEGER NPTS,ISP,NWDSW,NWDSR,NWS,NBUF,NDM,NV,NSP0,ISP0,IWSAVE,
     &IRSAVE,LCMW,LCMR,IFL,NPACK,LCMMAX,ISW,ITIN,ITOUT,ISAVE,I,NWDS,J
     &,K1,K2,NWDS2,K,L,ITMP,NMAX
      INTEGER NPSR(1:10),NPSW(1:10)
      REAL*8 PBUF(2560),SHIFT(2560),BUFFER(1:NLCM),WSAVE,RSAVE
      LOGICAL DSKPRT
      COMMON /BUFDSK/ BUFFER
      COMMON /_ENTRY_PARTBL/ ISAVE,ITOUT,ITIN,ISW,LCMMAX,RSAVE,NPACK,
     &IFL,LCMR,LCMW,WSAVE,IRSAVE,IWSAVE,ISP0,NSP0,NV,NDM,NBUF,NWS,
     &NWDSR,NWDSW,NPSW,NPSR,DSKPRT
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (NWDSR.LT.0) GOTO 70
C (11,1)
      IF (IFL.EQ.0) GOTO 80
C (10,1)
C     BEGIN BLOCK
C (10,2)
      IFL = 1
C (10,3)
30    CONTINUE
C (10,4)
C
C  WRITE DATA TO DISK
C
      NWDS = NV*NPTS
C (10,5)
      IF (IABS(ISP).NE.ISP0) THEN
C (10,6)
C        BEGIN BLOCK
C (10,7)
         ISP0 = ISP0+1
C (10,8)
         IF (ISP0.GT.NSP0) THEN
C (10,9)
            CALL ENDRUN('BAD ISP')
         ELSE
C (10,10)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (10,11)
         IF (ISP0.NE.IABS(ISP).AND.IFL.EQ.0) THEN
C (10,12)
            CALL ENDRUN('ORDER')
         ELSE
C (10,13)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (10,14)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (10,15)
      NPSW(ISP0) = NPSW(ISP0)+NWDS
C (10,16)
      IF (NPTS.GT.0) THEN
C (10,17)
C        BEGIN BLOCK
C (10,18)
         SHIFT(1) = WSAVE
C (10,19)
!     INITIALLY: DO 35
         DO J = 1, NV
C (10,20)
C           BEGIN BLOCK
C (10,21)
            K1 = J+IWSAVE
C (10,22)
            K2 = (J-1)*NDM+1
C (10,23)
!     INITIALLY: DO 35
            DO I = 1, NPTS
C (10,24)
C              BEGIN BLOCK
C (10,25)
               SHIFT(K1) = PBUF(K2)
C (10,26)
               K1 = K1+NV
C (10,27)
35             K2 = K2+1
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDDO
C (10,28)
         NWDS = NWDS+IWSAVE
C (10,29)
         IWSAVE = 0
C (10,30)
         WSAVE = 0.
C (10,31)
         IF (MOD(NWDS, NPACK).NE.0) THEN
C (10,32)
C           BEGIN BLOCK
C (10,33)
            WSAVE = PBUF(NDM*(NV-1)+NPTS)
C (10,34)
            NWDS = NWDS-1
C (10,35)
            IWSAVE = 1
C           END BLOCK
         ELSE
C (10,36)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (10,37)
         NWDSW = NWDSW+NWDS
C (10,38)
         IF (NWDSW.GT.NWS) THEN
C (10,39)
            CALL ENDRUN('NOSPACE')
         ELSE
C (10,40)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (10,41)
         IF (DSKPRT) THEN
C (10,42)
            CALL PUTDT(ITOUT, SHIFT, NWDS)
         ELSE
C (10,43)
C           BEGIN BLOCK
C (10,44)
            NWDS2 = NWDS/NPACK
C (10,45)
            K = LCMW+NWDS2-LCMR
C (10,46)
            IF (K.GT.0.AND.LCMMAX.GT.LCMR) THEN
C (10,47)
C              BEGIN BLOCK
C (10,48)
C
C       SHIFT BUFFER TO ALLOW FOR THE NEW DATA
C
!     INITIALLY: DO 52
               DO L = LCMMAX, LCMR, -1
C (10,49)
C                 BEGIN BLOCK
C (10,50)
                  BUFFER(L+K) = BUFFER(L)
C (10,51)
52                CONTINUE
C                 END BLOCK
               ENDDO
C (10,52)
               LCMR = LCMR+K
C (10,53)
               LCMMAX = LCMMAX+NWDS2
C              END BLOCK
            ELSE
C (10,54)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (10,55)
CHW          IF(NPACK.EQ.2)  CALL PACK(SHIFT,BUFFER(LCMW),NWDS)
            IF (NPACK.EQ.1) THEN
C (10,56)
               CALL ECWR(SHIFT, BUFFER(LCMW), NWDS)
            ELSE
C (10,57)
C              BEGIN BLOCK
C              END BLOCK
            ENDIF
C (10,58)
            LCMW = LCMW+NWDS2
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (10,59)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (9,1)
      IF (IFL.EQ.0.AND.NWDSR.GT.0) RETURN
C (7,1)
      IF (NWDSR.GT.0) GOTO 80
C (8,1)
C     BEGIN BLOCK
C (8,2)
      ISP = 0
C (8,3)
      NWDSR = -1
C     END BLOCK
      RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
80    CONTINUE
C (6,3)
C
C  READ DATA FROM DISK
C
      IFL = 1
C (6,4)
      IF (NPSR(ISP0).EQ.0) THEN
C (6,5)
         ISP0 = ISP0+1
      ELSE
C (6,6)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,7)
      IF (ISP0.GT.NSP0) THEN
C (6,8)
         CALL ENDRUN('ERR READ')
      ELSE
C (6,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,10)
      ISP = ISP0
C (6,11)
      NWDS = MIN0(NBUF, NPSR(ISP0))
C (6,12)
      NPSR(ISP0) = MAX0(0, NPSR(ISP0)-NWDS)
C (6,13)
      IF (NPSR(ISP0).EQ.0) THEN
C (6,14)
         ISP = -ISP
      ELSE
C (6,15)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,16)
      IF (MOD(NWDS, NPACK).NE.0) THEN
C (6,17)
C        BEGIN BLOCK
C (6,18)
         ISW = -ISW
C (6,19)
         NWDS = NWDS+ISW
C (6,20)
         ISAVE = (ISW+1)/2
C        END BLOCK
      ELSE
C (6,21)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,22)
      NWDSR = NWDSR-NWDS
C (6,23)
      IF (NWDSR.LT.0) THEN
C (6,24)
         CALL ENDRUN('READERR')
      ELSE
C (6,25)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,26)
      IF (DSKPRT) THEN
C (6,27)
         CALL GETDT(ITIN, SHIFT, NWDS)
      ELSE
C (6,28)
C        BEGIN BLOCK
C (6,29)
         NWDS2 = NWDS/NPACK
C (6,30)
CHW          IF(NPACK.EQ.2) CALL UNPACK(BUFFER(LCMR),SHIFT,NWDS2)
         IF (NPACK.EQ.1) THEN
C (6,31)
            CALL ECRD(SHIFT, BUFFER(LCMR), NWDS)
         ELSE
C (6,32)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (6,33)
         LCMR = LCMR+NWDS2
C        END BLOCK
      ENDIF
C (6,34)
      NPTS = NWDS/NV
C (6,35)
      NMAX = NPTS
C (6,36)
!     INITIALLY: DO 110
      DO J = 1, NV
C (6,37)
C        BEGIN BLOCK
C (6,38)
         K1 = J-IRSAVE
C (6,39)
         K2 = 1+(J-1)*NDM
C (6,40)
!     INITIALLY: DO 110
         DO I = 1, NMAX
C (6,41)
C           BEGIN BLOCK
C (6,42)
            PBUF(K2) = SHIFT(K1)
C (6,43)
            K1 = K1+NV
C (6,44)
110         K2 = K2+1
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDDO
C (6,45)
      IF (IRSAVE.EQ.1) THEN
C (6,46)
         PBUF(1) = RSAVE
      ELSE
C (6,47)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,48)
      RSAVE = SHIFT(NWDS)
C (6,49)
      IRSAVE = ISAVE
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
70    CONTINUE
C (2,3)
C
C   REWIND FILES TO BEGIN CYCLE
C
      IF (IWSAVE.NE.0) THEN
C (2,4)
C        BEGIN BLOCK
C (2,5)
         SHIFT(1) = WSAVE
C (2,6)
         NWDSW = NWDSW+2
C (2,7)
         IF (DSKPRT) THEN
C (2,8)
            CALL PUTDT(ITOUT, SHIFT, 2)
         ELSE
C (2,9)
CHW              CALL PACK(SHIFT,BUFFER(LCMW),2)
            LCMW = LCMW+1
         ENDIF
C        END BLOCK
      ELSE
C (2,10)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (2,11)
      IWSAVE = 0
C (2,12)
      IRSAVE = 0
C (2,13)
      ISAVE = 0
C (2,14)
      ISW = -1
C (2,15)
!     INITIALLY: DO 75
      DO I = 1, NSP0
C (2,16)
C        BEGIN BLOCK
C (2,17)
         NPSR(I) = NPSW(I)
C (2,18)
75       NPSW(I) = 0
C        END BLOCK
      ENDDO
C (2,19)
      NWDSR = NWDSW
C (2,20)
      NWDSW = 0
C (2,21)
      LCMR = 1
C (2,22)
      LCMMAX = MAX0(LCMW, LCMMAX)
C (2,23)
      LCMW = 1
C (2,24)
      ISP0 = 1
C (2,25)
      IF (DSKPRT) THEN
C (2,26)
C        BEGIN BLOCK
C (2,27)
         CALL CLRDT(ITIN)
C (2,28)
         CALL REWDT(ITOUT)
C (2,29)
         ITMP = ITIN
C (2,30)
         ITIN = ITOUT
C (2,31)
         ITOUT = ITMP
C        END BLOCK
      ELSE
C (2,32)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (3,1)
      IF (NWDSR.EQ.0) THEN
      ELSE
         GOTO 80
      ENDIF
C (4,1)
C     BEGIN BLOCK
C (4,2)
      ISP = -ISP0
C (4,3)
      NWDSR = 0
C (4,4)
      NPTS = 0
C (4,5)
      IFL = 1
C     END BLOCK
C (5,1)
      RETURN
C     END UNSTRUCTURED
      END
      SUBROUTINE SETB(NTOT,NSP,NDIM,KGROUP)
      INTEGER*4 NLCM
      PARAMETER (NLCM = 3750010)
      INTEGER NTOT,NSP,NDIM,KGROUP,NWDSW,NWDSR,NWS,NBUF,NDM,NV,NSP0,
     &ISP0,IWSAVE,IRSAVE,LCMW,LCMR,IFL,NPACK,LCMMAX,ISW,ITIN,ITOUT,
     &ISAVE,I,NWDS,J,K1,K2,NWDS2,K,L,ITMP,NMAX
      INTEGER NPSR(1:10),NPSW(1:10)
      REAL*8 BUFFER(1:NLCM),WSAVE,RSAVE
      LOGICAL DSKPRT
      COMMON /BUFDSK/ BUFFER
      COMMON /_ENTRY_PARTBL/ ISAVE,ITOUT,ITIN,ISW,LCMMAX,RSAVE,NPACK,
     &IFL,LCMR,LCMW,WSAVE,IRSAVE,IWSAVE,ISP0,NSP0,NV,NDM,NBUF,NWS,
     &NWDSR,NWDSW,NPSW,NPSR,DSKPRT
C (0,1)
C     BEGIN BLOCK
C (0,2)
99984 CONTINUE
C (0,3)
CHW   CALL GETFL(KFL)
CHW   WRITE(9,*) ' KFL IS ',KFL
CHW   CALL MEMADJ(2510000 ,IERR)
CHW   IBP = KFL + 100
CHW   WRITE(9,*) ' IBP IS ',IBP
CHW   CALL GETFL(KFL)
CHW   WRITE(9,*) ' NEW KFL IS ',KFL
      NWDSW = 0
C (0,4)
      NWDSR = 0
C (0,5)
      NWS = 0
C (0,6)
      NBUF = KGROUP*NDIM
C (0,7)
      NDM = NDIM
C (0,8)
      NV = KGROUP
C (0,9)
      NSP0 = NSP
C (0,10)
      IF (NSP.GT.10) THEN
C (0,11)
         CALL ENDRUN('NSP')
      ELSE
C (0,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,13)
      ISP0 = 0
C (0,14)
      NWS = NTOT*NV
C (0,15)
!     INITIALLY: DO 10
      DO I = 1, NSP0
C (0,16)
C        BEGIN BLOCK
C (0,17)
         NPSR(I) = 0
C (0,18)
         NPSW(I) = 0
C (0,19)
10       CONTINUE
C        END BLOCK
      ENDDO
C (0,20)
      IWSAVE = 0
C (0,21)
      IRSAVE = 0
C (0,22)
      RSAVE = 0.D0
C (0,23)
      WSAVE = 0.D0
C (0,24)
C
C  NWS IS THE MAXIMUM NUMBER OF WORDS REQUIRED TO STORE PARTICLES
C
      DSKPRT = NWS/NPACK.GT.NLCM
C (0,25)
      IF (.NOT.DSKPRT) THEN
C (0,26)
         LCMW = 1
      ELSE
C (0,27)
C        BEGIN BLOCK
C (0,28)
CHW          IF(NPACK.EQ.2) CALL PAKDTBL(0)
CHW          CALL SETDTBL(BUFFER,-NLCM/2,54,'DAT',1000000,1)
         CALL SUDTBL(ITIN, ITOUT, NWS)
CHW          CALL SUDTBL (ITOUT,NWS)
C        END BLOCK
      ENDIF
C (0,30)
      RETURN
C     END BLOCK
      END
      SUBROUTINE PARTBL(NSPEC,PBUF,SHIFT)
      INTEGER*4 NLCM
      PARAMETER (NLCM = 3750010)
      INTEGER NWDSW,NWDSR,NWS,NBUF,NDM,NV,NSP0,ISP0,IWSAVE,IRSAVE,
     &LCMW,LCMR,IFL,NPACK,LCMMAX,ISW,ITIN,ITOUT,ISAVE,I,NWDS,J,K1,K2,
     &NWDS2,K,L,ITMP,NMAX
      INTEGER NSPEC(I_PIPS_PARTBL_NSPEC),NPSR(1:10),NPSW(1:10)
      REAL*8 PBUF(I_PIPS_PARTBL_PBUF),SHIFT(I_PIPS_PARTBL_SHIFT),
     &BUFFER(1:NLCM),WSAVE,RSAVE
      LOGICAL DSKPRT
      COMMON /BUFDSK/ BUFFER
      COMMON /_ENTRY_PARTBL/ ISAVE,ITOUT,ITIN,ISW,LCMMAX,RSAVE,NPACK,
     &IFL,LCMR,LCMW,WSAVE,IRSAVE,IWSAVE,ISP0,NSP0,NV,NDM,NBUF,NWS,
     &NWDSR,NWDSW,NPSW,NPSR,DSKPRT
      DATA NPACK /1/
C (0,1)
      INTEGER*8 I_PIPS_PARTBL_NSPEC
      COMMON /PIPS_PARTBL_NSPEC/ I_PIPS_PARTBL_NSPEC
      INTEGER*8 I_PIPS_PARTBL_PBUF
      COMMON /PIPS_PARTBL_PBUF/ I_PIPS_PARTBL_PBUF
      INTEGER*8 I_PIPS_PARTBL_SHIFT
      COMMON /PIPS_PARTBL_SHIFT/ I_PIPS_PARTBL_SHIFT
C 8-Aug-91 Intergraph; stop warnings for SETB's formals; PARTBL is never called.
      RETURN
      END

      SUBROUTINE SUDTBL(IU1,IU2,NWS)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER ( N = 20 )
      PARAMETER (IT1 = 1)
      PARAMETER(IT2 = IT1 + 1)
c specmod
	DATA LOC/1/
C (0,1)
C     BEGIN BLOCK
C (0,2)
100   FORMAT(' DISK UNIT ',I5,' CREATED')
C (0,3)
101   FORMAT(' UNIT ',I5,'  IS ON THE SSD')
C (0,4)
102   FORMAT(' BUFFER CAPACITY OF ',I4,' TIMES BATCH SIZE')
C (0,5)
      IU1 = IT1
C (0,6)
      IU2 = IT2
C (0,7)
C      OPEN(IU1,STATUS='NEW')
C      OPEN(IU2,STATUS='NEW')
C     CALL ASSIGN(IU1,'HAT101',0)
C     CALL ASSIGN(IU2,'HAT102',0)
C     CALL FAMSIZ(IU1,77777000B)
C     CALL FAMSIZ(IU2,77777000B)
C     CALL SETSSD(IU1)
CHW   CALL SETDISK(IU1,1)
CHW   CALL SETDISK(IU2,7)
C     CALL SETSSD(IU2)
C     CALL SSDINQ(IU1,LOC)
      IF (LOC.EQ.1) THEN
C (0,8)
         WRITE (9, 101) IU1
      ELSE
C (0,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,10)
C     CALL SSDINQ(IU2,LOC)
      IF (LOC.EQ.1) THEN
C (0,11)
         WRITE (9, 101) IU2
      ELSE
C (0,12)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,13)
      WRITE (9, 100) IU1
C (0,14)
      WRITE (9, 100) IU2
C (0,15)
      WRITE (9, 102) N
C (0,16)
      RETURN
C     END BLOCK
      END

      SUBROUTINE PUTDT(ITOUT,LC,NWDS)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C    PUT NWDS OF DATA FROM ARRAY LC INTO I/O BUFFER;
C    WRITE BUFFER TO DISK WHEN FULL.
C  N:  SIZE OF BUFFER IN RELATION TO SIZE OF LC.
      PARAMETER (N = 20)
      COMMON /H/ NWR(500)
      DOUBLE PRECISION LC(1280)
      DIMENSION TBUF1(N * 1280), TBUF2(N * 1280)
C NPUTS:  NUMBER OF CALLS TO THIS ROUTINE SINCE LAST PHYSICAL DISK WRITE.
C NWTW1:  NUMBER OF WORDS TO WRITE FROM BUFFER 1.
C NWTW2:  NUMBER OF WORDS TO WRITE FROM BUFFER 2.
C NDUMPS:  NUMBER OF PHYSICAL DISK WRITES CARRIED OUT.
      SAVE NPUTS, NWTW1, NWTW2, NDUMPS, TBUF1, TBUF2
      DATA NPUTS /0/, NDUMPS /0/, NWTW1 /0/, NWTW2 /0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      NPUTS = NPUTS+1
C (0,3)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (NPUTS.GT.N) GOTO 25
C (8,1)
C     BEGIN BLOCK
C (8,2)
!     INITIALLY: DO 10
      DO I = 1, NWDS
C (8,3)
C        BEGIN BLOCK
C (8,4)
         J = I+(NPUTS-1)*1280
C (8,5)
         TBUF1(J) = LC(I)
C (8,6)
10       CONTINUE
C        END BLOCK
      ENDDO
C (8,7)
      NWTW1 = NWTW1+NWDS
C     END BLOCK
C (7,1)
      IF (NPUTS.NE.N.AND.NWDS.EQ.1280) RETURN
C (6,1)
C     BEGIN BLOCK
C (6,2)
      NDUMPS = NDUMPS+1
C (6,3)
      NWR(NDUMPS) = NWTW1
C (6,4)
C      IF (UNIT(ITOUT)) 20,99,99
20    CONTINUE
C (6,5)
C     WRITE(9,*) 'PUT1: ',NWTW1,' WORDS LOC: ',(NDUMPS-1)*(1280*N),
C    5  ' NDUMPS: ',NDUMPS,' NWDS: ',NWDS
C     CALL WDISK(ITOUT,TBUF1,NWTW1,(NDUMPS-1)*(1280 * N))
C       WRITE(ITOUT,(TBUF1(I),I=1,NWTW1))
      NWTW1 = 0
C (6,6)
      IF (NWDS.NE.1280) THEN
C (6,7)
         NDUMPS = 0
      ELSE
C (6,8)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
      RETURN
C (2,1)
C     BEGIN BLOCK
C (2,2)
25    CONTINUE
C (2,3)
!     INITIALLY: DO 30
      DO I = 1, NWDS
C (2,4)
C        BEGIN BLOCK
C (2,5)
         J = I+(NPUTS-N-1)*1280
C (2,6)
         TBUF2(J) = LC(I)
C (2,7)
30       CONTINUE
C        END BLOCK
      ENDDO
C (2,8)
      NWTW2 = NWTW2+NWDS
C     END BLOCK
C (3,1)
      IF (NPUTS.NE.2*N.AND.NWDS.EQ.1280) RETURN
C (5,1)
C     BEGIN BLOCK
C (5,2)
      NDUMPS = NDUMPS+1
C (5,3)
      NWR(NDUMPS) = NWTW2
C (5,4)
C      IF (UNIT(ITOUT)) 40,99,99
40    CONTINUE
C (5,5)
C     WRITE(9,*) 'PUT1: ',NWTW2,' WORDS LOC: ',(NDUMPS-1)*(1280*N),
C    5  ' NDUMPS: ',NDUMPS,' NWDS: ',NWDS
C     CALL WDISK(ITOUT,TBUF2,NWTW2,(NDUMPS-1)*(1280 * N))
C     WRITE(ITOUT,(TBUF1(I),I=1,NWTW1))
      NWTW2 = 0
C (5,6)
      NPUTS = 0
C (5,7)
      IF (NWDS.NE.1280) THEN
C (5,8)
         NDUMPS = 0
      ELSE
C (5,9)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (4,1)
C99    CALL ENDRUN(' WDISK ')
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE GETDT(ITIN,LC,NWDS)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
555   FORMAT(1X,'SPEC_ERROR: CALL TO GETDT!')
C (0,3)
C   READ DATA INTO BUFFERS FROM DISK UNIT ITIN;
C   TRANSFER NWDS FROM BUFFERS TO ARRAY LC.
C N:  SIZE OF BUFFERS IN RELATION TO SIZE OF LC.
C     (Funtionality removed for SPEC95)
      WRITE (6, 555) 
C (0,4)
      STOP
C (0,5)
      RETURN
C     END BLOCK
      END

      SUBROUTINE ENDRUN(H)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      CHARACTER*80 H
C (0,1)
C     BEGIN BLOCK
C (0,2)
10    FORMAT(///,'RUN TERMINATED --',A10)
C (0,3)
      WRITE (9, 10) H
C (0,4)
      STOP
C (0,5)
      RETURN
C     END BLOCK
      END

      SUBROUTINE CLRDT(IT)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C (0,1)
C     BEGIN BLOCK
C (0,2)
c      IF (UNIT(IT)) 10,99,99
CHW   REWIND(IT)
10    CONTINUE
C (0,3)
C99    CALL ENDRUN( 'CLRDTBL')
      RETURN
C     END BLOCK
      END

      SUBROUTINE REWDT(IT)
C (0,1)
C     BEGIN BLOCK
C (0,2)
c      IF (UNIT(IT)) 10,99,99
CHW   REWIND(IT)
10    CONTINUE
C (0,3)
C99    CALL ENDRUN( 'CLRDTBL')
      RETURN
C     END BLOCK
      END

      SUBROUTINE RFFTB(N,R,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       R(512)       ,WSAVE(I_PIPS_RFFTB_WSAVE)
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.1) RETURN
C (3,1)
      CALL RFFTB1(N, R, WSAVE, WSAVE(N+1), WSAVE(2*N+1))
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE RFFTB1(N,C,CH,WA,FAC)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(I_PIPS_RFFTB_WSAVE)      ,C(512)       ,WA(-N+I
     x _PIPS_RFFTB_WSAVE)      ,FAC(-2*N+I_PIPS_RFFTB_WSAVE)
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADB2_WA1
      COMMON /PIPS_RADB2_WA1/ I_PIPS_RADB2_WA1
      INTEGER*8 I_PIPS_RADB3_WA1
      COMMON /PIPS_RADB3_WA1/ I_PIPS_RADB3_WA1
      INTEGER*8 I_PIPS_RADB3_WA2
      COMMON /PIPS_RADB3_WA2/ I_PIPS_RADB3_WA2
      INTEGER*8 I_PIPS_RADB4_WA1
      COMMON /PIPS_RADB4_WA1/ I_PIPS_RADB4_WA1
      INTEGER*8 I_PIPS_RADB4_WA2
      COMMON /PIPS_RADB4_WA2/ I_PIPS_RADB4_WA2
      INTEGER*8 I_PIPS_RADB4_WA3
      COMMON /PIPS_RADB4_WA3/ I_PIPS_RADB4_WA3
      INTEGER*8 I_PIPS_RADB5_WA1
      COMMON /PIPS_RADB5_WA1/ I_PIPS_RADB5_WA1
      INTEGER*8 I_PIPS_RADB5_WA2
      COMMON /PIPS_RADB5_WA2/ I_PIPS_RADB5_WA2
      INTEGER*8 I_PIPS_RADB5_WA3
      COMMON /PIPS_RADB5_WA3/ I_PIPS_RADB5_WA3
      INTEGER*8 I_PIPS_RADB5_WA4
      COMMON /PIPS_RADB5_WA4/ I_PIPS_RADB5_WA4
      INTEGER*8 I_PIPS_RADBG_WA
      COMMON /PIPS_RADBG_WA/ I_PIPS_RADBG_WA
C     BEGIN BLOCK
C (0,2)
      NF = FAC(2)
C (0,3)
      NA = 0
C (0,4)
      L1 = 1
C (0,5)
      IW = 1
C (0,6)
!     INITIALLY: DO 116
      DO K1 = 1, NF
C (0,7)
C        BEGIN BLOCK
C (0,8)
         IP = FAC(K1+2)
C (0,9)
         L2 = IP*L1
C (0,10)
         IDO = N/L2
C (0,11)
         IDL1 = IDO*L1
C (0,12)
         IF (IP.EQ.4) THEN
C (0,13)
C           BEGIN BLOCK
C (0,14)
            IX2 = IW+IDO
C (0,15)
            IX3 = IX2+IDO
C (0,16)
            IF (NA.EQ.0) THEN
C (0,17)
      I_PIPS_RADB4_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB4_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
      I_PIPS_RADB4_WA3 = -N+I_PIPS_RFFTB_WSAVE-(IX3-1)
               CALL RADB4(IDO, L1, C, CH, WA(IW), WA(IX2), WA(IX3))
            ELSE
C (0,18)
      I_PIPS_RADB4_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB4_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
      I_PIPS_RADB4_WA3 = -N+I_PIPS_RFFTB_WSAVE-(IX3-1)
               CALL RADB4(IDO, L1, CH, C, WA(IW), WA(IX2), WA(IX3))
            ENDIF
C (0,19)
            NA = 1-NA
C           END BLOCK
         ELSE
C (0,20)
            IF (IP.EQ.2) THEN
C (0,21)
C              BEGIN BLOCK
C (0,22)
               IF (NA.EQ.0) THEN
C (0,23)
      I_PIPS_RADB2_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
                  CALL RADB2(IDO, L1, C, CH, WA(IW))
               ELSE
C (0,24)
      I_PIPS_RADB2_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
                  CALL RADB2(IDO, L1, CH, C, WA(IW))
               ENDIF
C (0,25)
               NA = 1-NA
C              END BLOCK
            ELSE
C (0,26)
               IF (IP.EQ.3) THEN
C (0,27)
C                 BEGIN BLOCK
C (0,28)
                  IX2 = IW+IDO
C (0,29)
                  IF (NA.EQ.0) THEN
C (0,30)
      I_PIPS_RADB3_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB3_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
                     CALL RADB3(IDO, L1, C, CH, WA(IW), WA(IX2))
                  ELSE
C (0,31)
      I_PIPS_RADB3_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB3_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
                     CALL RADB3(IDO, L1, CH, C, WA(IW), WA(IX2))
                  ENDIF
C (0,32)
                  NA = 1-NA
C                 END BLOCK
               ELSE
C (0,33)
                  IF (IP.EQ.5) THEN
C (0,34)
C                    BEGIN BLOCK
C (0,35)
                     IX2 = IW+IDO
C (0,36)
                     IX3 = IX2+IDO
C (0,37)
                     IX4 = IX3+IDO
C (0,38)
                     IF (NA.EQ.0) THEN
C (0,39)
      I_PIPS_RADB5_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB5_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
      I_PIPS_RADB5_WA3 = -N+I_PIPS_RFFTB_WSAVE-(IX3-1)
      I_PIPS_RADB5_WA4 = -N+I_PIPS_RFFTB_WSAVE-(IX4-1)
                        CALL RADB5(IDO, L1, C, CH, WA(IW), WA(IX2), 
     &                  WA(IX3), WA(IX4))
                     ELSE
C (0,40)
      I_PIPS_RADB5_WA1 = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
      I_PIPS_RADB5_WA2 = -N+I_PIPS_RFFTB_WSAVE-(IX2-1)
      I_PIPS_RADB5_WA3 = -N+I_PIPS_RFFTB_WSAVE-(IX3-1)
      I_PIPS_RADB5_WA4 = -N+I_PIPS_RFFTB_WSAVE-(IX4-1)
                        CALL RADB5(IDO, L1, CH, C, WA(IW), WA(IX2), 
     &                  WA(IX3), WA(IX4))
                     ENDIF
C (0,41)
                     NA = 1-NA
C                    END BLOCK
                  ELSE
C (0,42)
C                    BEGIN BLOCK
C (0,43)
                     IF (NA.EQ.0) THEN
C (0,44)
      I_PIPS_RADBG_WA = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
                        CALL RADBG(IDO, IP, L1, IDL1, C, C, C, CH, CH
     &                  , WA(IW))
                     ELSE
C (0,45)
      I_PIPS_RADBG_WA = -N+I_PIPS_RFFTB_WSAVE-(IW-1)
                        CALL RADBG(IDO, IP, L1, IDL1, CH, CH, CH, C, 
     &                  C, WA(IW))
                     ENDIF
C (0,46)
                     IF (IDO.EQ.1) THEN
C (0,47)
                        NA = 1-NA
                     ELSE
C (0,48)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
C (0,49)
         L1 = L2
C (0,50)
         IW = IW+(IP-1)*IDO
C (0,51)
116      CONTINUE
C        END BLOCK
      ENDDO
C (0,52)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (NA.EQ.0) RETURN
C (3,1)
!     INITIALLY: DO 117
      DO I = 1, N
C (3,2)
C        BEGIN BLOCK
C (3,3)
         C(I) = CH(I)
C (3,4)
117      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RFFTF(N,R,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       R(I_PIPS_RFFTF_R)       ,WSAVE(I_PIPS_RFFTF_WSAVE)
     x 
C (0,1)
      INTEGER*8 I_PIPS_COST_X
      COMMON /PIPS_COST_X/ I_PIPS_COST_X
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_COST_WSAVE
      COMMON /PIPS_COST_WSAVE/ I_PIPS_COST_WSAVE
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.1) RETURN
C (3,1)
      CALL RFFTF1(N, R, WSAVE, WSAVE(N+1), WSAVE(2*N+1))
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE RFFTF1(N,C,CH,WA,FAC)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(I_PIPS_RFFTF_WSAVE)      ,C(I_PIPS_RFFTF_R)    
     x    ,WA(-N+I_PIPS_RFFTF_WSAVE)      ,FAC(-2*N+I_PIPS_RFFTF_WSAVE)
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADF2_WA1
      COMMON /PIPS_RADF2_WA1/ I_PIPS_RADF2_WA1
      INTEGER*8 I_PIPS_RADF3_WA1
      COMMON /PIPS_RADF3_WA1/ I_PIPS_RADF3_WA1
      INTEGER*8 I_PIPS_RADF3_WA2
      COMMON /PIPS_RADF3_WA2/ I_PIPS_RADF3_WA2
      INTEGER*8 I_PIPS_RADF4_WA1
      COMMON /PIPS_RADF4_WA1/ I_PIPS_RADF4_WA1
      INTEGER*8 I_PIPS_RADF4_WA2
      COMMON /PIPS_RADF4_WA2/ I_PIPS_RADF4_WA2
      INTEGER*8 I_PIPS_RADF4_WA3
      COMMON /PIPS_RADF4_WA3/ I_PIPS_RADF4_WA3
      INTEGER*8 I_PIPS_RADF5_WA1
      COMMON /PIPS_RADF5_WA1/ I_PIPS_RADF5_WA1
      INTEGER*8 I_PIPS_RADF5_WA2
      COMMON /PIPS_RADF5_WA2/ I_PIPS_RADF5_WA2
      INTEGER*8 I_PIPS_RADF5_WA3
      COMMON /PIPS_RADF5_WA3/ I_PIPS_RADF5_WA3
      INTEGER*8 I_PIPS_RADF5_WA4
      COMMON /PIPS_RADF5_WA4/ I_PIPS_RADF5_WA4
      INTEGER*8 I_PIPS_RADFG_WA
      COMMON /PIPS_RADFG_WA/ I_PIPS_RADFG_WA
C     BEGIN BLOCK
C (0,2)
      NF = FAC(2)
C (0,3)
      NA = 1
C (0,4)
      L2 = N
C (0,5)
      IW = N
C (0,6)
!     INITIALLY: DO 111
      DO K1 = 1, NF
C (0,7)
C        BEGIN BLOCK
C (0,8)
         KH = NF-K1
C (0,9)
         IP = FAC(KH+3)
C (0,10)
         L1 = L2/IP
C (0,11)
         IDO = N/L2
C (0,12)
         IDL1 = IDO*L1
C (0,13)
         IW = IW-(IP-1)*IDO
C (0,14)
         NA = 1-NA
C (0,15)
         IF (IP.EQ.4) THEN
C (0,16)
C           BEGIN BLOCK
C (0,17)
            IX2 = IW+IDO
C (0,18)
            IX3 = IX2+IDO
C (0,19)
            IF (NA.EQ.0) THEN
C (0,20)
      I_PIPS_RADF4_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF4_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
      I_PIPS_RADF4_WA3 = -N+I_PIPS_RFFTF_WSAVE-(IX3-1)
               CALL RADF4(IDO, L1, C, CH, WA(IW), WA(IX2), WA(IX3))
            ELSE
C (0,21)
      I_PIPS_RADF4_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF4_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
      I_PIPS_RADF4_WA3 = -N+I_PIPS_RFFTF_WSAVE-(IX3-1)
               CALL RADF4(IDO, L1, CH, C, WA(IW), WA(IX2), WA(IX3))
            ENDIF
C           END BLOCK
         ELSE
C (0,22)
            IF (IP.EQ.2) THEN
C (0,23)
               IF (NA.EQ.0) THEN
C (0,24)
      I_PIPS_RADF2_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
                  CALL RADF2(IDO, L1, C, CH, WA(IW))
               ELSE
C (0,25)
      I_PIPS_RADF2_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
                  CALL RADF2(IDO, L1, CH, C, WA(IW))
               ENDIF
            ELSE
C (0,26)
               IF (IP.EQ.3) THEN
C (0,27)
C                 BEGIN BLOCK
C (0,28)
                  IX2 = IW+IDO
C (0,29)
                  IF (NA.EQ.0) THEN
C (0,30)
      I_PIPS_RADF3_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF3_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
                     CALL RADF3(IDO, L1, C, CH, WA(IW), WA(IX2))
                  ELSE
C (0,31)
      I_PIPS_RADF3_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF3_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
                     CALL RADF3(IDO, L1, CH, C, WA(IW), WA(IX2))
                  ENDIF
C                 END BLOCK
               ELSE
C (0,32)
                  IF (IP.EQ.5) THEN
C (0,33)
C                    BEGIN BLOCK
C (0,34)
                     IX2 = IW+IDO
C (0,35)
                     IX3 = IX2+IDO
C (0,36)
                     IX4 = IX3+IDO
C (0,37)
                     IF (NA.EQ.0) THEN
C (0,38)
      I_PIPS_RADF5_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF5_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
      I_PIPS_RADF5_WA3 = -N+I_PIPS_RFFTF_WSAVE-(IX3-1)
      I_PIPS_RADF5_WA4 = -N+I_PIPS_RFFTF_WSAVE-(IX4-1)
                        CALL RADF5(IDO, L1, C, CH, WA(IW), WA(IX2), 
     &                  WA(IX3), WA(IX4))
                     ELSE
C (0,39)
      I_PIPS_RADF5_WA1 = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
      I_PIPS_RADF5_WA2 = -N+I_PIPS_RFFTF_WSAVE-(IX2-1)
      I_PIPS_RADF5_WA3 = -N+I_PIPS_RFFTF_WSAVE-(IX3-1)
      I_PIPS_RADF5_WA4 = -N+I_PIPS_RFFTF_WSAVE-(IX4-1)
                        CALL RADF5(IDO, L1, CH, C, WA(IW), WA(IX2), 
     &                  WA(IX3), WA(IX4))
                     ENDIF
C                    END BLOCK
                  ELSE
C (0,40)
C                    BEGIN BLOCK
C (0,41)
                     IF (IDO.EQ.1) THEN
C (0,42)
                        NA = 1-NA
                     ELSE
C (0,43)
C                       BEGIN BLOCK
C                       END BLOCK
                     ENDIF
C (0,44)
                     IF (NA.EQ.0) THEN
C (0,45)
C                       BEGIN BLOCK
C (0,46)
      I_PIPS_RADFG_WA = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
                        CALL RADFG(IDO, IP, L1, IDL1, C, C, C, CH, CH
     &                  , WA(IW))
C (0,47)
                        NA = 1
C                       END BLOCK
                     ELSE
C (0,48)
C                       BEGIN BLOCK
C (0,49)
      I_PIPS_RADFG_WA = -N+I_PIPS_RFFTF_WSAVE-(IW-1)
                        CALL RADFG(IDO, IP, L1, IDL1, CH, CH, CH, C, 
     &                  C, WA(IW))
C (0,50)
                        NA = 0
C                       END BLOCK
                     ENDIF
C                    END BLOCK
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
C (0,51)
         L2 = L1
C (0,52)
111      CONTINUE
C        END BLOCK
      ENDDO
C (0,53)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (NA.EQ.1) RETURN
C (3,1)
!     INITIALLY: DO 112
      DO I = 1, N
C (3,2)
C        BEGIN BLOCK
C (3,3)
         C(I) = CH(I)
C (3,4)
112      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RFFTI(N,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WSAVE(I_PIPS_RFFTI_WSAVE)
C (0,1)
      INTEGER*8 I_PIPS_COSTI_WSAVE
      COMMON /PIPS_COSTI_WSAVE/ I_PIPS_COSTI_WSAVE
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.1) RETURN
C (3,1)
      CALL RFFTI1(N, WSAVE(N+1), WSAVE(2*N+1))
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE RFFTI1(N,WA,FAC)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WA(-N+I_PIPS_RFFTI_WSAVE)      ,FAC(-2*N+I_PIPS_RF
     x FTI_WSAVE)    ,NTRYH(4)
      DATA NTRYH(1),NTRYH(2),NTRYH(3),NTRYH(4)/4,2,3,5/
C (0,1)
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN BLOCK
C (0,2)
      NL = N
C (0,3)
      NF = 0
C (0,4)
      J = 0
C (0,5)
C     BEGIN UNSTRUCTURED
C (1,1)
C     BEGIN BLOCK
C (1,2)
101   J = J+1
C (1,3)
      IF (J.LE.4) THEN
C (1,4)
         NTRY = NTRYH(J)
      ELSE
C (1,5)
         NTRY = NTRY+2
      ENDIF
C     END BLOCK
C (2,1)
C     BEGIN BLOCK
C (2,2)
104   NQ = NL/NTRY
C (2,3)
      NR = NL-NTRY*NQ
C     END BLOCK
C (3,1)
      IF (NR.NE.0) GOTO 101
C (4,1)
C     BEGIN BLOCK
C (4,2)
      NF = NF+1
C (4,3)
      FAC(NF+2) = NTRY
C (4,4)
      NL = NQ
C (4,5)
      IF (NTRY.EQ.2.AND.NF.NE.1) THEN
C (4,6)
C        BEGIN BLOCK
C (4,7)
!     INITIALLY: DO 106
         DO I = 2, NF
C (4,8)
C           BEGIN BLOCK
C (4,9)
            IB = NF-I+2
C (4,10)
            FAC(IB+2) = FAC(IB+1)
C (4,11)
106         CONTINUE
C           END BLOCK
         ENDDO
C (4,12)
         FAC(3) = 2
C        END BLOCK
      ELSE
C (4,13)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C     END BLOCK
C (5,1)
      IF (NL.NE.1) GOTO 104
C (6,1)
C     BEGIN BLOCK
C (6,2)
      FAC(1) = N
C (6,3)
      FAC(2) = NF
C (6,4)
      TPI = 6.28318530717959
C (6,5)
      ARGH = TPI/DBLE(N)
C (6,6)
      IS = 0
C (6,7)
      NFM1 = NF-1
C (6,8)
      L1 = 1
C     END BLOCK
C (7,1)
      IF (NFM1.EQ.0) RETURN
C (9,1)
!     INITIALLY: DO 110
      DO K1 = 1, NFM1
C (9,2)
C        BEGIN BLOCK
C (9,3)
         IP = FAC(K1+2)
C (9,4)
         LD = 0
C (9,5)
         L2 = L1*IP
C (9,6)
         IDO = N/L2
C (9,7)
         IPM = IP-1
C (9,8)
!     INITIALLY: DO 109
         DO J = 1, IPM
C (9,9)
C           BEGIN BLOCK
C (9,10)
            LD = LD+L1
C (9,11)
            I = IS
C (9,12)
            ARGLD = DBLE(LD)*ARGH
C (9,13)
            FI = 0.D0
C (9,14)
!     INITIALLY: DO 108
            DO II = 3, IDO, 2
C (9,15)
C              BEGIN BLOCK
C (9,16)
               I = I+2
C (9,17)
               FI = FI+1.D0
C (9,18)
               ARG = FI*ARGLD
C (9,19)
               WA(I-1) = DCOS(ARG)
C (9,20)
               WA(I) = DSIN(ARG)
C (9,21)
108            CONTINUE
C              END BLOCK
            ENDDO
C (9,22)
            IS = IS+IDO
C (9,23)
109         CONTINUE
C           END BLOCK
         ENDDO
C (9,24)
         L1 = L2
C (9,25)
110      CONTINUE
C        END BLOCK
      ENDDO
C (8,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE COSQB(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,WSAVE(1551)
      DATA TSQRT2 /2.82842712474619D0/
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.LT.2) GOTO 99975
C (5,1)
      IF (N.EQ.2) GOTO 99974
C (4,1)
      CALL COSQB1(N, X, WSAVE, WSAVE(N+1))
      RETURN
99974 CONTINUE
C (6,1)
C     BEGIN BLOCK
C (6,2)
      X1 = 4.*(X(1)+X(2))
C (6,3)
      X(2) = TSQRT2*(X(1)-X(2))
C (6,4)
      X(1) = X1
C     END BLOCK
      RETURN
99975 CONTINUE
C (2,1)
      X(1) = 4.*X(1)
C (3,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE COSQB1(N,X,W,XH)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,W(1551)       ,XH(-N+1551)
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
C     BEGIN BLOCK
C (0,2)
      NS2 = (N+1)/2
C (0,3)
      NP2 = N+2
C (0,4)
!     INITIALLY: DO 101
      DO I = 3, N, 2
C (0,5)
C        BEGIN BLOCK
C (0,6)
         XIM1 = X(I-1)+X(I)
C (0,7)
         X(I) = X(I)-X(I-1)
C (0,8)
         X(I-1) = XIM1
C (0,9)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      X(1) = X(1)+X(1)
C (0,11)
      MODN = MOD(N, 2)
C (0,12)
      IF (MODN.EQ.0) THEN
C (0,13)
         X(N) = X(N)+X(N)
      ELSE
C (0,14)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,15)
      I_PIPS_RFFTB_WSAVE = -N+1551
      CALL RFFTB(N, X, XH)
C (0,16)
!     INITIALLY: DO 102
      DO K = 2, NS2
C (0,17)
C        BEGIN BLOCK
C (0,18)
         KC = NP2-K
C (0,19)
         XH(K) = W(K-1)*X(KC)+W(KC-1)*X(K)
C (0,20)
         XH(KC) = W(K-1)*X(K)-W(KC-1)*X(KC)
C (0,21)
102      CONTINUE
C        END BLOCK
      ENDDO
C (0,22)
      IF (MODN.EQ.0) THEN
C (0,23)
         X(NS2+1) = W(NS2)*(X(NS2+1)+X(NS2+1))
      ELSE
C (0,24)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,25)
!     INITIALLY: DO 103
      DO K = 2, NS2
C (0,26)
C        BEGIN BLOCK
C (0,27)
         KC = NP2-K
C (0,28)
         X(K) = XH(K)+XH(KC)
C (0,29)
         X(KC) = XH(K)-XH(KC)
C (0,30)
103      CONTINUE
C        END BLOCK
      ENDDO
C (0,31)
      X(1) = X(1)+X(1)
C (0,32)
      RETURN
C     END BLOCK
      END

      SUBROUTINE COSQF(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,WSAVE(1551)
      DATA SQRT2 /1.4142135623731D0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (N.EQ.2) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         TSQX = SQRT2*X(2)
C (0,5)
         X(2) = X(1)-TSQX
C (0,6)
         X(1) = X(1)+TSQX
C        END BLOCK
      ELSE
C (0,7)
         IF (N.GT.2) THEN
C (0,8)
            CALL COSQF1(N, X, WSAVE, WSAVE(N+1))
         ELSE
C (0,9)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ENDIF
C (0,10)
      RETURN
C     END BLOCK
      END

      SUBROUTINE COSQF1(N,X,W,XH)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,W(1551)       ,XH(-N+1551)
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
C     BEGIN BLOCK
C (0,2)
      NS2 = (N+1)/2
C (0,3)
      NP2 = N+2
C (0,4)
!     INITIALLY: DO 101
      DO K = 2, NS2
C (0,5)
C        BEGIN BLOCK
C (0,6)
         KC = NP2-K
C (0,7)
         XH(K) = X(K)+X(KC)
C (0,8)
         XH(KC) = X(K)-X(KC)
C (0,9)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,10)
      MODN = MOD(N, 2)
C (0,11)
      IF (MODN.EQ.0) THEN
C (0,12)
         XH(NS2+1) = X(NS2+1)+X(NS2+1)
      ELSE
C (0,13)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,14)
!     INITIALLY: DO 102
      DO K = 2, NS2
C (0,15)
C        BEGIN BLOCK
C (0,16)
         KC = NP2-K
C (0,17)
         X(K) = W(K-1)*XH(KC)+W(KC-1)*XH(K)
C (0,18)
         X(KC) = W(K-1)*XH(K)-W(KC-1)*XH(KC)
C (0,19)
102      CONTINUE
C        END BLOCK
      ENDDO
C (0,20)
      IF (MODN.EQ.0) THEN
C (0,21)
         X(NS2+1) = W(NS2)*XH(NS2+1)
      ELSE
C (0,22)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,23)
      I_PIPS_RFFTF_R = 512
      I_PIPS_RFFTF_WSAVE = -N+1551
      CALL RFFTF(N, X, XH)
C (0,24)
!     INITIALLY: DO 103
      DO I = 3, N, 2
C (0,25)
C        BEGIN BLOCK
C (0,26)
         XIM1 = X(I-1)-X(I)
C (0,27)
         X(I) = X(I-1)+X(I)
C (0,28)
         X(I-1) = XIM1
C (0,29)
103      CONTINUE
C        END BLOCK
      ENDDO
C (0,30)
      RETURN
C     END BLOCK
      END

      SUBROUTINE COSQI(N,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WSAVE(1551)
      DATA PIH /1.57079632679491D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN BLOCK
C (0,2)
      DT = PIH/DBLE(N)
C (0,3)
      FK = 0.D0
C (0,4)
!     INITIALLY: DO 101
      DO K = 1, N
C (0,5)
C        BEGIN BLOCK
C (0,6)
         FK = FK+1.D0
C (0,7)
         WSAVE(K) = DCOS(FK*DT)
C (0,8)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,9)
      I_PIPS_RFFTI_WSAVE = 1551-(N+1-1)
      CALL RFFTI(N, WSAVE(N+1))
C (0,10)
      RETURN
C     END BLOCK
      END

      SUBROUTINE COST(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(I_PIPS_COST_X)       ,WSAVE(I_PIPS_COST_WSAVE)
C (0,1)
      INTEGER*8 I_PIPS_COST_X
      COMMON /PIPS_COST_X/ I_PIPS_COST_X
      INTEGER*8 I_PIPS_COST_WSAVE
      COMMON /PIPS_COST_WSAVE/ I_PIPS_COST_WSAVE
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
C     BEGIN BLOCK
C (0,2)
      NM1 = N-1
C (0,3)
      NP1 = N+1
C (0,4)
      NS2 = N/2
C (0,5)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.2) GOTO 99973
C (5,1)
      IF (N.EQ.3) GOTO 99972
C (4,1)
      IF (N.GT.3) THEN
C (4,2)
C        BEGIN BLOCK
C (4,3)
         C1 = X(1)-X(N)
C (4,4)
         X(1) = X(1)+X(N)
C (4,5)
!     INITIALLY: DO 104
         DO K = 2, NS2
C (4,6)
C           BEGIN BLOCK
C (4,7)
            KC = NP1-K
C (4,8)
            T1 = X(K)+X(KC)
C (4,9)
            T2 = X(K)-X(KC)
C (4,10)
            C1 = C1+WSAVE(KC)*T2
C (4,11)
            T2 = WSAVE(K)*T2
C (4,12)
            X(K) = T1-T2
C (4,13)
            X(KC) = T1+T2
C (4,14)
104         CONTINUE
C           END BLOCK
         ENDDO
C (4,15)
         MODN = MOD(N, 2)
C (4,16)
         IF (MODN.NE.0) THEN
C (4,17)
            X(NS2+1) = X(NS2+1)+X(NS2+1)
         ELSE
C (4,18)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C (4,19)
      I_PIPS_RFFTF_R = I_PIPS_COST_X
      I_PIPS_RFFTF_WSAVE = I_PIPS_COST_WSAVE-(N+1-1)
         CALL RFFTF(NM1, X, WSAVE(N+1))
C (4,20)
         XIM2 = X(2)
C (4,21)
         X(2) = C1
C (4,22)
!     INITIALLY: DO 105
         DO I = 4, N, 2
C (4,23)
C           BEGIN BLOCK
C (4,24)
            XI = X(I)
C (4,25)
            X(I) = X(I-2)-X(I-1)
C (4,26)
            X(I-1) = XIM2
C (4,27)
            XIM2 = XI
C (4,28)
105         CONTINUE
C           END BLOCK
         ENDDO
C (4,29)
         IF (MODN.NE.0) THEN
C (4,30)
            X(N) = XIM2
         ELSE
C (4,31)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
C        END BLOCK
      ELSE
C (4,32)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
      RETURN
99972 CONTINUE
C (6,1)
C     BEGIN BLOCK
C (6,2)
      X1P3 = X(1)+X(3)
C (6,3)
      TX2 = X(2)+X(2)
C (6,4)
      X(2) = X(1)-X(3)
C (6,5)
      X(1) = X1P3+TX2
C (6,6)
      X(3) = X1P3-TX2
C     END BLOCK
      RETURN
99973 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
      X1H = X(1)+X(2)
C (2,3)
      X(2) = X(1)-X(2)
C (2,4)
      X(1) = X1H
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE COSTI(N,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WSAVE(I_PIPS_COSTI_WSAVE)
      DATA PI /3.14159265358979D0/
C (0,1)
      INTEGER*8 I_PIPS_COSTI_WSAVE
      COMMON /PIPS_COSTI_WSAVE/ I_PIPS_COSTI_WSAVE
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.LE.3) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NM1 = N-1
C (3,3)
      NP1 = N+1
C (3,4)
      NS2 = N/2
C (3,5)
      DT = PI/DBLE(NM1)
C (3,6)
      FK = 0.D0
C (3,7)
!     INITIALLY: DO 101
      DO K = 2, NS2
C (3,8)
C        BEGIN BLOCK
C (3,9)
         KC = NP1-K
C (3,10)
         FK = FK+1.D0
C (3,11)
         WSAVE(K) = 2.D0*DSIN(FK*DT)
C (3,12)
         WSAVE(KC) = 2.D0*DCOS(FK*DT)
C (3,13)
101      CONTINUE
C        END BLOCK
      ENDDO
C (3,14)
      I_PIPS_RFFTI_WSAVE = I_PIPS_COSTI_WSAVE-(N+1-1)
      CALL RFFTI(NM1, WSAVE(N+1))
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE SINQB(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,WSAVE(1551)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (N.EQ.1) THEN
C (0,3)
         X(1) = 4.D0*X(1)
      ELSE
C (0,4)
C        BEGIN BLOCK
C (0,5)
         NS2 = N/2
C (0,6)
!     INITIALLY: DO 102
         DO K = 2, N, 2
C (0,7)
C           BEGIN BLOCK
C (0,8)
            X(K) = -X(K)
C (0,9)
102         CONTINUE
C           END BLOCK
         ENDDO
C (0,10)
         CALL COSQB(N, X, WSAVE)
C (0,11)
!     INITIALLY: DO 103
         DO K = 1, NS2
C (0,12)
C           BEGIN BLOCK
C (0,13)
            KC = N-K
C (0,14)
            XHOLD = X(K)
C (0,15)
            X(K) = X(KC+1)
C (0,16)
            X(KC+1) = XHOLD
C (0,17)
103         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDIF
C (0,18)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SINQF(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(512)       ,WSAVE(1551)
C (0,1)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.EQ.1) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NS2 = N/2
C (3,3)
!     INITIALLY: DO 101
      DO K = 1, NS2
C (3,4)
C        BEGIN BLOCK
C (3,5)
         KC = N-K
C (3,6)
         XHOLD = X(K)
C (3,7)
         X(K) = X(KC+1)
C (3,8)
         X(KC+1) = XHOLD
C (3,9)
101      CONTINUE
C        END BLOCK
      ENDDO
C (3,10)
      CALL COSQF(N, X, WSAVE)
C (3,11)
!     INITIALLY: DO 102
      DO K = 2, N, 2
C (3,12)
C        BEGIN BLOCK
C (3,13)
         X(K) = -X(K)
C (3,14)
102      CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE SINQI(N,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WSAVE(1551)
C (0,1)
C     BEGIN BLOCK
C (0,2)
      CALL COSQI(N, WSAVE)
C (0,3)
      RETURN
C     END BLOCK
      END

      SUBROUTINE SINT(N,X,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       X(I_PIPS_SINT_X)       ,WSAVE(I_PIPS_SINT_WSAVE)
      DATA SQRT3 /1.73205080756888D0/
C (0,1)
      INTEGER*8 I_PIPS_SINT_X
      COMMON /PIPS_SINT_X/ I_PIPS_SINT_X
      INTEGER*8 I_PIPS_SINT_WSAVE
      COMMON /PIPS_SINT_WSAVE/ I_PIPS_SINT_WSAVE
      INTEGER*8 I_PIPS_RFFTF_R
      COMMON /PIPS_RFFTF_R/ I_PIPS_RFFTF_R
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.LT.2) GOTO 99946
C (7,1)
      IF (N.EQ.2) GOTO 99945
C (6,1)
C     BEGIN BLOCK
C (6,2)
      NP1 = N+1
C (6,3)
      NS2 = N/2
C (6,4)
      WSAVE(1) = 0.D0
C (6,5)
      KW = NP1
C (6,6)
!     INITIALLY: DO 104
      DO K = 1, NS2
C (6,7)
C        BEGIN BLOCK
C (6,8)
1        KW = KW+1
C (6,9)
         KC = NP1-K
C (6,10)
         T1 = X(K)-X(KC)
C (6,11)
         T2 = WSAVE(KW)*(X(K)+X(KC))
C (6,12)
         WSAVE(K+1) = T1+T2
C (6,13)
         WSAVE(KC+1) = T2-T1
C (6,14)
104      CONTINUE
C        END BLOCK
      ENDDO
C (6,15)
      MODN = MOD(N, 2)
C (6,16)
      IF (MODN.NE.0) THEN
C (6,17)
         WSAVE(NS2+2) = 4.*X(NS2+1)
      ELSE
C (6,18)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (6,19)
      NF = NP1+NS2+1
C (6,20)
      I_PIPS_RFFTF_R = I_PIPS_SINT_WSAVE
      I_PIPS_RFFTF_WSAVE = I_PIPS_SINT_WSAVE-(NF-1)
      CALL RFFTF(NP1, WSAVE, WSAVE(NF))
C (6,21)
      X(1) = .5D0*WSAVE(1)
C (6,22)
!     INITIALLY: DO 105
      DO I = 3, N, 2
C (6,23)
C        BEGIN BLOCK
C (6,24)
         X(I-1) = -WSAVE(I)
C (6,25)
         X(I) = X(I-2)+WSAVE(I-1)
C (6,26)
105      CONTINUE
C        END BLOCK
      ENDDO
C     END BLOCK
C (4,1)
      IF (MODN.NE.0) RETURN
C (5,1)
      X(N) = -WSAVE(N+1)
      RETURN
99945 CONTINUE
C (8,1)
C     BEGIN BLOCK
C (8,2)
      XH = SQRT3*(X(1)+X(2))
C (8,3)
      X(2) = SQRT3*(X(1)-X(2))
C (8,4)
      X(1) = XH
C     END BLOCK
      RETURN
99946 CONTINUE
C (2,1)
      X(1) = X(1)+X(1)
C (3,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE SINTI(N,WSAVE)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       WSAVE(I_PIPS_SINTI_WSAVE)
      DATA PI /3.14159265358979D0/
C (0,1)
      INTEGER*8 I_PIPS_SINTI_WSAVE
      COMMON /PIPS_SINTI_WSAVE/ I_PIPS_SINTI_WSAVE
      INTEGER*8 I_PIPS_RFFTI_WSAVE
      COMMON /PIPS_RFFTI_WSAVE/ I_PIPS_RFFTI_WSAVE
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (N.LE.1) RETURN
C (3,1)
C     BEGIN BLOCK
C (3,2)
      NP1 = N+1
C (3,3)
      NS2 = N/2
C (3,4)
      DT = PI/DBLE(NP1)
C (3,5)
      KS = N+2
C (3,6)
      KF = KS+NS2-1
C (3,7)
      FK = 0.D0
C (3,8)
!     INITIALLY: DO 101
      DO K = KS, KF
C (3,9)
C        BEGIN BLOCK
C (3,10)
         FK = FK+1.D0
C (3,11)
         WSAVE(K) = 2.D0*DSIN(FK*DT)
C (3,12)
101      CONTINUE
C        END BLOCK
      ENDDO
C (3,13)
      I_PIPS_RFFTI_WSAVE = I_PIPS_SINTI_WSAVE-(KF+1-1)
      CALL RFFTI(NP1, WSAVE(KF+1))
C     END BLOCK
C (2,1)
      RETURN
C     END UNSTRUCTURED
      END

      SUBROUTINE RADB2(IDO,L1,CC,CH,WA1)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,2,L1)           ,CH(IDO,L1,2)           ,
     1                WA1(I_PIPS_RADB2_WA1)
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADB2_WA1
      COMMON /PIPS_RADB2_WA1/ I_PIPS_RADB2_WA1
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         CH(1,K,1) = CC(1,1,K)+CC(IDO,2,K)
C (0,5)
         CH(1,K,2) = CC(1,1,K)-CC(IDO,2,K)
C (0,6)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.GT.2) GOTO 99959
C (6,1)
      IF (IDO.LT.2) RETURN
99958 CONTINUE
C (5,1)
!     INITIALLY: DO 106
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
         CH(IDO,K,1) = CC(IDO,1,K)+CC(IDO,1,K)
C (5,4)
         CH(IDO,K,2) = -(CC(1,2,K)+CC(1,2,K))
C (5,5)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99959 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
      IDP2 = IDO+2
C (2,3)
      IF ((IDO-1)/2.GE.L1) THEN
C (2,4)
!     INITIALLY: DO 104
         DO K = 1, L1
C (2,5)
C           BEGIN BLOCK
C (2,6)
!     INITIALLY: DO 103
            DO I = 3, IDO, 2
C (2,7)
C              BEGIN BLOCK
C (2,8)
               IC = IDP2-I
C (2,9)
               CH(I-1,K,1) = CC(I-1,1,K)+CC(IC-1,2,K)
C (2,10)
               TR2 = CC(I-1,1,K)-CC(IC-1,2,K)
C (2,11)
               CH(I,K,1) = CC(I,1,K)-CC(IC,2,K)
C (2,12)
               TI2 = CC(I,1,K)+CC(IC,2,K)
C (2,13)
               CH(I-1,K,2) = WA1(I-2)*TR2-WA1(I-1)*TI2
C (2,14)
               CH(I,K,2) = WA1(I-2)*TI2+WA1(I-1)*TR2
C (2,15)
103            CONTINUE
C              END BLOCK
            ENDDO
C (2,16)
104         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (2,17)
!     INITIALLY: DO 110
108      DO I = 3, IDO, 2
C (2,18)
C           BEGIN BLOCK
C (2,19)
            IC = IDP2-I
C (2,20)
!     INITIALLY: DO 109
            DO K = 1, L1
C (2,21)
C              BEGIN BLOCK
C (2,22)
               CH(I-1,K,1) = CC(I-1,1,K)+CC(IC-1,2,K)
C (2,23)
               TR2 = CC(I-1,1,K)-CC(IC-1,2,K)
C (2,24)
               CH(I,K,1) = CC(I,1,K)-CC(IC,2,K)
C (2,25)
               TI2 = CC(I,1,K)+CC(IC,2,K)
C (2,26)
               CH(I-1,K,2) = WA1(I-2)*TR2-WA1(I-1)*TI2
C (2,27)
               CH(I,K,2) = WA1(I-2)*TI2+WA1(I-1)*TR2
C (2,28)
109            CONTINUE
C              END BLOCK
            ENDDO
C (2,29)
110         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C     END BLOCK
C (3,1)
      IF (MOD(IDO, 2).EQ.1) THEN
      ELSE
         GOTO 99958
      ENDIF
C (4,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADB3(IDO,L1,CC,CH,WA1,WA2)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,3,L1)           ,CH(IDO,L1,3)           ,
     1                WA1(I_PIPS_RADB3_WA1)     ,WA2(I_PIPS_RADB3_WA2)
      DATA TAUR,TAUI /-.5D0,.866025403784439D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADB3_WA1
      COMMON /PIPS_RADB3_WA1/ I_PIPS_RADB3_WA1
      INTEGER*8 I_PIPS_RADB3_WA2
      COMMON /PIPS_RADB3_WA2/ I_PIPS_RADB3_WA2
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         TR2 = CC(IDO,2,K)+CC(IDO,2,K)
C (0,5)
         CR2 = CC(1,1,K)+TAUR*TR2
C (0,6)
         CH(1,K,1) = CC(1,1,K)+TR2
C (0,7)
         CI3 = TAUI*(CC(1,3,K)+CC(1,3,K))
C (0,8)
         CH(1,K,2) = CR2-CI3
C (0,9)
         CH(1,K,3) = CR2+CI3
C (0,10)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,11)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.EQ.1) RETURN
C (6,1)
      IDP2 = IDO+2
C (4,1)
      IF ((IDO-1)/2.GE.L1) GOTO 99957
C (3,1)
!     INITIALLY: DO 106
      DO I = 3, IDO, 2
C (3,2)
C        BEGIN BLOCK
C (3,3)
         IC = IDP2-I
C (3,4)
!     INITIALLY: DO 105
         DO K = 1, L1
C (3,5)
C           BEGIN BLOCK
C (3,6)
            TR2 = CC(I-1,3,K)+CC(IC-1,2,K)
C (3,7)
            CR2 = CC(I-1,1,K)+TAUR*TR2
C (3,8)
            CH(I-1,K,1) = CC(I-1,1,K)+TR2
C (3,9)
            TI2 = CC(I,3,K)-CC(IC,2,K)
C (3,10)
            CI2 = CC(I,1,K)+TAUR*TI2
C (3,11)
            CH(I,K,1) = CC(I,1,K)+TI2
C (3,12)
            CR3 = TAUI*(CC(I-1,3,K)-CC(IC-1,2,K))
C (3,13)
            CI3 = TAUI*(CC(I,3,K)+CC(IC,2,K))
C (3,14)
            DR2 = CR2-CI3
C (3,15)
            DR3 = CR2+CI3
C (3,16)
            DI2 = CI2+CR3
C (3,17)
            DI3 = CI2-CR3
C (3,18)
            CH(I-1,K,2) = WA1(I-2)*DR2-WA1(I-1)*DI2
C (3,19)
            CH(I,K,2) = WA1(I-2)*DI2+WA1(I-1)*DR2
C (3,20)
            CH(I-1,K,3) = WA2(I-2)*DR3-WA2(I-1)*DI3
C (3,21)
            CH(I,K,3) = WA2(I-2)*DI3+WA2(I-1)*DR3
C (3,22)
105         CONTINUE
C           END BLOCK
         ENDDO
C (3,23)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99957 CONTINUE
C (5,1)
!     INITIALLY: DO 103
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
!     INITIALLY: DO 102
         DO I = 3, IDO, 2
C (5,4)
C           BEGIN BLOCK
C (5,5)
            IC = IDP2-I
C (5,6)
            TR2 = CC(I-1,3,K)+CC(IC-1,2,K)
C (5,7)
            CR2 = CC(I-1,1,K)+TAUR*TR2
C (5,8)
            CH(I-1,K,1) = CC(I-1,1,K)+TR2
C (5,9)
            TI2 = CC(I,3,K)-CC(IC,2,K)
C (5,10)
            CI2 = CC(I,1,K)+TAUR*TI2
C (5,11)
            CH(I,K,1) = CC(I,1,K)+TI2
C (5,12)
            CR3 = TAUI*(CC(I-1,3,K)-CC(IC-1,2,K))
C (5,13)
            CI3 = TAUI*(CC(I,3,K)+CC(IC,2,K))
C (5,14)
            DR2 = CR2-CI3
C (5,15)
            DR3 = CR2+CI3
C (5,16)
            DI2 = CI2+CR3
C (5,17)
            DI3 = CI2-CR3
C (5,18)
            CH(I-1,K,2) = WA1(I-2)*DR2-WA1(I-1)*DI2
C (5,19)
            CH(I,K,2) = WA1(I-2)*DI2+WA1(I-1)*DR2
C (5,20)
            CH(I-1,K,3) = WA2(I-2)*DR3-WA2(I-1)*DI3
C (5,21)
            CH(I,K,3) = WA2(I-2)*DI3+WA2(I-1)*DR3
C (5,22)
102         CONTINUE
C           END BLOCK
         ENDDO
C (5,23)
103      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADB4(IDO,L1,CC,CH,WA1,WA2,WA3)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,4,L1)           ,CH(IDO,L1,4)           ,
     1                WA1(I_PIPS_RADB4_WA1)     ,WA2(I_PIPS_RADB4_WA2)  
     x    ,WA3(I_PIPS_RADB4_WA3)
      DATA SQRT2 /1.414213562373095D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADB4_WA1
      COMMON /PIPS_RADB4_WA1/ I_PIPS_RADB4_WA1
      INTEGER*8 I_PIPS_RADB4_WA2
      COMMON /PIPS_RADB4_WA2/ I_PIPS_RADB4_WA2
      INTEGER*8 I_PIPS_RADB4_WA3
      COMMON /PIPS_RADB4_WA3/ I_PIPS_RADB4_WA3
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         TR1 = CC(1,1,K)-CC(IDO,4,K)
C (0,5)
         TR2 = CC(1,1,K)+CC(IDO,4,K)
C (0,6)
         TR3 = CC(IDO,2,K)+CC(IDO,2,K)
C (0,7)
         TR4 = CC(1,3,K)+CC(1,3,K)
C (0,8)
         CH(1,K,1) = TR2+TR3
C (0,9)
         CH(1,K,2) = TR1-TR4
C (0,10)
         CH(1,K,3) = TR2-TR3
C (0,11)
         CH(1,K,4) = TR1+TR4
C (0,12)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,13)
C     BEGIN UNSTRUCTURED
C (1,1)
C      IF (IDO-2) 107,105,102
      IF (IDO.GT.2) GOTO 99956
C (6,1)
      IF (IDO.LT.2) RETURN
99955 CONTINUE
C (5,1)
!     INITIALLY: DO 106
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
         TI1 = CC(1,2,K)+CC(1,4,K)
C (5,4)
         TI2 = CC(1,4,K)-CC(1,2,K)
C (5,5)
         TR1 = CC(IDO,1,K)-CC(IDO,3,K)
C (5,6)
         TR2 = CC(IDO,1,K)+CC(IDO,3,K)
C (5,7)
         CH(IDO,K,1) = TR2+TR2
C (5,8)
         CH(IDO,K,2) = SQRT2*(TR1-TI1)
C (5,9)
         CH(IDO,K,3) = TI2+TI2
C (5,10)
         CH(IDO,K,4) = -SQRT2*(TR1+TI1)
C (5,11)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99956 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
      IDP2 = IDO+2
C (2,3)
      IF ((IDO-1)/2.GE.L1) THEN
C (2,4)
!     INITIALLY: DO 104
         DO K = 1, L1
C (2,5)
C           BEGIN BLOCK
C (2,6)
!     INITIALLY: DO 103
            DO I = 3, IDO, 2
C (2,7)
C              BEGIN BLOCK
C (2,8)
               IC = IDP2-I
C (2,9)
               TI1 = CC(I,1,K)+CC(IC,4,K)
C (2,10)
               TI2 = CC(I,1,K)-CC(IC,4,K)
C (2,11)
               TI3 = CC(I,3,K)-CC(IC,2,K)
C (2,12)
               TR4 = CC(I,3,K)+CC(IC,2,K)
C (2,13)
               TR1 = CC(I-1,1,K)-CC(IC-1,4,K)
C (2,14)
               TR2 = CC(I-1,1,K)+CC(IC-1,4,K)
C (2,15)
               TI4 = CC(I-1,3,K)-CC(IC-1,2,K)
C (2,16)
               TR3 = CC(I-1,3,K)+CC(IC-1,2,K)
C (2,17)
               CH(I-1,K,1) = TR2+TR3
C (2,18)
               CR3 = TR2-TR3
C (2,19)
               CH(I,K,1) = TI2+TI3
C (2,20)
               CI3 = TI2-TI3
C (2,21)
               CR2 = TR1-TR4
C (2,22)
               CR4 = TR1+TR4
C (2,23)
               CI2 = TI1+TI4
C (2,24)
               CI4 = TI1-TI4
C (2,25)
               CH(I-1,K,2) = WA1(I-2)*CR2-WA1(I-1)*CI2
C (2,26)
               CH(I,K,2) = WA1(I-2)*CI2+WA1(I-1)*CR2
C (2,27)
               CH(I-1,K,3) = WA2(I-2)*CR3-WA2(I-1)*CI3
C (2,28)
               CH(I,K,3) = WA2(I-2)*CI3+WA2(I-1)*CR3
C (2,29)
               CH(I-1,K,4) = WA3(I-2)*CR4-WA3(I-1)*CI4
C (2,30)
               CH(I,K,4) = WA3(I-2)*CI4+WA3(I-1)*CR4
C (2,31)
103            CONTINUE
C              END BLOCK
            ENDDO
C (2,32)
104         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (2,33)
!     INITIALLY: DO 110
         DO I = 3, IDO, 2
C (2,34)
C           BEGIN BLOCK
C (2,35)
            IC = IDP2-I
C (2,36)
!     INITIALLY: DO 109
            DO K = 1, L1
C (2,37)
C              BEGIN BLOCK
C (2,38)
               TI1 = CC(I,1,K)+CC(IC,4,K)
C (2,39)
               TI2 = CC(I,1,K)-CC(IC,4,K)
C (2,40)
               TI3 = CC(I,3,K)-CC(IC,2,K)
C (2,41)
               TR4 = CC(I,3,K)+CC(IC,2,K)
C (2,42)
               TR1 = CC(I-1,1,K)-CC(IC-1,4,K)
C (2,43)
               TR2 = CC(I-1,1,K)+CC(IC-1,4,K)
C (2,44)
               TI4 = CC(I-1,3,K)-CC(IC-1,2,K)
C (2,45)
               TR3 = CC(I-1,3,K)+CC(IC-1,2,K)
C (2,46)
               CH(I-1,K,1) = TR2+TR3
C (2,47)
               CR3 = TR2-TR3
C (2,48)
               CH(I,K,1) = TI2+TI3
C (2,49)
               CI3 = TI2-TI3
C (2,50)
               CR2 = TR1-TR4
C (2,51)
               CR4 = TR1+TR4
C (2,52)
               CI2 = TI1+TI4
C (2,53)
               CI4 = TI1-TI4
C (2,54)
               CH(I-1,K,2) = WA1(I-2)*CR2-WA1(I-1)*CI2
C (2,55)
               CH(I,K,2) = WA1(I-2)*CI2+WA1(I-1)*CR2
C (2,56)
               CH(I-1,K,3) = WA2(I-2)*CR3-WA2(I-1)*CI3
C (2,57)
               CH(I,K,3) = WA2(I-2)*CI3+WA2(I-1)*CR3
C (2,58)
               CH(I-1,K,4) = WA3(I-2)*CR4-WA3(I-1)*CI4
C (2,59)
               CH(I,K,4) = WA3(I-2)*CI4+WA3(I-1)*CR4
C (2,60)
109            CONTINUE
C              END BLOCK
            ENDDO
C (2,61)
110         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C     END BLOCK
C (3,1)
      IF (MOD(IDO, 2).EQ.1) THEN
      ELSE
         GOTO 99955
      ENDIF
C (4,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADB5(IDO,L1,CC,CH,WA1,WA2,WA3,WA4)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,5,L1)           ,CH(IDO,L1,5)           ,
     1                WA1(I_PIPS_RADB5_WA1)     ,WA2(I_PIPS_RADB5_WA2)  
     x    ,WA3(I_PIPS_RADB5_WA3)     ,WA4(I_PIPS_RADB5_WA4)
      DATA TR11,TI11,TR12,TI12 /.309016994374947D0,.951056516295154D0,
     1-.809016994374947D0,.587785252292473D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADB5_WA1
      COMMON /PIPS_RADB5_WA1/ I_PIPS_RADB5_WA1
      INTEGER*8 I_PIPS_RADB5_WA2
      COMMON /PIPS_RADB5_WA2/ I_PIPS_RADB5_WA2
      INTEGER*8 I_PIPS_RADB5_WA3
      COMMON /PIPS_RADB5_WA3/ I_PIPS_RADB5_WA3
      INTEGER*8 I_PIPS_RADB5_WA4
      COMMON /PIPS_RADB5_WA4/ I_PIPS_RADB5_WA4
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         TI5 = CC(1,3,K)+CC(1,3,K)
C (0,5)
         TI4 = CC(1,5,K)+CC(1,5,K)
C (0,6)
         TR2 = CC(IDO,2,K)+CC(IDO,2,K)
C (0,7)
         TR3 = CC(IDO,4,K)+CC(IDO,4,K)
C (0,8)
         CH(1,K,1) = CC(1,1,K)+TR2+TR3
C (0,9)
         CR2 = CC(1,1,K)+TR11*TR2+TR12*TR3
C (0,10)
         CR3 = CC(1,1,K)+TR12*TR2+TR11*TR3
C (0,11)
         CI5 = TI11*TI5+TI12*TI4
C (0,12)
         CI4 = TI12*TI5-TI11*TI4
C (0,13)
         CH(1,K,2) = CR2-CI5
C (0,14)
         CH(1,K,3) = CR3-CI4
C (0,15)
         CH(1,K,4) = CR3+CI4
C (0,16)
         CH(1,K,5) = CR2+CI5
C (0,17)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,18)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.EQ.1) RETURN
C (6,1)
      IDP2 = IDO+2
C (4,1)
      IF ((IDO-1)/2.GE.L1) GOTO 99954
C (3,1)
!     INITIALLY: DO 106
      DO I = 3, IDO, 2
C (3,2)
C        BEGIN BLOCK
C (3,3)
         IC = IDP2-I
C (3,4)
!     INITIALLY: DO 105
         DO K = 1, L1
C (3,5)
C           BEGIN BLOCK
C (3,6)
            TI5 = CC(I,3,K)+CC(IC,2,K)
C (3,7)
            TI2 = CC(I,3,K)-CC(IC,2,K)
C (3,8)
            TI4 = CC(I,5,K)+CC(IC,4,K)
C (3,9)
            TI3 = CC(I,5,K)-CC(IC,4,K)
C (3,10)
            TR5 = CC(I-1,3,K)-CC(IC-1,2,K)
C (3,11)
            TR2 = CC(I-1,3,K)+CC(IC-1,2,K)
C (3,12)
            TR4 = CC(I-1,5,K)-CC(IC-1,4,K)
C (3,13)
            TR3 = CC(I-1,5,K)+CC(IC-1,4,K)
C (3,14)
            CH(I-1,K,1) = CC(I-1,1,K)+TR2+TR3
C (3,15)
            CH(I,K,1) = CC(I,1,K)+TI2+TI3
C (3,16)
            CR2 = CC(I-1,1,K)+TR11*TR2+TR12*TR3
C (3,17)
            CI2 = CC(I,1,K)+TR11*TI2+TR12*TI3
C (3,18)
            CR3 = CC(I-1,1,K)+TR12*TR2+TR11*TR3
C (3,19)
            CI3 = CC(I,1,K)+TR12*TI2+TR11*TI3
C (3,20)
            CR5 = TI11*TR5+TI12*TR4
C (3,21)
            CI5 = TI11*TI5+TI12*TI4
C (3,22)
            CR4 = TI12*TR5-TI11*TR4
C (3,23)
            CI4 = TI12*TI5-TI11*TI4
C (3,24)
            DR3 = CR3-CI4
C (3,25)
            DR4 = CR3+CI4
C (3,26)
            DI3 = CI3+CR4
C (3,27)
            DI4 = CI3-CR4
C (3,28)
            DR5 = CR2+CI5
C (3,29)
            DR2 = CR2-CI5
C (3,30)
            DI5 = CI2-CR5
C (3,31)
            DI2 = CI2+CR5
C (3,32)
            CH(I-1,K,2) = WA1(I-2)*DR2-WA1(I-1)*DI2
C (3,33)
            CH(I,K,2) = WA1(I-2)*DI2+WA1(I-1)*DR2
C (3,34)
            CH(I-1,K,3) = WA2(I-2)*DR3-WA2(I-1)*DI3
C (3,35)
            CH(I,K,3) = WA2(I-2)*DI3+WA2(I-1)*DR3
C (3,36)
            CH(I-1,K,4) = WA3(I-2)*DR4-WA3(I-1)*DI4
C (3,37)
            CH(I,K,4) = WA3(I-2)*DI4+WA3(I-1)*DR4
C (3,38)
            CH(I-1,K,5) = WA4(I-2)*DR5-WA4(I-1)*DI5
C (3,39)
            CH(I,K,5) = WA4(I-2)*DI5+WA4(I-1)*DR5
C (3,40)
105         CONTINUE
C           END BLOCK
         ENDDO
C (3,41)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99954 CONTINUE
C (5,1)
!     INITIALLY: DO 103
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
!     INITIALLY: DO 102
         DO I = 3, IDO, 2
C (5,4)
C           BEGIN BLOCK
C (5,5)
            IC = IDP2-I
C (5,6)
            TI5 = CC(I,3,K)+CC(IC,2,K)
C (5,7)
            TI2 = CC(I,3,K)-CC(IC,2,K)
C (5,8)
            TI4 = CC(I,5,K)+CC(IC,4,K)
C (5,9)
            TI3 = CC(I,5,K)-CC(IC,4,K)
C (5,10)
            TR5 = CC(I-1,3,K)-CC(IC-1,2,K)
C (5,11)
            TR2 = CC(I-1,3,K)+CC(IC-1,2,K)
C (5,12)
            TR4 = CC(I-1,5,K)-CC(IC-1,4,K)
C (5,13)
            TR3 = CC(I-1,5,K)+CC(IC-1,4,K)
C (5,14)
            CH(I-1,K,1) = CC(I-1,1,K)+TR2+TR3
C (5,15)
            CH(I,K,1) = CC(I,1,K)+TI2+TI3
C (5,16)
            CR2 = CC(I-1,1,K)+TR11*TR2+TR12*TR3
C (5,17)
            CI2 = CC(I,1,K)+TR11*TI2+TR12*TI3
C (5,18)
            CR3 = CC(I-1,1,K)+TR12*TR2+TR11*TR3
C (5,19)
            CI3 = CC(I,1,K)+TR12*TI2+TR11*TI3
C (5,20)
            CR5 = TI11*TR5+TI12*TR4
C (5,21)
            CI5 = TI11*TI5+TI12*TI4
C (5,22)
            CR4 = TI12*TR5-TI11*TR4
C (5,23)
            CI4 = TI12*TI5-TI11*TI4
C (5,24)
            DR3 = CR3-CI4
C (5,25)
            DR4 = CR3+CI4
C (5,26)
            DI3 = CI3+CR4
C (5,27)
            DI4 = CI3-CR4
C (5,28)
            DR5 = CR2+CI5
C (5,29)
            DR2 = CR2-CI5
C (5,30)
            DI5 = CI2-CR5
C (5,31)
            DI2 = CI2+CR5
C (5,32)
            CH(I-1,K,2) = WA1(I-2)*DR2-WA1(I-1)*DI2
C (5,33)
            CH(I,K,2) = WA1(I-2)*DI2+WA1(I-1)*DR2
C (5,34)
            CH(I-1,K,3) = WA2(I-2)*DR3-WA2(I-1)*DI3
C (5,35)
            CH(I,K,3) = WA2(I-2)*DI3+WA2(I-1)*DR3
C (5,36)
            CH(I-1,K,4) = WA3(I-2)*DR4-WA3(I-1)*DI4
C (5,37)
            CH(I,K,4) = WA3(I-2)*DI4+WA3(I-1)*DR4
C (5,38)
            CH(I-1,K,5) = WA4(I-2)*DR5-WA4(I-1)*DI5
C (5,39)
            CH(I,K,5) = WA4(I-2)*DI5+WA4(I-1)*DR5
C (5,40)
102         CONTINUE
C           END BLOCK
         ENDDO
C (5,41)
103      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADBG(IDO,IP,L1,IDL1,CC,C1,C2,CH,CH2,WA)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(IDO,L1,IP)          ,CC(IDO,IP,L1)          ,
     1                C1(IDO,L1,IP)          ,C2(IDL1,IP),
     2                CH2(IDL1,IP)           ,WA(I_PIPS_RADBG_WA)
      DATA TPI/6.28318530717959D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTB_WSAVE
      COMMON /PIPS_RFFTB_WSAVE/ I_PIPS_RFFTB_WSAVE
      INTEGER*8 I_PIPS_RADBG_WA
      COMMON /PIPS_RADBG_WA/ I_PIPS_RADBG_WA
C     BEGIN BLOCK
C (0,2)
      ARG = TPI/DBLE(IP)
C (0,3)
      DCP = DCOS(ARG)
C (0,4)
      DSP = DSIN(ARG)
C (0,5)
      IDP2 = IDO+2
C (0,6)
      NBD = (IDO-1)/2
C (0,7)
      IPP2 = IP+2
C (0,8)
      IPPH = (IP+1)/2
C (0,9)
      IF (IDO.GE.L1) THEN
C (0,10)
!     INITIALLY: DO 102
         DO K = 1, L1
C (0,11)
C           BEGIN BLOCK
C (0,12)
!     INITIALLY: DO 101
            DO I = 1, IDO
C (0,13)
C              BEGIN BLOCK
C (0,14)
               CH(I,K,1) = CC(I,1,K)
C (0,15)
101            CONTINUE
C              END BLOCK
            ENDDO
C (0,16)
102         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,17)
!     INITIALLY: DO 105
         DO I = 1, IDO
C (0,18)
C           BEGIN BLOCK
C (0,19)
!     INITIALLY: DO 104
            DO K = 1, L1
C (0,20)
C              BEGIN BLOCK
C (0,21)
               CH(I,K,1) = CC(I,1,K)
C (0,22)
104            CONTINUE
C              END BLOCK
            ENDDO
C (0,23)
105         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (0,24)
!     INITIALLY: DO 108
      DO J = 2, IPPH
C (0,25)
C        BEGIN BLOCK
C (0,26)
         JC = IPP2-J
C (0,27)
         J2 = J+J
C (0,28)
!     INITIALLY: DO 107
         DO K = 1, L1
C (0,29)
C           BEGIN BLOCK
C (0,30)
            CH(1,K,J) = CC(IDO,J2-2,K)+CC(IDO,J2-2,K)
C (0,31)
            CH(1,K,JC) = CC(1,J2-1,K)+CC(1,J2-1,K)
C (0,32)
107         CONTINUE
C           END BLOCK
         ENDDO
C (0,33)
108      CONTINUE
C        END BLOCK
      ENDDO
C (0,34)
      IF (IDO.GT.1) THEN
C (0,35)
         IF (NBD.GE.L1) THEN
C (0,36)
!     INITIALLY: DO 111
            DO J = 2, IPPH
C (0,37)
C              BEGIN BLOCK
C (0,38)
               JC = IPP2-J
C (0,39)
!     INITIALLY: DO 110
               DO K = 1, L1
C (0,40)
C                 BEGIN BLOCK
C (0,41)
!     INITIALLY: DO 109
                  DO I = 3, IDO, 2
C (0,42)
C                    BEGIN BLOCK
C (0,43)
                     IC = IDP2-I
C (0,44)
                     CH(I-1,K,J) = CC(I-1,2*J-1,K)+CC(IC-1,2*J-2,K)
C (0,45)
                     CH(I-1,K,JC) = CC(I-1,2*J-1,K)-CC(IC-1,2*J-2,K)
C (0,46)
                     CH(I,K,J) = CC(I,2*J-1,K)-CC(IC,2*J-2,K)
C (0,47)
                     CH(I,K,JC) = CC(I,2*J-1,K)+CC(IC,2*J-2,K)
C (0,48)
109                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,49)
110               CONTINUE
C                 END BLOCK
               ENDDO
C (0,50)
111            CONTINUE
C              END BLOCK
            ENDDO
         ELSE
C (0,51)
!     INITIALLY: DO 115
            DO J = 2, IPPH
C (0,52)
C              BEGIN BLOCK
C (0,53)
               JC = IPP2-J
C (0,54)
!     INITIALLY: DO 114
               DO I = 3, IDO, 2
C (0,55)
C                 BEGIN BLOCK
C (0,56)
                  IC = IDP2-I
C (0,57)
!     INITIALLY: DO 113
                  DO K = 1, L1
C (0,58)
C                    BEGIN BLOCK
C (0,59)
                     CH(I-1,K,J) = CC(I-1,2*J-1,K)+CC(IC-1,2*J-2,K)
C (0,60)
                     CH(I-1,K,JC) = CC(I-1,2*J-1,K)-CC(IC-1,2*J-2,K)
C (0,61)
                     CH(I,K,J) = CC(I,2*J-1,K)-CC(IC,2*J-2,K)
C (0,62)
                     CH(I,K,JC) = CC(I,2*J-1,K)+CC(IC,2*J-2,K)
C (0,63)
113                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,64)
114               CONTINUE
C                 END BLOCK
               ENDDO
C (0,65)
115            CONTINUE
C              END BLOCK
            ENDDO
         ENDIF
      ELSE
C (0,66)
C        BEGIN BLOCK
C        END BLOCK
      ENDIF
C (0,67)
      AR1 = 1.
C (0,68)
      AI1 = 0.
C (0,69)
!     INITIALLY: DO 120
      DO L = 2, IPPH
C (0,70)
C        BEGIN BLOCK
C (0,71)
         LC = IPP2-L
C (0,72)
         AR1H = DCP*AR1-DSP*AI1
C (0,73)
         AI1 = DCP*AI1+DSP*AR1
C (0,74)
         AR1 = AR1H
C (0,75)
!     INITIALLY: DO 117
         DO IK = 1, IDL1
C (0,76)
C           BEGIN BLOCK
C (0,77)
            C2(IK,L) = CH2(IK,1)+AR1*CH2(IK,2)
C (0,78)
            C2(IK,LC) = AI1*CH2(IK,IP)
C (0,79)
117         CONTINUE
C           END BLOCK
         ENDDO
C (0,80)
         DC2 = AR1
C (0,81)
         DS2 = AI1
C (0,82)
         AR2 = AR1
C (0,83)
         AI2 = AI1
C (0,84)
!     INITIALLY: DO 119
         DO J = 3, IPPH
C (0,85)
C           BEGIN BLOCK
C (0,86)
            JC = IPP2-J
C (0,87)
            AR2H = DC2*AR2-DS2*AI2
C (0,88)
            AI2 = DC2*AI2+DS2*AR2
C (0,89)
            AR2 = AR2H
C (0,90)
!     INITIALLY: DO 118
            DO IK = 1, IDL1
C (0,91)
C              BEGIN BLOCK
C (0,92)
               C2(IK,L) = C2(IK,L)+AR2*CH2(IK,J)
C (0,93)
               C2(IK,LC) = C2(IK,LC)+AI2*CH2(IK,JC)
C (0,94)
118            CONTINUE
C              END BLOCK
            ENDDO
C (0,95)
119         CONTINUE
C           END BLOCK
         ENDDO
C (0,96)
120      CONTINUE
C        END BLOCK
      ENDDO
C (0,97)
!     INITIALLY: DO 122
      DO J = 2, IPPH
C (0,98)
C        BEGIN BLOCK
C (0,99)
!     INITIALLY: DO 121
         DO IK = 1, IDL1
C (0,100)
C           BEGIN BLOCK
C (0,101)
            CH2(IK,1) = CH2(IK,1)+CH2(IK,J)
C (0,102)
121         CONTINUE
C           END BLOCK
         ENDDO
C (0,103)
122      CONTINUE
C        END BLOCK
      ENDDO
C (0,104)
!     INITIALLY: DO 124
      DO J = 2, IPPH
C (0,105)
C        BEGIN BLOCK
C (0,106)
         JC = IPP2-J
C (0,107)
!     INITIALLY: DO 123
         DO K = 1, L1
C (0,108)
C           BEGIN BLOCK
C (0,109)
            CH(1,K,J) = C1(1,K,J)-C1(1,K,JC)
C (0,110)
            CH(1,K,JC) = C1(1,K,J)+C1(1,K,JC)
C (0,111)
123         CONTINUE
C           END BLOCK
         ENDDO
C (0,112)
124      CONTINUE
C        END BLOCK
      ENDDO
C (0,113)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.NE.1) THEN
      ELSE
         RETURN
      ENDIF
C (2,1)
C     BEGIN BLOCK
C (2,2)
      IF (NBD.GE.L1) THEN
C (2,3)
!     INITIALLY: DO 127
         DO J = 2, IPPH
C (2,4)
C           BEGIN BLOCK
C (2,5)
            JC = IPP2-J
C (2,6)
!     INITIALLY: DO 126
            DO K = 1, L1
C (2,7)
C              BEGIN BLOCK
C (2,8)
!     INITIALLY: DO 125
               DO I = 3, IDO, 2
C (2,9)
C                 BEGIN BLOCK
C (2,10)
                  CH(I-1,K,J) = C1(I-1,K,J)-C1(I,K,JC)
C (2,11)
                  CH(I-1,K,JC) = C1(I-1,K,J)+C1(I,K,JC)
C (2,12)
                  CH(I,K,J) = C1(I,K,J)+C1(I-1,K,JC)
C (2,13)
                  CH(I,K,JC) = C1(I,K,J)-C1(I-1,K,JC)
C (2,14)
125               CONTINUE
C                 END BLOCK
               ENDDO
C (2,15)
126            CONTINUE
C              END BLOCK
            ENDDO
C (2,16)
127         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (2,17)
!     INITIALLY: DO 131
         DO J = 2, IPPH
C (2,18)
C           BEGIN BLOCK
C (2,19)
            JC = IPP2-J
C (2,20)
!     INITIALLY: DO 130
            DO I = 3, IDO, 2
C (2,21)
C              BEGIN BLOCK
C (2,22)
!     INITIALLY: DO 129
               DO K = 1, L1
C (2,23)
C                 BEGIN BLOCK
C (2,24)
                  CH(I-1,K,J) = C1(I-1,K,J)-C1(I,K,JC)
C (2,25)
                  CH(I-1,K,JC) = C1(I-1,K,J)+C1(I,K,JC)
C (2,26)
                  CH(I,K,J) = C1(I,K,J)+C1(I-1,K,JC)
C (2,27)
                  CH(I,K,JC) = C1(I,K,J)-C1(I-1,K,JC)
C (2,28)
129               CONTINUE
C                 END BLOCK
               ENDDO
C (2,29)
130            CONTINUE
C              END BLOCK
            ENDDO
C (2,30)
131         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (2,31)
!     INITIALLY: DO 133
      DO IK = 1, IDL1
C (2,32)
C        BEGIN BLOCK
C (2,33)
         C2(IK,1) = CH2(IK,1)
C (2,34)
133      CONTINUE
C        END BLOCK
      ENDDO
C (2,35)
!     INITIALLY: DO 135
      DO J = 2, IP
C (2,36)
C        BEGIN BLOCK
C (2,37)
!     INITIALLY: DO 134
         DO K = 1, L1
C (2,38)
C           BEGIN BLOCK
C (2,39)
            C1(1,K,J) = CH(1,K,J)
C (2,40)
134         CONTINUE
C           END BLOCK
         ENDDO
C (2,41)
135      CONTINUE
C        END BLOCK
      ENDDO
C (2,42)
      IF (NBD.LE.L1) THEN
C (2,43)
C        BEGIN BLOCK
C (2,44)
         IS = -IDO
C (2,45)
!     INITIALLY: DO 138
         DO J = 2, IP
C (2,46)
C           BEGIN BLOCK
C (2,47)
            IS = IS+IDO
C (2,48)
            IDIJ = IS
C (2,49)
!     INITIALLY: DO 137
            DO I = 3, IDO, 2
C (2,50)
C              BEGIN BLOCK
C (2,51)
               IDIJ = IDIJ+2
C (2,52)
!     INITIALLY: DO 136
               DO K = 1, L1
C (2,53)
C                 BEGIN BLOCK
C (2,54)
                  C1(I-1,K,J) = WA(IDIJ-1)*CH(I-1,K,J)-WA(IDIJ)*CH(I,
     &            K,J)
C (2,55)
                  C1(I,K,J) = WA(IDIJ-1)*CH(I,K,J)+WA(IDIJ)*CH(I-1,K,
     &            J)
C (2,56)
136               CONTINUE
C                 END BLOCK
               ENDDO
C (2,57)
137            CONTINUE
C              END BLOCK
            ENDDO
C (2,58)
138         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ELSE
C (2,59)
C        BEGIN BLOCK
C (2,60)
         IS = -IDO
C (2,61)
!     INITIALLY: DO 142
         DO J = 2, IP
C (2,62)
C           BEGIN BLOCK
C (2,63)
            IS = IS+IDO
C (2,64)
!     INITIALLY: DO 141
            DO K = 1, L1
C (2,65)
C              BEGIN BLOCK
C (2,66)
               IDIJ = IS
C (2,67)
!     INITIALLY: DO 140
               DO I = 3, IDO, 2
C (2,68)
C                 BEGIN BLOCK
C (2,69)
                  IDIJ = IDIJ+2
C (2,70)
                  C1(I-1,K,J) = WA(IDIJ-1)*CH(I-1,K,J)-WA(IDIJ)*CH(I,
     &            K,J)
C (2,71)
                  C1(I,K,J) = WA(IDIJ-1)*CH(I,K,J)+WA(IDIJ)*CH(I-1,K,
     &            J)
C (2,72)
140               CONTINUE
C                 END BLOCK
               ENDDO
C (2,73)
141            CONTINUE
C              END BLOCK
            ENDDO
C (2,74)
142         CONTINUE
C           END BLOCK
         ENDDO
C        END BLOCK
      ENDIF
C     END BLOCK
C (3,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADF2(IDO,L1,CC,CH,WA1)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(IDO,2,L1)           ,CC(IDO,L1,2)           ,
     1                WA1(I_PIPS_RADF2_WA1)
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADF2_WA1
      COMMON /PIPS_RADF2_WA1/ I_PIPS_RADF2_WA1
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         CH(1,1,K) = CC(1,K,1)+CC(1,K,2)
C (0,5)
         CH(IDO,2,K) = CC(1,K,1)-CC(1,K,2)
C (0,6)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,7)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.GT.2) GOTO 99953
C (6,1)
      IF (IDO.LT.2) RETURN
99952 CONTINUE
C (5,1)
!     INITIALLY: DO 106
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
         CH(1,2,K) = -CC(IDO,K,2)
C (5,4)
         CH(IDO,1,K) = CC(IDO,K,1)
C (5,5)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99953 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
      IDP2 = IDO+2
C (2,3)
      IF ((IDO-1)/2.GE.L1) THEN
C (2,4)
!     INITIALLY: DO 104
         DO K = 1, L1
C (2,5)
C           BEGIN BLOCK
C (2,6)
!     INITIALLY: DO 103
            DO I = 3, IDO, 2
C (2,7)
C              BEGIN BLOCK
C (2,8)
               IC = IDP2-I
C (2,9)
               TR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (2,10)
               TI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (2,11)
               CH(I,1,K) = CC(I,K,1)+TI2
C (2,12)
               CH(IC,2,K) = TI2-CC(I,K,1)
C (2,13)
               CH(I-1,1,K) = CC(I-1,K,1)+TR2
C (2,14)
               CH(IC-1,2,K) = CC(I-1,K,1)-TR2
C (2,15)
103            CONTINUE
C              END BLOCK
            ENDDO
C (2,16)
104         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (2,17)
!     INITIALLY: DO 110
         DO I = 3, IDO, 2
C (2,18)
C           BEGIN BLOCK
C (2,19)
            IC = IDP2-I
C (2,20)
!     INITIALLY: DO 109
            DO K = 1, L1
C (2,21)
C              BEGIN BLOCK
C (2,22)
               TR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (2,23)
               TI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (2,24)
               CH(I,1,K) = CC(I,K,1)+TI2
C (2,25)
               CH(IC,2,K) = TI2-CC(I,K,1)
C (2,26)
               CH(I-1,1,K) = CC(I-1,K,1)+TR2
C (2,27)
               CH(IC-1,2,K) = CC(I-1,K,1)-TR2
C (2,28)
109            CONTINUE
C              END BLOCK
            ENDDO
C (2,29)
110         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C     END BLOCK
C (3,1)
      IF (MOD(IDO, 2).EQ.1) THEN
      ELSE
         GOTO 99952
      ENDIF
C (4,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADF3(IDO,L1,CC,CH,WA1,WA2)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(IDO,3,L1)           ,CC(IDO,L1,3)           ,
     1                WA1(I_PIPS_RADF3_WA1)     ,WA2(I_PIPS_RADF3_WA2)
      DATA TAUR,TAUI /-.5D0,.866025403784439D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADF3_WA1
      COMMON /PIPS_RADF3_WA1/ I_PIPS_RADF3_WA1
      INTEGER*8 I_PIPS_RADF3_WA2
      COMMON /PIPS_RADF3_WA2/ I_PIPS_RADF3_WA2
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         CR2 = CC(1,K,2)+CC(1,K,3)
C (0,5)
         CH(1,1,K) = CC(1,K,1)+CR2
C (0,6)
         CH(1,3,K) = TAUI*(CC(1,K,3)-CC(1,K,2))
C (0,7)
         CH(IDO,2,K) = CC(1,K,1)+TAUR*CR2
C (0,8)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,9)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.EQ.1) RETURN
C (6,1)
      IDP2 = IDO+2
C (4,1)
      IF ((IDO-1)/2.GE.L1) GOTO 99951
C (3,1)
!     INITIALLY: DO 106
      DO I = 3, IDO, 2
C (3,2)
C        BEGIN BLOCK
C (3,3)
         IC = IDP2-I
C (3,4)
!     INITIALLY: DO 105
         DO K = 1, L1
C (3,5)
C           BEGIN BLOCK
C (3,6)
            DR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (3,7)
            DI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (3,8)
            DR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (3,9)
            DI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (3,10)
            CR2 = DR2+DR3
C (3,11)
            CI2 = DI2+DI3
C (3,12)
            CH(I-1,1,K) = CC(I-1,K,1)+CR2
C (3,13)
            CH(I,1,K) = CC(I,K,1)+CI2
C (3,14)
            TR2 = CC(I-1,K,1)+TAUR*CR2
C (3,15)
            TI2 = CC(I,K,1)+TAUR*CI2
C (3,16)
            TR3 = TAUI*(DI2-DI3)
C (3,17)
            TI3 = TAUI*(DR3-DR2)
C (3,18)
            CH(I-1,3,K) = TR2+TR3
C (3,19)
            CH(IC-1,2,K) = TR2-TR3
C (3,20)
            CH(I,3,K) = TI2+TI3
C (3,21)
            CH(IC,2,K) = TI3-TI2
C (3,22)
105         CONTINUE
C           END BLOCK
         ENDDO
C (3,23)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99951 CONTINUE
C (5,1)
!     INITIALLY: DO 103
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
!     INITIALLY: DO 102
         DO I = 3, IDO, 2
C (5,4)
C           BEGIN BLOCK
C (5,5)
            IC = IDP2-I
C (5,6)
            DR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (5,7)
            DI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (5,8)
            DR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (5,9)
            DI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (5,10)
            CR2 = DR2+DR3
C (5,11)
            CI2 = DI2+DI3
C (5,12)
            CH(I-1,1,K) = CC(I-1,K,1)+CR2
C (5,13)
            CH(I,1,K) = CC(I,K,1)+CI2
C (5,14)
            TR2 = CC(I-1,K,1)+TAUR*CR2
C (5,15)
            TI2 = CC(I,K,1)+TAUR*CI2
C (5,16)
            TR3 = TAUI*(DI2-DI3)
C (5,17)
            TI3 = TAUI*(DR3-DR2)
C (5,18)
            CH(I-1,3,K) = TR2+TR3
C (5,19)
            CH(IC-1,2,K) = TR2-TR3
C (5,20)
            CH(I,3,K) = TI2+TI3
C (5,21)
            CH(IC,2,K) = TI3-TI2
C (5,22)
102         CONTINUE
C           END BLOCK
         ENDDO
C (5,23)
103      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADF4(IDO,L1,CC,CH,WA1,WA2,WA3)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,L1,4)           ,CH(IDO,4,L1)           ,
     1                WA1(I_PIPS_RADF4_WA1)     ,WA2(I_PIPS_RADF4_WA2)  
     x    ,WA3(I_PIPS_RADF4_WA3)
      DATA HSQT2 /.7071067811865475D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADF4_WA1
      COMMON /PIPS_RADF4_WA1/ I_PIPS_RADF4_WA1
      INTEGER*8 I_PIPS_RADF4_WA2
      COMMON /PIPS_RADF4_WA2/ I_PIPS_RADF4_WA2
      INTEGER*8 I_PIPS_RADF4_WA3
      COMMON /PIPS_RADF4_WA3/ I_PIPS_RADF4_WA3
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         TR1 = CC(1,K,2)+CC(1,K,4)
C (0,5)
         TR2 = CC(1,K,1)+CC(1,K,3)
C (0,6)
         CH(1,1,K) = TR1+TR2
C (0,7)
         CH(IDO,4,K) = TR2-TR1
C (0,8)
         CH(IDO,2,K) = CC(1,K,1)-CC(1,K,3)
C (0,9)
         CH(1,3,K) = CC(1,K,4)-CC(1,K,2)
C (0,10)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,11)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.GT.2) GOTO 99950
C (6,1)
      IF (IDO.LT.2) RETURN
99949 CONTINUE
C (5,1)
!     INITIALLY: DO 106
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
         TI1 = -HSQT2*(CC(IDO,K,2)+CC(IDO,K,4))
C (5,4)
         TR1 = HSQT2*(CC(IDO,K,2)-CC(IDO,K,4))
C (5,5)
         CH(IDO,1,K) = TR1+CC(IDO,K,1)
C (5,6)
         CH(IDO,3,K) = CC(IDO,K,1)-TR1
C (5,7)
         CH(1,2,K) = TI1-CC(IDO,K,3)
C (5,8)
         CH(1,4,K) = TI1+CC(IDO,K,3)
C (5,9)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99950 CONTINUE
C (2,1)
C     BEGIN BLOCK
C (2,2)
      IDP2 = IDO+2
C (2,3)
      IF ((IDO-1)/2.GE.L1) THEN
C (2,4)
!     INITIALLY: DO 104
         DO K = 1, L1
C (2,5)
C           BEGIN BLOCK
C (2,6)
!     INITIALLY: DO 103
            DO I = 3, IDO, 2
C (2,7)
C              BEGIN BLOCK
C (2,8)
               IC = IDP2-I
C (2,9)
               CR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (2,10)
               CI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (2,11)
               CR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (2,12)
               CI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (2,13)
               CR4 = WA3(I-2)*CC(I-1,K,4)+WA3(I-1)*CC(I,K,4)
C (2,14)
               CI4 = WA3(I-2)*CC(I,K,4)-WA3(I-1)*CC(I-1,K,4)
C (2,15)
               TR1 = CR2+CR4
C (2,16)
               TR4 = CR4-CR2
C (2,17)
               TI1 = CI2+CI4
C (2,18)
               TI4 = CI2-CI4
C (2,19)
               TI2 = CC(I,K,1)+CI3
C (2,20)
               TI3 = CC(I,K,1)-CI3
C (2,21)
               TR2 = CC(I-1,K,1)+CR3
C (2,22)
               TR3 = CC(I-1,K,1)-CR3
C (2,23)
               CH(I-1,1,K) = TR1+TR2
C (2,24)
               CH(IC-1,4,K) = TR2-TR1
C (2,25)
               CH(I,1,K) = TI1+TI2
C (2,26)
               CH(IC,4,K) = TI1-TI2
C (2,27)
               CH(I-1,3,K) = TI4+TR3
C (2,28)
               CH(IC-1,2,K) = TR3-TI4
C (2,29)
               CH(I,3,K) = TR4+TI3
C (2,30)
               CH(IC,2,K) = TR4-TI3
C (2,31)
103            CONTINUE
C              END BLOCK
            ENDDO
C (2,32)
104         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (2,33)
!     INITIALLY: DO 109
         DO I = 3, IDO, 2
C (2,34)
C           BEGIN BLOCK
C (2,35)
            IC = IDP2-I
C (2,36)
!     INITIALLY: DO 108
            DO K = 1, L1
C (2,37)
C              BEGIN BLOCK
C (2,38)
               CR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (2,39)
               CI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (2,40)
               CR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (2,41)
               CI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (2,42)
               CR4 = WA3(I-2)*CC(I-1,K,4)+WA3(I-1)*CC(I,K,4)
C (2,43)
               CI4 = WA3(I-2)*CC(I,K,4)-WA3(I-1)*CC(I-1,K,4)
C (2,44)
               TR1 = CR2+CR4
C (2,45)
               TR4 = CR4-CR2
C (2,46)
               TI1 = CI2+CI4
C (2,47)
               TI4 = CI2-CI4
C (2,48)
               TI2 = CC(I,K,1)+CI3
C (2,49)
               TI3 = CC(I,K,1)-CI3
C (2,50)
               TR2 = CC(I-1,K,1)+CR3
C (2,51)
               TR3 = CC(I-1,K,1)-CR3
C (2,52)
               CH(I-1,1,K) = TR1+TR2
C (2,53)
               CH(IC-1,4,K) = TR2-TR1
C (2,54)
               CH(I,1,K) = TI1+TI2
C (2,55)
               CH(IC,4,K) = TI1-TI2
C (2,56)
               CH(I-1,3,K) = TI4+TR3
C (2,57)
               CH(IC-1,2,K) = TR3-TI4
C (2,58)
               CH(I,3,K) = TR4+TI3
C (2,59)
               CH(IC,2,K) = TR4-TI3
C (2,60)
108            CONTINUE
C              END BLOCK
            ENDDO
C (2,61)
109         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C     END BLOCK
C (3,1)
      IF (MOD(IDO, 2).EQ.1) THEN
      ELSE
         GOTO 99949
      ENDIF
C (4,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADF5(IDO,L1,CC,CH,WA1,WA2,WA3,WA4)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CC(IDO,L1,5)           ,CH(IDO,5,L1)           ,
     1                WA1(I_PIPS_RADF5_WA1)     ,WA2(I_PIPS_RADF5_WA2)  
     x    ,WA3(I_PIPS_RADF5_WA3)     ,WA4(I_PIPS_RADF5_WA4)
      DATA TR11,TI11,TR12,TI12 /.309016994374947D0,.951056516295154D0,
     1-.809016994374947D0,.587785252292473D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADF5_WA1
      COMMON /PIPS_RADF5_WA1/ I_PIPS_RADF5_WA1
      INTEGER*8 I_PIPS_RADF5_WA2
      COMMON /PIPS_RADF5_WA2/ I_PIPS_RADF5_WA2
      INTEGER*8 I_PIPS_RADF5_WA3
      COMMON /PIPS_RADF5_WA3/ I_PIPS_RADF5_WA3
      INTEGER*8 I_PIPS_RADF5_WA4
      COMMON /PIPS_RADF5_WA4/ I_PIPS_RADF5_WA4
C     BEGIN BLOCK
C (0,2)
!     INITIALLY: DO 101
      DO K = 1, L1
C (0,3)
C        BEGIN BLOCK
C (0,4)
         CR2 = CC(1,K,5)+CC(1,K,2)
C (0,5)
         CI5 = CC(1,K,5)-CC(1,K,2)
C (0,6)
         CR3 = CC(1,K,4)+CC(1,K,3)
C (0,7)
         CI4 = CC(1,K,4)-CC(1,K,3)
C (0,8)
         CH(1,1,K) = CC(1,K,1)+CR2+CR3
C (0,9)
         CH(IDO,2,K) = CC(1,K,1)+TR11*CR2+TR12*CR3
C (0,10)
         CH(1,3,K) = TI11*CI5+TI12*CI4
C (0,11)
         CH(IDO,4,K) = CC(1,K,1)+TR12*CR2+TR11*CR3
C (0,12)
         CH(1,5,K) = TI12*CI5-TI11*CI4
C (0,13)
101      CONTINUE
C        END BLOCK
      ENDDO
C (0,14)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.EQ.1) RETURN
C (6,1)
      IDP2 = IDO+2
C (4,1)
      IF ((IDO-1)/2.GE.L1) GOTO 99948
C (3,1)
!     INITIALLY: DO 106
      DO I = 3, IDO, 2
C (3,2)
C        BEGIN BLOCK
C (3,3)
         IC = IDP2-I
C (3,4)
!     INITIALLY: DO 105
         DO K = 1, L1
C (3,5)
C           BEGIN BLOCK
C (3,6)
            DR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (3,7)
            DI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (3,8)
            DR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (3,9)
            DI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (3,10)
            DR4 = WA3(I-2)*CC(I-1,K,4)+WA3(I-1)*CC(I,K,4)
C (3,11)
            DI4 = WA3(I-2)*CC(I,K,4)-WA3(I-1)*CC(I-1,K,4)
C (3,12)
            DR5 = WA4(I-2)*CC(I-1,K,5)+WA4(I-1)*CC(I,K,5)
C (3,13)
            DI5 = WA4(I-2)*CC(I,K,5)-WA4(I-1)*CC(I-1,K,5)
C (3,14)
            CR2 = DR2+DR5
C (3,15)
            CI5 = DR5-DR2
C (3,16)
            CR5 = DI2-DI5
C (3,17)
            CI2 = DI2+DI5
C (3,18)
            CR3 = DR3+DR4
C (3,19)
            CI4 = DR4-DR3
C (3,20)
            CR4 = DI3-DI4
C (3,21)
            CI3 = DI3+DI4
C (3,22)
            CH(I-1,1,K) = CC(I-1,K,1)+CR2+CR3
C (3,23)
            CH(I,1,K) = CC(I,K,1)+CI2+CI3
C (3,24)
            TR2 = CC(I-1,K,1)+TR11*CR2+TR12*CR3
C (3,25)
            TI2 = CC(I,K,1)+TR11*CI2+TR12*CI3
C (3,26)
            TR3 = CC(I-1,K,1)+TR12*CR2+TR11*CR3
C (3,27)
            TI3 = CC(I,K,1)+TR12*CI2+TR11*CI3
C (3,28)
            TR5 = TI11*CR5+TI12*CR4
C (3,29)
            TI5 = TI11*CI5+TI12*CI4
C (3,30)
            TR4 = TI12*CR5-TI11*CR4
C (3,31)
            TI4 = TI12*CI5-TI11*CI4
C (3,32)
            CH(I-1,3,K) = TR2+TR5
C (3,33)
            CH(IC-1,2,K) = TR2-TR5
C (3,34)
            CH(I,3,K) = TI2+TI5
C (3,35)
            CH(IC,2,K) = TI5-TI2
C (3,36)
            CH(I-1,5,K) = TR3+TR4
C (3,37)
            CH(IC-1,4,K) = TR3-TR4
C (3,38)
            CH(I,5,K) = TI3+TI4
C (3,39)
            CH(IC,4,K) = TI4-TI3
C (3,40)
105         CONTINUE
C           END BLOCK
         ENDDO
C (3,41)
106      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99948 CONTINUE
C (5,1)
!     INITIALLY: DO 103
      DO K = 1, L1
C (5,2)
C        BEGIN BLOCK
C (5,3)
!     INITIALLY: DO 102
         DO I = 3, IDO, 2
C (5,4)
C           BEGIN BLOCK
C (5,5)
            IC = IDP2-I
C (5,6)
            DR2 = WA1(I-2)*CC(I-1,K,2)+WA1(I-1)*CC(I,K,2)
C (5,7)
            DI2 = WA1(I-2)*CC(I,K,2)-WA1(I-1)*CC(I-1,K,2)
C (5,8)
            DR3 = WA2(I-2)*CC(I-1,K,3)+WA2(I-1)*CC(I,K,3)
C (5,9)
            DI3 = WA2(I-2)*CC(I,K,3)-WA2(I-1)*CC(I-1,K,3)
C (5,10)
            DR4 = WA3(I-2)*CC(I-1,K,4)+WA3(I-1)*CC(I,K,4)
C (5,11)
            DI4 = WA3(I-2)*CC(I,K,4)-WA3(I-1)*CC(I-1,K,4)
C (5,12)
            DR5 = WA4(I-2)*CC(I-1,K,5)+WA4(I-1)*CC(I,K,5)
C (5,13)
            DI5 = WA4(I-2)*CC(I,K,5)-WA4(I-1)*CC(I-1,K,5)
C (5,14)
            CR2 = DR2+DR5
C (5,15)
            CI5 = DR5-DR2
C (5,16)
            CR5 = DI2-DI5
C (5,17)
            CI2 = DI2+DI5
C (5,18)
            CR3 = DR3+DR4
C (5,19)
            CI4 = DR4-DR3
C (5,20)
            CR4 = DI3-DI4
C (5,21)
            CI3 = DI3+DI4
C (5,22)
            CH(I-1,1,K) = CC(I-1,K,1)+CR2+CR3
C (5,23)
            CH(I,1,K) = CC(I,K,1)+CI2+CI3
C (5,24)
            TR2 = CC(I-1,K,1)+TR11*CR2+TR12*CR3
C (5,25)
            TI2 = CC(I,K,1)+TR11*CI2+TR12*CI3
C (5,26)
            TR3 = CC(I-1,K,1)+TR12*CR2+TR11*CR3
C (5,27)
            TI3 = CC(I,K,1)+TR12*CI2+TR11*CI3
C (5,28)
            TR5 = TI11*CR5+TI12*CR4
C (5,29)
            TI5 = TI11*CI5+TI12*CI4
C (5,30)
            TR4 = TI12*CR5-TI11*CR4
C (5,31)
            TI4 = TI12*CI5-TI11*CI4
C (5,32)
            CH(I-1,3,K) = TR2+TR5
C (5,33)
            CH(IC-1,2,K) = TR2-TR5
C (5,34)
            CH(I,3,K) = TI2+TI5
C (5,35)
            CH(IC,2,K) = TI5-TI2
C (5,36)
            CH(I-1,5,K) = TR3+TR4
C (5,37)
            CH(IC-1,4,K) = TR3-TR4
C (5,38)
            CH(I,5,K) = TI3+TI4
C (5,39)
            CH(IC,4,K) = TI4-TI3
C (5,40)
102         CONTINUE
C           END BLOCK
         ENDDO
C (5,41)
103      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      SUBROUTINE RADFG(IDO,IP,L1,IDL1,CC,C1,C2,CH,CH2,WA)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION       CH(IDO,L1,IP)          ,CC(IDO,IP,L1)          ,
     1                C1(IDO,L1,IP)          ,C2(IDL1,IP),
     2                CH2(IDL1,IP)           ,WA(I_PIPS_RADFG_WA)
      DATA TPI/6.28318530717959D0/
C (0,1)
      INTEGER*8 I_PIPS_RFFTF_WSAVE
      COMMON /PIPS_RFFTF_WSAVE/ I_PIPS_RFFTF_WSAVE
      INTEGER*8 I_PIPS_RADFG_WA
      COMMON /PIPS_RADFG_WA/ I_PIPS_RADFG_WA
C     BEGIN BLOCK
C (0,2)
      ARG = TPI/DBLE(IP)
C (0,3)
      DCP = DCOS(ARG)
C (0,4)
      DSP = DSIN(ARG)
C (0,5)
      IPPH = (IP+1)/2
C (0,6)
      IPP2 = IP+2
C (0,7)
      IDP2 = IDO+2
C (0,8)
      NBD = (IDO-1)/2
C (0,9)
      IF (IDO.NE.1) THEN
C (0,10)
C        BEGIN BLOCK
C (0,11)
!     INITIALLY: DO 101
         DO IK = 1, IDL1
C (0,12)
C           BEGIN BLOCK
C (0,13)
            CH2(IK,1) = C2(IK,1)
C (0,14)
101         CONTINUE
C           END BLOCK
         ENDDO
C (0,15)
!     INITIALLY: DO 103
         DO J = 2, IP
C (0,16)
C           BEGIN BLOCK
C (0,17)
!     INITIALLY: DO 102
            DO K = 1, L1
C (0,18)
C              BEGIN BLOCK
C (0,19)
               CH(1,K,J) = C1(1,K,J)
C (0,20)
102            CONTINUE
C              END BLOCK
            ENDDO
C (0,21)
103         CONTINUE
C           END BLOCK
         ENDDO
C (0,22)
         IF (NBD.LE.L1) THEN
C (0,23)
C           BEGIN BLOCK
C (0,24)
            IS = -IDO
C (0,25)
!     INITIALLY: DO 106
            DO J = 2, IP
C (0,26)
C              BEGIN BLOCK
C (0,27)
               IS = IS+IDO
C (0,28)
               IDIJ = IS
C (0,29)
!     INITIALLY: DO 105
               DO I = 3, IDO, 2
C (0,30)
C                 BEGIN BLOCK
C (0,31)
                  IDIJ = IDIJ+2
C (0,32)
!     INITIALLY: DO 104
                  DO K = 1, L1
C (0,33)
C                    BEGIN BLOCK
C (0,34)
                     CH(I-1,K,J) = WA(IDIJ-1)*C1(I-1,K,J)+WA(IDIJ)*C1
     &               (I,K,J)
C (0,35)
                     CH(I,K,J) = WA(IDIJ-1)*C1(I,K,J)-WA(IDIJ)*C1(I-1
     &               ,K,J)
C (0,36)
104                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,37)
105               CONTINUE
C                 END BLOCK
               ENDDO
C (0,38)
106            CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ELSE
C (0,39)
C           BEGIN BLOCK
C (0,40)
            IS = -IDO
C (0,41)
!     INITIALLY: DO 110
            DO J = 2, IP
C (0,42)
C              BEGIN BLOCK
C (0,43)
               IS = IS+IDO
C (0,44)
!     INITIALLY: DO 109
               DO K = 1, L1
C (0,45)
C                 BEGIN BLOCK
C (0,46)
                  IDIJ = IS
C (0,47)
!     INITIALLY: DO 108
                  DO I = 3, IDO, 2
C (0,48)
C                    BEGIN BLOCK
C (0,49)
                     IDIJ = IDIJ+2
C (0,50)
                     CH(I-1,K,J) = WA(IDIJ-1)*C1(I-1,K,J)+WA(IDIJ)*C1
     &               (I,K,J)
C (0,51)
                     CH(I,K,J) = WA(IDIJ-1)*C1(I,K,J)-WA(IDIJ)*C1(I-1
     &               ,K,J)
C (0,52)
108                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,53)
109               CONTINUE
C                 END BLOCK
               ENDDO
C (0,54)
110            CONTINUE
C              END BLOCK
            ENDDO
C           END BLOCK
         ENDIF
C (0,55)
         IF (NBD.GE.L1) THEN
C (0,56)
!     INITIALLY: DO 114
            DO J = 2, IPPH
C (0,57)
C              BEGIN BLOCK
C (0,58)
               JC = IPP2-J
C (0,59)
!     INITIALLY: DO 113
               DO K = 1, L1
C (0,60)
C                 BEGIN BLOCK
C (0,61)
!     INITIALLY: DO 112
                  DO I = 3, IDO, 2
C (0,62)
C                    BEGIN BLOCK
C (0,63)
                     C1(I-1,K,J) = CH(I-1,K,J)+CH(I-1,K,JC)
C (0,64)
                     C1(I-1,K,JC) = CH(I,K,J)-CH(I,K,JC)
C (0,65)
                     C1(I,K,J) = CH(I,K,J)+CH(I,K,JC)
C (0,66)
                     C1(I,K,JC) = CH(I-1,K,JC)-CH(I-1,K,J)
C (0,67)
112                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,68)
113               CONTINUE
C                 END BLOCK
               ENDDO
C (0,69)
114            CONTINUE
C              END BLOCK
            ENDDO
         ELSE
C (0,70)
!     INITIALLY: DO 118
            DO J = 2, IPPH
C (0,71)
C              BEGIN BLOCK
C (0,72)
               JC = IPP2-J
C (0,73)
!     INITIALLY: DO 117
               DO I = 3, IDO, 2
C (0,74)
C                 BEGIN BLOCK
C (0,75)
!     INITIALLY: DO 116
                  DO K = 1, L1
C (0,76)
C                    BEGIN BLOCK
C (0,77)
                     C1(I-1,K,J) = CH(I-1,K,J)+CH(I-1,K,JC)
C (0,78)
                     C1(I-1,K,JC) = CH(I,K,J)-CH(I,K,JC)
C (0,79)
                     C1(I,K,J) = CH(I,K,J)+CH(I,K,JC)
C (0,80)
                     C1(I,K,JC) = CH(I-1,K,JC)-CH(I-1,K,J)
C (0,81)
116                  CONTINUE
C                    END BLOCK
                  ENDDO
C (0,82)
117               CONTINUE
C                 END BLOCK
               ENDDO
C (0,83)
118            CONTINUE
C              END BLOCK
            ENDDO
         ENDIF
C        END BLOCK
      ELSE
C (0,84)
!     INITIALLY: DO 120
         DO IK = 1, IDL1
C (0,85)
C           BEGIN BLOCK
C (0,86)
            C2(IK,1) = CH2(IK,1)
C (0,87)
120         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (0,88)
!     INITIALLY: DO 123
      DO J = 2, IPPH
C (0,89)
C        BEGIN BLOCK
C (0,90)
         JC = IPP2-J
C (0,91)
!     INITIALLY: DO 122
         DO K = 1, L1
C (0,92)
C           BEGIN BLOCK
C (0,93)
            C1(1,K,J) = CH(1,K,J)+CH(1,K,JC)
C (0,94)
            C1(1,K,JC) = CH(1,K,JC)-CH(1,K,J)
C (0,95)
122         CONTINUE
C           END BLOCK
         ENDDO
C (0,96)
123      CONTINUE
C        END BLOCK
      ENDDO
C (0,97)
C
      AR1 = 1.
C (0,98)
      AI1 = 0.
C (0,99)
!     INITIALLY: DO 127
      DO L = 2, IPPH
C (0,100)
C        BEGIN BLOCK
C (0,101)
         LC = IPP2-L
C (0,102)
         AR1H = DCP*AR1-DSP*AI1
C (0,103)
         AI1 = DCP*AI1+DSP*AR1
C (0,104)
         AR1 = AR1H
C (0,105)
!     INITIALLY: DO 124
         DO IK = 1, IDL1
C (0,106)
C           BEGIN BLOCK
C (0,107)
            CH2(IK,L) = C2(IK,1)+AR1*C2(IK,2)
C (0,108)
            CH2(IK,LC) = AI1*C2(IK,IP)
C (0,109)
124         CONTINUE
C           END BLOCK
         ENDDO
C (0,110)
         DC2 = AR1
C (0,111)
         DS2 = AI1
C (0,112)
         AR2 = AR1
C (0,113)
         AI2 = AI1
C (0,114)
!     INITIALLY: DO 126
         DO J = 3, IPPH
C (0,115)
C           BEGIN BLOCK
C (0,116)
            JC = IPP2-J
C (0,117)
            AR2H = DC2*AR2-DS2*AI2
C (0,118)
            AI2 = DC2*AI2+DS2*AR2
C (0,119)
            AR2 = AR2H
C (0,120)
!     INITIALLY: DO 125
            DO IK = 1, IDL1
C (0,121)
C              BEGIN BLOCK
C (0,122)
               CH2(IK,L) = CH2(IK,L)+AR2*C2(IK,J)
C (0,123)
               CH2(IK,LC) = CH2(IK,LC)+AI2*C2(IK,JC)
C (0,124)
125            CONTINUE
C              END BLOCK
            ENDDO
C (0,125)
126         CONTINUE
C           END BLOCK
         ENDDO
C (0,126)
127      CONTINUE
C        END BLOCK
      ENDDO
C (0,127)
!     INITIALLY: DO 129
      DO J = 2, IPPH
C (0,128)
C        BEGIN BLOCK
C (0,129)
!     INITIALLY: DO 128
         DO IK = 1, IDL1
C (0,130)
C           BEGIN BLOCK
C (0,131)
            CH2(IK,1) = CH2(IK,1)+C2(IK,J)
C (0,132)
128         CONTINUE
C           END BLOCK
         ENDDO
C (0,133)
129      CONTINUE
C        END BLOCK
      ENDDO
C (0,134)
C
      IF (IDO.GE.L1) THEN
C (0,135)
!     INITIALLY: DO 131
         DO K = 1, L1
C (0,136)
C           BEGIN BLOCK
C (0,137)
!     INITIALLY: DO 130
            DO I = 1, IDO
C (0,138)
C              BEGIN BLOCK
C (0,139)
               CC(I,1,K) = CH(I,K,1)
C (0,140)
130            CONTINUE
C              END BLOCK
            ENDDO
C (0,141)
131         CONTINUE
C           END BLOCK
         ENDDO
      ELSE
C (0,142)
!     INITIALLY: DO 134
         DO I = 1, IDO
C (0,143)
C           BEGIN BLOCK
C (0,144)
!     INITIALLY: DO 133
            DO K = 1, L1
C (0,145)
C              BEGIN BLOCK
C (0,146)
               CC(I,1,K) = CH(I,K,1)
C (0,147)
133            CONTINUE
C              END BLOCK
            ENDDO
C (0,148)
134         CONTINUE
C           END BLOCK
         ENDDO
      ENDIF
C (0,149)
!     INITIALLY: DO 137
      DO J = 2, IPPH
C (0,150)
C        BEGIN BLOCK
C (0,151)
         JC = IPP2-J
C (0,152)
         J2 = J+J
C (0,153)
!     INITIALLY: DO 136
         DO K = 1, L1
C (0,154)
C           BEGIN BLOCK
C (0,155)
            CC(IDO,J2-2,K) = CH(1,K,J)
C (0,156)
            CC(1,J2-1,K) = CH(1,K,JC)
C (0,157)
136         CONTINUE
C           END BLOCK
         ENDDO
C (0,158)
137      CONTINUE
C        END BLOCK
      ENDDO
C (0,159)
C     BEGIN UNSTRUCTURED
C (1,1)
      IF (IDO.EQ.1) RETURN
C (4,1)
      IF (NBD.GE.L1) GOTO 99947
C (3,1)
!     INITIALLY: DO 144
      DO J = 2, IPPH
C (3,2)
C        BEGIN BLOCK
C (3,3)
         JC = IPP2-J
C (3,4)
         J2 = J+J
C (3,5)
!     INITIALLY: DO 143
         DO I = 3, IDO, 2
C (3,6)
C           BEGIN BLOCK
C (3,7)
            IC = IDP2-I
C (3,8)
!     INITIALLY: DO 142
            DO K = 1, L1
C (3,9)
C              BEGIN BLOCK
C (3,10)
               CC(I-1,J2-1,K) = CH(I-1,K,J)+CH(I-1,K,JC)
C (3,11)
               CC(IC-1,J2-2,K) = CH(I-1,K,J)-CH(I-1,K,JC)
C (3,12)
               CC(I,J2-1,K) = CH(I,K,J)+CH(I,K,JC)
C (3,13)
               CC(IC,J2-2,K) = CH(I,K,JC)-CH(I,K,J)
C (3,14)
142            CONTINUE
C              END BLOCK
            ENDDO
C (3,15)
143         CONTINUE
C           END BLOCK
         ENDDO
C (3,16)
144      CONTINUE
C        END BLOCK
      ENDDO
      RETURN
99947 CONTINUE
C (5,1)
!     INITIALLY: DO 140
      DO J = 2, IPPH
C (5,2)
C        BEGIN BLOCK
C (5,3)
         JC = IPP2-J
C (5,4)
         J2 = J+J
C (5,5)
!     INITIALLY: DO 139
         DO K = 1, L1
C (5,6)
C           BEGIN BLOCK
C (5,7)
!     INITIALLY: DO 138
            DO I = 3, IDO, 2
C (5,8)
C              BEGIN BLOCK
C (5,9)
               IC = IDP2-I
C (5,10)
               CC(I-1,J2-1,K) = CH(I-1,K,J)+CH(I-1,K,JC)
C (5,11)
               CC(IC-1,J2-2,K) = CH(I-1,K,J)-CH(I-1,K,JC)
C (5,12)
               CC(I,J2-1,K) = CH(I,K,J)+CH(I,K,JC)
C (5,13)
               CC(IC,J2-2,K) = CH(I,K,JC)-CH(I,K,J)
C (5,14)
138            CONTINUE
C              END BLOCK
            ENDDO
C (5,15)
139         CONTINUE
C           END BLOCK
         ENDDO
C (5,16)
140      CONTINUE
C        END BLOCK
      ENDDO
C (2,1)
      RETURN
C     END UNSTRUCTURED
C     END BLOCK
      END

      FUNCTION RAND(R)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      SAVE IY0, IY1, IX0, IX1
      DATA IA1, IA0, IA1MA0 /1536, 1029, 507/
      DATA IC /1731/
      DATA IX1, IX0 /0, 0/
C (0,1)
C     BEGIN BLOCK
C (0,2)
      IF (R.EQ.0.) THEN
C (0,3)
C        BEGIN BLOCK
C (0,4)
         IY0 = IA0*IX0
C (0,5)
         IY1 = IA1*IX1+IA1MA0*(IX0-IX1)+IY0
C (0,6)
         IY0 = IY0+IC
C (0,7)
         IX0 = MOD(IY0, 2048)
C (0,8)
         IY1 = IY1+(IY0-IX0)/2048
C (0,9)
         IX1 = MOD(IY1, 2048)
C        END BLOCK
      ELSE
C (0,10)
         IF (R.GT.0.) THEN
C (0,11)
C           BEGIN BLOCK
C (0,12)
            IX1 = DMOD(R, 1.0D0)*4194304.D0+0.5D0
C (0,13)
            IX0 = MOD(IX1, 2048)
C (0,14)
            IX1 = (IX1-IX0)/2048
C           END BLOCK
         ELSE
C (0,15)
C           BEGIN BLOCK
C           END BLOCK
         ENDIF
      ENDIF
C (0,16)
      RAND = IX1*2048+IX0
C (0,17)
      RAND = RAND/4194304.D0
C (0,18)
      RETURN
C     END BLOCK
      END


Initial code

void scalarization21(double A[SIZE][SIZE], double B[SIZE][SIZE])
{
   int i, j;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1)
         A[i][j] = B[i][j]*B[i][j]+B[i][j];
}

Initial code with preconditions


//  P() {SIZE==10}

void scalarization21(double A[SIZE][SIZE], double B[SIZE][SIZE])
{

//  P() {SIZE==10}

   int i, j;

//  P() {SIZE==10}

   for(i = 0; i <= SIZE-1; i += 1)

//  P(i,j) {SIZE==10, 0<=i, i<=9}

      for(j = 0; j <= SIZE-1; j += 1)

//  P(i,j) {SIZE==10, 0<=i, i<=9, 0<=j, j<=9}

         A[i][j] = B[i][j]*B[i][j]+B[i][j];
}

IN regions


//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>

void scalarization21(double A[SIZE][SIZE], double B[SIZE][SIZE])
{
   int i, j;

//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==i, 0<=PHI2, PHI2<=9, SIZE==10,
//    0<=i, i<=9}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==i, PHI2==j, SIZE==10, 0<=i, i<=9,
//    0<=j, j<=9}>

         A[i][j] = B[i][j]*B[i][j]+B[i][j];
}

OUT regions


//  <A[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, SIZE==10}>

void scalarization21(double A[SIZE][SIZE], double B[SIZE][SIZE])
{
   int i, j;

//  <A[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, SIZE==10}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, SIZE==10, i==0}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1][PHI2]-OUT-EXACT-{PHI1==0, PHI2==0, SIZE==10, i==0, j==0}>

         A[i][j] = B[i][j]*B[i][j]+B[i][j];
}

Code after scalarization

void scalarization21(double A[SIZE][SIZE], double B[SIZE][SIZE])
{
   int i, j;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1) {
         //PIPS generated variable
         register double B_0 = B[i][j];

         A[i][j] = B_0*B_0+B_0;
      }
}

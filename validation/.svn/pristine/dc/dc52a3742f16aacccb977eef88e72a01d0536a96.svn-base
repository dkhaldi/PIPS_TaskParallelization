!
! File TEST73_A_2_5_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(5).EQ.2) THEN
         IF (.NOT.LIVE MAPPING(5)) THEN
! send part
! remapping A[5]: A_1[2] -> A[5]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = 1, 2
                  DO PSIp2 = 1, 2
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = A_1(
     &                        LALPHA1,LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 BUF INDEX = 0
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                        ENDIF
                        IF (.NOT.SEND NOT INITIALIZED) THEN
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = 1, 2
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              A(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                        BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - copying
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              A(LALPHAp1,LALPHAp2) = A_1(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(5) = .TRUE.
         MSTATUS(5) = 5
      ENDIF
!
! That is all for TEST73_A_2_5_node.h
!
!
! File TEST73_A_5_2_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(5).EQ.5) THEN
         IF (.NOT.LIVE MAPPING(2)) THEN
! send part
! remapping A[5]: A[5] -> A_1[2]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = 1, 2
                  DO PSIp2 = 1, 2
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,
     &                        LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 BUF INDEX = 0
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                        ENDIF
                        IF (.NOT.SEND NOT INITIALIZED) THEN
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = 1, 2
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              A_1(LALPHAp1,LALPHAp2) = 
     &                        HPFC REAL4 BUFF(BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - copying
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              A_1(LALPHAp1,LALPHAp2) = A(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(2) = .TRUE.
         MSTATUS(5) = 2
      ENDIF
!
! That is all for TEST73_A_5_2_node.h
!
!
! File TEST73_B_1_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.1) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping B[4]: B_2[1] -> B_1[3]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = 1, 2
                  DO PSIp2 = 1, 2
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = B_2(
     &                        LALPHA1,LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 BUF INDEX = 0
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                        ENDIF
                        IF (.NOT.SEND NOT INITIALIZED) THEN
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = 1, 2
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              B_1(LALPHAp1,LALPHAp2) = 
     &                        HPFC REAL4 BUFF(BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - copying
                        DO LALPHA1 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp2 = 256*PSI1-255, 256*PSI1
                              LALPHA2 = 2*LALPHAp2-512*PSI1+PSIp2+510
                              LALPHAp1 = 2*LALPHA1+PSI2-512*PSIp1+510
                              B_1(LALPHAp1,LALPHAp2) = B_2(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(4) = 3
      ENDIF
!
! That is all for TEST73_B_1_3_node.h
!
!
! File TEST73_B_3_1_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.3) THEN
         IF (.NOT.LIVE MAPPING(1)) THEN
! send part
! remapping B[4]: B_1[3] -> B_2[1]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = 1, 2
                  DO PSIp2 = 1, 2
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = B_1(
     &                        LALPHA1,LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 BUF INDEX = 0
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                        ENDIF
                        IF (.NOT.SEND NOT INITIALIZED) THEN
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = 1, 2
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              B_2(LALPHAp1,LALPHAp2) = 
     &                        HPFC REAL4 BUFF(BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - copying
                        DO LALPHA2 = 256*PSIp1-255, 256*PSIp1
                           DO LALPHAp1 = 256*PSI1-255, 256*PSI1
                              LALPHA1 = 2*LALPHAp1-512*PSI1+PSIp2+510
                              LALPHAp2 = 2*LALPHA2+PSI2-512*PSIp1+510
                              B_2(LALPHAp1,LALPHAp2) = B_1(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(1) = .TRUE.
         MSTATUS(4) = 1
      ENDIF
!
! That is all for TEST73_B_3_1_node.h
!
!
! File TEST73_B_4_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.4) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping B[4]: B[4] -> B_1[3]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSIp1 = PSI1
               DO PSIp2 = 1, 2
                  T LID = 2*PSIp1+PSIp2-2
                  IF (MY LID.NE.T LID) THEN
! - sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA1 = 1, 512
                        DO LALPHAp2 = 256*PSI2-255, 256*PSI2
                           LALPHA2 = 2*LALPHAp2-512*PSI2+PSIp2+510
                           LALPHAp1 = LALPHA1
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL4 BUFF(BUF INDEX) = B(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL4 BUFPCK
                              BUF INDEX = 0
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL4 BUFPCK
                     ENDIF
                     IF (.NOT.SEND NOT INITIALIZED) THEN
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSI1 = PSIp1
               DO PSI2 = 1, 2
                  T LID = 2*PSI1+PSI2-2
                  IF (MY LID.NE.T LID) THEN
! - receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA1 = 1, 512
                        DO LALPHAp2 = 256*PSI2-255, 256*PSI2
                           LALPHA2 = 2*LALPHAp2-512*PSI2+PSIp2+510
                           LALPHAp1 = LALPHA1
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              CALL HPFC REAL4 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           B_1(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - copying
                     DO LALPHA1 = 1, 512
                        DO LALPHAp2 = 256*PSI2-255, 256*PSI2
                           LALPHA2 = 2*LALPHAp2-512*PSI2+PSIp2+510
                           LALPHAp1 = LALPHA1
                           B_1(LALPHAp1,LALPHAp2) = B(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(4) = 3
      ENDIF
!
! That is all for TEST73_B_4_3_node.h
!
!
! File TEST73_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "TEST73_parameters.h"
      INTEGER*4 NTIME
      PARAMETER (NTIME = 10)
      INTEGER TIME
      CALL HPFC INIT HOST
c
c initialize b
c
      CALL HPFC HTIMEON
      CALL HPFC HTIMEON
      CALL HPFC HTIMEOFF('empty measure')
c
c
c first a simple copy
c
      DO TIME = 1, NTIME
         CALL HPFC HTIMEON
         CALL HPFC HTIMEOFF('transposition 1')
         CALL HPFC HTIMEON
         CALL HPFC HTIMEOFF('transposition 2')
      ENDDO
      CALL HPFC HTIMEOFF('whole time')
      CALL HPFC HOST END
      END
!
! That is all for TEST73_host.f
!
!
! File TEST73_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for TEST73
!
!
! initializing array A, number 5
!
      NODIMA(5) = 2
      ATOT(5) = 2

      MSTATUS(5) = 5
      LIVEMAPPING(5) = .TRUE.

      RANGEA(5, 1, 1) = 1
      RANGEA(5, 1, 2) = 1024
      RANGEA(5, 1, 3) = 1024
!
      RANGEA(5, 1, 4) = 2
      RANGEA(5, 1, 5) = 512
      RANGEA(5, 1, 6) = 1
      RANGEA(5, 1, 7) = -1

      RANGEA(5, 2, 1) = 1
      RANGEA(5, 2, 2) = 1024
      RANGEA(5, 2, 3) = 1024
!
      RANGEA(5, 2, 4) = 3
      RANGEA(5, 2, 5) = 1
      RANGEA(5, 2, 6) = 2
      RANGEA(5, 2, 7) = 0
      RANGEA(5, 2, 8) = -1

      ALIGN(5, 1, 1) = 1
      ALIGN(5, 1, 2) = 1
      ALIGN(5, 1, 3) = 0
      ALIGN(5, 2, 1) = 2
      ALIGN(5, 2, 2) = 1
      ALIGN(5, 2, 3) = 0
!
! initializing array B, number 4
!
      NODIMA(4) = 2
      ATOT(4) = 1

      MSTATUS(4) = 4
      LIVEMAPPING(4) = .TRUE.

      RANGEA(4, 1, 1) = 1
      RANGEA(4, 1, 2) = 1024
      RANGEA(4, 1, 3) = 1024
!
      RANGEA(4, 1, 4) = 2
      RANGEA(4, 1, 5) = 512
      RANGEA(4, 1, 6) = 1
      RANGEA(4, 1, 7) = -1

      RANGEA(4, 2, 1) = 1
      RANGEA(4, 2, 2) = 1024
      RANGEA(4, 2, 3) = 1024
!
      RANGEA(4, 2, 4) = 2
      RANGEA(4, 2, 5) = 512
      RANGEA(4, 2, 6) = 1
      RANGEA(4, 2, 7) = -1

      ALIGN(4, 1, 1) = 1
      ALIGN(4, 1, 2) = 1
      ALIGN(4, 1, 3) = 0
      ALIGN(4, 2, 1) = 2
      ALIGN(4, 2, 2) = 1
      ALIGN(4, 2, 3) = 0
!
! initializing array B_1, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 2

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 1024
      RANGEA(3, 1, 3) = 1024
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 512
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 1024
      RANGEA(3, 2, 3) = 1024
!
      RANGEA(3, 2, 4) = 3
      RANGEA(3, 2, 5) = 1
      RANGEA(3, 2, 6) = 2
      RANGEA(3, 2, 7) = 0
      RANGEA(3, 2, 8) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array A_1, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 2

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 1024
      RANGEA(2, 1, 3) = 1024
!
      RANGEA(2, 1, 4) = 3
      RANGEA(2, 1, 5) = 1
      RANGEA(2, 1, 6) = 2
      RANGEA(2, 1, 7) = 0
      RANGEA(2, 1, 8) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 1024
      RANGEA(2, 2, 3) = 1024
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 512
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 2
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 1
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array B_2, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 2

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 1024
      RANGEA(1, 1, 3) = 1024
!
      RANGEA(1, 1, 4) = 3
      RANGEA(1, 1, 5) = 1
      RANGEA(1, 1, 6) = 2
      RANGEA(1, 1, 7) = 0
      RANGEA(1, 1, 8) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 1024
      RANGEA(1, 2, 3) = 1024
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 512
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 2
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 1
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for TEST73_init.h
!
!
! File TEST73_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "TEST73_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 1024)
      INTEGER*4 NTIME
      PARAMETER (NTIME = 10)
      INTEGER I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I, J, 
     &TIME, LALPHA1, LALPHAp1, LALPHAp2, LALPHA2, PSIp2, T LID, PSIp1
     &, PSI2, PSI1
      REAL*4 A(1:512, 1:512), B(1:512, 1:512), B_1(1:512, 1:512), A_1
     &(1:512, 1:512), B_2(1:512, 1:512)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_15, I_16, I_17, 1, N, 4, 1)
      CALL HPFC LOOP BOUNDS(I_11, I_12, I_13, 1, N, 4, 2)
! all livenesss for B
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(3) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! all livenesss for A
      LIVE MAPPING(5) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
! direct remapping for B
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for A
      LIVE MAPPING(5) = .TRUE.
      MSTATUS(5) = 5
c
c initialize b
c
      CALL HPFC NTIMEON
      CALL HPFC NTIMEON
      CALL HPFC NTIMEOFF('empty measure')
c
      J = I_13
      DO I_10 = I_11, I_12
         J = J+1
         I = I_17
         DO I_14 = I_15, I_16
            I = I+1
            B(I_14,I_10) = REAL(I+J)
         ENDDO
      ENDDO
! begin remappings
      include 'TEST73_B_4_3_node.h'
! liveness management
! clean live set for B
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
c
c first a simple copy
c
      DO J = 1, 512
         DO I = 1, 512
            A(I,J) = B_1(I,J)
         ENDDO
      ENDDO
      DO TIME = 1, NTIME
! begin remappings
      include 'TEST73_B_1_3_node.h'
! liveness management
! clean live set for B
         LIVE MAPPING(4) = .FALSE.
         LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
         CALL HPFC NTIMEON
! begin remappings
      include 'TEST73_A_5_2_node.h'
! liveness management
! end of liveness management
! end remappings
         DO J = 1, 512
            DO I = 1, 512
               B_1(I,J) = A_1(J,I)
            ENDDO
         ENDDO
         CALL HPFC NTIMEOFF('transposition 1')
! begin remappings
      include 'TEST73_A_2_5_node.h'
! liveness management
! clean live set for A
         LIVE MAPPING(2) = .FALSE.
! end of liveness management
! end remappings
         CALL HPFC NTIMEON
! begin remappings
      include 'TEST73_B_3_1_node.h'
! liveness management
! clean live set for B
         LIVE MAPPING(4) = .FALSE.
! end of liveness management
! end remappings
         DO J = 1, 512
            DO I = 1, 512
               A(I,J) = B_2(J,I)
            ENDDO
         ENDDO
         CALL HPFC NTIMEOFF('transposition 2')
      ENDDO
      CALL HPFC NTIMEOFF('whole time')
      CALL HPFC NODE END
      END
!
! That is all for TEST73_node.f
!
!
! File TEST73_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for TEST73
!
      integer 
     $    TEST73 A LO1,
     $    TEST73 A UP1
      parameter(TEST73 A LO1 = 1)
      parameter(TEST73 A UP1 = 512)
      integer 
     $    TEST73 A LO2,
     $    TEST73 A UP2
      parameter(TEST73 A LO2 = 1)
      parameter(TEST73 A UP2 = 512)
      integer 
     $    TEST73 B LO1,
     $    TEST73 B UP1
      parameter(TEST73 B LO1 = 1)
      parameter(TEST73 B UP1 = 512)
      integer 
     $    TEST73 B LO2,
     $    TEST73 B UP2
      parameter(TEST73 B LO2 = 1)
      parameter(TEST73 B UP2 = 512)
      integer 
     $    TEST73 B_1 LO1,
     $    TEST73 B_1 UP1
      parameter(TEST73 B_1 LO1 = 1)
      parameter(TEST73 B_1 UP1 = 512)
      integer 
     $    TEST73 B_1 LO2,
     $    TEST73 B_1 UP2
      parameter(TEST73 B_1 LO2 = 1)
      parameter(TEST73 B_1 UP2 = 512)
      integer 
     $    TEST73 A_1 LO1,
     $    TEST73 A_1 UP1
      parameter(TEST73 A_1 LO1 = 1)
      parameter(TEST73 A_1 UP1 = 512)
      integer 
     $    TEST73 A_1 LO2,
     $    TEST73 A_1 UP2
      parameter(TEST73 A_1 LO2 = 1)
      parameter(TEST73 A_1 UP2 = 512)
      integer 
     $    TEST73 B_2 LO1,
     $    TEST73 B_2 UP1
      parameter(TEST73 B_2 LO1 = 1)
      parameter(TEST73 B_2 UP1 = 512)
      integer 
     $    TEST73 B_2 LO2,
     $    TEST73 B_2 UP2
      parameter(TEST73 B_2 LO2 = 1)
      parameter(TEST73 B_2 UP2 = 512)
!
! That is all for TEST73_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template TB, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 1024
      RANGET(1, 1, 3) = 1024

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 1024
      RANGET(1, 2, 3) = 1024

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 512
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 512
!
! initializing template TC, number 2
!
      NODIMT(2) = 2
      TTOP(2) = 1

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 1024
      RANGET(2, 1, 3) = 1024

      RANGET(2, 2, 1) = 1
      RANGET(2, 2, 2) = 1024
      RANGET(2, 2, 3) = 1024

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 512
      DIST(2, 2, 1) = 2
      DIST(2, 2, 2) = -1
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 5)
      parameter(REALNBOFTEMPLATES = 2)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

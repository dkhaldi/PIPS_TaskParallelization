delete acca-example05

setproperty ABORT_ON_USER_ERROR TRUE

# mandatory for A&K (Rice) parallization on C files
setproperty MEMORY_EFFECTS_ONLY FALSE
setproperty PRETTYPRINT_MEMORY_EFFECTS_ONLY TRUE

create acca-example05 acca-example05.c

display PRINTED_FILE[compute]

display PRINTED_FILE[main]

#  shell cat acca-example05.database/compute/compute.pre.c >compute-initial05.c
#  shell cat acca-example05.database/main/main.pre.c >main-initial05.c

#  shell echo '\\begin{verbatim}' >main-initial05.tex
#  shell cat main-initial05.c >>main-initial05.tex
##  shell echo "" >>main-initial05.tex
##  shell cat compute-initial05.c >>main-initial05.tex
#  shell echo '\end{verbatim}' >>main-initial05.tex

#  shell echo '\\begin{verbatim}' >compute-initial05.tex
##  shell cat main-initial05.c >>compute-initial05.tex
##  shell echo "" >>compute-initial05.tex
#  shell cat compute-initial05.c >>compute-initial05.tex
#  shell echo '\end{verbatim}' >>compute-initial05.tex

activate PRINT_CODE_PRECONDITIONS
setproperty PRETTYPRINT_ANALYSES_WITH_LF FALSE
setproperty SEMANTICS_FILTERED_PRECONDITIONS TRUE

display PRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.prec.c >compute-initial_precondition05.c
#  shell echo '\\begin{verbatim}' >compute-initial_precondition05.tex
#  shell cat compute-initial_precondition05.c >>compute-initial_precondition05.tex
#  shell echo '\end{verbatim}' >>compute-initial_precondition05.tex

# Discard the useless test

#apply SIMPLIFY_CONTROL[compute]
apply SIMPLIFY_CONTROL[compute]

activate PRINT_CODE
display PRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.pre.c >compute-simplified_control05.c
#  shell echo '\\begin{verbatim}' >compute-simplified_control05.tex
#  shell cat compute-simplified_control05.c >>compute-simplified_control05.tex
#  shell echo '\end{verbatim}' >>compute-simplified_control05.tex

# Remove recursive definition of k
# FI->MA: but the uses of k are not replaced by its definition:-(

#apply INDUCTION_VARIABLE_SUBSTITUTION[compute]
apply INDUCTION_SUBSTITUTION[compute]

activate PRINT_CODE
display PRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.pre.c >compute-induction_variable05.c
#  shell echo '\\begin{verbatim}' >compute-induction_variable05.tex
#  shell cat compute-induction_variable05.c >>compute-induction_variable05.tex
#  shell echo '\end{verbatim}' >>compute-induction_variable05.tex

# Clean up the new definition of k

#apply PARTIAL_EVALUATION[compute]
apply PARTIAL_EVAL[compute]

activate PRINT_CODE
display PRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.pre.c >compute-partial_evaluation05.c
#  shell echo '\\begin{verbatim}' >compute-partial_evaluation05.tex
#  shell cat compute-partial_evaluation05.c >>compute-partial_evaluation05.tex
#  shell echo '\end{verbatim}' >>compute-partial_evaluation05.tex

# Look at the available parallelism

#display PARALLEL_PRINTED_FILE[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.par.c >compute-inner_parallelism05.c
#  shell echo '\\begin{verbatim}' >compute-inner_parallelism05.tex
#  shell cat compute-inner_parallelism05.c >>compute-inner_parallelism05.tex
#  shell echo '\end{verbatim}' >>compute-inner_parallelism05.tex

# Go fo scalar privatixation

apply PRIVATIZE_MODULE[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.par.c >compute-outer_parallelism05.c
#  shell echo '\\begin{verbatim}' >compute-outer_parallelism05.tex
#  shell cat compute-outer_parallelism05.c >>compute-outer_parallelism05.tex
#  shell echo '\end{verbatim}' >>compute-outer_parallelism05.tex

# Go for array privatization

activate MUST_REGIONS

setproperty PRETTYPRINT_BLOCKS TRUE
activate PRINT_CODE_IN_REGIONS
display PRINTED_FILE[compute]
setproperty PRETTYPRINT_BLOCKS FALSE

# BC: The OUT region for k is wrong for the outer loop body
activate PRINT_CODE_OUT_REGIONS
setproperty PRETTYPRINT_SCALAR_REGIONS TRUE
setproperty PRETTYPRINT_BLOCKS TRUE
display PRINTED_FILE[compute]
setproperty PRETTYPRINT_BLOCKS FALSE

#apply ARRAY_PRIVATIZATION[compute]
apply ARRAY_PRIVATIZER[compute]
apply COARSE_GRAIN_PARALLELIZATION[compute]
activate PRINT_CODE
display PRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.pre.c >compute-array_privatization05.c
#  shell echo '\\begin{verbatim}' >compute-array_privatization05.tex
#  shell cat compute-array_privatization05.c >>compute-array_privatization05.tex
#  shell echo '\end{verbatim}' >>compute-array_privatization05.tex
quit

# OK, this fails, so let's try scalarization and privatization again
apply SCALARIZATION[compute]
apply PRIVATIZE_MODULE[compute]
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.par.c >compute-array_scalarization05.c
#  shell echo '\\begin{verbatim}' >compute-array_scalarization05.tex
#  shell cat compute-array_scalarization05.c >>compute-array_scalarization05.tex
#  shell echo '\end{verbatim}' >>compute-array_scalarization05.tex

# Let's get rid of the spurious loop
activate PRINT_CODE_OUT_REGIONS
setproperty PRETTYPRINT_SCALAR_REGIONS TRUE
display PRINTED_FILE[compute]
##  shell echo '\\begin{verbatim}' >compute-outer_parallelism05.tex
##  shell cat compute-outer_parallelism05.c >>compute-outer_parallelism05.tex
##  shell echo '\end{verbatim}' >>compute-outer_parallelism05.tex

apply DEAD_CODE_ELIMINATION[compute]
#apply USE_DEF_ELIMINATION[compute]
activate PRINT_CODE
display PRINTED_FILE[compute]

activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[compute]

#  shell cat acca-example05.database/compute/compute.par.c >compute-dead_code_elimination05.c
#  shell echo '\\begin{verbatim}' >compute-dead_code_elimination05.tex
#  shell cat compute-dead_code_elimination05.c >>compute-dead_code_elimination05.tex
#  shell echo '\end{verbatim}' >>compute-dead_code_elimination05.tex

apply INTERNALIZE_PARALLEL_CODE[compute]
activate PRINT_CODE

close

quit


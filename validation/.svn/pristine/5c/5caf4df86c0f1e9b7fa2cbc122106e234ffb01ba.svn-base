
Points-to for "ordered_free01"


// Points To IN:
// fp -> *NULL* , MAY
// fp -> _fp_1 , MAY


// Points To OUT:
// fp -> *HEAP*_l_8 , MAY

int ordered_free01(int *fp)
{

// Points To:
// fp -> *NULL* , MAY
// fp -> _fp_1 , MAY

   int *fq = fp;

// Points To:
// fp -> *NULL* , MAY
// fp -> _fp_1 , MAY
// fq -> *NULL* , MAY
// fq -> _fp_1 , MAY

   free(fp);

// Points To:
// fp -> undefined , EXACT
// fq -> undefined , MAY
// fq -> *NULL* , MAY

   fp = (int *) malloc(sizeof(int));

// Points To:
// fp -> *HEAP*_l_8 , MAY
// fq -> undefined , MAY
// fq -> *NULL* , MAY

   return 0;
}

Proper effects with points-to for "ordered_free01"

int ordered_free01(int *fp)
{
//             <    is read   >: fp
//             <    is written>: fq
   int *fq = fp;
//             <    is read   >: fp _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(fp);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: fp _MALLOC_EFFECTS:_MALLOC_
   fp = (int *) malloc(sizeof(int));
   return 0;
}

Cumulated effects with points-to for "ordered_free01"

//             <    is read   >: fp _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
int ordered_free01(int *fp)
{
//             <    is read   >: fp
//             <    is written>: fq
   int *fq = fp;
//             <    is read   >: fp _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(fp);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: fp _MALLOC_EFFECTS:_MALLOC_
   fp = (int *) malloc(sizeof(int));
   return 0;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int *p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_14 , MAY

   ordered_free01(p);

// Points To:
// p -> *HEAP*_l_14 , MAY

   // Here we may not know that p has been freed but we should know
   // that p may have been freed
   return 0;
}
INTERPROCEDURAL_POINTS_TO_ANALYSIS[ordered_free01] (freed_list_to_points_to) Dangling pointer "fq" has been detected at line 7.
(activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active

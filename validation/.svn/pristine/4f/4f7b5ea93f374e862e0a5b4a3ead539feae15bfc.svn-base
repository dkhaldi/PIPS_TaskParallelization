int main(int argc, char *argv[])
{
   fgUINT16 rawsrc[] = {105, 115, 28, 41, 41, 48, 54, 57, 62, 70, 72, 76, 75, 76, 76, 78, 75, 77, 78, 76, 75, 79, 77, 76, 77, 73, 71, 64, 62, 55, 50, 44, 42, 32, 123, 112, 100, 88, 82, 73, 73, 76, 76, 81, 85, 86, 90, 90, 93, 92, 91, 96, 96, 100, 96, 98, 98, 97, 102, 99, 98, 96, 99, 102, 98, 93, 100, 99, 94, 96, 94, 90, 88, 87, 88, 88, 85, 87, 35, 5};
   fgUINT16 rawref[] = {92, 78, 68, 56, 60, 62, 64, 67, 70, 71, 87, 78, 71, 63, 65, 65, 66, 66, 66, 67, 66, 65, 64, 72, 80, 87, 82, 77, 72, 71, 66, 65, 64, 74, 82, 90, 86, 82, 77, 76, 71, 71, 71, 81, 90, 98, 95, 93, 90, 90, 88, 89, 91, 92, 93, 93, 94, 95, 95, 96, 94, 94, 94, 94, 94, 93, 93, 88, 79, 71, 94, 94, 93, 93, 92, 92, 92, 83, 69, 57};
   FLGR_Data2D *imgsrc, *imgref, *img, *nhb;
   FLGR_Ret ret;
   imgsrc = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   imgref = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   img = flgr2d_create_pixmap(8, 10, 1, flgr_get_type_from_string("fgUINT16"));
   nhb = flgr2d_create_neighborhood(3, 3, 1, flgr_get_type_from_string("fgUINT16"), FLGR_RECT, FLGR_8_CONNEX);
   flgr2d_import_raw_ptr(imgsrc, rawsrc);
   flgr2d_import_raw_ptr(imgref, rawref);
   ret = flgr2d_convolution(img, imgsrc, nhb);
   /*check_and_display_data2d(imgref,img,ret);				*/
   flgr2d_destroy(imgsrc);
   flgr2d_destroy(imgref);
   flgr2d_destroy(img);
   flgr2d_destroy(nhb);
   return 1;
}
FLGR_Ret flgr2d_convolution(FLGR_Data2D *datdest, FLGR_Data2D *datsrc, FLGR_Data2D *nhb)
{
   FLGR_Ret ret;
   if (datdest==(void *) 0||datsrc==(void *) 0||nhb==(void *) 0) {
      fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Null objects!\n", "./fulguro-included.h", 2000, __FUNCTION__);
      flgr_backtrace_print();
      return FLGR_RET_NULL_OBJECT;
   }
   if ((ret = flgr2d_is_data_same_attributes(datdest, datsrc, __FUNCTION__))!=FLGR_RET_OK)
      return ret;
   if (datdest->type==FLGR_UINT16)
      flgr2d_convolution_fgUINT16(datdest, datsrc, nhb);
}
void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;
   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(data_array, i);
      flgr_set_array_fgUINT16(vector_array, k, val);
      i++;
   }
}
void flgr_get_data_array_vector_fgUINT16(fgUINT16 *vector_array, fgUINT16 *data_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   //PIPS generated variable
   fgUINT16 _return0;
   i = pos*spp;
   for(k = 0; k <= spp-1; k += 1) {
      _return0 = data_array[i];
      val = _return0;
      {
         //PIPS generated variable
         int pos0;
         //PIPS generated variable
         fgUINT16 value0;
         pos0 = k;
         value0 = val;
         vector_array[pos0] = value0;
      }
      i++;
   }
}
void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   i = pos*spp;
   for(k = 0; k <= spp-1; k += 1) {
      val = flgr_get_array_fgUINT16(vector_array, k);
      flgr_set_array_fgUINT16(data_array, i, val);
      i++;
   }
}
void flgr_set_data_array_vector_fgUINT16(fgUINT16 *data_array, fgUINT16 *vector_array, int spp, int pos)
{
   register fgUINT16 val;
   register int i, k;
   //PIPS generated variable
   fgUINT16 _return0;
   i = pos*spp;
   for(k = 0; k <= spp-1; k += 1) {
      _return0 = vector_array[k];
      val = _return0;
      {
         //PIPS generated variable
         int pos0;
         //PIPS generated variable
         fgUINT16 value0;
         pos0 = i;
         value0 = val;
         data_array[pos0] = value0;
      }
      i++;
   }
}
void flgr2d_apply_raster_scan_method_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Vector *vec = flgr_vector_create(nhb->spp, nhb->type);
   int i, j;
   int w = nhb->size_x;
   int h = nhb->size_y;
   flgr_vector_populate_from_scalar_fgUINT16(vec, 0);
   for(j = w/2+1; j <= w-1; j += 1)
      flgr2d_set_data_vector_fgUINT16(nhb, h/2, j, vec);
   for(i = h/2+1; i <= h-1; i += 1)
      for(j = 0; j <= w-1; j += 1)
         flgr2d_set_data_vector_fgUINT16(nhb, i, j, vec);
   flgr_vector_destroy(vec);
   return;
}
void flgr2d_apply_raster_scan_method_fgUINT16(FLGR_Data2D *nhb)
{
   FLGR_Vector *vec;
   int i, j;
   int w;
   int h;
   //PIPS generated variable
   FLGR_Vector *_return0;
   //PIPS generated variable
   FLGR_Ret _return1;
   //PIPS generated variable
   int _return2;
   //PIPS generated variable
   FLGR_Ret _return3;
   //PIPS generated variable
   void *_return4, *_return5;
   {
      //PIPS generated variable
      int spp0;
      //PIPS generated variable
      FLGR_Type type0;
      spp0 = nhb->spp;
      type0 = nhb->type;
      {
         FLGR_Vector *vct;
         if (type0==FLGR_UINT8)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_UINT16)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_UINT32)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_UINT64)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_INT8)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_INT16)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_INT32)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_INT64)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_FLOAT32)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_FLOAT64)
            _return3 = FLGR_RET_OK;
         else if (type0==FLGR_BIT)
            _return3 = FLGR_RET_OK;
         else
            _return3 = FLGR_RET_TYPE_UNKNOWN;
         if (_return3!=FLGR_RET_OK) {
            fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""unknwon type\n", "./fulguro-included.h", 1130, __FUNCTION__);
            _return0 = (void *) 0;
         }
         else
            if (spp0<1) {
               fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Sample Per Pixel (spp) cannot be < 1\n", "./fulguro-included.h", 1135, __FUNCTION__);
               _return0 = (void *) 0;
            }
            else {
               {
                  //PIPS generated variable
                  int I_0;
                  I_0 = sizeof(FLGR_Vector);
                  {
                     void *tmp = malloc(I_0);
                     if (tmp==(void *) 0) {
                        fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Could not allocate data, returning NULL pointer !\n", "./fulguro-included.h", 1118, __FUNCTION__);
                        _return4 = (void *) 0;
                     }
                     else
                        _return4 = tmp;
                  }
               }
               vct = _return4;
               if (type0==FLGR_BIT)
                  _return2 = 1;
               else if (type0==FLGR_UINT8)
                  _return2 = sizeof(fgUINT8)<<3;
               else if (type0==FLGR_UINT16)
                  _return2 = sizeof(fgUINT16)<<3;
               else if (type0==FLGR_UINT32)
                  _return2 = sizeof(fgUINT32)<<3;
               else if (type0==FLGR_UINT64)
                  _return2 = sizeof(fgUINT64)<<3;
               else if (type0==FLGR_INT8)
                  _return2 = sizeof(fgINT8)<<3;
               else if (type0==FLGR_INT16)
                  _return2 = sizeof(fgINT16)<<3;
               else if (type0==FLGR_INT32)
                  _return2 = sizeof(fgINT32)<<3;
               else if (type0==FLGR_INT64)
                  _return2 = sizeof(fgINT64)<<3;
               else if (type0==FLGR_FLOAT32)
                  _return2 = sizeof(fgFLOAT32)<<3;
               else if (type0==FLGR_FLOAT64)
                  _return2 = sizeof(fgFLOAT64)<<3;
               else
                  _return2 = FLGR_RET_TYPE_UNKNOWN;
               vct->bps = _return2;
               vct->spp = spp0;
               vct->type = type0;
               {
                  //PIPS generated variable
                  int I_1;
                  I_1 = spp0*vct->bps/8+16;
                  {
                     void *tmp = malloc(I_1);
                     if (tmp==(void *) 0) {
                        fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Could not allocate data, returning NULL pointer !\n", "./fulguro-included.h", 1118, __FUNCTION__);
                        _return5 = (void *) 0;
                     }
                     else
                        _return5 = tmp;
                  }
               }
               vct->array = _return5;
               if (vct->array==(void *) 0) {
                  fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Allocation error !\n", "./fulguro-included.h", 1148, __FUNCTION__);
                  free(vct);
                  _return0 = (void *) 0;
               }
               else
                  _return0 = vct;
            }
      }
   }
   vec = _return0;
   w = nhb->size_x;
   h = nhb->size_y;
   {
      //PIPS generated variable
      fgUINT16 scalar0;
      scalar0 = 0;
      {
         int k;
         fgUINT16 *vctar = (fgUINT16 *) vec->array;
         for(k = 0; k <= vec->spp-1; k += 1) {
            //PIPS generated variable
            int pos0;
            //PIPS generated variable
            fgUINT16 value0;
            pos0 = k;
            value0 = scalar0;
            vctar[pos0] = value0;
         }
      }
   }
   for(j = w/2+1; j <= w-1; j += 1) {
      //PIPS generated variable
      int row0, col0;
      row0 = h/2;
      col0 = j;
      {
         fgUINT16 *array_s;
         fgUINT16 *array_d;
         array_s = (fgUINT16 *) vec->array;
         array_d = (fgUINT16 *) (nhb->array)[row0];
         {
            //PIPS generated variable
            int spp0, pos0;
            spp0 = vec->spp;
            pos0 = col0;
            {
               register fgUINT16 val;
               register int i, k;
               //PIPS generated variable
               fgUINT16 _return0;
               i = pos0*spp0;
               for(k = 0; k <= spp0-1; k += 1) {
                  _return0 = array_s[k];
                  val = _return0;
                  {
                     //PIPS generated variable
                     int pos0_;
                     //PIPS generated variable
                     fgUINT16 value0;
                     pos0_ = i;
                     value0 = val;
                     array_d[pos0_] = value0;
                  }
                  i++;
               }
            }
         }
      }
   }
   for(i = h/2+1; i <= h-1; i += 1)
      for(j = 0; j <= w-1; j += 1) {
         //PIPS generated variable
         int row1, col1;
         row1 = i;
         col1 = j;
         {
            fgUINT16 *array_s;
            fgUINT16 *array_d;
            array_s = (fgUINT16 *) vec->array;
            array_d = (fgUINT16 *) (nhb->array)[row1];
            {
               //PIPS generated variable
               int spp0, pos0;
               spp0 = vec->spp;
               pos0 = col1;
               {
                  register fgUINT16 val;
                  register int i, k;
                  //PIPS generated variable
                  fgUINT16 _return0;
                  i = pos0*spp0;
                  for(k = 0; k <= spp0-1; k += 1) {
                     _return0 = array_s[k];
                     val = _return0;
                     {
                        //PIPS generated variable
                        int pos0_;
                        //PIPS generated variable
                        fgUINT16 value0;
                        pos0_ = i;
                        value0 = val;
                        array_d[pos0_] = value0;
                     }
                     i++;
                  }
               }
            }
         }
      }
   if (vec==(void *) 0) {
      fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Null object\n", "./fulguro-included.h", 1068, __FUNCTION__);
      _return1 = FLGR_RET_NULL_OBJECT;
   }
   else
      if (vec->array==(void *) 0) {
         fprintf(stderr, "ERROR: File %s, Line %d, Function %s: ""Vector array is null\n", "./fulguro-included.h", 1073, __FUNCTION__);
         _return1 = FLGR_RET_NULL_OBJECT;
      }
      else {
         {
            //PIPS generated variable
            void *P_4;
            P_4 = vec->array;
            free(P_4);
         }
         free(vec);
         _return1 = FLGR_RET_OK;
      }
   _return1;
   return;
}

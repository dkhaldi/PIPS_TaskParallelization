
PRINT CODE for AddNoise

void AddNoise(int ny, int nx, Cplfloat pt_in[ny][nx], float Sigma2, Cplfloat pt_out[ny][nx])
{
   int ix, iy;
   double u, A, v, B;
   
   // MOTIF 
   u = 0;
   for(iy = 0; iy <= ny-1; iy += 1)
      for(ix = 0; ix <= nx-1; ix += 1) {
         while (u==0||u>1)
            u = rand()/32768.;
         A = sqrt(-2.*log(u));
         v = rand()/32768.;
         B = 2.*3.141592653589793238*v;
         A = 1.0;
         v = 1.0;
         B = 1.0;

         pt_out[iy][ix].re = pt_in[iy][ix].re+Sigma2*A*cos(B);
         pt_out[iy][ix].im = pt_in[iy][ix].im+Sigma2*A*sin(B);
         u = 0;
      }
}

PRINT CUMULATED EFFECTS for AddNoise

//             <may be read   >: Sigma2 pt_in[*][*].im pt_in[*][*].re 
//                               _RANDOM_EFFECTS:GEN_SEED
//             <may be written>: pt_out[*][*].im pt_out[*][*].re 
//                               _RANDOM_EFFECTS:GEN_SEED
//             <    is read   >: nx ny
void AddNoise(int ny, int nx, Cplfloat pt_in[ny][nx], float Sigma2, Cplfloat pt_out[ny][nx])
{
   int ix, iy;
   double u, A, v, B;
//             <    is written>: u
   
   // MOTIF 
   u = 0;
//             <may be read   >: A B Sigma2 ix iy nx pt_in[*][*].im 
//                               pt_in[*][*].re u v 
//                               _RANDOM_EFFECTS:GEN_SEED
//             <may be written>: A B ix pt_out[*][*].im 
//                               pt_out[*][*].re u v 
//                               _RANDOM_EFFECTS:GEN_SEED
//             <    is read   >: ny
//             <    is written>: iy
   for(iy = 0; iy <= ny-1; iy += 1)
//             <may be read   >: A B Sigma2 ix iy pt_in[*][*].im 
//                               pt_in[*][*].re u v 
//                               _RANDOM_EFFECTS:GEN_SEED
//             <may be written>: A B pt_out[*][*].im pt_out[*][*].re u
//                               v _RANDOM_EFFECTS:GEN_SEED
//             <    is read   >: nx ny
//             <    is written>: ix
      for(ix = 0; ix <= nx-1; ix += 1) {
//             <may be read   >: nx ny _RANDOM_EFFECTS:GEN_SEED
//             <may be written>: u _RANDOM_EFFECTS:GEN_SEED
//             <    is read   >: u
         while (u==0||u>1)
//             <    is read   >: nx ny _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: u _RANDOM_EFFECTS:GEN_SEED
            u = rand()/32768.;
//             <    is read   >: nx ny u
//             <    is written>: A
         A = sqrt(-2.*log(u));
//             <    is read   >: nx ny _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: v _RANDOM_EFFECTS:GEN_SEED
         v = rand()/32768.;
//             <    is read   >: nx ny v
//             <    is written>: B
         B = 2.*3.141592653589793238*v;
//             <    is read   >: nx ny
//             <    is written>: A
         A = 1.0;
//             <    is read   >: nx ny
//             <    is written>: v
         v = 1.0;
//             <    is read   >: nx ny
//             <    is written>: B
         B = 1.0;
//             <may be read   >: pt_in[*][*].re
//             <may be written>: pt_out[*][*].re
//             <    is read   >: A B Sigma2 ix iy nx ny

         pt_out[iy][ix].re = pt_in[iy][ix].re+Sigma2*A*cos(B);
//             <may be read   >: pt_in[*][*].im
//             <may be written>: pt_out[*][*].im
//             <    is read   >: A B Sigma2 ix iy nx ny
         pt_out[iy][ix].im = pt_in[iy][ix].im+Sigma2*A*sin(B);
//             <    is read   >: nx ny
//             <    is written>: u
         u = 0;
      }
}

PRINT REGIONS for AddNoise


//  <Sigma2-R-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <pt_in[PHI1][PHI2].im-R-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_in[PHI1][PHI2].re-R-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_out[PHI1][PHI2].im-W-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_out[PHI1][PHI2].re-W-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-EXACT-{}>

void AddNoise(int ny, int nx, Cplfloat pt_in[ny][nx], float Sigma2, Cplfloat pt_out[ny][nx])
{
   int ix, iy;
   double u, A, v, B;

//  <u-W-EXACT-{}>

   
   // MOTIF 
   u = 0;

//  <A-R-EXACT-{}>
//  <A-W-EXACT-{}>
//  <B-R-EXACT-{}>
//  <B-W-EXACT-{}>
//  <Sigma2-R-EXACT-{}>
//  <ix-R-EXACT-{}>
//  <ix-W-EXACT-{}>
//  <iy-R-EXACT-{}>
//  <iy-W-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <pt_in[PHI1][PHI2].im-R-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_in[PHI1][PHI2].re-R-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_out[PHI1][PHI2].im-W-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <pt_out[PHI1][PHI2].re-W-MAY-{0<=PHI1, PHI1+1<=ny, 0<=PHI2,
//    PHI2+1<=nx}>
//  <u-R-EXACT-{}>
//  <u-W-EXACT-{}>
//  <v-R-EXACT-{}>
//  <v-W-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-EXACT-{}>

   for(iy = 0; iy <= ny-1; iy += 1)

//  <A-R-EXACT-{}>
//  <A-W-EXACT-{}>
//  <B-R-EXACT-{}>
//  <B-W-EXACT-{}>
//  <Sigma2-R-EXACT-{}>
//  <ix-R-EXACT-{}>
//  <ix-W-EXACT-{}>
//  <iy-R-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <pt_in[PHI1][PHI2].im-R-MAY-{PHI1==iy, 0<=PHI2, PHI2+1<=nx, 0<=iy,
//    iy+1<=ny}>
//  <pt_in[PHI1][PHI2].re-R-MAY-{PHI1==iy, 0<=PHI2, PHI2+1<=nx, 0<=iy,
//    iy+1<=ny}>
//  <pt_out[PHI1][PHI2].im-W-MAY-{PHI1==iy, 0<=PHI2, PHI2+1<=nx,
//    0<=iy, iy+1<=ny}>
//  <pt_out[PHI1][PHI2].re-W-MAY-{PHI1==iy, 0<=PHI2, PHI2+1<=nx,
//    0<=iy, iy+1<=ny}>
//  <u-R-EXACT-{}>
//  <u-W-EXACT-{}>
//  <v-R-EXACT-{}>
//  <v-W-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-EXACT-{}>

      for(ix = 0; ix <= nx-1; ix += 1) {

//  <nx-R-MAY-{}>
//  <ny-R-MAY-{}>
//  <u-R-EXACT-{}>
//  <u-W-MAY-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-MAY-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-MAY-{}>

         while (u==0||u>1)

//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <u-W-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-EXACT-{}>

            u = rand()/32768.;

//  <A-W-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <u-R-EXACT-{}>

         A = sqrt(-2.*log(u));

//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <v-W-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-R-EXACT-{}>
//  <_RANDOM_EFFECTS:GEN_SEED-W-EXACT-{}>

         v = rand()/32768.;

//  <B-W-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <v-R-EXACT-{}>

         B = 2.*3.141592653589793238*v;

//  <A-W-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>

         A = 1.0;

//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <v-W-EXACT-{}>

         v = 1.0;

//  <B-W-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>

         B = 1.0;

//  <A-R-EXACT-{}>
//  <B-R-EXACT-{}>
//  <Sigma2-R-EXACT-{}>
//  <ix-R-EXACT-{}>
//  <iy-R-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <pt_in[PHI1][PHI2].re-R-EXACT-{PHI1==iy, PHI2==ix, 0<=ix,
//    ix+1<=nx, 0<=iy, iy+1<=ny}>
//  <pt_out[PHI1][PHI2].re-W-EXACT-{PHI1==iy, PHI2==ix, 0<=ix,
//    ix+1<=nx, 0<=iy, iy+1<=ny}>


         pt_out[iy][ix].re = pt_in[iy][ix].re+Sigma2*A*cos(B);

//  <A-R-EXACT-{}>
//  <B-R-EXACT-{}>
//  <Sigma2-R-EXACT-{}>
//  <ix-R-EXACT-{}>
//  <iy-R-EXACT-{}>
//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <pt_in[PHI1][PHI2].im-R-EXACT-{PHI1==iy, PHI2==ix, 0<=ix,
//    ix+1<=nx, 0<=iy, iy+1<=ny}>
//  <pt_out[PHI1][PHI2].im-W-EXACT-{PHI1==iy, PHI2==ix, 0<=ix,
//    ix+1<=nx, 0<=iy, iy+1<=ny}>

         pt_out[iy][ix].im = pt_in[iy][ix].im+Sigma2*A*sin(B);

//  <nx-R-EXACT-{}>
//  <ny-R-EXACT-{}>
//  <u-W-EXACT-{}>

         u = 0;
      }
}

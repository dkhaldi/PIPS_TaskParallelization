void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, k, l;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 3/2; i <= isi-3/2-1; i += 1)
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         new_image[i][j] = 0.;
         for(k = 0; k <= 2; k += 1)
            for(l = 0; l <= 2; l += 1)
               new_image[i][j] += image[i+k-3/2][j+l-3/2]*kernel[k][l];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, k, l;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 3/2; i <= isi-3/2-1; i += 1)
      for(j = 3/2; j <= isj-3/2-1; j += 1) {
         new_image[i][j] = 0.;
         for(k = 0; k <= 2; k += 1)
            for(l = 0; l <= 2; l += 1)
               new_image[i][j] += image[i+k-3/2][j+l-3/2]*kernel[k][l];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, i, j;

l99998:
   for(i = 0; i <= isi-1; i += 1)
l99993:
      for(I_0 = 0; I_0 <= (isj-1)/4; I_0 += 1)
l99992:
         for(j = 4*I_0; j <= pips_min(2, isj-1, 4*I_0+3); j += 1)
            new_image[i][j] = image[i][j];
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, i, j;

l99998:
   for(i = 0; i <= isi-1; i += 1)
l99993:
      for(I_0 = 0; I_0 <= (isj-1)/4; I_0 += 1)
l99992:
         for(j = 4*I_0; j <= pips_min(2, isj-1, 4*I_0+3); j += 1)
            new_image[i][j] = image[i][j];
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, i, j;

l99998:
   for(i = 1; i <= isi; i += 1)
l99993:
      for(I_0 = 1; I_0 <= (isj-1)/4+1; I_0 += 1)
l99992:
         for(j = 1; j <= pips_min(2, isj-1, 4*I_0-1)-4*I_0+5; j += 1)
            new_image[i-1][4*I_0+j-5] = image[i-1][4*I_0+j-5];
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_1, k, l;
l99996:
   for(k = 0; k <= 2; k += 1)
l99991:
      for(I_1 = 0; I_1 <= 0; I_1 += 1)
l99999:
         for(l = 0; l <= 2; l += 1)
            new_image[i][j] = new_image[i][j]+image[i+k-1][j+l-1]*kernel[k][l];
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_1, k, l;
l99996:
   for(k = 0; k <= 2; k += 1) {
l99999:
      for(l = 0; l <= 2; l += 1)
         new_image[i][j] = new_image[i][j]+image[i+k-1][j+l-1]*kernel[k][l];
      I_1 = 0+1;
   }
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_1, k, l;
l99996:   ;
   new_image[i][j] = new_image[i][j]+image[1+i-2][1+j-2]*kernel[1-1][1-1];
   new_image[i][j] = new_image[i][j]+image[1+i-2][2+j-2]*kernel[1-1][2-1];
   new_image[i][j] = new_image[i][j]+image[1+i-2][3+j-2]*kernel[1-1][3-1];
   I_1 = 1;
   new_image[i][j] = new_image[i][j]+image[2+i-2][1+j-2]*kernel[2-1][1-1];
   new_image[i][j] = new_image[i][j]+image[2+i-2][2+j-2]*kernel[2-1][2-1];
   new_image[i][j] = new_image[i][j]+image[2+i-2][3+j-2]*kernel[2-1][3-1];
   I_1 = 1;
   new_image[i][j] = new_image[i][j]+image[3+i-2][1+j-2]*kernel[3-1][1-1];
   new_image[i][j] = new_image[i][j]+image[3+i-2][2+j-2]*kernel[3-1][2-1];
   new_image[i][j] = new_image[i][j]+image[3+i-2][3+j-2]*kernel[3-1][3-1];
   I_1 = 1;
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, k, l;
   //PIPS generated variable
   int I_0, I_1;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i, j, image, kernel, new_image);
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, i, j;

l99998:
   for(i = 1; i <= isi; i += 1)
l99993:
      for(I_0 = 1; I_0 <= 1+(isj-1)/4; I_0 += 1)
l99992:
         for(j = 1; j <= 5+(pips_min(2, isj-1, 4*I_0-1)-4*I_0); j += 1)
            new_image[i-1][j+4*I_0-5] = image[i-1][j+4*I_0-5];
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, i, j;

l99998:
   for(i = 1; i <= isi; i += 1)
l99993:
      for(I_0 = 1; I_0 <= 1+(isj-1)/4; I_0 += 1)
l99992:
         for(j = 1; j <= 5+(pips_min(2, isj-1, 4*I_0-1)-4*I_0); j += 1)
            new_image[i-1][j+4*I_0-5] = image[i-1][j+4*I_0-5];
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, j;
   //PIPS generated variable
   int i0;

l99998:
   for(i0 = 1; i0 <= isi; i0 += 1)
l99993:
      for(I_0 = 1; I_0 <= 1+(isj-1)/4; I_0 += 1)
l99992:
         for(j = 1; j <= 5+(pips_min(2, isj-1, 4*I_0-1)-4*I_0); j += 1)
            new_image[i0-1][j+4*I_0-5] = image[i0-1][j+4*I_0-5];
}
void convol3x3_l99998(int isi, int isj, float image[isi][isj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_0, j;
   //PIPS generated variable
   int i0;

l99998:
   for(i0 = 1; i0 <= isi; i0 += 1)
l99993:
      for(I_0 = 1; I_0 <= 1+(isj-1)/4; I_0 += 1)
l99992:
         for(j = 1; j <= 5+(pips_min(2, isj-1, 4*I_0-1)-4*I_0); j += 1)
            new_image[i0-1][j+4*I_0-5] = image[i0-1][j+4*I_0-5];
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_1, k, l;
l99996:   ;
   new_image[i][j] = new_image[i][j]+image[i-1][j-1]*kernel[0][0];
   new_image[i][j] = new_image[i][j]+image[i-1][j]*kernel[0][1];
   new_image[i][j] = new_image[i][j]+image[i-1][1+j]*kernel[0][2];
   I_1 = 1;
   new_image[i][j] = new_image[i][j]+image[i][j-1]*kernel[1][0];
   new_image[i][j] = new_image[i][j]+image[i][j]*kernel[1][1];
   new_image[i][j] = new_image[i][j]+image[i][1+j]*kernel[1][2];
   I_1 = 1;
   new_image[i][j] = new_image[i][j]+image[1+i][j-1]*kernel[2][0];
   new_image[i][j] = new_image[i][j]+image[1+i][j]*kernel[2][1];
   new_image[i][j] = new_image[i][j]+image[1+i][1+j]*kernel[2][2];
   I_1 = 1;
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int I_1, k, l;
l99996:   ;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j-1], kernel[0][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j], kernel[0][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][1+j], kernel[0][2]);
   I_1 = 1;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j-1], kernel[1][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j], kernel[1][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][1+j], kernel[1][2]);
   I_1 = 1;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j-1], kernel[2][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j], kernel[2][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][1+j], kernel[2][2]);
   I_1 = 1;
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   //PIPS generated variable
   int I_10, I_11, I_12;
l99996:   ;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j-1], kernel[0][0]);
   I_10 = 1;
   I_11 = 1;
   I_12 = 1;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j], kernel[0][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][1+j], kernel[0][2]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j-1], kernel[1][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j], kernel[1][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][1+j], kernel[1][2]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j-1], kernel[2][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j], kernel[2][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][1+j], kernel[2][2]);
}
void convol3x3_l99996(int isi, int isj, int i, int j, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
l99996:   ;
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j-1], kernel[0][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][j], kernel[0][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i-1][1+j], kernel[0][2]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j-1], kernel[1][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][j], kernel[1][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[i][1+j], kernel[1][2]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j-1], kernel[2][0]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][j], kernel[2][1]);
   new_image[i][j] = __PIPS_SAC_MULADD(new_image[i][j], image[1+i][1+j], kernel[2][2]);
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, k, l;
   //PIPS generated variable
   int I_0, I_1;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i, j, image, kernel, new_image);
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, k, l;
   //PIPS generated variable
   int I_0, I_1;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i = 1; i <= isi-2; i += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i, j, image, kernel, new_image);
         new_image[i][j] = new_image[i][j]/9;
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j;
   //PIPS generated variable
   int i0;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i0 = 1; i0 <= isi-2; i0 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i0][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i0, j, image, kernel, new_image);
         new_image[i0][j] = new_image[i0][j]/9;
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j;
   //PIPS generated variable
   int i0;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i0 = 1; i0 <= isi-2; i0 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i0][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i0, j, image, kernel, new_image);
         new_image[i0][j] = new_image[i0][j]/9;
      }
}
void convol3x3(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int j;
   //PIPS generated variable
   int i0;
l99998:   convol3x3_l99998(isi, isj, image, new_image);

l99994:
   for(i0 = 1; i0 <= isi-2; i0 += 1)
l99995:
      for(j = 1; j <= isj-2; j += 1) {
         new_image[i0][j] = 0.;
l99996:         convol3x3_l99996(isi, isj, i0, j, image, kernel, new_image);
         new_image[i0][j] = new_image[i0][j]/9;
      }
}

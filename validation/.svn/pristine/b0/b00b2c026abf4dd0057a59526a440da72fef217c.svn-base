      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) RETURN                                             0023
      IF (INCX.EQ.1.AND.INCY.EQ.1) GOTO 20                              0024
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      IX = 1                                                            0029
      IY = 1                                                            0030
      DO 10 I = 1, SIZE                                                 0031
         SY(IY) = SY(IY)+SA*SX(IX)                                      0032
         IX = IX+INCX                                                   0033
         IY = IY+INCY                                                   0034
10       CONTINUE                                                       0035
      RETURN
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20    DO 50 I = 1, SIZE                                                 0047
         SY(I) = SY(I)+SA*SX(I)                                         0048
50       CONTINUE                                                       0049
c      PRINT *, 'aft'
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0029
         IY = 1                                                         0030
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
            IX = IX+INCX                                                0033
            IY = IY+INCY                                                0034
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0029
         IY = 1                                                         0030
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
            IX = IX+INCX                                                0033
            IY = IY+INCY                                                0034
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0029
         IY = 1                                                         0030
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
            IX = IX+INCX                                                0033
            IY = IY+INCY                                                0034
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0029
         IY = 1                                                         0030
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
            IX = IX+INCX                                                0033
            IY = IY+INCY                                                0034
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY, M, MP1
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         IX = 1                                                         0029
         IY = 1                                                         0030
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
            IX = IX+INCX                                                0033
            IY = IY+INCY                                                0034
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY
      REAL*4 SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (INCX.EQ.1.AND.INCY.EQ.1) THEN                             0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, SIZE                                              0047
            SY(I) = SY(I)+SA*SX(I)                                      0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         DO 10 I = 1, SIZE                                              0031
            SY(IY) = SY(IY)+SA*SX(IX)                                   0032
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER I, INCX, INCY, IX, IY
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSEIF (1.EQ.1.AND.1.EQ.1) THEN                                   0023
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       DO 50 I = 1, 1000                                              0047
            F_0 = SA*SX(I)
            SY(I) = SY(I)+F_0                                           0048
50          CONTINUE                                                    0049
c      PRINT *, 'aft'
      ELSE
c
c        code for unequal increments or equal increments
c          not equal to 1
c
         DO 10 I = 1, 1000                                              0031
            F_1 = SA*SX(IX)
            SY(IY) = SY(IY)+F_1                                         0032
10          CONTINUE                                                    0035
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       LU_NUB0 = 1000
         LU_IB0 = 0
         LU_IND0 = 0
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
            F_0 = SA*SX(LU_IND0+1)
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_0
            F_0 = SA*SX(LU_IND0+2)
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_0
            F_0 = SA*SX(LU_IND0+3)
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_0
            F_0 = SA*SX(LU_IND0+4)
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_0
99998       CONTINUE
         I = 1001
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND1, LU_IB1, LU_NUB1, LU_IND0, LU_IB0, LU_NUB0, I, 
     &INCX, INCY, IX, IY
      REAL*4 F_1, F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
      INCX = 1                                                          0020
      INCY = 1                                                          0021
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       LU_NUB0 = 1000
         LU_IB0 = 0
         LU_IND0 = 0
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
            F_0 = SA*SX(1+LU_IND0)
            SY(1+LU_IND0) = SY(1+LU_IND0)+F_0
            F_0 = SA*SX(2+LU_IND0)
            SY(2+LU_IND0) = SY(2+LU_IND0)+F_0
            F_0 = SA*SX(3+LU_IND0)
            SY(3+LU_IND0) = SY(3+LU_IND0)+F_0
            F_0 = SA*SX(4+LU_IND0)
            SY(4+LU_IND0) = SY(4+LU_IND0)+F_0
99998       CONTINUE
         I = 1001
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND0
      REAL*4 F_0, SX(1:SIZE), SY(1:SIZE), SA

      SA = 3                                                            0019
c
      IF (SA.EQ.0.0) THEN                                               0023
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND0 = 0, 999, 4
            F_0 = SA*SX(LU_IND0+1)
            SY(LU_IND0+1) = SY(LU_IND0+1)+F_0
            F_0 = SA*SX(LU_IND0+2)
            SY(LU_IND0+2) = SY(LU_IND0+2)+F_0
            F_0 = SA*SX(LU_IND0+3)
            SY(LU_IND0+3) = SY(LU_IND0+3)+F_0
            F_0 = SA*SX(LU_IND0+4)
            SY(LU_IND0+4) = SY(LU_IND0+4)+F_0
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
      SUBROUTINE SAXPY(SX, SY)
      INTEGER*4 SIZE
      PARAMETER (SIZE = 1000)
      INTEGER LU_IND00
      REAL*4 SA0, F_03, F_02, F_01, F_00, SX(1:SIZE), SY(1:SIZE)

      SA0 = 3                                                           0019
c
      IF (SA0.EQ.0.0) THEN                                              0023
      ELSE
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c



c 20   PRINT *, 'bef'
20       CONTINUE
99999    CONTINUE
         DO 99998 LU_IND00 = 0, 999, 4
            F_00 = SA0*SX(LU_IND00+1)
            SY(LU_IND00+1) = SY(LU_IND00+1)+F_00
            F_01 = SA0*SX(LU_IND00+2)
            SY(LU_IND00+2) = SY(LU_IND00+2)+F_01
            F_02 = SA0*SX(LU_IND00+3)
            SY(LU_IND00+3) = SY(LU_IND00+3)+F_02
            F_03 = SA0*SX(LU_IND00+4)
            SY(LU_IND00+4) = SY(LU_IND00+4)+F_03
99998       CONTINUE
c      PRINT *, 'aft'
      ENDIF
      END
nsucc = 2 
Result = if (sa == 0.0) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}

Result before = if (sa == 0.0) {
 goto 00000;
}

Result after = if (sa == 0.0) {
 goto 00000;
}

nsucc = 2 
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {

succ1 must be reached by GOTO
No endif
Result = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result before = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

Result after = if (sa == 0.0) {
 goto 00000;
}
if ((incx == 1) && (incy == 1)) {
 goto ;
}

nsucc = 1 
nsucc = 1 
nsucc = 0 
/* C pretty print for module SAXPY. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
saxpy (float sx[1000], float sy[1000])
{
  static const int size = 1000;
  v4sf vec30;
  v4sf vec20;
  v4sf vec10;
  v4sf vec00;
  float sa0;
  int lu_ind00;

  sa0 = 3;
  if (sa0 == 0.0)
    {
      ;
    }
  else
    {
      ;
      ;
      for (lu_ind00 = 0; lu_ind00 <= 999; lu_ind00 += 4)
	{
	  simd_load_v4sf (vec30, sy[(1 + lu_ind00) - 1]);
	  simd_load_v4sf (vec20, sx[(1 + lu_ind00) - 1]);
	  simd_mulps (vec00, vec10, vec20);
	  simd_addps (vec30, vec30, vec00);
	  continue;
	  simd_store_v4sf (vec30, sy[(1 + lu_ind00) - 1]);
	}
      ;
    }
}


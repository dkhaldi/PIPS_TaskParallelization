
Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)
l300:
      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= ksi-1; ki += 1)
l100:
            for(kj = 0; kj <= ksj-1; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2][j+kj-ksj/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}

After partial evaluation:

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

after privatization


after paralellization

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

#pragma omp parallel for private(j)
   for(i = 0; i <= 511; i += 1)
#pragma omp parallel for 
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];
l400:   launch_microcode1(isi, isj, ksi, ksj, image, kernel, new_image);
}
void microcode(int isi, int isj, int ksi, int ksj, int i, float image[isi][isj], float kernel[ksi][ksj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j, ki, kj;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
l300:
         for(j = 1; j <= 510; j += 1) {
            new_image[i_1][j] = 0.;
l200:
            for(ki = 0; ki <= 2; ki += 1)
l100:
               for(kj = 0; kj <= 2; kj += 1)
                  new_image[i_1][j] = new_image[i_1][j]+image[i_1+ki-1][j+kj-1]*kernel[ki][kj];
            new_image[i_1][j] = new_image[i_1][j]/9;
         }
   }
}

After double unrolling


after code cleaning

void microcode(int isi, int isj, int ksi, int ksj, int i, float image[isi][isj], float kernel[ksi][ksj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j, ki, kj;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
l300:
         for(j = 1; j <= 510; j += 1) {
            new_image[i_1][j] = 0.;
l200:            ;
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+0-1][j+0-1]*kernel[0][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+0-1][j+1-1]*kernel[0][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+0-1][j+2-1]*kernel[0][2];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1-1][j+0-1]*kernel[1][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1-1][j+1-1]*kernel[1][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1-1][j+2-1]*kernel[1][2];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+2-1][j+0-1]*kernel[2][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+2-1][j+1-1]*kernel[2][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+2-1][j+2-1]*kernel[2][2];
            new_image[i_1][j] = new_image[i_1][j]/9;
         }
   }
}
void microcode(int isi, int isj, int ksi, int ksj, int i, float image[isi][isj], float kernel[ksi][ksj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j, ki, kj;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            new_image[i_1][j] = 0.;
            new_image[i_1][j] = new_image[i_1][j]+image[i_1-1][j-1]*kernel[0][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1-1][j]*kernel[0][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1-1][j+1]*kernel[0][2];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1][j-1]*kernel[1][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1][j]*kernel[1][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1][j+1]*kernel[1][2];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1][j-1]*kernel[2][0];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1][j]*kernel[2][1];
            new_image[i_1][j] = new_image[i_1][j]+image[i_1+1][j+1]*kernel[2][2];
            new_image[i_1][j] = new_image[i_1][j]/9;
         }
   }
}

After atomization of "microcode"

void microcode(int isi, int isj, int ksi, int ksj, int i, float image[isi][isj], float kernel[ksi][ksj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j, ki, kj;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            new_image[i_1][j] = 0.;
            F_0 = image[i_1-1][j-1]*kernel[0][0];
            new_image[i_1][j] = new_image[i_1][j]+F_0;
            F_1 = image[i_1-1][j]*kernel[0][1];
            new_image[i_1][j] = new_image[i_1][j]+F_1;
            F_2 = image[i_1-1][j+1]*kernel[0][2];
            new_image[i_1][j] = new_image[i_1][j]+F_2;
            F_3 = image[i_1][j-1]*kernel[1][0];
            new_image[i_1][j] = new_image[i_1][j]+F_3;
            F_4 = image[i_1][j]*kernel[1][1];
            new_image[i_1][j] = new_image[i_1][j]+F_4;
            F_5 = image[i_1][j+1]*kernel[1][2];
            new_image[i_1][j] = new_image[i_1][j]+F_5;
            F_6 = image[i_1+1][j-1]*kernel[2][0];
            new_image[i_1][j] = new_image[i_1][j]+F_6;
            F_7 = image[i_1+1][j]*kernel[2][1];
            new_image[i_1][j] = new_image[i_1][j]+F_7;
            F_8 = image[i_1+1][j+1]*kernel[2][2];
            new_image[i_1][j] = new_image[i_1][j]+F_8;
            new_image[i_1][j] = new_image[i_1][j]/9;
         }
   }
}

After array to pointer conversion of "microcode"

int main()
{
   float image[512][512];
   float new_image[512][512];
   float kernel[3][3];

   int i, j, n;

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = 1;
   
   //     read *, image
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         image[i][j] = 1.;
   
   
   for(n = 0; n <= 19; n += 1) {
      //PIPS generated variable
      float (*p4a_var_new_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_kernel0)[3][3] = (float (*)[3][3]) 0;
      P4A_accel_malloc((void **) &p4a_var_kernel0, sizeof(float)*9);
      P4A_accel_malloc((void **) &p4a_var_image0, sizeof(float)*262144);
      P4A_accel_malloc((void **) &p4a_var_new_image0, sizeof(float)*262144);
      P4A_copy_to_accel_2d(sizeof(float), 3, 3, 3, 3, 0, 0, &kernel[0][0], *p4a_var_kernel0);
      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &image[0][0], *p4a_var_image0);
      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);

      convol(512, 512, *p4a_var_new_image0, *p4a_var_image0, 3, 3, *p4a_var_kernel0);
      P4A_copy_from_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);
      P4A_accel_free(p4a_var_kernel0);
      P4A_accel_free(p4a_var_image0);
      P4A_accel_free(p4a_var_new_image0);
   }

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         printf("%f ", new_image[i][j]);
   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 1;
}
void microcode(int isi, int isj, int ksi, int ksj, int i, float *image, float *kernel, float *new_image)
{
   // Declared by Pass Outlining
   int j, ki, kj;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            *(new_image+(j+i_1*isj)) = 0.;
            F_0 = *(image+(j-1+(i_1-1)*isj))**(kernel+0);
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_0;
            F_1 = *(image+(j+(i_1-1)*isj))**(kernel+1);
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_1;
            F_2 = *(image+(j+1+(i_1-1)*isj))**(kernel+2);
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_2;
            F_3 = *(image+(j-1+i_1*isj))**(kernel+ksj);
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_3;
            F_4 = *(image+(j+i_1*isj))**(kernel+(ksj+1));
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_4;
            F_5 = *(image+(j+1+i_1*isj))**(kernel+(ksj+2));
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_5;
            F_6 = *(image+(j-1+(i_1+1)*isj))**(kernel+2*ksj);
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_6;
            F_7 = *(image+(j+(i_1+1)*isj))**(kernel+(2*ksj+1));
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_7;
            F_8 = *(image+(j+1+(i_1+1)*isj))**(kernel+(2*ksj+2));
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_8;
            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))/9;
         }
   }
}
int main()
{
   float image[512][512];
   float new_image[512][512];
   float kernel[3][3];

   int i, j, n;

   for(i = 0; i <= 2; i += 1)
      for(j = 0; j <= 2; j += 1)
         kernel[i][j] = 1;
   
   //     read *, image
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         image[i][j] = 1.;
   
   
   for(n = 0; n <= 19; n += 1) {
      //PIPS generated variable
      float (*p4a_var_new_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_kernel0)[3][3] = (float (*)[3][3]) 0;
      P4A_accel_malloc((void **) &p4a_var_kernel0, sizeof(float)*9);
      P4A_accel_malloc((void **) &p4a_var_image0, sizeof(float)*262144);
      P4A_accel_malloc((void **) &p4a_var_new_image0, sizeof(float)*262144);
      P4A_copy_to_accel_2d(sizeof(float), 3, 3, 3, 3, 0, 0, &kernel[0][0], *p4a_var_kernel0);
      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &image[0][0], *p4a_var_image0);
      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);

      convol(512, 512, *p4a_var_new_image0, *p4a_var_image0, 3, 3, *p4a_var_kernel0);
      P4A_copy_from_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);
      P4A_accel_free(p4a_var_kernel0);
      P4A_accel_free(p4a_var_image0);
      P4A_accel_free(p4a_var_new_image0);
   }

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         printf("%f ", new_image[i][j]);
   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 1;
}

Printed file for "launch_microcode1!

void launch_microcode1(int isi, int isj, int ksi, int ksj, float image[isi][isj], float kernel[ksi][ksj], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int i;

l400:
   for(i = 1; i <= 510; i += 128)
      microcode(isi, isj, ksi, ksj, i, image, kernel, new_image);
}

Transformers for "convol"


//  T() {}

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   

//  T() {}

   int i, j, ki, kj;

//  T(i,j) {0<=i, i<=511}


   for(i = 0; i <= 511; i += 1)

//  T(j) {0<=j, j<=511}

      for(j = 0; j <= 511; j += 1)

//  T() {}

         new_image[i][j] = image[i][j];

//  T(i,isi,isj,j,ki,kj,ksi,ksj) {}

l400:   launch_microcode1(isi, isj, ksi, ksj, image, kernel, new_image);
}

Preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   float image[512][512];

//  P() {}

   float new_image[512][512];

//  P() {}

   float kernel[3][3];


//  P() {}

   int i, j, n;

//  P() {}


   for(i = 0; i <= 2; i += 1)

//  P(i,j) {0<=i, i<=2}

      for(j = 0; j <= 2; j += 1)

//  P(i,j) {0<=i, i<=2, 0<=j, j<=2}

         kernel[i][j] = 1;

//  P(i,j) {i==3, j==3}

   
   //     read *, image
   for(i = 0; i <= 511; i += 1)

//  P(i,j) {0<=i, i<=511}

      for(j = 0; j <= 511; j += 1)

//  P(i,j) {0<=i, i<=511, 0<=j, j<=511}

         image[i][j] = 1.;

//  P(i,j) {i==512, j==512}

   
   
   for(n = 0; n <= 19; n += 1) {
      //PIPS generated variable

//  P(i,j,n) {0<=n, n<=19}

      float (*p4a_var_new_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_image0)[512][512] = (float (*)[512][512]) 0, (*p4a_var_kernel0)[3][3] = (float (*)[3][3]) 0;

//  P(i,j,n) {0<=n, n<=19}

      P4A_accel_malloc((void **) &p4a_var_kernel0, sizeof(float)*9);

//  P(i,j,n) {}

      P4A_accel_malloc((void **) &p4a_var_image0, sizeof(float)*262144);

//  P(i,j,n) {}

      P4A_accel_malloc((void **) &p4a_var_new_image0, sizeof(float)*262144);

//  P(i,j,n) {}

      P4A_copy_to_accel_2d(sizeof(float), 3, 3, 3, 3, 0, 0, &kernel[0][0], *p4a_var_kernel0);

//  P(i,j,n) {}

      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &image[0][0], *p4a_var_image0);

//  P(i,j,n) {}

      P4A_copy_to_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);

//  P(i,j,n) {}



//  P(i,j,n) {}

      convol(512, 512, *p4a_var_new_image0, *p4a_var_image0, 3, 3, *p4a_var_kernel0);

//  P(i,j,n) {}

      P4A_copy_from_accel_2d(sizeof(float), 512, 512, 512, 512, 0, 0, &new_image[0][0], *p4a_var_new_image0);

//  P(i,j,n) {}

      P4A_accel_free(p4a_var_kernel0);

//  P(i,j,n) {}

      P4A_accel_free(p4a_var_image0);

//  P(i,j,n) {}

      P4A_accel_free(p4a_var_new_image0);
   }

//  P(i,j,n) {n==20}


   for(i = 0; i <= 511; i += 1)

//  P(i,j,n) {n==20, 0<=i, i<=511}

      for(j = 0; j <= 511; j += 1)

//  P(i,j,n) {n==20, 0<=i, i<=511, 0<=j, j<=511}

         printf("%f ", new_image[i][j]);

//  P(i,j,n) {i==512, j==512, n==20}

   //     print *, new_image
   //      print *, new_image (image_size/2, image_size/2)
   
   return 1;
}

After a last partial evaluation of "microcode"


//  P() {1<=i, i<=510}

void microcode(int isi, int isj, int ksi, int ksj, int i, float *image, float *kernel, float *new_image)
{
   // Declared by Pass Outlining

//  P() {1<=i, i<=510}

   int j, ki, kj;
   //PIPS generated variable

//  P() {1<=i, i<=510}

   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8;
   {
      //PIPS generated variable

//  P() {1<=i, i<=510}

      int i_1;

//  P() {1<=i, i<=510}

      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

         for(j = 1; j <= 510; j += 1) {

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {1<=j, j<=510}

            *(new_image+(j+i_1*isj)) = 0.;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_0 = *(image+(j+(i_1-1)*isj-1))**kernel;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_0;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_1 = *(image+(j+(i_1-1)*isj))**(kernel+1);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_1;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_2 = *(image+(j+(i_1-1)*isj+1))**(kernel+2);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_2;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_3 = *(image+(j+i_1*isj-1))**(kernel+ksj);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_3;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_4 = *(image+(j+i_1*isj))**(kernel+ksj+1);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_4;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_5 = *(image+(j+i_1*isj+1))**(kernel+ksj+2);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_5;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_6 = *(image+(j+(i_1+1)*isj-1))**(kernel+2*ksj);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_6;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_7 = *(image+(j+(i_1+1)*isj))**(kernel+2*ksj+1);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_7;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            F_8 = *(image+(j+(i_1+1)*isj+1))**(kernel+2*ksj+2);

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))+F_8;

//  P(i,i_1,isi,isj,j,ki,kj,ksi,ksj) {}

            *(new_image+(j+i_1*isj)) = *(new_image+(j+i_1*isj))/9;
         }
   }
}

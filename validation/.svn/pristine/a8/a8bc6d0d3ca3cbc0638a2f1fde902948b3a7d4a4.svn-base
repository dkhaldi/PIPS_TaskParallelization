original code
void P4A_accel_free(void *ptr)
{
   free(ptr);
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void P4A_copy_from_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   char *csrc = accel_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = d1_offset*element_size+(char *) host_address;
   char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = host_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = d1_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
int main(int argc, char *argv[])
{
   int n = atoi(argv[1]);
   // yes this is unreliable
   ab a[n];
   int i;
   for(i = 0; i <= n-1; i += 1)
      a[i].a = 1+(a[i].b = 1);
   test(n, a);
   for(i = 0; i <= n-1; i += 1) {
      printf("%d ", a[i].a);
      puts("\n");
   }
   return 0;
}
void test(int n, ab src[n])
{
   unsigned int i, j;
   for(i = 0; i <= n-1; i += 1)
      src[i].a = src[i].b = 3;
}
with r-w regions

//  <src[PHI1].a-W-EXACT-{0<=PHI1, PHI1+1<=n, 0<=n}>
//  <src[PHI1].b-W-EXACT-{0<=PHI1, PHI1+1<=n, 0<=n}>

void test(int n, ab src[n])
{
   unsigned int i, j;

//  <src[PHI1].a-W-EXACT-{0<=PHI1, PHI1+1<=n, 0<=n}>
//  <src[PHI1].b-W-EXACT-{0<=PHI1, PHI1+1<=n, 0<=n}>

   for(i = 0; i <= n-1; i += 1)

//  <src[PHI1].a-W-EXACT-{PHI1==i, 0<=i, i+1<=n, 0<=n}>
//  <src[PHI1].b-W-EXACT-{PHI1==i, 0<=i, i+1<=n, 0<=n}>

      src[i].a = src[i].b = 3;
}
isolated code
void test(int n, ab src[n])
{
   unsigned int i, j;
   {
      //PIPS generated variable
      ab (*src0)[n] = (ab (*)[n]) 0;
      if (n-1>0) {
         P4A_accel_malloc((void **) &src0, sizeof(src[0])*n);
         P4A_copy_to_accel_1d(sizeof(src[0]), n, n, 0, &src[0], *src0);

l99999:
         for(i = 0; i <= n-1; i += 1)
            (*src0)[i-0].a = (*src0)[i-0].b = 3;
         P4A_copy_from_accel_1d(sizeof(src[0]), n, n, 0, &src[0], *src0);
         P4A_accel_free(src0);
      }
   }
}


void STAP_PulseComp(int tv, float ptrin[tv], int tf, float ptrfiltre[tf], float ptrout[tv-tf+1])
{

   int i, j, k;
   float R, I;
   for(k = 0; k <= 31; k += 1)
#pragma omp parallel for private(I,R,j)
      for(i = 0; i <= tv-tf+1-1; i += 1) {
         R = 0.0;
         I = 0.0;
         for(j = 0; j <= tf-1; j += 1) {
            R += ptrin[i+j]*ptrfiltre[j]-ptrin[i+j]*ptrfiltre[j];
            I += ptrin[i+j]*ptrfiltre[j]+ptrin[i+j]*ptrfiltre[j];
         }
         ptrout[i] = R;
         ptrout[i] = I;
      }
}
int main()
{
   int tv = 95;
   int tf = 16;
   float in_pulse[5][32][95];
   float out_pulse[5][32][80];

   trt(tv, tf, in_pulse, out_pulse);
   return 0;
}
void trt(int tv, int tf, float in_pulse[5][32][95], float out_pulse[5][32][80])
{
   //int tv=95; int tf=16; 
   int lv = 20;
   int j, k, i;
   float filtre[16];
   
   //init_array();
   for(i = 0; i <= 89; i += 1)
#pragma omp parallel for private(k)
      for(j = 0; j <= 4; j += 1)
#pragma omp parallel for 
         for(k = 0; k <= 31; k += 1)
            STAP_PulseComp(tv, in_pulse[j][k], tf, filtre, out_pulse[j][k]);
}
void STAP_PulseComp(int tv, float ptrin[tv], int tf, float ptrfiltre[tf], float ptrout[tv-tf+1])
{

   int i, j, k;
   float R, I;
   for(k = 0; k <= 31; k += 1)
      p4a_launcher_STAP_PulseComp(tf, tv, ptrfiltre, ptrin, ptrout);
}
int main()
{
   int tv = 95;
   int tf = 16;
   float in_pulse[5][32][95];
   float out_pulse[5][32][80];

   trt(tv, tf, in_pulse, out_pulse);
   return 0;
}
void p4a_kernel_STAP_PulseComp(int tf, int tv, float I_0[1], float R_0[1], int i, float ptrfiltre[tf], float ptrin[tv], float ptrout[tv-tf+1])
{
   // Declared by Pass Outlining
   int j;
   // Declared as a patch variable by Pass Outlining
   float I, R;
   R = *R_0;
   I = *I_0;
   R = 0.0;
   I = 0.0;
   for(j = 0; j <= tf-1; j += 1) {
      R += ptrin[i+j]*ptrfiltre[j]-ptrin[i+j]*ptrfiltre[j];
      I += ptrin[i+j]*ptrfiltre[j]+ptrin[i+j]*ptrfiltre[j];
   }
   ptrout[i] = R;
   ptrout[i] = I;
   *I_0 = I;
   *R_0 = R;
}
void p4a_kernel_trt(float filtre[16], int j, int k, float in_pulse[5][32][95], float out_pulse[5][32][80], int tf, int tv)
{
   STAP_PulseComp(tv, in_pulse[j][k], tf, filtre, out_pulse[j][k]);
}
void p4a_launcher_STAP_PulseComp(int tf, int tv, float ptrfiltre[tf], float ptrin[tv], float ptrout[tv-tf+1])
{
   // Declared by Pass Outlining
   float I, R;
   // Declared by Pass Outlining
   int i;
   for(i = 0; i <= tv-tf+1-1; i += 1)
      p4a_wrapper_STAP_PulseComp(tf, tv, &I, &R, i, ptrfiltre, ptrin, ptrout);
}
void p4a_launcher_trt(float filtre[16], float in_pulse[5][32][95], float out_pulse[5][32][80], int tf, int tv)
{
   // Declared by Pass Outlining
   int j, k;
   for(j = 0; j <= 4; j += 1)
      for(k = 0; k <= 31; k += 1)
         p4a_wrapper_trt(filtre, j, k, in_pulse, out_pulse, tf, tv);
}
void p4a_wrapper_STAP_PulseComp(int tf, int tv, float I_0[1], float R_0[1], int i, float ptrfiltre[tf], float ptrin[tv], float ptrout[tv-tf+1])
{
   // Declared as a patch variable by Pass Outlining
   float I, R;
   R = *R_0;
   I = *I_0;
   // To be assigned to a call to P4A_vp_0: i
   p4a_kernel_STAP_PulseComp(tf, tv, &I, &R, i, ptrfiltre, ptrin, ptrout);
   *I_0 = I;
   *R_0 = R;
}
void p4a_wrapper_trt(float filtre[16], int j, int k, float in_pulse[5][32][95], float out_pulse[5][32][80], int tf, int tv)
{
   // To be assigned to a call to P4A_vp_1: j
   // To be assigned to a call to P4A_vp_0: k
   p4a_kernel_trt(filtre, j, k, in_pulse, out_pulse, tf, tv);
}
void trt(int tv, int tf, float in_pulse[5][32][95], float out_pulse[5][32][80])
{
   //int tv=95; int tf=16; 
   int lv = 20;
   int j, k, i;
   float filtre[16];
   
   //init_array();
   for(i = 0; i <= 89; i += 1)
      p4a_launcher_trt(filtre, in_pulse, out_pulse, tf, tv);
}


Source code with transformers


//  T(assert02) {assert02==0}

int assert02()
{

//  T() {}

   int y, z;

//  T(y) {0<=y, y<=1}

   
   /*
     z = 1;
     printf("z is positive, !z=%d\n", !z);
   
     z = 0;
     printf("z is zero, !z=%d\n", !z);
   
     z = -1;
     printf("z is negative, !z=%d\n", !z);
   
     if(!z<0)
       abort();
     */
   
   y = !z;

//  T(z) {z==1, 0<=y, y<=1}


   z = 1;

//  T(y) {y==0, z==1, 0<=y#init, y#init<=1}

   y = !z;

//  T(z) {y==0, z==0, z#init==1}


   z = 0;

//  T(y) {y==1, y#init==0, z==0}

   y = !z;

//  T(z) {y==1, z==-1, z#init==0}


   z = -1;

//  T(y) {y==0, y#init==1, z==-1}

   y = !z;

//  T(assert02) {assert02==0, y==0, z==-1}


   return 0;
}

Source code with preconditions


//  P() {}

int assert02()
{

//  P() {}

   int y, z;

//  P() {}

   
   /*
     z = 1;
     printf("z is positive, !z=%d\n", !z);
   
     z = 0;
     printf("z is zero, !z=%d\n", !z);
   
     z = -1;
     printf("z is negative, !z=%d\n", !z);
   
     if(!z<0)
       abort();
     */
   
   y = !z;

//  P(y) {0<=y, y<=1}


   z = 1;

//  P(y,z) {z==1, 0<=y, y<=1}

   y = !z;

//  P(y,z) {y==0, z==1}


   z = 0;

//  P(y,z) {y==0, z==0}

   y = !z;

//  P(y,z) {y==1, z==0}


   z = -1;

//  P(y,z) {y==1, z==-1}

   y = !z;

//  P(y,z) {y==0, z==-1}


   return 0;
}

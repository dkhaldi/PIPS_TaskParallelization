#
# AIPO
#
#
# compile generated freia_59
#

! initial function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! graphs

// graph for dag "dag_0" of module "freia_59" in dot format
// DAG "dag_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_59" in dot format
// DAG "dag_cleaned_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}

! updated function for AIPO

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}
#
# SPOC
#

! initial function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! graphs

// graph for dag "dag_0" of module "freia_59" in dot format
// DAG "dag_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_59" in dot format
// DAG "dag_cleaned_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_spoc_helper_0_0" of module "freia_59" in dot format
// DAG "freia_59_spoc_helper_0_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];

  // computation vertices
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_spoc_helper_0_1" of module "freia_59" in dot format
// DAG "freia_59_spoc_helper_0_1": #i=1 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_spoc_helper_0_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "f2" [shape=circle];
  "f3" [shape=circle];

  // computation vertices
  "28 conv" [shape=box];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "in" -> "27 conv";
}
// graph for dag "freia_59_spoc_helper_0_2" of module "freia_59" in dot format
// DAG "freia_59_spoc_helper_0_2": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_spoc_helper_0_2" {
  // inputs
  "f3" [shape=circle];

  // outputs
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "f3" -> "29 conv";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 6 ops and 0 copies, optimized to 6 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// # SPOC calls: 3

// FREIA-SPoC helper function for module freia_59
freia_status freia_59_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 23 dilate_8c
  // nope
  // poc 23 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`in [0 input 1] -> [0 poc 1] 24 erode_8c
  // nope
  // poc 24 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`tmp [0 poc 0] -> [0 alu] 25 sub
  // nope
  // 0`map_1 [0 poc 1] -> [0 alu] 25 sub
  // nope
  // alu 25 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`map on 0
  // 0`map [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`map [0 output 0] -> [7 output 0] 0 null
  // 0`map [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`map [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`map [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`map [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`map [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`map [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`map [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_59
freia_status freia_59_spoc_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t * pi0,
  uint32_t pi1,
  uint32_t pi2,
  uint32_t pi3,
  uint32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 27 convolution
  // nope
  // poc 27 convolution stage 0 side 0
  si.poc[0][0].op = SPOC_POC_CONV;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`f2 [0 poc 0] -> [2 poc 0] 28 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`f2 [1 input 0] -> [2 poc 0] 28 convolution
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`f2 [2 input 0] -> [2 poc 0] 28 convolution
  // nope
  // poc 28 convolution stage 2 side 0
  si.poc[2][0].op = SPOC_POC_CONV;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // output image 0`f2 on 1 and image 0`f3 on 0
  // 0`f2 [1 poc 0] -> [2 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`f2 [2 input 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`f2 [2 output 1] -> [7 output 1] 0 null
  // 0`f2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`f2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`f2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`f2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`f2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`f3 [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`f3 [2 output 0] -> [7 output 0] 0 null
  // 0`f3 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`f3 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`f3 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`f3 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`f3 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module freia_59
freia_status freia_59_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * pi0,
  uint32_t pi1,
  uint32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`f3 [0 input 0] -> [0 poc 0] 29 convolution
  // nope
  // poc 29 convolution stage 0 side 0
  si.poc[0][0].op = SPOC_POC_CONV;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // output image 0`f4 on 0
  // 0`f4 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`f4 [0 output 0] -> [7 output 0] 0 null
  // 0`f4 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`f4 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`f4 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`f4 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`f4 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`f4 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`f4 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

! updated function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_spoc_helper_0_0_0(map, in, freia_morpho_kernel_8c);         /*0023*/

   freia_59_spoc_helper_0_1_0(f2, f3, in, kernel, 3, 3, 3, 3);          /*0027*/
   freia_59_spoc_helper_0_2_0(f4, f3, kernel, 3, 3);                    /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! cleaned up function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_spoc_helper_0_0_0(map, in, freia_morpho_kernel_8c);         /*0023*/

   freia_59_spoc_helper_0_1_0(f2, f3, in, kernel, 3, 3, 3, 3);          /*0027*/
   freia_59_spoc_helper_0_2_0(f4, f3, kernel, 3, 3);                    /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}
#
# TERAPIX
#

! initial function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! graphs

// graph for dag "dag_0" of module "freia_59" in dot format
// DAG "dag_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_59" in dot format
// DAG "dag_cleaned_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_terapix_helper_0_0_0" of module "freia_59" in dot format
// DAG "freia_59_terapix_helper_0_0_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 6 ops and 0 copies, optimized to 6 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_59
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 4 output images
 * 6 image operations in dag
 * dag length is 4, dag width is 4
 * costs in cycles per imagelet row:
 * - computation: 139
 * - communication: 120
 */
freia_status freia_59_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * o3,
  const freia_data2d * i0,
  const int32_t * pi5,
  int32_t * pi6,
  uint32_t pi7,
  uint32_t pi8,
  uint32_t pi9,
  uint32_t pi10,
  uint32_t pi11,
  uint32_t pi12)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][4];
  // imagelets definitions:
  // - 5 computation imagelets
  // - 4 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 107;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 113;
  int imagelet_3 = 226;
  int imagelet_4 = 339;
  int imagelet_5 = 452;
  int imagelet_6 = 565;
  int imagelet_7 = 678;
  int imagelet_8 = 791;
  int imagelet_9 = 904;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_6;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_7;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_8;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_9;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 4
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_4_0;
  mcu_macro[1][0].xmin2 = imagelet_io_4_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi5[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_3_0;
  mcu_macro[1][1].xmin2 = imagelet_io_3_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: conv(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi6[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 3;
  mcu_macro[1][2].iter3 = 3;
  mcu_macro[0][2].iter4 = 3;
  mcu_macro[1][2].iter4 = 3;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_CONV;
  // 3: conv(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 3;
  mcu_macro[1][3].iter3 = 3;
  mcu_macro[0][3].iter4 = 3;
  mcu_macro[1][3].iter4 = 3;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_CONV;
  // 4: conv(1) -> 5
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_5;
  mcu_macro[1][4].xmin2 = imagelet_5;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_2;
  mcu_macro[1][4].xmin3 = x_2;
  mcu_macro[0][4].ymin3 = y_2;
  mcu_macro[1][4].ymin3 = y_2;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 3;
  mcu_macro[1][4].iter3 = 3;
  mcu_macro[0][4].iter4 = 3;
  mcu_macro[1][4].iter4 = 3;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_CONV;
  // 5: -(4,3) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_4_0;
  mcu_macro[1][5].xmin1 = imagelet_io_4_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_3_0;
  mcu_macro[1][5].xmin2 = imagelet_io_3_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_io_3_0;
  mcu_macro[1][5].xmin3 = imagelet_io_3_1;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SUB3;
  // output copy 5 -> 4
  mcu_macro[0][6].xmin1 = imagelet_5;
  mcu_macro[1][6].xmin1 = imagelet_5;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_4_0;
  mcu_macro[1][6].xmin2 = imagelet_io_4_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 3 is o0 for map
  tile_out[0][0].x = imagelet_io_3_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_3_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for f2
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;
  // - imagelet 1 is o2 for f3
  tile_out[0][2].x = imagelet_io_1_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_1_1;
  tile_out[1][2].y = 0;
  // - imagelet 4 is o3 for f4
  tile_out[0][3].x = imagelet_io_4_0;
  tile_out[0][3].y = 0;
  tile_out[1][3].x = imagelet_io_4_1;
  tile_out[1][3].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 4;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, o2, o3, i0);

  // extract measures

  return ret;
}


! updated function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_terapix_helper_0_0_0(map, f2, f3, f4, in, freia_morpho_kernel_8c, kernel, 3, 3, 3, 3, 3, 3);             /*0023*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! cleaned up function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_terapix_helper_0_0_0(map, f2, f3, f4, in, freia_morpho_kernel_8c, kernel, 3, 3, 3, 3, 3, 3);             /*0023*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}
#
# OPENCL
#

! initial function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! graphs

// graph for dag "dag_0" of module "freia_59" in dot format
// DAG "dag_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_59" in dot format
// DAG "dag_cleaned_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_opencl_helper_0_0" of module "freia_59" in dot format
// DAG "freia_59_opencl_helper_0_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_opencl_helper_0_0_1" of module "freia_59" in dot format
// DAG "freia_59_opencl_helper_0_0_1": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_opencl_helper_0_0_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];

  // computation vertices
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "freia_59_opencl_helper_conv_511" of module "freia_59" in dot format
// DAG "freia_59_opencl_helper_conv_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_59_opencl_helper_conv_511" {
  // inputs
  "f3" [shape=circle];

  // outputs
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "f3" -> "29 conv";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 6 ops and 0 copies, optimized to 6 ops and 0+0+0 copies

// hold kernels for freia_59_opencl_helper_conv_511
static cl_kernel freia_59_opencl_helper_conv_511_kernel[2];

// compile kernels for freia_59_opencl_helper_conv_511
static freia_status freia_59_opencl_helper_conv_511_compile(void)
{
  // OpenCL source for freia_59_opencl_helper_conv_511
  const char * freia_59_opencl_helper_conv_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_59_opencl_helper_conv_511\n"
    "KERNEL void freia_59_opencl_helper_conv_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t29 = PIXEL_ZERO;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t29 = PIXEL_ADD(t29, (is_N|is_W)? PIXEL_ZERO: in0NW);\n"
    "    t29 = PIXEL_ADD(t29, (is_N)? PIXEL_ZERO: in0N);\n"
    "    t29 = PIXEL_ADD(t29, (is_N|is_E)? PIXEL_ZERO: in0NE);\n"
    "    t29 = PIXEL_ADD(t29, (is_W)? PIXEL_ZERO: in0W);\n"
    "    t29 = PIXEL_ADD(t29, in0);\n"
    "    t29 = PIXEL_ADD(t29, (is_E)? PIXEL_ZERO: in0E);\n"
    "    t29 = PIXEL_ADD(t29, (is_S|is_W)? PIXEL_ZERO: in0SW);\n"
    "    t29 = PIXEL_ADD(t29, (is_S)? PIXEL_ZERO: in0S);\n"
    "    t29 = PIXEL_ADD(t29, (is_S|is_E)? PIXEL_ZERO: in0SE);\n"
    "    // compute norm\n"
    "    PIXEL n29;\n"
    "    if (is_N)\n"
    "      if (is_W) n29 = 4;\n"
    "      else if (is_E) n29 = 4;\n"
    "      else n29 = 6;\n"
    "    else if (is_S)\n"
    "      if (is_W) n29 = 4;\n"
    "      else if (is_E) n29 = 4;\n"
    "      else n29 = 6;\n"
    "    else if (is_W) n29 = 6;\n"
    "    else if (is_E) n29 = 6;\n"
    "    else n29 = 9;\n"
    "    t29 = PIXEL_DIV(t29, n29);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t29;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_59_opencl_helper_conv_511_source, "freia_59_opencl_helper_conv_511", "-DPIXEL8", &freia_59_opencl_helper_conv_511_kernel[0]);
  err |= freia_op_compile_kernel(freia_59_opencl_helper_conv_511_source, "freia_59_opencl_helper_conv_511", "-DPIXEL16", &freia_59_opencl_helper_conv_511_kernel[1]);
  return err;
}

// helper function freia_59_opencl_helper_conv_511
freia_status freia_59_opencl_helper_conv_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_59_opencl_helper_conv_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_59_opencl_helper_conv_511_kernel[bpp];

  // call kernel freia_59_opencl_helper_conv_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for freia_59_opencl_helper_0_0_1
static cl_kernel freia_59_opencl_helper_0_0_1_kernel[2];

// compile kernels for freia_59_opencl_helper_0_0_1
static freia_status freia_59_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for freia_59_opencl_helper_0_0_1
  const char * freia_59_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_59_opencl_helper_0_0_1\n"
    "KERNEL void freia_59_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t23 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL t24 = PIXEL_MAX;\n"
    "\n"
    "    // pixel computations\n"
    "    t23 = PIXEL_SUP(t23, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t23 = PIXEL_SUP(t23, (is_N)? PIXEL_MIN: in0N);\n"
    "    t23 = PIXEL_SUP(t23, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t23 = PIXEL_SUP(t23, (is_W)? PIXEL_MIN: in0W);\n"
    "    t23 = PIXEL_SUP(t23, in0);\n"
    "    t23 = PIXEL_SUP(t23, (is_E)? PIXEL_MIN: in0E);\n"
    "    t23 = PIXEL_SUP(t23, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t23 = PIXEL_SUP(t23, (is_S)? PIXEL_MIN: in0S);\n"
    "    t23 = PIXEL_SUP(t23, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    t24 = PIXEL_INF(t24, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t24 = PIXEL_INF(t24, (is_N)? PIXEL_MAX: in0N);\n"
    "    t24 = PIXEL_INF(t24, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t24 = PIXEL_INF(t24, (is_W)? PIXEL_MAX: in0W);\n"
    "    t24 = PIXEL_INF(t24, in0);\n"
    "    t24 = PIXEL_INF(t24, (is_E)? PIXEL_MAX: in0E);\n"
    "    t24 = PIXEL_INF(t24, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t24 = PIXEL_INF(t24, (is_S)? PIXEL_MAX: in0S);\n"
    "    t24 = PIXEL_INF(t24, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t25 = PIXEL_SUB(t23, t24);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t25;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_59_opencl_helper_0_0_1_source, "freia_59_opencl_helper_0_0_1", "-DPIXEL8", &freia_59_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(freia_59_opencl_helper_0_0_1_source, "freia_59_opencl_helper_0_0_1", "-DPIXEL16", &freia_59_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function freia_59_opencl_helper_0_0_1
freia_status freia_59_opencl_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_59_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_59_opencl_helper_0_0_1_kernel[bpp];

  // call kernel freia_59_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_59

// opencl for dag 0

// opencl function freia_59_opencl_helper_conv_511
KERNEL void freia_59_opencl_helper_conv_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t29 = PIXEL_ZERO;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t29 = PIXEL_ADD(t29, (is_N|is_W)? PIXEL_ZERO: in0NW);
    t29 = PIXEL_ADD(t29, (is_N)? PIXEL_ZERO: in0N);
    t29 = PIXEL_ADD(t29, (is_N|is_E)? PIXEL_ZERO: in0NE);
    t29 = PIXEL_ADD(t29, (is_W)? PIXEL_ZERO: in0W);
    t29 = PIXEL_ADD(t29, in0);
    t29 = PIXEL_ADD(t29, (is_E)? PIXEL_ZERO: in0E);
    t29 = PIXEL_ADD(t29, (is_S|is_W)? PIXEL_ZERO: in0SW);
    t29 = PIXEL_ADD(t29, (is_S)? PIXEL_ZERO: in0S);
    t29 = PIXEL_ADD(t29, (is_S|is_E)? PIXEL_ZERO: in0SE);
    // compute norm
    PIXEL n29;
    if (is_N)
      if (is_W) n29 = 4;
      else if (is_E) n29 = 4;
      else n29 = 6;
    else if (is_S)
      if (is_W) n29 = 4;
      else if (is_E) n29 = 4;
      else n29 = 6;
    else if (is_W) n29 = 6;
    else if (is_E) n29 = 6;
    else n29 = 9;
    t29 = PIXEL_DIV(t29, n29);

    // set output pixels
    p0[i] = t29;
  }
}

// opencl function freia_59_opencl_helper_0_0_1
KERNEL void freia_59_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t23 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL t24 = PIXEL_MAX;

    // pixel computations
    t23 = PIXEL_SUP(t23, (is_N|is_W)? PIXEL_MIN: in0NW);
    t23 = PIXEL_SUP(t23, (is_N)? PIXEL_MIN: in0N);
    t23 = PIXEL_SUP(t23, (is_N|is_E)? PIXEL_MIN: in0NE);
    t23 = PIXEL_SUP(t23, (is_W)? PIXEL_MIN: in0W);
    t23 = PIXEL_SUP(t23, in0);
    t23 = PIXEL_SUP(t23, (is_E)? PIXEL_MIN: in0E);
    t23 = PIXEL_SUP(t23, (is_S|is_W)? PIXEL_MIN: in0SW);
    t23 = PIXEL_SUP(t23, (is_S)? PIXEL_MIN: in0S);
    t23 = PIXEL_SUP(t23, (is_S|is_E)? PIXEL_MIN: in0SE);
    t24 = PIXEL_INF(t24, (is_N|is_W)? PIXEL_MAX: in0NW);
    t24 = PIXEL_INF(t24, (is_N)? PIXEL_MAX: in0N);
    t24 = PIXEL_INF(t24, (is_N|is_E)? PIXEL_MAX: in0NE);
    t24 = PIXEL_INF(t24, (is_W)? PIXEL_MAX: in0W);
    t24 = PIXEL_INF(t24, in0);
    t24 = PIXEL_INF(t24, (is_E)? PIXEL_MAX: in0E);
    t24 = PIXEL_INF(t24, (is_S|is_W)? PIXEL_MAX: in0SW);
    t24 = PIXEL_INF(t24, (is_S)? PIXEL_MAX: in0S);
    t24 = PIXEL_INF(t24, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t25 = PIXEL_SUB(t23, t24);

    // set output pixels
    p0[i] = t25;
  }
}

! updated function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_opencl_helper_conv_511(f2, in);                             /*0027*/
   freia_59_opencl_helper_conv_511(f3, f2);                             /*0028*/
   freia_59_opencl_helper_conv_511(f4, f3);                             /*0029*/

   freia_59_opencl_helper_0_0_1(map, in);                               /*0023*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! cleaned up function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_59_opencl_helper_conv_511(f2, in);                             /*0027*/
   freia_59_opencl_helper_conv_511(f3, f2);                             /*0028*/
   freia_59_opencl_helper_conv_511(f4, f3);                             /*0029*/

   freia_59_opencl_helper_0_0_1(map, in);                               /*0023*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}
#
# SIGMAC
#
#
# compile generated freia_59
#

! initial function

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map, *tmp;                                        /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0009*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/
   tmp = freia_common_create_data(map->bpp, map->widthWa, map->heightWa);              /*0019*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/

   freia_aipo_dilate_8c(tmp, in, freia_morpho_kernel_8c);               /*0023*/
   freia_aipo_erode_8c(map, in, freia_morpho_kernel_8c);                /*0024*/
   freia_aipo_sub(map, tmp, map);                                       /*0025*/

   freia_aipo_convolution(f2, in, kernel, 3, 3);                        /*0027*/
   freia_aipo_convolution(f3, f2, kernel, 3, 3);                        /*0028*/
   freia_aipo_convolution(f4, f3, kernel, 3, 3);                        /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/
   freia_common_destruct_data(tmp);                                     /*0042*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! graphs

// graph for dag "dag_0" of module "freia_59" in dot format
// DAG "dag_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_59" in dot format
// DAG "dag_cleaned_0": #i=1 #o=4 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "map" [shape=circle];
  "f2" [shape=circle];
  "f3" [shape=circle];
  "f4" [shape=circle];

  // computation vertices
  "29 conv" [shape=box];
  "29 conv" -> "f4";
  "28 conv" [shape=box];
  "28 conv" -> "29 conv" [label="f3"];
  "28 conv" -> "f3";
  "27 conv" [shape=box];
  "27 conv" -> "28 conv" [label="f2"];
  "27 conv" -> "f2";
  "25 -" [shape=trapezium,orientation=270];
  "25 -" -> "map";
  "24 E8" [shape=box];
  "24 E8" -> "25 -" [label="map_1"];
  "23 D8" [shape=box];
  "23 D8" -> "25 -" [label="tmp"];
  "in" -> "27 conv";
  "in" -> "24 E8";
  "in" -> "23 D8";
}

! updated function for OPENCL

int freia_59(void)
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *map;                                              /*0007*/
   freia_data2d *f2, *f3, *f4;                                          /*0008*/

   freia_common_open_input(&fdin, 0);                                   /*0011*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0012*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0014*/
   map = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0015*/
   f2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0016*/
   f3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0017*/
   f4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0018*/

   freia_common_rx_image(in, &fdin);                                    /*0021*/
   
   
   freia_mppa_launch(0, 1, 4, 0, 0, in, map, f2, f3, f4);               /*0029*/

   freia_common_tx_image(in, &fdout);                                   /*0031*/
   freia_common_tx_image(f2, &fdout);                                   /*0032*/
   freia_common_tx_image(f3, &fdout);                                   /*0033*/
   freia_common_tx_image(f4, &fdout);                                   /*0034*/
   freia_common_tx_image(map, &fdout);                                  /*0035*/

   freia_common_destruct_data(in);                                      /*0037*/
   freia_common_destruct_data(map);                                     /*0038*/
   freia_common_destruct_data(f2);                                      /*0039*/
   freia_common_destruct_data(f3);                                      /*0040*/
   freia_common_destruct_data(f4);                                      /*0041*/

   freia_common_close_input(&fdin);                                     /*0044*/
   freia_common_close_output(&fdout);                                   /*0045*/

   return 0;                                                            /*0047*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_59 fname=freia_59_sigmac_helper_0 split=0


/*#####################################################################*/
/*################ freia_59_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi7_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi7_0, int16_t)

subgraph
freia_59_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 4, width, height);
    agent strout = new Streamer_Out(width, height, 4);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi7[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup2 = new rep(3, width);
    agent dil0 = new dilate_pi7_0(width, height);
    agent ero0 = new erode_pi7_0(width, height);
    agent sub0 = new img_sub_img_16(width);
    agent dup1 = new rep(2, width);
    agent conv2 = new convole_pi0_0(width, height, pi0);
    agent dup0 = new rep(2, width);
    agent conv1 = new convole_pi0_0(width, height, pi0);
    agent conv0 = new convole_pi0_0(width, height, pi0);

    // connections...
    connect (strin.output[0] /* in */, dup2.input);
    connect (dup2.output[2], conv2.input);
    connect (dup2.output[1], ero0.input);
    connect (dup2.output[0], dil0.input);
    connect (dil0.output, sub0.input[0]);
    connect (ero0.output, sub0.input[1]);
    connect (sub0.output, strout.input[0] /* map */);
    connect (conv2.output, dup1.input);
    connect (dup1.output[1], conv1.input);
    connect (dup1.output[0], strout.input[1] /* f2 */);
    connect (conv1.output, dup0.input);
    connect (dup0.output[1], conv0.input);
    connect (dup0.output[0], strout.input[2] /* f3 */);
    connect (conv0.output, strout.input[3] /* f4 */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_59_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


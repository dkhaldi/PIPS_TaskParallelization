
Proper effects for "scalar_renaming03" 

int scalar_renaming03()
{
   int *p, i, T, A[100], B[100], C[100], D[100];                        /*0004*/
//             <    is written>: p
   p = &T;                                                              /*0005*/
//             <    is written>: i
   for(i = 0; i <= 99; i += 1) {                                        /*0006*/
//             <    is read   >: A[i] B[i] i
//             <    is written>: T
      T = A[i]+B[i];                                                    /*0007*/
//             <    is read   >: T i
//             <    is written>: C[i]
      C[i] = T+T;                                                       /*0008*/
//             <    is read   >: B[i] D[i] i
//             <    is written>: T
      T = D[i]-B[i];                                                    /*0009*/
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: p
      *p = 1;                                                           /*0010*/
//             <    is read   >: T i
//             <    is written>: A[i]
      A[i] = T*T;                                                       /*0011*/
   }
//             <    is read   >: T

   return T;                                                            /*0014*/
}

Points-to for "scalar_renaming03"


// Points To IN: none


// Points To OUT: none

int scalar_renaming03()
{

// Points To: none

   int *p, i, T, A[100], B[100], C[100], D[100];                        /*0004*/

// Points To:
// p -> undefined , EXACT

   p = &T;                                                              /*0005*/

// Points To:
// p -> T , EXACT

   for(i = 0; i <= 99; i += 1) {                                        /*0006*/

// Points To:
// p -> T , EXACT

      T = A[i]+B[i];                                                    /*0007*/

// Points To:
// p -> T , EXACT

      C[i] = T+T;                                                       /*0008*/

// Points To:
// p -> T , EXACT

      T = D[i]-B[i];                                                    /*0009*/

// Points To:
// p -> T , EXACT

      *p = 1;                                                           /*0010*/

// Points To:
// p -> T , EXACT

      A[i] = T*T;                                                       /*0011*/
   }

// Points To:
// p -> T , EXACT


   return T;                                                            /*0014*/
}

Proper effects with points-to for "scalar_renaming03"

int scalar_renaming03()
{
   int *p, i, T, A[100], B[100], C[100], D[100];                        /*0004*/
//             <    is written>: p
   p = &T;                                                              /*0005*/
//             <    is written>: i
   for(i = 0; i <= 99; i += 1) {                                        /*0006*/
//             <    is read   >: A[i] B[i] i
//             <    is written>: T
      T = A[i]+B[i];                                                    /*0007*/
//             <    is read   >: T i
//             <    is written>: C[i]
      C[i] = T+T;                                                       /*0008*/
//             <    is read   >: B[i] D[i] i
//             <    is written>: T
      T = D[i]-B[i];                                                    /*0009*/
//             <    is read   >: p
//             <    is written>: T
      *p = 1;                                                           /*0010*/
//             <    is read   >: T i
//             <    is written>: A[i]
      A[i] = T*T;                                                       /*0011*/
   }
//             <    is read   >: T

   return T;                                                            /*0014*/
}

Code for "scalar_renaming03" before scalar renaming

int scalar_renaming03()
{
   int *p, i, T, A[100], B[100], C[100], D[100];                        /*0004*/
   p = &T;                                                              /*0005*/
   for(i = 0; i <= 99; i += 1) {                                        /*0006*/
      T = A[i]+B[i];                                                    /*0007*/
      C[i] = T+T;                                                       /*0008*/
      T = D[i]-B[i];                                                    /*0009*/
      *p = 1;                                                           /*0010*/
      A[i] = T*T;                                                       /*0011*/
   }

   return T;                                                            /*0014*/
}

Code for "scalar_renaming03" after scalar renaming

int scalar_renaming03()
{
   int *p, T, A[100], B[100], C[100], D[100];                           /*0004*/
   //PIPS generated variable
   int i0, T0, T1, T2;
   p = &T;                                                              /*0005*/
   for(i0 = 0; i0 <= 99; i0 += 1) {                                     /*0006*/
      T0 = A[i0]+B[i0];                                                 /*0007*/
      C[i0] = T0+T0;                                                    /*0008*/
      T1 = D[i0]-B[i0];                                                 /*0009*/
      *p = 1;                                                           /*0010*/
      A[i0] = T2*T2;                                                    /*0011*/
   }

   return T2;                                                           /*0014*/
}

Parallel code for "scalar_renaming03"

int scalar_renaming03()
{
   int *p, T, A[100], B[100], C[100], D[100];                           /*0004*/
   //PIPS generated variable
   int i0, T0, T1, T2;
   p = &T;                                                              /*0005*/
   for(i0 = 0; i0 <= 99; i0 += 1) {                                     /*0006*/
      T0 = A[i0]+B[i0];                                                 /*0007*/
      C[i0] = T0+T0;                                                    /*0008*/
   }
#pragma omp parallel for 
   for(i0 = 0; i0 <= 99; i0 += 1)                                       /*0006*/
      A[i0] = T2*T2;                                                    /*0011*/
   for(i0 = 0; i0 <= 99; i0 += 1)                                       /*0006*/
      T1 = D[i0]-B[i0];                                                 /*0009*/
   for(i0 = 0; i0 <= 99; i0 += 1)                                       /*0006*/
      *p = 1;                                                           /*0010*/

   return T2;                                                           /*0014*/
}

int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   int i, j, k;
//		< is static > FALSE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   int n = 1024;
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
#pragma scop
#pragma live-out x
   b[0] = 1.0;
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   for(i = 0; i <= n-1; i += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//		<   tests   >
      for(j = i+1; j <= n; j += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         w = a[j][i];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         for(k = 0; k <= i-1; k += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//                            0 <= 0`k <= i-1
//		<   tests   >
            w = w-a[j][k]*a[k][i];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         a[j][i] = w/a[i][i];
      }
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//		<   tests   >
      for(j = i+1; j <= n; j += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         w = a[i+1][j];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         for(k = 0; k <= i; k += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//                            0 <= 0`k <= i
//		<   tests   >
            w = w-a[i+1][k]*a[k][j];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            i+1 <= 0`j <= n
//		<   tests   >
         a[i+1][j] = w;
      }
   }
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   y[0] = b[0];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   for(i = 1; i <= n; i += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 1 <= 0`i <= n
//		<   tests   >
      w = b[i];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 1 <= 0`i <= n
//		<   tests   >
      for(j = 0; j <= i-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 1 <= 0`i <= n
//                            0 <= 0`j <= i-1
//		<   tests   >
         w = w-a[i][j]*y[j];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 1 <= 0`i <= n
//		<   tests   >
      y[i] = w;
   }
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   x[n] = y[n]/a[n][n];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   for(i = 0; i <= n-1; i += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//		<   tests   >
      w = y[n-1-i];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//		<   tests   >
      for(j = n-i; j <= n; j += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//                            n-i <= 0`j <= n
//		<   tests   >
         w = w-a[n-1-i][j]*x[j];
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`i <= n-1
//		<   tests   >
      x[n-1-i] = w/a[n-1-i][n-1-i];
   }
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`n, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}

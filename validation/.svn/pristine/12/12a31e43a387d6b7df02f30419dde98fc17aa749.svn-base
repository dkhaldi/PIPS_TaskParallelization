!
! File HPFTEST34_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST34_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
      REAL*4 B(1:10, 1:10)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest34 running'
! collecting distributed variable B
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL4 BUFUPK
            DO ALPHA2 = MAX(5*PSI1-8, 2, 5*PSI2-4, -4*PSI1+7), MIN(-7
     &      *PSI1+23, 9, 5*PSI2, 5*PSI1+3)
               DO ALPHA1 = MAX(5*PSI1-4, HPFC DIVIDE(-4*ALPHA2+28, 3)
     &         , ALPHA2-3), MIN(ALPHA2+4, HPFC DIVIDE(-3*ALPHA2+51, 4
     &         ), 5*PSI1)
                  LALPHA1 = ALPHA1-5*PSI1+5
                  LALPHA2 = ALPHA2-5*PSI2+5
                  BUF INDEX = BUF INDEX+1
                  B(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect
      DO I = 2, 9
         PRINT *, 'b(', I, ',  5)=', B(I,5)
         PRINT *, 'b(  6,', I, ')=', B(6,I)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      PRINT *, 'hpftest34 ended'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST34_host.f
!
!
! File HPFTEST34_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST34
!
!
! initializing array A, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 5
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 5
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array B, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 5
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 10
      RANGEA(1, 2, 3) = 10
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 5
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for HPFTEST34_init.h
!
!
! File HPFTEST34_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST34_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_5
     &, I_6, I_7, I_8, I_9, I, J
      REAL*4 A(0:5, 0:6), B(1:5, 1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_18, I_19, I_20, 2, 9, 1, 2)
      CALL HPFC LOOP BOUNDS(I_14, I_15, I_16, 2, 9, 1, 1)
      CALL HPFC LOOP BOUNDS(I_10, I_11, I_12, 1, 10, 2, 2)
      CALL HPFC LOOP BOUNDS(I_6, I_7, I_8, 1, 10, 2, 1)
      I = I_8
      DO I_5 = I_6, I_7
         I = I+1
         J = I_12
         DO I_9 = I_10, I_11
            J = J+1
            A(I_5,I_9) = 10*I+J-11
         ENDDO
      ENDDO
! P(1, 2) send A(5, 1) to (+1)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1, 
     &   HPFTEST34 A LO2, HPFTEST34 A UP2, 5, 5, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1:2, 2) send A(1:4, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1, 
     &   HPFTEST34 A LO2, HPFTEST34 A UP2, 1, 4, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1, 1) send A(5, 5) to (+3)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(3)
         CALL HPFC REAL4 PACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1, 
     &   HPFTEST34 A LO2, HPFTEST34 A UP2, 5, 5, 1, 5, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1:2, 1) send A(1:4, 5) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1, 
     &   HPFTEST34 A LO2, HPFTEST34 A UP2, 1, 4, 1, 5, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1, 1:2) send A(5, 1:5) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1, 
     &   HPFTEST34 A LO2, HPFTEST34 A UP2, 5, 5, 1, 1, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(2, 1) receive A(0, 6) from (-1)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1
     &   , HPFTEST34 A LO2, HPFTEST34 A UP2, 0, 0, 1, 6, 6, 1)
      ENDIF
! P(1:2, 1) receive A(1:4, 6) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1
     &   , HPFTEST34 A LO2, HPFTEST34 A UP2, 1, 4, 1, 6, 6, 1)
      ENDIF
! P(2, 2) receive A(0, 0) from (-3)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-3)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1
     &   , HPFTEST34 A LO2, HPFTEST34 A UP2, 0, 0, 1, 0, 0, 1)
      ENDIF
! P(1:2, 2) receive A(1:4, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1
     &   , HPFTEST34 A LO2, HPFTEST34 A UP2, 1, 4, 1, 0, 0, 1)
      ENDIF
! P(2, 1:2) receive A(0, 1:5) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST34 A LO1, HPFTEST34 A UP1
     &   , HPFTEST34 A LO2, HPFTEST34 A UP2, 0, 0, 1, 1, 5, 1)
      ENDIF
      DO I_13 = I_14, I_15
         DO I_17 = I_18, I_19
            B(I_13,I_17) = A(I_13-1,I_17)+A(I_13-1,I_17-1)+A(I_13-1,
     &      I_17+1)+A(I_13,I_17)
         ENDDO
      ENDDO
! collecting distributed variable B
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = MAX(5*PSI1-8, 2, 5*PSI2-4, -4*PSI1+7), MIN(-7*PSI1+
     &23, 9, 5*PSI2, 5*PSI1+3)
         DO ALPHA1 = MAX(5*PSI1-4, HPFC DIVIDE(-4*ALPHA2+28, 3), 
     &   ALPHA2-3), MIN(ALPHA2+4, HPFC DIVIDE(-3*ALPHA2+51, 4), 5*
     &   PSI1)
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = ALPHA2-5*PSI2+5
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = B(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC REAL4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST34_node.f
!
!
! File HPFTEST34_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST34
!
      integer 
     $    HPFTEST34 A LO1,
     $    HPFTEST34 A UP1
      parameter(HPFTEST34 A LO1 = 0)
      parameter(HPFTEST34 A UP1 = 5)
      integer 
     $    HPFTEST34 A LO2,
     $    HPFTEST34 A UP2
      parameter(HPFTEST34 A LO2 = 0)
      parameter(HPFTEST34 A UP2 = 6)
      integer 
     $    HPFTEST34 B LO1,
     $    HPFTEST34 B UP1
      parameter(HPFTEST34 B LO1 = 1)
      parameter(HPFTEST34 B UP1 = 5)
      integer 
     $    HPFTEST34 B LO2,
     $    HPFTEST34 B UP2
      parameter(HPFTEST34 B LO2 = 1)
      parameter(HPFTEST34 B UP2 = 5)
!
! That is all for HPFTEST34_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

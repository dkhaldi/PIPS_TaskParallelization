#
# AIPO
#
#
# compile generated freia_13
#

! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_13" in dot format
// DAG "dag_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_13" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}

! updated function for AIPO

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}
#
# SPOC
#

! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_13" in dot format
// DAG "dag_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_13" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "freia_13_spoc_helper_0_0" of module "freia_13" in dot format
// DAG "freia_13_spoc_helper_0_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_13_spoc_helper_0_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module freia_13
freia_status freia_13_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  int32_t pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 12 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 2
  // 0`t [0 alu] -> [2 poc 0] 13 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`t [1 input 0] -> [2 poc 0] 13 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t [2 input 0] -> [2 poc 0] 13 erode_8c
  // nope
  // poc 13 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi1[i];

  // 0`t [1 poc 0] -> [2 poc 1] 14 dilate_8c
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`t [2 input 1] -> [2 poc 1] 14 dilate_8c
  // nope
  // poc 14 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // output image o0 on 0 and image o1 on 1
  // o0 [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o0 [2 output 0] -> [7 output 0] 0 null
  // o0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // o1 [2 poc 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // o1 [2 output 1] -> [7 output 1] 0 null
  // o1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // o1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // o1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // o1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, NULL, NULL);

  return ret;
}

! updated function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_13_spoc_helper_0_0_0(o0, o1, c, kern);                         /*0012*/

   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_13_spoc_helper_0_0_0(o0, o1, c, kern);                         /*0012*/

   return 0;                                                            /*0017*/
}
#
# TERAPIX
#

! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_13" in dot format
// DAG "dag_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_13" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "freia_13_terapix_helper_0_0_0" of module "freia_13" in dot format
// DAG "freia_13_terapix_helper_0_0_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_13_terapix_helper_0_0_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_13
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 0 input image, 2 output images
 * 3 image operations in dag
 * dag length is 2, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 32
 * - communication: 48
 */
freia_status freia_13_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  int32_t pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = o0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: C() -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi2;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SET_CONST;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi3[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(2) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_1;
  mcu_macro[1][2].xmin3 = x_1;
  mcu_macro[0][2].ymin3 = y_1;
  mcu_macro[1][2].ymin3 = y_1;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;


  // no input

  // outputs:
  // - imagelet 1 is o0 for o0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for o1
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 0;
  mcu_instr.in0 = NULL;
  mcu_instr.in1 = NULL;

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1);

  // extract measures

  return ret;
}


! updated function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_13_terapix_helper_0_0_0(o0, o1, c, kern);                      /*0012*/

   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_13_terapix_helper_0_0_0(o0, o1, c, kern);                      /*0012*/

   return 0;                                                            /*0017*/
}
#
# OPENCL
#

! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_13" in dot format
// DAG "dag_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_13" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "freia_13_opencl_helper_0_0" of module "freia_13" in dot format
// DAG "freia_13_opencl_helper_0_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_13_opencl_helper_0_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_13

// opencl for dag 0

! updated function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! cleaned up function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return 0;                                                            /*0017*/
}
#
# SIGMAC
#
#
# compile generated freia_13
#

! initial function

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   freia_data2d *t = freia_common_create_data(16, 128, 128);            /*0007*/
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_aipo_set_constant(t, c);                                       /*0012*/
   freia_aipo_erode_8c(o0, t, kern);                                    /*0013*/
   freia_aipo_dilate_8c(o1, t, kern);                                   /*0014*/

   freia_common_destruct_data(t);                                       /*0016*/
   return FREIA_OK;                                                     /*0017*/
}

! graphs

// graph for dag "dag_0" of module "freia_13" in dot format
// DAG "dag_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}
// graph for dag "dag_cleaned_0" of module "freia_13" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];

  // computation vertices
  "14 D8" [shape=box];
  "14 D8" -> "o1";
  "13 E8" [shape=box];
  "13 E8" -> "o0";
  "12 C" [shape=trapezium,orientation=270];
  "12 C" -> "14 D8" [label="t"];
  "12 C" -> "13 E8" [label="t"];
}

! updated function for OPENCL

freia_status freia_13(freia_data2d *o0, freia_data2d *o1, int32_t *kern, int32_t c)
{
   // two parallel computations without inputs
   // t = h()
   // o0 = f(t)
   // o1 = g(t)
   freia_mppa_launch(0, 0, 2, 1, 0, o0, o1, c);                         /*0014*/

   return FREIA_OK;                                                     /*0017*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_13 fname=freia_13_sigmac_helper_0 split=0


/*#####################################################################*/
/*################ freia_13_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
freia_13_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 1);
    agent sp = new Split<int32_t>(1, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup0 = new rep(2, width);
    agent setc0 = new img_set_constant_16_dyn(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);

    // connections...
    connect (setc0.output, dup0.input);
    connect (dup0.output[1], dil0.input);
    connect (dup0.output[0], ero0.input);
    connect (sp.output[0], setc0.param);
    connect (ero0.output, strout.input[0] /* o0 */);
    connect (dil0.output, strout.input[1] /* o1 */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_13_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#



Symbol table for "decl05!"

decl05!

Declarations for module "decl05!" with type "() -> unknown"

Variable list:

	Declared entity "TOP-LEVEL:*STATIC*" with type "area" with size 0
	Declared entity "TOP-LEVEL:ERR_mgr_ctor" with type "functional" "const char * x const char * -> void"
	Declared entity "TOP-LEVEL:ERR_mgr_dtor" with type "functional" "() -> void"
	Declared entity "decl05!:*DYNAMIC*" with type "area" with size 0
	Declared entity "decl05!:*HEAP*" with type "area" with size 0
	Declared entity "decl05!:*STACK*" with type "area" with size 0
	Declared entity "decl05!:*STATIC*" with type "area" with size 0

* empty extern declaration list *


Derived entities:

	Variable "decl05!:#_err_error"	kind = struct
	Variable "decl05!:#_err_manager"	kind = struct
	Variable "decl05!:#_err_pile"	kind = struct

Layouts for memory areas:

Layout for memory area "TOP-LEVEL:*STATIC*" of size 0:
	* empty area *


Layout for memory area "decl05!:*DYNAMIC*" of size 0:
	* empty area *


Layout for memory area "decl05!:*HEAP*" of size 0:
	* empty area *


Layout for memory area "decl05!:*STACK*" of size 0:
	* empty area *


Layout for memory area "decl05!:*STATIC*" of size 0:
	* empty area *

End of declarations for module decl05!


Source code for "decl05!"

/* fonction ou s'est produite l'erreur */
//char file [500]; /* fichier ou s'est produite l'erreur  */
//char description [500]; /* texte personalise de l'erreur eventuellement */
//STD_uint32 line; /* ligne dans le code ou on a generer l'erreur */
//ERR_code code; /* le code de l'erreur generee */
struct _err_error {
   char function[500];
};

/* fonction ou est cree le manager */
//char file[500]; /* fichier ou est cree le manager */
//STD_uint32 line; /* ligne dans le code */
//ALGMEM_allocator * mallocated; /* allocateur */
/* pointeur de pile */
//struct _err_error * pile_end; /* fin de la pile */
//struct _err_error pile_tab[50]; /* base de la pile */
/* gestion pile */
//const ERR_code code,
//const STD_uint32 line,
//const char * file,
//void (* pop)(struct _err_manager * _this);
//ERR_error * (* top)(const struct _err_manager * _this);
//STD_int32 (* occured)(const struct _err_manager * _this);
//STD_int32 (* top_is)(const struct _err_manager * _this,const ERR_code code);
//void (* format_message)(struct _err_manager * _this/*, const ERR_error * error*/);
//char message[500];
//HDL_stream * message_stream;
struct _err_manager {
   char function[500];
   struct _err_pile {struct _err_error *pile;} pile;
   void (*push)(struct _err_manager *_this, const char *function);
};


//ERR_mgr * mgr,
//HDL_stream * message_stream,
//const STD_uint32 line,
void ERR_mgr_ctor(const char *file, const char *function);

/*ERR_mgr * emgr*/
void ERR_mgr_dtor();
#
# compile generated decl05
#

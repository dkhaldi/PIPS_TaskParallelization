!
! File TEST68_A_2_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.2) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping A[3]: A_1[2] -> A[3]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSIp1 = PSI2
               PSIp2 = PSI1
               T LID = 2*PSIp1+PSIp2-2
               IF (MY LID.NE.T LID) THEN
! - lazy sending
                  CALL pvmfinitsend(PvmDataRaw, HPFC BUFID)
                  LAZY SEND = .FALSE.
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp1+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        BUF INDEX = BUF INDEX+1
                        HPFC REAL4 BUFF(BUF INDEX) = A_1(LALPHA1,
     &                  LALPHA2)
                        LAZY SEND = .TRUE.
                     ENDDO
                  ENDDO
                  IF (LAZY SEND) THEN
                     CALL pvmfsend(NODE TIDS(T LID), SEND CHANNELS(
     &               T LID), HPFC INFO)
                     SEND CHANNELS(T LID) = SEND CHANNELS(T LID)+2
                  ENDIF
               ENDIF
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSI1 = PSIp2
               PSI2 = PSIp1
               T LID = 2*PSI1+PSI2-2
               IF (MY LID.NE.T LID) THEN
! - lazy receiving
                  LAZY RECV = .TRUE.
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp1+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        IF (LAZY RECV) THEN
                           CALL pvmfrecv(NODE TIDS(T LID), 
     &                     RECV CHANNELS(T LID), HPFC BUFID)
                           RECV CHANNELS(T LID) = RECV CHANNELS(T LID
     &                     )+2
                           LAZY RECV = .FALSE.
                        ENDIF
                        BUF INDEX = BUF INDEX+1
                        A(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                  BUF INDEX)
                     ENDDO
                  ENDDO
               ELSE
! - lazy copying
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp1+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        A(LALPHAp1,LALPHAp2) = A_1(LALPHA1,LALPHA2)
                     ENDDO
                  ENDDO
               ENDIF
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(3) = 3
      ENDIF
!
! That is all for TEST68_A_2_3_node.h
!
!
! File TEST68_A_3_2_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.3) THEN
         IF (.NOT.LIVE MAPPING(2)) THEN
! send part
! remapping A[3]: A[3] -> A_1[2]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSIp1 = PSI2
               PSIp2 = PSI1
               T LID = 2*PSIp1+PSIp2-2
               IF (MY LID.NE.T LID) THEN
! - lazy sending
                  CALL pvmfinitsend(PvmDataRaw, HPFC BUFID)
                  LAZY SEND = .FALSE.
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp2+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        BUF INDEX = BUF INDEX+1
                        HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,
     &                  LALPHA2)
                        LAZY SEND = .TRUE.
                     ENDDO
                  ENDDO
                  IF (LAZY SEND) THEN
                     CALL pvmfsend(NODE TIDS(T LID), SEND CHANNELS(
     &               T LID), HPFC INFO)
                     SEND CHANNELS(T LID) = SEND CHANNELS(T LID)+2
                  ENDIF
               ENDIF
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSI1 = PSIp2
               PSI2 = PSIp1
               T LID = 2*PSI1+PSI2-2
               IF (MY LID.NE.T LID) THEN
! - lazy receiving
                  LAZY RECV = .TRUE.
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp2+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        IF (LAZY RECV) THEN
                           CALL pvmfrecv(NODE TIDS(T LID), 
     &                     RECV CHANNELS(T LID), HPFC BUFID)
                           RECV CHANNELS(T LID) = RECV CHANNELS(T LID
     &                     )+2
                           LAZY RECV = .FALSE.
                        ENDIF
                        BUF INDEX = BUF INDEX+1
                        A_1(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                  BUF INDEX)
                     ENDDO
                  ENDDO
               ELSE
! - lazy copying
                  DO LALPHA2 = 1, 15
                     DO LALPHA1 = 1, -10*PSIp2+25
                        LALPHAp2 = LALPHA2
                        LALPHAp1 = LALPHA1
                        A_1(LALPHAp1,LALPHAp2) = A(LALPHA1,LALPHA2)
                     ENDDO
                  ENDDO
               ENDIF
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(2) = .TRUE.
         MSTATUS(3) = 2
      ENDIF
!
! That is all for TEST68_A_3_2_node.h
!
!
! File TEST68_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "TEST68_parameters.h"
      INTEGER*4 M
      PARAMETER (M = 30)
      INTEGER*4 N
      PARAMETER (N = 20)
      INTEGER*4 N
      PARAMETER (N = 20)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
     &, I_4
      REAL*4 A(1:N, 1:M)
      CALL HPFC INIT HOST
      PRINT *, 'DYNAMIC TEST (68) RUNNING'
! collecting distributed variable A
      PSI2 = 2
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 2*PSI1+PSI2-2
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL4 BUFUPK
      ALPHA2 = 20
      ALPHA1 = 10
      LALPHA1 = 10
      LALPHA2 = 5
      BUF INDEX = BUF INDEX+1
      A(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(10,20)
      PRINT *, 'after transpose'
      PRINT *, 'after unused remapping'
! collecting distributed variable A_1
      PSI2 = 1
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 2*PSI1+PSI2-2
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL4 BUFUPK
      ALPHA2 = 20
      ALPHA1 = 10
      LALPHA1 = 10
      LALPHA2 = 5
      BUF INDEX = BUF INDEX+1
      A(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(10,20)
! collecting distributed variable A_1
      DO PSI1 = 1, 2
         DO PSI2 = PSI1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL4 BUFUPK
            DO ALPHA2 = MAX(15*PSI2-15, 15*PSI1-14), MIN(19, 15*PSI2-
     &      1, 15*PSI1)
               ALPHA1 = ALPHA2+1
               LALPHA1 = ALPHA1-15*PSI2+15
               LALPHA2 = ALPHA2-15*PSI1+15
               BUF INDEX = BUF INDEX+1
               A(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
            ENDDO
         ENDDO
      ENDDO
! end of collect
      I_4 = I+1
      PRINT *, (A(I_4,I), I = 1, N-1)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! collecting distributed variable A
      PSI2 = 2
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 2*PSI1+PSI2-2
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL4 BUFUPK
      ALPHA2 = 20
      ALPHA1 = 10
      LALPHA1 = 10
      LALPHA2 = 5
      BUF INDEX = BUF INDEX+1
      A(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(10,20)
      CALL HPFC HOST END
      END
!
! That is all for TEST68_host.f
!
!
! File TEST68_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for TEST68
!
!
! initializing array A, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      MSTATUS(3) = 3
      LIVEMAPPING(3) = .TRUE.

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 20
      RANGEA(3, 1, 3) = 20
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 15
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 30
      RANGEA(3, 2, 3) = 30
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 15
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array A_1, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 20
      RANGEA(2, 1, 3) = 20
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 15
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 30
      RANGEA(2, 2, 3) = 30
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 15
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 2
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 1
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array A_2, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 20
      RANGEA(1, 1, 3) = 20
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 15
      RANGEA(1, 1, 6) = -1
      RANGEA(1, 1, 7) = 29

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 30
      RANGEA(1, 2, 3) = 30
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 15
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = -1
      ALIGN(1, 1, 3) = 30
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for TEST68_init.h
!
!
! File TEST68_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "TEST68_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 20)
      INTEGER*4 M
      PARAMETER (M = 30)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_5, I_6, I_7, I_8, I_9, I, J, HPFC INFO, LALPHAp1
     &, LALPHAp2, HPFC BUFID, T LID, PSIp2, PSIp1
      REAL*4 A(1:15, 1:15), A_1(1:15, 1:15)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_10, I_11, I_12, 1, N, 3, 1)
      CALL HPFC LOOP BOUNDS(I_6, I_7, I_8, 1, N, 3, 2)
! all livenesss for A
      LIVE MAPPING(3) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! direct remapping for A
      LIVE MAPPING(3) = .TRUE.
      MSTATUS(3) = 3
      J = I_8
      DO I_5 = I_6, I_7
         J = J+1
         I = I_12
         DO I_9 = I_10, I_11
            I = I+1
            A(I_9,I_5) = REAL(I+J)/REAL(J-I+M+1)
         ENDDO
      ENDDO
! collecting distributed variable A
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.2) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA2 = 20
         ALPHA1 = 10
         LALPHA1 = 10
         LALPHA2 = 5
         BUF INDEX = BUF INDEX+1
         HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,LALPHA2)
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! begin remappings
! liveness management
! clean live set for A
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
! begin remappings
! liveness management
! clean live set for A
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
! begin remappings
      include 'TEST68_A_3_2_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
! collecting distributed variable A_1
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA2 = 20
         ALPHA1 = 10
         LALPHA1 = 10
         LALPHA2 = 5
         BUF INDEX = BUF INDEX+1
         HPFC REAL4 BUFF(BUF INDEX) = A_1(LALPHA1,LALPHA2)
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! collecting distributed variable A_1
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI1.LE.PSI2) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA2 = MAX(15*PSI2-15, 15*PSI1-14), MIN(19, 15*PSI2-1, 
     &   15*PSI1)
            ALPHA1 = ALPHA2+1
            LALPHA1 = ALPHA1-15*PSI2+15
            LALPHA2 = ALPHA2-15*PSI1+15
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = A_1(LALPHA1,LALPHA2)
         ENDDO
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! begin remappings
      include 'TEST68_A_2_3_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
! collecting distributed variable A
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.2) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA2 = 20
         ALPHA1 = 10
         LALPHA1 = 10
         LALPHA2 = 5
         BUF INDEX = BUF INDEX+1
         HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,LALPHA2)
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
      CALL HPFC NODE END
      END
!
! That is all for TEST68_node.f
!
!
! File TEST68_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for TEST68
!
      integer 
     $    TEST68 A LO1,
     $    TEST68 A UP1
      parameter(TEST68 A LO1 = 1)
      parameter(TEST68 A UP1 = 15)
      integer 
     $    TEST68 A LO2,
     $    TEST68 A UP2
      parameter(TEST68 A LO2 = 1)
      parameter(TEST68 A UP2 = 15)
      integer 
     $    TEST68 A_1 LO1,
     $    TEST68 A_1 UP1
      parameter(TEST68 A_1 LO1 = 1)
      parameter(TEST68 A_1 UP1 = 15)
      integer 
     $    TEST68 A_1 LO2,
     $    TEST68 A_1 UP2
      parameter(TEST68 A_1 LO2 = 1)
      parameter(TEST68 A_1 UP2 = 15)
      integer 
     $    TEST68 A_2 LO1,
     $    TEST68 A_2 UP1
      parameter(TEST68 A_2 LO1 = 1)
      parameter(TEST68 A_2 UP1 = 15)
      integer 
     $    TEST68 A_2 LO2,
     $    TEST68 A_2 UP2
      parameter(TEST68 A_2 LO2 = 1)
      parameter(TEST68 A_2 UP2 = 15)
!
! That is all for TEST68_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 30
      RANGET(1, 1, 3) = 30

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 30
      RANGET(1, 2, 3) = 30

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 15
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 15
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 3)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

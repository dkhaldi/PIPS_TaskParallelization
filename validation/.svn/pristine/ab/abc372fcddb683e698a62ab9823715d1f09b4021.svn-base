
Points-to for call02


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_5[0] , MAY
// q[*] -> *NULL* , MAY
// q[*] -> _q_4[*][0] , MAY


// Points To OUT:
// p -> _p_5[0] , EXACT
// q[*] -> _q_4[*][0] , MAY

void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{

// Points To: none

   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;

// Points To: none

   y[i] = 0;

// Points To:
// p -> *NULL* , MAY
// p -> _p_5[0] , MAY

   p->one = 1;

// Points To:
// p -> _p_5[0] , EXACT

   (p->two)[j] = 2.;

// Points To:
// p -> _p_5[0] , EXACT
// q[*] -> *NULL* , MAY
// q[*] -> _q_4[*][0] , MAY

   *q[i] = 3;

// Points To:
// p -> _p_5[0] , EXACT
// q[*] -> _q_4[*][0] , MAY

   return;
}

Proper effects with points-to for call02

void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <    is read   >: i
//             <    is written>: y[i]
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: _p_5[0].one
   p->one = 1;
//             <    is read   >: j p
//             <    is written>: _p_5[0].two[j]
   (p->two)[j] = 2.;
//             <may be written>: _q_4[*][0]
//             <    is read   >: i q[i]
   *q[i] = 3;
   return;
}

Cumulated effects with points-to for call02

//             <may be read   >: q[*]
//             <may be written>: _p_5[0].two[*] _q_4[*][0] y[*]
//             <    is read   >: i j p
//             <    is written>: _p_5[0].one
void call02(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <may be written>: y[*]
//             <    is read   >: i
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: _p_5[0].one
   p->one = 1;
//             <may be written>: _p_5[0].two[*]
//             <    is read   >: j p
   (p->two)[j] = 2.;
//             <may be read   >: q[*]
//             <may be written>: _q_4[*][0]
//             <    is read   >: i
   *q[i] = 3;
   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int a = 1;

// Points To: none

   int b = 2;

// Points To: none

   int x[10], aa[10], i;

// Points To: none

   int *ap[10];

// Points To:
// ap[*] -> undefined , EXACT

   tf_t s;

// Points To:
// ap[*] -> undefined , EXACT

   tf_t *sp = &s;

// Points To:
// ap[*] -> undefined , EXACT
// sp -> s , EXACT

   
   /* Initialization added to avoid a segfault in the callee */
   for(i = 0; i <= 9; i += 1)

// Points To:
// ap[*] -> undefined , MAY
// ap[*] -> aa[*] , MAY
// sp -> s , EXACT

      ap[i] = &aa[i];

// Points To:
// ap[*] -> undefined , MAY
// ap[*] -> aa[*] , MAY
// sp -> s , EXACT


   call02(a, b, x, ap, sp);

// Points To:
// ap[*] -> undefined , MAY
// ap[*] -> aa[*] , MAY
// sp -> s , EXACT

   return 0;
}

Proper effects with points-to for "main"

int main()
{
//             <    is written>: a
   int a = 1;
//             <    is written>: b
   int b = 2;
   int x[10], aa[10], i;
   int *ap[10];
   tf_t s;
//             <    is written>: sp
   tf_t *sp = &s;
//             <    is written>: i
   
   /* Initialization added to avoid a segfault in the callee */
   for(i = 0; i <= 9; i += 1)
//             <    is read   >: i
//             <    is written>: ap[i]
      ap[i] = &aa[i];
//             <may be read   >: ap[*]
//             <may be written>: aa[*] s.two[*] x[*]
//             <    is read   >: a b sp
//             <    is written>: s.one

   call02(a, b, x, ap, sp);
   return 0;
}

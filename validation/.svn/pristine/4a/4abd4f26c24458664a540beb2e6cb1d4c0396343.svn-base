#
# AIPO
#
#
# compile generated freia_70
#

! initial function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0036*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0037*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0038*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0039*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0040*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0041*/

   freia_aipo_not(out, in);                                             /*0043*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0044*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_0);               /*0045*/
   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0046*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0047*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_1);               /*0048*/
   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0049*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0050*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_2);               /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! graphs

// graph for dag "dag_0" of module "freia_70" in dot format
// DAG "dag_0": #i=1 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 E8" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 E8" [label="w1_1"];
  "46 <_" [shape=trapezium,orientation=270];
  "46 <_" -> "49 <" [label="w2_1"];
  "45 E8" [shape=box];
  "45 E8" -> "46 <_" [label="w1_1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 E8" [label="w1_1"];
  "43 !" [shape=trapezium,orientation=270];
  "43 !" -> "50 D8" [label="out"];
  "43 !" -> "47 D8" [label="out"];
  "43 !" -> "44 D8" [label="out"];
  "41 <" [shape=trapezium,orientation=270];
  "40 E8" [shape=box];
  "40 E8" -> "41 <" [label="w1_0"];
  "39 D8" [shape=box];
  "39 D8" -> "40 E8" [label="w1_0"];
  "38 <" [shape=trapezium,orientation=270];
  "38 <" -> "41 <" [label="w2_0"];
  "37 E8" [shape=box];
  "37 E8" -> "38 <" [label="w1_0"];
  "36 D8" [shape=box];
  "36 D8" -> "37 E8" [label="w1_0"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "38 <" [label="w2_0"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out"];
  "32 !" -> "36 D8" [label="out"];
  "32 !" -> "33 D8" [label="out"];
  "in" -> "43 !";
  "in" -> "32 !";
}
// graph for dag "dag_cleaned_0" of module "freia_70" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}

! updated function for AIPO

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   // hardware accelerator generated variable
   freia_data2d *w1_0_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_3 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0_3, out, freia_morpho_k8_1);                /*0036*/
   freia_aipo_dilate_8c(w1_0_1, out, freia_morpho_k8_2);                /*0039*/

   freia_aipo_erode_8c(w1_1, w1_0_3, neighborTransposed_1);             /*0048*/
   freia_aipo_inf(w2_1, w2_0, w1_1);                                    /*0049*/
   freia_aipo_erode_8c(w1_1, w1_0_1, neighborTransposed_2);             /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w1_0_1);
   freia_common_destruct_data(w1_0_3);
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}
#
# SPOC
#

! initial function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0036*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0037*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0038*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0039*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0040*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0041*/

   freia_aipo_not(out, in);                                             /*0043*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0044*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_0);               /*0045*/
   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0046*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0047*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_1);               /*0048*/
   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0049*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0050*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_2);               /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! graphs

// graph for dag "dag_0" of module "freia_70" in dot format
// DAG "dag_0": #i=1 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 E8" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 E8" [label="w1_1"];
  "46 <_" [shape=trapezium,orientation=270];
  "46 <_" -> "49 <" [label="w2_1"];
  "45 E8" [shape=box];
  "45 E8" -> "46 <_" [label="w1_1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 E8" [label="w1_1"];
  "43 !" [shape=trapezium,orientation=270];
  "43 !" -> "50 D8" [label="out"];
  "43 !" -> "47 D8" [label="out"];
  "43 !" -> "44 D8" [label="out"];
  "41 <" [shape=trapezium,orientation=270];
  "40 E8" [shape=box];
  "40 E8" -> "41 <" [label="w1_0"];
  "39 D8" [shape=box];
  "39 D8" -> "40 E8" [label="w1_0"];
  "38 <" [shape=trapezium,orientation=270];
  "38 <" -> "41 <" [label="w2_0"];
  "37 E8" [shape=box];
  "37 E8" -> "38 <" [label="w1_0"];
  "36 D8" [shape=box];
  "36 D8" -> "37 E8" [label="w1_0"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "38 <" [label="w2_0"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out"];
  "32 !" -> "36 D8" [label="out"];
  "32 !" -> "33 D8" [label="out"];
  "in" -> "43 !";
  "in" -> "32 !";
}
// graph for dag "dag_cleaned_0" of module "freia_70" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}
// graph for dag "freia_70_spoc_helper_0_0" of module "freia_70" in dot format
// DAG "freia_70_spoc_helper_0_0": #i=1 #o=2 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out_2" [shape=circle];
  "w2_0_2" [shape=circle];

  // computation vertices
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "w2_0_2";
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "33 D8" [label="out_2"];
  "32 !" -> "out_2";
  "in" -> "32 !";
}
// graph for dag "freia_70_spoc_helper_0_1" of module "freia_70" in dot format
// DAG "freia_70_spoc_helper_0_1": #i=1 #o=2 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_spoc_helper_0_1" {
  // inputs
  "out_2" [shape=circle];

  // outputs
  "w1_1_2" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "51 E8" [shape=box];
  "51 E8" -> "w1_1";
  "48 E8" [shape=box];
  "48 E8" -> "w1_1_2";
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "out_2" -> "39 D8";
  "out_2" -> "36 D8";
}
// graph for dag "freia_70_spoc_helper_0_2" of module "freia_70" in dot format
// DAG "freia_70_spoc_helper_0_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_spoc_helper_0_2" {
  // inputs
  "w1_1_2" [shape=circle];
  "w2_0_2" [shape=circle];

  // outputs
  "w2_1" [shape=circle];

  // computation vertices
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "w2_1";
  "w1_1_2" -> "49 <";
  "w2_0_2" -> "49 <";
}
// graph for dag "freia_70_spoc_helper_0_3" of module "freia_70" in dot format
// DAG "freia_70_spoc_helper_0_3": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_spoc_helper_0_3" {
  // inputs
  "w1_1" [shape=circle];
  "w2_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "w1_1" -> "52 <";
  "w2_1" -> "52 <";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 20 ops and 0 copies, optimized to 10 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// # SPOC calls: 4

// FREIA-SPoC helper function for module freia_70
freia_status freia_70_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // in [0 input 0] -> [0 alu] 32 not
  // nope
  // alu 32 not stage 0
  si.alu[0][0].op = SPOC_ALU_NOT_IN0;


  // STAGE 2
  // out_2 [0 alu] -> [2 poc 0] 33 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // out_2 [1 input 0] -> [2 poc 0] 33 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // out_2 [2 input 0] -> [2 poc 0] 33 dilate_8c
  // nope
  // poc 33 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`w1_0_5 [2 poc 0] -> [3 poc 0] 34 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_0_5 [3 input 0] -> [3 poc 0] 34 erode_8c
  // nope
  // poc 34 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi1[i];

  // 0`w1_0_4 [3 poc 0] -> [3 alu] 35 inf_const
  // nope
  // alu 35 inf_const stage 3
  si.alu[3][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[3][0].constant = pi2;


  // output image out_2 on 0 and image 0`w2_0_2 on 1
  // out_2 [1 poc 0] -> [3 output 0] 0 null
  si.mux[1][1].op = SPOC_MUX_IN0;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // out_2 [2 input 1] -> [3 output 0] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // out_2 [3 input 1] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN1;

  // fill in to the end...
  // out_2 [3 output 0] -> [7 output 0] 0 null
  // out_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`w2_0_2 [3 alu] -> [3 output 1] 0 null
  si.mux[3][1].op = SPOC_MUX_IN1;
  si.mux[3][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_0_2 [3 output 1] -> [7 output 1] 0 null
  // 0`w2_0_2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`w2_0_2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`w2_0_2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`w2_0_2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module freia_70
freia_status freia_70_spoc_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1,
  const int32_t * pi2,
  const int32_t * pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // out_2 [0 input 0] -> [0 poc 0] 36 dilate_8c
  // nope
  // poc 36 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // out_2 [0 input 1] -> [0 poc 1] 39 dilate_8c
  // nope
  // poc 39 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`w1_0_3 [0 poc 0] -> [1 poc 0] 48 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w1_0_3 [1 input 0] -> [1 poc 0] 48 erode_8c
  // nope
  // poc 48 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi2[i];

  // 0`w1_0_1 [0 poc 1] -> [1 poc 1] 51 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w1_0_1 [1 input 1] -> [1 poc 1] 51 erode_8c
  // nope
  // poc 51 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi3[i];


  // output image 0`w1_1_2 on 0 and image 0`w1_1 on 1
  // 0`w1_1_2 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1_2 [1 output 0] -> [7 output 0] 0 null
  // 0`w1_1_2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_1_2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_1_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_1_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_1_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_1_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`w1_1 [1 poc 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`w1_1 [1 output 1] -> [7 output 1] 0 null
  // 0`w1_1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`w1_1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module freia_70
freia_status freia_70_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1_2 [0 input 0] -> [0 alu] 49 inf
  // nope
  // 0`w2_0_2 [0 input 1] -> [0 alu] 49 inf
  // nope
  // alu 49 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image 0`w2_1 on 0
  // 0`w2_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_1 [0 output 0] -> [7 output 0] 0 null
  // 0`w2_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w2_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_70
freia_status freia_70_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1 [0 input 0] -> [0 alu] 52 inf
  // nope
  // 0`w2_1 [0 input 1] -> [0 alu] 52 inf
  // nope
  // alu 52 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image out on 0
  // out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // out [0 output 0] -> [7 output 0] 0 null
  // out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w2_0, *w1_1, *w2_1;                                    /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_70_spoc_helper_0_0_0(out, w2_0, in, freia_morpho_k8_0, neighborTransposed_0, 255);           /*0032*/
   freia_70_spoc_helper_0_1_0(w1_1_2, w1_1, out, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_1, neighborTransposed_2);                /*0036*/

   freia_70_spoc_helper_0_2_0(w2_1, w1_1_2, w2_0);                      /*0049*/
   freia_70_spoc_helper_0_3_0(out, w1_1, w2_1);                         /*0052*/

   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w1_1_2);
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! cleaned up function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w2_0, *w1_1, *w2_1;                                    /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_70_spoc_helper_0_0_0(out, w2_0, in, freia_morpho_k8_0, neighborTransposed_0, 255);           /*0032*/
   freia_70_spoc_helper_0_1_0(w1_1_2, w1_1, out, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_1, neighborTransposed_2);                /*0036*/

   freia_70_spoc_helper_0_2_0(w2_1, w1_1_2, w2_0);                      /*0049*/
   freia_70_spoc_helper_0_3_0(out, w1_1, w2_1);                         /*0052*/

   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w1_1_2);
   freia_common_destruct_data(w2_1);                                    /*0057*/
}
#
# TERAPIX
#

! initial function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0036*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0037*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0038*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0039*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0040*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0041*/

   freia_aipo_not(out, in);                                             /*0043*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0044*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_0);               /*0045*/
   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0046*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0047*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_1);               /*0048*/
   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0049*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0050*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_2);               /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! graphs

// graph for dag "dag_0" of module "freia_70" in dot format
// DAG "dag_0": #i=1 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 E8" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 E8" [label="w1_1"];
  "46 <_" [shape=trapezium,orientation=270];
  "46 <_" -> "49 <" [label="w2_1"];
  "45 E8" [shape=box];
  "45 E8" -> "46 <_" [label="w1_1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 E8" [label="w1_1"];
  "43 !" [shape=trapezium,orientation=270];
  "43 !" -> "50 D8" [label="out"];
  "43 !" -> "47 D8" [label="out"];
  "43 !" -> "44 D8" [label="out"];
  "41 <" [shape=trapezium,orientation=270];
  "40 E8" [shape=box];
  "40 E8" -> "41 <" [label="w1_0"];
  "39 D8" [shape=box];
  "39 D8" -> "40 E8" [label="w1_0"];
  "38 <" [shape=trapezium,orientation=270];
  "38 <" -> "41 <" [label="w2_0"];
  "37 E8" [shape=box];
  "37 E8" -> "38 <" [label="w1_0"];
  "36 D8" [shape=box];
  "36 D8" -> "37 E8" [label="w1_0"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "38 <" [label="w2_0"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out"];
  "32 !" -> "36 D8" [label="out"];
  "32 !" -> "33 D8" [label="out"];
  "in" -> "43 !";
  "in" -> "32 !";
}
// graph for dag "dag_cleaned_0" of module "freia_70" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}
// graph for dag "freia_70_terapix_helper_0_0_0" of module "freia_70" in dot format
// DAG "freia_70_terapix_helper_0_0_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 20 ops and 0 copies, optimized to 10 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_70
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 10 image operations in dag
 * dag length is 7, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 105
 * - communication: 48
 */
freia_status freia_70_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3,
  const int32_t * pi4,
  const int32_t * pi5,
  const int32_t * pi6,
  const int32_t * pi7,
  int32_t pi8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // operation 3 parameters
  int16_t p_3[9];
  const int32_t x_3 = 6;
  const int32_t y_3 = 0;
  // operation 4 parameters
  int16_t p_4[9];
  const int32_t x_4 = 9;
  const int32_t y_4 = 0;
  // operation 5 parameters
  int16_t p_5[9];
  const int32_t x_5 = 12;
  const int32_t y_5 = 0;
  // operation 6 parameters
  int16_t p_6[9];
  const int32_t x_6 = 15;
  const int32_t y_6 = 0;
  // operation 7 parameters
  int16_t p_7[1];
  const int32_t x_7 = 18;
  const int32_t y_7 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][10];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 2;
  int image_height = i0->heightWa;
  int max_computed_size = 200;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: !(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_NOT;
  // 1: D8(1) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_2;
  mcu_macro[1][1].xmin2 = imagelet_2;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi2[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi3[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(1) -> 4
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_4;
  mcu_macro[1][3].xmin2 = imagelet_4;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  for(i=0; i<9; i++)
    p_3[i] = pi4[i];
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_2;
  mcu_macro[1][4].xmin1 = imagelet_2;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  for(i=0; i<9; i++)
    p_4[i] = pi5[i];
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_2;
  mcu_macro[1][5].xmin2 = imagelet_2;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  for(i=0; i<9; i++)
    p_5[i] = pi6[i];
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(4) -> 3
  mcu_macro[0][6].xmin1 = imagelet_4;
  mcu_macro[1][6].xmin1 = imagelet_4;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  for(i=0; i<9; i++)
    p_6[i] = pi7[i];
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: <_(1) -> 4
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_4;
  mcu_macro[1][7].xmin2 = imagelet_4;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  // copy of operation 7 parameters
  p_7[0] = pi8;
  gram.xoffset = x_7;
  gram.yoffset = y_7;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_7;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][7].xmin3 = x_7;
  mcu_macro[1][7].xmin3 = x_7;
  mcu_macro[0][7].ymin3 = y_7;
  mcu_macro[1][7].ymin3 = y_7;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_INF_CONST;
  // 8: <(4,2) -> 4
  mcu_macro[0][8].xmin1 = imagelet_4;
  mcu_macro[1][8].xmin1 = imagelet_4;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_2;
  mcu_macro[1][8].xmin2 = imagelet_2;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = imagelet_4;
  mcu_macro[1][8].xmin3 = imagelet_4;
  mcu_macro[0][8].ymin3 = 0;
  mcu_macro[1][8].ymin3 = 0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_INF3;
  // 9: <(4,3) -> 1
  mcu_macro[0][9].xmin1 = imagelet_4;
  mcu_macro[1][9].xmin1 = imagelet_4;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = imagelet_io_1_0;
  mcu_macro[1][9].xmin3 = imagelet_io_1_1;
  mcu_macro[0][9].ymin3 = 0;
  mcu_macro[1][9].ymin3 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_INF3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 2;
  mcu_instr.borderRight  = 2;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 10;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   
   
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_70_terapix_helper_0_0_0(out, in, freia_morpho_k8_0, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_0, neighborTransposed_1, neighborTransposed_2, 255);       /*0032*/
   
   
   ;
}

! cleaned up function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   
   
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_70_terapix_helper_0_0_0(out, in, freia_morpho_k8_0, freia_morpho_k8_1, freia_morpho_k8_2, neighborTransposed_0, neighborTransposed_1, neighborTransposed_2, 255);       /*0032*/
   
   
   ;
}
#
# OPENCL
#

! initial function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0036*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0037*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0038*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0039*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0040*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0041*/

   freia_aipo_not(out, in);                                             /*0043*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0044*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_0);               /*0045*/
   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0046*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0047*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_1);               /*0048*/
   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0049*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0050*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_2);               /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! graphs

// graph for dag "dag_0" of module "freia_70" in dot format
// DAG "dag_0": #i=1 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 E8" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 E8" [label="w1_1"];
  "46 <_" [shape=trapezium,orientation=270];
  "46 <_" -> "49 <" [label="w2_1"];
  "45 E8" [shape=box];
  "45 E8" -> "46 <_" [label="w1_1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 E8" [label="w1_1"];
  "43 !" [shape=trapezium,orientation=270];
  "43 !" -> "50 D8" [label="out"];
  "43 !" -> "47 D8" [label="out"];
  "43 !" -> "44 D8" [label="out"];
  "41 <" [shape=trapezium,orientation=270];
  "40 E8" [shape=box];
  "40 E8" -> "41 <" [label="w1_0"];
  "39 D8" [shape=box];
  "39 D8" -> "40 E8" [label="w1_0"];
  "38 <" [shape=trapezium,orientation=270];
  "38 <" -> "41 <" [label="w2_0"];
  "37 E8" [shape=box];
  "37 E8" -> "38 <" [label="w1_0"];
  "36 D8" [shape=box];
  "36 D8" -> "37 E8" [label="w1_0"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "38 <" [label="w2_0"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out"];
  "32 !" -> "36 D8" [label="out"];
  "32 !" -> "33 D8" [label="out"];
  "in" -> "43 !";
  "in" -> "32 !";
}
// graph for dag "dag_cleaned_0" of module "freia_70" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}
// graph for dag "freia_70_opencl_helper_0_0" of module "freia_70" in dot format
// DAG "freia_70_opencl_helper_0_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}
// graph for dag "freia_70_opencl_helper_0_0_1" of module "freia_70" in dot format
// DAG "freia_70_opencl_helper_0_0_1": #i=1 #o=3 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_opencl_helper_0_0_1" {
  // inputs
  "out_2" [shape=circle];

  // outputs
  "w1_0_5" [shape=circle];
  "w1_0_3" [shape=circle];
  "w1_0_1" [shape=circle];

  // computation vertices
  "39 D8" [shape=box];
  "39 D8" -> "w1_0_1";
  "36 D8" [shape=box];
  "36 D8" -> "w1_0_3";
  "33 D8" [shape=box];
  "33 D8" -> "w1_0_5";
  "out_2" -> "39 D8";
  "out_2" -> "36 D8";
  "out_2" -> "33 D8";
}
// graph for dag "freia_70_opencl_helper_0_0_3" of module "freia_70" in dot format
// DAG "freia_70_opencl_helper_0_0_3": #i=3 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "freia_70_opencl_helper_0_0_3" {
  // inputs
  "w1_0_4" [shape=circle];
  "w1_1" [shape=circle];
  "w1_1_2" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "w1_1" -> "52 <";
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "w1_1_2" -> "49 <";
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "w1_0_4" -> "35 <_";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 20 ops and 0 copies, optimized to 10 ops and 0+0+0 copies

// hold kernels for freia_70_opencl_helper_0_0_1
static cl_kernel freia_70_opencl_helper_0_0_1_kernel[2];

// compile kernels for freia_70_opencl_helper_0_0_1
static freia_status freia_70_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for freia_70_opencl_helper_0_0_1
  const char * freia_70_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_70_opencl_helper_0_0_1\n"
    "KERNEL void freia_70_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * o2,\n"
    "  int ofs_o2,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t33 = PIXEL_MIN;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t36 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL t39 = PIXEL_MIN;\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "\n"
    "    // pixel computations\n"
    "    t33 = PIXEL_SUP(t33, (is_W)? PIXEL_MIN: in0W);\n"
    "    t33 = PIXEL_SUP(t33, in0);\n"
    "    t33 = PIXEL_SUP(t33, (is_E)? PIXEL_MIN: in0E);\n"
    "    t36 = PIXEL_SUP(t36, (is_N)? PIXEL_MIN: in0N);\n"
    "    t36 = PIXEL_SUP(t36, in0);\n"
    "    t36 = PIXEL_SUP(t36, (is_S)? PIXEL_MIN: in0S);\n"
    "    t39 = PIXEL_SUP(t39, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t39 = PIXEL_SUP(t39, in0);\n"
    "    t39 = PIXEL_SUP(t39, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t33;\n"
    "    p1[i] = t36;\n"
    "    p2[i] = t39;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_70_opencl_helper_0_0_1_source, "freia_70_opencl_helper_0_0_1", "-DPIXEL8", &freia_70_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(freia_70_opencl_helper_0_0_1_source, "freia_70_opencl_helper_0_0_1", "-DPIXEL16", &freia_70_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function freia_70_opencl_helper_0_0_1
freia_status freia_70_opencl_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_70_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_70_opencl_helper_0_0_1_kernel[bpp];

  // call kernel freia_70_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 3, 1, 0, 0, o0, o1, o2, i0);

  return err;
}

// hold kernels for freia_70_opencl_helper_0_0_3
static cl_kernel freia_70_opencl_helper_0_0_3_kernel[2];

// compile kernels for freia_70_opencl_helper_0_0_3
static freia_status freia_70_opencl_helper_0_0_3_compile(void)
{
  // OpenCL source for freia_70_opencl_helper_0_0_3
  const char * freia_70_opencl_helper_0_0_3_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_70_opencl_helper_0_0_3\n"
    "KERNEL void freia_70_opencl_helper_0_0_3(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t35 = PIXEL_INF(in0, c0);\n"
    "    PIXEL t49 = PIXEL_INF(t35, in2);\n"
    "    PIXEL t52 = PIXEL_INF(t49, in1);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t52;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_70_opencl_helper_0_0_3_source, "freia_70_opencl_helper_0_0_3", "-DPIXEL8", &freia_70_opencl_helper_0_0_3_kernel[0]);
  err |= freia_op_compile_kernel(freia_70_opencl_helper_0_0_3_source, "freia_70_opencl_helper_0_0_3", "-DPIXEL16", &freia_70_opencl_helper_0_0_3_kernel[1]);
  return err;
}

// helper function freia_70_opencl_helper_0_0_3
freia_status freia_70_opencl_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t c0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_70_opencl_helper_0_0_3_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_70_opencl_helper_0_0_3_kernel[bpp];

  // call kernel freia_70_opencl_helper_0_0_3
  err |= freia_op_call_kernel(kernel, 1, 3, 1, 0, o0, i0, i1, i2, c0);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_70

// opencl for dag 0

// opencl function freia_70_opencl_helper_0_0_1
KERNEL void freia_70_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * o2,
  int ofs_o2,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t33 = PIXEL_MIN;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t36 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL t39 = PIXEL_MIN;
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];

    // pixel computations
    t33 = PIXEL_SUP(t33, (is_W)? PIXEL_MIN: in0W);
    t33 = PIXEL_SUP(t33, in0);
    t33 = PIXEL_SUP(t33, (is_E)? PIXEL_MIN: in0E);
    t36 = PIXEL_SUP(t36, (is_N)? PIXEL_MIN: in0N);
    t36 = PIXEL_SUP(t36, in0);
    t36 = PIXEL_SUP(t36, (is_S)? PIXEL_MIN: in0S);
    t39 = PIXEL_SUP(t39, (is_N|is_E)? PIXEL_MIN: in0NE);
    t39 = PIXEL_SUP(t39, in0);
    t39 = PIXEL_SUP(t39, (is_S|is_W)? PIXEL_MIN: in0SW);

    // set output pixels
    p0[i] = t33;
    p1[i] = t36;
    p2[i] = t39;
  }
}

// opencl function freia_70_opencl_helper_0_0_3
KERNEL void freia_70_opencl_helper_0_0_3(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in2 = j2[i];
    PIXEL in1 = j1[i];

    // pixel computations
    PIXEL t35 = PIXEL_INF(in0, c0);
    PIXEL t49 = PIXEL_INF(t35, in2);
    PIXEL t52 = PIXEL_INF(t49, in1);

    // set output pixels
    p0[i] = t52;
  }
}

! updated function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w1_1;                                           /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_3 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_70_opencl_helper_0_0_1(w1_0, w1_0_3, w1_0_1, out);             /*0033*/
   freia_aipo_erode_8c(w1_0_4, w1_0, neighborTransposed_0);             /*0034*/
   freia_aipo_erode_8c(w1_1_2, w1_0_3, neighborTransposed_1);           /*0048*/
   freia_aipo_erode_8c(w1_1, w1_0_1, neighborTransposed_2);             /*0051*/
   freia_70_opencl_helper_0_0_3(out, w1_0_4, w1_1, w1_1_2, 255);        /*0052*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w1_0_1);
   freia_common_destruct_data(w1_0_3);
   freia_common_destruct_data(w1_0_4);
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w1_1_2);
}

! cleaned up function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w1_1;                                           /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   // hardware accelerator generated variable
   freia_data2d *w1_1_2 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_3 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa), *w1_0_4 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_70_opencl_helper_0_0_1(w1_0, w1_0_3, w1_0_1, out);             /*0033*/
   freia_aipo_erode_8c(w1_0_4, w1_0, neighborTransposed_0);             /*0034*/
   freia_aipo_erode_8c(w1_1_2, w1_0_3, neighborTransposed_1);           /*0048*/
   freia_aipo_erode_8c(w1_1, w1_0_1, neighborTransposed_2);             /*0051*/
   freia_70_opencl_helper_0_0_3(out, w1_0_4, w1_1, w1_1_2, 255);        /*0052*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w1_0_1);
   freia_common_destruct_data(w1_0_3);
   freia_common_destruct_data(w1_0_4);
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w1_1_2);
}
#
# SIGMAC
#
#
# compile generated freia_70
#

! initial function

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   freia_data2d *w1_0, *w2_0, *w1_1, *w2_1;                             /*0018*/
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/

   w1_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0023*/
   w2_0 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0024*/
   w1_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0025*/
   w2_1 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);             /*0026*/

   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_aipo_not(out, in);                                             /*0032*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_0);                  /*0033*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0034*/
   freia_aipo_inf_const(w2_0, w1_0, 255);                               /*0035*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_1);                  /*0036*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0037*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0038*/
   freia_aipo_dilate_8c(w1_0, out, freia_morpho_k8_2);                  /*0039*/
   freia_aipo_erode_8c(w1_0, w1_0, neighborTransposed_0);               /*0040*/
   freia_aipo_inf(w2_0, w2_0, w1_0);                                    /*0041*/

   freia_aipo_not(out, in);                                             /*0043*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_0);                  /*0044*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_0);               /*0045*/
   freia_aipo_inf_const(w2_1, w1_1, 255);                               /*0046*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_1);                  /*0047*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_1);               /*0048*/
   freia_aipo_inf(w2_1, w2_1, w1_1);                                    /*0049*/
   freia_aipo_dilate_8c(w1_1, out, freia_morpho_k8_2);                  /*0050*/
   freia_aipo_erode_8c(w1_1, w1_1, neighborTransposed_2);               /*0051*/
   freia_aipo_inf(out, w2_1, w1_1);                                     /*0052*/

   freia_common_destruct_data(w1_0);                                    /*0054*/
   freia_common_destruct_data(w2_0);                                    /*0055*/
   freia_common_destruct_data(w1_1);                                    /*0056*/
   freia_common_destruct_data(w2_1);                                    /*0057*/
}

! graphs

// graph for dag "dag_0" of module "freia_70" in dot format
// DAG "dag_0": #i=1 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 E8" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 E8" [label="w1_1"];
  "46 <_" [shape=trapezium,orientation=270];
  "46 <_" -> "49 <" [label="w2_1"];
  "45 E8" [shape=box];
  "45 E8" -> "46 <_" [label="w1_1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 E8" [label="w1_1"];
  "43 !" [shape=trapezium,orientation=270];
  "43 !" -> "50 D8" [label="out"];
  "43 !" -> "47 D8" [label="out"];
  "43 !" -> "44 D8" [label="out"];
  "41 <" [shape=trapezium,orientation=270];
  "40 E8" [shape=box];
  "40 E8" -> "41 <" [label="w1_0"];
  "39 D8" [shape=box];
  "39 D8" -> "40 E8" [label="w1_0"];
  "38 <" [shape=trapezium,orientation=270];
  "38 <" -> "41 <" [label="w2_0"];
  "37 E8" [shape=box];
  "37 E8" -> "38 <" [label="w1_0"];
  "36 D8" [shape=box];
  "36 D8" -> "37 E8" [label="w1_0"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "38 <" [label="w2_0"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out"];
  "32 !" -> "36 D8" [label="out"];
  "32 !" -> "33 D8" [label="out"];
  "in" -> "43 !";
  "in" -> "32 !";
}
// graph for dag "dag_cleaned_0" of module "freia_70" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=10 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "52 <" [shape=trapezium,orientation=270];
  "52 <" -> "out";
  "51 E8" [shape=box];
  "51 E8" -> "52 <" [label="w1_1"];
  "49 <" [shape=trapezium,orientation=270];
  "49 <" -> "52 <" [label="w2_1"];
  "48 E8" [shape=box];
  "48 E8" -> "49 <" [label="w1_1_2"];
  "39 D8" [shape=box];
  "39 D8" -> "51 E8" [label="w1_0_1"];
  "36 D8" [shape=box];
  "36 D8" -> "48 E8" [label="w1_0_3"];
  "35 <_" [shape=trapezium,orientation=270];
  "35 <_" -> "49 <" [label="w2_0_2"];
  "34 E8" [shape=box];
  "34 E8" -> "35 <_" [label="w1_0_4"];
  "33 D8" [shape=box];
  "33 D8" -> "34 E8" [label="w1_0_5"];
  "32 !" [shape=trapezium,orientation=270];
  "32 !" -> "39 D8" [label="out_2"];
  "32 !" -> "36 D8" [label="out_2"];
  "32 !" -> "33 D8" [label="out_2"];
  "in" -> "32 !";
}

! updated function for OPENCL

void freia_70(freia_data2d *out, const freia_data2d *in)
{
   int32_t neighborTransposed_0[9];                                     /*0019*/
   int32_t neighborTransposed_1[9];                                     /*0020*/
   int32_t neighborTransposed_2[9];                                     /*0021*/
   
   
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_0);          /*0028*/
   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_1);          /*0029*/
   transposeNeighbor(neighborTransposed_2, freia_morpho_k8_2);          /*0030*/

   freia_mppa_launch(0, 1, 1, 0, 0, in, out);                           /*0052*/
   
   
   ;
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_70 fname=freia_70_sigmac_helper_0 split=0


/*#####################################################################*/
/*################ freia_70_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_INFC(pi0, 255);
  int16_t po1 = PIXEL_INF(po0, pi1);
  int16_t po2 = PIXEL_INF(po1, pi2);
  outp[0][i] = po2;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi1_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi1_0, int16_t)


#define pi2_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\

CUSTOM_MORPHO_AGENT(pi2_0, int16_t)


#define pi3_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\

CUSTOM_MORPHO_AGENT(pi3_0, int16_t)


#define pi5_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi5_0, int16_t)


#define pi6_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi6_0, int16_t)

subgraph
freia_70_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi1[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi2[9] = { 0, 0, 1, 0, 1, 0, 1, 0, 0 };
    int16_t pi3[9] = { 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    int16_t pi4 = 255;
    int16_t pi5[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi6[9] = { 0, 0, 0, 1, 1, 1, 0, 0, 0 };

    // instantiations...
    agent dup0 = new rep(3, width);
    agent not0 = new img_invert_16(width);
    agent dil2 = new dilate_pi6_0(width, height);
    agent ero2 = new erode_pi5_0(width, height);
    agent dil1 = new dilate_pi3_0(width, height);
    agent dil0 = new dilate_pi2_0(width, height);
    agent ero1 = new erode_pi1_0(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);

    // connections...
    connect (strin.output[0] /* in */, not0.input);
    connect (not0.output, dup0.input);
    connect (dup0.output[2], dil0.input);
    connect (dup0.output[1], dil1.input);
    connect (dup0.output[0], dil2.input);
    connect (dil2.output, ero2.input);
    connect (ero2.output, cpd0.input[0]);
    connect (dil1.output, ero1.input);
    connect (dil0.output, ero0.input);
    connect (ero1.output, cpd0.input[1]);
    connect (ero0.output, cpd0.input[2]);
    connect (cpd0.output[0], strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_70_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


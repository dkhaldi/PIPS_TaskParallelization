
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int i, j, m, n, k1, k2;

//  T(i,j,k1,k2) {i==0, j==0, k1==0, k2==0}

   i = j = k1 = k2 = 0;

//  T(m) {i==0, j==0, k1==0, k2==0, 0<=m}

   m = rand();

//  T(n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   n = rand();

//  T() {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (!(k1<=m&&k2<=n))

//  T() {0==-1}

      checking_error();

//  T(i,j,k1,k2) {i==k2, i#init==k2#init, 0<=i, i#init<=i, i<=n, j<=m,
//    k1<=m, 0<=m}

   while (rand_b())

//  T(i,j,k1,k2) {i+k2#init==i#init+k2, i#init<=i, i<=i#init+1,
//    i+j<=i#init+j#init+1, i#init+1<=n, j<=m, k1<=m, k2<=n, 0<=m,
//    0<=n}

      if (rand_b()) {

//  T() {i+1<=n, j+1<=m, 0<=m, 0<=n}

         if (!(i<n&&j<m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==j#init+1, i+1<=n, j<=m, 0<=m, 0<=n}

         j++;

//  T(k1) {k1==k1#init+1, i+1<=n, j<=m, 0<=m, 0<=n}

         k1++;

//  T() {i+1<=n, j<=m, k1<=m, k2<=n, 0<=m, 0<=n}

         if (!(k1<=m&&k2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {i+1<=n, m<=j, 0<=m, 0<=n}

         if (!(i<n&&j>=m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==0, i+1<=n, m<=j#init, 0<=m, 0<=n}

         j = 0;

//  T(i) {i==i#init+1, j==0, i<=n, 0<=m, 0<=n}

         i++;

//  T(k1) {j==0, k1==0, i<=n, 0<=m, 0<=n}

         k1 = 0;

//  T(k2) {j==0, k1==0, k2==k2#init+1, i<=n, 0<=m, 0<=n}

         k2++;

//  T() {j==0, k1==0, i<=n, k2<=n, 0<=m, 0<=n}

         if (!(k1<=m&&k2<=n))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int i, j, m, n, k1, k2;

//  T(i,j,k1,k2) {i==0, j==0, k1==0, k2==0}

   i = j = k1 = k2 = 0;

//  T(m) {i==0, j==0, k1==0, k2==0, 0<=m}

   m = rand();

//  T(n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   n = rand();

//  T() {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (!(k1<=m&&k2<=n))

//  T() {0==-1}

      checking_error();

//  T() {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (i<n) {
   }
   else {
      goto L3;
   }

//  T() {i==0, j==0, k1==0, k2==0, 0<=m, 1<=n}

   if (j<m) goto L1;

//  T() {i==0, j==k1, j==m, k2==0, 0<=j, 1<=n}

L2:   ;

//  T(i,j,k1,k2) {i==k2, i#init==k2#init, j==k1, j==m, 0<=i,
//    k2#init<=i, i+1<=n, 0<=j, j<=j#init}

   while (rand_b())

//  T(i,j,k1,k2) {i==i#init+1, j==k1, j==m, k2==k2#init+1, i+1<=n,
//    0<=j, j<=j#init, k2<=n, 1<=n}

      if (rand_b()) {

//  T() {m==0, i+2<=n, 0<=j, 1<=n}

         if (!(i<n-1&&j>=m&&0>=m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==0, m==0, i+2<=n, 0<=j#init, 1<=n}

         j = 0;

//  T(i) {i==i#init+1, j==0, m==0, i+1<=n, 1<=n}

         i++;

//  T(k1) {j==0, k1==0, m==0, i+1<=n, 1<=n}

         k1 = 0;

//  T(k2) {j==0, k1==0, k2==k2#init+1, m==0, i+1<=n, 1<=n}

         k2++;

//  T() {j==0, k1==0, m==0, i+1<=n, k2<=n, 1<=n}

         if (!(k1<=m&&k2<=n))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {i+2<=n, m<=j, 1<=m, 1<=n}

         if (!(i<n-1&&j>=m&&0<m))

//  T() {0==-1}

            deadlock();

//  T(j) {j==0, i+2<=n, m<=j#init, 1<=m, 1<=n}

         j = 0;

//  T(i) {i==i#init+1, j==0, i+1<=n, 1<=m, 1<=n}

         i++;

//  T(k1) {j==0, k1==0, i+1<=n, 1<=m, 1<=n}

         k1 = 0;

//  T(k2) {j==0, k1==0, k2==k2#init+1, i+1<=n, 1<=m, 1<=n}

         k2++;

//  T() {j==0, k1==0, i+1<=n, k2<=n, 1<=m, 1<=n}

         if (!(k1<=m&&k2<=n))

//  T() {0==-1}

            checking_error();

//  T(j,k1) {j==k1, j#init==k1#init, i+1<=n, 0<=j, j#init<=j, j+1<=m,
//    k2<=n, 1<=n}

         while (rand_b()) {

//  T() {i+1<=n, j+2<=m, k2<=n, 1<=m, 1<=n}

            if (!(i<n&&j<m-1))

//  T() {0==-1}

               deadlock();

//  T(j) {j==j#init+1, i+1<=n, j+1<=m, k2<=n, 1<=m, 1<=n}

            j++;

//  T(k1) {k1==k1#init+1, i+1<=n, j+1<=m, k2<=n, 1<=m, 1<=n}

            k1++;

//  T() {i+1<=n, j+1<=m, k1<=m, k2<=n, 1<=m, 1<=n}

            if (!(k1<=m&&k2<=n))

//  T() {0==-1}

               checking_error();
         }

//  T() {j==k1, j==m-1, i+1<=n, 0<=j, k2<=n, 1<=n}

         if (!(i<n&&j==m-1))

//  T() {0==-1}

            deadlock();

//  T(j) {j==j#init+1, j==k1+1, j==m, i+1<=n, 1<=j, k2<=n, 1<=n}

         j++;

//  T(k1) {j==k1, j==k1#init+1, j==m, i+1<=n, 1<=j, k2<=n, 1<=n}

         k1++;

//  T() {j==k1, j==m, i+1<=n, 1<=j, k2<=n, 1<=n}

         if (!(k1<=m&&k2<=n))

//  T() {0==-1}

            checking_error();
      }

//  T() {i==k2, i==n-1, j==m, 0<=i, 0<=j}

   if (!(i==n-1&&j>=m))

//  T() {0==-1}

      deadlock();

//  T(j) {i==k2, i==n-1, j==0, j#init==m, 0<=i, 0<=j#init}

   j = 0;

//  T(i) {i==i#init+1, i==k2+1, i==n, j==0, 1<=i, 0<=m}

   i++;

//  T(k1) {i==k2+1, i==n, j==0, k1==0, 1<=i, 0<=m}

   k1 = 0;

//  T(k2) {i==k2, i==k2#init+1, i==n, j==0, k1==0, 1<=i, 0<=m}

   k2++;

//  T() {i==k2, i==n, j==0, k1==0, 1<=i, 0<=m}

   if (!(k1<=m&&k2<=n))

//  T() {0==-1}

      checking_error();
   goto L3;

//  T() {i==0, j==0, k1==0, k2==0, 1<=m, 1<=n}

L1:   ;

//  T(j,k1) {i==0, j==k1, j#init==k1#init, k2==0, 0<=j, j#init<=j,
//    j+1<=m, 1<=n}

   while (rand_b()) {

//  T() {i==0, k2==0, j+2<=m, 1<=m, 1<=n}

      if (!(i<n&&j<m-1))

//  T() {0==-1}

         deadlock();

//  T(j) {i==0, j==j#init+1, k2==0, j+1<=m, 1<=m, 1<=n}

      j++;

//  T(k1) {i==0, k1==k1#init+1, k2==0, j+1<=m, 1<=m, 1<=n}

      k1++;

//  T() {i==0, k2==0, j+1<=m, k1<=m, 1<=m, 1<=n}

      if (!(k1<=m&&k2<=n))

//  T() {0==-1}

         checking_error();
   }

//  T() {i==0, j==k1, j==m-1, k2==0, 0<=j, 1<=n}

   if (!(i<n&&j==m-1))

//  T() {0==-1}

      deadlock();

//  T(j) {i==0, j==j#init+1, j==k1+1, j==m, k2==0, 1<=j, 1<=n}

   j++;

//  T(k1) {i==0, j==k1, j==k1#init+1, j==m, k2==0, 1<=j, 1<=n}

   k1++;

//  T() {i==0, j==k1, j==m, k2==0, 1<=j, 1<=n}

   if (!(k1<=m&&k2<=n))

//  T() {0==-1}

      checking_error();
   goto L2;

//  T() {i==k2, i==n, j==0, k1==0, 0<=i, 0<=m}

L3:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int i, j, m, n, k1, k2;

//  P() {}

   i = j = k1 = k2 = 0;

//  P(i,j,k1,k2) {i==0, j==0, k1==0, k2==0}

   m = rand();

//  P(i,j,k1,k2,m) {i==0, j==0, k1==0, k2==0, 0<=m}

   n = rand();

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (!(k1<=m&&k2<=n))

//  P() {0==-1}

      checking_error();

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   while (rand_b())

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i<=n, j<=m, k1<=m, 0<=m}

      if (rand_b()) {

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i<=n, j<=m, k1<=m, 0<=m}

         if (!(i<n&&j<m))

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i<=n, j<=m, k1<=m, 0<=m}

            deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i+1<=n, j+1<=m, k1<=m, 0<=m}

         j++;

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i+1<=n, j<=m, k1<=m, 0<=m, 0<=n}

         k1++;

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i+1<=n, j<=m, k1<=m+1, 0<=m, 0<=n}

         if (!(k1<=m&&k2<=n))

//  P(i,j,k1,k2,m,n) {i==k2, k1==m+1, 0<=i, i+1<=n, j+1<=k1, 1<=k1,
//    0<=n}

            checking_error();
      }
      else {

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i<=n, j<=m, k1<=m, 0<=m}

         if (!(i<n&&j>=m))

//  P(i,j,k1,k2,m,n) {i==k2, 0<=i, i<=n, j<=m, k1<=m, 0<=m}

            deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, j==m, 0<=i, i+1<=n, 0<=j, k1<=j}

         j = 0;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, 0<=i, i+1<=n, k1<=m, 0<=m, 0<=n}

         i++;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, 1<=i, i<=n, k1<=m, 0<=m, 0<=n}

         k1 = 0;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, k1==0, 1<=i, i<=n, 0<=m, 0<=n}

         k2++;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, 1<=i, i<=n, 0<=m, 0<=n}

         if (!(k1<=m&&k2<=n))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int i, j, m, n, k1, k2;

//  P() {}

   i = j = k1 = k2 = 0;

//  P(i,j,k1,k2) {i==0, j==0, k1==0, k2==0}

   m = rand();

//  P(i,j,k1,k2,m) {i==0, j==0, k1==0, k2==0, 0<=m}

   n = rand();

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (!(k1<=m&&k2<=n))

//  P() {0==-1}

      checking_error();

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 0<=m, 0<=n}

   if (i<n) {
   }
   else {
      goto L3;
   }

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 0<=m, 1<=n}

   if (j<m) goto L1;

//  P(i,j,k1,k2,m,n) {i==0, j==k1, j==m, k2==0, 0<=j, 1<=n}

L2:   ;

//  P(i,j,k1,k2,m,n) {i==0, j==k1, j==m, k2==0, 0<=j, 1<=n}

   while (rand_b())

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

      if (rand_b()) {

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

         if (!(i<n-1&&j>=m&&0>=m))

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

            deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, m==0, 0<=i, i+2<=n}

         j = 0;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, m==0, 0<=i, i+2<=n, 1<=n}

         i++;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, k1==0, m==0, 1<=i, i+1<=n, 1<=n}

         k1 = 0;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, k1==0, m==0, 1<=i, i+1<=n, 1<=n}

         k2++;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, m==0, 1<=i, i+1<=n, 1<=n}

         if (!(k1<=m&&k2<=n))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

         if (!(i<n-1&&j>=m&&0<m))

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

            deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+2<=n, 1<=j}

         j = 0;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==m, 0<=i, i+2<=n, 1<=k1, 1<=n}

         i++;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, k1==m, 1<=i, i+1<=n, 1<=k1, 1<=n}

         k1 = 0;

//  P(i,j,k1,k2,m,n) {i==k2+1, j==0, k1==0, 1<=i, i+1<=n, 1<=m, 1<=n}

         k2++;

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, 1<=i, i+1<=n, 1<=m, 1<=n}

         if (!(k1<=m&&k2<=n))

//  P() {0==-1}

            checking_error();

//  P(i,j,k1,k2,m,n) {i==k2, j==0, k1==0, 1<=i, i+1<=n, 1<=m, 1<=n}

         while (rand_b()) {

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, 1<=i, i+1<=n, 0<=j, j+1<=m}

            if (!(i<n&&j<m-1))

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m-1, 1<=i, i+1<=n, 0<=j}

               deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, 1<=i, i+1<=n, 0<=j, j+2<=m}

            j++;

//  P(i,j,k1,k2,m,n) {i==k2, j==k1+1, 1<=i, i+1<=n, 1<=j, j+1<=m,
//    1<=m, 1<=n}

            k1++;

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, 1<=i, i+1<=n, 1<=j, j+1<=m, 1<=m,
//    1<=n}

            if (!(k1<=m&&k2<=n))

//  P() {0==-1}

               checking_error();
         }

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, 1<=i, i+1<=n, 0<=j, j+1<=m, 1<=n}

         if (!(i<n&&j==m-1))

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, 1<=i, i+1<=n, 0<=j, j+2<=m, 1<=n}

            deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m-1, 1<=i, i+1<=n, 0<=j, 1<=n}

         j++;

//  P(i,j,k1,k2,m,n) {i==k2, j==k1+1, j==m, 1<=i, i+1<=n, 1<=j, 1<=n}

         k1++;

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 1<=i, i+1<=n, 1<=j, 1<=n}

         if (!(k1<=m&&k2<=n))

//  P() {0==-1}

            checking_error();
      }

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+1<=n, 0<=j}

   if (!(i==n-1&&j>=m))

//  P(i,j,k1,k2,m,n) {i==k2, j==k1, j==m, 0<=i, i+2<=n, 0<=j}

      deadlock();

//  P(i,j,k1,k2,m,n) {i==k2, i==n-1, j==k1, j==m, 0<=i, 0<=j}

   j = 0;

//  P(i,j,k1,k2,m,n) {i==k2, i==n-1, j==0, k1==m, 0<=i, 0<=k1}

   i++;

//  P(i,j,k1,k2,m,n) {i==k2+1, i==n, j==0, k1==m, 1<=i, 0<=k1}

   k1 = 0;

//  P(i,j,k1,k2,m,n) {i==k2+1, i==n, j==0, k1==0, 1<=i, 0<=m}

   k2++;

//  P(i,j,k1,k2,m,n) {i==k2, i==n, j==0, k1==0, 1<=i, 0<=m}

   if (!(k1<=m&&k2<=n))

//  P() {0==-1}

      checking_error();
   goto L3;

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 1<=m, 1<=n}

L1:   ;

//  P(i,j,k1,k2,m,n) {i==0, j==0, k1==0, k2==0, 1<=m, 1<=n}

   while (rand_b()) {

//  P(i,j,k1,k2,m,n) {i==0, j==k1, k2==0, 0<=j, j+1<=m, 1<=n}

      if (!(i<n&&j<m-1))

//  P(i,j,k1,k2,m,n) {i==0, j==k1, j==m-1, k2==0, 0<=j, 1<=n}

         deadlock();

//  P(i,j,k1,k2,m,n) {i==0, j==k1, k2==0, 0<=j, j+2<=m, 1<=n}

      j++;

//  P(i,j,k1,k2,m,n) {i==0, j==k1+1, k2==0, 1<=j, j+1<=m, 1<=m, 1<=n}

      k1++;

//  P(i,j,k1,k2,m,n) {i==0, j==k1, k2==0, 1<=j, j+1<=m, 1<=m, 1<=n}

      if (!(k1<=m&&k2<=n))

//  P() {0==-1}

         checking_error();
   }

//  P(i,j,k1,k2,m,n) {i==0, j==k1, k2==0, 0<=j, j+1<=m, 1<=n}

   if (!(i<n&&j==m-1))

//  P(i,j,k1,k2,m,n) {i==0, j==k1, k2==0, 0<=j, j+2<=m, 1<=n}

      deadlock();

//  P(i,j,k1,k2,m,n) {i==0, j==k1, j==m-1, k2==0, 0<=j, 1<=n}

   j++;

//  P(i,j,k1,k2,m,n) {i==0, j==k1+1, j==m, k2==0, 1<=j, 1<=n}

   k1++;

//  P(i,j,k1,k2,m,n) {i==0, j==k1, j==m, k2==0, 1<=j, 1<=n}

   if (!(k1<=m&&k2<=n))

//  P() {0==-1}

      checking_error();
   goto L2;

//  P(i,j,k1,k2,m,n) {i==k2, i==n, j==0, k1==0, 0<=i, 0<=m}

L3:   ;
}

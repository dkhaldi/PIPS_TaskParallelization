delete for_to_while02
create for_to_while02 for_to_while02.c
module main
echo Select some options to deal with the C Language:
echo Parse as C:
activate C_PARSER
echo Prettyprint the source as C, of course
setproperty PRETTYPRINT_LANGUAGE "C"
setproperty PRETTYPRINT_BLOCKS TRUE
echo Do not display original number lines as comment:
setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE
echo If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER   TRUE
echo Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
setproperty FOR_TO_WHILE_LOOP_IN_CONTROLIZER   TRUE
echo Select the most precise analysis:
activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL
#activate REGION_CHAINS
echo Compute the intraprocedural preconditions at the same time as
echo   transformers and use them to improve the accuracy of expression
echo   and statement transformers:
setproperty SEMANTICS_COMPUTE_TRANSFORMERS_IN_CONTEXT TRUE
setproperty SEMANTICS_FIX_POINT_OPERATOR "derivative"
echo Try to restructure the code for more precision:
setproperty UNSPAGHETTIFY_TEST_RESTRUCTURING=TRUE
setproperty UNSPAGHETTIFY_RECURSIVE_DECOMPOSITION=TRUE
echo Privatize scalar variables on all the modules of the program:

apply PRIVATIZE_MODULE[main]

echo Ask for some statistics about the job to be done:
setproperty PARALLELIZATION_STATISTICS=TRUE
echo Ask for the parallelization of all the modules of the program with OpenMP output:

apply COARSE_GRAIN_PARALLELIZATION[main]

module main
display PRINTED_FILE[main]

# Too much...
#apply FORWARD_SUBSTITUTE[main]
#display PRINTED_FILE[main]

setproperty OUTLINE_LABEL "compute"
setproperty OUTLINE_MODULE_NAME "compute"
apply OUTLINE[main]

echo Regenerate the sources from the PIPS transformed code:
apply UNSPLIT
shell cat for_to_while02.database/Src/*.c
close
#delete for_to_while02
quit


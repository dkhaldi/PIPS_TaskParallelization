#
# Display print_code_preconditions for module induction04
#

//  P() {}

void induction04(int SIZE, double A[SIZE], double B[SIZE][SIZE])
{

//  P() {}

   int i, j;

//  P() {}

   int k = -1;

//  P(k) {k==-1}

   int sum;

//  P(k) {k==-1}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,j,k,sum) {i+1<=SIZE, 0<=i}

      k = i;

//  P(i,j,k,sum) {i==k, i+1<=SIZE, 0<=i}

      for(j = 0; j <= SIZE-1; j += 1) {

//  P(i,j,k,sum) {i+j==k, j+1<=SIZE, k+1<=SIZE+j, 0<=j, j<=k}

         sum = B[j-k][k]+A[k];

//  P(i,j,k,sum) {i+j==k, j+1<=SIZE, k+1<=SIZE+j, 0<=j, j<=k}

         A[k++] = sum;
      }
   }
}
#
# Code after induction_substitution for module induction04
#
void induction04(int SIZE, double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = -1;
   int sum;
   for(i = 0; i <= SIZE-1; i += 1) {
      k = i;
      for(j = 0; j <= SIZE-1; j += 1) {
         sum = B[j-(i+j)][i+j]+A[i+j];
         A[k = i+j+1, k-1] = sum;
      }
   }
}

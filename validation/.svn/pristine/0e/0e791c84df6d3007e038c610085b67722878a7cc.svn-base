
Points-to for "matrix"


// Points To IN: none


// Points To OUT:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// matrix -> *HEAP*_l_16[*] , MAY

float * * matrix(long int nrl, long int nrh, long int ncl, long int nch)
{

// Points To: none

   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;

// Points To: none

   float **m;

// Points To:
// m -> undefined , EXACT

   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));

// Points To:
// *HEAP*_l_16[*] -> undefined , EXACT
// m -> *HEAP*_l_16[0] , MAY

   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;

// Points To:
// *HEAP*_l_16[*] -> undefined , EXACT
// m -> *HEAP*_l_16[*] , MAY


   for(i = nrl; i <= nrh; i += 1) {

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// m -> *HEAP*_l_16[*] , MAY

      m[i] = malloc((size_t) ncol*sizeof(float));

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// *HEAP*_l_16[*] -> *HEAP*_l_21[0] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// m -> *HEAP*_l_16[*] , MAY

      //if (!m[if]) nrerror("allocation failure 2 in matrix()");
      m[i] -= ncl;
   }

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// m -> *HEAP*_l_16[*] , MAY

   /* return pointer to array of pointers to rows */
   return m;
}

Proper effects with points-to for "matrix"

float * * matrix(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m nrl
//             <    is written>: m
   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl; i <= nrh; i += 1) {
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncol nrh nrl 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      m[i] = malloc((size_t) ncol*sizeof(float));
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncl nrh nrl
      //if (!m[if]) nrerror("allocation failure 2 in matrix()");
      m[i] -= ncl;
   }
//             <    is read   >: m
   /* return pointer to array of pointers to rows */
   return m;
}

Cumulated effects with points-to for "matrix"

//             <    is read   >: nch ncl nrh nrl 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
float * * matrix(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m nrl
//             <    is written>: m
   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;
//             <may be read   >: *HEAP*_l_16[*] i m ncl ncol 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: *HEAP*_l_16[*] 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl; i <= nrh; i += 1) {
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncol nrh nrl 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      m[i] = malloc((size_t) ncol*sizeof(float));
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncl nrh nrl
      //if (!m[if]) nrerror("allocation failure 2 in matrix()");
      m[i] -= ncl;
   }
//             <    is read   >: m
   /* return pointer to array of pointers to rows */
   return m;
}

 **** Loop Carried Dependence Graph with Dependence Cones ***

	23 --> 23 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	23 --> 23 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-R-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	23 --> 23 with conflicts
		from <*HEAP*_l_16[*]-R-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	23 --> 21 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	23 --> 21 with conflicts
		from <*HEAP*_l_16[*]-R-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	21 --> 23 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	21 --> 23 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-R-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	21 --> 21 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1

	21 --> 21 with conflicts
		from <*HEAP*_l_16[*]-W-MAY> to <*HEAP*_l_16[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	21 --> 21 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> at levels  1

	21 --> 21 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> at levels  1


****************** End of Dependence Graph ******************
(activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
(tp_parse) Properties should not be updated during tpips processing. Move the setproperty statement at the beginning of your tpips script.

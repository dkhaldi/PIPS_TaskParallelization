void outline14(int W, int H, int R, float Dst[W][H], float Src[W][H], float Kernel[R])
{
   int y, x, k;
   float sum = 0;
#pragma omp parallel for private(x)
   for(y = 0; y <= H-1; y += 1)
#pragma omp parallel for private(k,sum)
      for(x = 0; x <= W-1; x += 1) {
         sum = 0;
here:
         for(k = 0; k <= 2*R; k += 1) {
            int d = y+(k-R);
            if (d>=0&&d<H)
               sum += Src[y][x]*Kernel[R-(k-R)];
         }
         Dst[y][x] = sum;
      }
}
void kernel(int H, int R, int W, float sum_0[1], int x, int y, float Kernel[R], float Src[W][H])
{
   // Declared by Pass Outlining
   int k;
   // Declared as a patch variable by Pass Outlining
   float sum;
   sum = *sum_0;
here:
   for(k = 0; k <= 2*R; k += 1) {
      int d = y+(k-R);
      if (d>=0&&d<H)
         sum += Src[y][x]*Kernel[R-(k-R)];
   }
   *sum_0 = sum;
}
void outline14(int W, int H, int R, float Dst[W][H], float Src[W][H], float Kernel[R])
{
   int y, x, k;
   float sum = 0;
#pragma omp parallel for private(x)
   for(y = 0; y <= H-1; y += 1)
#pragma omp parallel for private(k,sum)
      for(x = 0; x <= W-1; x += 1) {
         sum = 0;
here:         kernel(H, R, W, &sum, x, y, Kernel, Src);
         Dst[y][x] = sum;
      }
}

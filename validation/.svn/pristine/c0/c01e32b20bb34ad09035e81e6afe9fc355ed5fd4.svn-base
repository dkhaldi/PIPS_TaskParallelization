
Initial code

void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   for(i = 4-1; i <= 99; i += 1)
      for(k = 0; k <= 3; k += 1)
         y[i] = y[i]+x[i-k]*h[k];
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float F_0;
   for(i = 4-1; i <= 99; i += 1)
      for(k = 0; k <= 3; k += 1) {
         F_0 = x[i-k]*h[k];
         y[i] = y[i]+F_0;
      }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0;
   for(i = 4-1; i <= 99; i += 1) {
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      F_0 = x[i-(1-1)]*h[1-1];
      RED0[0] = RED0[0]+F_0;
      F_0 = x[i-(2-1)]*h[2-1];
      RED0[1] = RED0[1]+F_0;
      F_0 = x[i-(3-1)]*h[3-1];
      RED0[2] = RED0[2]+F_0;
      F_0 = x[i-(4-1)]*h[4-1];
      RED0[3] = RED0[3]+F_0;
      y[i] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   int i, k;
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_0;
   for(i = 4-1; i <= 99; i += 1) {
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      F_0 = x[i-(1-1)]*h[1-1];
      RED0[0] = RED0[0]+F_0;
      F_0 = x[i-(2-1)]*h[2-1];
      RED0[1] = RED0[1]+F_0;
      F_0 = x[i-(3-1)]*h[3-1];
      RED0[2] = RED0[2]+F_0;
      F_0 = x[i-(4-1)]*h[4-1];
      RED0[3] = RED0[3]+F_0;
      y[i] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int i0;
   for(i0 = 3; i0 <= 99; i0 += 1) {
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      F_00 = x[i0]*h[0];
      RED0[0] = RED0[0]+F_00;
      F_01 = x[i0-1]*h[1];
      RED0[1] = RED0[1]+F_01;
      F_02 = x[i0-2]*h[2];
      RED0[2] = RED0[2]+F_02;
      F_03 = x[i0-3]*h[3];
      RED0[3] = RED0[3]+F_03;
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_00, F_01, F_02, F_03;
   //PIPS generated variable
   int i0;
   for(i0 = 3; i0 <= 99; i0 += 1) {
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      F_00 = x[i0]*h[0];
      RED0[0] = RED0[0]+F_00;
      F_01 = x[i0-1]*h[1];
      RED0[1] = RED0[1]+F_01;
      F_02 = x[i0-2]*h[2];
      RED0[2] = RED0[2]+F_02;
      F_03 = x[i0-3]*h[3];
      RED0[3] = RED0[3]+F_03;
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0;
   for(i0 = 3; i0 <= 99; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40;
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      SIMD_LOAD_V4SF(vec20, &h[0]);
      SIMD_LOAD_GENERIC_V4SF(vec10, x[i0], x[i0-1], x[i0-2], x[i0-3]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec30, &RED0[0]);
      SIMD_ADDPS(vec30, vec30, vec00);
      SIMD_STORE_V4SF(vec30, &RED0[0]);
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //PIPS generated variable
   float F_00, F_01, F_02, F_03;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0;
   SIMD_LOAD_V4SF(vec20_0, &h[0]);
   for(i0 = 3; i0 <= 99; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_GENERIC_V4SF(vec10_0, x[i0], x[i0-1], x[i0-2], x[i0-3]);
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_STORE_V4SF(vec00_0, &pdata0[0]);
      SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}
void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   SIMD_LOAD_V4SF(vec20_0, &h[0]);
   for(i0 = 3; i0 <= 99; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_GENERIC_V4SF(vec10_0, x[i0], x[i0-1], x[i0-2], x[i0-3]);
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);

      SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}

simdized code

void filtre(float x[100], float y[100], float h[4])
{
   //PIPS generated variable
   float RED0[4];
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0;
   SIMD_LOAD_V4SF(vec20_0, &h[0]);
   for(i0 = 3; i0 <= 99; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_GENERIC_V4SF(vec10_0, x[i0], x[i0-1], x[i0-2], x[i0-3]);
      RED0[0] = 0.000000;
      RED0[1] = 0.000000;
      RED0[2] = 0.000000;
      RED0[3] = 0.000000;
      SIMD_LOAD_V4SF(vec30_0, &RED0[0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);

      SIMD_ADDPS(vec30_0, vec30_0, vec00_0);
      SIMD_STORE_V4SF(vec30_0, &RED0[0]);
      y[i0] = RED0[3]+RED0[2]+RED0[1]+RED0[0]+y[i0];
   }
}
seq-ok

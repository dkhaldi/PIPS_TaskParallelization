//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
int main()
{
//             <    is written>: s
   int t, i, a[100], s = 0;
//             <may be read   >: a[*] stdout[0]
//             <may be written>: a[*] stdout[0]
//             <    is read   >: i stdout t __IO_EFFECTS:LUNS[1]
//             <    is written>: i t __IO_EFFECTS:LUNS[1]
   for(t = 0; t <= 9; t += 1) {
//             <may be written>: a[*]
//             <    is read   >: i t
//             <    is written>: i
scmp_task_0:
      for(i = 0; i <= 99; i += 1)
//             <may be written>: a[*]
//             <    is read   >: i t
         a[i] = i*t;
//             <may be read   >: a[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
scmp_task_1:
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: a[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("%d\n", a[i]);
   }
//             <    is read   >: __IO_EFFECTS:LUNS[1]
   return 0;
}
int main()
{
   int t, i, a[100], s = 0;
   for(t = 0; t <= 9; t += 1) {
      {
         //PIPS generated variable
         int (*P4A__a__0)[100] = (int (*)[100]) 0;
         P4A_scmp_malloc((void **) &P4A__a__0, sizeof(int)*100);

scmp_task_0:
         for(i = 0; i <= 99; i += 1)
            (*P4A__a__0)[i-0] = i*t;
         P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &a[0], *P4A__a__0);
         P4A_scmp_dealloc(P4A__a__0);
      }
scmp_task_1:
      for(i = 0; i <= 99; i += 1)
         printf("%d\n", a[i]);
   }
   return 0;
}
int main()
{
   int t, i, a[100], s = 0;
   for(t = 0; t <= 9; t += 1) {
      {
         //PIPS generated variable
         int (*P4A__a__0)[100] = (int (*)[100]) 0;
         P4A_scmp_malloc((void **) &P4A__a__0, sizeof(int)*100);

scmp_task_0:
         for(i = 0; i <= 99; i += 1)
            (*P4A__a__0)[i-0] = i*t;
         P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &a[0], *P4A__a__0);
         P4A_scmp_dealloc(P4A__a__0);
      }
      {
         //PIPS generated variable
         int (*P4A__a__1)[100] = (int (*)[100]) 0;
         P4A_scmp_malloc((void **) &P4A__a__1, sizeof(int)*100);
         P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *P4A__a__1);

scmp_task_1:
         for(i = 0; i <= 99; i += 1)
            printf("%d\n", (*P4A__a__1)[i-0]);
         P4A_scmp_dealloc(P4A__a__1);
      }
   }
   return 0;
}
//             <may be read   >: stdout[0] _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: stdout[0] _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
int main()
{
//             <    is written>: s
   int t, i, a[100], s = 0;
//             <may be read   >: a[*] stdout[0] 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: a[*] stdout[0] 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: i stdout t __IO_EFFECTS:LUNS[1]
//             <    is written>: i t __IO_EFFECTS:LUNS[1]
   for(t = 0; t <= 9; t += 1) {
      {
         //PIPS generated variable
//             <    is written>: P4A__a__0
         int (*P4A__a__0)[100] = (int (*)[100]) 0;
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: P4A__a__0 P4A__a__0[*][*] 
//                               _MALLOC_EFFECTS:_MALLOC_
         P4A_scmp_malloc((void **) &P4A__a__0, sizeof(int)*100);

//             <may be written>: P4A__a__0[0][*]
//             <    is read   >: P4A__a__0 i t
//             <    is written>: i
scmp_task_0:
         for(i = 0; i <= 99; i += 1)
//             <may be written>: P4A__a__0[0][*]
//             <    is read   >: P4A__a__0 i t
            (*P4A__a__0)[i-0] = i*t;
//             <may be read   >: P4A__a__0[0][*]
//             <may be written>: a[*]
//             <    is read   >: P4A__a__0
         P4A_copy_from_accel_1d(sizeof(int), 100, 100, 0, &a[0], *P4A__a__0);
//             <    is read   >: P4A__a__0
         P4A_scmp_dealloc(P4A__a__0);
      }
      {
         //PIPS generated variable
//             <    is written>: P4A__a__1
         int (*P4A__a__1)[100] = (int (*)[100]) 0;
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: P4A__a__1 P4A__a__1[*][*] 
//                               _MALLOC_EFFECTS:_MALLOC_
         P4A_scmp_malloc((void **) &P4A__a__1, sizeof(int)*100);
//             <may be read   >: a[*]
//             <may be written>: P4A__a__1[0][*]
//             <    is read   >: P4A__a__1
         P4A_copy_to_accel_1d(sizeof(int), 100, 100, 0, &a[0], *P4A__a__1);

//             <may be read   >: P4A__a__1[0][*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: P4A__a__1 i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
scmp_task_1:
         for(i = 0; i <= 99; i += 1)
//             <may be read   >: P4A__a__1[0][*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: P4A__a__1 i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%d\n", (*P4A__a__1)[i-0]);
//             <    is read   >: P4A__a__1
         P4A_scmp_dealloc(P4A__a__1);
      }
   }
//             <    is read   >: __IO_EFFECTS:LUNS[1]
   return 0;
}
#define NB_BUFFERS 2
#define P4A__a__0_id 0
#define P4A__a__1_id 1

#ifdef scmp_task_0
#define scmp_task_0_p 1
#define P4A__a__0_cons_p 0
#define P4A__a__0_prod_p 1
#define P4A__a__1_cons_p 0
#define P4A__a__1_prod_p 0
#else
#define scmp_task_0_p 0
#endif

#ifdef scmp_task_1
#define scmp_task_1_p 1
#define P4A__a__0_cons_p 0
#define P4A__a__0_prod_p 0
#define P4A__a__1_cons_p 1
#define P4A__a__1_prod_p 0
#else
#define scmp_task_1_p 0
#endif

#ifdef P4A_sesam_server_a
#define P4A_sesam_server_a_p 1
#define P4A__a__0_cons_p 1
#define P4A__a__0_prod_p 0
#define P4A__a__1_cons_p 0
#define P4A__a__1_prod_p 1
#else
#define P4A_sesam_server_a_p 0
#endif

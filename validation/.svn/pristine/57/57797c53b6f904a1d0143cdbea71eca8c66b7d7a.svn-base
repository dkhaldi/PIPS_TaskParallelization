
Initial code

int volume()
{
   int a[256][256];
   int v = 0;
   int i, j;
//  loop sum[v],
volume:
   for(i = 0; i <= 255; i += 1) {
//  call sum[v],
      v = v+1;
//  loop sum[v],
      for(j = 0; j <= 255; j += 1)
//  call sum[v],
         v = v+a[i][j];
   }
   return v;
}

after removing reductions

int volume()
{
   int a[256][256];
   int v = 0;
   int i, j;
   {
      //PIPS generated variable
      int RED[256];
      for(i = 0; i <= 255; i += 1)
         RED[i] = 0;
volume:
      for(i = 0; i <= 255; i += 1) {
         RED[i] = RED[i]+1;
         for(j = 0; j <= 255; j += 1)
            RED[i] = RED[i]+a[i][j];
      }
      for(i = 0; i <= 255; i += 1)
         v = v+RED[i];
   }
   return v;
}

after array linearization

int volume()
{
   int a[65536];
   int v = 0;
   int i, j;
   {
      //PIPS generated variable
      int RED[256];
      for(i = 0; i <= 255; i += 1)
         RED[i] = 0;
volume:
      for(i = 0; i <= 255; i += 1) {
         RED[i] = RED[i]+1;
         for(j = 0; j <= 255; j += 1)
            RED[i] = RED[i]+a[256*i+j];
      }
      for(i = 0; i <= 255; i += 1)
         v = v+RED[i];
   }
   return v;
}

Unsplit resulting code

#
# compile generated remove04
#

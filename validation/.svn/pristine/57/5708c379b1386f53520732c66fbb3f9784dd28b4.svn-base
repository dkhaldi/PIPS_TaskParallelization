!
! File HPFTEST28_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST28_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
      REAL*4 TC(1:10, 1:10), NORTH(1:10)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest28 running'
      PRINT *, 'thermo'
      PRINT *, 'please enter vector north(1:10)'
      DO I = 1, 10
         READ *, NORTH(I)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating distributed variable NORTH
      DO PSI2 = 1, 2
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA1 = 5*PSI2-4, MIN(10, 5*PSI2)
            LALPHA1 = ALPHA1-5*PSI2+5
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = NORTH(ALPHA1)
         ENDDO
         T LID = 2*PSI1+PSI2-2
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO NODE(T LID)
      ENDDO
! end of update
c
c initialization
      PRINT *, 'initializing'
c
c print results
      PRINT *, 'results:'
10    FORMAT(F8.2,F8.2,F8.2,F8.2,F8.2,F8.2,F8.2,F8.2)
! collecting distributed variable TC
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL4 BUFUPK
            DO ALPHA2 = MAX(5*PSI2-4, 2), MIN(9, 5*PSI2)
               DO ALPHA1 = MAX(2, 5*PSI1-4), MIN(9, 5*PSI1)
                  LALPHA1 = ALPHA1-5*PSI1+5
                  LALPHA2 = ALPHA2-5*PSI2+5
                  BUF INDEX = BUF INDEX+1
                  TC(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect
      DO I = 2, 9
         WRITE (6, 10) TC(I,2), TC(I,3), TC(I,4), TC(I,5), TC(I,6), 
     &   TC(I,7), TC(I,8), TC(I,9)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      PRINT *, 'hpftest28 ended'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST28_host.f
!
!
! File HPFTEST28_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST28
!
!
! initializing array TC, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 10
      RANGEA(3, 1, 3) = 10
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 5
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 10
      RANGEA(3, 2, 3) = 10
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 5
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array TS, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 5
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 5
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array NORTH, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 5
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 0
      ALIGN(1, 1, 2) = 0
      ALIGN(1, 1, 3) = 1
      ALIGN(1, 2, 1) = 1
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for HPFTEST28_init.h
!
!
! File HPFTEST28_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST28_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, 
     &I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, 
     &I_31, I_4, I_5, I_6, I_7, I_8, I_9, I, K
      REAL*4 TC(0:6, 0:6), TS(1:5, 1:5), NORTH(1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_29, I_30, I_31, 2, 9, 3, 2)
      CALL HPFC LOOP BOUNDS(I_25, I_26, I_27, 2, 9, 3, 1)
      CALL HPFC LOOP BOUNDS(I_21, I_22, I_23, 2, 9, 2, 2)
      CALL HPFC LOOP BOUNDS(I_17, I_18, I_19, 2, 9, 2, 1)
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 1, 10, 3, 2)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 2, 10, 3, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, 10, 3, 2)
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating distributed variable NORTH
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC RCV FROM HOST
      CALL HPFC REAL4 BUFUPK
      DO ALPHA1 = 5*PSI2-4, MIN(10, 5*PSI2)
         LALPHA1 = ALPHA1-5*PSI2+5
         BUF INDEX = BUF INDEX+1
         NORTH(LALPHA1) = HPFC REAL4 BUFF(BUF INDEX)
      ENDDO
! end of update
      IF (MY POS(1,1).EQ.1) THEN
         DO I_4 = I_5, I_6
            TC(1,I_4) = NORTH(I_4)
            TS(1,I_4) = NORTH(I_4)
         ENDDO
      ENDIF
      DO I_8 = I_9, I_10
         DO I_12 = I_13, I_14
            TC(I_8,I_12) = 0.0
            TS(I_8,I_12) = 0.0
         ENDDO
      ENDDO
c
c iterations... should be a test, but reductions are not accepted
      DO K = 1, 50
c
c computation and copy back (dataparallel semantic)
! P(1:2, 2) send TC(1:5, 1) to (-1)
         IF (MY POS(2,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 1, 
     &      5, 1, 1, 1, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 1) send TC(1:5, 5) to (+1)
         IF (MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 1, 
     &      5, 1, 5, 5, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(2, 1:2) send TC(1, 1:5) to (-2)
         IF (MY POS(1,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 1, 
     &      1, 1, 1, 5, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1, 1:2) send TC(5, 1:5) to (+2)
         IF (MY POS(1,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 5, 
     &      5, 1, 1, 5, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 1) receive TC(1:5, 6) from (+1)
         IF (MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 1, 
     &      5, 1, 6, 6, 1)
         ENDIF
! P(1:2, 2) receive TC(1:5, 0) from (-1)
         IF (MY POS(2,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 1, 
     &      5, 1, 0, 0, 1)
         ENDIF
! P(1, 1:2) receive TC(6, 1:5) from (+2)
         IF (MY POS(1,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 6, 
     &      6, 1, 1, 5, 1)
         ENDIF
! P(2, 1:2) receive TC(0, 1:5) from (-2)
         IF (MY POS(1,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST28 TC LO1, 
     &      HPFTEST28 TC UP1, HPFTEST28 TC LO2, HPFTEST28 TC UP2, 0, 
     &      0, 1, 1, 5, 1)
         ENDIF
         DO I_16 = I_17, I_18
            DO I_20 = I_21, I_22
               TS(I_16,I_20) = 0.25*(TC(I_16-1,I_20)+TC(I_16+1,I_20)+
     &         TC(I_16,I_20-1)+TC(I_16,I_20+1))
            ENDDO
         ENDDO
         DO I_24 = I_25, I_26
            DO I_28 = I_29, I_30
               TC(I_24,I_28) = TS(I_24,I_28)
            ENDDO
         ENDDO
      ENDDO
! collecting distributed variable TC
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = MAX(5*PSI2-4, 2), MIN(9, 5*PSI2)
         DO ALPHA1 = MAX(2, 5*PSI1-4), MIN(9, 5*PSI1)
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = ALPHA2-5*PSI2+5
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = TC(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC REAL4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST28_node.f
!
!
! File HPFTEST28_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST28
!
      integer 
     $    HPFTEST28 TC LO1,
     $    HPFTEST28 TC UP1
      parameter(HPFTEST28 TC LO1 = 0)
      parameter(HPFTEST28 TC UP1 = 6)
      integer 
     $    HPFTEST28 TC LO2,
     $    HPFTEST28 TC UP2
      parameter(HPFTEST28 TC LO2 = 0)
      parameter(HPFTEST28 TC UP2 = 6)
      integer 
     $    HPFTEST28 TS LO1,
     $    HPFTEST28 TS UP1
      parameter(HPFTEST28 TS LO1 = 1)
      parameter(HPFTEST28 TS UP1 = 5)
      integer 
     $    HPFTEST28 TS LO2,
     $    HPFTEST28 TS UP2
      parameter(HPFTEST28 TS LO2 = 1)
      parameter(HPFTEST28 TS UP2 = 5)
      integer 
     $    HPFTEST28 NORTH LO1,
     $    HPFTEST28 NORTH UP1
      parameter(HPFTEST28 NORTH LO1 = 1)
      parameter(HPFTEST28 NORTH UP1 = 5)
!
! That is all for HPFTEST28_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 3)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

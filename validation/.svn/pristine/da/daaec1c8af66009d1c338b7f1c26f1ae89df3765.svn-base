
POINTS-TO


// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   int i = 1, j, k, *p = (void *) 0;

// Points To:
// p -> *NULL* , EXACT


   if (p==(void *) 0)

// Points To:
// p -> *NULL* , EXACT

      i = 2;

// Points To:
// p -> *NULL* , EXACT


   if (p==(void *) 0) {

// Points To:
// p -> *NULL* , EXACT

      i = 0;

// Points To:
// p -> *NULL* , EXACT

      j = 5;

// Points To:
// p -> *NULL* , EXACT

      k = 3*j;
   }

// Points To:
// p -> *NULL* , EXACT


   printf("i=%d, j=%d, k=%d\n", i, j, k);

// Points To:
// p -> *NULL* , EXACT


   return i+j+k;
}

PROPER EFFECTS WITH POINTS TO

int main(void)
{
//             <    is written>: i p
   int i = 1, j, k, *p = (void *) 0;
//             <    is read   >: p

   if (p==(void *) 0)
//             <    is written>: i
      i = 2;
//             <    is read   >: p

   if (p==(void *) 0) {
//             <    is written>: i
      i = 0;
//             <    is written>: j
      j = 5;
//             <    is read   >: j
//             <    is written>: k
      k = 3*j;
   }
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i j k stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("i=%d, j=%d, k=%d\n", i, j, k);
//             <    is read   >: i j k

   return i+j+k;
}

CUMULATED EFFECTS WITH POINTS TO

//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
int main(void)
{
//             <    is written>: i p
   int i = 1, j, k, *p = (void *) 0;
//             <may be written>: i
//             <    is read   >: p

   if (p==(void *) 0)
//             <    is written>: i
      i = 2;
//             <may be read   >: j
//             <may be written>: i j k
//             <    is read   >: p

   if (p==(void *) 0) {
//             <    is written>: i
      i = 0;
//             <    is written>: j
      j = 5;
//             <    is read   >: j
//             <    is written>: k
      k = 3*j;
   }
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i j k stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]

   printf("i=%d, j=%d, k=%d\n", i, j, k);
//             <    is read   >: i j k __IO_EFFECTS:LUNS[1]

   return i+j+k;
}

Transformers for "main"


//  T(main) {}

int main(void)
{

//  T(i) {i==1}

   int i = 1, j, k, *p = (void *) 0;

//  T(i) {i#init==1, 1<=i, i<=2}


   if (p==(void *) 0)

//  T(i) {i==2, i#init==1}

      i = 2;

//  T(i,j,k) {0<=i, i<=i#init, 1<=i#init, i#init<=2}


   if (p==(void *) 0) {

//  T(i) {i==0, 1<=i#init, i#init<=2}

      i = 0;

//  T(j) {i==0, j==5}

      j = 5;

//  T(k) {i==0, j==5, k==15}

      k = 3*j;
   }

//  T() {0<=i, i<=2}


   printf("i=%d, j=%d, k=%d\n", i, j, k);

//  T(main) {i+j+k==main, 0<=i, i<=2}


   return i+j+k;
}

Preconditions for "main"


//  P() {}

int main(void)
{

//  P() {}

   int i = 1, j, k, *p = (void *) 0;

//  P(i) {i==1}


   if (p==(void *) 0)

//  P(i) {i==1}

      i = 2;

//  P(i) {1<=i, i<=2}


   if (p==(void *) 0) {

//  P(i) {1<=i, i<=2}

      i = 0;

//  P(i) {i==0}

      j = 5;

//  P(i,j) {i==0, j==5}

      k = 3*j;
   }

//  P(i,j,k) {0<=i, i<=2}


   printf("i=%d, j=%d, k=%d\n", i, j, k);

//  P(i,j,k) {0<=i, i<=2}


   return i+j+k;
}

Code after control simplification

int main(void)
{
   int i = 1, j, k, *p = (void *) 0;

   if (p==(void *) 0)
      i = 2;

   if (p==(void *) 0) {
      i = 0;
      j = 5;
      k = 3*j;
   }

   printf("i=%d, j=%d, k=%d\n", i, j, k);

   return i+j+k;
}

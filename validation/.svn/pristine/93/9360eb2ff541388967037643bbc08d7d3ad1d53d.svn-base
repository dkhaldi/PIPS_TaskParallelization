!
! File DEAD_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DEAD_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID
      INTEGER A(1:N, 1:N)
      CALL HPFC INIT HOST
      PRINT *, 'in'
! collecting distributed variable A
      PSI1 = 1
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = PSI1
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC INTEGER4 BUFUPK
      ALPHA2 = 1
      ALPHA1 = 1
      LALPHA1 = 1
      LALPHA2 = 1
      BUF INDEX = BUF INDEX+1
      A(ALPHA1,ALPHA2) = HPFC INTEGER4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(1,1)
      PRINT *, 'after init 1'
! collecting distributed variable A_1
      PSI2 = 1
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 2*PSI1+PSI2-2
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC INTEGER4 BUFUPK
      ALPHA2 = 1
      ALPHA1 = 1
      LALPHA1 = 1
      LALPHA2 = 1
      BUF INDEX = BUF INDEX+1
      A(ALPHA1,ALPHA2) = HPFC INTEGER4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(1,1)
      PRINT *, 'after init 2'
      CALL HPFC HOST END
      END
!
! That is all for DEAD_host.f
!
!
! File DEAD_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for DEAD
!
!
! initializing array A, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 2

      MSTATUS(2) = 2
      LIVEMAPPING(2) = .TRUE.

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 3
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 0

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array A_1, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 5
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 10
      RANGEA(1, 2, 3) = 10
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 5
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for DEAD_init.h
!
!
! File DEAD_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DEAD_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_0, I_1
     &, I_10, I_11, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, J
      INTEGER A(1:3, 1:N), A_1(1:5, 1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, N, 1, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 1, 2)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, N, 2, 1)
! all livenesss for A
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! direct remapping for A
      LIVE MAPPING(2) = .TRUE.
      MSTATUS(2) = 2
      DO J = 1, N
         DO I_0 = I_1, I_2
            A(I_0,J) = 1
         ENDDO
      ENDDO
! collecting distributed variable A
      PSI1 = MY POS(1,2)
      IF (PSI1.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA2 = 1
         ALPHA1 = 1
         LALPHA1 = 1
         LALPHA2 = 1
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = A(LALPHA1,LALPHA2)
         CALL HPFC INTEGER4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! all livenesss for A
      LIVE MAPPING(2) = .TRUE.
      LIVE MAPPING(1) = .TRUE.
! begin remappings
      MSTATUS(2) = 1
! liveness management
! clean live set for A
      LIVE MAPPING(2) = .FALSE.
! end of liveness management
! end remappings
      DO I_4 = I_5, I_6
         DO I_8 = I_9, I_10
            A_1(I_8,I_4) = 2
         ENDDO
      ENDDO
! collecting distributed variable A_1
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA2 = 1
         ALPHA1 = 1
         LALPHA1 = 1
         LALPHA2 = 1
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = A_1(LALPHA1,LALPHA2)
         CALL HPFC INTEGER4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
      CALL HPFC NODE END
      END
!
! That is all for DEAD_node.f
!
!
! File DEAD_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for DEAD
!
      integer 
     $    DEAD A LO1,
     $    DEAD A UP1
      parameter(DEAD A LO1 = 1)
      parameter(DEAD A UP1 = 3)
      integer 
     $    DEAD A LO2,
     $    DEAD A UP2
      parameter(DEAD A LO2 = 1)
      parameter(DEAD A UP2 = 10)
      integer 
     $    DEAD A_1 LO1,
     $    DEAD A_1 UP1
      parameter(DEAD A_1 LO1 = 1)
      parameter(DEAD A_1 UP1 = 5)
      integer 
     $    DEAD A_1 LO2,
     $    DEAD A_1 UP2
      parameter(DEAD A_1 LO2 = 1)
      parameter(DEAD A_1 UP2 = 5)
!
! That is all for DEAD_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template A_1, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 5
!
! initializing template A, number 2
!
      NODIMT(2) = 2
      TTOP(2) = 2

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 10
      RANGET(2, 1, 3) = 10

      RANGET(2, 2, 1) = 1
      RANGET(2, 2, 2) = 10
      RANGET(2, 2, 3) = 10

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 3
!
! Processors Initializations
!
!
! initializing processors P2, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! initializing processors P1, number 2
!
      NODIMP(2) = 1

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 4
      RANGEP(2, 1, 3) = 4
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 2)
      parameter(REALNBOFPROCESSORS = 2)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

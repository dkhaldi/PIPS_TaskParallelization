#
# AIPO
#
#
# compile generated deblocking
#

! initial function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap, *cst;                                /*0006*/
   freia_data2d *filter1, *filter2, *filter3, *filter4;                 /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/
   cst = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   filter1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0032*/
   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // const elaboration
   freia_aipo_xor(cst, cst, cst);                                       /*0053*/
   freia_aipo_add_const(cst, cst, 7);                                   /*0054*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   ret |= freia_aipo_sub(immap, imtmp, immap);                          /*0074*/

   freia_common_destruct_data(imtmp);                                   /*0076*/
   _return0 = 0;                                                        /*0077*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_sub_const(immap, immap, min);                             /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_sub(immap, cst, immap);                                   /*0086*/

   freia_aipo_copy(filter1, in);                                        /*0088*/
   freia_aipo_convolution(filter2, filter1, kernel, 3, 3);              /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, filter1, 0);                /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_copy(out, implan1);                                       /*0108*/
   freia_aipo_or(out, out, implan2);                                    /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(cst);                                     /*0127*/
   freia_common_destruct_data(filter1);                                 /*0128*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=2 #o=1 #c=34 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "cst" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out"];
  "108 =" [shape=circle];
  "108 =" -> "109 |" [label="out"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "108 =" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "88 =" [shape=circle];
  "88 =" -> "98 :" [label="filter1"];
  "88 =" -> "89 conv" [label="filter1"];
  "86 -" [shape=trapezium,orientation=270];
  "86 -" -> "105 :" [label="immap"];
  "86 -" -> "104 :" [label="immap"];
  "86 -" -> "103 :" [label="immap"];
  "86 -" -> "102 :" [label="immap"];
  "86 -" -> "101 :" [label="immap"];
  "86 -" -> "100 :" [label="immap"];
  "86 -" -> "99 :" [label="immap"];
  "86 -" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 -" [label="immap"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap"];
  "82 -_" [shape=trapezium,orientation=270];
  "82 -_" -> "83 *_" [label="immap"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 -_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 -_" [label="immap"];
  "74 -" -> "81 min" [label="immap"];
  "74 -" -> "80 max" [label="immap"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "88 =";
  "in" -> "69 E8";
  "in" -> "61 D8";
  "54 +_" [shape=trapezium,orientation=270];
  "54 +_" -> "86 -" [label="cst"];
  "53 ^" [shape=trapezium,orientation=270];
  "53 ^" -> "54 +_" [label="cst"];
  "cst" -> "53 ^";
  "cst" -> "53 ^";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=32 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 +_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 +_" [label="immap_5"];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "98 :";
  "in" -> "69 E8";
  "in" -> "61 D8";
}

! updated function for AIPO

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret = 0;                                       /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   freia_aipo_sub(immap, imtmp, immap);                                 /*0074*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_add_const(immap, immap, -min);                            /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_const_sub(immap, immap, 0+7);                             /*0086*/

   freia_aipo_convolution(filter2, in, kernel, 3, 3);                   /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, in, 0);                     /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_or(out, implan1, implan2);                                /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_destruct_data(imtmp);                                   /*0076*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}
#
# SPOC
#

! initial function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap, *cst;                                /*0006*/
   freia_data2d *filter1, *filter2, *filter3, *filter4;                 /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/
   cst = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   filter1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0032*/
   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // const elaboration
   freia_aipo_xor(cst, cst, cst);                                       /*0053*/
   freia_aipo_add_const(cst, cst, 7);                                   /*0054*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   ret |= freia_aipo_sub(immap, imtmp, immap);                          /*0074*/

   freia_common_destruct_data(imtmp);                                   /*0076*/
   _return0 = 0;                                                        /*0077*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_sub_const(immap, immap, min);                             /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_sub(immap, cst, immap);                                   /*0086*/

   freia_aipo_copy(filter1, in);                                        /*0088*/
   freia_aipo_convolution(filter2, filter1, kernel, 3, 3);              /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, filter1, 0);                /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_copy(out, implan1);                                       /*0108*/
   freia_aipo_or(out, out, implan2);                                    /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(cst);                                     /*0127*/
   freia_common_destruct_data(filter1);                                 /*0128*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=2 #o=1 #c=34 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "cst" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out"];
  "108 =" [shape=circle];
  "108 =" -> "109 |" [label="out"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "108 =" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "88 =" [shape=circle];
  "88 =" -> "98 :" [label="filter1"];
  "88 =" -> "89 conv" [label="filter1"];
  "86 -" [shape=trapezium,orientation=270];
  "86 -" -> "105 :" [label="immap"];
  "86 -" -> "104 :" [label="immap"];
  "86 -" -> "103 :" [label="immap"];
  "86 -" -> "102 :" [label="immap"];
  "86 -" -> "101 :" [label="immap"];
  "86 -" -> "100 :" [label="immap"];
  "86 -" -> "99 :" [label="immap"];
  "86 -" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 -" [label="immap"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap"];
  "82 -_" [shape=trapezium,orientation=270];
  "82 -_" -> "83 *_" [label="immap"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 -_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 -_" [label="immap"];
  "74 -" -> "81 min" [label="immap"];
  "74 -" -> "80 max" [label="immap"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "88 =";
  "in" -> "69 E8";
  "in" -> "61 D8";
  "54 +_" [shape=trapezium,orientation=270];
  "54 +_" -> "86 -" [label="cst"];
  "53 ^" [shape=trapezium,orientation=270];
  "53 ^" -> "54 +_" [label="cst"];
  "cst" -> "53 ^";
  "cst" -> "53 ^";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=32 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 +_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 +_" [label="immap_5"];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "98 :";
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_spoc_helper_0_0" of module "main" in dot format
// DAG "main_spoc_helper_0_0": #i=1 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "immap_5" [shape=circle];

  // computation vertices
  "81 min" [shape=diamond];
  "80 max" [shape=diamond];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "74 -" -> "immap_5";
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_spoc_helper_0_1" of module "main" in dot format
// DAG "main_spoc_helper_0_1": #i=2 #o=2 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_1" {
  // inputs
  "immap_5" [shape=circle];
  "in" [shape=circle];

  // outputs
  "immap" [shape=circle];
  "filter2" [shape=circle];

  // computation vertices
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "immap";
  "89 conv" [shape=box];
  "89 conv" -> "filter2";
  "in" -> "89 conv";
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "immap_5" -> "82 +_";
}
// graph for dag "main_spoc_helper_0_10" of module "main" in dot format
// DAG "main_spoc_helper_0_10": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_10" {
  // inputs
  "implan1" [shape=circle];
  "implan2" [shape=circle];

  // outputs
  "out_6" [shape=circle];

  // computation vertices
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "out_6";
  "implan2" -> "109 |";
  "implan1" -> "109 |";
}
// graph for dag "main_spoc_helper_0_11" of module "main" in dot format
// DAG "main_spoc_helper_0_11": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_11" {
  // inputs
  "implan3" [shape=circle];
  "out_6" [shape=circle];

  // outputs
  "out_5" [shape=circle];

  // computation vertices
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "out_5";
  "implan3" -> "110 |";
  "out_6" -> "110 |";
}
// graph for dag "main_spoc_helper_0_12" of module "main" in dot format
// DAG "main_spoc_helper_0_12": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_12" {
  // inputs
  "implan4" [shape=circle];
  "out_5" [shape=circle];

  // outputs
  "out_4" [shape=circle];

  // computation vertices
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "out_4";
  "implan4" -> "111 |";
  "out_5" -> "111 |";
}
// graph for dag "main_spoc_helper_0_13" of module "main" in dot format
// DAG "main_spoc_helper_0_13": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_13" {
  // inputs
  "implan5" [shape=circle];
  "out_4" [shape=circle];

  // outputs
  "out_3" [shape=circle];

  // computation vertices
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "out_3";
  "implan5" -> "112 |";
  "out_4" -> "112 |";
}
// graph for dag "main_spoc_helper_0_14" of module "main" in dot format
// DAG "main_spoc_helper_0_14": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_14" {
  // inputs
  "implan6" [shape=circle];
  "out_3" [shape=circle];

  // outputs
  "out_2" [shape=circle];

  // computation vertices
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "out_2";
  "implan6" -> "113 |";
  "out_3" -> "113 |";
}
// graph for dag "main_spoc_helper_0_15" of module "main" in dot format
// DAG "main_spoc_helper_0_15": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_15" {
  // inputs
  "implan7" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "out_1" [shape=circle];

  // computation vertices
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "out_1";
  "implan7" -> "114 |";
  "out_2" -> "114 |";
}
// graph for dag "main_spoc_helper_0_16" of module "main" in dot format
// DAG "main_spoc_helper_0_16": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_16" {
  // inputs
  "implan8" [shape=circle];
  "out_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "implan8" -> "115 |";
  "out_1" -> "115 |";
}
// graph for dag "main_spoc_helper_0_2" of module "main" in dot format
// DAG "main_spoc_helper_0_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_2" {
  // inputs
  "immap" [shape=circle];
  "in" [shape=circle];

  // outputs
  "implan1" [shape=circle];

  // computation vertices
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "implan1";
  "in" -> "98 :";
  "immap" -> "98 :";
}
// graph for dag "main_spoc_helper_0_3" of module "main" in dot format
// DAG "main_spoc_helper_0_3": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_3" {
  // inputs
  "filter2" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter3" [shape=circle];
  "implan2" [shape=circle];

  // computation vertices
  "90 conv" [shape=box];
  "90 conv" -> "filter3";
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "implan2";
  "filter2" -> "90 conv";
  "filter2" -> "99 :";
  "immap" -> "99 :";
}
// graph for dag "main_spoc_helper_0_4" of module "main" in dot format
// DAG "main_spoc_helper_0_4": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_4" {
  // inputs
  "filter3" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter4" [shape=circle];
  "implan3" [shape=circle];

  // computation vertices
  "91 conv" [shape=box];
  "91 conv" -> "filter4";
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "implan3";
  "filter3" -> "91 conv";
  "filter3" -> "100 :";
  "immap" -> "100 :";
}
// graph for dag "main_spoc_helper_0_5" of module "main" in dot format
// DAG "main_spoc_helper_0_5": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_5" {
  // inputs
  "filter4" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter5" [shape=circle];
  "implan4" [shape=circle];

  // computation vertices
  "92 conv" [shape=box];
  "92 conv" -> "filter5";
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "implan4";
  "filter4" -> "92 conv";
  "filter4" -> "101 :";
  "immap" -> "101 :";
}
// graph for dag "main_spoc_helper_0_6" of module "main" in dot format
// DAG "main_spoc_helper_0_6": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_6" {
  // inputs
  "filter5" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter6" [shape=circle];
  "implan5" [shape=circle];

  // computation vertices
  "93 conv" [shape=box];
  "93 conv" -> "filter6";
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "implan5";
  "filter5" -> "93 conv";
  "filter5" -> "102 :";
  "immap" -> "102 :";
}
// graph for dag "main_spoc_helper_0_7" of module "main" in dot format
// DAG "main_spoc_helper_0_7": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_7" {
  // inputs
  "filter6" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter7" [shape=circle];
  "implan6" [shape=circle];

  // computation vertices
  "94 conv" [shape=box];
  "94 conv" -> "filter7";
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "implan6";
  "filter6" -> "94 conv";
  "filter6" -> "103 :";
  "immap" -> "103 :";
}
// graph for dag "main_spoc_helper_0_8" of module "main" in dot format
// DAG "main_spoc_helper_0_8": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_8" {
  // inputs
  "filter7" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "filter8" [shape=circle];
  "implan7" [shape=circle];

  // computation vertices
  "95 conv" [shape=box];
  "95 conv" -> "filter8";
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "implan7";
  "filter7" -> "95 conv";
  "filter7" -> "104 :";
  "immap" -> "104 :";
}
// graph for dag "main_spoc_helper_0_9" of module "main" in dot format
// DAG "main_spoc_helper_0_9": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_9" {
  // inputs
  "filter8" [shape=circle];
  "immap" [shape=circle];

  // outputs
  "implan8" [shape=circle];

  // computation vertices
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "implan8";
  "filter8" -> "105 :";
  "immap" -> "105 :";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 34 ops and 2 copies, optimized to 32 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// split 4: 1 cut
// split 5: 1 cut
// split 6: 1 cut
// split 7: 1 cut
// split 8: 1 cut
// split 9: 1 cut
// split 10: 1 cut
// split 11: 1 cut
// split 12: 1 cut
// split 13: 1 cut
// split 14: 1 cut
// split 15: 1 cut
// split 16: 1 cut
// # SPOC calls: 17

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t * po1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 61 dilate_8c
  // nope
  // poc 61 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`in [0 input 1] -> [0 poc 1] 69 erode_8c
  // nope
  // poc 69 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imtmp [0 poc 0] -> [0 alu] 74 sub
  // nope
  // 0`immap_6 [0 poc 1] -> [0 alu] 74 sub
  // nope
  // alu 74 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`immap_5 [0 alu] -> [0 measure 0] 74 sub
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // 0`immap_5 [0 measure 0] -> [0 measure 0] 74 sub
  // nope


  // output image 0`immap_5 on 0
  // 0`immap_5 [0 measure 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`immap_5 [0 output 0] -> [7 output 0] 0 null
  // 0`immap_5 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`immap_5 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 80 global_max stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].maximum;

  // measure 81 global_min stage 0 side 0
  *po2 = (int32_t) reduc.measure[0][0].minimum;

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t * pi3,
  uint32_t pi4,
  uint32_t pi5,
  int32_t pi6)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`immap_5 [0 input 0] -> [0 alu] 82 add_const
  // nope
  // alu 82 add_const stage 0
  si.alu[0][0].op = SPOC_ALU_ADD_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`immap_4 [0 alu] -> [1 alu] 83 mul_const
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`immap_4 [1 input 0] -> [1 alu] 83 mul_const
  // nope
  // alu 83 mul_const stage 1
  si.alu[1][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`immap_3 [1 alu] -> [2 alu] 84 div_const
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`immap_3 [2 input 0] -> [2 alu] 84 div_const
  // nope
  // alu 84 div_const stage 2
  si.alu[2][0].op = SPOC_ALU_DIV_IN0_CONST;
  sp.alu[2][0].constant = pi2;


  // STAGE 3
  // 0`immap_2 [2 alu] -> [3 alu] 85 log2
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`immap_2 [3 input 0] -> [3 alu] 85 log2
  // nope
  // alu 85 log2 stage 3
  si.alu[3][0].op = SPOC_ALU_LOG2_IN0;


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 89 convolution
  // nope
  // poc 89 convolution stage 0 side 1
  si.poc[0][1].op = SPOC_POC_CONV;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi3[i];


  // STAGE 4
  // 0`immap_1 [3 alu] -> [4 alu] 86 const_sub
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`immap_1 [4 input 0] -> [4 alu] 86 const_sub
  // nope
  // alu 86 const_sub stage 4
  si.alu[4][0].op = SPOC_ALU_SUB_CONST_IN0;
  sp.alu[4][0].constant = pi6;


  // output image 0`immap on 0 and image 0`filter2 on 1
  // 0`immap [4 alu] -> [4 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`immap [4 output 0] -> [7 output 0] 0 null
  // 0`immap [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`immap [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`immap [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`filter2 [0 poc 1] -> [4 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`filter2 [1 input 1] -> [4 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`filter2 [2 input 1] -> [4 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`filter2 [3 input 1] -> [4 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`filter2 [4 input 1] -> [4 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`filter2 [4 output 1] -> [7 output 1] 0 null
  // 0`filter2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`filter2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`filter2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`immap [0 input 0] -> [0 alu] 98 replace_const
  // nope
  // 0`in [0 input 1] -> [0 alu] 98 replace_const
  // nope
  // alu 98 replace_const stage 0
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN1_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // output image 0`implan1 on 0
  // 0`implan1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`implan1 [0 output 0] -> [7 output 0] 0 null
  // 0`implan1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`implan1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`implan1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`implan1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`implan1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`implan1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`implan1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_3_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter2 [0 input 0] -> [0 alu] 99 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 99 replace_const
  // nope
  // alu 99 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter2 [0 input 0] -> [1 poc 0] 90 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter2 [1 input 0] -> [1 poc 0] 90 convolution
  // nope
  // poc 90 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter3 on 0 and image 0`implan2 on 1
  // 0`filter3 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter3 [1 output 0] -> [7 output 0] 0 null
  // 0`filter3 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter3 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter3 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter3 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter3 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter3 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan2 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan2 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan2 [1 output 1] -> [7 output 1] 0 null
  // 0`implan2 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_4_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter3 [0 input 0] -> [0 alu] 100 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 100 replace_const
  // nope
  // alu 100 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter3 [0 input 0] -> [1 poc 0] 91 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter3 [1 input 0] -> [1 poc 0] 91 convolution
  // nope
  // poc 91 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter4 on 0 and image 0`implan3 on 1
  // 0`filter4 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter4 [1 output 0] -> [7 output 0] 0 null
  // 0`filter4 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter4 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter4 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter4 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter4 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter4 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan3 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan3 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan3 [1 output 1] -> [7 output 1] 0 null
  // 0`implan3 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan3 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan3 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan3 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan3 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan3 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_5_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter4 [0 input 0] -> [0 alu] 101 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 101 replace_const
  // nope
  // alu 101 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter4 [0 input 0] -> [1 poc 0] 92 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter4 [1 input 0] -> [1 poc 0] 92 convolution
  // nope
  // poc 92 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter5 on 0 and image 0`implan4 on 1
  // 0`filter5 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter5 [1 output 0] -> [7 output 0] 0 null
  // 0`filter5 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter5 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter5 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter5 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter5 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter5 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan4 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan4 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan4 [1 output 1] -> [7 output 1] 0 null
  // 0`implan4 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan4 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan4 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan4 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan4 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan4 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_6_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter5 [0 input 0] -> [0 alu] 102 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 102 replace_const
  // nope
  // alu 102 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter5 [0 input 0] -> [1 poc 0] 93 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter5 [1 input 0] -> [1 poc 0] 93 convolution
  // nope
  // poc 93 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter6 on 0 and image 0`implan5 on 1
  // 0`filter6 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter6 [1 output 0] -> [7 output 0] 0 null
  // 0`filter6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan5 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan5 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan5 [1 output 1] -> [7 output 1] 0 null
  // 0`implan5 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan5 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan5 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan5 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan5 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan5 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_7_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter6 [0 input 0] -> [0 alu] 103 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 103 replace_const
  // nope
  // alu 103 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter6 [0 input 0] -> [1 poc 0] 94 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter6 [1 input 0] -> [1 poc 0] 94 convolution
  // nope
  // poc 94 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter7 on 0 and image 0`implan6 on 1
  // 0`filter7 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter7 [1 output 0] -> [7 output 0] 0 null
  // 0`filter7 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter7 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter7 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter7 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter7 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter7 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan6 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan6 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan6 [1 output 1] -> [7 output 1] 0 null
  // 0`implan6 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan6 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan6 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan6 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan6 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan6 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_8_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t * pi1,
  uint32_t pi2,
  uint32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter7 [0 input 0] -> [0 alu] 104 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 104 replace_const
  // nope
  // alu 104 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`filter7 [0 input 0] -> [1 poc 0] 95 convolution
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`filter7 [1 input 0] -> [1 poc 0] 95 convolution
  // nope
  // poc 95 convolution stage 1 side 0
  si.poc[1][0].op = SPOC_POC_CONV;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi1[i];


  // output image 0`filter8 on 0 and image 0`implan7 on 1
  // 0`filter8 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`filter8 [1 output 0] -> [7 output 0] 0 null
  // 0`filter8 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`filter8 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`filter8 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`filter8 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`filter8 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`filter8 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`implan7 [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`implan7 [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`implan7 [1 output 1] -> [7 output 1] 0 null
  // 0`implan7 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`implan7 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`implan7 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`implan7 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`implan7 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`implan7 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_9_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`filter8 [0 input 0] -> [0 alu] 105 replace_const
  // nope
  // 0`immap [0 input 1] -> [0 alu] 105 replace_const
  // nope
  // alu 105 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // output image 0`implan8 on 0
  // 0`implan8 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`implan8 [0 output 0] -> [7 output 0] 0 null
  // 0`implan8 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`implan8 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`implan8 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`implan8 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`implan8 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`implan8 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`implan8 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_10_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan1 [0 input 0] -> [0 alu] 109 or
  // nope
  // 0`implan2 [0 input 1] -> [0 alu] 109 or
  // nope
  // alu 109 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_6 on 0
  // 0`out_6 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_6 [0 output 0] -> [7 output 0] 0 null
  // 0`out_6 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_11_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan3 [0 input 0] -> [0 alu] 110 or
  // nope
  // 0`out_6 [0 input 1] -> [0 alu] 110 or
  // nope
  // alu 110 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_5 on 0
  // 0`out_5 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_5 [0 output 0] -> [7 output 0] 0 null
  // 0`out_5 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_5 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_5 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_5 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_5 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_5 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_5 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_12_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan4 [0 input 0] -> [0 alu] 111 or
  // nope
  // 0`out_5 [0 input 1] -> [0 alu] 111 or
  // nope
  // alu 111 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_4 on 0
  // 0`out_4 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_4 [0 output 0] -> [7 output 0] 0 null
  // 0`out_4 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_4 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_4 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_4 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_4 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_4 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_4 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_13_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan5 [0 input 0] -> [0 alu] 112 or
  // nope
  // 0`out_4 [0 input 1] -> [0 alu] 112 or
  // nope
  // alu 112 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_3 on 0
  // 0`out_3 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_3 [0 output 0] -> [7 output 0] 0 null
  // 0`out_3 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_3 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_3 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_3 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_3 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_3 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_3 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_14_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan6 [0 input 0] -> [0 alu] 113 or
  // nope
  // 0`out_3 [0 input 1] -> [0 alu] 113 or
  // nope
  // alu 113 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_2 on 0
  // 0`out_2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_2 [0 output 0] -> [7 output 0] 0 null
  // 0`out_2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_15_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan7 [0 input 0] -> [0 alu] 114 or
  // nope
  // 0`out_2 [0 input 1] -> [0 alu] 114 or
  // nope
  // alu 114 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out_1 on 0
  // 0`out_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_1 [0 output 0] -> [7 output 0] 0 null
  // 0`out_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_16_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`implan8 [0 input 0] -> [0 alu] 115 or
  // nope
  // 0`out_1 [0 input 1] -> [0 alu] 115 or
  // nope
  // alu 115 or stage 0
  si.alu[0][0].op = SPOC_ALU_OR_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [7 output 0] 0 null
  // 0`out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   main_spoc_helper_0_0_0(immap, in, freia_morpho_kernel_8c, &max, &min);              /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_spoc_helper_0_1_0(immap, filter2, immap, in, -min, 32767/(max-min), 128, kernel, 3, 3, 0+7);  /*0082*/
   
   
   // select filters
   main_spoc_helper_0_2_0(implan1, immap, in, 0);                       /*0098*/
   main_spoc_helper_0_3_0(filter3, implan2, filter2, immap, 1, kernel, 3, 3);          /*0099*/
   main_spoc_helper_0_4_0(filter4, implan3, filter3, immap, 2, kernel, 3, 3);          /*0100*/
   main_spoc_helper_0_5_0(filter5, implan4, filter4, immap, 3, kernel, 3, 3);          /*0101*/
   main_spoc_helper_0_6_0(filter6, implan5, filter5, immap, 4, kernel, 3, 3);          /*0102*/
   main_spoc_helper_0_7_0(filter7, implan6, filter6, immap, 5, kernel, 3, 3);          /*0103*/
   main_spoc_helper_0_8_0(filter8, implan7, filter7, immap, 6, kernel, 3, 3);          /*0104*/
   main_spoc_helper_0_9_0(implan8, filter8, immap, 7);                  /*0105*/
   
   // merge results
   main_spoc_helper_0_10_0(out, implan1, implan2);                      /*0109*/
   main_spoc_helper_0_11_0(out, implan3, out);                          /*0110*/
   main_spoc_helper_0_12_0(out, implan4, out);                          /*0111*/
   main_spoc_helper_0_13_0(out, implan5, out);                          /*0112*/
   main_spoc_helper_0_14_0(out, implan6, out);                          /*0113*/
   main_spoc_helper_0_15_0(out, implan7, out);                          /*0114*/
   main_spoc_helper_0_16_0(out, implan8, out);                          /*0115*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! cleaned up function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   main_spoc_helper_0_0_0(immap, in, freia_morpho_kernel_8c, &max, &min);              /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_spoc_helper_0_1_0(immap, filter2, immap, in, -min, 32767/(max-min), 128, kernel, 3, 3, 7);    /*0082*/
   
   
   // select filters
   main_spoc_helper_0_2_0(implan1, immap, in, 0);                       /*0098*/
   main_spoc_helper_0_3_0(filter3, implan2, filter2, immap, 1, kernel, 3, 3);          /*0099*/
   main_spoc_helper_0_4_0(filter4, implan3, filter3, immap, 2, kernel, 3, 3);          /*0100*/
   main_spoc_helper_0_5_0(filter5, implan4, filter4, immap, 3, kernel, 3, 3);          /*0101*/
   main_spoc_helper_0_6_0(filter6, implan5, filter5, immap, 4, kernel, 3, 3);          /*0102*/
   main_spoc_helper_0_7_0(filter7, implan6, filter6, immap, 5, kernel, 3, 3);          /*0103*/
   main_spoc_helper_0_8_0(filter8, implan7, filter7, immap, 6, kernel, 3, 3);          /*0104*/
   main_spoc_helper_0_9_0(implan8, filter8, immap, 7);                  /*0105*/
   
   // merge results
   main_spoc_helper_0_10_0(out, implan1, implan2);                      /*0109*/
   main_spoc_helper_0_11_0(out, implan3, out);                          /*0110*/
   main_spoc_helper_0_12_0(out, implan4, out);                          /*0111*/
   main_spoc_helper_0_13_0(out, implan5, out);                          /*0112*/
   main_spoc_helper_0_14_0(out, implan6, out);                          /*0113*/
   main_spoc_helper_0_15_0(out, implan7, out);                          /*0114*/
   main_spoc_helper_0_16_0(out, implan8, out);                          /*0115*/
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap, *cst;                                /*0006*/
   freia_data2d *filter1, *filter2, *filter3, *filter4;                 /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/
   cst = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   filter1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0032*/
   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // const elaboration
   freia_aipo_xor(cst, cst, cst);                                       /*0053*/
   freia_aipo_add_const(cst, cst, 7);                                   /*0054*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   ret |= freia_aipo_sub(immap, imtmp, immap);                          /*0074*/

   freia_common_destruct_data(imtmp);                                   /*0076*/
   _return0 = 0;                                                        /*0077*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_sub_const(immap, immap, min);                             /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_sub(immap, cst, immap);                                   /*0086*/

   freia_aipo_copy(filter1, in);                                        /*0088*/
   freia_aipo_convolution(filter2, filter1, kernel, 3, 3);              /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, filter1, 0);                /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_copy(out, implan1);                                       /*0108*/
   freia_aipo_or(out, out, implan2);                                    /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(cst);                                     /*0127*/
   freia_common_destruct_data(filter1);                                 /*0128*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=2 #o=1 #c=34 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "cst" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out"];
  "108 =" [shape=circle];
  "108 =" -> "109 |" [label="out"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "108 =" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "88 =" [shape=circle];
  "88 =" -> "98 :" [label="filter1"];
  "88 =" -> "89 conv" [label="filter1"];
  "86 -" [shape=trapezium,orientation=270];
  "86 -" -> "105 :" [label="immap"];
  "86 -" -> "104 :" [label="immap"];
  "86 -" -> "103 :" [label="immap"];
  "86 -" -> "102 :" [label="immap"];
  "86 -" -> "101 :" [label="immap"];
  "86 -" -> "100 :" [label="immap"];
  "86 -" -> "99 :" [label="immap"];
  "86 -" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 -" [label="immap"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap"];
  "82 -_" [shape=trapezium,orientation=270];
  "82 -_" -> "83 *_" [label="immap"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 -_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 -_" [label="immap"];
  "74 -" -> "81 min" [label="immap"];
  "74 -" -> "80 max" [label="immap"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "88 =";
  "in" -> "69 E8";
  "in" -> "61 D8";
  "54 +_" [shape=trapezium,orientation=270];
  "54 +_" -> "86 -" [label="cst"];
  "53 ^" [shape=trapezium,orientation=270];
  "53 ^" -> "54 +_" [label="cst"];
  "cst" -> "53 ^";
  "cst" -> "53 ^";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=32 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 +_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 +_" [label="immap_5"];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "98 :";
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_terapix_helper_0_0_0" of module "main" in dot format
// DAG "main_terapix_helper_0_0_0": #i=1 #o=8 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "filter2" [shape=circle];
  "filter3" [shape=circle];
  "filter4" [shape=circle];
  "filter5" [shape=circle];
  "filter6" [shape=circle];
  "filter7" [shape=circle];
  "immap_5" [shape=circle];
  "filter8" [shape=circle];

  // computation vertices
  "81 min" [shape=diamond];
  "80 max" [shape=diamond];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "74 -" -> "immap_5";
  "95 conv" [shape=box];
  "95 conv" -> "filter8";
  "94 conv" [shape=box];
  "94 conv" -> "95 conv" [label="filter7"];
  "94 conv" -> "filter7";
  "93 conv" [shape=box];
  "93 conv" -> "94 conv" [label="filter6"];
  "93 conv" -> "filter6";
  "92 conv" [shape=box];
  "92 conv" -> "93 conv" [label="filter5"];
  "92 conv" -> "filter5";
  "91 conv" [shape=box];
  "91 conv" -> "92 conv" [label="filter4"];
  "91 conv" -> "filter4";
  "90 conv" [shape=box];
  "90 conv" -> "91 conv" [label="filter3"];
  "90 conv" -> "filter3";
  "89 conv" [shape=box];
  "89 conv" -> "90 conv" [label="filter2"];
  "89 conv" -> "filter2";
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_terapix_helper_0_1_0" of module "main" in dot format
// DAG "main_terapix_helper_0_1_0": #i=9 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_1_0" {
  // inputs
  "filter2" [shape=circle];
  "filter3" [shape=circle];
  "filter4" [shape=circle];
  "filter5" [shape=circle];
  "filter6" [shape=circle];
  "filter7" [shape=circle];
  "filter8" [shape=circle];
  "immap_5" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "filter8" -> "105 :";
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "filter7" -> "104 :";
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "filter6" -> "103 :";
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "filter5" -> "102 :";
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "filter4" -> "101 :";
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "filter3" -> "100 :";
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "filter2" -> "99 :";
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "in" -> "98 :";
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "immap_5" -> "82 +_";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 34 ops and 2 copies, optimized to 32 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 8 output images
 * 12 image operations in dag
 * dag length is 8, dag width is 8
 * costs in cycles per imagelet row:
 * - computation: 285
 * - communication: 216
 */
freia_status main_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * o3,
  freia_data2d * o4,
  freia_data2d * o5,
  freia_data2d * o6,
  freia_data2d * o7,
  const freia_data2d * i0,
  const int32_t * pi9,
  int32_t * pi10,
  uint32_t pi11,
  uint32_t pi12,
  uint32_t pi13,
  uint32_t pi14,
  uint32_t pi15,
  uint32_t pi16,
  uint32_t pi17,
  uint32_t pi18,
  uint32_t pi19,
  uint32_t pi20,
  uint32_t pi21,
  uint32_t pi22,
  uint32_t pi23,
  uint32_t pi24,
  int32_t * po25,
  int32_t * po26)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // operation 10_val initialization
  int16_t p_10_val[1];
  const int32_t x_10_val = 6;
  const int32_t y_10_val = 0;
  // array for reduction 10 extraction
  int32_t red_10[1];
  // operation 11_val initialization
  int16_t p_11_val[1];
  const int32_t x_11_val = 7;
  const int32_t y_11_val = 0;
  // array for reduction 11 extraction
  int32_t red_11[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][13];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][8];
  // imagelets definitions:
  // - 9 computation imagelets
  // - 8 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 7;
  int image_height = i0->heightWa;
  int max_computed_size = 46;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 60;
  int imagelet_3 = 120;
  int imagelet_4 = 180;
  int imagelet_5 = 240;
  int imagelet_6 = 300;
  int imagelet_7 = 360;
  int imagelet_8 = 420;
  int imagelet_9 = 480;
  int imagelet_10 = 540;
  int imagelet_11 = 600;
  int imagelet_12 = 660;
  int imagelet_13 = 720;
  int imagelet_14 = 780;
  int imagelet_15 = 840;
  int imagelet_16 = 900;
  int imagelet_17 = 960;

  // memory for reductions
  int reduction_10 = 1023;
  int reduction_11 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_10;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_11;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_12;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_13;
  int imagelet_io_5_0 = imagelet_5;
  int imagelet_io_5_1 = imagelet_14;
  int imagelet_io_6_0 = imagelet_6;
  int imagelet_io_6_1 = imagelet_15;
  int imagelet_io_7_0 = imagelet_7;
  int imagelet_io_7_1 = imagelet_16;
  int imagelet_io_8_0 = imagelet_8;
  int imagelet_io_8_1 = imagelet_17;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 8
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_8_0;
  mcu_macro[1][0].xmin2 = imagelet_io_8_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi9[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(1) -> 7
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_7_0;
  mcu_macro[1][1].xmin2 = imagelet_io_7_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: conv(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi10[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 3;
  mcu_macro[1][2].iter3 = 3;
  mcu_macro[0][2].iter4 = 3;
  mcu_macro[1][2].iter4 = 3;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_CONV;
  // 3: conv(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 3;
  mcu_macro[1][3].iter3 = 3;
  mcu_macro[0][3].iter4 = 3;
  mcu_macro[1][3].iter4 = 3;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_CONV;
  // 4: conv(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_3_0;
  mcu_macro[1][4].xmin2 = imagelet_io_3_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_2;
  mcu_macro[1][4].xmin3 = x_2;
  mcu_macro[0][4].ymin3 = y_2;
  mcu_macro[1][4].ymin3 = y_2;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 3;
  mcu_macro[1][4].iter3 = 3;
  mcu_macro[0][4].iter4 = 3;
  mcu_macro[1][4].iter4 = 3;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_CONV;
  // 5: conv(3) -> 4
  mcu_macro[0][5].xmin1 = imagelet_io_3_0;
  mcu_macro[1][5].xmin1 = imagelet_io_3_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_4_0;
  mcu_macro[1][5].xmin2 = imagelet_io_4_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_2;
  mcu_macro[1][5].xmin3 = x_2;
  mcu_macro[0][5].ymin3 = y_2;
  mcu_macro[1][5].ymin3 = y_2;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 3;
  mcu_macro[1][5].iter3 = 3;
  mcu_macro[0][5].iter4 = 3;
  mcu_macro[1][5].iter4 = 3;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_CONV;
  // 6: conv(4) -> 5
  mcu_macro[0][6].xmin1 = imagelet_io_4_0;
  mcu_macro[1][6].xmin1 = imagelet_io_4_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_5_0;
  mcu_macro[1][6].xmin2 = imagelet_io_5_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_2;
  mcu_macro[1][6].xmin3 = x_2;
  mcu_macro[0][6].ymin3 = y_2;
  mcu_macro[1][6].ymin3 = y_2;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 3;
  mcu_macro[1][6].iter3 = 3;
  mcu_macro[0][6].iter4 = 3;
  mcu_macro[1][6].iter4 = 3;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_CONV;
  // 7: conv(5) -> 6
  mcu_macro[0][7].xmin1 = imagelet_io_5_0;
  mcu_macro[1][7].xmin1 = imagelet_io_5_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_6_0;
  mcu_macro[1][7].xmin2 = imagelet_io_6_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_2;
  mcu_macro[1][7].xmin3 = x_2;
  mcu_macro[0][7].ymin3 = y_2;
  mcu_macro[1][7].ymin3 = y_2;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 3;
  mcu_macro[1][7].iter3 = 3;
  mcu_macro[0][7].iter4 = 3;
  mcu_macro[1][7].iter4 = 3;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_CONV;
  // 8: conv(6) -> 9
  mcu_macro[0][8].xmin1 = imagelet_io_6_0;
  mcu_macro[1][8].xmin1 = imagelet_io_6_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_9;
  mcu_macro[1][8].xmin2 = imagelet_9;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_2;
  mcu_macro[1][8].xmin3 = x_2;
  mcu_macro[0][8].ymin3 = y_2;
  mcu_macro[1][8].ymin3 = y_2;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 3;
  mcu_macro[1][8].iter3 = 3;
  mcu_macro[0][8].iter4 = 3;
  mcu_macro[1][8].iter4 = 3;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_CONV;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_CONV;
  // 9: -(8,7) -> 7
  mcu_macro[0][9].xmin1 = imagelet_io_8_0;
  mcu_macro[1][9].xmin1 = imagelet_io_8_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_7_0;
  mcu_macro[1][9].xmin2 = imagelet_io_7_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = imagelet_io_7_0;
  mcu_macro[1][9].xmin3 = imagelet_io_7_1;
  mcu_macro[0][9].ymin3 = 0;
  mcu_macro[1][9].ymin3 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_SUB3;
  // 10: max(7)
  // initializing  10_val
  p_10_val[0] = INT16_MIN;
  gram.xoffset = x_10_val;
  gram.yoffset = y_10_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_10_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 10_val
  mem_init.xmin1 = reduction_10;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure max at reduction_10
  mcu_macro[0][10].xmin2 = reduction_10;
  mcu_macro[1][10].xmin2 = reduction_10;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = 0;
  mcu_macro[1][10].xmin3 = 0;
  mcu_macro[0][10].ymin3 = 0;
  mcu_macro[1][10].ymin3 = 0;
  mcu_macro[0][10].xmin1 = imagelet_io_7_0;
  mcu_macro[1][10].xmin1 = imagelet_io_7_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_GLOBAL_MAX;
  // 11: min(7)
  // initializing  11_val
  p_11_val[0] = INT16_MAX;
  gram.xoffset = x_11_val;
  gram.yoffset = y_11_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_11_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 11_val
  mem_init.xmin1 = reduction_11;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_11
  mcu_macro[0][11].xmin2 = reduction_11;
  mcu_macro[1][11].xmin2 = reduction_11;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = 0;
  mcu_macro[1][11].xmin3 = 0;
  mcu_macro[0][11].ymin3 = 0;
  mcu_macro[1][11].ymin3 = 0;
  mcu_macro[0][11].xmin1 = imagelet_io_7_0;
  mcu_macro[1][11].xmin1 = imagelet_io_7_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  // output copy 9 -> 8
  mcu_macro[0][12].xmin1 = imagelet_9;
  mcu_macro[1][12].xmin1 = imagelet_9;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_8_0;
  mcu_macro[1][12].xmin2 = imagelet_io_8_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 2 is o0 for filter2
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for filter3
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;
  // - imagelet 3 is o2 for filter4
  tile_out[0][2].x = imagelet_io_3_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_3_1;
  tile_out[1][2].y = 0;
  // - imagelet 4 is o3 for filter5
  tile_out[0][3].x = imagelet_io_4_0;
  tile_out[0][3].y = 0;
  tile_out[1][3].x = imagelet_io_4_1;
  tile_out[1][3].y = 0;
  // - imagelet 5 is o4 for filter6
  tile_out[0][4].x = imagelet_io_5_0;
  tile_out[0][4].y = 0;
  tile_out[1][4].x = imagelet_io_5_1;
  tile_out[1][4].y = 0;
  // - imagelet 6 is o5 for filter7
  tile_out[0][5].x = imagelet_io_6_0;
  tile_out[0][5].y = 0;
  tile_out[1][5].x = imagelet_io_6_1;
  tile_out[1][5].y = 0;
  // - imagelet 7 is o6 for immap_5
  tile_out[0][6].x = imagelet_io_7_0;
  tile_out[0][6].y = 0;
  tile_out[1][6].x = imagelet_io_7_1;
  tile_out[1][6].y = 0;
  // - imagelet 8 is o7 for filter8
  tile_out[0][7].x = imagelet_io_8_0;
  tile_out[0][7].y = 0;
  tile_out[1][7].x = imagelet_io_8_1;
  tile_out[1][7].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 7;
  mcu_instr.borderBottom = 7;
  mcu_instr.borderLeft   = 7;
  mcu_instr.borderRight  = 7;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 8;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 13;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, o2, o3, o4, o5, o6, o7, i0);

  // extract measures
  // get measure max result from reduction_10
  redter.xres = reduction_10;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_10;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MAX;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po25 = (int32_t) red_10[0];
  // get measure min result from reduction_11
  redter.xres = reduction_11;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_11;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po26 = (int32_t) red_11[0];

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 9 input images, 1 output image
 * 20 image operations in dag
 * dag length is 14, dag width is 9
 * costs in cycles per imagelet row:
 * - computation: 67
 * - communication: 240
 */
freia_status main_terapix_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  const freia_data2d * i4,
  const freia_data2d * i5,
  const freia_data2d * i6,
  const freia_data2d * i7,
  const freia_data2d * i8,
  int32_t pi10,
  int32_t pi11,
  int32_t pi12,
  int32_t pi13,
  int32_t pi14,
  int32_t pi15,
  int32_t pi16,
  int32_t pi17,
  int32_t pi18,
  int32_t pi19,
  int32_t pi20,
  int32_t pi21)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[1];
  const int32_t x_2 = 2;
  const int32_t y_2 = 0;
  // operation 4 parameters
  int16_t p_4[1];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 4;
  const int32_t y_5 = 0;
  // operation 7 parameters
  int16_t p_7[1];
  const int32_t x_7 = 5;
  const int32_t y_7 = 0;
  // operation 9 parameters
  int16_t p_9[1];
  const int32_t x_9 = 6;
  const int32_t y_9 = 0;
  // operation 11 parameters
  int16_t p_11[1];
  const int32_t x_11 = 7;
  const int32_t y_11 = 0;
  // operation 13 parameters
  int16_t p_13[1];
  const int32_t x_13 = 8;
  const int32_t y_13 = 0;
  // operation 15 parameters
  int16_t p_15[1];
  const int32_t x_15 = 9;
  const int32_t y_15 = 0;
  // operation 17 parameters
  int16_t p_17[1];
  const int32_t x_17 = 10;
  const int32_t y_17 = 0;
  // operation 19 parameters
  int16_t p_19[1];
  const int32_t x_19 = 11;
  const int32_t y_19 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][28];
  terapix_tile_info tile_in[2][9];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 9 computation imagelets
  // - 9 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 56;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 56;
  int imagelet_3 = 112;
  int imagelet_4 = 168;
  int imagelet_5 = 224;
  int imagelet_6 = 280;
  int imagelet_7 = 336;
  int imagelet_8 = 392;
  int imagelet_9 = 448;
  int imagelet_10 = 504;
  int imagelet_11 = 560;
  int imagelet_12 = 616;
  int imagelet_13 = 672;
  int imagelet_14 = 728;
  int imagelet_15 = 784;
  int imagelet_16 = 840;
  int imagelet_17 = 896;
  int imagelet_18 = 952;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_10;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_11;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_12;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_13;
  int imagelet_io_5_0 = imagelet_5;
  int imagelet_io_5_1 = imagelet_14;
  int imagelet_io_6_0 = imagelet_6;
  int imagelet_io_6_1 = imagelet_15;
  int imagelet_io_7_0 = imagelet_7;
  int imagelet_io_7_1 = imagelet_16;
  int imagelet_io_8_0 = imagelet_8;
  int imagelet_io_8_1 = imagelet_17;
  int imagelet_io_9_0 = imagelet_9;
  int imagelet_io_9_1 = imagelet_18;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: +_(8) -> 8
  mcu_macro[0][0].xmin1 = imagelet_io_8_0;
  mcu_macro[1][0].xmin1 = imagelet_io_8_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_8_0;
  mcu_macro[1][0].xmin2 = imagelet_io_8_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi10;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ADD_CONST;
  // 1: *_(8) -> 8
  mcu_macro[0][1].xmin1 = imagelet_io_8_0;
  mcu_macro[1][1].xmin1 = imagelet_io_8_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_8_0;
  mcu_macro[1][1].xmin2 = imagelet_io_8_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi11;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_MUL_CONST;
  // 2: /_(8) -> 8
  mcu_macro[0][2].xmin1 = imagelet_io_8_0;
  mcu_macro[1][2].xmin1 = imagelet_io_8_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_8_0;
  mcu_macro[1][2].xmin2 = imagelet_io_8_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  p_2[0] = pi12;
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DIV_CONST;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DIV_CONST;
  // 3: l2(8) -> 8
  mcu_macro[0][3].xmin1 = imagelet_io_8_0;
  mcu_macro[1][3].xmin1 = imagelet_io_8_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_8_0;
  mcu_macro[1][3].xmin2 = imagelet_io_8_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_LOG2;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_LOG2;
  // 4: _-(8) -> 8
  mcu_macro[0][4].xmin1 = imagelet_io_8_0;
  mcu_macro[1][4].xmin1 = imagelet_io_8_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_8_0;
  mcu_macro[1][4].xmin2 = imagelet_io_8_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  p_4[0] = pi13;
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_CONST_SUB;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_CONST_SUB;
  // 5: :(8,9) -> 9
  // *special* set parameter for replace_const
  mcu_macro[0][5].xmin1 = 0;
  mcu_macro[1][5].xmin1 = 0;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = 0;
  mcu_macro[1][5].xmin2 = 0;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi14;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = 0;
  mcu_macro[1][5].iter2 = 0;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][6].xmin1 = imagelet_io_9_0;
  mcu_macro[1][6].xmin1 = imagelet_io_9_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_8_0;
  mcu_macro[1][6].xmin2 = imagelet_io_8_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_io_9_0;
  mcu_macro[1][6].xmin3 = imagelet_io_9_1;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 7: :(8,1) -> 1
  // *special* set parameter for replace_const
  mcu_macro[0][7].xmin1 = 0;
  mcu_macro[1][7].xmin1 = 0;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = 0;
  mcu_macro[1][7].xmin2 = 0;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  // copy of operation 7 parameters
  p_7[0] = pi15;
  gram.xoffset = x_7;
  gram.yoffset = y_7;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_7;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][7].xmin3 = x_7;
  mcu_macro[1][7].xmin3 = x_7;
  mcu_macro[0][7].ymin3 = y_7;
  mcu_macro[1][7].ymin3 = y_7;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = 0;
  mcu_macro[1][7].iter2 = 0;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][8].xmin1 = imagelet_io_1_0;
  mcu_macro[1][8].xmin1 = imagelet_io_1_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_8_0;
  mcu_macro[1][8].xmin2 = imagelet_io_8_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = imagelet_io_1_0;
  mcu_macro[1][8].xmin3 = imagelet_io_1_1;
  mcu_macro[0][8].ymin3 = 0;
  mcu_macro[1][8].ymin3 = 0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 9: :(8,2) -> 2
  // *special* set parameter for replace_const
  mcu_macro[0][9].xmin1 = 0;
  mcu_macro[1][9].xmin1 = 0;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = 0;
  mcu_macro[1][9].xmin2 = 0;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  // copy of operation 9 parameters
  p_9[0] = pi16;
  gram.xoffset = x_9;
  gram.yoffset = y_9;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_9;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][9].xmin3 = x_9;
  mcu_macro[1][9].xmin3 = x_9;
  mcu_macro[0][9].ymin3 = y_9;
  mcu_macro[1][9].ymin3 = y_9;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = 0;
  mcu_macro[1][9].iter2 = 0;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_8_0;
  mcu_macro[1][10].xmin2 = imagelet_io_8_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = imagelet_io_2_0;
  mcu_macro[1][10].xmin3 = imagelet_io_2_1;
  mcu_macro[0][10].ymin3 = 0;
  mcu_macro[1][10].ymin3 = 0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 11: :(8,3) -> 3
  // *special* set parameter for replace_const
  mcu_macro[0][11].xmin1 = 0;
  mcu_macro[1][11].xmin1 = 0;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = 0;
  mcu_macro[1][11].xmin2 = 0;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  // copy of operation 11 parameters
  p_11[0] = pi17;
  gram.xoffset = x_11;
  gram.yoffset = y_11;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_11;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][11].xmin3 = x_11;
  mcu_macro[1][11].xmin3 = x_11;
  mcu_macro[0][11].ymin3 = y_11;
  mcu_macro[1][11].ymin3 = y_11;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = 0;
  mcu_macro[1][11].iter2 = 0;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][12].xmin1 = imagelet_io_3_0;
  mcu_macro[1][12].xmin1 = imagelet_io_3_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_8_0;
  mcu_macro[1][12].xmin2 = imagelet_io_8_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = imagelet_io_3_0;
  mcu_macro[1][12].xmin3 = imagelet_io_3_1;
  mcu_macro[0][12].ymin3 = 0;
  mcu_macro[1][12].ymin3 = 0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 13: :(8,4) -> 4
  // *special* set parameter for replace_const
  mcu_macro[0][13].xmin1 = 0;
  mcu_macro[1][13].xmin1 = 0;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = 0;
  mcu_macro[1][13].xmin2 = 0;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  // copy of operation 13 parameters
  p_13[0] = pi18;
  gram.xoffset = x_13;
  gram.yoffset = y_13;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_13;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][13].xmin3 = x_13;
  mcu_macro[1][13].xmin3 = x_13;
  mcu_macro[0][13].ymin3 = y_13;
  mcu_macro[1][13].ymin3 = y_13;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = 0;
  mcu_macro[1][13].iter2 = 0;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][14].xmin1 = imagelet_io_4_0;
  mcu_macro[1][14].xmin1 = imagelet_io_4_1;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_8_0;
  mcu_macro[1][14].xmin2 = imagelet_io_8_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = imagelet_io_4_0;
  mcu_macro[1][14].xmin3 = imagelet_io_4_1;
  mcu_macro[0][14].ymin3 = 0;
  mcu_macro[1][14].ymin3 = 0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 15: :(8,5) -> 5
  // *special* set parameter for replace_const
  mcu_macro[0][15].xmin1 = 0;
  mcu_macro[1][15].xmin1 = 0;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = 0;
  mcu_macro[1][15].xmin2 = 0;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  // copy of operation 15 parameters
  p_15[0] = pi19;
  gram.xoffset = x_15;
  gram.yoffset = y_15;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_15;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][15].xmin3 = x_15;
  mcu_macro[1][15].xmin3 = x_15;
  mcu_macro[0][15].ymin3 = y_15;
  mcu_macro[1][15].ymin3 = y_15;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = 0;
  mcu_macro[1][15].iter2 = 0;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][16].xmin1 = imagelet_io_5_0;
  mcu_macro[1][16].xmin1 = imagelet_io_5_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_8_0;
  mcu_macro[1][16].xmin2 = imagelet_io_8_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = imagelet_io_5_0;
  mcu_macro[1][16].xmin3 = imagelet_io_5_1;
  mcu_macro[0][16].ymin3 = 0;
  mcu_macro[1][16].ymin3 = 0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 17: :(8,6) -> 6
  // *special* set parameter for replace_const
  mcu_macro[0][17].xmin1 = 0;
  mcu_macro[1][17].xmin1 = 0;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = 0;
  mcu_macro[1][17].xmin2 = 0;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  // copy of operation 17 parameters
  p_17[0] = pi20;
  gram.xoffset = x_17;
  gram.yoffset = y_17;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_17;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][17].xmin3 = x_17;
  mcu_macro[1][17].xmin3 = x_17;
  mcu_macro[0][17].ymin3 = y_17;
  mcu_macro[1][17].ymin3 = y_17;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = 0;
  mcu_macro[1][17].iter2 = 0;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][18].xmin1 = imagelet_io_6_0;
  mcu_macro[1][18].xmin1 = imagelet_io_6_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_io_8_0;
  mcu_macro[1][18].xmin2 = imagelet_io_8_1;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = imagelet_io_6_0;
  mcu_macro[1][18].xmin3 = imagelet_io_6_1;
  mcu_macro[0][18].ymin3 = 0;
  mcu_macro[1][18].ymin3 = 0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 19: :(8,7) -> 8
  // *special* set parameter for replace_const
  mcu_macro[0][19].xmin1 = 0;
  mcu_macro[1][19].xmin1 = 0;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = 0;
  mcu_macro[1][19].xmin2 = 0;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  // copy of operation 19 parameters
  p_19[0] = pi21;
  gram.xoffset = x_19;
  gram.yoffset = y_19;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_19;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][19].xmin3 = x_19;
  mcu_macro[1][19].xmin3 = x_19;
  mcu_macro[0][19].ymin3 = y_19;
  mcu_macro[1][19].ymin3 = y_19;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = 0;
  mcu_macro[1][19].iter2 = 0;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][20].xmin1 = imagelet_io_7_0;
  mcu_macro[1][20].xmin1 = imagelet_io_7_1;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_8_0;
  mcu_macro[1][20].xmin2 = imagelet_io_8_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = imagelet_io_8_0;
  mcu_macro[1][20].xmin3 = imagelet_io_8_1;
  mcu_macro[0][20].ymin3 = 0;
  mcu_macro[1][20].ymin3 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 21: |(9,1) -> 9
  mcu_macro[0][21].xmin1 = imagelet_io_9_0;
  mcu_macro[1][21].xmin1 = imagelet_io_9_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_io_1_0;
  mcu_macro[1][21].xmin2 = imagelet_io_1_1;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = imagelet_io_9_0;
  mcu_macro[1][21].xmin3 = imagelet_io_9_1;
  mcu_macro[0][21].ymin3 = 0;
  mcu_macro[1][21].ymin3 = 0;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_OR3;
  // 22: |(9,2) -> 9
  mcu_macro[0][22].xmin1 = imagelet_io_9_0;
  mcu_macro[1][22].xmin1 = imagelet_io_9_1;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_2_0;
  mcu_macro[1][22].xmin2 = imagelet_io_2_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].xmin3 = imagelet_io_9_0;
  mcu_macro[1][22].xmin3 = imagelet_io_9_1;
  mcu_macro[0][22].ymin3 = 0;
  mcu_macro[1][22].ymin3 = 0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_OR3;
  // 23: |(9,3) -> 9
  mcu_macro[0][23].xmin1 = imagelet_io_9_0;
  mcu_macro[1][23].xmin1 = imagelet_io_9_1;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_io_3_0;
  mcu_macro[1][23].xmin2 = imagelet_io_3_1;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  mcu_macro[0][23].xmin3 = imagelet_io_9_0;
  mcu_macro[1][23].xmin3 = imagelet_io_9_1;
  mcu_macro[0][23].ymin3 = 0;
  mcu_macro[1][23].ymin3 = 0;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_OR3;
  // 24: |(9,4) -> 9
  mcu_macro[0][24].xmin1 = imagelet_io_9_0;
  mcu_macro[1][24].xmin1 = imagelet_io_9_1;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].xmin2 = imagelet_io_4_0;
  mcu_macro[1][24].xmin2 = imagelet_io_4_1;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = imagelet_io_9_0;
  mcu_macro[1][24].xmin3 = imagelet_io_9_1;
  mcu_macro[0][24].ymin3 = 0;
  mcu_macro[1][24].ymin3 = 0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_OR3;
  // 25: |(9,5) -> 9
  mcu_macro[0][25].xmin1 = imagelet_io_9_0;
  mcu_macro[1][25].xmin1 = imagelet_io_9_1;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_io_5_0;
  mcu_macro[1][25].xmin2 = imagelet_io_5_1;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].xmin3 = imagelet_io_9_0;
  mcu_macro[1][25].xmin3 = imagelet_io_9_1;
  mcu_macro[0][25].ymin3 = 0;
  mcu_macro[1][25].ymin3 = 0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_OR3;
  // 26: |(9,6) -> 9
  mcu_macro[0][26].xmin1 = imagelet_io_9_0;
  mcu_macro[1][26].xmin1 = imagelet_io_9_1;
  mcu_macro[0][26].ymin1 = 0;
  mcu_macro[1][26].ymin1 = 0;
  mcu_macro[0][26].xmin2 = imagelet_io_6_0;
  mcu_macro[1][26].xmin2 = imagelet_io_6_1;
  mcu_macro[0][26].ymin2 = 0;
  mcu_macro[1][26].ymin2 = 0;
  mcu_macro[0][26].xmin3 = imagelet_io_9_0;
  mcu_macro[1][26].xmin3 = imagelet_io_9_1;
  mcu_macro[0][26].ymin3 = 0;
  mcu_macro[1][26].ymin3 = 0;
  mcu_macro[0][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][26].iter2 = imagelet_size;
  mcu_macro[1][26].iter2 = imagelet_size;
  mcu_macro[0][26].iter3 = 0;
  mcu_macro[1][26].iter3 = 0;
  mcu_macro[0][26].iter4 = 0;
  mcu_macro[1][26].iter4 = 0;
  mcu_macro[0][26].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][26].addrStart = TERAPIX_UCODE_OR3;
  // 27: |(9,8) -> 1
  mcu_macro[0][27].xmin1 = imagelet_io_9_0;
  mcu_macro[1][27].xmin1 = imagelet_io_9_1;
  mcu_macro[0][27].ymin1 = 0;
  mcu_macro[1][27].ymin1 = 0;
  mcu_macro[0][27].xmin2 = imagelet_io_8_0;
  mcu_macro[1][27].xmin2 = imagelet_io_8_1;
  mcu_macro[0][27].ymin2 = 0;
  mcu_macro[1][27].ymin2 = 0;
  mcu_macro[0][27].xmin3 = imagelet_io_1_0;
  mcu_macro[1][27].xmin3 = imagelet_io_1_1;
  mcu_macro[0][27].ymin3 = 0;
  mcu_macro[1][27].ymin3 = 0;
  mcu_macro[0][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][27].iter2 = imagelet_size;
  mcu_macro[1][27].iter2 = imagelet_size;
  mcu_macro[0][27].iter3 = 0;
  mcu_macro[1][27].iter3 = 0;
  mcu_macro[0][27].iter4 = 0;
  mcu_macro[1][27].iter4 = 0;
  mcu_macro[0][27].addrStart = TERAPIX_UCODE_OR3;
  mcu_macro[1][27].addrStart = TERAPIX_UCODE_OR3;


  // inputs:
  // - imagelet 1 is i0 for filter2
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for filter3
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for filter4
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;
  // - imagelet 4 is i3 for filter5
  tile_in[0][3].x = imagelet_io_4_0;
  tile_in[0][3].y = 0;
  tile_in[1][3].x = imagelet_io_4_1;
  tile_in[1][3].y = 0;
  // - imagelet 5 is i4 for filter6
  tile_in[0][4].x = imagelet_io_5_0;
  tile_in[0][4].y = 0;
  tile_in[1][4].x = imagelet_io_5_1;
  tile_in[1][4].y = 0;
  // - imagelet 6 is i5 for filter7
  tile_in[0][5].x = imagelet_io_6_0;
  tile_in[0][5].y = 0;
  tile_in[1][5].x = imagelet_io_6_1;
  tile_in[1][5].y = 0;
  // - imagelet 7 is i6 for filter8
  tile_in[0][6].x = imagelet_io_7_0;
  tile_in[0][6].y = 0;
  tile_in[1][6].x = imagelet_io_7_1;
  tile_in[1][6].y = 0;
  // - imagelet 8 is i7 for immap_5
  tile_in[0][7].x = imagelet_io_8_0;
  tile_in[0][7].y = 0;
  tile_in[1][7].x = imagelet_io_8_1;
  tile_in[1][7].y = 0;
  // - imagelet 9 is i8 for in
  tile_in[0][8].x = imagelet_io_9_0;
  tile_in[0][8].y = 0;
  tile_in[1][8].x = imagelet_io_9_1;
  tile_in[1][8].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 9;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 28;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1, i2, i3, i4, i5, i6, i7, i8);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/
   
   
   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   main_terapix_helper_0_0_0(filter2, filter3, filter4, filter5, filter6, filter7, immap, filter8, in, freia_morpho_kernel_8c, kernel, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, &max, &min);   /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_terapix_helper_0_1_0(out, filter2, filter3, filter4, filter5, filter6, filter7, filter8, immap, in, -min, 32767/(max-min), 128, 0+7, 0, 1, 2, 3, 4, 5, 6, 7);            /*0082*/
   
   // select filters
   
   
   // merge results
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! cleaned up function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/
   
   
   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   main_terapix_helper_0_0_0(filter2, filter3, filter4, filter5, filter6, filter7, immap, filter8, in, freia_morpho_kernel_8c, kernel, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, &max, &min);   /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_terapix_helper_0_1_0(out, filter2, filter3, filter4, filter5, filter6, filter7, filter8, immap, in, -min, 32767/(max-min), 128, 7, 0, 1, 2, 3, 4, 5, 6, 7);              /*0082*/
   
   // select filters
   
   
   // merge results
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}
#
# OPENCL
#

! initial function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap, *cst;                                /*0006*/
   freia_data2d *filter1, *filter2, *filter3, *filter4;                 /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/
   cst = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   filter1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0032*/
   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // const elaboration
   freia_aipo_xor(cst, cst, cst);                                       /*0053*/
   freia_aipo_add_const(cst, cst, 7);                                   /*0054*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   ret |= freia_aipo_sub(immap, imtmp, immap);                          /*0074*/

   freia_common_destruct_data(imtmp);                                   /*0076*/
   _return0 = 0;                                                        /*0077*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_sub_const(immap, immap, min);                             /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_sub(immap, cst, immap);                                   /*0086*/

   freia_aipo_copy(filter1, in);                                        /*0088*/
   freia_aipo_convolution(filter2, filter1, kernel, 3, 3);              /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, filter1, 0);                /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_copy(out, implan1);                                       /*0108*/
   freia_aipo_or(out, out, implan2);                                    /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(cst);                                     /*0127*/
   freia_common_destruct_data(filter1);                                 /*0128*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=2 #o=1 #c=34 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "cst" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out"];
  "108 =" [shape=circle];
  "108 =" -> "109 |" [label="out"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "108 =" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "88 =" [shape=circle];
  "88 =" -> "98 :" [label="filter1"];
  "88 =" -> "89 conv" [label="filter1"];
  "86 -" [shape=trapezium,orientation=270];
  "86 -" -> "105 :" [label="immap"];
  "86 -" -> "104 :" [label="immap"];
  "86 -" -> "103 :" [label="immap"];
  "86 -" -> "102 :" [label="immap"];
  "86 -" -> "101 :" [label="immap"];
  "86 -" -> "100 :" [label="immap"];
  "86 -" -> "99 :" [label="immap"];
  "86 -" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 -" [label="immap"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap"];
  "82 -_" [shape=trapezium,orientation=270];
  "82 -_" -> "83 *_" [label="immap"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 -_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 -_" [label="immap"];
  "74 -" -> "81 min" [label="immap"];
  "74 -" -> "80 max" [label="immap"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "88 =";
  "in" -> "69 E8";
  "in" -> "61 D8";
  "54 +_" [shape=trapezium,orientation=270];
  "54 +_" -> "86 -" [label="cst"];
  "53 ^" [shape=trapezium,orientation=270];
  "53 ^" -> "54 +_" [label="cst"];
  "cst" -> "53 ^";
  "cst" -> "53 ^";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=32 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 +_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 +_" [label="immap_5"];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "98 :";
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_opencl_helper_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0": #i=1 #o=8 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "filter2" [shape=circle];
  "filter3" [shape=circle];
  "filter4" [shape=circle];
  "filter5" [shape=circle];
  "filter6" [shape=circle];
  "filter7" [shape=circle];
  "immap_5" [shape=circle];
  "filter8" [shape=circle];

  // computation vertices
  "95 conv" [shape=box];
  "95 conv" -> "filter8";
  "94 conv" [shape=box];
  "94 conv" -> "95 conv" [label="filter7"];
  "94 conv" -> "filter7";
  "93 conv" [shape=box];
  "93 conv" -> "94 conv" [label="filter6"];
  "93 conv" -> "filter6";
  "92 conv" [shape=box];
  "92 conv" -> "93 conv" [label="filter5"];
  "92 conv" -> "filter5";
  "91 conv" [shape=box];
  "91 conv" -> "92 conv" [label="filter4"];
  "91 conv" -> "filter4";
  "90 conv" [shape=box];
  "90 conv" -> "91 conv" [label="filter3"];
  "90 conv" -> "filter3";
  "89 conv" [shape=box];
  "89 conv" -> "90 conv" [label="filter2"];
  "89 conv" -> "filter2";
  "81 min" [shape=diamond];
  "80 max" [shape=diamond];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "74 -" -> "immap_5";
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_opencl_helper_0_0_1" of module "main" in dot format
// DAG "main_opencl_helper_0_0_1": #i=1 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_1" {
  // inputs
  "in" [shape=circle];

  // outputs
  "immap_5" [shape=circle];

  // computation vertices
  "81 min" [shape=diamond];
  "80 max" [shape=diamond];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "74 -" -> "immap_5";
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "69 E8";
  "in" -> "61 D8";
}
// graph for dag "main_opencl_helper_0_1" of module "main" in dot format
// DAG "main_opencl_helper_0_1": #i=9 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_1" {
  // inputs
  "filter2" [shape=circle];
  "filter3" [shape=circle];
  "filter4" [shape=circle];
  "filter5" [shape=circle];
  "filter6" [shape=circle];
  "filter7" [shape=circle];
  "filter8" [shape=circle];
  "immap_5" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "filter8" -> "105 :";
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "filter7" -> "104 :";
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "filter6" -> "103 :";
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "filter5" -> "102 :";
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "filter4" -> "101 :";
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "filter3" -> "100 :";
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "filter2" -> "99 :";
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "in" -> "98 :";
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "immap_5" -> "82 +_";
}
// graph for dag "main_opencl_helper_0_1_0" of module "main" in dot format
// DAG "main_opencl_helper_0_1_0": #i=9 #o=1 #c=20 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_1_0" {
  // inputs
  "filter2" [shape=circle];
  "filter3" [shape=circle];
  "filter4" [shape=circle];
  "filter5" [shape=circle];
  "filter6" [shape=circle];
  "filter7" [shape=circle];
  "filter8" [shape=circle];
  "immap_5" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "filter8" -> "105 :";
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "filter7" -> "104 :";
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "filter6" -> "103 :";
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "filter5" -> "102 :";
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "filter4" -> "101 :";
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "filter3" -> "100 :";
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "filter2" -> "99 :";
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "in" -> "98 :";
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "immap_5" -> "82 +_";
}
// graph for dag "main_opencl_helper_conv_511" of module "main" in dot format
// DAG "main_opencl_helper_conv_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_conv_511" {
  // inputs
  "filter7" [shape=circle];

  // outputs
  "filter8" [shape=circle];

  // computation vertices
  "95 conv" [shape=box];
  "95 conv" -> "filter8";
  "filter7" -> "95 conv";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 34 ops and 2 copies, optimized to 32 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_conv_511
static cl_kernel main_opencl_helper_conv_511_kernel[2];

// compile kernels for main_opencl_helper_conv_511
static freia_status main_opencl_helper_conv_511_compile(void)
{
  // OpenCL source for main_opencl_helper_conv_511
  const char * main_opencl_helper_conv_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_conv_511\n"
    "KERNEL void main_opencl_helper_conv_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t95 = PIXEL_ZERO;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t95 = PIXEL_ADD(t95, (is_N|is_W)? PIXEL_ZERO: in0NW);\n"
    "    t95 = PIXEL_ADD(t95, (is_N)? PIXEL_ZERO: in0N);\n"
    "    t95 = PIXEL_ADD(t95, (is_N|is_E)? PIXEL_ZERO: in0NE);\n"
    "    t95 = PIXEL_ADD(t95, (is_W)? PIXEL_ZERO: in0W);\n"
    "    t95 = PIXEL_ADD(t95, in0);\n"
    "    t95 = PIXEL_ADD(t95, (is_E)? PIXEL_ZERO: in0E);\n"
    "    t95 = PIXEL_ADD(t95, (is_S|is_W)? PIXEL_ZERO: in0SW);\n"
    "    t95 = PIXEL_ADD(t95, (is_S)? PIXEL_ZERO: in0S);\n"
    "    t95 = PIXEL_ADD(t95, (is_S|is_E)? PIXEL_ZERO: in0SE);\n"
    "    // compute norm\n"
    "    PIXEL n95;\n"
    "    if (is_N)\n"
    "      if (is_W) n95 = 4;\n"
    "      else if (is_E) n95 = 4;\n"
    "      else n95 = 6;\n"
    "    else if (is_S)\n"
    "      if (is_W) n95 = 4;\n"
    "      else if (is_E) n95 = 4;\n"
    "      else n95 = 6;\n"
    "    else if (is_W) n95 = 6;\n"
    "    else if (is_E) n95 = 6;\n"
    "    else n95 = 9;\n"
    "    t95 = PIXEL_DIV(t95, n95);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t95;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_conv_511_source, "main_opencl_helper_conv_511", "-DPIXEL8", &main_opencl_helper_conv_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_conv_511_source, "main_opencl_helper_conv_511", "-DPIXEL16", &main_opencl_helper_conv_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_conv_511
freia_status main_opencl_helper_conv_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_conv_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_conv_511_kernel[bpp];

  // call kernel main_opencl_helper_conv_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_0_0_1
static cl_kernel main_opencl_helper_0_0_1_kernel[2];

// compile kernels for main_opencl_helper_0_0_1
static freia_status main_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_1
  const char * main_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_1\n"
    "KERNEL void main_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t61 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL t69 = PIXEL_MAX;\n"
    "\n"
    "    // pixel computations\n"
    "    t61 = PIXEL_SUP(t61, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t61 = PIXEL_SUP(t61, (is_N)? PIXEL_MIN: in0N);\n"
    "    t61 = PIXEL_SUP(t61, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t61 = PIXEL_SUP(t61, (is_W)? PIXEL_MIN: in0W);\n"
    "    t61 = PIXEL_SUP(t61, in0);\n"
    "    t61 = PIXEL_SUP(t61, (is_E)? PIXEL_MIN: in0E);\n"
    "    t61 = PIXEL_SUP(t61, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t61 = PIXEL_SUP(t61, (is_S)? PIXEL_MIN: in0S);\n"
    "    t61 = PIXEL_SUP(t61, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    t69 = PIXEL_INF(t69, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t69 = PIXEL_INF(t69, (is_N)? PIXEL_MAX: in0N);\n"
    "    t69 = PIXEL_INF(t69, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t69 = PIXEL_INF(t69, (is_W)? PIXEL_MAX: in0W);\n"
    "    t69 = PIXEL_INF(t69, in0);\n"
    "    t69 = PIXEL_INF(t69, (is_E)? PIXEL_MAX: in0E);\n"
    "    t69 = PIXEL_INF(t69, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t69 = PIXEL_INF(t69, (is_S)? PIXEL_MAX: in0S);\n"
    "    t69 = PIXEL_INF(t69, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t74 = PIXEL_SUB(t61, t69);\n"
    "    PIXEL_MAXIMUM(red80, t74);\n"
    "    PIXEL_MINIMUM(red81, t74);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t74;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].max = maxv;\n"
    "  redX[thrid].min = minv;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_1_source, "main_opencl_helper_0_0_1", "-DPIXEL8", &main_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_1_source, "main_opencl_helper_0_0_1", "-DPIXEL16", &main_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_1
freia_status main_opencl_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po2,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_1_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 1, o0, i0, &redres);

  // return reduction results
  *po2 = redres.maximum;
  *po3 = redres.minimum;

  return err;
}

// hold kernels for main_opencl_helper_0_1_0
static cl_kernel main_opencl_helper_0_1_0_kernel[2];

// compile kernels for main_opencl_helper_0_1_0
static freia_status main_opencl_helper_0_1_0_compile(void)
{
  // OpenCL source for main_opencl_helper_0_1_0
  const char * main_opencl_helper_0_1_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_1_0\n"
    "KERNEL void main_opencl_helper_0_1_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  GLOBAL PIXEL * i3, // const?\n"
    "  int ofs_i3,\n"
    "  GLOBAL PIXEL * i4, // const?\n"
    "  int ofs_i4,\n"
    "  GLOBAL PIXEL * i5, // const?\n"
    "  int ofs_i5,\n"
    "  GLOBAL PIXEL * i6, // const?\n"
    "  int ofs_i6,\n"
    "  GLOBAL PIXEL * i7, // const?\n"
    "  int ofs_i7,\n"
    "  GLOBAL PIXEL * i8, // const?\n"
    "  int ofs_i8,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  int c5,\n"
    "  int c6,\n"
    "  int c7,\n"
    "  int c8,\n"
    "  int c9,\n"
    "  int c10,\n"
    "  int c11)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "  GLOBAL PIXEL * j3 = i3 + ofs_i3 + shift;\n"
    "  GLOBAL PIXEL * j4 = i4 + ofs_i4 + shift;\n"
    "  GLOBAL PIXEL * j5 = i5 + ofs_i5 + shift;\n"
    "  GLOBAL PIXEL * j6 = i6 + ofs_i6 + shift;\n"
    "  GLOBAL PIXEL * j7 = i7 + ofs_i7 + shift;\n"
    "  GLOBAL PIXEL * j8 = i8 + ofs_i8 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in7 = j7[i];\n"
    "    PIXEL in8 = j8[i];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in3 = j3[i];\n"
    "    PIXEL in4 = j4[i];\n"
    "    PIXEL in5 = j5[i];\n"
    "    PIXEL in6 = j6[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t82 = PIXEL_ADD(in7, c0);\n"
    "    PIXEL t83 = PIXEL_MUL(t82, c1);\n"
    "    PIXEL t84 = PIXEL_DIV(t83, c2);\n"
    "    PIXEL t85 = PIXEL_LOG2(t84);\n"
    "    PIXEL t86 = PIXEL_SUBC(t85, c3);\n"
    "    PIXEL t98 = PIXEL_REPLACE_EC(t86, in8, c4);\n"
    "    PIXEL t99 = PIXEL_REPLACE_EC(t86, in0, c5);\n"
    "    PIXEL t100 = PIXEL_REPLACE_EC(t86, in1, c6);\n"
    "    PIXEL t101 = PIXEL_REPLACE_EC(t86, in2, c7);\n"
    "    PIXEL t102 = PIXEL_REPLACE_EC(t86, in3, c8);\n"
    "    PIXEL t103 = PIXEL_REPLACE_EC(t86, in4, c9);\n"
    "    PIXEL t104 = PIXEL_REPLACE_EC(t86, in5, c10);\n"
    "    PIXEL t105 = PIXEL_REPLACE_EC(t86, in6, c11);\n"
    "    PIXEL t109 = PIXEL_OR(t98, t99);\n"
    "    PIXEL t110 = PIXEL_OR(t109, t100);\n"
    "    PIXEL t111 = PIXEL_OR(t110, t101);\n"
    "    PIXEL t112 = PIXEL_OR(t111, t102);\n"
    "    PIXEL t113 = PIXEL_OR(t112, t103);\n"
    "    PIXEL t114 = PIXEL_OR(t113, t104);\n"
    "    PIXEL t115 = PIXEL_OR(t114, t105);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t115;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_1_0_source, "main_opencl_helper_0_1_0", "-DPIXEL8", &main_opencl_helper_0_1_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_1_0_source, "main_opencl_helper_0_1_0", "-DPIXEL16", &main_opencl_helper_0_1_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_1_0
freia_status main_opencl_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  const freia_data2d * i4,
  const freia_data2d * i5,
  const freia_data2d * i6,
  const freia_data2d * i7,
  const freia_data2d * i8,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t c5,
  int32_t c6,
  int32_t c7,
  int32_t c8,
  int32_t c9,
  int32_t c10,
  int32_t c11)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_1_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_1_0_kernel[bpp];

  // call kernel main_opencl_helper_0_1_0
  err |= freia_op_call_kernel(kernel, 1, 9, 12, 0, o0, i0, i1, i2, i3, i4, i5, i6, i7, i8, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl function main_opencl_helper_conv_511
KERNEL void main_opencl_helper_conv_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t95 = PIXEL_ZERO;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t95 = PIXEL_ADD(t95, (is_N|is_W)? PIXEL_ZERO: in0NW);
    t95 = PIXEL_ADD(t95, (is_N)? PIXEL_ZERO: in0N);
    t95 = PIXEL_ADD(t95, (is_N|is_E)? PIXEL_ZERO: in0NE);
    t95 = PIXEL_ADD(t95, (is_W)? PIXEL_ZERO: in0W);
    t95 = PIXEL_ADD(t95, in0);
    t95 = PIXEL_ADD(t95, (is_E)? PIXEL_ZERO: in0E);
    t95 = PIXEL_ADD(t95, (is_S|is_W)? PIXEL_ZERO: in0SW);
    t95 = PIXEL_ADD(t95, (is_S)? PIXEL_ZERO: in0S);
    t95 = PIXEL_ADD(t95, (is_S|is_E)? PIXEL_ZERO: in0SE);
    // compute norm
    PIXEL n95;
    if (is_N)
      if (is_W) n95 = 4;
      else if (is_E) n95 = 4;
      else n95 = 6;
    else if (is_S)
      if (is_W) n95 = 4;
      else if (is_E) n95 = 4;
      else n95 = 6;
    else if (is_W) n95 = 6;
    else if (is_E) n95 = 6;
    else n95 = 9;
    t95 = PIXEL_DIV(t95, n95);

    // set output pixels
    p0[i] = t95;
  }
}

// opencl function main_opencl_helper_0_0_1
KERNEL void main_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t61 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL t69 = PIXEL_MAX;

    // pixel computations
    t61 = PIXEL_SUP(t61, (is_N|is_W)? PIXEL_MIN: in0NW);
    t61 = PIXEL_SUP(t61, (is_N)? PIXEL_MIN: in0N);
    t61 = PIXEL_SUP(t61, (is_N|is_E)? PIXEL_MIN: in0NE);
    t61 = PIXEL_SUP(t61, (is_W)? PIXEL_MIN: in0W);
    t61 = PIXEL_SUP(t61, in0);
    t61 = PIXEL_SUP(t61, (is_E)? PIXEL_MIN: in0E);
    t61 = PIXEL_SUP(t61, (is_S|is_W)? PIXEL_MIN: in0SW);
    t61 = PIXEL_SUP(t61, (is_S)? PIXEL_MIN: in0S);
    t61 = PIXEL_SUP(t61, (is_S|is_E)? PIXEL_MIN: in0SE);
    t69 = PIXEL_INF(t69, (is_N|is_W)? PIXEL_MAX: in0NW);
    t69 = PIXEL_INF(t69, (is_N)? PIXEL_MAX: in0N);
    t69 = PIXEL_INF(t69, (is_N|is_E)? PIXEL_MAX: in0NE);
    t69 = PIXEL_INF(t69, (is_W)? PIXEL_MAX: in0W);
    t69 = PIXEL_INF(t69, in0);
    t69 = PIXEL_INF(t69, (is_E)? PIXEL_MAX: in0E);
    t69 = PIXEL_INF(t69, (is_S|is_W)? PIXEL_MAX: in0SW);
    t69 = PIXEL_INF(t69, (is_S)? PIXEL_MAX: in0S);
    t69 = PIXEL_INF(t69, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t74 = PIXEL_SUB(t61, t69);
    PIXEL_MAXIMUM(red80, t74);
    PIXEL_MINIMUM(red81, t74);

    // set output pixels
    p0[i] = t74;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].max = maxv;
  redX[thrid].min = minv;
}

// opencl function main_opencl_helper_0_1_0
KERNEL void main_opencl_helper_0_1_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  GLOBAL PIXEL * i3, // const?
  int ofs_i3,
  GLOBAL PIXEL * i4, // const?
  int ofs_i4,
  GLOBAL PIXEL * i5, // const?
  int ofs_i5,
  GLOBAL PIXEL * i6, // const?
  int ofs_i6,
  GLOBAL PIXEL * i7, // const?
  int ofs_i7,
  GLOBAL PIXEL * i8, // const?
  int ofs_i8,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  int c5,
  int c6,
  int c7,
  int c8,
  int c9,
  int c10,
  int c11)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;
  GLOBAL PIXEL * j3 = i3 + ofs_i3 + shift;
  GLOBAL PIXEL * j4 = i4 + ofs_i4 + shift;
  GLOBAL PIXEL * j5 = i5 + ofs_i5 + shift;
  GLOBAL PIXEL * j6 = i6 + ofs_i6 + shift;
  GLOBAL PIXEL * j7 = i7 + ofs_i7 + shift;
  GLOBAL PIXEL * j8 = i8 + ofs_i8 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in7 = j7[i];
    PIXEL in8 = j8[i];
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    PIXEL in3 = j3[i];
    PIXEL in4 = j4[i];
    PIXEL in5 = j5[i];
    PIXEL in6 = j6[i];

    // pixel computations
    PIXEL t82 = PIXEL_ADD(in7, c0);
    PIXEL t83 = PIXEL_MUL(t82, c1);
    PIXEL t84 = PIXEL_DIV(t83, c2);
    PIXEL t85 = PIXEL_LOG2(t84);
    PIXEL t86 = PIXEL_SUBC(t85, c3);
    PIXEL t98 = PIXEL_REPLACE_EC(t86, in8, c4);
    PIXEL t99 = PIXEL_REPLACE_EC(t86, in0, c5);
    PIXEL t100 = PIXEL_REPLACE_EC(t86, in1, c6);
    PIXEL t101 = PIXEL_REPLACE_EC(t86, in2, c7);
    PIXEL t102 = PIXEL_REPLACE_EC(t86, in3, c8);
    PIXEL t103 = PIXEL_REPLACE_EC(t86, in4, c9);
    PIXEL t104 = PIXEL_REPLACE_EC(t86, in5, c10);
    PIXEL t105 = PIXEL_REPLACE_EC(t86, in6, c11);
    PIXEL t109 = PIXEL_OR(t98, t99);
    PIXEL t110 = PIXEL_OR(t109, t100);
    PIXEL t111 = PIXEL_OR(t110, t101);
    PIXEL t112 = PIXEL_OR(t111, t102);
    PIXEL t113 = PIXEL_OR(t112, t103);
    PIXEL t114 = PIXEL_OR(t113, t104);
    PIXEL t115 = PIXEL_OR(t114, t105);

    // set output pixels
    p0[i] = t115;
  }
}

! updated function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/
   
   
   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   main_opencl_helper_conv_511(filter2, in);                            /*0089*/
   main_opencl_helper_conv_511(filter3, filter2);                       /*0090*/
   main_opencl_helper_conv_511(filter4, filter3);                       /*0091*/
   main_opencl_helper_conv_511(filter5, filter4);                       /*0092*/
   main_opencl_helper_conv_511(filter6, filter5);                       /*0093*/
   main_opencl_helper_conv_511(filter7, filter6);                       /*0094*/
   main_opencl_helper_conv_511(filter8, filter7);                       /*0095*/
   
   
   main_opencl_helper_0_0_1(immap, in, &max, &min);                     /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_opencl_helper_0_1_0(out, filter2, filter3, filter4, filter5, filter6, filter7, filter8, immap, in, -min, 32767/(max-min), 128, 0+7, 0, 1, 2, 3, 4, 5, 6, 7);             /*0082*/
   
   // select filters
   
   
   // merge results
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! cleaned up function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/
   
   
   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   main_opencl_helper_conv_511(filter2, in);                            /*0089*/
   main_opencl_helper_conv_511(filter3, filter2);                       /*0090*/
   main_opencl_helper_conv_511(filter4, filter3);                       /*0091*/
   main_opencl_helper_conv_511(filter5, filter4);                       /*0092*/
   main_opencl_helper_conv_511(filter6, filter5);                       /*0093*/
   main_opencl_helper_conv_511(filter7, filter6);                       /*0094*/
   main_opencl_helper_conv_511(filter8, filter7);                       /*0095*/
   
   
   main_opencl_helper_0_0_1(immap, in, &max, &min);                     /*0061*/
   
   
   
   //freia_aipo_not(immap, immap);
   main_opencl_helper_0_1_0(out, filter2, filter3, filter4, filter5, filter6, filter7, filter8, immap, in, -min, 32767/(max-min), 128, 7, 0, 1, 2, 3, 4, 5, 6, 7);               /*0082*/
   
   // select filters
   
   
   // merge results
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}
#
# SIGMAC
#
#
# compile generated deblocking
#

! initial function

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap, *cst;                                /*0006*/
   freia_data2d *filter1, *filter2, *filter3, *filter4;                 /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   freia_data2d *implan1, *implan2, *implan3, *implan4;                 /*0009*/
   freia_data2d *implan5, *implan6, *implan7, *implan8;                 /*0010*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   int32_t kernel[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};                      /*0013*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   freia_data2d *imtmp;                                                 /*0019*/
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/
   cst = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   filter1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0032*/
   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/

   implan1 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0041*/
   implan2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   implan3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0043*/
   implan4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0044*/
   implan5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0045*/
   implan6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0046*/
   implan7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0047*/
   implan8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0048*/

   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // const elaboration
   freia_aipo_xor(cst, cst, cst);                                       /*0053*/
   freia_aipo_add_const(cst, cst, 7);                                   /*0054*/
   
   // map elaboration
   
   imtmp = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);      /*0058*/
   
   
   freia_aipo_dilate_8c(imtmp, in, freia_morpho_kernel_8c);             /*0061*/
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   
   
   freia_aipo_erode_8c(immap, in, freia_morpho_kernel_8c);              /*0069*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   ret |= freia_aipo_sub(immap, imtmp, immap);                          /*0074*/

   freia_common_destruct_data(imtmp);                                   /*0076*/
   _return0 = 0;                                                        /*0077*/
   
   //freia_aipo_not(immap, immap);
   freia_aipo_global_max(immap, &max);                                  /*0080*/
   freia_aipo_global_min(immap, &min);                                  /*0081*/
   freia_aipo_sub_const(immap, immap, min);                             /*0082*/
   freia_aipo_mul_const(immap, immap, 32767/(max-min));                 /*0083*/
   freia_aipo_div_const(immap, immap, 128);                             /*0084*/
   freia_aipo_log2(immap, immap);                                       /*0085*/
   freia_aipo_sub(immap, cst, immap);                                   /*0086*/

   freia_aipo_copy(filter1, in);                                        /*0088*/
   freia_aipo_convolution(filter2, filter1, kernel, 3, 3);              /*0089*/
   freia_aipo_convolution(filter3, filter2, kernel, 3, 3);              /*0090*/
   freia_aipo_convolution(filter4, filter3, kernel, 3, 3);              /*0091*/
   freia_aipo_convolution(filter5, filter4, kernel, 3, 3);              /*0092*/
   freia_aipo_convolution(filter6, filter5, kernel, 3, 3);              /*0093*/
   freia_aipo_convolution(filter7, filter6, kernel, 3, 3);              /*0094*/
   freia_aipo_convolution(filter8, filter7, kernel, 3, 3);              /*0095*/
   
   // select filters
   freia_aipo_replace_const(implan1, immap, filter1, 0);                /*0098*/
   freia_aipo_replace_const(implan2, immap, filter2, 1);                /*0099*/
   freia_aipo_replace_const(implan3, immap, filter3, 2);                /*0100*/
   freia_aipo_replace_const(implan4, immap, filter4, 3);                /*0101*/
   freia_aipo_replace_const(implan5, immap, filter5, 4);                /*0102*/
   freia_aipo_replace_const(implan6, immap, filter6, 5);                /*0103*/
   freia_aipo_replace_const(implan7, immap, filter7, 6);                /*0104*/
   freia_aipo_replace_const(implan8, immap, filter8, 7);                /*0105*/
   
   // merge results
   freia_aipo_copy(out, implan1);                                       /*0108*/
   freia_aipo_or(out, out, implan2);                                    /*0109*/
   freia_aipo_or(out, out, implan3);                                    /*0110*/
   freia_aipo_or(out, out, implan4);                                    /*0111*/
   freia_aipo_or(out, out, implan5);                                    /*0112*/
   freia_aipo_or(out, out, implan6);                                    /*0113*/
   freia_aipo_or(out, out, implan7);                                    /*0114*/
   freia_aipo_or(out, out, implan8);                                    /*0115*/

   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(cst);                                     /*0127*/
   freia_common_destruct_data(filter1);                                 /*0128*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/
   freia_common_destruct_data(implan1);                                 /*0136*/
   freia_common_destruct_data(implan2);                                 /*0137*/
   freia_common_destruct_data(implan3);                                 /*0138*/
   freia_common_destruct_data(implan4);                                 /*0139*/
   freia_common_destruct_data(implan5);                                 /*0140*/
   freia_common_destruct_data(implan6);                                 /*0141*/
   freia_common_destruct_data(implan7);                                 /*0142*/
   freia_common_destruct_data(implan8);                                 /*0143*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=2 #o=1 #c=34 #s=0 #I=2 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "cst" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out"];
  "108 =" [shape=circle];
  "108 =" -> "109 |" [label="out"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "108 =" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "88 =" [shape=circle];
  "88 =" -> "98 :" [label="filter1"];
  "88 =" -> "89 conv" [label="filter1"];
  "86 -" [shape=trapezium,orientation=270];
  "86 -" -> "105 :" [label="immap"];
  "86 -" -> "104 :" [label="immap"];
  "86 -" -> "103 :" [label="immap"];
  "86 -" -> "102 :" [label="immap"];
  "86 -" -> "101 :" [label="immap"];
  "86 -" -> "100 :" [label="immap"];
  "86 -" -> "99 :" [label="immap"];
  "86 -" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 -" [label="immap"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap"];
  "82 -_" [shape=trapezium,orientation=270];
  "82 -_" -> "83 *_" [label="immap"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 -_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 -_" [label="immap"];
  "74 -" -> "81 min" [label="immap"];
  "74 -" -> "80 max" [label="immap"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "88 =";
  "in" -> "69 E8";
  "in" -> "61 D8";
  "54 +_" [shape=trapezium,orientation=270];
  "54 +_" -> "86 -" [label="cst"];
  "53 ^" [shape=trapezium,orientation=270];
  "53 ^" -> "54 +_" [label="cst"];
  "cst" -> "53 ^";
  "cst" -> "53 ^";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=32 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "115 |" [shape=trapezium,orientation=270];
  "115 |" -> "out";
  "114 |" [shape=trapezium,orientation=270];
  "114 |" -> "115 |" [label="out_1"];
  "113 |" [shape=trapezium,orientation=270];
  "113 |" -> "114 |" [label="out_2"];
  "112 |" [shape=trapezium,orientation=270];
  "112 |" -> "113 |" [label="out_3"];
  "111 |" [shape=trapezium,orientation=270];
  "111 |" -> "112 |" [label="out_4"];
  "110 |" [shape=trapezium,orientation=270];
  "110 |" -> "111 |" [label="out_5"];
  "109 |" [shape=trapezium,orientation=270];
  "109 |" -> "110 |" [label="out_6"];
  "105 :" [shape=trapezium,orientation=270];
  "105 :" -> "115 |" [label="implan8"];
  "104 :" [shape=trapezium,orientation=270];
  "104 :" -> "114 |" [label="implan7"];
  "103 :" [shape=trapezium,orientation=270];
  "103 :" -> "113 |" [label="implan6"];
  "102 :" [shape=trapezium,orientation=270];
  "102 :" -> "112 |" [label="implan5"];
  "101 :" [shape=trapezium,orientation=270];
  "101 :" -> "111 |" [label="implan4"];
  "100 :" [shape=trapezium,orientation=270];
  "100 :" -> "110 |" [label="implan3"];
  "99 :" [shape=trapezium,orientation=270];
  "99 :" -> "109 |" [label="implan2"];
  "98 :" [shape=trapezium,orientation=270];
  "98 :" -> "109 |" [label="implan1"];
  "95 conv" [shape=box];
  "95 conv" -> "105 :" [label="filter8"];
  "94 conv" [shape=box];
  "94 conv" -> "104 :" [label="filter7"];
  "94 conv" -> "95 conv" [label="filter7"];
  "93 conv" [shape=box];
  "93 conv" -> "103 :" [label="filter6"];
  "93 conv" -> "94 conv" [label="filter6"];
  "92 conv" [shape=box];
  "92 conv" -> "102 :" [label="filter5"];
  "92 conv" -> "93 conv" [label="filter5"];
  "91 conv" [shape=box];
  "91 conv" -> "101 :" [label="filter4"];
  "91 conv" -> "92 conv" [label="filter4"];
  "90 conv" [shape=box];
  "90 conv" -> "100 :" [label="filter3"];
  "90 conv" -> "91 conv" [label="filter3"];
  "89 conv" [shape=box];
  "89 conv" -> "99 :" [label="filter2"];
  "89 conv" -> "90 conv" [label="filter2"];
  "86 _-" [shape=trapezium,orientation=270];
  "86 _-" -> "105 :" [label="immap"];
  "86 _-" -> "104 :" [label="immap"];
  "86 _-" -> "103 :" [label="immap"];
  "86 _-" -> "102 :" [label="immap"];
  "86 _-" -> "101 :" [label="immap"];
  "86 _-" -> "100 :" [label="immap"];
  "86 _-" -> "99 :" [label="immap"];
  "86 _-" -> "98 :" [label="immap"];
  "85 l2" [shape=trapezium,orientation=270];
  "85 l2" -> "86 _-" [label="immap_1"];
  "84 /_" [shape=trapezium,orientation=270];
  "84 /_" -> "85 l2" [label="immap_2"];
  "83 *_" [shape=trapezium,orientation=270];
  "83 *_" -> "84 /_" [label="immap_3"];
  "82 +_" [shape=trapezium,orientation=270];
  "82 +_" -> "83 *_" [label="immap_4"];
  "81 min" [shape=diamond];
  "81 min" -> "83 *_" [arrowhead=empty,label="min"];
  "81 min" -> "82 +_" [arrowhead=empty,label="min"];
  "80 max" [shape=diamond];
  "80 max" -> "83 *_" [arrowhead=empty,label="max"];
  "74 -" [shape=trapezium,orientation=270];
  "74 -" -> "82 +_" [label="immap_5"];
  "74 -" -> "81 min" [label="immap_5"];
  "74 -" -> "80 max" [label="immap_5"];
  "69 E8" [shape=box];
  "69 E8" -> "74 -" [label="immap_6"];
  "61 D8" [shape=box];
  "61 D8" -> "74 -" [label="imtmp"];
  "in" -> "89 conv";
  "in" -> "98 :";
  "in" -> "69 E8";
  "in" -> "61 D8";
}

! updated function for OPENCL

int main(int argc, char **argv)
{
   freia_dataio fdin, fdout;                                            /*0005*/
   freia_data2d *in, *out, *immap;                                      /*0006*/
   freia_data2d *filter2, *filter3, *filter4;                           /*0007*/
   freia_data2d *filter5, *filter6, *filter7, *filter8;                 /*0008*/
   int32_t max;                                                         /*0011*/
   int32_t min;                                                         /*0012*/
   //PIPS generated variable
   register freia_status _return0, _return1, _return2;                  /*0015*/
   //PIPS generated variable
   register freia_status ret;                                           /*0017*/
   //PIPS generated variable
   //PIPS generated variable
   register int i_0, i_1;                                               /*0021*/
   // hardware accelerator generated variable
   freia_data2d *immap_5 = 0;

   freia_initialize(argc, argv);                                        /*0023*/
   freia_common_open_input(&fdin, 0);                                   /*0024*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0025*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0027*/
   immap = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0028*/
   immap_5 = freia_common_create_data(immap->bpp, immap->widthWa, immap->heightWa);
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0029*/

   filter2 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0033*/
   filter3 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0034*/
   filter4 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0035*/
   filter5 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0036*/
   filter6 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0037*/
   filter7 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0038*/
   filter8 = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0039*/
   
   
   freia_common_rx_image(in, &fdin);                                    /*0050*/
   
   // map elaboration
   
   i_0 = 1;                                                             /*0062*/
   
   
   _return1 = 0;                                                        /*0065*/
   ret = 0;                                                             /*0066*/
   i_1 = 1;                                                             /*0070*/
   
   
   _return2 = 0;                                                        /*0073*/
   _return0 = 0;                                                        /*0077*/
   
   // const elaboration
   
   
   
   
   
   //freia_aipo_not(immap, immap);
   freia_mppa_launch(0, 1, 8, 0, 2, in, filter2, filter3, filter4, filter5, filter6, filter7, immap_5, filter8, &min, &max);        /*0095*/
   
   // select filters
   freia_mppa_launch(1, 9, 1, 2, 0, filter2, filter3, filter4, filter5, filter6, filter7, filter8, immap_5, in, out, 32767/(max-min), -min);       /*0115*/
   
   
   // merge results
   
   
   freia_common_tx_image(in, &fdout);                                   /*0117*/
   freia_common_tx_image(out, &fdout);                                  /*0118*/
   
   
   
   
   
   freia_common_destruct_data(in);                                      /*0124*/
   freia_common_destruct_data(immap);                                   /*0125*/
   freia_common_destruct_data(immap_5);
   freia_common_destruct_data(out);                                     /*0126*/
   freia_common_destruct_data(filter2);                                 /*0129*/
   freia_common_destruct_data(filter3);                                 /*0130*/
   freia_common_destruct_data(filter4);                                 /*0131*/
   freia_common_destruct_data(filter5);                                 /*0132*/
   freia_common_destruct_data(filter6);                                 /*0133*/
   freia_common_destruct_data(filter7);                                 /*0134*/
   freia_common_destruct_data(filter8);                                 /*0135*/

   freia_common_close_input(&fdin);                                     /*0145*/
   freia_common_close_output(&fdout);                                   /*0146*/

   freia_shutdown();                                                    /*0148*/
   return 0;                                                            /*0149*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_0 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_0_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi15_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi15_0, int16_t)

subgraph
main_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 8, width, height);
    agent strout = new Streamer_Out(width, height, 8);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 2);
    agent jo = new Join<int32_t>(2, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi15[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup7 = new rep(3, width);
    agent dil0 = new dilate_pi15_0(width, height);
    agent ero0 = new erode_pi15_0(width, height);
    agent dup6 = new rep(3, width);
    agent sub0 = new img_sub_img_16(width);
    agent max0 = new img_global_max(width, height);
    agent min0 = new img_global_min(width, height);
    agent dup5 = new rep(2, width);
    agent conv6 = new convole_pi0_0(width, height, pi0);
    agent dup4 = new rep(2, width);
    agent conv5 = new convole_pi0_0(width, height, pi0);
    agent dup3 = new rep(2, width);
    agent conv4 = new convole_pi0_0(width, height, pi0);
    agent dup2 = new rep(2, width);
    agent conv3 = new convole_pi0_0(width, height, pi0);
    agent dup1 = new rep(2, width);
    agent conv2 = new convole_pi0_0(width, height, pi0);
    agent dup0 = new rep(2, width);
    agent conv1 = new convole_pi0_0(width, height, pi0);
    agent conv0 = new convole_pi0_0(width, height, pi0);

    // connections...
    connect (strin.output[0] /* in */, dup7.input);
    connect (dup7.output[2], conv6.input);
    connect (dup7.output[1], ero0.input);
    connect (dup7.output[0], dil0.input);
    connect (dil0.output, sub0.input[0]);
    connect (ero0.output, sub0.input[1]);
    connect (sub0.output, dup6.input);
    connect (dup6.output[2], min0.input);
    connect (dup6.output[1], max0.input);
    connect (dup6.output[0], strout.input[6] /* immap_5 */);
    connect (max0.output, jo.input[1]);
    connect (min0.output, jo.input[0]);
    connect (conv6.output, dup5.input);
    connect (dup5.output[1], conv5.input);
    connect (dup5.output[0], strout.input[0] /* filter2 */);
    connect (conv5.output, dup4.input);
    connect (dup4.output[1], conv4.input);
    connect (dup4.output[0], strout.input[1] /* filter3 */);
    connect (conv4.output, dup3.input);
    connect (dup3.output[1], conv3.input);
    connect (dup3.output[0], strout.input[2] /* filter4 */);
    connect (conv3.output, dup2.input);
    connect (dup2.output[1], conv2.input);
    connect (dup2.output[0], strout.input[3] /* filter5 */);
    connect (conv2.output, dup1.input);
    connect (dup1.output[1], conv1.input);
    connect (dup1.output[0], strout.input[4] /* filter6 */);
    connect (conv1.output, dup0.input);
    connect (dup0.output[1], conv0.input);
    connect (dup0.output[0], strout.input[5] /* filter7 */);
    connect (conv0.output, strout.input[7] /* filter8 */);
  }
}

// code module=main fname=main_sigmac_helper_0 split=1


/*#####################################################################*/
/*################## main_sigmac_helper_0_1 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_1_0, int16_t, 1, 1, 
  int16_t pi0 = inp[0][i];
  int16_t po0 = PIXEL_DIVC(pi0, 128);
  int16_t po1 = PIXEL_LOG2(po0);
  outp[0][i] = po1;
);

AGENT_MERGE_ARITH(agent_compound_1_1, int16_t, 4, 4, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t po0 = PIXEL_CSUB(pi0, 0+7);
  int16_t po1 = PIXEL_REPLC(po0, pi1, 0);
  int16_t po2 = PIXEL_REPLC(po0, pi2, 1);
  int16_t po3 = PIXEL_REPLC(po0, pi3, 2);
  outp[0][i] = po3;
  outp[1][i] = po2;
  outp[2][i] = po1;
  outp[3][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_1_2, int16_t, 5, 4, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t pi4 = inp[4][i];
  int16_t po0 = PIXEL_REPLC(pi4, pi0, 3);
  int16_t po1 = PIXEL_REPLC(pi4, pi1, 4);
  int16_t po2 = PIXEL_REPLC(pi4, pi2, 5);
  int16_t po3 = PIXEL_REPLC(pi4, pi3, 6);
  outp[0][i] = po3;
  outp[1][i] = po2;
  outp[2][i] = po1;
  outp[3][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_1_3, int16_t, 6, 2, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t pi4 = inp[4][i];
  int16_t pi5 = inp[5][i];
  int16_t po0 = PIXEL_REPLC(pi1, pi0, 7);
  int16_t po1 = PIXEL_OR(pi3, pi2);
  int16_t po2 = PIXEL_OR(po1, pi4);
  int16_t po3 = PIXEL_OR(po2, pi5);
  outp[0][i] = po3;
  outp[1][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_1_4, int16_t, 5, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t pi4 = inp[4][i];
  int16_t po0 = PIXEL_OR(pi1, pi0);
  int16_t po1 = PIXEL_OR(po0, pi2);
  int16_t po2 = PIXEL_OR(po1, pi3);
  int16_t po3 = PIXEL_OR(po2, pi4);
  outp[0][i] = po3;
);

subgraph
main_sigmac_helper_0_1
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 9, width, height);
    agent strin = new Streamer_In(width, height, 9);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 2);
    agent sp = new Split<int32_t>(2, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    // parameters declaration...
    int16_t pi0 = 7;
    int16_t pi1 = 6;
    int16_t pi2 = 5;
    int16_t pi3 = 4;
    int16_t pi4 = 3;
    int16_t pi5 = 2;
    int16_t pi6 = 1;
    int16_t pi7 = 0;
    int16_t pi8 = 0+7;
    int16_t pi9 = 128;

    // instantiations...
    agent addc0 = new img_add_const_16_dyn(width, height);
    agent mulcst0 = new img_mul_const_16_dyn(width, height);
    agent cpd0 = new agent_compound_1_0(width);
    agent dup0 = new rep(2, width);
    agent cpd1 = new agent_compound_1_1(width);
    agent cpd2 = new agent_compound_1_2(width);
    agent cpd3 = new agent_compound_1_3(width);
    agent cpd4 = new agent_compound_1_4(width);

    // connections...
    connect (strin.output[7] /* immap_5 */, addc0.input);
    connect (addc0.output, mulcst0.input);
    connect (sp.output[1], addc0.param);
    connect (mulcst0.output, cpd0.input[0]);
    connect (sp.output[0], mulcst0.param);
    connect (cpd0.output[0], cpd1.input[0]);
    connect (cpd1.output[3], dup0.input);
    connect (dup0.output[1], cpd3.input[1]);
    connect (dup0.output[0], cpd2.input[4]);
    connect (strin.output[8] /* in */, cpd1.input[1]);
    connect (cpd1.output[2], cpd3.input[3]);
    connect (strin.output[0] /* filter2 */, cpd1.input[2]);
    connect (cpd1.output[1], cpd3.input[2]);
    connect (strin.output[1] /* filter3 */, cpd1.input[3]);
    connect (cpd1.output[0], cpd3.input[4]);
    connect (strin.output[2] /* filter4 */, cpd2.input[0]);
    connect (cpd2.output[3], cpd3.input[5]);
    connect (strin.output[3] /* filter5 */, cpd2.input[1]);
    connect (cpd2.output[2], cpd4.input[0]);
    connect (strin.output[4] /* filter6 */, cpd2.input[2]);
    connect (cpd2.output[1], cpd4.input[2]);
    connect (strin.output[5] /* filter7 */, cpd2.input[3]);
    connect (cpd2.output[0], cpd4.input[3]);
    connect (strin.output[6] /* filter8 */, cpd3.input[0]);
    connect (cpd3.output[1], cpd4.input[4]);
    connect (cpd3.output[0], cpd4.input[1]);
    connect (cpd4.output[0], strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 18;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

    new main_sigmac_helper_0_1
    (pipes[14], pipes[15],
     width, height, sizeMax,
     pipes[16], pipes[17]);

  }
}
#
# FREIA COMPILATION DONE
#


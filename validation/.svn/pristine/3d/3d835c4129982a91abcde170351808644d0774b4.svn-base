
Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1)
         run_kernel(i, j, 512, 512, new_image, image, kernel);
}
void run_kernel(int i, int j, int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   int ki, kj;
   new_image[i][j] = 0.;
   for(ki = 0; ki <= 2; ki += 1)
      for(kj = 0; kj <= 2; kj += 1)
         new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
   new_image[i][j] = new_image[i][j]/(3*3);
}

After Inlining

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i = 1; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1) {
         int ki, kj;
         new_image[i][j] = 0.;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-3/2][j+kj-3/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(3*3);
      }
}

after Kernelize

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], float kernel[3][3])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   int i, j;
#pragma omp parallel for private(j)
l99997:
   for(i = 0; i <= 511; i += 1)
#pragma omp parallel for 
l99998:
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];
l99993:   work(isi, isj, image, kernel, new_image);
}
void work(int isi, int isj, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int i;

l99993:
   for(i = 1; i <= 510; i += 128)
      microcode(isi, isj, i, image, kernel, new_image);
}
void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
l99994:
         for(j = 1; j <= 510; j += 1) {
            int ki, kj;
            new_image[i_1][j] = 0.;
l99995:
            for(ki = 0; ki <= 2; ki += 1)
l99996:
               for(kj = 0; kj <= 2; kj += 1)
                  new_image[i_1][j] = new_image[i_1][j]+image[i_1+ki-3/2][j+kj-3/2]*kernel[ki][kj];
            new_image[i_1][j] = new_image[i_1][j]/(3*3);
         }
   }
}
void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            int ki, kj;
            new_image[i_1][j] = 0.;
            for(ki = 0; ki <= 2; ki += 1)
               for(kj = 0; kj <= 2; kj += 1)
                  new_image[i_1][j] = new_image[i_1][j]+image[ki+i_1-1][kj+j-1]*kernel[ki][kj];
            new_image[i_1][j] = new_image[i_1][j]/9;
         }
   }
}

Microcode after scalarization

void microcode(int isi, int isj, int i, float image[isi][isj], float kernel[3][3], float new_image[isi][isj])
{
   // Declared by Pass Outlining
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            //PIPS generated variable
            register float new_image_0;
            int ki, kj;
            new_image_0 = 0.;
            for(ki = 0; ki <= 2; ki += 1)
               for(kj = 0; kj <= 2; kj += 1)
                  new_image_0 = new_image_0+image[ki+i_1-1][kj+j-1]*kernel[ki][kj];
            new_image_0 = new_image_0/9;
            new_image[i_1][j] = new_image_0;
         }
   }
}

Microcode After array conversion

void microcode(int isi, int isj, int i, float image[isi*isj], float kernel[9], float new_image[isi*isj])
{
   // Declared by Pass Outlining
   int j;
   {
      //PIPS generated variable
      int i_1;
      for(i_1 = i; i_1 <= pips_min(2, i+127, 510); i_1 += 1)
         for(j = 1; j <= 510; j += 1) {
            //PIPS generated variable
            register float new_image_0;
            int ki, kj;
            new_image_0 = 0.;
            for(ki = 0; ki <= 2; ki += 1)
               for(kj = 0; kj <= 2; kj += 1)
                  new_image_0 = new_image_0+image[kj+j-1+(ki+i_1-1)*isj]*kernel[3*ki+kj];
            new_image_0 = new_image_0/9;
            new_image[j+i_1*isj] = new_image_0;
         }
   }
}

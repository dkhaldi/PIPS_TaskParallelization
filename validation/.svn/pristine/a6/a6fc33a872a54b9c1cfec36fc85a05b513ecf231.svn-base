Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analysis:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:

Cumulated effects for "conv_cpu"

//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c
//             <may be written>: c[*]
//             <    is read   >: n
void conv_cpu(float *a, float *c, int n, float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{
   int i, j;
//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c i j
//             <may be written>: c[*] j
//             <    is read   >: n
//             <    is written>: i
   for(i = 0; i <= n-1; i += 1)
//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c i j
//             <may be written>: c[*]
//             <    is read   >: n
//             <    is written>: j
      for(j = 0; j <= n-1; j += 1) {
//             <    is read   >: i j n
//             <    is written>: idx
         int idx = i*n+j;

//             <    is read   >: i
//             <    is written>: right
         _Bool right = i>0;
//             <    is read   >: i n
//             <    is written>: left
         _Bool left = i<n-1;
//             <    is read   >: j
//             <    is written>: top
         _Bool top = j>0;
//             <    is read   >: j n
//             <    is written>: bottom
         _Bool bottom = j<n-1;
//             <may be read   >: a[*] a00 a01 a02 a10 a12 a20 a21 a22
//             <may be written>: c[*]
//             <    is read   >: a a11 bottom c idx left n right top

         c[idx] = (right&top?a00*a[idx-n-1]:0)+(right?a10*a[idx-1]:0)+(right&bottom?a20*a[idx+n-1]:0)+(top?a01*a[idx-n]:0)+a11*a[idx]+(bottom?a21*a[idx+n]:0)+(left&top?a02*a[idx-n+1]:0)+(left?a12*a[idx+1]:0)+(left&bottom?a22*a[idx+n+1]:0);
      }
}

Transformers for "conv_cpu"


//  T() {}

void conv_cpu(float *a, float *c, int n, float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{

//  T() {}

   int i, j;

//  T(i,j) {0<=i, i+1<=n}

   for(i = 0; i <= n-1; i += 1)

//  T(j) {0<=i, i+1<=n, 0<=j, j+1<=n}

      for(j = 0; j <= n-1; j += 1) {

//  T(idx) {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         int idx = i*n+j;


//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool right = i>0;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool left = i<n-1;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool top = j>0;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool bottom = j<n-1;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}


         c[idx] = (right&top?a00*a[idx-n-1]:0)+(right?a10*a[idx-1]:0)+(right&bottom?a20*a[idx+n-1]:0)+(top?a01*a[idx-n]:0)+a11*a[idx]+(bottom?a21*a[idx+n]:0)+(left&top?a02*a[idx-n+1]:0)+(left?a12*a[idx+1]:0)+(left&bottom?a22*a[idx+n+1]:0);
      }
}

Cumulated effects for "main"

//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c
//             <may be written>: c[*]
//             <    is read   >: n
void conv_cpu(float *a, float *c, int n, float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{
   int i, j;
//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c i j
//             <may be written>: c[*] j
//             <    is read   >: n
//             <    is written>: i
   for(i = 0; i <= n-1; i += 1)
//             <may be read   >: a a[*] a00 a01 a02 a10 a11 a12 a20 
//                               a21 a22 c i j
//             <may be written>: c[*]
//             <    is read   >: n
//             <    is written>: j
      for(j = 0; j <= n-1; j += 1) {
//             <    is read   >: i j n
//             <    is written>: idx
         int idx = i*n+j;

//             <    is read   >: i
//             <    is written>: right
         _Bool right = i>0;
//             <    is read   >: i n
//             <    is written>: left
         _Bool left = i<n-1;
//             <    is read   >: j
//             <    is written>: top
         _Bool top = j>0;
//             <    is read   >: j n
//             <    is written>: bottom
         _Bool bottom = j<n-1;
//             <may be read   >: a[*] a00 a01 a02 a10 a12 a20 a21 a22
//             <may be written>: c[*]
//             <    is read   >: a a11 bottom c idx left n right top

         c[idx] = (right&top?a00*a[idx-n-1]:0)+(right?a10*a[idx-1]:0)+(right&bottom?a20*a[idx+n-1]:0)+(top?a01*a[idx-n]:0)+a11*a[idx]+(bottom?a21*a[idx+n]:0)+(left&top?a02*a[idx-n+1]:0)+(left?a12*a[idx+1]:0)+(left&bottom?a22*a[idx+n+1]:0);
      }
}

Transformers for "main"


//  T() {}

void conv_cpu(float *a, float *c, int n, float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{

//  T() {}

   int i, j;

//  T(i,j) {0<=i, i+1<=n}

   for(i = 0; i <= n-1; i += 1)

//  T(j) {0<=i, i+1<=n, 0<=j, j+1<=n}

      for(j = 0; j <= n-1; j += 1) {

//  T(idx) {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         int idx = i*n+j;


//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool right = i>0;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool left = i<n-1;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool top = j>0;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}

         _Bool bottom = j<n-1;

//  T() {0<=i, i+j<=idx, i+1<=n, j<=idx, 0<=j, j+1<=n}


         c[idx] = (right&top?a00*a[idx-n-1]:0)+(right?a10*a[idx-1]:0)+(right&bottom?a20*a[idx+n-1]:0)+(top?a01*a[idx-n]:0)+a11*a[idx]+(bottom?a21*a[idx+n]:0)+(left&top?a02*a[idx-n+1]:0)+(left?a12*a[idx+1]:0)+(left&bottom?a22*a[idx+n+1]:0);
      }
}

Preconditions for "main"


//  P() {}

int main(int argc, char *argv[])
{

//  P() {}

   int n = 10000;

//  P(n) {n==10000}

   int loops = 10;


//  P(loops,n) {loops==10, n==10000}

   int numBytes = n*n*sizeof(float);

//  P(loops,n,numBytes) {loops==10, n==10000}

   float *h_A = (float *) malloc(numBytes);

//  P(loops,n,numBytes) {loops==10, n==10000}

   float *h_C = (float *) malloc(numBytes);

//  P(loops,n,numBytes) {loops==10, n==10000}

   int i, j;

//  P(loops,n,numBytes) {loops==10, n==10000}

   for(i = 0; i <= n-1; i += 1)

//  P(i,j,loops,n,numBytes) {loops==10, n==10000, 0<=i, i<=9999}

      for(j = 0; j <= n-1; j += 1) {

//  P(i,j,loops,n,numBytes) {loops==10, n==10000, 0<=i, i<=9999, 0<=j,
//    j<=9999}

         h_A[i*n+j] = 1;

//  P(i,j,loops,n,numBytes) {loops==10, n==10000, 0<=i, i<=9999, 0<=j,
//    j<=9999}

         h_C[i*n+j] = 0;
      }

//  P(i,j,loops,n,numBytes) {i==10000, j==10000, loops==10, n==10000}

   
   
   for(i = 0; i <= loops-1; i += 1)

//  P(i,j,loops,n,numBytes) {j==10000, loops==10, n==10000, 0<=i,
//    i<=9}

      conv_cpu(h_A, h_C, n, 1, 1, 1, 1, 1, 1, 1, 1, 1);
}

Preconditions for "conv_cpu"


//  P() {n==10000}

void conv_cpu(float *a, float *c, int n, float a00, float a10, float a20, float a01, float a11, float a21, float a02, float a12, float a22)
{

//  P() {n==10000}

   int i, j;

//  P() {n==10000}

   for(i = 0; i <= n-1; i += 1)

//  P(i,j) {n==10000, 0<=i, i<=9999}

      for(j = 0; j <= n-1; j += 1) {

//  P(i,j) {n==10000, 0<=i, i<=9999, 0<=j, j<=9999}

         int idx = i*n+j;


//  P(i,idx,j) {10000i+j==idx, n==10000, 0<=i, i<=9999, 0<=j, j<=9999}

         _Bool right = i>0;

//  P(i,idx,j) {10000i+j==idx, n==10000, 0<=i, i<=9999, 0<=j, j<=9999}

         _Bool left = i<n-1;

//  P(i,idx,j) {10000i+j==idx, n==10000, 0<=i, i<=9999, 0<=j, j<=9999}

         _Bool top = j>0;

//  P(i,idx,j) {10000i+j==idx, n==10000, 0<=i, i<=9999, 0<=j, j<=9999}

         _Bool bottom = j<n-1;

//  P(i,idx,j) {10000i+j==idx, n==10000, 0<=i, i<=9999, 0<=j, j<=9999}


         c[idx] = (right&top?a00*a[idx-n-1]:0)+(right?a10*a[idx-1]:0)+(right&bottom?a20*a[idx+n-1]:0)+(top?a01*a[idx-n]:0)+a11*a[idx]+(bottom?a21*a[idx+n]:0)+(left&top?a02*a[idx-n+1]:0)+(left?a12*a[idx+1]:0)+(left&bottom?a22*a[idx+n+1]:0);
      }
}

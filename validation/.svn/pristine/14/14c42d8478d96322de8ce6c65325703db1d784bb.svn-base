#
# Display print_code_preconditions for module induction05
#

//  P() {}

void induction05(int SIZE, double A[SIZE], double B[SIZE][SIZE])
{

//  P() {}

   int i, j;

//  P() {}

   int k = SIZE;

//  P(k) {SIZE==k}

   for(i = 0; i <= SIZE-1; i += 1) {

//  P(i,k) {2i+k==SIZE, i+1<=SIZE, 0<=i}

      if (k--)

//  P(i,k) {2i+k==SIZE-1, i+1<=SIZE, 0<=i}

         A[k] = B[j-k][k]+A[k];

//  P(i,k) {2i+k==SIZE-1, 0<=i, 0<=i+k}

      if (--k)

//  P(i,k) {2i+k==SIZE-2, i+1<=SIZE, 0<=i}

         A[k] = B[j-k][k]+A[k];
   }
}
#
# Code after induction_substitution for module induction05
#
void induction05(int SIZE, double A[SIZE], double B[SIZE][SIZE])
{
   int i, j;
   int k = SIZE;
   for(i = 0; i <= SIZE-1; i += 1) {
      if (k = -2*i+SIZE-1, k-1)
         A[-2*i+SIZE-1] = B[j-((-2)*i+SIZE-1)][-2*i+SIZE-1]+A[-2*i+SIZE-1];
      if (k = -2*i+SIZE-2)
         A[-2*i+SIZE-2] = B[j-((-2)*i+SIZE-2)][-2*i+SIZE-2]+A[-2*i+SIZE-2];
   }
}

original code
void P4A_accel_free(void *ptr)
{
   free(ptr);
}
void P4A_accel_malloc(void **ptr, size_t n)
{
   if (n)
      *ptr = malloc(n);
   else
      *ptr = (void *) 0;
}
void P4A_copy_from_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   char *csrc = accel_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = d1_offset*element_size+(char *) host_address;
   char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel(size_t element_size, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = host_address;
   for(i = 0; i < element_size; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   char *csrc = d1_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
void lonesome_cowboy()
{
   int i, j, n = 12;
   int a[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 0;
   for(i = 1; i <= n-1-1; i += 1)
isolate:
      for(j = 1; j <= n-1; j += 1)
         if (j<i)
            a[i][j] = 1;
   j = 0;
   /* compute trace */
   for(i = 0; i <= n-1; i += 1)
      j += a[i][i];
   printf("%d", j);
}
int main(int argv, char *argc[])
{
   lonesome_cowboy();
   return 0;
}
isolated code
void lonesome_cowboy()
{
   int i, j, n = 12;
   int a[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         a[i][j] = 0;
   for(i = 1; i <= n-1-1; i += 1) {
      //PIPS generated variable
      int (*a0)[1][i-2+1] = (int (*)[1][i-2+1]) 0;
      if (i-2>0) {
         P4A_accel_malloc((void **) &a0, sizeof(int)*(i-1));
         P4A_copy_to_accel_2d(sizeof(int), n, n, 1, i-1, i, 1, &a[0][0], *a0);

isolate:
         for(j = 1; j <= n-1; j += 1)
            if (j<i)
               (*a0)[i-i][j-1] = 1;
         P4A_copy_from_accel_2d(sizeof(int), n, n, 1, i-1, i, 1, &a[0][0], *a0);
         P4A_accel_free(a0);
      }
   }
   j = 0;
   /* compute trace */
   for(i = 0; i <= n-1; i += 1)
      j += a[i][i];
   printf("%d", j);
}



Parsed code for "average_power"

void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   double PP;
   int th, v, rg;

   for (th = 0;th<Nth;th++) {
      PP = 0.;
      for (rg = 0;rg<Nrg;rg++)
         for (v = 0;v<Nv;v++)
            PP += ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im;
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}

Code for "average_power"

void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   double PP;
   int th, v, rg;

   for(th = 0; th <= Nth-1; th += 1) {
      PP = 0.;
      for(rg = 0; rg <= Nrg-1; rg += 1)
         for(v = 0; v <= Nv-1; v += 1)
            PP += ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im;
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
      Pow[th].im = 0.;
   }
}

Proper effects for "average_power"

void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   double PP;
   int th, v, rg;
//             <    is read   >: Nth
//             <    is written>: th

   for(th = 0; th <= Nth-1; th += 1) {
//             <    is read   >: Nth
//             <    is written>: PP
      PP = 0.;
//             <    is read   >: Nrg Nth
//             <    is written>: rg
      for(rg = 0; rg <= Nrg-1; rg += 1)
//             <    is read   >: Nrg Nth Nv
//             <    is written>: v
         for(v = 0; v <= Nv-1; v += 1)
//             <    is read   >: Nrg Nth Nv PP ptrin[th][rg][v].im 
//                               ptrin[th][rg][v].im 
//                               ptrin[th][rg][v].re 
//                               ptrin[th][rg][v].re rg th v
//             <    is written>: PP
            PP += ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im;
//             <    is read   >: Nrg Nth Nv PP th
//             <    is written>: Pow[th].re
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
//             <    is read   >: Nth th
//             <    is written>: Pow[th].im
      Pow[th].im = 0.;
   }
}

Cumulated effects for "average_power"

//             <may be read   >: ptrin[*][*][*].im ptrin[*][*][*].re
//             <may be written>: Pow[*].im Pow[*].re
//             <    is read   >: Nrg Nth Nv
void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   double PP;
   int th, v, rg;
//             <may be read   >: Nrg Nv PP ptrin[*][*][*].im 
//                               ptrin[*][*][*].re rg th v
//             <may be written>: PP Pow[*].im Pow[*].re rg v
//             <    is read   >: Nth
//             <    is written>: th

   for(th = 0; th <= Nth-1; th += 1) {
//             <    is read   >: Nth
//             <    is written>: PP
      PP = 0.;
//             <may be read   >: Nv PP ptrin[*][*][*].im 
//                               ptrin[*][*][*].re rg th v
//             <may be written>: PP v
//             <    is read   >: Nrg Nth
//             <    is written>: rg
      for(rg = 0; rg <= Nrg-1; rg += 1)
//             <may be read   >: PP ptrin[*][*][*].im 
//                               ptrin[*][*][*].re rg th v
//             <may be written>: PP
//             <    is read   >: Nrg Nth Nv
//             <    is written>: v
         for(v = 0; v <= Nv-1; v += 1)
//             <may be read   >: ptrin[*][*][*].im ptrin[*][*][*].re
//             <    is read   >: Nrg Nth Nv PP rg th v
//             <    is written>: PP
            PP += ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im;
//             <may be written>: Pow[*].re
//             <    is read   >: Nrg Nth Nv PP th
      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));
//             <may be written>: Pow[*].im
//             <    is read   >: Nth th
      Pow[th].im = 0.;
   }
}

Cumulated effects for "main"

//             <may be read   >: stdout stdout[0] __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
int main(int argc, char *argv[])
{
   int i, j, k;
   int th, rg, v;
//             <    is written>: rg th v
   th = 14, rg = 13, v = 12;
   {
//             <    is read   >: rg th v
      Cplfloat in[th][rg][v], pow[th];
//             <may be read   >: i j k rg v
//             <may be written>: in[*][*][*].im in[*][*][*].re j k
//             <    is read   >: th
//             <    is written>: i
      for(i = 0; i <= th-1; i += 1)
//             <may be read   >: i j k v
//             <may be written>: in[*][*][*].im in[*][*][*].re k
//             <    is read   >: rg th
//             <    is written>: j
         for(j = 0; j <= rg-1; j += 1)
//             <may be read   >: i j k
//             <may be written>: in[*][*][*].im in[*][*][*].re
//             <    is read   >: rg th v
//             <    is written>: k
            for(k = 0; k <= v-1; k += 1) {
//             <may be written>: in[*][*][*].re
//             <    is read   >: i j k rg th v
               in[i][j][k].re = i*j*k;
//             <may be written>: in[*][*][*].im
//             <    is read   >: i j k rg th v
               in[i][j][k].im = i*j+k;
            }
//             <may be read   >: in[*][*][*].im in[*][*][*].re
//             <may be written>: pow[*].im pow[*].re
//             <    is read   >: rg th v
      average_power(th, rg, v, in, pow);
//             <may be read   >: i pow[*].im pow[*].re stdout 
//                               stdout[0] __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: th
//             <    is written>: i
      for(i = 0; i <= th-1; i += 1)
//             <may be read   >: pow[*].im pow[*].re stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout th __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("-%f-", pow[i]);
   }
//             <may be read   >: __IO_EFFECTS:LUNS[1]
   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main(int argc, char *argv[])
{
   int i, j, k;
   int th, rg, v;

//  <rg-W-EXACT-{}>
//  <th-W-EXACT-{}>
//  <v-W-EXACT-{}>

   th = 14, rg = 13, v = 12;
   {

//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

      Cplfloat in[th][rg][v], pow[th];

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <in[PHI1][PHI2][PHI3].im-W-EXACT-{0<=PHI1, PHI1<=13, 0<=PHI2,
//    PHI2<=12, 0<=PHI3, PHI3<=11, rg==13, th==14, v==12}>
//  <in[PHI1][PHI2][PHI3].re-W-EXACT-{0<=PHI1, PHI1<=13, 0<=PHI2,
//    PHI2<=12, 0<=PHI3, PHI3<=11, rg==13, th==14, v==12}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <k-R-EXACT-{}>
//  <k-W-EXACT-{}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

      for(i = 0; i <= th-1; i += 1)

//  <i-R-EXACT-{}>
//  <in[PHI1][PHI2][PHI3].im-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=12,
//    0<=PHI3, PHI3<=11, rg==13, th==14, v==12, 0<=i, i<=13}>
//  <in[PHI1][PHI2][PHI3].re-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=12,
//    0<=PHI3, PHI3<=11, rg==13, th==14, v==12, 0<=i, i<=13}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <k-R-EXACT-{}>
//  <k-W-EXACT-{}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

         for(j = 0; j <= rg-1; j += 1)

//  <i-R-EXACT-{}>
//  <in[PHI1][PHI2][PHI3].im-W-EXACT-{PHI1==i, PHI2==j, 0<=PHI3,
//    PHI3<=11, rg==13, th==14, v==12, 0<=i, i<=13, 0<=j, j<=12}>
//  <in[PHI1][PHI2][PHI3].re-W-EXACT-{PHI1==i, PHI2==j, 0<=PHI3,
//    PHI3<=11, rg==13, th==14, v==12, 0<=i, i<=13, 0<=j, j<=12}>
//  <j-R-EXACT-{}>
//  <k-R-EXACT-{}>
//  <k-W-EXACT-{}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

            for(k = 0; k <= v-1; k += 1) {

//  <i-R-EXACT-{}>
//  <in[PHI1][PHI2][PHI3].re-W-EXACT-{PHI1==i, PHI2==j, PHI3==k,
//    rg==13, th==14, v==12, 0<=i, i<=13, 0<=j, j<=12, 0<=k, k<=11}>
//  <j-R-EXACT-{}>
//  <k-R-EXACT-{}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

               in[i][j][k].re = i*j*k;

//  <i-R-EXACT-{}>
//  <in[PHI1][PHI2][PHI3].im-W-EXACT-{PHI1==i, PHI2==j, PHI3==k,
//    rg==13, th==14, v==12, 0<=i, i<=13, 0<=j, j<=12, 0<=k, k<=11}>
//  <j-R-EXACT-{}>
//  <k-R-EXACT-{}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

               in[i][j][k].im = i*j+k;
            }

//  <in[PHI1][PHI2][PHI3].im-R-EXACT-{0<=PHI1, PHI1<=13, 0<=PHI2,
//    PHI2<=12, 0<=PHI3, PHI3<=11, i==14, j==13, k==12, rg==13,
//    th==14, v==12}>
//  <in[PHI1][PHI2][PHI3].re-R-EXACT-{0<=PHI1, PHI1<=13, 0<=PHI2,
//    PHI2<=12, 0<=PHI3, PHI3<=11, i==14, j==13, k==12, rg==13,
//    th==14, v==12}>
//  <pow[PHI1].im-W-EXACT-{0<=PHI1, PHI1<=13, i==14, j==13, k==12,
//    rg==13, th==14, v==12}>
//  <pow[PHI1].re-W-EXACT-{0<=PHI1, PHI1<=13, i==14, j==13, k==12,
//    rg==13, th==14, v==12}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

      average_power(th, rg, v, in, pow);

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <pow[PHI1].im-R-EXACT-{0<=PHI1, PHI1<=13, j==13, k==12, rg==13,
//    th==14, v==12}>
//  <pow[PHI1].re-R-EXACT-{0<=PHI1, PHI1<=13, j==13, k==12, rg==13,
//    th==14, v==12}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <th-R-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, j==13, k==12, rg==13,
//    th==14, v==12}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, j==13, k==12, rg==13,
//    th==14, v==12}>

      for(i = 0; i <= th-1; i += 1)

//  <i-R-EXACT-{}>
//  <pow[PHI1].im-R-EXACT-{PHI1==i, j==13, k==12, rg==13, th==14,
//    v==12, 0<=i, i<=13}>
//  <pow[PHI1].re-R-EXACT-{PHI1==i, j==13, k==12, rg==13, th==14,
//    v==12, 0<=i, i<=13}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <th-R-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, j==13, k==12, rg==13,
//    th==14, v==12, 0<=i, i<=13}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, j==13, k==12, rg==13,
//    th==14, v==12, 0<=i, i<=13}>

         printf("-%f-", pow[i]);
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>

   return 0;
}

Regions for "average_power"


//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <Pow[PHI1].im-W-EXACT-{0<=PHI1, PHI1+1<=Nth}>
//  <Pow[PHI1].re-W-EXACT-{0<=PHI1, PHI1+1<=Nth}>
//  <ptrin[PHI1][PHI2][PHI3].im-R-EXACT-{0<=PHI1, PHI1+1<=Nth,
//    0<=PHI2, PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv}>
//  <ptrin[PHI1][PHI2][PHI3].re-R-EXACT-{0<=PHI1, PHI1+1<=Nth,
//    0<=PHI2, PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv}>

void average_power(int Nth, int Nrg, int Nv, Cplfloat ptrin[Nth][Nrg][Nv], Cplfloat Pow[Nth])
{

   double PP;
   int th, v, rg;

//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <PP-R-EXACT-{}>
//  <PP-W-EXACT-{}>
//  <Pow[PHI1].im-W-EXACT-{0<=PHI1, PHI1+1<=Nth}>
//  <Pow[PHI1].re-W-EXACT-{0<=PHI1, PHI1+1<=Nth}>
//  <ptrin[PHI1][PHI2][PHI3].im-R-EXACT-{0<=PHI1, PHI1+1<=Nth,
//    0<=PHI2, PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv}>
//  <ptrin[PHI1][PHI2][PHI3].re-R-EXACT-{0<=PHI1, PHI1+1<=Nth,
//    0<=PHI2, PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv}>
//  <rg-R-EXACT-{}>
//  <rg-W-EXACT-{}>
//  <th-R-EXACT-{}>
//  <th-W-EXACT-{}>
//  <v-R-EXACT-{}>
//  <v-W-EXACT-{}>


   for(th = 0; th <= Nth-1; th += 1) {

//  <Nth-R-EXACT-{}>
//  <PP-W-EXACT-{}>

      PP = 0.;

//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <PP-R-EXACT-{}>
//  <PP-W-EXACT-{}>
//  <ptrin[PHI1][PHI2][PHI3].im-R-EXACT-{PHI1==th, 0<=PHI2,
//    PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv, 0<=th, th+1<=Nth}>
//  <ptrin[PHI1][PHI2][PHI3].re-R-EXACT-{PHI1==th, 0<=PHI2,
//    PHI2+1<=Nrg, 0<=PHI3, PHI3+1<=Nv, 0<=th, th+1<=Nth}>
//  <rg-R-EXACT-{}>
//  <rg-W-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>
//  <v-W-EXACT-{}>

      for(rg = 0; rg <= Nrg-1; rg += 1)

//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <PP-R-EXACT-{}>
//  <PP-W-EXACT-{}>
//  <ptrin[PHI1][PHI2][PHI3].im-R-EXACT-{PHI1==th, PHI2==rg, 0<=PHI3,
//    PHI3+1<=Nv, 0<=rg, rg+1<=Nrg, 0<=th, th+1<=Nth}>
//  <ptrin[PHI1][PHI2][PHI3].re-R-EXACT-{PHI1==th, PHI2==rg, 0<=PHI3,
//    PHI3+1<=Nv, 0<=rg, rg+1<=Nrg, 0<=th, th+1<=Nth}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>
//  <v-W-EXACT-{}>

         for(v = 0; v <= Nv-1; v += 1)

//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <PP-R-EXACT-{}>
//  <PP-W-EXACT-{}>
//  <ptrin[PHI1][PHI2][PHI3].im-R-EXACT-{PHI1==th, PHI2==rg, PHI3==v,
//    0<=rg, rg+1<=Nrg, 0<=th, th+1<=Nth, 0<=v, v+1<=Nv}>
//  <ptrin[PHI1][PHI2][PHI3].re-R-EXACT-{PHI1==th, PHI2==rg, PHI3==v,
//    0<=rg, rg+1<=Nrg, 0<=th, th+1<=Nth, 0<=v, v+1<=Nv}>
//  <rg-R-EXACT-{}>
//  <th-R-EXACT-{}>
//  <v-R-EXACT-{}>

            PP += ptrin[th][rg][v].re*ptrin[th][rg][v].re+ptrin[th][rg][v].im*ptrin[th][rg][v].im;

//  <Nrg-R-EXACT-{}>
//  <Nth-R-EXACT-{}>
//  <Nv-R-EXACT-{}>
//  <PP-R-EXACT-{}>
//  <Pow[PHI1].re-W-EXACT-{PHI1==th, 0<=rg, Nrg<=rg, 0<=th,
//    th+1<=Nth}>
//  <th-R-EXACT-{}>

      Pow[th].re = (float) (PP/((float) (Nv*Nrg)));

//  <Nth-R-EXACT-{}>
//  <Pow[PHI1].im-W-EXACT-{PHI1==th, 0<=rg, Nrg<=rg, 0<=th,
//    th+1<=Nth}>
//  <th-R-EXACT-{}>

      Pow[th].im = 0.;
   }
}


Points-to for "update1"


// Points To IN:
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY


// Points To OUT:
// _pa_1[0].s1 -> *HEAP*_l_10 , MAY
// pa -> _pa_1[0] , EXACT

void update1(content *pa)
{

// Points To:
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY

#pragma MOTIF
   pa->s1 = (sub *) malloc(sizeof(sub));

// Points To:
// _pa_1[0].s1 -> *HEAP*_l_10 , MAY
// pa -> _pa_1[0] , EXACT

   pa->s1->var2 = 8;

// Points To:
// _pa_1[0].s1 -> *HEAP*_l_10 , MAY
// pa -> _pa_1[0] , EXACT

   return;
}

Proper effects with points-to for "update1"

void update1(content *pa)
{
//             <    is read   >: pa _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa sub
#pragma MOTIF
   pa->s1 = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _pa_1[0].s1 pa
//             <    is referenced>: pa
   pa->s1->var2 = 8;
   return;
}

Cumulated effects with points-to for "update1"

//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _pa_1[0].s1 pa 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa
void update1(content *pa)
{
//             <    is read   >: pa _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa sub
#pragma MOTIF
   pa->s1 = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_10.var2
//             <    is read   >: _pa_1[0].s1 pa
//             <    is referenced>: pa
   pa->s1->var2 = 8;
   return;
}

Points-to for "compute1"


// Points To IN:
// _pa_1[0].s1 -> *NULL* , MAY
// _pa_1[0].s1 -> _pa_1_2__1[0][0] , MAY
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY


// Points To OUT:
// _pa_1[0].s1 -> *NULL* , MAY
// _pa_1[0].s1 -> _pa_1_2__1[0][0] , MAY
// pa -> _pa_1[0] , EXACT

void compute1(content *pa, int b[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To:
// _pa_1[0].s1 -> *NULL* , MAY
// _pa_1[0].s1 -> _pa_1_2__1[0][0] , MAY
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY

         b[i] = pa->s1->var2;
   }

// Points To:
// _pa_1[0].s1 -> *NULL* , MAY
// _pa_1[0].s1 -> _pa_1_2__1[0][0] , MAY
// pa -> _pa_1[0] , EXACT

   return;
}

Proper effects with points-to for "compute1"

void compute1(content *pa, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <    is read   >: _pa_1[0].s1 _pa_1_2__1[0][0].var2 i 
//                               pa
//             <    is written>: b[i]
//             <    is referenced>: b i pa
         b[i] = pa->s1->var2;
   }
   return;
}

Cumulated effects with points-to for "compute1"

//             <may be written>: b[*]
//             <    is read   >: _pa_1[0].s1 _pa_1_2__1[0][0].var2 pa
//             <    is referenced>: b pa
void compute1(content *pa, int b[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be written>: b[*]
//             <    is read   >: _pa_1[0].s1 _pa_1_2__1[0][0].var2 i 
//                               pa
//             <    is written>: i
//             <    is referenced>: b i pa
      for(i = 0; i <= 99; i += 1)
//             <may be written>: b[*]
//             <    is read   >: _pa_1[0].s1 _pa_1_2__1[0][0].var2 i 
//                               pa
//             <    is referenced>: b i pa
         b[i] = pa->s1->var2;
   }
   return;
}

Points-to for "update2"


// Points To IN:
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY


// Points To OUT:
// _pa_1[0].s2 -> *HEAP*_l_27 , MAY
// pa -> _pa_1[0] , EXACT

void update2(content *pa)
{

// Points To:
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY

#pragma MOTIF
   pa->s2 = (sub *) malloc(sizeof(sub));

// Points To:
// _pa_1[0].s2 -> *HEAP*_l_27 , MAY
// pa -> _pa_1[0] , EXACT

   pa->s2->var2 = 8;

// Points To:
// _pa_1[0].s2 -> *HEAP*_l_27 , MAY
// pa -> _pa_1[0] , EXACT

   return;
}

Proper effects with points-to for "update2"

void update2(content *pa)
{
//             <    is read   >: pa _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa sub
#pragma MOTIF
   pa->s2 = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _pa_1[0].s2 pa
//             <    is referenced>: pa
   pa->s2->var2 = 8;
   return;
}

Cumulated effects with points-to for "update2"

//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _pa_1[0].s2 pa 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa
void update2(content *pa)
{
//             <    is read   >: pa _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _pa_1[0].s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: pa sub
#pragma MOTIF
   pa->s2 = (sub *) malloc(sizeof(sub));
//             <may be written>: *HEAP*_l_27.var2
//             <    is read   >: _pa_1[0].s2 pa
//             <    is referenced>: pa
   pa->s2->var2 = 8;
   return;
}

Points-to for "compute2"


// Points To IN:
// _pa_1[0].s2 -> *NULL* , MAY
// _pa_1[0].s2 -> _pa_1_3__1[0][0] , MAY
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY


// Points To OUT:
// _pa_1[0].s2 -> *NULL* , MAY
// _pa_1[0].s2 -> _pa_1_3__1[0][0] , MAY
// pa -> _pa_1[0] , EXACT

void compute2(content *pa, int b[100], int c[100])
{
#pragma MOTIF
   {

// Points To: none

      int i;

// Points To: none

      for(i = 0; i <= 99; i += 1)

// Points To:
// _pa_1[0].s2 -> *NULL* , MAY
// _pa_1[0].s2 -> _pa_1_3__1[0][0] , MAY
// pa -> *NULL* , MAY
// pa -> _pa_1[0] , MAY

         c[i] = b[i]+pa->s2->var2;
   }

// Points To:
// _pa_1[0].s2 -> *NULL* , MAY
// _pa_1[0].s2 -> _pa_1_3__1[0][0] , MAY
// pa -> _pa_1[0] , EXACT

   return;
}

Proper effects with points-to for "compute2"

void compute2(content *pa, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <    is written>: i
//             <    is referenced>: i
      for(i = 0; i <= 99; i += 1)
//             <    is read   >: _pa_1[0].s2 _pa_1_3__1[0][0].var2 
//                               b[i] i pa
//             <    is written>: c[i]
//             <    is referenced>: b c i pa
         c[i] = b[i]+pa->s2->var2;
   }
   return;
}

Cumulated effects with points-to for "compute2"

//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _pa_1[0].s2 _pa_1_3__1[0][0].var2 pa
//             <    is referenced>: b c pa
void compute2(content *pa, int b[100], int c[100])
{
#pragma MOTIF
   {
//             <    is declared>: i
      int i;
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _pa_1[0].s2 _pa_1_3__1[0][0].var2 i 
//                               pa
//             <    is written>: i
//             <    is referenced>: b c i pa
      for(i = 0; i <= 99; i += 1)
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: _pa_1[0].s2 _pa_1_3__1[0][0].var2 i 
//                               pa
//             <    is referenced>: b c i pa
         c[i] = b[i]+pa->s2->var2;
   }
   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main(int argc, char *argv[])
{

// Points To: none

   content a;

// Points To:
// a.s1 -> undefined , EXACT
// a.s2 -> undefined , EXACT

   int b[100];

// Points To:
// a.s1 -> undefined , EXACT
// a.s2 -> undefined , EXACT

   int c[100];

// Points To:
// a.s1 -> undefined , EXACT
// a.s2 -> undefined , EXACT


   update1(&a);

// Points To:
// a.s1 -> update1:*HEAP*_l_10 , MAY
// a.s2 -> undefined , EXACT

   compute1(&a, b);

// Points To:
// a.s1 -> update1:*HEAP*_l_10 , MAY
// a.s2 -> undefined , EXACT

   update2(&a);

// Points To:
// a.s1 -> update1:*HEAP*_l_10 , MAY
// a.s2 -> update2:*HEAP*_l_27 , MAY

   compute2(&a, b, c);

// Points To:
// a.s1 -> update1:*HEAP*_l_10 , MAY
// a.s2 -> update1:*HEAP*_l_10 , MAY
// a.s2 -> update2:*HEAP*_l_27 , MAY


   return 0;
}

Proper effects with points-to for "main"

int main(int argc, char *argv[])
{
//             <    is referenced>: content
//             <    is declared>: a
   content a;
//             <    is declared>: b
   int b[100];
//             <    is declared>: c
   int c[100];
//             <may be written>: update1:*HEAP*_l_10.var2
//             <    is read   >: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s1 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a

   update1(&a);
//             <may be written>: b[*]
//             <    is read   >: a.s1 update1:*HEAP*_l_10.var2
//             <    is referenced>: a b
   compute1(&a, b);
//             <may be written>: update2:*HEAP*_l_27.var2
//             <    is read   >: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.s2 _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: a
   update2(&a);
//             <may be read   >: b[*]
//             <may be written>: c[*]
//             <    is read   >: a.s2 update1:*HEAP*_l_10.var2 
//                               update2:*HEAP*_l_27.var2
//             <    is referenced>: a b c
   compute2(&a, b, c);

   return 0;
}

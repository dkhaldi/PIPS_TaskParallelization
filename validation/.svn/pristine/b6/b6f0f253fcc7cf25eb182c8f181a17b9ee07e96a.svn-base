int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int out[n][n], in0[n][n], in1[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in0[i][j] = 1, in1[i][j] = 1;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         out[i][j] = in0[i][j]-in1[i][j];
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
tidy the code just in case of
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int out[n][n], in0[n][n], in1[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in0[i][j] = 1, in1[i][j] = 1;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         out[i][j] = in0[i][j]-in1[i][j];
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
**** check ok ******
int main(int argc, char **argv)
{
   int check, i, j, n = argc>1?atoi(argv[1]):200;
   int out[n][n], in0[n][n], in1[n][n];
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         in0[i][j] = 1, in1[i][j] = 1;
#pragma terapix
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         out[i][j] = in0[i][j]-in1[i][j];
   check = 0;
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= n-1; j += 1)
         check += out[i][j];
   printf("%d\n", check);
   return 0;
}
detection and extraction
tiling
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   unsigned int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
l99996:
#pragma terapix
      for(i = 0; i <= n-1; i += 1)
l99997:
         for(j = 0; j <= n-1; j += 1)
            out[i][j] = in0[i][j]-in1[i][j];
   }
}
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
         for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
            I_9 = I_0*__TERAPYPS_WIDTH;
            I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
            for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
               I_14 = I_1*__TERAPYPS_HEIGHT;
               i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
               for(i = I_9; i <= pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1); i += 1)
                  for(j = I_14; j <= pips_min(2, n-1, I_14+__TERAPYPS_HEIGHT-1); j += 1)
                     out[i][j] = in0[i][j]-in1[i][j];
            }
         }
      }
   }
}
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
         for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
            I_9 = I_0*__TERAPYPS_WIDTH;
            I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
            for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
               I_14 = I_1*__TERAPYPS_HEIGHT;
               i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
               if (n-1>I_9+__TERAPYPS_WIDTH-1)
                  if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                     for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                        for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                           out[i][j] = in0[i][j]-in1[i][j];
                  else
                     for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                        for(j = I_14; j <= n-1; j += 1)
                           out[i][j] = in0[i][j]-in1[i][j];
               else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(i = I_9; i <= n-1; i += 1)
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
               else
                  for(i = I_9; i <= n-1; i += 1)
                     for(j = I_14; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            }
         }
      }
   }
}
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   int __TERAPYPS_WIDTH, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   if (__TERAPYPS_HEIGHT>3||3<__TERAPYPS_WIDTH) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
         for(I_0 = 0; I_0 <= (n-1)/__TERAPYPS_WIDTH; I_0 += 1) {
            I_9 = I_0*__TERAPYPS_WIDTH;
            I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
            for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
               I_14 = I_1*__TERAPYPS_HEIGHT;
               i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+__TERAPYPS_WIDTH-1)-I_9+1), 0);
               if (n-1>I_9+__TERAPYPS_WIDTH-1)
                  if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                     for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                        for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                           out[i][j] = in0[i][j]-in1[i][j];
                  else
                     for(i = I_9; i <= I_9+__TERAPYPS_WIDTH-1; i += 1)
                        for(j = I_14; j <= n-1; j += 1)
                           out[i][j] = in0[i][j]-in1[i][j];
               else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
                  for(i = I_9; i <= n-1; i += 1)
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
               else
                  for(i = I_9; i <= n-1; i += 1)
                     for(j = I_14; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            }
         }
      }
   }
}
group constants and isolate
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   if (__TERAPYPS_HEIGHT>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
         I_9 = 128*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99989:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+127)-I_9+1), 0);
            if (n-1>I_9+127)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99998:
                  for(i = I_9; i <= I_9+127; i += 1)
l99999:
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
               else
l99994:
                  for(i = I_9; i <= I_9+127; i += 1)
l99995:
                     for(j = I_14; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99992:
               for(i = I_9; i <= n-1; i += 1)
l99993:
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     out[i][j] = in0[i][j]-in1[i][j];
            else
l99990:
               for(i = I_9; i <= n-1; i += 1)
l99991:
                     for(j = I_14; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            }
         }
      }
   }
}
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   int __TERAPYPS_WIDTH = 128, __TERAPYPS_HEIGHT;
   //PIPS generated variable
   int I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, I_10, I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21;
   __TERAPYPS_HEIGHT = 170;
   if (__TERAPYPS_HEIGHT>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {
         I_9 = 128*I_0;
         I_1 = pips_max(2, INT((n-1)/__TERAPYPS_HEIGHT+1), 0);
l99989:
         for(I_1 = 0; I_1 <= (n-1)/__TERAPYPS_HEIGHT; I_1 += 1) {
            I_14 = I_1*__TERAPYPS_HEIGHT;
            i = I_9+pips_max(2, INT(pips_min(2, n-1, I_9+127)-I_9+1), 0);
            if (n-1>I_9+127)
               if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99998:
                  for(i = I_9; i <= I_9+127; i += 1)
l99999:
                     for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
               else
l99994:
                  for(i = I_9; i <= I_9+127; i += 1)
l99995:
                     for(j = I_14; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            else if (n-1>I_14+__TERAPYPS_HEIGHT-1)
l99992:
               for(i = I_9; i <= n-1; i += 1)
l99993:
                  for(j = I_14; j <= I_14+__TERAPYPS_HEIGHT-1; j += 1)
                     out[i][j] = in0[i][j]-in1[i][j];
            else
l99990:
               for(i = I_9; i <= n-1; i += 1)
l99991:
                  for(j = I_14; j <= n-1; j += 1)
                     out[i][j] = in0[i][j]-in1[i][j];
         }
      }
   }
}
**** check ok ******
void main_l99996(int n, int in0[n][n], int in1[n][n], int out[n][n])
{
   //PIPS generated variable
   int I_0, I_1;

   if (170>3||3<128) {
      // Declared by Pass Outlining
      int i, j;
#pragma terapix
      {
         
         
l99996:
#pragma terapix
      for(I_0 = 0; I_0 <= (n-1)/128; I_0 += 1) {


l99989:
         for(I_1 = 0; I_1 <= (n-1)/170; I_1 += 1) {


            if (n-1>128*I_0+127)
               if (n-1>170*I_1+169)
l99998:
                  for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99999:
                     for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
               else
l99994:
                  for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99995:
                     for(j = 170*I_1; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            else if (n-1>170*I_1+169)
l99992:
               for(i = 128*I_0; i <= n-1; i += 1)
l99993:
                  for(j = 170*I_1; j <= 170*I_1+169; j += 1)
                     out[i][j] = in0[i][j]-in1[i][j];
            else
l99990:
               for(i = 128*I_0; i <= n-1; i += 1)
l99991:
                     for(j = 170*I_1; j <= n-1; j += 1)
                        out[i][j] = in0[i][j]-in1[i][j];
            }
         }
      }
   }
}
void tile_l99998(int n, int I_0, int I_1, int in0[n][n], int in1[n][n], int out[n][n])
{
   // Declared by Pass Outlining
   int i, j;
l99998:
   for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99999:
      for(j = 170*I_1; j <= 170*I_1+169; j += 1)
         out[i][j] = in0[i][j]-in1[i][j];
}
void tile_l99998(int n, int I_0, int I_1, int in0[n][n], int in1[n][n], int out[n][n])
{
   // Declared by Pass Outlining
   int i, j;
   {
      //PIPS generated variable
      int (*in00)[128][170] = (int (*)[128][170]) 0, (*in10)[128][170] = (int (*)[128][170]) 0, (*out0)[128][170] = (int (*)[128][170]) 0;
      P4A_accel_malloc((void **) &out0, sizeof(int)*21760);
      P4A_accel_malloc((void **) &in10, sizeof(int)*21760);
      P4A_accel_malloc((void **) &in00, sizeof(int)*21760);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in1[0][0], *in10);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in0[0][0], *in00);

l99998:
      for(i = 128*I_0; i <= 128*I_0+127; i += 1)
l99999:
         for(j = 170*I_1; j <= 170*I_1+169; j += 1)
            (*out0)[i-128*I_0][j-170*I_1] = (*in00)[i-128*I_0][j-170*I_1]-(*in10)[i-128*I_0][j-170*I_1];
      P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &out[0][0], *out0);
      P4A_accel_free(out0);
      P4A_accel_free(in10);
      P4A_accel_free(in00);
   }
}
**** check ok ******
outlining to launcher
void tile_l99998(int n, int I_0, int I_1, int in0[n][n], int in1[n][n], int out[n][n])
{
   // Declared by Pass Outlining
   int i, j;
   {
      //PIPS generated variable
      int (*in00)[128][170] = (int (*)[128][170]) 0, (*in10)[128][170] = (int (*)[128][170]) 0, (*out0)[128][170] = (int (*)[128][170]) 0;
      P4A_accel_malloc((void **) &out0, 21760*sizeof(int));
      P4A_accel_malloc((void **) &in10, 21760*sizeof(int));
      P4A_accel_malloc((void **) &in00, 21760*sizeof(int));
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in1[0][0], *in10);
      P4A_copy_to_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &in0[0][0], *in00);

l99998:      launcher_0(169+1, *in00, *in10, *out0);
      P4A_copy_from_accel_2d(sizeof(int), n, n, 128, 170, 128*I_0, 170*I_1, &out[0][0], *out0);
      P4A_accel_free(out0);
      P4A_accel_free(in10);
      P4A_accel_free(in00);
   }
}

//  <in00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>
//  <in10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>
//  <out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>

void launcher_0(int I_22, int in00[128][170], int in10[128][170], int out0[128][170])
{
   // Declared by Pass Outlining
   int i, j;

//  <in00[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>
//  <in10[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>
//  <out0[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=127, 0<=PHI2, PHI2<=169,
//    I_22==170}>

l99998:
   for(i = 0; i <= 127; i += 1)

//  <in00[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_22==170,
//    0<=i, i<=127}>
//  <in10[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_22==170,
//    0<=i, i<=127}>
//  <out0[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=169, I_22==170,
//    0<=i, i<=127}>

l99999:
      for(j = 0; j <= I_22-1; j += 1)

//  <in00[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_22==170, 0<=i,
//    i<=127, 0<=j, j<=169}>
//  <in10[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, I_22==170, 0<=i,
//    i<=127, 0<=j, j<=169}>
//  <out0[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, I_22==170, 0<=i,
//    i<=127, 0<=j, j<=169}>

         out0[i][j] = in00[i][j]-in10[i][j];
}
outlining to microcode
void launcher_0(int I_22, int in00[128][170], int in10[128][170], int out0[128][170])
{
   // Declared by Pass Outlining
   int i, j;
l99998:
   for(i = 0; i <= 127; i += 1)
l99999:
      for(j = 0; j <= I_22-1; j += 1)
         out0[i][j] = in00[i][j]-in10[i][j];
}
void launcher_0(int I_22, int in00[128][170], int in10[128][170], int out0[128][170])
{
   // Declared by Pass Outlining
   int i, j;
l99998:
   for(i = 0; i <= 127; i += 1)
l99999:
      for(j = 0; j <= I_22-1; j += 1)
         out0[i][j] = in00[i][j]-in10[i][j];
}
void launcher_0(int I_22, int in00[128][170], int in10[128][170], int out0[128][170])
{
   // Declared by Pass Outlining
   int i, j;
l99998:
   for(i = 0; i <= 127; i += 1)
l99999:      launcher_0_microcode(I_22, *&in00[i], *&in10[i], *&out0[i]);
}
void launcher_0_microcode(int I_22, int in000[170], int in100[170], int out00[170])
{
   // Declared by Pass Outlining
   int j;
l99999:
   for(j = 0; j <= I_22-1; j += 1)
      out00[j] = in000[j]-in100[j];
}
**** check ok ******
refining microcode
void launcher_0_microcode(int I_22, int in000[170], int in100[170], int out00[170])
{
   // Declared by Pass Outlining
   int j;
l99999:
   for(j = 0; j <= I_22-1; j += 1)
      out00[j] = in000[j]-in100[j];
}
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
l99999:
   for(j = 0; j <= I_22-1; j += 1)
      *(out00+j) = *(in000+j)-*(in100+j);
}
**** check ok ******
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
l99999:
   for(j = 0; j <= I_22-1; j += 1)
      *(out00+j) = *(j+in000)-*(j+in100);
}
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99999:
   for(j = 0; j <= I_22-1; j += 1) {
      *out000 = *in0000-*in1000;
      in1000 += 1;
      in0000 += 1;
      out000 += 1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99999:
   for(j = 0; j <= I_22-1; j += 1) {
      *out000 = *in0000-*in1000;
      in1000 += 1;
      in0000 += 1;
      out000 += 1;
   }
}
**** check ok ******
**** check ok ******
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99999:
   for(j = 0; j <= I_22-1; j += 1) {
      *out000 = *in0000-*in1000;
      in1000 += 1;
      in0000 += 1;
      out000 += 1;
   }
}
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99999:
   for(j = 0; j <= I_22-1; j += 1) {
      *out000 = *in0000-*in1000;
      in1000 = in1000+1;
      in0000 = in0000+1;
      out000 = out000+1;
   }
}
**** check ok ******
void launcher_0_microcode(int I_22, int *in000, int *in100, int *out00)
{
   // Declared by Pass Outlining
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   in1000 = in100;
   in0000 = in000;
   out000 = out00;
l99999:
   for(j = 0; j <= I_22-1; j += 1) {
      *out000 = *in0000-*in1000;
      in1000 = in1000+1;
      in0000 = in0000+1;
      out000 = out000+1;
   }
}
**** check ok ******
I_22 belongs to a loop bound
in000 seems an image
in100 seems an image
out00 seems an image
void launcher_0_microcode(int *FIFO3, int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix out00 128 170
#pragma terapix in100 128 170
#pragma terapix in000 128 170
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *in000, *im4, *in100, *im5, *out00, *im6;
   //PIPS generated variable
   int re6, re7;
   //PIPS generated variable
   int *im7, *im8, *im9, *im10, *im11, *im12;
   //PIPS generated variable
   int P;
   im6 = FIFO3;
   im5 = FIFO2;
   im4 = FIFO1;
   im1 = im5;
   im2 = im4;
   im3 = im6;
   im3 = im3-1;
   im2 = im2-1;
   im1 = im1-1;
l99999:
   for(re6 = 0; re6 <= N1; re6 += 1) {
      //PIPS generated variable
      int I_23;
      *++im3 = *++im2-*++im1;
   }
}
**** check ok ******
void launcher_0_microcode(int *FIFO3, int *FIFO2, int *FIFO1, int N1)
{
   // Declared by Pass Outlining
#pragma terapix out00 128 170
#pragma terapix in100 128 170
#pragma terapix in000 128 170
   int j;
   //PIPS generated variable
   int *out000, *in0000, *in1000;
   //PIPS generated variable
   int re5;
   //PIPS generated variable
   int *im1, *im2, *im3, *in000, *im4, *in100, *im5, *out00, *im6;
   //PIPS generated variable
   int re6, re7;
   //PIPS generated variable
   int *im7, *im8, *im9, *im10, *im11, *im12;
   //PIPS generated variable
   int P;
   im6 = FIFO3;
   im5 = FIFO2;
   im4 = FIFO1;
   im1 = im5;
   im2 = im4;
   im3 = im6;
   im3 = im3-1;
   im2 = im2-1;
   im1 = im1-1;
l99999:
   for(re6 = 0; re6 <= N1; re6 += 1) {
      //PIPS generated variable
      int I_23;
      *++im3 = *++im2-*++im1;
   }
}
void launcher_0(int I_22, int in00[128][170], int in10[128][170], int out0[128][170])
{
   // Declared by Pass Outlining
   int i, j;
l99998:
   for(i = 0; i <= 127; i += 1)
l99999:      launcher_0_microcode(*&out0[i], *&in10[i], *&in00[i], I_22);
}
**** check ok ******


Parsed printed file for "main"

int main()
{
   int i, j, n, BlockEnd = 3;

   for (i = 1;i<16;i <<= 2)
      for (j = i, n = 0;n<BlockEnd;j++, n++) {
         int k, l;
         k = foo((j, n));
         l = k;
         printf("%d\n", l);
      }
}

Parsed printed file for "foo"

int foo(int i)
{
   /* Default type is int */
   static int l;
   l = i;
   return i;
}

Printed file for "main"

int main()
{
   int i, j, n, BlockEnd = 3;

   i = 1;
   while (i<16) {
      j = i;
      for(n = 0; n <= BlockEnd-1; n += 1) {
         int k, l;
         k = foo((j, n));
         l = k;
         printf("%d\n", l);
         j++;
      }
      i <<= 2;
   }
}

Printed file with proper effects for "foo"

int foo(int i)
{
   /* Default type is int */
   static int l;
//             <    is read   >: i
//             <    is written>: l
   l = i;
//             <    is read   >: i
   return i;
}

Printed file with cumulated effects for "foo"

//             <    is read   >: i
//             <    is written>: l
int foo(int i)
{
   /* Default type is int */
   static int l;
//             <    is read   >: i
//             <    is written>: l
   l = i;
//             <    is read   >: i
   return i;
}

Printed file with proper effects for "main"

int main()
{
//             <    is written>: BlockEnd
   int i, j, n, BlockEnd = 3;
//             <    is written>: i

   i = 1;
//             <    is read   >: i
   while (i<16) {
//             <    is read   >: i
//             <    is written>: j
      j = i;
//             <    is read   >: BlockEnd
//             <    is written>: n
      for(n = 0; n <= BlockEnd-1; n += 1) {
         int k, l;
//             <    is read   >: BlockEnd j n
//             <    is written>: k foo:0`l
         k = foo((j, n));
//             <    is read   >: BlockEnd k
//             <    is written>: l
         l = k;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: BlockEnd l stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("%d\n", l);
//             <    is read   >: BlockEnd j
//             <    is written>: j
         j++;
      }
//             <    is read   >: i
//             <    is written>: i
      i <<= 2;
   }
}

Printed file with transformers for "foo"


//  T(foo,l) {foo==i, foo==l}

int foo(int i)
{
   /* Default type is int */

//  T() {}

   static int l;

//  T(l) {i==l}

   l = i;

//  T(foo) {foo==i, foo==l}

   return i;
}

Printed file with transformers for "main"


//  T(foo:0`l) {foo:0`l==2}

int main()
{

//  T(BlockEnd) {BlockEnd==3}

   int i, j, n, BlockEnd = 3;

//  T(i) {BlockEnd==3, i==1}


   i = 1;

//  T(foo:0`l,i,j,n) {BlockEnd==3, i#init==1, i<=15}

   while (i<16) {

//  T(j) {BlockEnd==3, i==j, i<=15}

      j = i;

//  T(foo:0`l,j,n) {BlockEnd==3, i+n==j, i==j#init, i<=15, 0<=n, n<=2}

      for(n = 0; n <= BlockEnd-1; n += 1) {

//  T() {BlockEnd==3, i<=15, 0<=n, n<=2}

         int k, l;

//  T(foo:0`l,k) {BlockEnd==3, foo:0`l==k, foo:0`l==n, 0<=foo:0`l,
//    foo:0`l<=2, i<=15}

         k = foo((j, n));

//  T(l) {BlockEnd==3, foo:0`l==k, foo:0`l==l, foo:0`l==n, 0<=foo:0`l,
//    foo:0`l<=2, i<=15}

         l = k;

//  T() {BlockEnd==3, foo:0`l==k, foo:0`l==l, foo:0`l==n, 0<=foo:0`l,
//    foo:0`l<=2, i<=15}

         printf("%d\n", l);

//  T(j) {BlockEnd==3, foo:0`l==k, foo:0`l==l, foo:0`l==n,
//    j==j#init+1, 0<=foo:0`l, foo:0`l<=2, i<=15}

         j++;
      }

//  T(i) {}

      i <<= 2;
   }
}

Printed file preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   int i, j, n, BlockEnd = 3;

//  P(BlockEnd) {BlockEnd==3}


   i = 1;

//  P(BlockEnd,i) {BlockEnd==3, i==1}

   while (i<16) {

//  P(BlockEnd,foo:0`l,i,j,n) {BlockEnd==3, i<=15}

      j = i;

//  P(BlockEnd,foo:0`l,i,j,n) {BlockEnd==3, i==j, i<=15}

      for(n = 0; n <= BlockEnd-1; n += 1) {

//  P(BlockEnd,foo:0`l,i,j,n) {BlockEnd==3, i+n==j, i<=15, 0<=n, n<=2}

         int k, l;

//  P(BlockEnd,foo:0`l,i,j,n) {BlockEnd==3, i+n==j, i<=15, 0<=n, n<=2}

         k = foo((j, n));

//  P(BlockEnd,foo:0`l,i,j,k,n) {BlockEnd==3, foo:0`l+i==j,
//    foo:0`l==k, foo:0`l==n, 0<=foo:0`l, foo:0`l<=2, i<=15}

         l = k;

//  P(BlockEnd,foo:0`l,i,j,k,l,n) {BlockEnd==3, foo:0`l+i==j,
//    foo:0`l==k, foo:0`l==l, foo:0`l==n, 0<=foo:0`l, foo:0`l<=2,
//    i<=15}

         printf("%d\n", l);

//  P(BlockEnd,foo:0`l,i,j,k,l,n) {BlockEnd==3, foo:0`l+i==j,
//    foo:0`l==k, foo:0`l==l, foo:0`l==n, 0<=foo:0`l, foo:0`l<=2,
//    i<=15}

         j++;
      }

//  P(BlockEnd,foo:0`l,i,j,n) {BlockEnd==3, foo:0`l==2, i==j-3, n==3,
//    i<=15}

      i <<= 2;
   }
}

Printed file with preconditions for "for"


//  P() {0<=i, i<=2}

int foo(int i)
{
   /* Default type is int */

//  P() {0<=i, i<=2}

   static int l;

//  P() {0<=i, i<=2}

   l = i;

//  P(l) {i==l, 0<=i, i<=2}

   return i;
}

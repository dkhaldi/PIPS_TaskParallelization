
Source code with transformers

//  T(clone02) {n<=clone02+1, clone02<=n+1}
int clone02(int n, int s)
{
//  T(r) {n==r}
   int r = n;
//  T(r) {n==r#init, r<=n+1, n<=r+1}
   if (s<0)
//  T(r) {n==r+1, n==r#init, s+1<=0}
      r = n-1;
   else if (s>0)
//  T(r) {n==r-1, n==r#init, 1<=s}
      r = n+1;
//  T(clone02) {clone02==r, n<=clone02+1, clone02<=n+1}
   return r;
}

Source code with preconditions

//  P() {}
int main()
{
//  P() {}
   int i = 1;
//  P(i) {i==1}
   i = clone02(i, -1);
//  P(i) {0<=i, i<=2}
   i = clone02(i, 1);
//  P(i) {0<=i+1, i<=3}
   i = clone02(i, 0);
}
# new callgraph
 main
     clone02_0
     clone02_1
     clone02_2
# new codes after cloning
int clone02(int n, int s)
{
   int r = n;
   if (s<0)
      r = n-1;
   else if (s>0)
      r = n+1;
   return r;
}
int clone02_0(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (s!=-1)
      exit(0);
   {
      int r = n;
      if (s<0)
         r = n-1;
      else if (s>0)
         r = n+1;
      return r;
   }
}
int clone02_1(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (s!=1)
      exit(0);
   {
      int r = n;
      if (s<0)
         r = n-1;
      else if (s>0)
         r = n+1;
      return r;
   }
}
int clone02_2(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (s!=0)
      exit(0);
   {
      int r = n;
      if (s<0)
         r = n-1;
      else if (s>0)
         r = n+1;
      return r;
   }
}
int main()
{
   int i = 1;
   i = clone02_0(i, -1);
   i = clone02_1(i, 1);
   i = clone02_2(i, 0);
}
# applying partial evaluation...
int clone02(int n, int s)
{
   int r = n;
   if (s<0)
      r = n-1;
   else if (s>0)
      r = n+1;
   return r;
}
int clone02_0(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (-1!=-1)
      exit(0);
   {
      int r = 1;
      if (-1<0)
         r = 0;
      else if (s>0)
         r = n+1;
      return 0;
   }
}
int clone02_1(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (1!=1)
      exit(0);
   {
      int r = 0;
      if (1<0)
         r = n-1;
      else if (1>0)
         r = 1;
      return 1;
   }
}
int clone02_2(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   if (0!=0)
      exit(0);
   {
      int r = 1;
      if (0<0)
         r = n-1;
      else if (0>0)
         r = n+1;
      return 1;
   }
}
int main()
{
   int i = 1;
   i = clone02_0(i, -1);
   i = clone02_1(i, 1);
   i = clone02_2(i, 0);
}
# applying suppress dead code...
int clone02_1(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   int r = 0;
   r = 1;
   return 1;
}
# applying use-def elimination...
int clone02_1(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   ;
   return 1;
}
int clone02(int n, int s)
{
   int r = n;
   if (s<0)
      r = n-1;
   else if (s>0)
      r = n+1;
   return r;
}
int clone02_0(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   return 0;
}
int clone02_1(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   return 1;
}
int clone02_2(int n, int s)
{
   // PIPS: s is assumed a constant reaching value
   return 1;
}
int main()
{
   int i = 1;
   i = clone02_0(i, -1);
   i = clone02_1(i, 1);
   i = clone02_2(i, 0);
}
//  P() {}
int main()
{
//  P() {}
   int i = 1;
//  P(i) {i==1}
   i = clone02_0(i, -1);
//  P(i) {i==0}
   i = clone02_1(i, 1);
//  P(i) {i==1}
   i = clone02_2(i, 0);
}


TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x0, z0, n, x, z, c1, c2;

//  T(x0) {0<=x0}

   x0 = rand();

//  T(z0) {0<=x0, 0<=z0}

   z0 = rand();

//  T(n) {0<=n, 0<=x0, 0<=z0}

   n = rand();

//  T() {0<=n, x0<=n, z0<=n, 0<=x0, 0<=z0}

   if (!(n>=x0&&n>=z0))

//  T() {0==-1}

      deadlock();

//  T(x) {x==x0, 0<=n, x<=n, z0<=n, 0<=x, 0<=z0}

   x = x0;

//  T(z) {x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x, 0<=z}

   z = z0;

//  T(c1,c2) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x,
//    0<=z}

   c1 = c2 = 0;

//  T() {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n, x+z<=2n, z<=n, 0<=x,
//    0<=z}

   if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

      checking_error();

//  T(c1,c2,x,z) {c1+x#init==c1#init+x, c1+x0==x,
//    c2+z#init==c2#init+z, c2+z0==z, c1#init<=c1, x<=n, x+z<=2n,
//    z0<=n, x0<=x, 0<=x0, z#init<=z, z0<=z, 0<=z0}

   while (rand_b())

//  T(c1,c2,x,z) {c1+c2==c1#init+c2#init+1, c1+x#init==c1#init+x,
//    c1+z==c1#init+z#init+1, c1#init<=c1, c1<=c1#init+1,
//    c1#init+x+1<=c1+n, c1+c2+x0+z0<=2n, x0<=n, z0<=n, 0<=x0, 0<=z0}

      if (rand_b()) {

//  T() {x+1<=n, x0<=n, z0<=n, x+1<=z, 0<=x0, 0<=z0}

         if (!(x<n&&z>x))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x<=n, x0<=n, z0<=n, x<=z, 0<=x0, 0<=z0}

         x++;

//  T(c1) {c1==c1#init+1, x<=n, x0<=n, z0<=n, x<=z, 0<=x0, 0<=z0}

         c1++;

//  T() {c1+c2+x0+z0<=2n, x<=n, x0<=n, z0<=n, x<=z, 0<=x0, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x+1<=n, x0<=n, z0<=n, z<=x, 0<=x0, 0<=z0}

         if (!(x<n&&z<=x))

//  T() {0==-1}

            deadlock();

//  T(z) {z==z#init+1, x+1<=n, x0<=n, z0<=n, z<=x+1, 0<=x0, 0<=z0}

         z++;

//  T(c2) {c2==c2#init+1, x+1<=n, x0<=n, z0<=n, z<=x+1, 0<=x0, 0<=z0}

         c2++;

//  T() {c1+c2+x0+z0<=2n, x+1<=n, x0<=n, z0<=n, z<=x+1, 0<=x0, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x0, z0, n, x, z, c1, c2;

//  T(x0) {0<=x0}

   x0 = rand();

//  T(z0) {0<=x0, 0<=z0}

   z0 = rand();

//  T(n) {0<=n, 0<=x0, 0<=z0}

   n = rand();

//  T() {0<=n, x0<=n, z0<=n, 0<=x0, 0<=z0}

   if (!(n>=x0&&n>=z0))

//  T() {0==-1}

      deadlock();

//  T(x) {x==x0, 0<=n, x<=n, z0<=n, 0<=x, 0<=z0}

   x = x0;

//  T(z) {x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x, 0<=z}

   z = z0;

//  T(c1,c2) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x,
//    0<=z}

   c1 = c2 = 0;

//  T() {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n, x+z<=2n, z<=n, 0<=x,
//    0<=z}

   if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

      checking_error();

//  T() {c1==0, c2==0, x==x0, z==z0, x<=n, z<=n, 0<=x, 0<=z}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  T() {c1==0, c2==0, x==x0, z==z0, x+1<=n, z<=n, 0<=x, 0<=z}

   if (z>x) goto L1;

//  T() {c1==0, c2==0, x==x0, z==z0, 0<=n, x+1<=n, x+z<=2n, z<=n,
//    0<=x, z<=x, 0<=z}

L2:   ;

//  T(c2,z) {c1==0, c2+z#init==c2#init+z, c2+z0==z, x==x0, x+1<=n,
//    z<=x, z#init<=z, z0<=z, 0<=z0}

   while (rand_b()) {

//  T() {c1==0, x==x0, x+1<=n, z+1<=x, z0<=x, 0<=z0}

      if (!(x<n&&z<x))

//  T() {0==-1}

         deadlock();

//  T(z) {c1==0, x==x0, z==z#init+1, x+1<=n, z<=x, z0<=x, 0<=z0}

      z++;

//  T(c2) {c1==0, c2==c2#init+1, x==x0, x+1<=n, z<=x, z0<=x, 0<=z0}

      c2++;

//  T() {c1==0, x==x0, c2+x+z0<=2n, x+1<=n, z<=x, z0<=x, 0<=z0}

      if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

         checking_error();
   }

//  T() {c1==0, c2+z0==x, x==x0, x==z, 0<=n, x+1<=n, x+z0<=2n, z0<=n,
//    0<=x, z0<=x, 0<=z0}

   if (!(x<n&&z==x))

//  T() {0==-1}

      deadlock();

//  T(z) {c1==0, c2+z0==x, x==x0, x==z-1, x==z#init, 0<=n, x+1<=n,
//    x+z0<=2n, z0<=n, 0<=x, z0<=x, 0<=z0}

   z++;

//  T(c2) {c1==0, c2==c2#init+1, c2+z0==x+1, x==x0, x==z-1, 0<=n,
//    x+1<=n, x+z0<=2n, z0<=n, 0<=x, z0<=x, 0<=z0}

   c2++;

//  T() {c1==0, c2+z0==x+1, x==x0, x==z-1, 0<=n, x+1<=n, x+z0<=2n,
//    z0<=n, 0<=x, z0<=x, 0<=z0}

   if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

      checking_error();

//  T() {c1==0, c2+z0==z, x==x0, z<=n, 0<=x, x+1<=z, z<=x+z0+1, z0<=z}

L1:   ;

//  T(c1,c2,x,z) {c1+x#init==c1#init+x, c1+x0==x,
//    c2+z#init==c2#init+z, c2+z0==z, c1#init<=c1,
//    c1#init+z<=c1+z#init, 0<=c2, z<=c2+n, c2<=x+1, x+1<=n,
//    x0+z<=n+x, x+z<=2n, x0<=x, x+1<=z, 0<=x0, z#init<=z}

   while (rand_b())

//  T(c1,c2,x,z) {c1==c1#init+1, c2+z#init==c2#init+z, x==x#init+1,
//    c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, x+1<=z, 0<=x0,
//    z#init<=z, z<=z#init+1, 0<=z0}

      if (rand_b()) {

//  T() {x+2<=n, x0+1<=n, z0<=n, x+2<=z, 0<=x0, 0<=z0}

         if (!(x<n-1&&z>x+1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x+1<=n, x0+1<=n, z0<=n, x+1<=z, 0<=x0, 0<=z0}

         x++;

//  T(c1) {c1==c1#init+1, x+1<=n, x0+1<=n, z0<=n, x+1<=z, 0<=x0,
//    0<=z0}

         c1++;

//  T() {c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, x+1<=z, 0<=x0,
//    0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x==z-1, x+2<=n, x0+1<=n, z0<=n, 0<=x0, 0<=z0}

         if (!(x<n-1&&z==x+1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, x==z, x+1<=n, x0+1<=n, z0<=n, 0<=x0, 0<=z0}

         x++;

//  T(c1) {c1==c1#init+1, x==z, x+1<=n, x0+1<=n, z0<=n, 0<=x0, 0<=z0}

         c1++;

//  T() {x==z, c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, 0<=x0, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

            checking_error();

//  T(c2,z) {c2+z#init==c2#init+x, x==z, c1+c2+x0+z0<=2n, x+1<=n,
//    x0+1<=n, z0<=n, z#init<=x, 0<=x0, 0<=z0}

         while (rand_b()) {

//  T() {x+1<=n, x0+1<=n, z0<=n, z+1<=x, 0<=x0, 0<=z0}

            if (!(x<n&&z<x))

//  T() {0==-1}

               deadlock();

//  T(z) {z==z#init+1, x+1<=n, x0+1<=n, z0<=n, z<=x, 0<=x0, 0<=z0}

            z++;

//  T(c2) {c2==c2#init+1, x+1<=n, x0+1<=n, z0<=n, z<=x, 0<=x0, 0<=z0}

            c2++;

//  T() {c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, z<=x, 0<=x0, 0<=z0}

            if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

               checking_error();
         }

//  T() {x==z, c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, 0<=x0, 0<=z0}

         if (!(x<n&&z==x))

//  T() {0==-1}

            deadlock();

//  T(z) {x==z-1, x==z#init, c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n,
//    0<=x0, 0<=z0}

         z++;

//  T(c2) {c2==c2#init+1, x==z-1, c1+c2+x0+z0<=2n+1, x+1<=n, x0+1<=n,
//    z0<=n, 0<=x0, 0<=z0}

         c2++;

//  T() {x==z-1, c1+c2+x0+z0<=2n, x+1<=n, x0+1<=n, z0<=n, 0<=x0,
//    0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

            checking_error();
      }

//  T() {c1+x0==n-1, c2+z0==z, n==x+1, x0+1<=n, x0+z+1<=2n, n<=z,
//    z<=n+z0, z0<=n, 0<=x0, x0+1<=z, z0<=z, 0<=z0}

   if (!(x==n-1&&z>x))

//  T() {0==-1}

      deadlock();

//  T(x) {c1+x0==n-1, c2+z0==z, n==x, n==x#init+1, x0+1<=n,
//    x0+z+1<=2n, n<=z, z<=n+z0, z0<=n, 0<=x0, x0+1<=z, z0<=z, 0<=z0}

   x++;

//  T(c1) {c1==c1#init+1, c1+x0==n, c2+z0==z, n==x, x0+1<=n,
//    x0+z+1<=2n, n<=z, z<=n+z0, z0<=n, 0<=x0, x0+1<=z, z0<=z, 0<=z0}

   c1++;

//  T() {c1+x0==n, c2+z0==z, n==x, c1+c2+x0+z0<=2n, x0+1<=n,
//    x0+z+1<=2n, n<=z, z<=n+z0, z0<=n, 0<=x0, x0+1<=z, z0<=z, 0<=z0}

   if (!(c1+c2<=n-x0+n-z0))

//  T() {0==-1}

      checking_error();

//  T() {c1+x0==n, c2+z0==z, n==x, x0<=n, n<=x0+z, z<=n, z0<=z, 0<=z0}

L3:   ;
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x0, z0, n, x, z, c1, c2;

//  P() {}

   x0 = rand();

//  P(x0) {0<=x0}

   z0 = rand();

//  P(x0,z0) {0<=x0, 0<=z0}

   n = rand();

//  P(n,x0,z0) {0<=n, 0<=x0, 0<=z0}

   if (!(n>=x0&&n>=z0))

//  P(n,x0,z0) {0<=n, n+1<=x0+z0, 0<=x0, 0<=z0}

      deadlock();

//  P(n,x0,z0) {0<=n, x0<=n, z0<=n, 0<=x0, 0<=z0}

   x = x0;

//  P(n,x,x0,z0) {x==x0, 0<=n, x<=n, z0<=n, 0<=x, 0<=z0}

   z = z0;

//  P(n,x,x0,z,z0) {x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x, 0<=z}

   c1 = c2 = 0;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n,
//    z<=n, 0<=x, 0<=z}

   if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n,
//    x+z<=2n, z<=n, 0<=x, 0<=z}

   while (rand_b())

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0<=n,
//    z<=c1+x0+z0+1, c1<=z, x0<=n, z<=n, z0<=n, 0<=x0, z0<=z, 0<=z0}

      if (rand_b()) {

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0<=n,
//    z<=c1+x0+z0+1, c1<=z, x0<=n, z<=n, z0<=n, 0<=x0, z0<=z, 0<=z0}

         if (!(x<n&&z>x))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0<=n,
//    z<=c1+x0+z0+1, c1<=z, x0<=n, z<=n, z0<=n, z<=x, 0<=x0, z0<=z,
//    0<=z0}

            deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, z<=c1+x0+z0+1,
//    c1<=z, x+1<=n, x0<=n, z<=n, z0<=n, x+1<=z, 0<=x0, z0<=z, 0<=z0}

         x++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x-1, c2+z0==z, 0<=c1, z<=c1+x0+z0+1,
//    c1<=z, x<=n, x0<=n, z<=n, z0<=n, x<=z, 0<=x0, z0<=z, 0<=z0}

         c1++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 1<=c1, z<=c1+x0+z0,
//    c1<=z+1, x<=n, x0<=n, z<=n, z0<=n, x<=z, 0<=x0, z0<=z, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0<=n,
//    z<=c1+x0+z0+1, c1<=z, x0<=n, z<=n, z0<=n, 0<=x0, z0<=z, 0<=z0}

         if (!(x<n&&z<=x))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0<=n,
//    z<=c1+x0+z0+1, c1<=z, x0<=n, z<=n, z0<=n, 0<=x0, z0<=z, 0<=z0}

            deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, z<=c1+x0+z0+1,
//    c1<=z, x+1<=n, x0<=n, z<=n, z0<=n, z<=x, 0<=x0, z0<=z, 0<=z0}

         z++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z-1, 0<=c1, z<=c1+x0+z0+2,
//    c1+1<=z, x+1<=n, x0<=n, z<=n+1, z0<=n, z<=x+1, 0<=x0, z0+1<=z,
//    0<=z0}

         c2++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, z<=c1+x0+z0+2,
//    c1+1<=z, x+1<=n, x0<=n, z<=n+1, z0<=n, z<=x+1, 0<=x0, z0+1<=z,
//    0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x0, z0, n, x, z, c1, c2;

//  P() {}

   x0 = rand();

//  P(x0) {0<=x0}

   z0 = rand();

//  P(x0,z0) {0<=x0, 0<=z0}

   n = rand();

//  P(n,x0,z0) {0<=n, 0<=x0, 0<=z0}

   if (!(n>=x0&&n>=z0))

//  P(n,x0,z0) {0<=n, n+1<=x0+z0, 0<=x0, 0<=z0}

      deadlock();

//  P(n,x0,z0) {0<=n, x0<=n, z0<=n, 0<=x0, 0<=z0}

   x = x0;

//  P(n,x,x0,z0) {x==x0, 0<=n, x<=n, z0<=n, 0<=x, 0<=z0}

   z = z0;

//  P(n,x,x0,z,z0) {x==x0, z==z0, 0<=n, x<=n, z<=n, 0<=x, 0<=z}

   c1 = c2 = 0;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n,
//    z<=n, 0<=x, 0<=z}

   if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x<=n,
//    x+z<=2n, z<=n, 0<=x, 0<=z}

   if (x<n) {
   }
   else {
      goto L3;
   }

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x+1<=n,
//    x+z<=2n, z<=n, 0<=x, 0<=z}

   if (z>x) goto L1;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x+1<=n,
//    x+z<=2n, z<=n, 0<=x, z<=x, 0<=z}

L2:   ;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2==0, x==x0, z==z0, 0<=n, x+1<=n,
//    x+z<=2n, z<=n, 0<=x, z<=x, 0<=z}

   while (rand_b()) {

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, x+1<=n, z<=x, z0<=z,
//    0<=z0}

      if (!(x<n&&z<x))

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==x, x==x0, x==z, x+1<=n, z0<=x,
//    0<=z0}

         deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, x+1<=n, z+1<=x,
//    z0<=z, 0<=z0}

      z++;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z-1, x==x0, x+1<=n, z<=x,
//    z0<=x, z0+1<=z, 0<=z0}

      c2++;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, x+1<=n, z<=x, z0<=x,
//    z0+1<=z, 0<=z0}

      if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

         checking_error();
   }

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, x+1<=n, z<=x, z0<=z,
//    0<=z0}

   if (!(x<n&&z==x))

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, x+1<=n, z+1<=x,
//    z0<=z, 0<=z0}

      deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==x, x==x0, x==z, x+1<=n, z0<=x,
//    0<=z0}

   z++;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==x, x==x0, x==z-1, 0<=n,
//    x+1<=n, x+z0<=2n, z0<=n, 0<=x, z0<=x, 0<=z0}

   c2++;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==x+1, x==x0, x==z-1, 0<=n,
//    x+1<=n, x+z0<=2n, z0<=n, 0<=x, z0<=x, 0<=z0}

   if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, z<=n, 0<=x, x+1<=z,
//    z<=x+z0+1, z0<=z}

L1:   ;

//  P(c1,c2,n,x,x0,z,z0) {c1==0, c2+z0==z, x==x0, z<=n, 0<=x, x+1<=z,
//    z<=x+z0+1, z0<=z}

   while (rand_b())

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, c2<=z,
//    z<=n, x0<=x, x+1<=z, 0<=x0, x0+1<=z}

      if (rand_b()) {

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, c2<=z,
//    z<=n, x0<=x, x+1<=z, 0<=x0, x0+1<=z}

         if (!(x<n-1&&z>x+1))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x+1, x==z-1, 0<=c2,
//    c2<=x+1, x+1<=n, x0<=x, 0<=x0}

            deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, c2<=z,
//    x+2<=n, z<=n, x0<=x, x+2<=z, 0<=x0, x0+1<=z}

         x++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x-1, c2+z0==z, 0<=c2, c2<=x, x+1<=n,
//    x0+1<=n, z<=n, z0<=n, x0+1<=x, x+1<=z, 0<=x0, x0+1<=z, 0<=z0}

         c1++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x, x+1<=n,
//    x0+1<=n, z<=n, z0<=n, x0+1<=x, x+1<=z, 0<=x0, x0+1<=z, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, c2<=z,
//    z<=n, x0<=x, x+1<=z, 0<=x0, x0+1<=z}

         if (!(x<n-1&&z==x+1))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, c2<=z,
//    z<=n, x0<=x, x+1<=z, 0<=x0, x0+1<=z}

            deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x+1, x==z-1, 0<=c2,
//    c2<=x+1, x+2<=n, x0<=x, 0<=x0}

         x++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x-1, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         c1++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

            checking_error();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         while (rand_b()) {

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

            if (!(x<n&&z<x))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

               deadlock();

//  P() {0==-1}

            z++;

//  P() {0==-1}

            c2++;

//  P() {0==-1}

            if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

               checking_error();
         }

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         if (!(x<n&&z==x))

//  P() {0==-1}

            deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         z++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x, x==z-1, 0<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         c2++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==x+1, x==z-1, 1<=c2, x+1<=n,
//    x0+1<=n, z0<=n, x0+1<=x, 0<=x0, 0<=z0}

         if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

            checking_error();
      }

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c2, c2<=x+1, z<=n,
//    x0<=x, x+1<=z, 0<=x0}

   if (!(x==n-1&&z>x))

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==x, c2+z0==z, 0<=c1, c1+x0+2<=n,
//    0<=c2, c2<=x+1, z<=n, x+1<=z, 0<=x0}

      deadlock();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==n-1, c2+z0==n, n==x+1, n==z, 0<=c2,
//    c2<=n, x0+1<=n, 0<=x0}

   x++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==n-1, c2+z0==n, n==x, n==z, 0<=c2,
//    x0+1<=n, 0<=x0, 0<=z0}

   c1++;

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==n, c2+z0==n, n==x, n==z, 0<=c2,
//    x0+1<=n, 0<=x0, 0<=z0}

   if (!(c1+c2<=n-x0+n-z0))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,n,x,x0,z,z0) {c1+x0==n, c2+z0==z, n==x, x0<=n, n<=x0+z,
//    z<=n, z0<=z, 0<=z0}

L3:   ;
}

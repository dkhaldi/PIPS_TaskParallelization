
Points-to for "init" 


// Points To IN:
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY


// Points To OUT:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

void init(mys *m)
{

// Points To: none

   int i;

// Points To:
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY

   m->num = 5;

// Points To:
// m -> _m_1[0] , EXACT

   m->tab2 = malloc(5*sizeof(int));

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab1)[0] = 10;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab2)[0] = 20;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab1)[i] = 1;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab2)[i] = (m->tab1)[i];
   }

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_20[0] , MAY
// m -> _m_1[0] , EXACT

   return;
}

Proper effects with points-to for "init"

void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_20[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i m
//             <    is written>: _m_1[0].tab1[i]
      (m->tab1)[i] = 1;
//             <may be written>: *HEAP*_l_20[i]
//             <    is read   >: _m_1[0].tab1[i] _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
   return;
}

Cumulated effects with points-to for "init"

//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 m 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].num _m_1[0].tab2 
//                               _MALLOC_EFFECTS:_MALLOC_
void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_20[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_20[*] _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 i m
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: i m
      (m->tab1)[i] = 1;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_20[*]
//             <    is read   >: _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   mys s1;

// Points To:
// s1.tab2 -> undefined , EXACT

   mys *p = &s1;

// Points To:
// p -> s1 , EXACT
// s1.tab2 -> undefined , EXACT


   init(p);

// Points To:
// p -> s1 , EXACT
// s1.tab2 -> init:*HEAP*_l_20[0] , MAY


   return 1;
}

Proper effects with points-to for "main"

int main()
{
   mys s1;
//             <    is written>: p
   mys *p = &s1;
//             <may be read   >: s1.tab1[*]
//             <may be written>: s1.tab1[*]
//             <    is read   >: p s1.tab2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: s1.num s1.tab2 
//                               _MALLOC_EFFECTS:_MALLOC_

   init(p);

   return 1;
}

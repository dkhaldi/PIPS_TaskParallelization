
Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i, a[10], *p;

// Points To:
// p -> undefined , EXACT


   p = &a[0];

// Points To:
// p -> a[0] , EXACT

   for(i = 0; i <= 9; i += 1) {

// Points To:
// p -> a[*] , MAY
// p -> a[0] , MAY
// p -> a[1] , MAY
// p -> a[2] , MAY
// p -> a[3] , MAY

      *p = i;

// Points To:
// p -> a[*] , MAY
// p -> a[0] , MAY
// p -> a[1] , MAY
// p -> a[2] , MAY
// p -> a[3] , MAY

      p++;
   }

// Points To:
// p -> a[*] , MAY
// p -> a[0] , MAY
// p -> a[1] , MAY
// p -> a[2] , MAY
// p -> a[3] , MAY


   return 0;
}

PROPER  EFFECTS

int main()
{
   int i, a[10], *p;
//             <    is written>: p

   p = &a[0];
//             <    is written>: i
   for(i = 0; i <= 9; i += 1) {
//             <may be written>: a[0] a[1] a[2] a[3] a[*]
//             <    is read   >: i p
      *p = i;
//             <    is read   >: p
//             <    is written>: p
      p++;
   }

   return 0;
}

Transformers with point-to


//  T(main) {main==0}

int main()
{

//  T() {}

   int i, a[10], *p;

//  T(p) {&a[0]==p}


   p = &a[0];

//  T(i,p) {&a[0]==p#init, 0<=i, i<=9}

   for(i = 0; i <= 9; i += 1) {

//  T() {0<=i, i<=9}

      *p = i;

//  T(p) {p#init+sizeof(int)==p, 0<=i, i<=9}

      p++;
   }

//  T(main) {i==10, main==0}


   return 0;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   int i, a[10], *p;

//  P() {}


   p = &a[0];

//  P(p) {&a[0]==p}

   for(i = 0; i <= 9; i += 1) {

//  P(i,p) {0<=i, i<=9}

      *p = i;

//  P(i,p) {0<=i, i<=9}

      p++;
   }

//  P(i,p) {i==10}


   return 0;
}

Warnings

TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (have_null_value_in_pointer_expression_p) line 9 
at statement:

	p++;


TODO : Need to check if p is indirectly NULL
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (pointer_binary_operation_to_transformer) line 9 
at statement:

	p++;


Operator TOP-LEVEL:+C not analyzed
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (have_null_value_in_pointer_expression_p) line 9 
at statement:

	p++;


TODO : Need to check if p is indirectly NULL
TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (pointer_binary_operation_to_transformer) line 9 
at statement:

	p++;


Operator TOP-LEVEL:+C not analyzed

[info]

title       = Preconditions over scalar integer variables

description = Preconditions are affine predicate over scalar variables. They are used for dependence testing,
	      interprocedural convex array analysis, inteprocedural constant propagation, control simplification
	      and possibly property dependence proving. By default, only integer variables are analyzed, but
	      boolean, string and float scalar variables can also be analyzed.


#
# Properties
#

[properties:bool]

SEMANTICS_ANALYZE_SCALAR_BOOLEAN_VARIABLES = False;Boolean variables are analyzed as integers bounded by 0 and 1. Example: boolean_variables.
SEMANTICS_ANALYZE_SCALAR_COMPLEX_VARIABLES = False;Complex constants are analyzed as functions. Their values are interpreted only when testing for emptiness.
SEMANTICS_ANALYZE_SCALAR_FLOAT_VARIABLES = False;Floating point constants are analyzed as functions. Their values are interpreted only when testing for emptiness. Example: float_variables.
SEMANTICS_ANALYZE_SCALAR_STRING_VARIABLES = False;String constants are analyzed as functions. Their values are interpreted only when testing for emptiness. Example: string_variables.
SEMANTICS_ANALYZE_SCALAR_INTEGER_VARIABLES = True;Scalar integer variables are the main target of the analysis. They are analyzed by default. Almost every example uses integer values.
SEMANTICS_COMPUTE_TRANSFORMERS_IN_CONTEXT = True;Propagate the current precondition when computing the transformers. This is useful to sharpen the analysis of non-affine expressions. This is faster then using REFINE TRANSFORMER (see below). Example: gulwani_cav08_02.
SEMANTICS_FILTERED_PRECONDITIONS = False;Do display only contraints which are useful with respect to the decorated statement. Example: filter.
SEMANTICS_TRUST_ARRAY_DECLARATIONS = False;Use array declarations to generate information about the bad expressions. Example: trust_declarations.
SEMANTICS_TRUST_ARRAY_REFERENCES = False;Use array references to generate information about the index expressions. Example: trust_references.
SEMANTICS_USE_TRANSFORMER_LISTS = True;Use one transformer for each control path in a loop. Transitions such as 'i=0' are not clobered by transitions such as 'i++'. Example: transformers_list.
SEMANTICS_USE_LIST_PROJECTION = True;Project the transition systems on subsets of the state to reduce the number of control paths by eliminating identity transition in the projected system. This reduction improves the effectiveness of the invariant computation on the subset. All invariants are then intersected. Example: Semantics-New/maisonneuve09.
C_PARSER_RETURN_SUBSTITUTION = True;Replace all return statement in a function by goto statements to a unique return point.

[properties:int]

SEMANTICS_K_FIX_POINT = 1;2;The loop preconditions are computed using (T^k)*. The default value is 'k=1'. The only other implemented value is 2. It is useful for periodic transitions such that 'T^2=Id'. Example: periodic_transitions (notice that NEW+OLD=1).
SEMANTICS_MAX_CFG_SIZE1 = 20;-;To improve the preconditions, PIPS restructure the control flow graphs using only while loops and non-deterministic test. However the resolution cost increases with the number of nodes and little useful information is obtain for large CFGs. Simpler heuristics are used when the number of nodes is greater than this bound (no example available).
SEMANTICS_MAX_CFG_SIZE2 = 20;-;To improve the preconditions, PIPS restructure the control flow graphs using only while loops and non-deterministic test. However the resolution cost increases with the number of nodes and little useful information is obtain for large CFGs. Simpler heuristics are used when the number of nodes is greater than this bound (no example available).

[properties:str]

SEMANTICS_FIX_POINT_OPERATOR = derivative;transfer;pattern;Several algoriths have been implemented to compute the transitive closure of a loop body transformer. The best one is called 'derivative'. See NSAD2010 for a description.


#
# Analyses
#

[analyses:PRECONDITIONS]

preconditions_inter_full = Default behaviour: compute transformers bottm up and then ... preconditions top down. The other posibilities are useless with powerful ... and medium size application.
preconditions_intra = Use cummulated memory effects instead of transformers to model call sites.
preconditions_intra_fast = Do not compute transitive closures for loops.
preconditions_inter_fast = Do not compute transitive closures for loops.

[analyses:SUMMARY_PRECONDITION]

interprocedural_summary_precondition = (description not available)
summary_precondition = (description not available)

[analyses:TRANSFORMERS]

transformers_inter_full = (description not available)
transformers_intra_fast = (description not available)
transformers_intra_full = (description not available)
transformers_inter_fast = (description not available)

[analyses:SUMMARY_TRANSFORMERS]

summary_transformer = (description not available)


#
# Phases
#

[phases:PHASES]

refine_transformers = (description not available)


Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i, j, l1, l2, *p;

// Points To:
// p -> undefined , EXACT

   i = 0;

// Points To:
// p -> undefined , EXACT

   l1 = i;

// Points To:
// p -> undefined , EXACT

   j = 1;

// Points To:
// p -> undefined , EXACT

   l2 = j;

// Points To:
// p -> undefined , EXACT


   if (rand()) {

// Points To:
// p -> undefined , EXACT

      p = &i;

// Points To:
// p -> i , EXACT

      l1 = 10;
   }
   else {

// Points To:
// p -> undefined , EXACT

      p = &j;

// Points To:
// p -> j , EXACT

      l2 = 10;
   }

// Points To:
// p -> i , MAY
// p -> j , MAY


   *p = 10;

// Points To:
// p -> i , MAY
// p -> j , MAY


   return 0;
}

PROPER  EFFECTS

int main()
{
   int i, j, l1, l2, *p;
//             <    is written>: i
   i = 0;
//             <    is read   >: i
//             <    is written>: l1
   l1 = i;
//             <    is written>: j
   j = 1;
//             <    is read   >: j
//             <    is written>: l2
   l2 = j;
//             <    is read   >: _RANDOM_EFFECTS:GEN_SEED
//             <    is written>: _RANDOM_EFFECTS:GEN_SEED

   if (rand()) {
//             <    is written>: p
      p = &i;
//             <    is written>: l1
      l1 = 10;
   }
   else {
//             <    is written>: p
      p = &j;
//             <    is written>: l2
      l2 = 10;
   }
//             <may be written>: i j
//             <    is read   >: p

   *p = 10;

   return 0;
}

Transformers with point-to


//  T(main) {main==0}

int main()
{

//  T() {}

   int i, j, l1, l2, *p;

//  T(i) {i==0}

   i = 0;

//  T(l1) {i==0, l1==0}

   l1 = i;

//  T(j) {i==0, j==1, l1==0}

   j = 1;

//  T(l2) {i==0, j==1, l1==0, l2==1}

   l2 = j;

//  T(l1,l2,p) {i==0, j==1, 9l1+10l2==100, l1#init==0, l2#init==1,
//    0<=l1, l1<=10}


   if (rand()) {

//  T(p) {&i==p, i==0, j==1, l1==0, l2==1}

      p = &i;

//  T(l1) {&i==p, i==0, j==1, l1==10, l1#init==0, l2==1}

      l1 = 10;
   }
   else {

//  T(p) {&j==p, i==0, j==1, l1==0, l2==1}

      p = &j;

//  T(l2) {&j==p, i==0, j==1, l1==0, l2==10, l2#init==1}

      l2 = 10;
   }

//  T(i,j) {9i+10j==100, i#init==0, j#init==1, 9l1+10l2==100, 0<=i,
//    i<=10, 0<=l1, l1<=10}


   *p = 10;

//  T(main) {9i+10j==100, 9l1+10l2==100, main==0, 0<=i, i<=10, 0<=l1,
//    l1<=10}


   return 0;
}

Preconditions with point-to


//  P() {}

int main()
{

//  P() {}

   int i, j, l1, l2, *p;

//  P() {}

   i = 0;

//  P(i) {i==0}

   l1 = i;

//  P(i,l1) {i==0, l1==0}

   j = 1;

//  P(i,j,l1) {i==0, j==1, l1==0}

   l2 = j;

//  P(i,j,l1,l2) {i==0, j==1, l1==0, l2==1}


   if (rand()) {

//  P(i,j,l1,l2) {i==0, j==1, l1==0, l2==1}

      p = &i;

//  P(i,j,l1,l2,p) {&i==p, i==0, j==1, l1==0, l2==1}

      l1 = 10;
   }
   else {

//  P(i,j,l1,l2) {i==0, j==1, l1==0, l2==1}

      p = &j;

//  P(i,j,l1,l2,p) {&j==p, i==0, j==1, l1==0, l2==1}

      l2 = 10;
   }

//  P(i,j,l1,l2,p) {i==0, j==1, 9l1+10l2==100, 0<=l1, l1<=10}


   *p = 10;

//  P(i,j,l1,l2,p) {9i+10j==100, 9l1+10l2==100, 0<=i, i<=10, 0<=l1,
//    l1<=10}


   return 0;
}

Warnings

TRANSFORMERS_INTER_FULL_WITH_POINTS_TO[main] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.

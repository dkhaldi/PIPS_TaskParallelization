
POINTS TO


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY


// Points To OUT:
// p -> _p_2[0] , EXACT

void pointer04(int n, float *p)
{

// Points To: none

   int i;

// Points To:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY

   p!=(void *) 0?(void) 0:__assert_fail("p!=NULL", "./pointer04.c", 13, __func__);

// Points To:
// p -> _p_2[0] , EXACT

   float *r = p+1;

// Points To:
// p -> _p_2[0] , EXACT
// r -> _p_2[1] , EXACT


   for(i = 0; i <= n-1; i += 1)

// Points To:
// p -> _p_2[0] , EXACT
// r -> _p_2[1] , EXACT

      p[i] = r[i];
}

Proper effects with points-to

void pointer04(int n, float *p)
{
//             <    is declared>: i
   int i;
//             <may be read   >: __func__
//             <may be referenced>: __func__
//             <    is read   >: p
//             <    is referenced>: p
   p!=(void *) 0?(void) 0:__assert_fail("p!=NULL", "./pointer04.c", 13, __func__);
//             <    is read   >: p
//             <    is written>: r
//             <    is referenced>: p r
//             <    is declared>: r
   float *r = p+1;
//             <    is read   >: n
//             <    is written>: i
//             <    is referenced>: i n

   for(i = 0; i <= n-1; i += 1)
//             <    is read   >: _p_2[1+i] i n p r
//             <    is written>: _p_2[i]
//             <    is referenced>: i n p r
      p[i] = r[i];
}

Parallel code

void pointer04(int n, float *p)
{
   int i;
   p!=(void *) 0?(void) 0:__assert_fail("p!=NULL", "./pointer04.c", 13, __func__);
   float *r = p+1;

   for(i = 0; i <= n-1; i += 1)
      p[i] = r[i];
}


TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int x, y, z;

//  T(x,y,z) {x==0, y==0, z==0}

   x = y = z = 0;

//  T() {x==0, y==0, z==0}

   if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

      checking_error();

//  T(x,y,z) {x==y, x#init==y#init, x#init<=x, z<=x, 2z<=x+1, 0<=z}

   while (rand_b())

//  T(x,y,z) {x+y#init==x#init+y, x#init<=x, x<=x#init+1,
//    x#init+2z<=2x, x<=y, z<=x, 0<=z}

      if (rand_b()) {

//  T() {2z<=x}

         if (!(x>=2*z))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 2z+1<=x}

         x++;

//  T(y) {y==y#init+1, 2z+1<=x}

         y++;

//  T(z) {z==z#init+1, 2z<=x+1}

         z++;

//  T() {0<=x, x<=y, z<=x, 2z<=x+1, 0<=y, 0<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {}

         if (!1)

//  T() {0==-1}

            deadlock();

//  T(z) {z==0}

         z = 0;

//  T() {z==0, 0<=x, x<=y, 0<=y}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int x, y, z;

//  T(x,y,z) {x==0, y==0, z==0}

   x = y = z = 0;

//  T() {x==0, y==0, z==0}

   if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

      checking_error();

//  T(x,y,z) {x==y, x#init==y#init, x#init<=x, 2z<=x, 0<=z}

   while (rand_b())

//  T(x,y,z) {x+y#init==x#init+y, x#init<=x, x<=x#init+1, x<=y, 2z<=x,
//    0<=z}

      if (rand_b()) {

//  T() {2z+1<=x}

         if (!(x>=2*z+1))

//  T() {0==-1}

            deadlock();

//  T(x) {x==x#init+1, 2z+2<=x}

         x++;

//  T(y) {y==y#init+1, 2z+2<=x}

         y++;

//  T(z) {z==z#init+1, 2z<=x}

         z++;

//  T() {0<=x, x<=y, z<=x, 2z<=x, 0<=y, 0<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  T() {}

         if (!1)

//  T() {0==-1}

            deadlock();

//  T(z) {z==0}

         z = 0;

//  T() {z==0, 0<=x, x<=y, 0<=y}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {x==2z}

         if (!(x==2*z))

//  T() {0==-1}

            deadlock();

//  T(x) {x==2z+1, x#init==2z}

         x++;

//  T(y) {x==2z+1, y==y#init+1}

         y++;

//  T(z) {x==2z-1, z==z#init+1}

         z++;

//  T() {x==2z-1, 0<=y, 2z<=y+1, 1<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();

//  T() {x==2z-1, 0<=y, 2z<=y+1, 1<=z}

         if (!1)

//  T() {0==-1}

            deadlock();

//  T(z) {x==2z#init-1, z==0, 0<=y, 2z#init<=y+1, 1<=z#init}

         z = 0;

//  T() {z==0, 1<=x, x<=y, 0<=y}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  T() {0==-1}

            checking_error();
      }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int x, y, z;

//  P() {}

   x = y = z = 0;

//  P(x,y,z) {x==0, y==0, z==0}

   if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

      checking_error();

//  P(x,y,z) {x==0, y==0, z==0}

   while (rand_b())

//  P(x,y,z) {x==y, z<=x, 2z<=x+1, 0<=z}

      if (rand_b()) {

//  P(x,y,z) {x==y, z<=x, 2z<=x+1, 0<=z}

         if (!(x>=2*z))

//  P(x,y,z) {x==2z-1, y==2z-1, 1<=z}

            deadlock();

//  P(x,y,z) {x==y, z<=x, 2z<=x, 0<=z}

         x++;

//  P(x,y,z) {x==y+1, z+1<=x, 2z+1<=x, 0<=z}

         y++;

//  P(x,y,z) {x==y, z+1<=x, 2z+1<=x, 0<=z}

         z++;

//  P(x,y,z) {x==y, z<=x, 2z<=x+1, 1<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,y,z) {x==y, z<=x, 2z<=x+1, 0<=z}

         if (!1)

//  P() {0==-1}

            deadlock();

//  P(x,y,z) {x==y, z<=x, 2z<=x+1, 0<=z}

         z = 0;

//  P(x,y,z) {x==y, z==0, 0<=x}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int x, y, z;

//  P() {}

   x = y = z = 0;

//  P(x,y,z) {x==0, y==0, z==0}

   if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

      checking_error();

//  P(x,y,z) {x==0, y==0, z==0}

   while (rand_b())

//  P(x,y,z) {x==y, 2z<=x, 0<=z}

      if (rand_b()) {

//  P(x,y,z) {x==y, 2z<=x, 0<=z}

         if (!(x>=2*z+1))

//  P(x,y,z) {x==2z, y==2z, 0<=z}

            deadlock();

//  P(x,y,z) {x==y, 2z+1<=x, 0<=z}

         x++;

//  P(x,y,z) {x==y+1, 2z+2<=x, 0<=z}

         y++;

//  P(x,y,z) {x==y, 2z+2<=x, 0<=z}

         z++;

//  P(x,y,z) {x==y, 2z<=x, 1<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();
      }
      else if (rand_b()) {

//  P(x,y,z) {x==y, 2z<=x, 0<=z}

         if (!1)

//  P() {0==-1}

            deadlock();

//  P(x,y,z) {x==y, 2z<=x, 0<=z}

         z = 0;

//  P(x,y,z) {x==y, z==0, 0<=x}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();
      }
      else {

//  P(x,y,z) {x==y, 2z<=x, 0<=z}

         if (!(x==2*z))

//  P(x,y,z) {x==y, 2z+1<=x, 0<=z}

            deadlock();

//  P(x,y,z) {x==2z, y==2z, 0<=z}

         x++;

//  P(x,y,z) {x==2z+1, y==2z, 0<=z}

         y++;

//  P(x,y,z) {x==2z+1, y==2z+1, 0<=z}

         z++;

//  P(x,y,z) {x==2z-1, y==2z-1, 1<=z}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();

//  P(x,y,z) {x==2z-1, y==2z-1, 1<=z}

         if (!1)

//  P() {0==-1}

            deadlock();

//  P(x,y,z) {x==2z-1, y==2z-1, 1<=z}

         z = 0;

//  P(x,y,z) {x==y, z==0, 1<=x}

         if (!(x>=0&&y>=0&&z>=0&&z<=x&&x<=y))

//  P() {0==-1}

            checking_error();
      }
}

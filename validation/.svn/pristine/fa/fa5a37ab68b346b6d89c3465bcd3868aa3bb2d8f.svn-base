
Initial code

void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1)
loop1:
      for(j = 0; j <= 3; j += 1) {
         c[i][j] = 0;
loop2:
         for(k = 0; k <= 3; k += 1)
            c[i][j] = c[i][j]+a[i][k]*b[k][j];
      }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      c[i][0] = c[i][0]+a[i][3]*b[3][0];
      k = 4;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      c[i][1] = c[i][1]+a[i][3]*b[3][1];
      k = 4;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      c[i][2] = c[i][2]+a[i][3]*b[3][2];
      k = 4;
      c[i][3] = 0;
      c[i][3] = c[i][3]+a[i][0]*b[0][3];
      c[i][3] = c[i][3]+a[i][1]*b[1][3];
      c[i][3] = c[i][3]+a[i][2]*b[2][3];
      c[i][3] = c[i][3]+a[i][3]*b[3][3];
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      c[i][0] = c[i][0]+a[i][0]*b[0][0];
      c[i][0] = c[i][0]+a[i][1]*b[1][0];
      c[i][0] = c[i][0]+a[i][2]*b[2][0];
      c[i][0] = c[i][0]+a[i][3]*b[3][0];
      k = 4;
      c[i][1] = 0;
      c[i][1] = c[i][1]+a[i][0]*b[0][1];
      c[i][1] = c[i][1]+a[i][1]*b[1][1];
      c[i][1] = c[i][1]+a[i][2]*b[2][1];
      c[i][1] = c[i][1]+a[i][3]*b[3][1];
      k = 4;
      c[i][2] = 0;
      c[i][2] = c[i][2]+a[i][0]*b[0][2];
      c[i][2] = c[i][2]+a[i][1]*b[1][2];
      c[i][2] = c[i][2]+a[i][2]*b[2][2];
      c[i][2] = c[i][2]+a[i][3]*b[3][2];
      k = 4;
      c[i][3] = 0;
      c[i][3] = c[i][3]+a[i][0]*b[0][3];
      c[i][3] = c[i][3]+a[i][1]*b[1][3];
      c[i][3] = c[i][3]+a[i][2]*b[2][3];
      c[i][3] = c[i][3]+a[i][3]*b[3][3];
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int i, j, k;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15;
loop0:
   for(i = 0; i <= 3; i += 1) {
loop1:      ;
      c[i][0] = 0;
      F_0 = a[i][0]*b[0][0];
      c[i][0] = c[i][0]+F_0;
      F_1 = a[i][1]*b[1][0];
      c[i][0] = c[i][0]+F_1;
      F_2 = a[i][2]*b[2][0];
      c[i][0] = c[i][0]+F_2;
      F_3 = a[i][3]*b[3][0];
      c[i][0] = c[i][0]+F_3;
      k = 4;
      c[i][1] = 0;
      F_4 = a[i][0]*b[0][1];
      c[i][1] = c[i][1]+F_4;
      F_5 = a[i][1]*b[1][1];
      c[i][1] = c[i][1]+F_5;
      F_6 = a[i][2]*b[2][1];
      c[i][1] = c[i][1]+F_6;
      F_7 = a[i][3]*b[3][1];
      c[i][1] = c[i][1]+F_7;
      k = 4;
      c[i][2] = 0;
      F_8 = a[i][0]*b[0][2];
      c[i][2] = c[i][2]+F_8;
      F_9 = a[i][1]*b[1][2];
      c[i][2] = c[i][2]+F_9;
      F_10 = a[i][2]*b[2][2];
      c[i][2] = c[i][2]+F_10;
      F_11 = a[i][3]*b[3][2];
      c[i][2] = c[i][2]+F_11;
      k = 4;
      c[i][3] = 0;
      F_12 = a[i][0]*b[0][3];
      c[i][3] = c[i][3]+F_12;
      F_13 = a[i][1]*b[1][3];
      c[i][3] = c[i][3]+F_13;
      F_14 = a[i][2]*b[2][3];
      c[i][3] = c[i][3]+F_14;
      F_15 = a[i][3]*b[3][3];
      c[i][3] = c[i][3]+F_15;
      k = 4;
      j = 4;
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15;
   //PIPS generated variable
   int i0, k0, k1, k2, k3;
loop0:
   for(i0 = 0; i0 <= 3; i0 += 1) {
loop1:      ;
      c[i0][0] = 0;
      F_0 = a[i0][0]*b[0][0];
      c[i0][0] = c[i0][0]+F_0;
      F_1 = a[i0][1]*b[1][0];
      c[i0][0] = c[i0][0]+F_1;
      F_2 = a[i0][2]*b[2][0];
      c[i0][0] = c[i0][0]+F_2;
      F_3 = a[i0][3]*b[3][0];
      c[i0][0] = c[i0][0]+F_3;
      k0 = 4;
      c[i0][1] = 0;
      F_4 = a[i0][0]*b[0][1];
      c[i0][1] = c[i0][1]+F_4;
      F_5 = a[i0][1]*b[1][1];
      c[i0][1] = c[i0][1]+F_5;
      F_6 = a[i0][2]*b[2][1];
      c[i0][1] = c[i0][1]+F_6;
      F_7 = a[i0][3]*b[3][1];
      c[i0][1] = c[i0][1]+F_7;
      k1 = 4;
      c[i0][2] = 0;
      F_8 = a[i0][0]*b[0][2];
      c[i0][2] = c[i0][2]+F_8;
      F_9 = a[i0][1]*b[1][2];
      c[i0][2] = c[i0][2]+F_9;
      F_10 = a[i0][2]*b[2][2];
      c[i0][2] = c[i0][2]+F_10;
      F_11 = a[i0][3]*b[3][2];
      c[i0][2] = c[i0][2]+F_11;
      k2 = 4;
      c[i0][3] = 0;
      F_12 = a[i0][0]*b[0][3];
      c[i0][3] = c[i0][3]+F_12;
      F_13 = a[i0][1]*b[1][3];
      c[i0][3] = c[i0][3]+F_13;
      F_14 = a[i0][2]*b[2][3];
      c[i0][3] = c[i0][3]+F_14;
      F_15 = a[i0][3]*b[3][3];
      c[i0][3] = c[i0][3]+F_15;
      k3 = 4;
      j = 4;
   }
}

simdized code

void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0, k0, k1, k2, k3;
loop0:
   for(i0 = 0; i0 <= 3; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec80, vec90, vec100, vec110, vec120, vec130, vec140, vec150, vec160, vec170, vec180, vec190;
loop1:      ;
      c[i0][0] = 0;
      SIMD_LOAD_V4SF(vec20, &b[0][0]);
      SIMD_LOAD_BROADCAST_V4SF(vec10, a[i0][0]);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec50, &b[1][0]);
      SIMD_LOAD_BROADCAST_V4SF(vec40, a[i0][1]);
      SIMD_MULPS(vec30, vec40, vec50);
      SIMD_STORE_V4SF(vec30, &pdata1[0]);
      SIMD_LOAD_V4SF(vec80, &b[2][0]);
      SIMD_LOAD_BROADCAST_V4SF(vec70, a[i0][2]);
      SIMD_MULPS(vec60, vec70, vec80);
      SIMD_STORE_V4SF(vec60, &pdata2[0]);
      SIMD_LOAD_V4SF(vec110, &b[3][0]);
      SIMD_LOAD_BROADCAST_V4SF(vec100, a[i0][3]);
      SIMD_MULPS(vec90, vec100, vec110);
      SIMD_STORE_V4SF(vec90, &pdata3[0]);
      k0 = 4;
      c[i0][1] = 0;
      k1 = 4;
      c[i0][2] = 0;
      k2 = 4;
      c[i0][3] = 0;
      k3 = 4;
      j = 4;
      SIMD_LOAD_V4SF(vec120, &c[i0][0]);
      SIMD_ADDPS(vec120, vec120, vec00);
      SIMD_STORE_V4SF(vec120, &c[i0][0]);
      SIMD_ADDPS(vec140, vec120, vec30);
      SIMD_STORE_V4SF(vec140, &c[i0][0]);
      SIMD_ADDPS(vec160, vec140, vec60);
      SIMD_STORE_V4SF(vec160, &c[i0][0]);
      SIMD_ADDPS(vec180, vec160, vec90);
      SIMD_STORE_V4SF(vec180, &c[i0][0]);
   }
}
void Matrix_Mult(float a[4][4], float b[4][4], float c[4][4])
{
   int j;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {0, 0, 0, 0}, pdata2 = {0, 0, 0, 0}, pdata3 = {0, 0, 0, 0};
   //PIPS generated variable
   int i0, k0, k1, k2, k3;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0, vec50_0, vec60_0, vec70_0, vec80_0, vec90_0, vec100_0, vec110_0, vec120_0, vec130_0, vec140_0, vec150_0, vec160_0, vec170_0, vec180_0, vec190_0;
   SIMD_LOAD_V4SF(vec110_0, &b[3][0]);
   SIMD_LOAD_V4SF(vec80_0, &b[2][0]);
   SIMD_LOAD_V4SF(vec50_0, &b[1][0]);
   SIMD_LOAD_V4SF(vec20_0, &b[0][0]);
loop0:
   for(i0 = 0; i0 <= 3; i0 += 1) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_BROADCAST_V4SF(vec100_0, a[i0][3]);
      SIMD_LOAD_BROADCAST_V4SF(vec70_0, a[i0][2]);
      SIMD_LOAD_BROADCAST_V4SF(vec40_0, a[i0][1]);
      SIMD_LOAD_BROADCAST_V4SF(vec10_0, a[i0][0]);
loop1:      ;
      c[i0][0] = 0;
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);

      SIMD_MULPS(vec30_0, vec40_0, vec50_0);

      SIMD_MULPS(vec60_0, vec70_0, vec80_0);

      SIMD_MULPS(vec90_0, vec100_0, vec110_0);

      c[i0][1] = 0;

      c[i0][2] = 0;

      c[i0][3] = 0;

      SIMD_LOAD_V4SF(vec120_0, &c[i0][0]);


      SIMD_ADDPS(vec120_0, vec120_0, vec00_0);
      SIMD_STORE_V4SF(vec120_0, &c[i0][0]);
      SIMD_ADDPS(vec140_0, vec120_0, vec30_0);
      SIMD_STORE_V4SF(vec140_0, &c[i0][0]);
      SIMD_ADDPS(vec160_0, vec140_0, vec60_0);
      SIMD_STORE_V4SF(vec160_0, &c[i0][0]);
      SIMD_ADDPS(vec180_0, vec160_0, vec90_0);
      SIMD_STORE_V4SF(vec180_0, &c[i0][0]);
   }
}
seq-ok
sse-ok

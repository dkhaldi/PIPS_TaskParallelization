int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   int iz, iy, ix;
//		< is static > FALSE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   int Cz = 256;
//		< is static > FALSE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   int Cym = 256;
//		< is static > FALSE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   int Cxm = 256;
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
#pragma scop
#pragma live-out Bza, Hz
   for(iz = 0; iz <= Cz-1; iz += 1)
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//		<   tests   >
      for(iy = 0; iy <= Cym-1; iy += 1) {
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         for(ix = 0; ix <= Cxm-1; ix += 1) {
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            clf[iz][iy] = Ex[iz][iy][ix]-Ex[iz][iy+1][ix]+Ey[iz][iy][ix+1]-Ey[iz][iy][ix];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            tmp[iz][iy] = cymh[iy]/cyph[iy]*Bza[iz][iy][ix]-ch/cyph[iy]*clf[iz][iy];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            Hz[iz][iy][ix] = cxmh[ix]/cxph[ix]*Hz[iz][iy][ix]+mui*czp[iz]/cxph[ix]*tmp[iz][iy]-mui*czm[iz]/cxph[ix]*Bza[iz][iy][ix];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            Bza[iz][iy][ix] = tmp[iz][iy];
         }
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         clf[iz][iy] = Ex[iz][iy][Cxm]-Ex[iz][iy+1][Cxm]+Ry[iz][iy]-Ey[iz][iy][Cxm];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         tmp[iz][iy] = cymh[iy]/cyph[iy]*Bza[iz][iy][Cxm]-ch/cyph[iy]*clf[iz][iy];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         Hz[iz][iy][Cxm] = cxmh[Cxm]/cxph[Cxm]*Hz[iz][iy][Cxm]+mui*czp[iz]/cxph[Cxm]*tmp[iz][iy]-mui*czm[iz]/cxph[Cxm]*Bza[iz][iy][Cxm];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         Bza[iz][iy][Cxm] = tmp[iz][iy];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         for(ix = 0; ix <= Cxm-1; ix += 1) {
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            clf[iz][iy] = Ex[iz][Cym][ix]-Ax[iz][ix]+Ey[iz][Cym][ix+1]-Ey[iz][Cym][ix];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            tmp[iz][iy] = cymh[Cym]/cyph[iy]*Bza[iz][iy][ix]-ch/cyph[iy]*clf[iz][iy];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            Hz[iz][Cym][ix] = cxmh[ix]/cxph[ix]*Hz[iz][Cym][ix]+mui*czp[iz]/cxph[ix]*tmp[iz][iy]-mui*czm[iz]/cxph[ix]*Bza[iz][Cym][ix];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//                            0 <= 0`ix <= Cxm-1
//		<   tests   >
            Bza[iz][Cym][ix] = tmp[iz][iy];
         }
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         clf[iz][iy] = Ex[iz][Cym][Cxm]-Ax[iz][Cxm]+Ry[iz][Cym]-Ey[iz][Cym][Cxm];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         tmp[iz][iy] = cymh[Cym]/cyph[Cym]*Bza[iz][Cym][Cxm]-ch/cyph[Cym]*clf[iz][iy];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         Hz[iz][Cym][Cxm] = cxmh[Cxm]/cxph[Cxm]*Hz[iz][Cym][Cxm]+mui*czp[iz]/cxph[Cxm]*tmp[iz][iy]-mui*czm[iz]/cxph[Cxm]*Bza[iz][Cym][Cxm];
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   > 0 <= 0`iz <= Cz-1
//                            0 <= 0`iy <= Cym-1
//		<   tests   >
         Bza[iz][Cym][Cxm] = tmp[iz][iy];
      }
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`Cxm, 0`Cym, 0`Cz, 0`ix, 0`iy, 0`iz, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}


Initial code

short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   unsigned int i;
   for(i = 0; i < 8*(n/8)-1+1; i += 8) {
      seed = seed+a[i];
      seed = seed+a[i+1];
      seed = seed+a[i+2];
      seed = seed+a[i+3];
      seed = seed+a[i+4];
      seed = seed+a[i+5];
      seed = seed+a[i+6];
      seed = seed+a[i+7];
   }
   for(i = 8*(n/8); i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   unsigned int i;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(i = 0; i < 8*(n/8)-1+1; i += 8) {
      RED0[0] = RED0[0]+a[i];
      RED0[1] = RED0[1]+a[1+i];
      RED0[2] = RED0[2]+a[2+i];
      RED0[3] = RED0[3]+a[3+i];
      RED0[4] = RED0[4]+a[4+i];
      RED0[5] = RED0[5]+a[5+i];
      RED0[6] = RED0[6]+a[6+i];
      RED0[7] = RED0[7]+a[7+i];
   }
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+seed)))))));
   for(i = 8*(n/8); i < n; i += 1)
      seed = seed+a[i];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   unsigned int i0, i1;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(i0 = 0; i0 < 8*(n/8)-1+1; i0 += 8) {
      RED0[0] = RED0[0]+a[i0];
      RED0[1] = RED0[1]+a[1+i0];
      RED0[2] = RED0[2]+a[2+i0];
      RED0[3] = RED0[3]+a[3+i0];
      RED0[4] = RED0[4]+a[4+i0];
      RED0[5] = RED0[5]+a[5+i0];
      RED0[6] = RED0[6]+a[6+i0];
      RED0[7] = RED0[7]+a[7+i0];
   }
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(RED0[0]+seed)))))));
   for(i1 = 8*(n/8); i1 < n; i1 += 1)
      seed = seed+a[i1];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   unsigned int i0, i1;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   for(i0 = 0; i0 < 8*(n/8)-1+1; i0 += 8) {
      //PIPS:SAC generated v8hi vector(s)
      v8hi vec00, vec10;
      SIMD_LOAD_V8HI(vec10, &a[i0]);
      SIMD_LOAD_V8HI(vec00, &RED0[0]);
      SIMD_ADDW(vec00, vec00, vec10);
      SIMD_STORE_V8HI(vec00, &RED0[0]);
   }
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(seed+RED0[0])))))));
   for(i1 = 8*(n/8); i1 < n; i1 += 1)
      seed = seed+a[i1];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   unsigned int i0, i1;
   //PIPS generated variable
   v8hi vec00_0, vec10_0;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   SIMD_LOAD_V8HI(vec00_0, &RED0[0]);
   for(i0 = 0; i0 < 8*(n/8)-1+1; i0 += 8) {
      //PIPS:SAC generated v8hi vector(s)
      ;
      SIMD_LOAD_V8HI(vec10_0, &a[i0]);
      SIMD_ADDW(vec00_0, vec00_0, vec10_0);
   }
   SIMD_STORE_V8HI(vec00_0, &RED0[0]);
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(seed+RED0[0])))))));
   for(i1 = 8*(n/8); i1 < n; i1 += 1)
      seed = seed+a[i1];
   return seed;
}
short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   unsigned int i0, i1;
   //PIPS generated variable
   v8hi vec00_0, vec10_0;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   SIMD_LOAD_V8HI(vec00_0, &RED0[0]);
   for(i0 = 0; i0 < 8*(n/8)-1+1; i0 += 8) {
      //PIPS:SAC generated v8hi vector(s)
      SIMD_LOAD_V8HI(vec10_0, &a[i0]);
      SIMD_ADDW(vec00_0, vec00_0, vec10_0);
   }
   SIMD_STORE_V8HI(vec00_0, &RED0[0]);
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(seed+RED0[0])))))));
   for(i1 = 8*(n/8); i1 < n; i1 += 1)
      seed = seed+a[i1];
   return seed;
}

simdized code

short accumulate(unsigned int n, short a[n], short seed)
{
   //PIPS generated variable
   short RED0[8];
   //PIPS generated variable
   unsigned int i0, i1;
   //PIPS generated variable
   v8hi vec00_0, vec10_0;
   RED0[0] = 0;
   RED0[1] = 0;
   RED0[2] = 0;
   RED0[3] = 0;
   RED0[4] = 0;
   RED0[5] = 0;
   RED0[6] = 0;
   RED0[7] = 0;
   SIMD_LOAD_V8HI(vec00_0, &RED0[0]);
   for(i0 = 0; i0 < 8*(n/8)-1+1; i0 += 8) {
      //PIPS:SAC generated v8hi vector(s)
      SIMD_LOAD_V8HI(vec10_0, &a[i0]);
      SIMD_ADDW(vec00_0, vec00_0, vec10_0);
   }
   SIMD_STORE_V8HI(vec00_0, &RED0[0]);
   seed = RED0[7]+(RED0[6]+(RED0[5]+(RED0[4]+(RED0[3]+(RED0[2]+(RED0[1]+(seed+RED0[0])))))));
   for(i1 = 8*(n/8); i1 < n; i1 += 1)
      seed = seed+a[i1];
   return seed;
}


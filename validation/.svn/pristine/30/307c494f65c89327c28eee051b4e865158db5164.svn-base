
Initial code

void threshold(float data[128], float val)
{
   int i;
   for(i = 0; i <= 127; i += 1)
      if (data[i]>val)
         data[i] = val;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   for(i = 0; i <= 127; i += 1) {
      I_0 = data[i]>val;
      data[i] = I_0?val:data[i];
      ;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];

      for(i = 0; i <= 127; i += 1) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         ;
      }
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];
      for(i = 0; i <= 127; i += 4) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         I_0[i+1] = data[i+1]>val;
         data[i+1] = I_0[i+1]?val:data[i+1];
         I_0[i+2] = data[i+2]>val;
         data[i+2] = I_0[i+2]?val:data[i+2];
         I_0[i+3] = data[i+3]>val;
         data[i+3] = I_0[i+3]?val:data[i+3];
      }
      i = 128;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];
      for(i = 0; i <= 127; i += 4) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         I_0[1+i] = data[1+i]>val;
         data[1+i] = I_0[1+i]?val:data[1+i];
         I_0[2+i] = data[2+i]>val;
         data[2+i] = I_0[2+i]?val:data[2+i];
         I_0[3+i] = data[3+i]>val;
         data[3+i] = I_0[3+i]?val:data[3+i];
      }
      i = 128;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];
      for(i = 0; i <= 127; i += 4) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         I_0[1+i] = data[1+i]>val;
         data[1+i] = I_0[1+i]?val:data[1+i];
         I_0[2+i] = data[2+i]>val;
         data[2+i] = I_0[2+i]?val:data[2+i];
         I_0[3+i] = data[3+i]>val;
         data[3+i] = I_0[3+i]?val:data[3+i];
      }
      i = 128;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];
      for(i = 0; i <= 127; i += 4) {
         I_0[i] = data[i]>val;
         data[i] = I_0[i]?val:data[i];
         I_0[1+i] = data[1+i]>val;
         data[1+i] = I_0[1+i]?val:data[1+i];
         I_0[2+i] = data[2+i]>val;
         data[2+i] = I_0[2+i]?val:data[2+i];
         I_0[3+i] = data[3+i]>val;
         data[3+i] = I_0[3+i]?val:data[3+i];
      }
      i = 128;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0;
   {
      //PIPS generated variable
      int I_0[128];
      for(i = 0; i <= 127; i += 4) {
         //PIPS:SAC generated v4si vector(s)
         v4si vec00;
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec10, vec20, vec30;
         //PIPS:SAC generated v4si vector(s)
         v4si vec40;
         //PIPS:SAC generated v4sf vector(s)
         v4sf vec50;
         SIMD_LOAD_BROADCAST_V4SF(vec20, val);
         SIMD_LOAD_V4SF(vec10, &data[i]);
         SIMD_GTPS(vec00, vec10, vec20);
         SIMD_STORE_V4SI(vec00, &I_0[i]);
         SIMD_PHIPS(vec30, vec00, vec20, vec10);
         SIMD_STORE_V4SF(vec30, &data[i]);
      }
      i = 128;
   }
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0, I_0_0[128];
   //PIPS generated variable
   v4si vec00_0;
   //PIPS generated variable
   v4sf vec10_0, vec20_0, vec30_0;
   //PIPS generated variable
   v4si vec40_0;
   //PIPS generated variable
   v4sf vec50_0;
   SIMD_LOAD_BROADCAST_V4SF(vec20_0, val);
   //PIPS generated variable
   for(i = 0; i <= 127; i += 4) {
      //PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec10_0, &data[i]);
      SIMD_GTPS(vec00_0, vec10_0, vec20_0);
      SIMD_PHIPS(vec30_0, vec00_0, vec20_0, vec10_0);
      SIMD_STORE_V4SF(vec30_0, &data[i]);
      SIMD_STORE_V4SI(vec00_0, &I_0_0[i]);
   }
   i = 128;
}
void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0_0[128];
   //PIPS generated variable
   v4si vec00_0;
   //PIPS generated variable
   v4sf vec10_0, vec20_0, vec30_0;
   SIMD_LOAD_BROADCAST_V4SF(vec20_0, val);
   //PIPS generated variable
   for(i = 0; i <= 127; i += 4) {
      //PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec10_0, &data[i]);
      SIMD_GTPS(vec00_0, vec10_0, vec20_0);
      SIMD_PHIPS(vec30_0, vec00_0, vec20_0, vec10_0);
      SIMD_STORE_V4SF(vec30_0, &data[i]);
      SIMD_STORE_V4SI(vec00_0, &I_0_0[i]);
   }
   i = 128;
}

simdized code

void threshold(float data[128], float val)
{
   int i;
   //PIPS generated variable
   int I_0_0[128];
   //PIPS generated variable
   v4si vec00_0;
   //PIPS generated variable
   v4sf vec10_0, vec20_0, vec30_0;
   SIMD_LOAD_BROADCAST_V4SF(vec20_0, val);
   //PIPS generated variable
   for(i = 0; i <= 127; i += 4) {
      //PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)PIPS:SAC generated v4si vector(s)PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec10_0, &data[i]);
      SIMD_GTPS(vec00_0, vec10_0, vec20_0);
      SIMD_PHIPS(vec30_0, vec00_0, vec20_0, vec10_0);
      SIMD_STORE_V4SF(vec30_0, &data[i]);
      SIMD_STORE_V4SI(vec00_0, &I_0_0[i]);
   }
   i = 128;
}

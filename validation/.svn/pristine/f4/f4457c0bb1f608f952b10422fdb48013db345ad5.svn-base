
Source code with proper effects

int binary_or01()
{
//             <    is written>: ret
   int ret = 1;                                                         /*0014*/
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: ret stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: ret __IO_EFFECTS:LUNS[2]

   ret |= foo();                                                        /*0016*/
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: ret stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: ret __IO_EFFECTS:LUNS[2]

   ret = ret||foo();                                                    /*0018*/
}

Source code with cumulated effects

//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: __IO_EFFECTS:LUNS[2]
int binary_or01()
{
//             <    is written>: ret
   int ret = 1;                                                         /*0014*/
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: ret stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: ret __IO_EFFECTS:LUNS[2]

   ret |= foo();                                                        /*0016*/
//             <may be read   >: stderr[0]
//             <may be written>: stderr[0]
//             <    is read   >: ret stderr __IO_EFFECTS:LUNS[2]
//             <    is written>: ret __IO_EFFECTS:LUNS[2]

   ret = ret||foo();                                                    /*0018*/
}

Source code with transformers for "binary_or01"


//  T() {}

int binary_or01()
{

//  T(ret) {ret==1}

   int ret = 1;                                                         /*0014*/

//  T(ret) {}


   ret |= foo();                                                        /*0016*/

//  T(ret) {}


   ret = ret||foo();                                                    /*0018*/
}

Source code with preconditions for "binary_or01"


//  P() {}

int binary_or01()
{

//  P() {}

   int ret = 1;                                                         /*0014*/

//  P(ret) {ret==1}


   ret |= foo();                                                        /*0016*/

//  P(ret) {}


   ret = ret||foo();                                                    /*0018*/
}

Warnings

(activate_phase) Rule `C_PARSER' already active
PROGRAM_PRECONDITION[] (get_main_entity_name) No main function found, use "binary_or01" instead.

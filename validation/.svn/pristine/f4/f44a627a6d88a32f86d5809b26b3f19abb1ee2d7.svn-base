setenv WKS simple_loop
delete $WKS

setproperty ABORT_ON_USER_ERROR TRUE

shell rm -rf .$WKS; mkdir .$WKS
shell cp $WKS.c include/p4a_stubs.c .$WKS
# Instrument the source for include tracking:
shell sed -i -r -e 's,#include\s+<([^>]+)>,//pips_begin <\1>\n#include<\1>\n//pips_end <\1>,g' .$WKS/$WKS.c
shell sed -i -r -e 's,#include\s+<([^>]+)>,//pips_begin <\1>\n#include<\1>\n//pips_end <\1>,g' .$WKS/p4a_stubs.c

create $WKS .$WKS/$WKS.c .$WKS/p4a_stubs.c

setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER TRUE
setproperty KERNEL_LOAD_STORE_VAR_PREFIX ""

activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL

# Loop normalize for the C language and GPU friendly
setproperty LOOP_NORMALIZE_ONE_INCREMENT TRUE
setproperty LOOP_NORMALIZE_LOWER_BOUND 0
# It is legal in the following by construction:
setproperty LOOP_NORMALIZE_SKIP_INDEX_SIDE_EFFECT TRUE
# If we do this here, the side effect at the end of a loop on the index
# break paramemstorellelization. It would require to apply USE_DEF_ELIM...
apply LOOP_NORMALIZE[%ALLFUNC]

apply PRIVATIZE_MODULE[%ALLFUNC]

activate PRINT_CODE

apply COARSE_GRAIN_PARALLELIZATION[main]

echo
echo "After COARSE_GRAIN_PARALLELIZATION"
echo
display PRINTED_FILE[main]

apply GPU_IFY[main]

echo
echo "After GPU_IFY"
echo
display PRINTED_FILE[main]
display PRINTED_FILE[p4a_launcher_main]
display PRINTED_FILE[p4a_wrapper_main]
display PRINTED_FILE[p4a_kernel_main]


setproperty ISOLATE_STATEMENT_EVEN_NON_LOCAL TRUE
apply KERNEL_LOAD_STORE[p4a_launcher_main]
echo
echo "After KERNEL_LOAD_STORE"
echo
display PRINTED_FILE[main]
display PRINTED_FILE[p4a_launcher_main]
display PRINTED_FILE[p4a_wrapper_main]
display PRINTED_FILE[p4a_kernel_main]


apply GPU_LOOP_NEST_ANNOTATE[p4a_launcher_main]

apply UNSPLIT

# Recover crudely the headers:
shell sed -i -r -e 's,//pips_begin <([^>]+)>,#include <\1>\n//pips_begin <\1>,g' $WKS.database/Src/$WKS.c
shell grep '//pips_begin' $WKS.database/Src/$WKS.c | sed -e 's,//pips_begin ,,g' | while read include ; do sed -i -r -e "/\/\/pips_begin $include/,/\/\/pips_end $include/ d" $WKS.database/Src/$WKS.c ; done

shell sed -i -r -e 's,//pips_begin <([^>]+)>,#include <\1>\n//pips_begin <\1>,g' $WKS.database/Src/p4a_stubs.c
shell grep '//pips_begin' $WKS.database/Src/p4a_stubs.c | sed -e 's,//pips_begin ,,g' | while read include ; do sed -i -r -e "/\/\/pips_begin $include/,/\/\/pips_end $include/ d" $WKS.database/Src/p4a_stubs.c ; done

echo [after unsplit and recovering]
shell cat $WKS.database/Src/simple_loop.c

shell gcc -o $WKS.database/Src/$WKS $WKS.database/Src/*.c

close
#delete $WKS
quit

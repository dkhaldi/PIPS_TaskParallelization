
Init Code

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

TASK_MAPPING

void main(int argc, char *argv[])
{
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

VARIABLE_REPLICATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/

#pragma distributed on_cluster=0
   InitHarris(in);                                                      /*0057*/
   /* Now we run the Harris procedure */
   
   //Sobel
#pragma distributed on_cluster=0
   SobelX(Gx, in);                                                      /*0061*/
#pragma distributed on_cluster=1
   SobelY(Gy, in);                                                      /*0062*/
   
   //Multiply
#pragma distributed on_cluster=0
   MultiplY(Ixx, Gx, Gx);                                               /*0065*/
#pragma distributed on_cluster=1
   MultiplY(Iyy, Gy, Gy);                                               /*0066*/
#pragma distributed on_cluster=2
   MultiplY(Ixy, Gx, Gy);                                               /*0067*/
   
   //Gauss
#pragma distributed on_cluster=0
   Gauss(Sxx, Ixx);                                                     /*0070*/
#pragma distributed on_cluster=1
   Gauss(Syy, Iyy);                                                     /*0071*/
#pragma distributed on_cluster=2
   Gauss(Sxy, Ixy);                                                     /*0072*/
   
   //Coarsity
#pragma distributed on_cluster=0
   CoarsitY(out, Sxx, Syy, Sxy);                                        /*0075*/
}

COPY_VALUE_OF_WRITE

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/
#pragma distributed on_cluster=0
   {

      InitHarris(in);                                                   /*0057*/
      __in_0[*] = in[*];
      __in_1[*] = in[*];
      __in_2[*] = in[*];
      __in_3[*] = in[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(Gx, in);                                                   /*0061*/
      __Gx_0[*] = Gx[*];
      __Gx_1[*] = Gx[*];
      __Gx_2[*] = Gx[*];
      __Gx_3[*] = Gx[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(Gy, in);                                                   /*0062*/
      __Gy_0[*] = Gy[*];
      __Gy_1[*] = Gy[*];
      __Gy_2[*] = Gy[*];
      __Gy_3[*] = Gy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(Ixx, Gx, Gx);                                            /*0065*/
      __Ixx_0[*] = Ixx[*];
      __Ixx_1[*] = Ixx[*];
      __Ixx_2[*] = Ixx[*];
      __Ixx_3[*] = Ixx[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(Iyy, Gy, Gy);                                            /*0066*/
      __Iyy_0[*] = Iyy[*];
      __Iyy_1[*] = Iyy[*];
      __Iyy_2[*] = Iyy[*];
      __Iyy_3[*] = Iyy[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(Ixy, Gx, Gy);                                            /*0067*/
      __Ixy_0[*] = Ixy[*];
      __Ixy_1[*] = Ixy[*];
      __Ixy_2[*] = Ixy[*];
      __Ixy_3[*] = Ixy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(Sxx, Ixx);                                                  /*0070*/
      __Sxx_0[*] = Sxx[*];
      __Sxx_1[*] = Sxx[*];
      __Sxx_2[*] = Sxx[*];
      __Sxx_3[*] = Sxx[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(Syy, Iyy);                                                  /*0071*/
      __Syy_0[*] = Syy[*];
      __Syy_1[*] = Syy[*];
      __Syy_2[*] = Syy[*];
      __Syy_3[*] = Syy[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(Sxy, Ixy);                                                  /*0072*/
      __Sxy_0[*] = Sxy[*];
      __Sxy_1[*] = Sxy[*];
      __Sxy_2[*] = Sxy[*];
      __Sxy_3[*] = Sxy[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(out, Sxx, Syy, Sxy);                                     /*0075*/
      __out_0[*] = out[*];
      __out_1[*] = out[*];
      __out_2[*] = out[*];
      __out_3[*] = out[*];
   }
}

ELIMINATE_ORIGINAL_VARIABLES

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
   float Gx[1024*1024], Gy[1024*1024], Ixx[1024*1024], Iyy[1024*1024], Ixy[1024*1024], Sxx[1024*1024], Sxy[1024*1024], Syy[1024*1024], in[1024*1024], out[1024*1024];            /*0055*/
#pragma distributed on_cluster=0
   {

      InitHarris(__in_0);                                               /*0057*/
      __in_0[*] = __in_0[*];
      __in_1[*] = __in_0[*];
      __in_2[*] = __in_0[*];
      __in_3[*] = __in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__Gx_0, __in_0);                                           /*0061*/
      __Gx_0[*] = __Gx_0[*];
      __Gx_1[*] = __Gx_0[*];
      __Gx_2[*] = __Gx_0[*];
      __Gx_3[*] = __Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__Gy_1, __in_1);                                           /*0062*/
      __Gy_0[*] = __Gy_1[*];
      __Gy_1[*] = __Gy_1[*];
      __Gy_2[*] = __Gy_1[*];
      __Gy_3[*] = __Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__Ixx_0, __Gx_0, __Gx_0);                                /*0065*/
      __Ixx_0[*] = __Ixx_0[*];
      __Ixx_1[*] = __Ixx_0[*];
      __Ixx_2[*] = __Ixx_0[*];
      __Ixx_3[*] = __Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__Iyy_1, __Gy_1, __Gy_1);                                /*0066*/
      __Iyy_0[*] = __Iyy_1[*];
      __Iyy_1[*] = __Iyy_1[*];
      __Iyy_2[*] = __Iyy_1[*];
      __Iyy_3[*] = __Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__Ixy_2, __Gx_2, __Gy_2);                                /*0067*/
      __Ixy_0[*] = __Ixy_2[*];
      __Ixy_1[*] = __Ixy_2[*];
      __Ixy_2[*] = __Ixy_2[*];
      __Ixy_3[*] = __Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__Sxx_0, __Ixx_0);                                          /*0070*/
      __Sxx_0[*] = __Sxx_0[*];
      __Sxx_1[*] = __Sxx_0[*];
      __Sxx_2[*] = __Sxx_0[*];
      __Sxx_3[*] = __Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__Syy_1, __Iyy_1);                                          /*0071*/
      __Syy_0[*] = __Syy_1[*];
      __Syy_1[*] = __Syy_1[*];
      __Syy_2[*] = __Syy_1[*];
      __Syy_3[*] = __Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__Sxy_2, __Ixy_2);                                          /*0072*/
      __Sxy_0[*] = __Sxy_2[*];
      __Sxy_1[*] = __Sxy_2[*];
      __Sxy_2[*] = __Sxy_2[*];
      __Sxy_3[*] = __Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__out_0, __Sxx_0, __Syy_0, __Sxy_0);                     /*0075*/
      __out_0[*] = __out_0[*];
      __out_1[*] = __out_0[*];
      __out_2[*] = __out_0[*];
      __out_3[*] = __out_0[*];
   }
}

CLEAN_DECLARATIONS

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {

      InitHarris(__in_0);                                               /*0057*/
      __in_0[*] = __in_0[*];
      __in_1[*] = __in_0[*];
      __in_2[*] = __in_0[*];
      __in_3[*] = __in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__Gx_0, __in_0);                                           /*0061*/
      __Gx_0[*] = __Gx_0[*];
      __Gx_1[*] = __Gx_0[*];
      __Gx_2[*] = __Gx_0[*];
      __Gx_3[*] = __Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__Gy_1, __in_1);                                           /*0062*/
      __Gy_0[*] = __Gy_1[*];
      __Gy_1[*] = __Gy_1[*];
      __Gy_2[*] = __Gy_1[*];
      __Gy_3[*] = __Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__Ixx_0, __Gx_0, __Gx_0);                                /*0065*/
      __Ixx_0[*] = __Ixx_0[*];
      __Ixx_1[*] = __Ixx_0[*];
      __Ixx_2[*] = __Ixx_0[*];
      __Ixx_3[*] = __Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__Iyy_1, __Gy_1, __Gy_1);                                /*0066*/
      __Iyy_0[*] = __Iyy_1[*];
      __Iyy_1[*] = __Iyy_1[*];
      __Iyy_2[*] = __Iyy_1[*];
      __Iyy_3[*] = __Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__Ixy_2, __Gx_2, __Gy_2);                                /*0067*/
      __Ixy_0[*] = __Ixy_2[*];
      __Ixy_1[*] = __Ixy_2[*];
      __Ixy_2[*] = __Ixy_2[*];
      __Ixy_3[*] = __Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__Sxx_0, __Ixx_0);                                          /*0070*/
      __Sxx_0[*] = __Sxx_0[*];
      __Sxx_1[*] = __Sxx_0[*];
      __Sxx_2[*] = __Sxx_0[*];
      __Sxx_3[*] = __Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__Syy_1, __Iyy_1);                                          /*0071*/
      __Syy_0[*] = __Syy_1[*];
      __Syy_1[*] = __Syy_1[*];
      __Syy_2[*] = __Syy_1[*];
      __Syy_3[*] = __Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__Sxy_2, __Ixy_2);                                          /*0072*/
      __Sxy_0[*] = __Sxy_2[*];
      __Sxy_1[*] = __Sxy_2[*];
      __Sxy_2[*] = __Sxy_2[*];
      __Sxy_3[*] = __Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__out_0, __Sxx_0, __Syy_0, __Sxy_0);                     /*0075*/
      __out_0[*] = __out_0[*];
      __out_1[*] = __out_0[*];
      __out_2[*] = __out_0[*];
      __out_3[*] = __out_0[*];
   }
}

IDENTITY_ELIMINATION

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {

      InitHarris(__in_0);                                               /*0057*/

      __in_1[*] = __in_0[*];
      __in_2[*] = __in_0[*];
      __in_3[*] = __in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__Gx_0, __in_0);                                           /*0061*/

      __Gx_1[*] = __Gx_0[*];
      __Gx_2[*] = __Gx_0[*];
      __Gx_3[*] = __Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__Gy_1, __in_1);                                           /*0062*/
      __Gy_0[*] = __Gy_1[*];

      __Gy_2[*] = __Gy_1[*];
      __Gy_3[*] = __Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__Ixx_0, __Gx_0, __Gx_0);                                /*0065*/

      __Ixx_1[*] = __Ixx_0[*];
      __Ixx_2[*] = __Ixx_0[*];
      __Ixx_3[*] = __Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__Iyy_1, __Gy_1, __Gy_1);                                /*0066*/
      __Iyy_0[*] = __Iyy_1[*];

      __Iyy_2[*] = __Iyy_1[*];
      __Iyy_3[*] = __Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__Ixy_2, __Gx_2, __Gy_2);                                /*0067*/
      __Ixy_0[*] = __Ixy_2[*];
      __Ixy_1[*] = __Ixy_2[*];

      __Ixy_3[*] = __Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__Sxx_0, __Ixx_0);                                          /*0070*/

      __Sxx_1[*] = __Sxx_0[*];
      __Sxx_2[*] = __Sxx_0[*];
      __Sxx_3[*] = __Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__Syy_1, __Iyy_1);                                          /*0071*/
      __Syy_0[*] = __Syy_1[*];

      __Syy_2[*] = __Syy_1[*];
      __Syy_3[*] = __Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__Sxy_2, __Ixy_2);                                          /*0072*/
      __Sxy_0[*] = __Sxy_2[*];
      __Sxy_1[*] = __Sxy_2[*];

      __Sxy_3[*] = __Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__out_0, __Sxx_0, __Syy_0, __Sxy_0);                     /*0075*/

      __out_1[*] = __out_0[*];
      __out_2[*] = __out_0[*];
      __out_3[*] = __out_0[*];
   }
}


Final Code

void main(int argc, char *argv[])
{
   // Generated by Pass VARIABLE_REPLICATION
   float __Gx_0[1024*1024], __Gx_1[1024*1024], __Gx_2[1024*1024], __Gx_3[1024*1024], __Gy_0[1024*1024], __Gy_1[1024*1024], __Gy_2[1024*1024], __Gy_3[1024*1024], __Ixx_0[1024*1024], __Ixx_1[1024*1024], __Ixx_2[1024*1024], __Ixx_3[1024*1024], __Iyy_0[1024*1024], __Iyy_1[1024*1024], __Iyy_2[1024*1024], __Iyy_3[1024*1024], __Ixy_0[1024*1024], __Ixy_1[1024*1024], __Ixy_2[1024*1024], __Ixy_3[1024*1024], __Sxx_0[1024*1024], __Sxx_1[1024*1024], __Sxx_2[1024*1024], __Sxx_3[1024*1024], __Sxy_0[1024*1024], __Sxy_1[1024*1024], __Sxy_2[1024*1024], __Sxy_3[1024*1024], __Syy_0[1024*1024], __Syy_1[1024*1024], __Syy_2[1024*1024], __Syy_3[1024*1024], __in_0[1024*1024], __in_1[1024*1024], __in_2[1024*1024], __in_3[1024*1024], __out_0[1024*1024], __out_1[1024*1024], __out_2[1024*1024], __out_3[1024*1024];
#pragma distributed on_cluster=0
   {

      InitHarris(__in_0);

      __in_1[*] = __in_0[*];
      __in_2[*] = __in_0[*];
      __in_3[*] = __in_0[*];
   }
#pragma distributed on_cluster=0
   {
      /* Now we run the Harris procedure */
      
      //Sobel
      SobelX(__Gx_0, __in_0);

      __Gx_1[*] = __Gx_0[*];
      __Gx_2[*] = __Gx_0[*];
      __Gx_3[*] = __Gx_0[*];
   }
#pragma distributed on_cluster=1
   {
      SobelY(__Gy_1, __in_1);
      __Gy_0[*] = __Gy_1[*];

      __Gy_2[*] = __Gy_1[*];
      __Gy_3[*] = __Gy_1[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Multiply
      MultiplY(__Ixx_0, __Gx_0, __Gx_0);

      __Ixx_1[*] = __Ixx_0[*];
      __Ixx_2[*] = __Ixx_0[*];
      __Ixx_3[*] = __Ixx_0[*];
   }
#pragma distributed on_cluster=1
   {
      MultiplY(__Iyy_1, __Gy_1, __Gy_1);
      __Iyy_0[*] = __Iyy_1[*];

      __Iyy_2[*] = __Iyy_1[*];
      __Iyy_3[*] = __Iyy_1[*];
   }
#pragma distributed on_cluster=2
   {
      MultiplY(__Ixy_2, __Gx_2, __Gy_2);
      __Ixy_0[*] = __Ixy_2[*];
      __Ixy_1[*] = __Ixy_2[*];

      __Ixy_3[*] = __Ixy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Gauss
      Gauss(__Sxx_0, __Ixx_0);

      __Sxx_1[*] = __Sxx_0[*];
      __Sxx_2[*] = __Sxx_0[*];
      __Sxx_3[*] = __Sxx_0[*];
   }
#pragma distributed on_cluster=1
   {
      Gauss(__Syy_1, __Iyy_1);
      __Syy_0[*] = __Syy_1[*];

      __Syy_2[*] = __Syy_1[*];
      __Syy_3[*] = __Syy_1[*];
   }
#pragma distributed on_cluster=2
   {
      Gauss(__Sxy_2, __Ixy_2);
      __Sxy_0[*] = __Sxy_2[*];
      __Sxy_1[*] = __Sxy_2[*];

      __Sxy_3[*] = __Sxy_2[*];
   }
#pragma distributed on_cluster=0
   {
      
      //Coarsity
      CoarsitY(__out_0, __Sxx_0, __Syy_0, __Sxy_0);

      __out_1[*] = __out_0[*];
      __out_2[*] = __out_0[*];
      __out_3[*] = __out_0[*];
   }
}

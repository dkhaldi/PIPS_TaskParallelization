#
# Parsed printed file
#
void Run()
{
   int _u_lx = 400;
   int _u_ly = 100;
   double _tmpxx0 = (double) _u_lx/5;
   double _u_obst_x = _tmpxx0+1;
   double _u_x[400][100];
   {
      int lv1, lv2;
      for (lv1 = 0;lv1<=399;lv1 += 1)
         for (lv2 = 0;lv2<=99;lv2 += 1)
            _u_x[lv1][lv2] = 0.0;
   }
   double _tmpxx8[400][100];
   {
      int lv1, lv2;
      400==400&&100==100?(void) 0:__assert_fail("400 == 400 && 100 == 100", ".cold.tmp/cylinder.cold-pre-p4a.c", 118, (const char *) 0);
      for (lv1 = 0;lv1<=399;lv1 += 1)
         for (lv2 = 0;lv2<=99;lv2 += 1)
            _tmpxx8[lv1][lv2] = _u_x[lv1][lv2]-_u_obst_x;
   }
   {
      int lv1, lv2;
      for (lv1 = 0;lv1<=399;lv1 += 1)
         for (lv2 = 0;lv2<=99;lv2 += 1)
            printf("%f", _tmpxx8[lv1][lv2]);
   }
}
#
# Printed file
#
void Run()
{
   int _u_lx = 400;
   int _u_ly = 100;
   double _tmpxx0 = (double) _u_lx/5;
   double _u_obst_x = _tmpxx0+1;
   double _u_x[400][100];
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _u_x[lv1][lv2] = 0.0;
   }
   double _tmpxx8[400][100];
   {
      int lv1, lv2;
      400==400&&100==100?(void) 0:__assert_fail("400 == 400 && 100 == 100", ".cold.tmp/cylinder.cold-pre-p4a.c", 118, (const char *) 0);
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _tmpxx8[lv1][lv2] = _u_x[lv1][lv2]-_u_obst_x;
   }
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            printf("%f", _tmpxx8[lv1][lv2]);
   }
}
#
# Cumulated effects
#
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
void Run()
{
//             <    is written>: _u_lx
   int _u_lx = 400;
//             <    is written>: _u_ly
   int _u_ly = 100;
//             <    is read   >: _u_lx
//             <    is written>: _tmpxx0
   double _tmpxx0 = (double) _u_lx/5;
//             <    is read   >: _tmpxx0
//             <    is written>: _u_obst_x
   double _u_obst_x = _tmpxx0+1;
   double _u_x[400][100];
   {
      int lv1, lv2;
//             <may be written>: _u_x[*][*]
//             <    is read   >: 0`1`lv1 0`1`lv2
//             <    is written>: 0`1`lv1 0`1`lv2
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
//             <may be written>: _u_x[*][*]
//             <    is read   >: 0`1`lv1 0`1`lv2
//             <    is written>: 0`1`lv2
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
//             <may be written>: _u_x[*][*]
//             <    is read   >: 0`1`lv1 0`1`lv2
            _u_x[lv1][lv2] = 0.0;
   }
   double _tmpxx8[400][100];
   {
      int lv1, lv2;
      400==400&&100==100?(void) 0:__assert_fail("400 == 400 && 100 == 100", ".cold.tmp/cylinder.cold-pre-p4a.c", 118, (const char *) 0);
//             <may be read   >: _u_x[*][*]
//             <may be written>: _tmpxx8[*][*]
//             <    is read   >: _u_obst_x 0`2`lv1 0`2`lv2
//             <    is written>: 0`2`lv1 0`2`lv2
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
//             <may be read   >: _u_x[*][*]
//             <may be written>: _tmpxx8[*][*]
//             <    is read   >: _u_obst_x 0`2`lv1 0`2`lv2
//             <    is written>: 0`2`lv2
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
//             <may be read   >: _u_x[*][*]
//             <may be written>: _tmpxx8[*][*]
//             <    is read   >: _u_obst_x 0`2`lv1 0`2`lv2
            _tmpxx8[lv1][lv2] = _u_x[lv1][lv2]-_u_obst_x;
   }
   {
      int lv1, lv2;
//             <may be read   >: _tmpxx8[*][*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: 0`3`lv1 0`3`lv2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: 0`3`lv1 0`3`lv2 __IO_EFFECTS:LUNS[1]
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
//             <may be read   >: _tmpxx8[*][*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: 0`3`lv1 0`3`lv2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: 0`3`lv2 __IO_EFFECTS:LUNS[1]
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
//             <may be read   >: _tmpxx8[*][*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: 0`3`lv1 0`3`lv2 stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("%f", _tmpxx8[lv1][lv2]);
   }
}
#
# simplify control
#
void Run()
{
   int _u_lx = 400;
   int _u_ly = 100;
   double _tmpxx0 = (double) _u_lx/5;
   double _u_obst_x = _tmpxx0+1;
   double _u_x[400][100];
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _u_x[lv1][lv2] = 0.0;
   }
   double _tmpxx8[400][100];
   {
      int lv1, lv2;
      (void) 0;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _tmpxx8[lv1][lv2] = _u_x[lv1][lv2]-_u_obst_x;
   }
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            printf("%f", _tmpxx8[lv1][lv2]);
   }
}
#
# simplify control a second time
#
void Run()
{
   int _u_lx = 400;
   int _u_ly = 100;
   double _tmpxx0 = (double) _u_lx/5;
   double _u_obst_x = _tmpxx0+1;
   double _u_x[400][100];
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _u_x[lv1][lv2] = 0.0;
   }
   double _tmpxx8[400][100];
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            _tmpxx8[lv1][lv2] = _u_x[lv1][lv2]-_u_obst_x;
   }
   {
      int lv1, lv2;
      for(lv1 = 0; lv1 <= 399; lv1 += 1)
         for(lv2 = 0; lv2 <= 99; lv2 += 1)
            printf("%f", _tmpxx8[lv1][lv2]);
   }
}

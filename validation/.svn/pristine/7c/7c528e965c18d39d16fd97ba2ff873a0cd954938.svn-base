
POINTS TO


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY


// Points To OUT:
// p -> _p_2[0] , EXACT

void pointer03(int n, float *p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY

   p!=0?(void) 0:__assert_fail("p!=0", "./pointer03.c", 10, __func__);

// Points To:
// p -> _p_2[0] , EXACT

   int i;

// Points To:
// p -> _p_2[0] , EXACT

   float *r = p;

// Points To:
// p -> _p_2[0] , EXACT
// r -> _p_2[0] , EXACT


   for(i = 0; i <= n-1; i += 1)

// Points To:
// p -> _p_2[0] , EXACT
// r -> _p_2[0] , EXACT

      p[i] = r[i];
}

Proper effects with points-to

void pointer03(int n, float *p)
{
//             <may be read   >: __func__
//             <may be referenced>: __func__
//             <    is read   >: p
//             <    is referenced>: p
   p!=0?(void) 0:__assert_fail("p!=0", "./pointer03.c", 10, __func__);
//             <    is declared>: i
   int i;
//             <    is read   >: p
//             <    is written>: r
//             <    is referenced>: p r
//             <    is declared>: r
   float *r = p;
//             <    is read   >: n
//             <    is written>: i
//             <    is referenced>: i n

   for(i = 0; i <= n-1; i += 1)
//             <    is read   >: _p_2[i] i n p r
//             <    is written>: _p_2[i]
//             <    is referenced>: i n p r
      p[i] = r[i];
}

Parallel code

void pointer03(int n, float *p)
{
   p!=0?(void) 0:__assert_fail("p!=0", "./pointer03.c", 10, __func__);
   int i;
   float *r = p;

   forall(i = 0; i <= n-1; i += 1)
      p[i] = r[i];
}

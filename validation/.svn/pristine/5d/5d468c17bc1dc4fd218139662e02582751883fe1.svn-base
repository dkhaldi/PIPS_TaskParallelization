
Points-to for "foo"


// Points To IN:
// _p2_2[0] -> *NULL* , MAY
// _p2_2[0] -> _p2_2_2[0][0] , MAY
// p1 -> *NULL* , MAY
// p1 -> _p1_1[0] , MAY
// p2 -> *NULL* , MAY
// p2 -> _p2_2[0] , MAY
// q3 -> *NULL* , MAY
// q3 -> _q3_3[0] , MAY
// r4 -> *NULL* , MAY
// r4 -> _r4_4[0] , MAY


// Points To OUT:
// _p1_1[0] -> *NULL* , MAY
// _p1_1[0] -> _q3_3[0] , MAY
// _p2_2[0] -> *NULL* , MAY
// _p2_2[0] -> _p2_2_2[0][0] , MAY
// _p2_2_2[0][0] -> *NULL* , MAY
// _p2_2_2[0][0] -> _r4_4[0] , MAY
// p1 -> _p1_1[0] , EXACT
// p2 -> _p2_2[0] , EXACT
// q3 -> *NULL* , MAY
// q3 -> _q3_3[0] , MAY
// r4 -> *NULL* , MAY
// r4 -> _r4_4[0] , MAY

void foo(int ***p1, int ***p2, int **q3, int *r4)
{

// Points To: none

   int **l;

// Points To:
// _p2_2[0] -> *NULL* , MAY
// _p2_2[0] -> _p2_2_2[0][0] , MAY
// l -> undefined , EXACT
// p2 -> *NULL* , MAY
// p2 -> _p2_2[0] , MAY

   l = *p2;

// Points To:
// _p2_2[0] -> *NULL* , MAY
// _p2_2[0] -> _p2_2_2[0][0] , MAY
// l -> *NULL* , MAY
// l -> _p2_2_2[0][0] , MAY
// p1 -> *NULL* , MAY
// p1 -> _p1_1[0] , MAY
// p2 -> _p2_2[0] , EXACT
// q3 -> *NULL* , MAY
// q3 -> _q3_3[0] , MAY

   *p1 = q3;

// Points To:
// _p1_1[0] -> *NULL* , MAY
// _p1_1[0] -> _q3_3[0] , MAY
// _p2_2[0] -> *NULL* , MAY
// _p2_2[0] -> _p2_2_2[0][0] , MAY
// l -> *NULL* , MAY
// l -> _p2_2_2[0][0] , MAY
// p1 -> _p1_1[0] , EXACT
// p2 -> _p2_2[0] , EXACT
// q3 -> *NULL* , MAY
// q3 -> _q3_3[0] , MAY
// r4 -> *NULL* , MAY
// r4 -> _r4_4[0] , MAY

   *l = r4;
}

Proper effects for "foo"

void foo(int ***p1, int ***p2, int **q3, int *r4)
{
   int **l;
//             <    is read   >: _p2_2[0] p2
//             <    is written>: l
   l = *p2;
//             <    is read   >: p1 q3
//             <    is written>: _p1_1[0]
   *p1 = q3;
//             <    is read   >: l r4
//             <    is written>: _p2_2_2[0][0]
   *l = r4;
}

Cumulated effects for "foo"

//             <    is read   >: _p2_2[0] p1 p2 q3 r4
//             <    is written>: _p1_1[0] _p2_2_2[0][0]
void foo(int ***p1, int ***p2, int **q3, int *r4)
{
   int **l;
//             <    is read   >: _p2_2[0] p2
//             <    is written>: l
   l = *p2;
//             <    is read   >: p1 q3
//             <    is written>: _p1_1[0]
   *p1 = q3;
//             <    is read   >: l r4
//             <    is written>: _p2_2_2[0][0]
   *l = r4;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int ***a1;

// Points To:
// a1 -> undefined , EXACT

   int ***a2;


// Points To:
// a1 -> undefined , EXACT
// a2 -> undefined , EXACT

   int **b3;

// Points To:
// a1 -> undefined , EXACT
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT

   int *c4;

// Points To:
// a1 -> undefined , EXACT
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT


   a1 = (int ***) malloc(sizeof(int * *));

// Points To:
// *HEAP*_l_24 -> undefined , EXACT
// a1 -> *HEAP*_l_24 , MAY
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT

   *a1 = (int **) malloc(sizeof(int *));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> undefined , EXACT
// a1 -> *HEAP*_l_24 , MAY
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT

   **a1 = (int *) malloc(sizeof(int));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT


   ***a1 = 1;

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> undefined , EXACT
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT


   a2 = (int ***) malloc(sizeof(int * *));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> undefined , EXACT
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT

   *a2 = *a1;

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> undefined , EXACT
// c4 -> undefined , EXACT


   b3 = (int **) malloc(sizeof(int *));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> undefined , EXACT
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> undefined , EXACT

   *b3 = (int *) malloc(sizeof(int));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> undefined , EXACT

   **b3 = 3;

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> undefined , EXACT


   c4 = (int *) malloc(sizeof(int));

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> *HEAP*_l_37 , MAY

   *c4 = 4;

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> *HEAP*_l_37 , MAY


   foo(a1, a2, b3, c4);

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_24 -> *HEAP*_l_33 , MAY
// *HEAP*_l_24 -> *NULL* , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_25 -> *HEAP*_l_37 , MAY
// *HEAP*_l_25 -> *NULL* , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> *HEAP*_l_37 , MAY


   printf("%d\n", ***a1);

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_24 -> *HEAP*_l_33 , MAY
// *HEAP*_l_24 -> *NULL* , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_25 -> *HEAP*_l_37 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> *HEAP*_l_37 , MAY

   printf("%d\n", ***a2);

// Points To:
// *HEAP*_l_24 -> *HEAP*_l_25 , MAY
// *HEAP*_l_24 -> *HEAP*_l_33 , MAY
// *HEAP*_l_24 -> *NULL* , MAY
// *HEAP*_l_25 -> *HEAP*_l_26 , MAY
// *HEAP*_l_25 -> *HEAP*_l_37 , MAY
// *HEAP*_l_30 -> *HEAP*_l_25 , MAY
// *HEAP*_l_33 -> *HEAP*_l_34 , MAY
// a1 -> *HEAP*_l_24 , MAY
// a2 -> *HEAP*_l_30 , MAY
// b3 -> *HEAP*_l_33 , MAY
// c4 -> *HEAP*_l_37 , MAY


   return 0;
}

Warnings and errors




POINTS TO for exit01


// Points To IN: none


// Points To OUT: unreachable

int * exit01(int *p)
{

// Points To: none


   p = (int *) malloc(4*sizeof(int));

// Points To:
// p -> *ANY_MODULE*:*HEAP**ANYWHERE* , MAY

   exit(0);

// Points To: unreachable

   return p;
}

proper effects with points-to

int * exit01(int *p)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_

   p = (int *) malloc(4*sizeof(int));
   exit(0);
   return p;
}

cumulated effects with points-to

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
int * exit01(int *p)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_

   p = (int *) malloc(4*sizeof(int));
   exit(0);
   return p;
}

POINTS TO for exit01


// Points To IN: none


// Points To OUT: unreachable

int * exit01(int *p)
{

// Points To: none


   p = (int *) malloc(4*sizeof(int));

// Points To:
// p -> *ANY_MODULE*:*HEAP**ANYWHERE* , MAY

   exit(0);

// Points To: unreachable

   return p;
}

POINTS TO for exit01


// Points To IN: none


// Points To OUT: unreachable

int main()
{

// Points To: none

   int *q, *r;

// Points To:
// q -> undefined , EXACT
// r -> undefined , EXACT

   q = exit01(r);

// Points To: unreachable

   return 0;
}
(activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
(activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
(activate_phase) Rule `PRINT_CODE_POINTS_TO_LIST' already active
INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (user_call_to_points_to_interprocedural) Function "exit01" has no side effect on its formal context via pointer variables.

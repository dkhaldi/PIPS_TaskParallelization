#
# AIPO
#
#
# compile generated freia_73
#

! initial function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);                                            /*0005*/
   freia_aipo_copy(o1, in0);                                            /*0006*/
   freia_aipo_copy(o2, o0);                                             /*0007*/
}

! graphs

// graph for dag "dag_0" of module "freia_73" in dot format
// DAG "dag_0": #i=1 #o=3 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in0" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];
  "o2" [shape=circle];

  // computation vertices
  "7 =" [shape=circle];
  "7 =" -> "o2";
  "6 =" [shape=circle];
  "6 =" -> "o1";
  "5 =" [shape=circle];
  "5 =" -> "7 =" [label="o0"];
  "5 =" -> "o0";
  "in0" -> "6 =";
  "in0" -> "5 =";
}
// graph for dag "dag_cleaned_0" of module "freia_73" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=3 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 3
  "o0" [shape=circle];
  "o0 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o0 =";
  "o0 =" -> "o0";
  "o1" [shape=circle];
  "o1 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o1 =";
  "o1 =" -> "o1";
  "o2" [shape=circle];
  "o2 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o2 =";
  "o2 =" -> "o2";
}

! updated function for AIPO

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}
#
# SPOC
#

! initial function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);                                            /*0005*/
   freia_aipo_copy(o1, in0);                                            /*0006*/
   freia_aipo_copy(o2, o0);                                             /*0007*/
}

! graphs

// graph for dag "dag_0" of module "freia_73" in dot format
// DAG "dag_0": #i=1 #o=3 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in0" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];
  "o2" [shape=circle];

  // computation vertices
  "7 =" [shape=circle];
  "7 =" -> "o2";
  "6 =" [shape=circle];
  "6 =" -> "o1";
  "5 =" [shape=circle];
  "5 =" -> "7 =" [label="o0"];
  "5 =" -> "o0";
  "in0" -> "6 =";
  "in0" -> "5 =";
}
// graph for dag "dag_cleaned_0" of module "freia_73" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=3 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 3
  "o0" [shape=circle];
  "o0 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o0 =";
  "o0 =" -> "o0";
  "o1" [shape=circle];
  "o1 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o1 =";
  "o1 =" -> "o1";
  "o2" [shape=circle];
  "o2 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o2 =";
  "o2 =" -> "o2";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+3+0 copies
// # SPOC calls: 0

! updated function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}

! cleaned up function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}
#
# TERAPIX
#

! initial function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);                                            /*0005*/
   freia_aipo_copy(o1, in0);                                            /*0006*/
   freia_aipo_copy(o2, o0);                                             /*0007*/
}

! graphs

// graph for dag "dag_0" of module "freia_73" in dot format
// DAG "dag_0": #i=1 #o=3 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in0" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];
  "o2" [shape=circle];

  // computation vertices
  "7 =" [shape=circle];
  "7 =" -> "o2";
  "6 =" [shape=circle];
  "6 =" -> "o1";
  "5 =" [shape=circle];
  "5 =" -> "7 =" [label="o0"];
  "5 =" -> "o0";
  "in0" -> "6 =";
  "in0" -> "5 =";
}
// graph for dag "dag_cleaned_0" of module "freia_73" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=3 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 3
  "o0" [shape=circle];
  "o0 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o0 =";
  "o0 =" -> "o0";
  "o1" [shape=circle];
  "o1 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o1 =";
  "o1 =" -> "o1";
  "o2" [shape=circle];
  "o2 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o2 =";
  "o2 =" -> "o2";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+3+0 copies

! updated function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}

! cleaned up function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}
#
# OPENCL
#

! initial function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);                                            /*0005*/
   freia_aipo_copy(o1, in0);                                            /*0006*/
   freia_aipo_copy(o2, o0);                                             /*0007*/
}

! graphs

// graph for dag "dag_0" of module "freia_73" in dot format
// DAG "dag_0": #i=1 #o=3 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in0" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];
  "o2" [shape=circle];

  // computation vertices
  "7 =" [shape=circle];
  "7 =" -> "o2";
  "6 =" [shape=circle];
  "6 =" -> "o1";
  "5 =" [shape=circle];
  "5 =" -> "7 =" [label="o0"];
  "5 =" -> "o0";
  "in0" -> "6 =";
  "in0" -> "5 =";
}
// graph for dag "dag_cleaned_0" of module "freia_73" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=3 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 3
  "o0" [shape=circle];
  "o0 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o0 =";
  "o0 =" -> "o0";
  "o1" [shape=circle];
  "o1 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o1 =";
  "o1 =" -> "o1";
  "o2" [shape=circle];
  "o2 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o2 =";
  "o2 =" -> "o2";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 0 ops and 3 copies, optimized to 0 ops and 0+3+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_73

// opencl for dag 0

! updated function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}

! cleaned up function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}
#
# SIGMAC
#
#
# compile generated freia_73
#

! initial function

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);                                            /*0005*/
   freia_aipo_copy(o1, in0);                                            /*0006*/
   freia_aipo_copy(o2, o0);                                             /*0007*/
}

! graphs

// graph for dag "dag_0" of module "freia_73" in dot format
// DAG "dag_0": #i=1 #o=3 #c=0 #s=0 #I=3 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in0" [shape=circle];

  // outputs
  "o0" [shape=circle];
  "o1" [shape=circle];
  "o2" [shape=circle];

  // computation vertices
  "7 =" [shape=circle];
  "7 =" -> "o2";
  "6 =" [shape=circle];
  "6 =" -> "o1";
  "5 =" [shape=circle];
  "5 =" -> "7 =" [label="o0"];
  "5 =" -> "o0";
  "in0" -> "6 =";
  "in0" -> "5 =";
}
// graph for dag "dag_cleaned_0" of module "freia_73" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=3 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 3
  "o0" [shape=circle];
  "o0 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o0 =";
  "o0 =" -> "o0";
  "o1" [shape=circle];
  "o1 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o1 =";
  "o1 =" -> "o1";
  "o2" [shape=circle];
  "o2 =" [shape=circle,label="=",style="dashed"]
  "in0" -> "o2 =";
  "o2 =" -> "o2";
}

! updated function for OPENCL

void freia_73(freia_data2d *o0, freia_data2d *o1, freia_data2d *o2, const freia_data2d *in0)
{
   freia_aipo_copy(o0, in0);
   freia_aipo_copy(o1, in0);
   freia_aipo_copy(o2, in0);
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"




/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 10;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

  }
}
#
# FREIA COMPILATION DONE
#


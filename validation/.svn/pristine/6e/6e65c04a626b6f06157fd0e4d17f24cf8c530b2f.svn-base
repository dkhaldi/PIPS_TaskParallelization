
Symbol table for pragma09

pragma09

Declarations for module "pragma09" with type "() -> void"

Variable list:

	Declared entity "TOP-LEVEL:*STATIC*" with type "area" with size 0
	Declared entity "pragma09!:*STATIC*" with type "area" with size 0
	Declared entity "pragma09:*DYNAMIC*" with type "area" with size 42
	Declared entity "pragma09:*HEAP*" with type "area" with size 0
	Declared entity "pragma09:*STACK*" with type "area" with size 0
	Declared entity "pragma09:*STATIC*" with type "area" with size 0
	Declared entity "pragma09:0`1`j" with type "variable" "int"
	Declared entity "pragma09:0`2`j" with type "variable" "int"
	Declared entity "pragma09:0`3`j" with type "variable" "int"
	Declared entity "pragma09:0`4`j" with type "variable" "int"
	Declared entity "pragma09:0`5`j" with type "variable" "int"
	Declared entity "pragma09:0`__FUNCTION__" with type "variable" "char *"
	Declared entity "pragma09:0`__func__" with type "variable" "char *"
	Declared entity "pragma09:0`i" with type "variable" "int"

* empty extern declaration list *


Layouts for memory areas:

Layout for memory area "TOP-LEVEL:*STATIC*" of size 0:
	* empty area *


Layout for memory area "pragma09!:*STATIC*" of size 0:
	* empty area *


Layout for memory area "pragma09:*DYNAMIC*" of size 42:
	Variable "pragma09:0`i"	offset = 18	size = 4
	Variable "pragma09:0`1`j"	offset = 22	size = 4
	Variable "pragma09:0`2`j"	offset = 26	size = 4
	Variable "pragma09:0`3`j"	offset = 30	size = 4
	Variable "pragma09:0`4`j"	offset = 34	size = 4
	Variable "pragma09:0`5`j"	offset = 38	size = 4
	Variable "pragma09:0`__func__"	offset = 0	size = 9
	Variable "pragma09:0`__FUNCTION__"	offset = 9	size = 9


Layout for memory area "pragma09:*HEAP*" of size 0:
	* empty area *


Layout for memory area "pragma09:*STACK*" of size 0:
	* empty area *


Layout for memory area "pragma09:*STATIC*" of size 0:
	* empty area *

End of declarations for module pragma09


Parsed printed file

void pragma09()
{
   // BEGIN BLOCK
   int i;
   
   // Comment
#pragma omp parallel for
   for (i = 0;i<10;i++) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   // Comment before
   // After
#pragma omp parallel for
   for (i = 0;i<10;i++) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }

label1:
#pragma omp parallel for
   for (i = 0;i<10;i++) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   /* Some comment */
   // And other
label2:
#pragma omp parallel for
   for (i = 0;i<10;i++) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   // Before
   /* Some comment */
   // And after
label3:
#pragma omp parallel for
   for (i = 0;i<10;i++) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   //Before
   //After
far_away:   ;
   // END BLOCK
}

Printed file

void pragma09()
{
   // BEGIN BLOCK
   int i;
   
   // Comment
#pragma omp parallel for
   for(i = 0; i <= 9; i += 1) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   // Comment before
   // After
#pragma omp parallel for
   for(i = 0; i <= 9; i += 1) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }

label1:
#pragma omp parallel for
   for(i = 0; i <= 9; i += 1) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   /* Some comment */
   // And other
label2:
#pragma omp parallel for
   for(i = 0; i <= 9; i += 1) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   // Before
   /* Some comment */
   // And after
label3:
#pragma omp parallel for
   for(i = 0; i <= 9; i += 1) {
      // BEGIN BLOCK
      int j = i+1;
      // END BLOCK
   }
   
   //Before
   //After
far_away:   ;
   // END BLOCK
}


POINTS-TO


// Points To IN:
// x -> *NULL* , MAY
// x -> _x_3[0] , MAY


// Points To OUT:
// x -> _x_3[0] , EXACT

void call08(int r, int m, int *x)
{

// Points To:
// x -> *NULL* , MAY
// x -> _x_3[0] , MAY

   // int j;
   
   x[4] = 10*r+4;

// Points To:
// x -> _x_3[0] , EXACT

   return;
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int d1 = 4;

// Points To: none

   int d2 = 4;

// Points To: none

   int y[d1][d2];

// Points To: none

   int i;

// Points To: none

   //int j;
   
   for(i = 0; i <= d1-1; i += 1)

// Points To: none

      call08(i, d2, &y[i][1]);

// Points To: none

   
   /*
     for(i=0;i<d1;i++) {
       for(j=0;j<d2;j++)
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
       printf("\n");
     }
     */
   return 0;
}

PROPER  EFFECTS WITH POINTS TO

void call08(int r, int m, int *x)
{
//             <    is read   >: r x
//             <    is written>: _x_3[4]
   // int j;
   
   x[4] = 10*r+4;
   return;
}
int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i;
//             <    is read   >: d1
//             <    is written>: i
   //int j;
   
   for(i = 0; i <= d1-1; i += 1)
//             <    is read   >: d1 d2 i
//             <    is written>: y[i][5]
      call08(i, d2, &y[i][1]);
   
   /*
     for(i=0;i<d1;i++) {
       for(j=0;j<d2;j++)
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
       printf("\n");
     }
     */
   return 0;
}

 *********************** Use-Def Chains *********************

	13 --> 15 with conflicts
		from <d1-W-EXACT> to <d1-R-EXACT>
	13 --> 19 with conflicts
		from <d1-W-EXACT> to <d1-R-EXACT>
	13 --> 20 with conflicts
		from <d1-W-EXACT> to <d1-R-EXACT>
	14 --> 15 with conflicts
		from <d2-W-EXACT> to <d2-R-EXACT>
	14 --> 20 with conflicts
		from <d2-W-EXACT> to <d2-R-EXACT>
	20 --> 20 with conflicts
		from <y[i][5]-W-EXACT> to <y[i][5]-W-EXACT>

****************** End of Dependence Graph ******************

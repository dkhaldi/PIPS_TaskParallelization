
//  <A[PHI1][PHI2][PHI3]-W-MAY-{0<=PHI1, PHI1<=PHI2+498,
//    440PHI1+PHI2<=219561, PHI1<=PHI3+498, 498PHI1+PHI3<=248503,
//    0<=PHI2, PHI2<=441, 0<=PHI3, PHI3<=499}>
//  <B[PHI1]-R-MAY-{0<=PHI1, PHI1<=499, j==0, k==0}>

void function_test(int A[500][500][500], int B[500], int i, int j, int k)
{

//  <A[PHI1][PHI2][PHI3]-W-MAY-{PHI2==1, PHI3==1, 0<=PHI1, PHI1<=499,
//    j==0, k==0}>
//  <B[PHI1]-R-MAY-{0<=PHI1, PHI1<=499, j==0, k==0}>

   for(i = 0; i <= 499; i += 1)

//  <A[PHI1][PHI2][PHI3]-W-EXACT-{PHI1==i, PHI2==1, PHI3==1, j==0,
//    k==0, 0<=i, i<=499}>
//  <B[PHI1]-R-EXACT-{PHI1==i, j==0, k==0, 0<=i, i<=499}>

      A[i][1][1] = B[i];

//  <A[PHI1][PHI2][PHI3]-W-MAY-{0<=PHI1, PHI1<=498, 0<=PHI2,
//    PHI2<=441, 0<=PHI3, PHI3<=499}>


   for(i = 0; i <= 249; i += 1)

//  <A[PHI1][PHI2][PHI3]-W-MAY-{i<=PHI1, PHI1<=2i, 0<=PHI2, PHI2<=441,
//    0<=PHI3, PHI3<=499, i<=249}>

      for(j = 0; j <= 21; j += 1)

//  <A[PHI1][PHI2][PHI3]-W-MAY-{i<=PHI1, PHI1<=2i, 0<=PHI2, PHI2<=21j,
//    0<=PHI3, PHI3<=499, i<=249, 0<=j, j<=21}>

         for(k = 0; k <= 499; k += 1)

//  <A[PHI1][PHI2][PHI3]-W-MAY-{PHI3==k, i<=PHI1, PHI1<=2i, 0<=PHI2,
//    PHI2<=21j, i<=249, 0<=j, j<=21, 0<=k, k<=499}>

            A[i*j*k%2==0?i:2*i][j*j][k] = 1234;
}
void function_test(int A[500][500][500], int B[500], int i, int j, int k)
{
   //PIPS generated variable
   int X1, autogen_0_0, autogen_1_0, autogen_1_1, autogen_1_2;
   for(autogen_0_0 = 0; autogen_0_0 <= 499; autogen_0_0 += 1)
      X1 = B[autogen_0_0];
   for(autogen_1_0 = 0; autogen_1_0 <= 441; autogen_1_0 += 1)
      for(autogen_1_1 = 0; autogen_1_1 <= pips_min(2, (-autogen_1_0+219561)/440, autogen_1_0+498); autogen_1_1 += 1)
         for(autogen_1_2 = pips_max(2, 0, autogen_1_1-498); autogen_1_2 <= pips_min(2, 499, -498*autogen_1_1+248503); autogen_1_2 += 1)
            A[autogen_1_0][autogen_1_1][autogen_1_2] = 3+X1;
}


PROPER  EFFECTS 

int count(liste *p)
{
//             <    is written>: i
   int i = 0, j, tab[20];
//             <    is written>: j
   for(j = 0; j <= 19; j += 1)
//             <    is read   >: j
//             <    is written>: tab[j]
      tab[j] = j;
//             <    is read   >: p
   while (p!=(void *) 0) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: i p
      p->val = &tab[i];
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b1
//             <    is read   >: p
//             <    is written>: p
      p = p->next;
//             <    is read   >: i
//             <    is written>: i
      i++;
   }
//             <    is read   >: i
   return i;
}

POINTS-TO


// Points To IN:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// _p_1.val -> undefined , MAY
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1_2__1.val -> undefined , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// p -> *NULL* , EXACT

int count(liste *p)
{

// Points To: none

   int i = 0, j, tab[20];

// Points To: none

   for(j = 0; j <= 19; j += 1)

// Points To: none

      tab[j] = j;

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   while (p!=(void *) 0) {

// Points To:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1.val -> tab[*] , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// _p_1_2__1.val -> tab[*] , MAY
// p -> _p_1 , MAY
// p -> _p_1_2__1 , MAY

      p->val = &tab[i];

// Points To:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1.val -> tab[*] , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// _p_1_2__1.val -> tab[*] , MAY
// p -> _p_1 , MAY
// p -> _p_1_2__1 , MAY

      p = p->next;

// Points To:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1.val -> tab[*] , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// _p_1_2__1.val -> tab[*] , MAY
// p -> *NULL* , MAY
// p -> _p_1_2__1 , MAY

      i++;
   }

// Points To:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1.val -> tab[*] , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1 , MAY
// _p_1_2__1.val -> tab[*] , MAY
// p -> *NULL* , EXACT

   return i;
}

PROPER EFFECTS WITH POINTS TO

int count(liste *p)
{
//             <    is written>: i
   int i = 0, j, tab[20];
//             <    is written>: j
   for(j = 0; j <= 19; j += 1)
//             <    is read   >: j
//             <    is written>: tab[j]
      tab[j] = j;
//             <    is read   >: p
   while (p!=(void *) 0) {
//             <may be written>: _p_1.val _p_1_2__1.val
//             <    is read   >: i p
      p->val = &tab[i];
//             <may be read   >: _p_1.next _p_1_2__1.next
//             <    is read   >: p
//             <    is written>: p
      p = p->next;
//             <    is read   >: i
//             <    is written>: i
      i++;
   }
//             <    is read   >: i
   return i;
}

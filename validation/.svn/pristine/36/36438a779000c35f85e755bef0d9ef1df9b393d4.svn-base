
POINTS-TO


// Points To IN:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY


// Points To OUT:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> undefined , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

void list_free(list l)
{

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY

   list n = l, p = l;

// Points To:
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY

   //while (n!=nil) {
   // FI: to simplify the analysis...
   while (n) {

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> undefined , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> _l_1 , MAY
// n -> _l_1_2__1 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY
// p -> _l_1_2__1 , MAY

      n = n->next;

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> undefined , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1 , MAY
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY
// p -> _l_1_2__1 , MAY

      free(p);

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> undefined , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , MAY
// n -> _l_1_2__1 , MAY
// p -> undefined , EXACT

      p = n;
   }

// Points To:
// _l_1.next -> *NULL_POINTER* , MAY
// _l_1.next -> _l_1_2__1 , MAY
// _l_1_2__1.next -> *NULL_POINTER* , MAY
// _l_1_2__1.next -> _l_1_2__1 , MAY
// l -> undefined , MAY
// l -> *NULL_POINTER* , MAY
// l -> _l_1 , MAY
// n -> *NULL_POINTER* , EXACT
// p -> *NULL_POINTER* , MAY
// p -> _l_1 , MAY
// p -> _l_1_2__1 , MAY

   return;
}

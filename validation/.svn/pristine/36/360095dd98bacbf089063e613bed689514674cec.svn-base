
TRANSFORMERS


//  T() {}

void ts_singlestate(void)
{

//  T() {}

   int n, m, x, y, c1, c2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T(c1,c2,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=n&&c2<=m))

//  T() {0==-1}

      checking_error();

//  T(c1,c2,x,y) {c1==x, c1#init==x#init, 0<=c1, c1<=n, x#init<=c1,
//    c2<=m, 0<=m, y<=m}

   while (rand_b())

//  T(c1,c2,x,y) {c1+x#init==c1#init+x, c1<=n, c2<=m, 0<=m, y<=m,
//    0<=n, x#init+1<=n, x#init<=x, x<=x#init+1, x+y<=x#init+y#init+1}

      if (rand_b()) {

//  T() {0<=m, y+1<=m, 0<=n, x+1<=n}

         if (!(x<n&&y<m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==y#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         y++;

//  T(c2) {c2==c2#init+1, 0<=m, y<=m, 0<=n, x+1<=n}

         c2++;

//  T() {c1<=n, c2<=m, 0<=m, y<=m, 0<=n, x+1<=n}

         if (!(c1<=n&&c2<=m))

//  T() {0==-1}

            checking_error();
      }
      else {

//  T() {0<=m, m<=y, 0<=n, x+1<=n}

         if (!(x<n&&y>=m))

//  T() {0==-1}

            deadlock();

//  T(y) {y==0, 0<=m, m<=y#init, 0<=n, x+1<=n}

         y = 0;

//  T(x) {x==x#init+1, y==0, 0<=m, 0<=n, x<=n}

         x++;

//  T(c1) {c1==c1#init+1, y==0, 0<=m, 0<=n, x<=n}

         c1++;

//  T(c2) {c2==0, y==0, 0<=m, 0<=n, x<=n}

         c2 = 0;

//  T() {c2==0, y==0, c1<=n, 0<=m, 0<=n, x<=n}

         if (!(c1<=n&&c2<=m))

//  T() {0==-1}

            checking_error();
      }
}

//  T() {}

void ts_restructured(void)
{

//  T() {}

   int n, m, x, y, c1, c2;

//  T(n) {0<=n}

   n = rand();

//  T(m) {0<=m, 0<=n}

   m = rand();

//  T(c1,c2,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  T() {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=n&&c2<=m))

//  T() {0==-1}

      checking_error();

//  T(c1,c2,x,y) {c1==n, c1==x, c1#init==0, c2==0, c2#init==0,
//    x#init==0, y==0, y#init==0, 0<=c1, 0<=m}

   if (x<n) {

//  T(c2,y) {c1==0, c2==m, c2==y, c2#init==0, x==0, y#init==0, 0<=c2,
//    1<=n}

      if (y<m) {

//  T(c2,y) {c1==0, c2==y, c2#init==y#init, x==0, 0<=c2, c2+1<=m,
//    y#init<=c2, 1<=n}

         while (rand_b()) {

//  T() {c1==0, x==0, 1<=m, y+2<=m, 1<=n}

            if (!(x<n&&y<m-1))

//  T() {0==-1}

               deadlock();

//  T(y) {c1==0, x==0, y==y#init+1, 1<=m, y+1<=m, 1<=n}

            y++;

//  T(c2) {c1==0, c2==c2#init+1, x==0, 1<=m, y+1<=m, 1<=n}

            c2++;

//  T() {c1==0, x==0, c2<=m, 1<=m, y+1<=m, 1<=n}

            if (!(c1<=n&&c2<=m))

//  T() {0==-1}

               checking_error();
         }

//  T() {c1==0, c2==m-1, c2==y, x==0, 0<=c2, 1<=n}

         if (!(x<n&&y==m-1))

//  T() {0==-1}

            deadlock();

//  T(y) {c1==0, c2==m-1, c2==y-1, c2==y#init, x==0, 0<=c2, 1<=n}

         y++;

//  T(c2) {c1==0, c2==c2#init+1, c2==m, c2==y, x==0, 1<=c2, 1<=n}

         c2++;

//  T() {c1==0, c2==m, c2==y, x==0, 1<=c2, 1<=n}

         if (!(c1<=n&&c2<=m))

//  T() {0==-1}

            checking_error();
      }

//  T(c1,c2,x,y) {c1==x, c1#init==x#init, c2==m, c2==y, 0<=c1,
//    c1+1<=n, x#init<=c1, 0<=c2, c2<=y#init}

      while (rand_b())

//  T(c1,c2,x,y) {c1==c1#init+1, c2==m, c2==y, x==x#init+1, c1<=n,
//    0<=c2, c2<=y#init, 1<=n, x+1<=n}

         if (rand_b()) {

//  T() {m==0, 1<=n, x+2<=n, 0<=y}

            if (!(x<n-1&&y>=m&&0>=m))

//  T() {0==-1}

               deadlock();

//  T(y) {m==0, y==0, 1<=n, x+2<=n, 0<=y#init}

            y = 0;

//  T(x) {m==0, x==x#init+1, y==0, 1<=n, x+1<=n}

            x++;

//  T(c1) {c1==c1#init+1, m==0, y==0, 1<=n, x+1<=n}

            c1++;

//  T(c2) {c2==0, m==0, y==0, 1<=n, x+1<=n}

            c2 = 0;

//  T() {c2==0, m==0, y==0, c1<=n, 1<=n, x+1<=n}

            if (!(c1<=n&&c2<=m))

//  T() {0==-1}

               checking_error();
         }
         else {

//  T() {1<=m, m<=y, 1<=n, x+2<=n}

            if (!(x<n-1&&y>=m&&0<m))

//  T() {0==-1}

               deadlock();

//  T(y) {y==0, 1<=m, m<=y#init, 1<=n, x+2<=n}

            y = 0;

//  T(x) {x==x#init+1, y==0, 1<=m, 1<=n, x+1<=n}

            x++;

//  T(c1) {c1==c1#init+1, y==0, 1<=m, 1<=n, x+1<=n}

            c1++;

//  T(c2) {c2==0, y==0, 1<=m, 1<=n, x+1<=n}

            c2 = 0;

//  T() {c2==0, y==0, c1<=n, 1<=m, 1<=n, x+1<=n}

            if (!(c1<=n&&c2<=m))

//  T() {0==-1}

               checking_error();

//  T(c2,y) {c2==y, c2#init==y#init, c1<=n, 0<=c2, c2+1<=m,
//    y#init<=c2, 1<=n, x+1<=n}

            while (rand_b()) {

//  T() {c1<=n, 1<=m, y+2<=m, 1<=n, x+1<=n}

               if (!(x<n&&y<m-1))

//  T() {0==-1}

                  deadlock();

//  T(y) {y==y#init+1, c1<=n, 1<=m, y+1<=m, 1<=n, x+1<=n}

               y++;

//  T(c2) {c2==c2#init+1, c1<=n, 1<=m, y+1<=m, 1<=n, x+1<=n}

               c2++;

//  T() {c1<=n, c2<=m, 1<=m, y+1<=m, 1<=n, x+1<=n}

               if (!(c1<=n&&c2<=m))

//  T() {0==-1}

                  checking_error();
            }

//  T() {c2==m-1, c2==y, c1<=n, 0<=c2, 1<=n, x+1<=n}

            if (!(x<n&&y==m-1))

//  T() {0==-1}

               deadlock();

//  T(y) {c2==m-1, c2==y-1, c2==y#init, c1<=n, 0<=c2, 1<=n, x+1<=n}

            y++;

//  T(c2) {c2==c2#init+1, c2==m, c2==y, c1<=n, 1<=c2, 1<=n, x+1<=n}

            c2++;

//  T() {c2==m, c2==y, c1<=n, 1<=c2, 1<=n, x+1<=n}

            if (!(c1<=n&&c2<=m))

//  T() {0==-1}

               checking_error();
         }

//  T() {c1==x, 0<=c1, n<=c1+1, 0<=m, y<=m, 1<=n}

      if (!(x>=n-1))

//  T() {0==-1}

         deadlock();

//  T(y) {c1==x, y==0, 0<=c1, n<=c1+1, 0<=m, y#init<=m, 1<=n}

      y = 0;

//  T(x) {c1==x-1, c1==x#init, y==0, 0<=c1, n<=c1+1, 0<=m, 1<=n}

      x++;

//  T(c1) {c1==c1#init+1, c1==x, y==0, 1<=c1, n<=c1, 0<=m, 1<=n}

      c1++;

//  T(c2) {c1==x, c2==0, y==0, 1<=c1, n<=c1, 0<=m, 1<=n}

      c2 = 0;

//  T() {c1==n, c1==x, c2==0, y==0, 1<=c1, 0<=m}

      if (!(c1<=n&&c2<=m))

//  T() {0==-1}

         checking_error();
   }
}

PRECONDITIONS


//  P() {}

void ts_singlestate(void)
{

//  P() {}

   int n, m, x, y, c1, c2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=n&&c2<=m))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   while (rand_b())

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1<=n, c2<=m, 0<=m, y<=m}

      if (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1<=n, c2<=m, 0<=m, y<=m}

         if (!(x<n&&y<m))

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1<=n, c2<=m, 0<=m, y<=m}

            deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1+1<=n, c2<=m, 0<=m, y+1<=m}

         y++;

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1+1<=n, c2<=m, 0<=m, y<=m, 0<=n}

         c2++;

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1+1<=n, c2<=m+1, 0<=m, y<=m,
//    0<=n}

         if (!(c1<=n&&c2<=m))

//  P(c1,c2,m,n,x,y) {c1==x, c2==m+1, 0<=c1, c1+1<=n, 1<=c2, y+1<=c2,
//    0<=n}

            checking_error();
      }
      else {

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1<=n, c2<=m, 0<=m, y<=m}

         if (!(x<n&&y>=m))

//  P(c1,c2,m,n,x,y) {c1==x, 0<=c1, c1<=n, c2<=m, 0<=m, y<=m}

            deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, m==y, 0<=c1, c1+1<=n, c2<=m, 0<=m}

         y = 0;

//  P(c1,c2,m,n,x,y) {c1==x, y==0, 0<=c1, c1+1<=n, c2<=m, 0<=m, 0<=n}

         x++;

//  P(c1,c2,m,n,x,y) {c1==x-1, y==0, 0<=c1, c1+1<=n, c2<=m, 0<=m,
//    0<=n}

         c1++;

//  P(c1,c2,m,n,x,y) {c1==x, y==0, 1<=c1, c1<=n, c2<=m, 0<=m, 0<=n}

         c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, y==0, 1<=c1, c1<=n, 0<=m, 0<=n}

         if (!(c1<=n&&c2<=m))

//  P() {0==-1}

            checking_error();
      }
}

//  P() {}

void ts_restructured(void)
{

//  P() {}

   int n, m, x, y, c1, c2;

//  P() {}

   n = rand();

//  P(n) {0<=n}

   m = rand();

//  P(m,n) {0<=m, 0<=n}

   x = y = c1 = c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (!(c1<=n&&c2<=m))

//  P() {0==-1}

      checking_error();

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 0<=n}

   if (x<n) {

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 0<=m, 1<=n}

      if (y<m) {

//  P(c1,c2,m,n,x,y) {c1==0, c2==0, x==0, y==0, 1<=m, 1<=n}

         while (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==0, c2==y, x==0, 0<=c2, c2+1<=m, 1<=n}

            if (!(x<n&&y<m-1))

//  P(c1,c2,m,n,x,y) {c1==0, c2==m-1, c2==y, x==0, 0<=c2, 1<=n}

               deadlock();

//  P(c1,c2,m,n,x,y) {c1==0, c2==y, x==0, 0<=c2, c2+2<=m, 1<=n}

            y++;

//  P(c1,c2,m,n,x,y) {c1==0, c2==y-1, x==0, 0<=c2, c2+2<=m, 1<=m,
//    1<=n}

            c2++;

//  P(c1,c2,m,n,x,y) {c1==0, c2==y, x==0, 1<=c2, c2+1<=m, 1<=m, 1<=n}

            if (!(c1<=n&&c2<=m))

//  P() {0==-1}

               checking_error();
         }

//  P(c1,c2,m,n,x,y) {c1==0, c2==y, x==0, 0<=c2, c2+1<=m, 1<=n}

         if (!(x<n&&y==m-1))

//  P(c1,c2,m,n,x,y) {c1==0, c2==y, x==0, 0<=c2, c2+2<=m, 1<=n}

            deadlock();

//  P(c1,c2,m,n,x,y) {c1==0, c2==m-1, c2==y, x==0, 0<=c2, 1<=n}

         y++;

//  P(c1,c2,m,n,x,y) {c1==0, c2==m-1, c2==y-1, x==0, 0<=c2, 1<=n}

         c2++;

//  P(c1,c2,m,n,x,y) {c1==0, c2==m, c2==y, x==0, 1<=c2, 1<=n}

         if (!(c1<=n&&c2<=m))

//  P() {0==-1}

            checking_error();
      }

//  P(c1,c2,m,n,x,y) {c1==0, c2==m, c2==y, x==0, 0<=c2, 1<=n}

      while (rand_b())

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

         if (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

            if (!(x<n-1&&y>=m&&0>=m))

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

               deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, m==0, y==0, 0<=c1, c1+2<=n}

            y = 0;

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, m==0, y==0, 0<=c1, c1+2<=n, 1<=n}

            x++;

//  P(c1,c2,m,n,x,y) {c1==x-1, c2==0, m==0, y==0, 0<=c1, c1+2<=n,
//    1<=n}

            c1++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, m==0, y==0, 1<=c1, c1+1<=n, 1<=n}

            c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, m==0, y==0, 1<=c1, c1+1<=n, 1<=n}

            if (!(c1<=n&&c2<=m))

//  P() {0==-1}

               checking_error();
         }
         else {

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

            if (!(x<n-1&&y>=m&&0<m))

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

               deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+2<=n, 1<=c2}

            y = 0;

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, y==0, 0<=c1, c1+2<=n, 1<=c2, 1<=n}

            x++;

//  P(c1,c2,m,n,x,y) {c1==x-1, c2==m, y==0, 0<=c1, c1+2<=n, 1<=c2,
//    1<=n}

            c1++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, y==0, 1<=c1, c1+1<=n, 1<=c2, 1<=n}

            c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, y==0, 1<=c1, c1+1<=n, 1<=m, 1<=n}

            if (!(c1<=n&&c2<=m))

//  P() {0==-1}

               checking_error();

//  P(c1,c2,m,n,x,y) {c1==x, c2==0, y==0, 1<=c1, c1+1<=n, 1<=m, 1<=n}

            while (rand_b()) {

//  P(c1,c2,m,n,x,y) {c1==x, c2==y, 1<=c1, c1+1<=n, 0<=c2, c2+1<=m}

               if (!(x<n&&y<m-1))

//  P(c1,c2,m,n,x,y) {c1==x, c2==m-1, c2==y, 1<=c1, c1+1<=n, 0<=c2}

                  deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, c2==y, 1<=c1, c1+1<=n, 0<=c2, c2+2<=m}

               y++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==y-1, 1<=c1, c1+1<=n, 0<=c2, c2+2<=m,
//    1<=m, 1<=n}

               c2++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==y, 1<=c1, c1+1<=n, 1<=c2, c2+1<=m,
//    1<=m, 1<=n}

               if (!(c1<=n&&c2<=m))

//  P() {0==-1}

                  checking_error();
            }

//  P(c1,c2,m,n,x,y) {c1==x, c2==y, 1<=c1, c1+1<=n, 0<=c2, c2+1<=m,
//    1<=n}

            if (!(x<n&&y==m-1))

//  P(c1,c2,m,n,x,y) {c1==x, c2==y, 1<=c1, c1+1<=n, 0<=c2, c2+2<=m,
//    1<=n}

               deadlock();

//  P(c1,c2,m,n,x,y) {c1==x, c2==m-1, c2==y, 1<=c1, c1+1<=n, 0<=c2,
//    1<=n}

            y++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==m-1, c2==y-1, 1<=c1, c1+1<=n, 0<=c2,
//    1<=n}

            c2++;

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 1<=c1, c1+1<=n, 1<=c2,
//    1<=n}

            if (!(c1<=n&&c2<=m))

//  P() {0==-1}

               checking_error();
         }

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+1<=n, 0<=c2}

      if (!(x>=n-1))

//  P(c1,c2,m,n,x,y) {c1==x, c2==m, c2==y, 0<=c1, c1+2<=n, 0<=c2}

         deadlock();

//  P(c1,c2,m,n,x,y) {c1==n-1, c1==x, c2==m, c2==y, 0<=c1, 0<=c2}

      y = 0;

//  P(c1,c2,m,n,x,y) {c1==n-1, c1==x, c2==m, y==0, 0<=c1, 0<=c2}

      x++;

//  P(c1,c2,m,n,x,y) {c1==n-1, c1==x-1, c2==m, y==0, 0<=c1, 0<=c2}

      c1++;

//  P(c1,c2,m,n,x,y) {c1==n, c1==x, c2==m, y==0, 1<=c1, 0<=c2}

      c2 = 0;

//  P(c1,c2,m,n,x,y) {c1==n, c1==x, c2==0, y==0, 1<=c1, 0<=m}

      if (!(c1<=n&&c2<=m))

//  P() {0==-1}

         checking_error();
   }
}

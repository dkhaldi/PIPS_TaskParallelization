
Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T(N) {N==100}

   int N = 100;

//  T() {}

   double A[100][100];
   {

//  T(0`1`i) {}

      int i;

//  T(0`1`i) {1<=0`1`i, 0`1`i<=N}

      for(i = 1; i <= N; i += 1) {

//  T(0`1`2`3`j) {}

         int j;

//  T(0`1`2`3`j) {1<=0`1`2`3`j, 0`1`2`3`j<=N}

         for(j = 1; j <= N; j += 1) {

//  T() {}

            //int x0 = (i*j);
            //double x1 = ((double)N / 2);
            if (2*i*j<N) {

//  T() {}

               A[N-i-1][i+j-1] = 1.0;

//  T() {}

               A[i-1][N-i-j-1] = 1.0;
            }

//  T() {}

            if (i==j)

//  T() {}

               A[i-1][j-1] = 1.0;
         }
      }
   }
   {

//  T(0`7`i) {}

      int i;

//  T(0`7`i) {0<=0`7`i, 0`7`i+1<=N}

      for(i = 0; i <= N-1; i += 1) {

//  T(0`7`8`j) {}

         int j;

//  T(0`7`8`j) {0<=0`7`8`j, 0`7`8`j+1<=N}

         for(j = 0; j <= N-1; j += 1)

//  T() {}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {main==0}


   return 0;
}

Preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   int N = 100;

//  P(N) {N==100}

   double A[100][100];
   {

//  P(N) {N==100}

      int i;

//  P(0`1`i,N) {N==100}

      for(i = 1; i <= N; i += 1) {

//  P(0`1`i,N) {N==100, 1<=0`1`i, 0`1`i<=100}

         int j;

//  P(0`1`2`3`j,0`1`i,N) {N==100, 1<=0`1`i, 0`1`i<=100}

         for(j = 1; j <= N; j += 1) {

//  P(0`1`2`3`j,0`1`i,N) {N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=100,
//    1<=0`1`i, 0`1`i<=100}

            //int x0 = (i*j);
            //double x1 = ((double)N / 2);
            if (2*i*j<N) {

//  P(0`1`2`3`j,0`1`i,N) {N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=49,
//    1<=0`1`i, 0`1`i<=49}

               A[N-i-1][i+j-1] = 1.0;

//  P(0`1`2`3`j,0`1`i,N) {N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=49,
//    1<=0`1`i, 0`1`i<=49}

               A[i-1][N-i-j-1] = 1.0;
            }

//  P(0`1`2`3`j,0`1`i,N) {N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=100,
//    1<=0`1`i, 0`1`i<=100}

            if (i==j)

//  P(0`1`2`3`j,0`1`i,N) {0`1`2`3`j==0`1`i, N==100, 1<=0`1`2`3`j,
//    0`1`2`3`j<=100}

               A[i-1][j-1] = 1.0;
         }
      }
   }
   {

//  P(N) {N==100}

      int i;

//  P(0`7`i,N) {N==100}

      for(i = 0; i <= N-1; i += 1) {

//  P(0`7`i,N) {N==100, 0<=0`7`i, 0`7`i<=99}

         int j;

//  P(0`7`8`j,0`7`i,N) {N==100, 0<=0`7`i, 0`7`i<=99}

         for(j = 0; j <= N-1; j += 1)

//  P(0`7`8`j,0`7`i,N) {N==100, 0<=0`7`8`j, 0`7`8`j<=99, 0<=0`7`i,
//    0`7`i<=99}

            printf("%f\n", A[i][j]);
      }
   }

//  P(N) {N==100}


   return 0;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main()
{
   int N = 100;
   double A[100][100];
   {
      int i;

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1, 0<=47PHI1+48PHI2,
//    99PHI2<=2PHI1+9603, PHI1<=98PHI2, 17PHI1<=16PHI2+1650,
//    48PHI1<=PHI2+4703, 51PHI1<=98PHI2+4900, 98PHI1<=PHI2+9603,
//    N==100}>

      for(i = 1; i <= N; i += 1) {
         int j;

//  <A[PHI1][PHI2]-W-MAY-{PHI1+2PHI2<=0`1`i+197,
//    16PHI1+170`1`i<=33PHI2+1568, 16PHI1+33PHI2<=170`1`i+3184,
//    24PHI1+2327<=2352PHI2+23270`1`i, 24PHI1+250`1`i<=2352PHI2+25,
//    24PHI1+740`1`i<=51PHI2+4727, 24PHI1+49PHI2<=250`1`i+4728,
//    24PHI1+99PHI2<=260`1`i+9577, 48PHI1<=51PHI2+0`1`i+4652,
//    48PHI1+500`1`i<=51PHI2+4703, 48PHI1+PHI2<=490`1`i+4704,
//    48PHI1+99PHI2<=500`1`i+9553, 49PHI1+1490`1`i<=9504PHI2+149,
//    49PHI1+PHI2<=480`1`i+4803, 49PHI1+100PHI2<=510`1`i+9651,
//    99PHI1+198PHI2<=1010`1`i+19303, 149PHI1+98PHI2<=510`1`i+19353,
//    408PHI1+772570`1`i<=79968PHI2+3725209,
//    808PHI1+1683PHI2<=8420`1`i+162409,
//    1192PHI1+780410`1`i<=156783PHI2+3724442,
//    1192PHI1+20420`1`i<=1683PHI2+155591,
//    1224PHI1+2499PHI2<=12260`1`i+245977,
//    2352PHI1+99PHI2<=23510`1`i+468196,
//    2376PHI1<=99PHI2+22270`1`i+22574426,
//    2376PHI1+24260`1`i<=99PHI2+468023,
//    2376PHI1+4851PHI2<=25240`1`i+468023,
//    2424PHI1+24740`1`i<=51PHI2+482327,
//    3576PHI1+2401PHI2<=13240`1`i+466773,
//    3576PHI1+4851PHI2+11260`1`i<=946873,
//    37624PHI1+76799PHI2<=391750`1`i+7486376,
//    114072PHI1+1188250`1`i<=239853PHI2+11058028, 0`1`i<=PHI1+1,
//    PHI1<=0`1`i+98, 3PHI1<=20`1`i+382, 3PHI1+0`1`i<=397,
//    48PHI1<=470`1`i+4657, 48PHI1<=0`1`i+4703, 50PHI1<=510`1`i+4849,
//    99PHI1<=0`1`i+9701, 980`1`i<=51PHI2+4751, 0`1`i<=PHI2+48,
//    PHI2+0`1`i<=199, 99PHI2<=1010`1`i+9502, 99PHI2<=20`1`i+9601,
//    N==100, 1<=0`1`i, 0`1`i<=100}>

         for(j = 1; j <= N; j += 1) {

//  <A[PHI1][PHI2]-W-MAY-{4803<=48PHI1+49PHI2+490`1`2`3`j+0`1`i,
//    PHI2+0`1`2`3`j+490`1`i<=48PHI1+147,
//    48PHI1+0`1`2`3`j+490`1`i<=PHI2+4753,
//    48PHI1+49PHI2<=490`1`2`3`j+0`1`i+4703, 0`1`i+1<=PHI2+0`1`2`3`j,
//    0`1`2`3`j+1<=PHI2+0`1`i, PHI2+0`1`i<=0`1`2`3`j+97,
//    PHI2+0`1`2`3`j<=0`1`i+97, N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=49,
//    1<=0`1`i, 0`1`i<=49}>

            //int x0 = (i*j);
            //double x1 = ((double)N / 2);
            if (2*i*j<N) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1+0`1`i==99, 0`1`2`3`j+0`1`i==PHI2+1,
//    N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=49, 1<=0`1`i, 0`1`i<=49}>

               A[N-i-1][i+j-1] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==0`1`i-1, PHI2+0`1`2`3`j+0`1`i==99,
//    N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=49, 1<=0`1`i, 0`1`i<=49}>

               A[i-1][N-i-j-1] = 1.0;
            }

//  <A[PHI1][PHI2]-W-MAY-{PHI1==0`1`i-1, PHI2==0`1`2`3`j-1,
//    0`1`2`3`j==0`1`i, N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=100}>

            if (i==j)

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==0`1`i-1, PHI2==0`1`2`3`j-1,
//    0`1`2`3`j==0`1`i, N==100, 1<=0`1`2`3`j, 0`1`2`3`j<=100}>

               A[i-1][j-1] = 1.0;
         }
      }
   }
   {
      int i;

//  <A[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=99, 0<=PHI2, PHI2<=99,
//    N==100}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==0`7`i, 0<=PHI2, PHI2<=99, N==100,
//    0<=0`7`i, 0`7`i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==0`7`i, PHI2==0`7`8`j, N==100,
//    0<=0`7`8`j, 0`7`8`j<=99, 0<=0`7`i, 0`7`i<=99}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("%f\n", A[i][j]);
      }
   }

   return 0;
}

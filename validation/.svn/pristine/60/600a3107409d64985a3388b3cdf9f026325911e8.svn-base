
POINTS TO


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY
// q -> *NULL* , MAY
// q -> _q_3[0] , MAY


// Points To OUT:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY
// q -> *NULL* , MAY
// q -> _q_3[0] , MAY

void pointer01(int n, float *p, float *q)
{

// Points To: none

   int i;

// Points To:
// p -> *NULL* , MAY
// p -> _p_2[0] , MAY
// q -> *NULL* , MAY
// q -> _q_3[0] , MAY


   if (p!=(void *) 0&&q!=(void *) 0)

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

      for(i = 0; i <= n-1; i += 1)

// Points To:
// p -> _p_2[0] , EXACT
// q -> _q_3[0] , EXACT

         p[i] = q[i];
}

Proper effects with points-to

void pointer01(int n, float *p, float *q)
{
//             <    is declared>: i
   int i;
//             <    is read   >: p q
//             <    is referenced>: p q

   if (p!=(void *) 0&&q!=(void *) 0)
//             <    is read   >: n
//             <    is written>: i
//             <    is referenced>: i n
      for(i = 0; i <= n-1; i += 1)
//             <    is read   >: _q_3[i] i n p q
//             <    is written>: _p_2[i]
//             <    is referenced>: i n p q
         p[i] = q[i];
}

Cumulated effects with points-to

//             <may be read   >: _q_3[*] n
//             <may be written>: _p_2[*]
//             <may be referenced>: n
//             <    is read   >: p q
//             <    is referenced>: p q
void pointer01(int n, float *p, float *q)
{
//             <    is declared>: i
   int i;
//             <may be read   >: _q_3[*] i n
//             <may be written>: _p_2[*] i
//             <may be referenced>: i n
//             <    is read   >: p q
//             <    is referenced>: p q

   if (p!=(void *) 0&&q!=(void *) 0)
//             <may be read   >: _q_3[*] i p q
//             <may be written>: _p_2[*]
//             <may be referenced>: p q
//             <    is read   >: n
//             <    is written>: i
//             <    is referenced>: i n
      for(i = 0; i <= n-1; i += 1)
//             <may be read   >: _q_3[*]
//             <may be written>: _p_2[*]
//             <    is read   >: i n p q
//             <    is referenced>: i n p q
         p[i] = q[i];
}

Parallel code

void pointer01(int n, float *p, float *q)
{
   int i;

   if (p!=(void *) 0&&q!=(void *) 0)
      forall(i = 0; i <= n-1; i += 1)
         p[i] = q[i];
}

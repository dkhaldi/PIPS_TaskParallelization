int init_data_float(float *ptr, const unsigned int n)
{
   int r;
   r = init_data_gen(ptr, n, sizeof(float));
   return r;
}
int init_data_cplx(float _Complex *ptr, const unsigned int n)
{
   return 0;
}
int init_data_long(long int *ptr, const unsigned int n)
{
   return init_data_gen(ptr, n, sizeof(long int));
}
int init_data_int(int *ptr, const unsigned int n)
{
   return init_data_gen(ptr, n, sizeof(int));
}
void conv(int M, float h[1+M], int L, float x[L+M], float y[L+M])
{
   int n, m;

#pragma omp parallel for private(m)
   for(n = M; n <= L+M-1; n += 1) {
      y[n] = 0;
      for(m = 0; m <= M-1; m += 1)
         y[n] += h[m]*x[n+m];
   }
}
void print_array_cplx(const char *name, const float _Complex *arr, const unsigned int n)
{
   int i;
#pragma omp parallel for
   for(i = 0; i <= n-1; i += 1)
      printf("%f %f\n", crealf(arr[i]), cimagf(arr[i]));
}
void close_data_file()
{
   if (_f_data_file!=0)
      fclose(_f_data_file);
}
void print_array_long(const char *name, const long int *arr, const unsigned int n)
{
   int i;
   char formatnl[10];
   printf("%s :\n", name);
   printf("----\n");
   formatnl[7] = 0;
   strncpy(formatnl, "%a", 7);
   strncat(formatnl, "\n", 2);
#pragma omp parallel for
   for(i = 0; i <= n-1; i += 1)
      printf(formatnl, *(arr+i));
   printf("----\n");
}
int init_data_gen(void *ptr, const unsigned int n, const ssize_t stype)
{
   return _init_data(ptr, (ssize_t) n*stype);
}
void print_array_double(const char *name, const float *arr, const unsigned int n)
{
   int i;
   char formatnl[10];
   printf("%s :\n", name);
   printf("----\n");
   formatnl[7] = 0;
   strncpy(formatnl, "%a", 7);
   strncat(formatnl, "\n", 2);
#pragma omp parallel for
   for(i = 0; i <= n-1; i += 1)
      printf(formatnl, *(arr+i));
   printf("----\n");
}
int _init_data(void *ptr, const ssize_t n)
{
   ssize_t nr;
   ssize_t ntoread;

   ntoread = n;
   if (_f_data_file==0) {
      fprintf(stderr, "Data file must be initialized !\n");
      exit(1);
   }
   while (ntoread>0) {
      nr = fread(ptr, 1, ntoread, _f_data_file);
      if (nr==0&&ferror(_f_data_file)) {
         perror("read data file");
         clearerr(_f_data_file);
         return *__errno_location();
      }
      if (nr<ntoread) {
         //		fprintf(stderr, "%d bytes remaining...\n", ntoread-nr);
         fseek(_f_data_file, 0L, 0);
         fflush(_f_data_file);
      }
      ntoread -= nr;
      ptr += nr;
   }
   
   // Old implementation... :
   //fprintf(stderr, "Warning: missing %d bytes in data file ! Filling with zeros...\n", n-nr);
   // This makes pips crashes... !!
   //memset(ptr + nr, 0, n-nr);
   return nr;
}
int main(int argc, char **argv)
{
   int n;
   n = atoi(argv[1]);
   int m;
   m = atoi(argv[2]);
   float (*in)[n+m];
   in = (float (*)[n+m]) malloc(sizeof(float)*(n+m));
   float (*kern)[1+m];
   kern = (float (*)[1+m]) malloc(sizeof(float)*(1+m));
   float (*out)[n+m];
   out = (float (*)[n+m]) malloc(sizeof(float)*(n+m));
   if (argc<4) {
      fprintf(stderr, "Usage: %s kernel_size conv_size data_file", argv[0]);
      return 1;
   }
   init_data_file(argv[3]);
   init_data_float(*in, n+m);
   init_data_float(*kern, m+1);
   conv(m, *kern, n, *in, *out);
   print_array_float("res", *out, n+m);
   return 0;
}
void print_array_int(const char *name, const int *arr, const unsigned int n)
{
   int i;
   char formatnl[10];
   printf("%s :\n", name);
   printf("----\n");
   formatnl[7] = 0;
   strncpy(formatnl, "%d", 7);
   strncat(formatnl, "\n", 2);
#pragma omp parallel for
   for(i = 0; i <= n-1; i += 1)
      printf(formatnl, *(arr+i));
   printf("----\n");
}
int init_data_double(double *ptr, const unsigned int n)
{
   return init_data_gen(ptr, n, sizeof(double));
}
void init_data_file(const char *data_file)
{
   if (_f_data_file!=0)
      return;
   _f_data_file = fopen(data_file, "r");
   if (_f_data_file==0) {
      perror("open data file");
      exit(*__errno_location());
   }
}
void print_array_float(const char *name, const float *arr, const unsigned int n)
{
   int i;
   char formatnl[10];
   printf("%s :\n", name);
   printf("----\n");
   formatnl[7] = 0;
   strncpy(formatnl, "%f", 7);
   strncat(formatnl, "\n", 2);
   for(i = 0; i <= n-1; i += 1)
      printf(formatnl, *(arr+i));
   printf("----\n");
}
void init_args(int argc, char **argv)
{
   if (argc<3) {
      fprintf(stderr, "Usage: %s kernel_size data_file\n", argv[0]);
      exit(1);
   }
   init_data_file(argv[2]);
}

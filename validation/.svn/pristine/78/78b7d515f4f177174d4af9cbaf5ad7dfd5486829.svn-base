
POINTS-TO


// Points To IN:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0
//    ][0][0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY


// Points To OUT:
// a_m_serial -> *NULL_POINTER* , EXACT
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

ATOM * a_m_serial(int serial)
{

// Points To: none

   static ATOM *ap = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT

   static ATOM *lastmatched = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

   int i, n, a_number();

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

   if (atomUPDATE)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

      n = a_number();
   else

// Points To:
// ap -> *NULL_POINTER* , EXACT
// lastmatched -> *NULL_POINTER* , EXACT

      n = atomNUMBER;

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , EXACT


   ap = first;

// Points To:
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , EXACT

   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , EXACT

      return (void *) 0;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , EXACT

   if (lastmatched==(void *) 0)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , EXACT

      lastmatched = first;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY


   if (serial==lastmatched->serial)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

      return lastmatched;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

   if (serial>lastmatched->serial)

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

      ap = lastmatched;

// Points To:
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

   for(i = 0; i <= n-1; i += 1) {

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY

      if (ap->serial==serial) {

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY

         lastmatched = ap;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0
//    ][0][0] , MAY

         return ap;
      }

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0
//    ][0][0] , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0]
//    [0][0] , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0
//    ][0][0] , MAY

      if (ap==ap->next)

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0
//    ][0][0] , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0]
//    [0][0] , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0
//    ][0][0] , MAY

         ap = first;
      else

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// _first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0] , MAY
// _first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8[0][0][0].next -> _first_8_3__8_3__8_3__8[0][0][0
//    ][0] , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> *NULL_POINTER*
//     , MAY
// _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0
//    ][0][0] , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// a_m_serial -> _first_8_3__8[0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8[0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// a_m_serial -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0]
//    [0][0] , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// ap -> _first_8_3__8[0][0] , MAY
// ap -> _first_8_3__8_3__8[0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// ap -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY
// lastmatched -> _first_8_3__8[0][0] , MAY
// lastmatched -> _first_8_3__8_3__8[0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//     , MAY
// lastmatched -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0
//    ][0][0] , MAY

         ap = ap->next;
   }

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b1 -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// a_m_serial -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// a_m_serial -> *NULL_POINTER* , MAY
// a_m_serial -> _first_8[0] , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// lastmatched -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// lastmatched -> *NULL_POINTER* , MAY
// lastmatched -> _first_8[0] , MAY

   return (void *) 0;
}

// Points To IN:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY


// Points To OUT:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8_3__8[0][0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8_3__8[0][0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

ATOM * a_next(int flag)
{

// Points To: none

   static ATOM *ap = (void *) 0;

// Points To:
// ap -> *NULL_POINTER* , EXACT

   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      ap = first;

// Points To:
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   if (ap==(void *) 0)

// Points To:
// ap -> *NULL_POINTER* , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      return (void *) 0;

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   if (flag<=0) {

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      ap = first;

// Points To:
// a_next -> *NULL_POINTER* , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      return ap;
   }

// Points To:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8[0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   if (ap==ap->next)

// Points To:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8[0] , MAY
// ap -> _first_8[0] , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      return (void *) 0;

// Points To:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8[0] , MAY
// ap -> _first_8[0] , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   ap = ap->next;

// Points To:
// _first_8[0].next -> *NULL_POINTER* , MAY
// _first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_next -> *NULL_POINTER* , MAY
// a_next -> _first_8[0] , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8_3__8[0][0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   return ap;
}

// Points To IN:
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY


// Points To OUT:
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

int a_number()
{

// Points To: none

   ATOM *ap;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   if (atomUPDATE) {

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      atomUPDATE = 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      atomNUMBER = 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      if (first==(void *) 0)

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// first -> *NULL_POINTER* , EXACT

         return 0;

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

      ap = first;
l99999:      ;

// Points To: none

      if (!1) goto _break_1;

// Points To: unreachable

      if (ap->next==(void *) 0) goto _break_1;

// Points To: none

      atomNUMBER++;

// Points To: none

      if (ap->next==ap) goto _break_1;

// Points To: none

      ap = ap->next;
      goto l99999;

// Points To:
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

_break_1:      ;
   }

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY
// ap -> _first_8[0] , MAY
// first -> *NULL_POINTER* , MAY
// first -> _first_8[0] , MAY

   return atomNUMBER;
}

// Points To IN:
// a_m_serial:_first_8[0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_m_serial:_first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0]
//     , MAY
// a_m_serial:_first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8[0][0][0].next -> 
//    _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//    [0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//    [0].next -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0]
//    [0][0][0][0][0] , MAY


// Points To OUT: none

int activate(int i1, int i2)
{

// Points To: none

   int upper, lower;

// Points To: none

   ATOM *ap, *a_m_serial(int), *a_next(int);

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   int i, numatm, a_number();

// Points To:
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT


   if (i2==0) {

// Points To:
// a_m_serial:_first_8[0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8[0].next -> _first_8_3__8[0][0] , MAY
// a_m_serial:_first_8_3__8[0][0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8[0][0].next -> _first_8_3__8_3__8[0][0][0]
//     , MAY
// a_m_serial:_first_8_3__8_3__8[0][0][0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8[0][0][0].next -> 
//    _first_8_3__8_3__8_3__8[0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8[0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8[0][0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8[0][0][0][0][0].next -> 
//    _first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0] , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next
//     -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0].next
//     -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0][0]
//     , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//    [0].next -> *NULL_POINTER* , MAY
// a_m_serial:_first_8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0][0][0][0]
//    [0].next -> _first_8_3__8_3__8_3__8_3__8_3__8_3__8_3__8[0][0][0]
//    [0][0][0][0][0] , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      ap = a_m_serial(i1);

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

      if (ap!=(void *) 0)

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

         ap->active = 1;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *NULL_POINTER* , MAY

      return 0;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY


   upper = i2;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   lower = i1;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   if (i2<i1) {

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      lower = i2;

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      upper = i1;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY


   numatm = a_number();

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   for(i = 0; i <= numatm-1; i += 1) {

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

      ap = a_next(i);

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

      if (ap->serial>=lower&&ap->serial<=upper)

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

         ap->active = 1;
   }

// Points To:
// ap -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// ap -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// ap -> *NULL_POINTER* , MAY

   return 0;
}
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (source_to_sinks) 
Uninitialized or null pointer dereferenced: Sink missing for a source based on "ap".
Update points-to property POINTS_TO_UNINITIALIZED_POINTER_DEREFERENCING and/or POINTS_TO_UNINITIALIZED_NULL_DEREFERENCING according to needs.
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (reference_dereferencing_to_points_to) Null or undefined pointer may be dereferenced because of "ap".
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (source_to_sinks) 
Uninitialized or null pointer dereferenced: Sink missing for a source based on "ap".
Update points-to property POINTS_TO_UNINITIALIZED_POINTER_DEREFERENCING and/or POINTS_TO_UNINITIALIZED_NULL_DEREFERENCING according to needs.
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (reference_to_points_to_sinks) Some kind of execution error has been encountered at line 52.
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (binary_intrinsic_call_to_points_to_sinks) Some kind of execution error has been encountered.
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_number] (pointer_assignment_to_points_to) Expression "ap->next" could not be dereferenced at line 52.
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[a_m_serial] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.
C_PARSER[activate] (check_C_function_type) Type updated for function "a_m_serial"
C_PARSER[activate] (check_C_function_type) Type updated for function "a_next"

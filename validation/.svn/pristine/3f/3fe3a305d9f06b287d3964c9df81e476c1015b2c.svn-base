      SUBROUTINE CREATE (IPOINT, ITYPE, LONG)

C_ARGUMENTS
C_INPUT/OUTPUT
      INTEGER     IPOINT, ITYPE, LONG

C_LOCAL
      INTEGER          INAN

C     GENERAL INFORMATION FOR THE DATA STRUCTURE MANAGEMENT
C
C_LOCAL
C
      INTEGER                         NMEMOH
      PARAMETER                      (NMEMOH = 2+ 12)
      INTEGER                  IMEMOH(NMEMOH)
C
      EQUIVALENCE     (JMEMOH, IMEMOH(1))
      EQUIVALENCE     (MMEMOH, IMEMOH(NMEMOH))
C
C_KEY
      INTEGER          KMEMOH
      PARAMETER      ( KMEMOH = 90199 )
C
C_POINTERS
C
      INTEGER        JMEMOH
C
C     DOUBLE PRECISION MEMORY SPACE
      INTEGER        LNEXTA , LFREEA , MNEXTA
C
C     INTEGER MEMORY SPACE
      INTEGER        LNEXTIA, LFREEIA, MNEXTIA
C
C     WORD MEMORY SPACE
      INTEGER        LNEXTCA, LFREECA, MNEXTCA
C
C     POINTER MEMORY SPACE
      INTEGER        LNEXTIP, LFREEIP, MNEXTIP
C
      INTEGER        MMEMOH
C
      COMMON /HMEMO/ JMEMOH
     1             , LNEXTA , LFREEA , MNEXTA
     2             , LNEXTIA, LFREEIA, MNEXTIA
     3             , LNEXTCA, LFREECA, MNEXTCA
     4             , LNEXTIP, LFREEIP, MNEXTIP
     Z             , MMEMOH
C
C_END_DOCUMENT

      INTEGER     LONGIP0, LONGA0, LONGIA0
      PARAMETER ( LONGIP0=4000000, LONGA0=14000000, LONGIA0=16000000 )
C
      INTEGER     LONGA        ,  LONGIA       ,  LONGCA
C      PARAMETER ( LONGA=1800000,  LONGIA=140000,  LONGCA=200000 )
C_UPDATE_1
      PARAMETER ( LONGA=2400000,  LONGIA=300000,  LONGCA=400000 )
C_UPDATE_1
C
C   MEMORY SPACE OF DOUBLE PRECISION ENTITIES
C
      INTEGER     MINA              , MAXA
      PARAMETER ( MINA = LONGIP0+1  , MAXA = MINA+LONGA-1 )
C
      DOUBLE PRECISION  A(MINA:MAXA)
      COMMON  /FAST/    A
C
C
C   MEMORY SPACE OF INTEGER ENTITIES
C
      INTEGER     MINIA          , MAXIA
      PARAMETER ( MINIA = LONGA0+1 , MAXIA = MINIA+LONGIA-1 )
C
      INTEGER          IA(MINIA:MAXIA)
      COMMON  /IFAST/  IA
C
C_END_DOCUMENT

      IF       (ITYPE .EQ. LDOUBL)  THEN
C
C     MEMORY ALLOCATION FOR DOUBLE PRECISION ARRAYS
C
        IF  (LONG .LE. LFREEA)  THEN
C
          IPOINT = LNEXTA
          LNEXTA = LNEXTA + LONG
          LFREEA = LFREEA - LONG
          IF (INAN.GT.0) THEN
	    LNEXTA = LNEXTA + 1
            LFREEA = LFREEA - 1
            A(LNEXTA-1) = NAND(-1.0D0)
	  ENDIF
        ELSE
          IPOINT = LNULL
	  WRITE (IOSTER,*)  'NO MEMORY SPACE LEFT FOR DOUBLE'
	  WRITE (IOSTER,*)  'NEED ', LONG, ' : ', LFREEA, ' LEFT'
	  GOTO 9999
        ENDIF
C
C
      ELSE IF  (ITYPE .EQ. LINTEG)  THEN
C
C     MEMORY ALLOCATION FOR INTEGER ARRAYS
C
        IF  (LONG .LE. LFREEIA)  THEN
          IPOINT  = LNEXTIA
          LNEXTIA = LNEXTIA + LONG
          LFREEIA = LFREEIA - LONG
          IF (INAN.GT.0) THEN
	    LNEXTIA = LNEXTIA + 1
            LFREEIA = LFREEIA - 1
            IA(LNEXTIA-1) = INFINI(1)
	  ENDIF
        ELSE
          IPOINT = LNULL
	  WRITE (IOSTER,*)  'NO MEMORY SPACE LEFT FOR INTEGER'
	  WRITE (IOSTER,*)  'NEED ', LONG, ' : ', LFREEIA, ' LEFT'
	  GOTO 9999
        ENDIF
C
C
      ELSE
        PRINT *, 'INVALID TYPE OF DATA IN CREATE REQUEST '
	WRITE (IOSTER,*)  'INVALID DATA TYPE IN ALLOCATION REQUEST'
	GOTO 9999
C
      ENDIF
C
C
8888  RETURN
9999  WRITE (IOSTER,90000)
90000 FORMAT(' @(#) CREATE.f +_v14e_+ 2.1 05/26/97 ')
C      RETURN  1
      END


Points-to for "foo"


// Points To IN:
// b -> *NULL* , MAY
// b -> _b_1[0][0] , MAY


// Points To OUT:
// b -> _b_1[0][0] , EXACT

int foo(float (*b)[3])
{

// Points To: none

   float c;

// Points To:
// b -> *NULL* , MAY
// b -> _b_1[0][0] , MAY

   (*b)[3] = 2.0;

// Points To:
// b -> _b_1[0][0] , EXACT

   c = (*b)[3];

// Points To:
// b -> _b_1[0][0] , EXACT

   b[1][3] = 2.0;

// Points To:
// b -> _b_1[0][0] , EXACT

   c = b[1][3];

// Points To:
// b -> _b_1[0][0] , EXACT

   (*b)[3]++;

// Points To:
// b -> _b_1[0][0] , EXACT

   (*b)[3] += 5.0;

// Points To:
// b -> _b_1[0][0] , EXACT

   b[1][3]++;

// Points To:
// b -> _b_1[0][0] , EXACT

   b[1][3] += 5.0;

// Points To:
// b -> _b_1[0][0] , EXACT

   return 1;
}

Cumulated effects for "foo"

//             <may be read   >: _b_1[*][3]
//             <may be written>: _b_1[*][3]
//             <    is read   >: b
int foo(float (*b)[3])
{
   float c;
//             <    is read   >: b
//             <    is written>: _b_1[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: _b_1[0][3] b
//             <    is written>: c
   c = (*b)[3];
//             <    is read   >: b
//             <    is written>: _b_1[1][3]
   b[1][3] = 2.0;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: _b_1[0][3] b
//             <    is written>: _b_1[0][3]
   (*b)[3]++;
//             <    is read   >: _b_1[0][3] b
//             <    is written>: _b_1[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: _b_1[1][3]
   b[1][3]++;
//             <    is read   >: _b_1[1][3] b
//             <    is written>: _b_1[1][3]
   b[1][3] += 5.0;
   return 1;
}

Points-to for "foo2"


// Points To IN: none


// Points To OUT: none

int foo2(float b[5][3])
{

// Points To: none

   float c;

// Points To: none

   (*b)[3] = 2.0;

// Points To: none

   c = (*b)[3];

// Points To: none

   b[1][3] = 2.0;

// Points To: none

   c = b[1][3];

// Points To: none

   (*b)[3]++;

// Points To: none

   (*b)[3] += 5.0;

// Points To: none

   b[1][3]++;

// Points To: none

   b[1][3] += 5.0;

// Points To: none


   return 1;
}

Cumulated effects for "foo2"

//             <may be read   >: b[*][3]
//             <may be written>: b[*][3]
int foo2(float b[5][3])
{
   float c;
//             <    is written>: b[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: b[0][3]
//             <    is written>: c
   c = (*b)[3];
//             <    is written>: b[1][3]
   b[1][3] = 2.0;
//             <    is read   >: b[1][3]
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3]++;
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3]++;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3] += 5.0;

   return 1;
}

Points-to for "foo3"


// Points To IN: none


// Points To OUT: none

int foo3()
{

// Points To: none

   float c;

// Points To: none

   (*d)[3] = 2.0;

// Points To: none

   c = (*d)[3];

// Points To: none

   d[1][3] = 2.0;

// Points To: none

   c = d[1][3];

// Points To: none

   (*d)[3]++;

// Points To: none

   (*d)[3] += 5.0;

// Points To: none

   d[1][3]++;

// Points To: none

   d[1][3] += 5.0;

// Points To: none


   return 1;
}

Cumulated effects for "foo3"

//             <may be read   >: d[*][3]
//             <may be written>: d[*][3]
int foo3()
{
   float c;
//             <    is written>: d[0][3]
   (*d)[3] = 2.0;
//             <    is read   >: d[0][3]
//             <    is written>: c
   c = (*d)[3];
//             <    is written>: d[1][3]
   d[1][3] = 2.0;
//             <    is read   >: d[1][3]
//             <    is written>: c
   c = d[1][3];
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3]++;
//             <    is read   >: d[0][3]
//             <    is written>: d[0][3]
   (*d)[3] += 5.0;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3]++;
//             <    is read   >: d[1][3]
//             <    is written>: d[1][3]
   d[1][3] += 5.0;

   return 1;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   float a[5][3], ret;

// Points To: none


   ret = foo(a);

// Points To: none

   ret = foo2(a);

// Points To: none

   ret = foo3();

// Points To: none


   return 1;
}

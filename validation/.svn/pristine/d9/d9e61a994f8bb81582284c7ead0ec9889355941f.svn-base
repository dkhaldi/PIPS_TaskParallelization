# Make sure that efects in initializations are taken into account one
# way or another

delete flatten_code12

setproperty ABORT_ON_USER_ERROR TRUE
setproperty PRETTYPRINT_BLOCKS TRUE

create flatten_code12 flatten_code12.c

activate C_PARSER
setproperty PRETTYPRINT_LANGUAGE "C"
setproperty PRETTYPRINT_STATEMENT_NUMBER   FALSE
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER  TRUE

setproperty PRETTYPRINT_STATEMENT_ORDERING TRUE
setproperty PRETTYPRINT_STATEMENT_NUMBER   TRUE
activate TRANSFORMERS_INTRA_FAST
activate INTRAPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTRA

echo
echo Execute initial code
echo

shell cc flatten_code12.database/Tmp/flatten_code12.cpp_processed.c -o flatten_code12.out
shell ./flatten_code12.out
shell rm flatten_code12.out

echo
echo Initial code
echo
display PRINTED_FILE[flatten_code12]

echo
echo Code with cumulated effects
echo

activate PRINT_CODE_CUMULATED_EFFECTS
display PRINTED_FILE[flatten_code12]

echo
echo Code with transformers
echo

activate PRINT_CODE_TRANSFORMERS
display PRINTED_FILE[flatten_code12]

echo
echo Code with preconditions
echo

activate PRINT_CODE_PRECONDITIONS
display PRINTED_FILE[flatten_code12]

echo
echo Code after code flattening
echo

apply FLATTEN_CODE[flatten_code12]
activate PRINT_CODE
display PRINTED_FILE[flatten_code12]

echo
echo Unsplit and compile resulting code
echo

apply UNSPLIT
# shell cat flatten_code12.database/Src/flatten_code12.c
shell cc -o flatten_code12.out flatten_code12.database/Src/flatten_code12.c

echo
echo Execute resulting code
echo

shell ./flatten_code12.out
shell rm flatten_code12.out

close
# delete flatten_code12
quit


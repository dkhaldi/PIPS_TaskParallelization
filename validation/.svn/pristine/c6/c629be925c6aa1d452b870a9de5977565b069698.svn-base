
Initial code

void flatten_code12(void)
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int i = (int) foo_0;                                                 /*0015*/
// (0,3)

   foo_0++;                                                             /*0017*/
// (0,4)

   for(i = i; i <= 6; i += 1) {                                         /*0019*/
// (0,5)
      // BEGIN BLOCK
// (0,6)
      static int foo = 0;                                               /*0020*/
// (0,7)

      foo++;                                                            /*0022*/
// (0,8)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0024*/
      // END BLOCK
   }
// (0,9)
   fprintf(stdout, "foo_0=%f\n", foo_0);                                /*0026*/
   // END BLOCK
}

Code after code flattening

void flatten_code12(void)
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int i = (int) foo_0;                                                 /*0015*/
   //PIPS generated variable
// (0,3)
   static int foo = 0;
// (0,4)

   foo_0++;                                                             /*0017*/
// (0,5)

   for(i = i; i <= 6; i += 1) {                                         /*0019*/
// (0,6)
      // BEGIN BLOCK
// (0,7)

      foo++;                                                            /*0022*/
// (0,8)

      fprintf(stdout, "foo=%d\n", foo);                                 /*0024*/
      // END BLOCK
   }
// (0,9)
   fprintf(stdout, "foo_0=%f\n", foo_0);                                /*0026*/
   // END BLOCK
}

Unsplit and compile resulting code

#
# compile run compare both flatten_code12
#

#
# AIPO
#
#
# compile generated lp
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *immir, *imopen, *imclose, *imopenth, *imcloseth;  /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_data2d *imtmp_0, *imtmp_1, *imtmp_2, *imtmp_3;                 /*0013*/
   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0022*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0034*/

   ret = freia_aipo_copy(imtmp_0, in);                                  /*0036*/

   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0038*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0039*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0040*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0041*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0042*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0043*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0044*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0045*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0046*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0047*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0048*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0049*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0050*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0051*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0052*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0053*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0054*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0055*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0056*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0057*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0058*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0059*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0060*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0061*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0062*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0063*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0064*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0065*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0066*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0067*/

   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0069*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0070*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0071*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0072*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0073*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0074*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0075*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0076*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0077*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0078*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0079*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0080*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0081*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0082*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0083*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0084*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0085*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0086*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0087*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0088*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0089*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0090*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0091*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0092*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0093*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0094*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0095*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0096*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0097*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0098*/

   freia_common_destruct_data(imtmp_0);                                 /*0100*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0102*/

   ret |= freia_aipo_copy(imtmp_1, in);                                 /*0104*/

   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0106*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0107*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0108*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0109*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0110*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0111*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0112*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0113*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0114*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0115*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0116*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0117*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0118*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0119*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0120*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0121*/

   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0123*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0124*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0125*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0126*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0127*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0128*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0129*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0130*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0131*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0132*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0133*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0134*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0135*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0136*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0137*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0138*/

   freia_common_destruct_data(imtmp_1);                                 /*0140*/

   ret |= freia_aipo_threshold(imopenth, imopen, 1, 50, 1);             /*0142*/
   ret |= freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);        /*0143*/
   ret |= freia_aipo_and(imand, imopenth, imcloseth);                   /*0144*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0146*/

   ret |= freia_aipo_copy(imtmp_2, imand);                              /*0148*/

   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0150*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0151*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0152*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0153*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0154*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0155*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0156*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0157*/

   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0159*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0160*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0161*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0162*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0163*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0164*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0165*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0166*/

   freia_common_destruct_data(imtmp_2);                                 /*0168*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0170*/

   ret |= freia_aipo_copy(imtmp_3, imfilt);                             /*0172*/

   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0174*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0175*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0176*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0177*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0178*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0179*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0180*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0181*/

   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0183*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0184*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0185*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0186*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0187*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0188*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0189*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0190*/

   freia_common_destruct_data(imtmp_3);                                 /*0192*/

   ret |= freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);     /*0194*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0195*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0196*/
   ret |= freia_aipo_and(out, out, in);                                 /*0197*/

   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(immir);                                   /*0202*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=0 #I=66 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out"];
  "190 =" [shape=circle];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "189 D8" -> "190 =" [label="imout"];
  "188 =" [shape=circle];
  "188 =" -> "189 D8" [label="imtmp_3"];
  "187 D8" [shape=box];
  "187 D8" -> "188 =" [label="imout"];
  "186 =" [shape=circle];
  "186 =" -> "187 D8" [label="imtmp_3"];
  "185 D8" [shape=box];
  "185 D8" -> "186 =" [label="imout"];
  "184 =" [shape=circle];
  "184 =" -> "185 D8" [label="imtmp_3"];
  "183 D8" [shape=box];
  "183 D8" -> "184 =" [label="imout"];
  "181 =" [shape=circle];
  "181 =" -> "183 D8" [label="imtmp_3"];
  "180 E8" [shape=box];
  "180 E8" -> "181 =" [label="imout"];
  "179 =" [shape=circle];
  "179 =" -> "180 E8" [label="imtmp_3"];
  "178 E8" [shape=box];
  "178 E8" -> "179 =" [label="imout"];
  "177 =" [shape=circle];
  "177 =" -> "178 E8" [label="imtmp_3"];
  "176 E8" [shape=box];
  "176 E8" -> "177 =" [label="imout"];
  "175 =" [shape=circle];
  "175 =" -> "176 E8" [label="imtmp_3"];
  "174 E8" [shape=box];
  "174 E8" -> "175 =" [label="imout"];
  "172 =" [shape=circle];
  "172 =" -> "174 E8" [label="imtmp_3"];
  "166 =" [shape=circle];
  "165 D8" [shape=box];
  "165 D8" -> "172 =" [label="imfilt"];
  "165 D8" -> "166 =" [label="imfilt"];
  "164 =" [shape=circle];
  "164 =" -> "165 D8" [label="imtmp_2"];
  "163 D8" [shape=box];
  "163 D8" -> "164 =" [label="imfilt"];
  "162 =" [shape=circle];
  "162 =" -> "163 D8" [label="imtmp_2"];
  "161 D8" [shape=box];
  "161 D8" -> "162 =" [label="imfilt"];
  "160 =" [shape=circle];
  "160 =" -> "161 D8" [label="imtmp_2"];
  "159 D8" [shape=box];
  "159 D8" -> "160 =" [label="imfilt"];
  "157 =" [shape=circle];
  "157 =" -> "159 D8" [label="imtmp_2"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imfilt"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_2"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imfilt"];
  "153 =" [shape=circle];
  "153 =" -> "154 E8" [label="imtmp_2"];
  "152 E8" [shape=box];
  "152 E8" -> "153 =" [label="imfilt"];
  "151 =" [shape=circle];
  "151 =" -> "152 E8" [label="imtmp_2"];
  "150 E8" [shape=box];
  "150 E8" -> "151 =" [label="imfilt"];
  "148 =" [shape=circle];
  "148 =" -> "150 E8" [label="imtmp_2"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "148 =" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "138 =" [shape=circle];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "137 E8" -> "138 =" [label="imclose"];
  "136 =" [shape=circle];
  "136 =" -> "137 E8" [label="imtmp_1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "135 E8" [label="imtmp_1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 =" [label="imclose"];
  "132 =" [shape=circle];
  "132 =" -> "133 E8" [label="imtmp_1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 =" [label="imclose"];
  "130 =" [shape=circle];
  "130 =" -> "131 E8" [label="imtmp_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 =" [label="imclose"];
  "128 =" [shape=circle];
  "128 =" -> "129 E8" [label="imtmp_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 =" [label="imclose"];
  "126 =" [shape=circle];
  "126 =" -> "127 E8" [label="imtmp_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 =" [label="imclose"];
  "124 =" [shape=circle];
  "124 =" -> "125 E8" [label="imtmp_1"];
  "123 E8" [shape=box];
  "123 E8" -> "124 =" [label="imclose"];
  "121 =" [shape=circle];
  "121 =" -> "123 E8" [label="imtmp_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imclose"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imclose"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imclose"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imclose"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imclose"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imclose"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imclose"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imclose"];
  "104 =" [shape=circle];
  "104 =" -> "106 D8" [label="imtmp_1"];
  "98 =" [shape=circle];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "97 D8" -> "98 =" [label="imopen"];
  "96 =" [shape=circle];
  "96 =" -> "97 D8" [label="imtmp_0"];
  "95 D8" [shape=box];
  "95 D8" -> "96 =" [label="imopen"];
  "94 =" [shape=circle];
  "94 =" -> "95 D8" [label="imtmp_0"];
  "93 D8" [shape=box];
  "93 D8" -> "94 =" [label="imopen"];
  "92 =" [shape=circle];
  "92 =" -> "93 D8" [label="imtmp_0"];
  "91 D8" [shape=box];
  "91 D8" -> "92 =" [label="imopen"];
  "90 =" [shape=circle];
  "90 =" -> "91 D8" [label="imtmp_0"];
  "89 D8" [shape=box];
  "89 D8" -> "90 =" [label="imopen"];
  "88 =" [shape=circle];
  "88 =" -> "89 D8" [label="imtmp_0"];
  "87 D8" [shape=box];
  "87 D8" -> "88 =" [label="imopen"];
  "86 =" [shape=circle];
  "86 =" -> "87 D8" [label="imtmp_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 =" [label="imopen"];
  "84 =" [shape=circle];
  "84 =" -> "85 D8" [label="imtmp_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 =" [label="imopen"];
  "82 =" [shape=circle];
  "82 =" -> "83 D8" [label="imtmp_0"];
  "81 D8" [shape=box];
  "81 D8" -> "82 =" [label="imopen"];
  "80 =" [shape=circle];
  "80 =" -> "81 D8" [label="imtmp_0"];
  "79 D8" [shape=box];
  "79 D8" -> "80 =" [label="imopen"];
  "78 =" [shape=circle];
  "78 =" -> "79 D8" [label="imtmp_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 =" [label="imopen"];
  "76 =" [shape=circle];
  "76 =" -> "77 D8" [label="imtmp_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 =" [label="imopen"];
  "74 =" [shape=circle];
  "74 =" -> "75 D8" [label="imtmp_0"];
  "73 D8" [shape=box];
  "73 D8" -> "74 =" [label="imopen"];
  "72 =" [shape=circle];
  "72 =" -> "73 D8" [label="imtmp_0"];
  "71 D8" [shape=box];
  "71 D8" -> "72 =" [label="imopen"];
  "70 =" [shape=circle];
  "70 =" -> "71 D8" [label="imtmp_0"];
  "69 D8" [shape=box];
  "69 D8" -> "70 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "69 D8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "63 =" [shape=circle];
  "63 =" -> "64 E8" [label="imtmp_0"];
  "62 E8" [shape=box];
  "62 E8" -> "63 =" [label="imopen"];
  "61 =" [shape=circle];
  "61 =" -> "62 E8" [label="imtmp_0"];
  "60 E8" [shape=box];
  "60 E8" -> "61 =" [label="imopen"];
  "59 =" [shape=circle];
  "59 =" -> "60 E8" [label="imtmp_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 =" [label="imopen"];
  "57 =" [shape=circle];
  "57 =" -> "58 E8" [label="imtmp_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 =" [label="imopen"];
  "55 =" [shape=circle];
  "55 =" -> "56 E8" [label="imtmp_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 =" [label="imopen"];
  "53 =" [shape=circle];
  "53 =" -> "54 E8" [label="imtmp_0"];
  "52 E8" [shape=box];
  "52 E8" -> "53 =" [label="imopen"];
  "51 =" [shape=circle];
  "51 =" -> "52 E8" [label="imtmp_0"];
  "50 E8" [shape=box];
  "50 E8" -> "51 =" [label="imopen"];
  "49 =" [shape=circle];
  "49 =" -> "50 E8" [label="imtmp_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 =" [label="imopen"];
  "47 =" [shape=circle];
  "47 =" -> "48 E8" [label="imtmp_0"];
  "46 E8" [shape=box];
  "46 E8" -> "47 =" [label="imopen"];
  "45 =" [shape=circle];
  "45 =" -> "46 E8" [label="imtmp_0"];
  "44 E8" [shape=box];
  "44 E8" -> "45 =" [label="imopen"];
  "43 =" [shape=circle];
  "43 =" -> "44 E8" [label="imtmp_0"];
  "42 E8" [shape=box];
  "42 E8" -> "43 =" [label="imopen"];
  "41 =" [shape=circle];
  "41 =" -> "42 E8" [label="imtmp_0"];
  "40 E8" [shape=box];
  "40 E8" -> "41 =" [label="imopen"];
  "39 =" [shape=circle];
  "39 =" -> "40 E8" [label="imtmp_0"];
  "38 E8" [shape=box];
  "38 E8" -> "39 =" [label="imopen"];
  "36 =" [shape=circle];
  "36 =" -> "38 E8" [label="imtmp_0"];
  "in" -> "197 &";
  "in" -> "104 =";
  "in" -> "36 =";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
  "in" -> "197 &";
}

! updated function for AIPO

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose, *imopenth, *imcloseth;          /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   freia_aipo_erode_8c(imopen, in, kernel1x3);                          /*0038*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0040*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0042*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0044*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0046*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0048*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0050*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0052*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0054*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0056*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0058*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0060*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0062*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0064*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0066*/

   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0069*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0071*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0073*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0075*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0077*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0079*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0081*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0083*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0085*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0087*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0089*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0091*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0093*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0095*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0097*/
   
   
   freia_aipo_dilate_8c(imclose, in, kernel1x3);                        /*0106*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0108*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0110*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0112*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0114*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0116*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0118*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0120*/

   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0123*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0125*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0127*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0129*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0131*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0133*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0135*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0137*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0142*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0143*/
   freia_aipo_and(imand, imopenth, imcloseth);                          /*0144*/
   
   
   freia_aipo_erode_8c(imfilt, imand, kernel3x1);                       /*0150*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0152*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0154*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0156*/

   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0159*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0161*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0163*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0165*/
   
   
   freia_aipo_erode_8c(imout, imfilt, kernel1x3);                       /*0174*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0176*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0178*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0180*/

   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0183*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0185*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0187*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0189*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0194*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0195*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0196*/
   freia_aipo_and(out, out, in);                                        /*0197*/
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *immir, *imopen, *imclose, *imopenth, *imcloseth;  /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_data2d *imtmp_0, *imtmp_1, *imtmp_2, *imtmp_3;                 /*0013*/
   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0022*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0034*/

   ret = freia_aipo_copy(imtmp_0, in);                                  /*0036*/

   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0038*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0039*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0040*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0041*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0042*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0043*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0044*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0045*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0046*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0047*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0048*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0049*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0050*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0051*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0052*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0053*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0054*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0055*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0056*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0057*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0058*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0059*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0060*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0061*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0062*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0063*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0064*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0065*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0066*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0067*/

   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0069*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0070*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0071*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0072*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0073*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0074*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0075*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0076*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0077*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0078*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0079*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0080*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0081*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0082*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0083*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0084*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0085*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0086*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0087*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0088*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0089*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0090*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0091*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0092*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0093*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0094*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0095*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0096*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0097*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0098*/

   freia_common_destruct_data(imtmp_0);                                 /*0100*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0102*/

   ret |= freia_aipo_copy(imtmp_1, in);                                 /*0104*/

   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0106*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0107*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0108*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0109*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0110*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0111*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0112*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0113*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0114*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0115*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0116*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0117*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0118*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0119*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0120*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0121*/

   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0123*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0124*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0125*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0126*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0127*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0128*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0129*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0130*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0131*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0132*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0133*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0134*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0135*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0136*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0137*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0138*/

   freia_common_destruct_data(imtmp_1);                                 /*0140*/

   ret |= freia_aipo_threshold(imopenth, imopen, 1, 50, 1);             /*0142*/
   ret |= freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);        /*0143*/
   ret |= freia_aipo_and(imand, imopenth, imcloseth);                   /*0144*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0146*/

   ret |= freia_aipo_copy(imtmp_2, imand);                              /*0148*/

   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0150*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0151*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0152*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0153*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0154*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0155*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0156*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0157*/

   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0159*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0160*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0161*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0162*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0163*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0164*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0165*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0166*/

   freia_common_destruct_data(imtmp_2);                                 /*0168*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0170*/

   ret |= freia_aipo_copy(imtmp_3, imfilt);                             /*0172*/

   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0174*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0175*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0176*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0177*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0178*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0179*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0180*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0181*/

   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0183*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0184*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0185*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0186*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0187*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0188*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0189*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0190*/

   freia_common_destruct_data(imtmp_3);                                 /*0192*/

   ret |= freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);     /*0194*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0195*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0196*/
   ret |= freia_aipo_and(out, out, in);                                 /*0197*/

   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(immir);                                   /*0202*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=0 #I=66 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out"];
  "190 =" [shape=circle];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "189 D8" -> "190 =" [label="imout"];
  "188 =" [shape=circle];
  "188 =" -> "189 D8" [label="imtmp_3"];
  "187 D8" [shape=box];
  "187 D8" -> "188 =" [label="imout"];
  "186 =" [shape=circle];
  "186 =" -> "187 D8" [label="imtmp_3"];
  "185 D8" [shape=box];
  "185 D8" -> "186 =" [label="imout"];
  "184 =" [shape=circle];
  "184 =" -> "185 D8" [label="imtmp_3"];
  "183 D8" [shape=box];
  "183 D8" -> "184 =" [label="imout"];
  "181 =" [shape=circle];
  "181 =" -> "183 D8" [label="imtmp_3"];
  "180 E8" [shape=box];
  "180 E8" -> "181 =" [label="imout"];
  "179 =" [shape=circle];
  "179 =" -> "180 E8" [label="imtmp_3"];
  "178 E8" [shape=box];
  "178 E8" -> "179 =" [label="imout"];
  "177 =" [shape=circle];
  "177 =" -> "178 E8" [label="imtmp_3"];
  "176 E8" [shape=box];
  "176 E8" -> "177 =" [label="imout"];
  "175 =" [shape=circle];
  "175 =" -> "176 E8" [label="imtmp_3"];
  "174 E8" [shape=box];
  "174 E8" -> "175 =" [label="imout"];
  "172 =" [shape=circle];
  "172 =" -> "174 E8" [label="imtmp_3"];
  "166 =" [shape=circle];
  "165 D8" [shape=box];
  "165 D8" -> "172 =" [label="imfilt"];
  "165 D8" -> "166 =" [label="imfilt"];
  "164 =" [shape=circle];
  "164 =" -> "165 D8" [label="imtmp_2"];
  "163 D8" [shape=box];
  "163 D8" -> "164 =" [label="imfilt"];
  "162 =" [shape=circle];
  "162 =" -> "163 D8" [label="imtmp_2"];
  "161 D8" [shape=box];
  "161 D8" -> "162 =" [label="imfilt"];
  "160 =" [shape=circle];
  "160 =" -> "161 D8" [label="imtmp_2"];
  "159 D8" [shape=box];
  "159 D8" -> "160 =" [label="imfilt"];
  "157 =" [shape=circle];
  "157 =" -> "159 D8" [label="imtmp_2"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imfilt"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_2"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imfilt"];
  "153 =" [shape=circle];
  "153 =" -> "154 E8" [label="imtmp_2"];
  "152 E8" [shape=box];
  "152 E8" -> "153 =" [label="imfilt"];
  "151 =" [shape=circle];
  "151 =" -> "152 E8" [label="imtmp_2"];
  "150 E8" [shape=box];
  "150 E8" -> "151 =" [label="imfilt"];
  "148 =" [shape=circle];
  "148 =" -> "150 E8" [label="imtmp_2"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "148 =" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "138 =" [shape=circle];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "137 E8" -> "138 =" [label="imclose"];
  "136 =" [shape=circle];
  "136 =" -> "137 E8" [label="imtmp_1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "135 E8" [label="imtmp_1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 =" [label="imclose"];
  "132 =" [shape=circle];
  "132 =" -> "133 E8" [label="imtmp_1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 =" [label="imclose"];
  "130 =" [shape=circle];
  "130 =" -> "131 E8" [label="imtmp_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 =" [label="imclose"];
  "128 =" [shape=circle];
  "128 =" -> "129 E8" [label="imtmp_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 =" [label="imclose"];
  "126 =" [shape=circle];
  "126 =" -> "127 E8" [label="imtmp_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 =" [label="imclose"];
  "124 =" [shape=circle];
  "124 =" -> "125 E8" [label="imtmp_1"];
  "123 E8" [shape=box];
  "123 E8" -> "124 =" [label="imclose"];
  "121 =" [shape=circle];
  "121 =" -> "123 E8" [label="imtmp_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imclose"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imclose"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imclose"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imclose"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imclose"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imclose"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imclose"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imclose"];
  "104 =" [shape=circle];
  "104 =" -> "106 D8" [label="imtmp_1"];
  "98 =" [shape=circle];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "97 D8" -> "98 =" [label="imopen"];
  "96 =" [shape=circle];
  "96 =" -> "97 D8" [label="imtmp_0"];
  "95 D8" [shape=box];
  "95 D8" -> "96 =" [label="imopen"];
  "94 =" [shape=circle];
  "94 =" -> "95 D8" [label="imtmp_0"];
  "93 D8" [shape=box];
  "93 D8" -> "94 =" [label="imopen"];
  "92 =" [shape=circle];
  "92 =" -> "93 D8" [label="imtmp_0"];
  "91 D8" [shape=box];
  "91 D8" -> "92 =" [label="imopen"];
  "90 =" [shape=circle];
  "90 =" -> "91 D8" [label="imtmp_0"];
  "89 D8" [shape=box];
  "89 D8" -> "90 =" [label="imopen"];
  "88 =" [shape=circle];
  "88 =" -> "89 D8" [label="imtmp_0"];
  "87 D8" [shape=box];
  "87 D8" -> "88 =" [label="imopen"];
  "86 =" [shape=circle];
  "86 =" -> "87 D8" [label="imtmp_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 =" [label="imopen"];
  "84 =" [shape=circle];
  "84 =" -> "85 D8" [label="imtmp_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 =" [label="imopen"];
  "82 =" [shape=circle];
  "82 =" -> "83 D8" [label="imtmp_0"];
  "81 D8" [shape=box];
  "81 D8" -> "82 =" [label="imopen"];
  "80 =" [shape=circle];
  "80 =" -> "81 D8" [label="imtmp_0"];
  "79 D8" [shape=box];
  "79 D8" -> "80 =" [label="imopen"];
  "78 =" [shape=circle];
  "78 =" -> "79 D8" [label="imtmp_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 =" [label="imopen"];
  "76 =" [shape=circle];
  "76 =" -> "77 D8" [label="imtmp_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 =" [label="imopen"];
  "74 =" [shape=circle];
  "74 =" -> "75 D8" [label="imtmp_0"];
  "73 D8" [shape=box];
  "73 D8" -> "74 =" [label="imopen"];
  "72 =" [shape=circle];
  "72 =" -> "73 D8" [label="imtmp_0"];
  "71 D8" [shape=box];
  "71 D8" -> "72 =" [label="imopen"];
  "70 =" [shape=circle];
  "70 =" -> "71 D8" [label="imtmp_0"];
  "69 D8" [shape=box];
  "69 D8" -> "70 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "69 D8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "63 =" [shape=circle];
  "63 =" -> "64 E8" [label="imtmp_0"];
  "62 E8" [shape=box];
  "62 E8" -> "63 =" [label="imopen"];
  "61 =" [shape=circle];
  "61 =" -> "62 E8" [label="imtmp_0"];
  "60 E8" [shape=box];
  "60 E8" -> "61 =" [label="imopen"];
  "59 =" [shape=circle];
  "59 =" -> "60 E8" [label="imtmp_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 =" [label="imopen"];
  "57 =" [shape=circle];
  "57 =" -> "58 E8" [label="imtmp_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 =" [label="imopen"];
  "55 =" [shape=circle];
  "55 =" -> "56 E8" [label="imtmp_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 =" [label="imopen"];
  "53 =" [shape=circle];
  "53 =" -> "54 E8" [label="imtmp_0"];
  "52 E8" [shape=box];
  "52 E8" -> "53 =" [label="imopen"];
  "51 =" [shape=circle];
  "51 =" -> "52 E8" [label="imtmp_0"];
  "50 E8" [shape=box];
  "50 E8" -> "51 =" [label="imopen"];
  "49 =" [shape=circle];
  "49 =" -> "50 E8" [label="imtmp_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 =" [label="imopen"];
  "47 =" [shape=circle];
  "47 =" -> "48 E8" [label="imtmp_0"];
  "46 E8" [shape=box];
  "46 E8" -> "47 =" [label="imopen"];
  "45 =" [shape=circle];
  "45 =" -> "46 E8" [label="imtmp_0"];
  "44 E8" [shape=box];
  "44 E8" -> "45 =" [label="imopen"];
  "43 =" [shape=circle];
  "43 =" -> "44 E8" [label="imtmp_0"];
  "42 E8" [shape=box];
  "42 E8" -> "43 =" [label="imopen"];
  "41 =" [shape=circle];
  "41 =" -> "42 E8" [label="imtmp_0"];
  "40 E8" [shape=box];
  "40 E8" -> "41 =" [label="imopen"];
  "39 =" [shape=circle];
  "39 =" -> "40 E8" [label="imtmp_0"];
  "38 E8" [shape=box];
  "38 E8" -> "39 =" [label="imopen"];
  "36 =" [shape=circle];
  "36 =" -> "38 E8" [label="imtmp_0"];
  "in" -> "197 &";
  "in" -> "104 =";
  "in" -> "36 =";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
  "in" -> "197 &";
}
// graph for dag "main_spoc_helper_0_0" of module "main" in dot format
// DAG "main_spoc_helper_0_0": #i=1 #o=1 #c=68 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out_1" [shape=circle];

  // computation vertices
  "196 D8" [shape=box];
  "196 D8" -> "out_1";
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
}
// graph for dag "main_spoc_helper_0_1" of module "main" in dot format
// DAG "main_spoc_helper_0_1": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_1" {
  // inputs
  "in" [shape=circle];
  "out_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "in" -> "197 &";
  "out_1" -> "197 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0+0 copies
// split 0: 7 cuts
// split 1: 1 cut
// # SPOC calls: 8

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 38 erode_8c
  // nope
  // poc 38 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_29 [0 poc 0] -> [1 poc 0] 40 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imopen_29 [1 input 0] -> [1 poc 0] 40 erode_8c
  // nope
  // poc 40 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_28 [1 poc 0] -> [2 poc 0] 42 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imopen_28 [2 input 0] -> [2 poc 0] 42 erode_8c
  // nope
  // poc 42 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_27 [2 poc 0] -> [3 poc 0] 44 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imopen_27 [3 input 0] -> [3 poc 0] 44 erode_8c
  // nope
  // poc 44 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_26 [3 poc 0] -> [4 poc 0] 46 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imopen_26 [4 input 0] -> [4 poc 0] 46 erode_8c
  // nope
  // poc 46 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_25 [4 poc 0] -> [5 poc 0] 48 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imopen_25 [5 input 0] -> [5 poc 0] 48 erode_8c
  // nope
  // poc 48 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen_24 [5 poc 0] -> [6 poc 0] 50 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imopen_24 [6 input 0] -> [6 poc 0] 50 erode_8c
  // nope
  // poc 50 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen_23 [6 poc 0] -> [7 poc 0] 52 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imopen_23 [7 input 0] -> [7 poc 0] 52 erode_8c
  // nope
  // poc 52 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 106 dilate_8c
  // nope
  // poc 106 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imclose_15 [0 poc 1] -> [1 poc 1] 108 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imclose_15 [1 input 1] -> [1 poc 1] 108 dilate_8c
  // nope
  // poc 108 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imclose_14 [1 poc 1] -> [2 poc 1] 110 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imclose_14 [2 input 1] -> [2 poc 1] 110 dilate_8c
  // nope
  // poc 110 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imclose_13 [2 poc 1] -> [3 poc 1] 112 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imclose_13 [3 input 1] -> [3 poc 1] 112 dilate_8c
  // nope
  // poc 112 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imclose_12 [3 poc 1] -> [4 poc 1] 114 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imclose_12 [4 input 1] -> [4 poc 1] 114 dilate_8c
  // nope
  // poc 114 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imclose_11 [4 poc 1] -> [5 poc 1] 116 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imclose_11 [5 input 1] -> [5 poc 1] 116 dilate_8c
  // nope
  // poc 116 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imclose_10 [5 poc 1] -> [6 poc 1] 118 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imclose_10 [6 input 1] -> [6 poc 1] 118 dilate_8c
  // nope
  // poc 118 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imclose_9 [6 poc 1] -> [7 poc 1] 120 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imclose_9 [7 input 1] -> [7 poc 1] 120 dilate_8c
  // nope
  // poc 120 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // output image 0`imopen_22 on 0 and image 0`imclose_8 on 1
  // 0`imopen_22 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imopen_22 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`imclose_8 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imclose_8 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_22 [0 input 1] -> [0 poc 1] 54 erode_8c
  // nope
  // poc 54 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_21 [0 poc 1] -> [1 poc 1] 56 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imopen_21 [1 input 1] -> [1 poc 1] 56 erode_8c
  // nope
  // poc 56 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_20 [1 poc 1] -> [2 poc 1] 58 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imopen_20 [2 input 1] -> [2 poc 1] 58 erode_8c
  // nope
  // poc 58 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_19 [2 poc 1] -> [3 poc 1] 60 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imopen_19 [3 input 1] -> [3 poc 1] 60 erode_8c
  // nope
  // poc 60 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_18 [3 poc 1] -> [4 poc 1] 62 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imopen_18 [4 input 1] -> [4 poc 1] 62 erode_8c
  // nope
  // poc 62 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_17 [4 poc 1] -> [5 poc 1] 64 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imopen_17 [5 input 1] -> [5 poc 1] 64 erode_8c
  // nope
  // poc 64 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen_16 [5 poc 1] -> [6 poc 1] 66 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imopen_16 [6 input 1] -> [6 poc 1] 66 erode_8c
  // nope
  // poc 66 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen_15 [6 poc 1] -> [7 poc 1] 69 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imopen_15 [7 input 1] -> [7 poc 1] 69 dilate_8c
  // nope
  // poc 69 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // STAGE 0
  // 0`imclose_8 [0 input 0] -> [0 poc 0] 123 erode_8c
  // nope
  // poc 123 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imclose_7 [0 poc 0] -> [1 poc 0] 125 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imclose_7 [1 input 0] -> [1 poc 0] 125 erode_8c
  // nope
  // poc 125 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imclose_6 [1 poc 0] -> [2 poc 0] 127 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imclose_6 [2 input 0] -> [2 poc 0] 127 erode_8c
  // nope
  // poc 127 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imclose_5 [2 poc 0] -> [3 poc 0] 129 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imclose_5 [3 input 0] -> [3 poc 0] 129 erode_8c
  // nope
  // poc 129 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imclose_4 [3 poc 0] -> [4 poc 0] 131 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imclose_4 [4 input 0] -> [4 poc 0] 131 erode_8c
  // nope
  // poc 131 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imclose_3 [4 poc 0] -> [5 poc 0] 133 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imclose_3 [5 input 0] -> [5 poc 0] 133 erode_8c
  // nope
  // poc 133 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imclose_2 [5 poc 0] -> [6 poc 0] 135 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imclose_2 [6 input 0] -> [6 poc 0] 135 erode_8c
  // nope
  // poc 135 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imclose_1 [6 poc 0] -> [7 poc 0] 137 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imclose_1 [7 input 0] -> [7 poc 0] 137 erode_8c
  // nope
  // poc 137 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`imclose [7 poc 0] -> [7 threshold 0] 143 threshold
  si.mux[7][0].op = SPOC_MUX_IN0;
  // threshold 143 threshold stage 7 side 0
  si.th[7][0].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[7][0].boundmin = pi1;
  sp.th[7][0].boundmax = pi2;


  // output image 0`imcloseth on 0 and image 0`imopen_14 on 1
  // 0`imcloseth [7 threshold 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imcloseth [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`imopen_14 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_14 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_14 [0 input 1] -> [0 poc 1] 71 dilate_8c
  // nope
  // poc 71 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_13 [0 poc 1] -> [1 poc 1] 73 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imopen_13 [1 input 1] -> [1 poc 1] 73 dilate_8c
  // nope
  // poc 73 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_12 [1 poc 1] -> [2 poc 1] 75 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imopen_12 [2 input 1] -> [2 poc 1] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_11 [2 poc 1] -> [3 poc 1] 77 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imopen_11 [3 input 1] -> [3 poc 1] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_10 [3 poc 1] -> [4 poc 1] 79 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imopen_10 [4 input 1] -> [4 poc 1] 79 dilate_8c
  // nope
  // poc 79 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_9 [4 poc 1] -> [5 poc 1] 81 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imopen_9 [5 input 1] -> [5 poc 1] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen_8 [5 poc 1] -> [6 poc 1] 83 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imopen_8 [6 input 1] -> [6 poc 1] 83 dilate_8c
  // nope
  // poc 83 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen_7 [6 poc 1] -> [7 poc 1] 85 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imopen_7 [7 input 1] -> [7 poc 1] 85 dilate_8c
  // nope
  // poc 85 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // output image 0`imopen_6 on 1
  // 0`imopen_6 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imopen_6 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  const int32_t * pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_6 [0 input 1] -> [0 poc 1] 87 dilate_8c
  // nope
  // poc 87 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_5 [0 poc 1] -> [1 poc 1] 89 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imopen_5 [1 input 1] -> [1 poc 1] 89 dilate_8c
  // nope
  // poc 89 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_4 [1 poc 1] -> [2 poc 1] 91 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imopen_4 [2 input 1] -> [2 poc 1] 91 dilate_8c
  // nope
  // poc 91 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_3 [2 poc 1] -> [3 poc 1] 93 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imopen_3 [3 input 1] -> [3 poc 1] 93 dilate_8c
  // nope
  // poc 93 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_2 [3 poc 1] -> [4 poc 1] 95 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imopen_2 [4 input 1] -> [4 poc 1] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_1 [4 poc 1] -> [5 poc 1] 97 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imopen_1 [5 input 1] -> [5 poc 1] 97 dilate_8c
  // nope
  // poc 97 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];

  // 0`imopen [5 poc 1] -> [5 threshold 1] 142 threshold
  si.mux[5][3].op = SPOC_MUX_IN1;
  // threshold 142 threshold stage 5 side 1
  si.th[5][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[5][1].boundmin = pi1;
  sp.th[5][1].boundmax = pi2;


  // STAGE 6
  // 0`imcloseth [0 input 0] -> [6 alu] 144 and
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [1 input 0] -> [6 alu] 144 and
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [2 input 0] -> [6 alu] 144 and
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [3 input 0] -> [6 alu] 144 and
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [4 input 0] -> [6 alu] 144 and
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [5 input 0] -> [6 alu] 144 and
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [6 input 0] -> [6 alu] 144 and
  // nope
  // 0`imopenth [5 threshold 1] -> [6 alu] 144 and
  // 0`imopenth [6 input 1] -> [6 alu] 144 and
  // nope
  // alu 144 and stage 6
  si.alu[6][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 7
  // 0`imand [6 alu] -> [7 poc 0] 150 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;
  // 0`imand [7 input 0] -> [7 poc 0] 150 erode_8c
  // nope
  // poc 150 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi4[i];


  // output image 0`imfilt_7 on 0
  // 0`imfilt_7 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_7 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_7 [0 input 0] -> [0 poc 0] 152 erode_8c
  // nope
  // poc 152 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imfilt_6 [0 poc 0] -> [1 poc 0] 154 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imfilt_6 [1 input 0] -> [1 poc 0] 154 erode_8c
  // nope
  // poc 154 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imfilt_5 [1 poc 0] -> [2 poc 0] 156 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imfilt_5 [2 input 0] -> [2 poc 0] 156 erode_8c
  // nope
  // poc 156 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imfilt_4 [2 poc 0] -> [3 poc 0] 159 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imfilt_4 [3 input 0] -> [3 poc 0] 159 dilate_8c
  // nope
  // poc 159 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imfilt_3 [3 poc 0] -> [4 poc 0] 161 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imfilt_3 [4 input 0] -> [4 poc 0] 161 dilate_8c
  // nope
  // poc 161 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imfilt_2 [4 poc 0] -> [5 poc 0] 163 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imfilt_2 [5 input 0] -> [5 poc 0] 163 dilate_8c
  // nope
  // poc 163 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imfilt_1 [5 poc 0] -> [6 poc 0] 165 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imfilt_1 [6 input 0] -> [6 poc 0] 165 dilate_8c
  // nope
  // poc 165 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imfilt [6 poc 0] -> [7 poc 0] 174 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imfilt [7 input 0] -> [7 poc 0] 174 erode_8c
  // nope
  // poc 174 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // output image 0`imout_7 on 0
  // 0`imout_7 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imout_7 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_5(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imout_7 [0 input 0] -> [0 poc 0] 176 erode_8c
  // nope
  // poc 176 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imout_6 [0 poc 0] -> [1 poc 0] 178 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imout_6 [1 input 0] -> [1 poc 0] 178 erode_8c
  // nope
  // poc 178 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imout_5 [1 poc 0] -> [2 poc 0] 180 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imout_5 [2 input 0] -> [2 poc 0] 180 erode_8c
  // nope
  // poc 180 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imout_4 [2 poc 0] -> [3 poc 0] 183 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imout_4 [3 input 0] -> [3 poc 0] 183 dilate_8c
  // nope
  // poc 183 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imout_3 [3 poc 0] -> [4 poc 0] 185 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imout_3 [4 input 0] -> [4 poc 0] 185 dilate_8c
  // nope
  // poc 185 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imout_2 [4 poc 0] -> [5 poc 0] 187 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imout_2 [5 input 0] -> [5 poc 0] 187 dilate_8c
  // nope
  // poc 187 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imout_1 [5 poc 0] -> [6 poc 0] 189 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imout_1 [6 input 0] -> [6 poc 0] 189 dilate_8c
  // nope
  // poc 189 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imout [6 poc 0] -> [7 poc 0] 194 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imout [7 input 0] -> [7 poc 0] 194 dilate_8c
  // nope
  // poc 194 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // output image 0`out_3 on 0
  // 0`out_3 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_3 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_6(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out_3 [0 input 0] -> [0 poc 0] 195 dilate_8c
  // nope
  // poc 195 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`out_2 [0 poc 0] -> [1 poc 0] 196 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`out_2 [1 input 0] -> [1 poc 0] 196 dilate_8c
  // nope
  // poc 196 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // output image 0`out_1 on 0
  // 0`out_1 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_1 [1 output 0] -> [7 output 0] 0 null
  // 0`out_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 197 and
  // nope
  // 0`out_1 [0 input 1] -> [0 alu] 197 and
  // nope
  // alu 197 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [7 output 0] 0 null
  // 0`out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose, *imcloseth;                     /*0008*/
   freia_data2d *imfilt, *imout, *out;                                  /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_spoc_helper_0_0_0(imopen, imclose, in, kernel1x3);              /*0038*/
   main_spoc_helper_0_0_1(imcloseth, imopen, imclose, imopen, kernel1x3, 150, 255, 1);                /*0054*/

   main_spoc_helper_0_0_2(imopen, imcloseth, imopen, kernel1x3);        /*0071*/
   main_spoc_helper_0_0_3(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);  /*0087*/
   
   
   
   
   main_spoc_helper_0_0_4(imout, imfilt, kernel3x1, kernel1x3);         /*0152*/
   
   
   main_spoc_helper_0_0_5(out, imout, kernel1x3, freia_morpho_kernel_8c);              /*0176*/
   
   
   main_spoc_helper_0_0_6(out, out, freia_morpho_kernel_8c);            /*0195*/
   
   
   
   main_spoc_helper_0_1_0(out, in, out);                                /*0197*/
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose, *imcloseth;                     /*0008*/
   freia_data2d *imfilt, *imout, *out;                                  /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_spoc_helper_0_0_0(imopen, imclose, in, kernel1x3);              /*0038*/
   main_spoc_helper_0_0_1(imcloseth, imopen, imclose, imopen, kernel1x3, 150, 255, 1);                /*0054*/

   main_spoc_helper_0_0_2(imopen, imcloseth, imopen, kernel1x3);        /*0071*/
   main_spoc_helper_0_0_3(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);  /*0087*/
   
   
   
   
   main_spoc_helper_0_0_4(imout, imfilt, kernel3x1, kernel1x3);         /*0152*/
   
   
   main_spoc_helper_0_0_5(out, imout, kernel1x3, freia_morpho_kernel_8c);              /*0176*/
   
   
   main_spoc_helper_0_0_6(out, out, freia_morpho_kernel_8c);            /*0195*/
   
   
   
   main_spoc_helper_0_1_0(out, in, out);                                /*0197*/
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *immir, *imopen, *imclose, *imopenth, *imcloseth;  /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_data2d *imtmp_0, *imtmp_1, *imtmp_2, *imtmp_3;                 /*0013*/
   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0022*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0034*/

   ret = freia_aipo_copy(imtmp_0, in);                                  /*0036*/

   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0038*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0039*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0040*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0041*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0042*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0043*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0044*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0045*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0046*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0047*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0048*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0049*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0050*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0051*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0052*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0053*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0054*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0055*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0056*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0057*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0058*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0059*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0060*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0061*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0062*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0063*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0064*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0065*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0066*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0067*/

   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0069*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0070*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0071*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0072*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0073*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0074*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0075*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0076*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0077*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0078*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0079*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0080*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0081*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0082*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0083*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0084*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0085*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0086*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0087*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0088*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0089*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0090*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0091*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0092*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0093*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0094*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0095*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0096*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0097*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0098*/

   freia_common_destruct_data(imtmp_0);                                 /*0100*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0102*/

   ret |= freia_aipo_copy(imtmp_1, in);                                 /*0104*/

   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0106*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0107*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0108*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0109*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0110*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0111*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0112*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0113*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0114*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0115*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0116*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0117*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0118*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0119*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0120*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0121*/

   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0123*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0124*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0125*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0126*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0127*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0128*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0129*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0130*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0131*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0132*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0133*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0134*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0135*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0136*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0137*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0138*/

   freia_common_destruct_data(imtmp_1);                                 /*0140*/

   ret |= freia_aipo_threshold(imopenth, imopen, 1, 50, 1);             /*0142*/
   ret |= freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);        /*0143*/
   ret |= freia_aipo_and(imand, imopenth, imcloseth);                   /*0144*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0146*/

   ret |= freia_aipo_copy(imtmp_2, imand);                              /*0148*/

   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0150*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0151*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0152*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0153*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0154*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0155*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0156*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0157*/

   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0159*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0160*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0161*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0162*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0163*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0164*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0165*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0166*/

   freia_common_destruct_data(imtmp_2);                                 /*0168*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0170*/

   ret |= freia_aipo_copy(imtmp_3, imfilt);                             /*0172*/

   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0174*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0175*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0176*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0177*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0178*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0179*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0180*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0181*/

   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0183*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0184*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0185*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0186*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0187*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0188*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0189*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0190*/

   freia_common_destruct_data(imtmp_3);                                 /*0192*/

   ret |= freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);     /*0194*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0195*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0196*/
   ret |= freia_aipo_and(out, out, in);                                 /*0197*/

   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(immir);                                   /*0202*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=0 #I=66 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out"];
  "190 =" [shape=circle];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "189 D8" -> "190 =" [label="imout"];
  "188 =" [shape=circle];
  "188 =" -> "189 D8" [label="imtmp_3"];
  "187 D8" [shape=box];
  "187 D8" -> "188 =" [label="imout"];
  "186 =" [shape=circle];
  "186 =" -> "187 D8" [label="imtmp_3"];
  "185 D8" [shape=box];
  "185 D8" -> "186 =" [label="imout"];
  "184 =" [shape=circle];
  "184 =" -> "185 D8" [label="imtmp_3"];
  "183 D8" [shape=box];
  "183 D8" -> "184 =" [label="imout"];
  "181 =" [shape=circle];
  "181 =" -> "183 D8" [label="imtmp_3"];
  "180 E8" [shape=box];
  "180 E8" -> "181 =" [label="imout"];
  "179 =" [shape=circle];
  "179 =" -> "180 E8" [label="imtmp_3"];
  "178 E8" [shape=box];
  "178 E8" -> "179 =" [label="imout"];
  "177 =" [shape=circle];
  "177 =" -> "178 E8" [label="imtmp_3"];
  "176 E8" [shape=box];
  "176 E8" -> "177 =" [label="imout"];
  "175 =" [shape=circle];
  "175 =" -> "176 E8" [label="imtmp_3"];
  "174 E8" [shape=box];
  "174 E8" -> "175 =" [label="imout"];
  "172 =" [shape=circle];
  "172 =" -> "174 E8" [label="imtmp_3"];
  "166 =" [shape=circle];
  "165 D8" [shape=box];
  "165 D8" -> "172 =" [label="imfilt"];
  "165 D8" -> "166 =" [label="imfilt"];
  "164 =" [shape=circle];
  "164 =" -> "165 D8" [label="imtmp_2"];
  "163 D8" [shape=box];
  "163 D8" -> "164 =" [label="imfilt"];
  "162 =" [shape=circle];
  "162 =" -> "163 D8" [label="imtmp_2"];
  "161 D8" [shape=box];
  "161 D8" -> "162 =" [label="imfilt"];
  "160 =" [shape=circle];
  "160 =" -> "161 D8" [label="imtmp_2"];
  "159 D8" [shape=box];
  "159 D8" -> "160 =" [label="imfilt"];
  "157 =" [shape=circle];
  "157 =" -> "159 D8" [label="imtmp_2"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imfilt"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_2"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imfilt"];
  "153 =" [shape=circle];
  "153 =" -> "154 E8" [label="imtmp_2"];
  "152 E8" [shape=box];
  "152 E8" -> "153 =" [label="imfilt"];
  "151 =" [shape=circle];
  "151 =" -> "152 E8" [label="imtmp_2"];
  "150 E8" [shape=box];
  "150 E8" -> "151 =" [label="imfilt"];
  "148 =" [shape=circle];
  "148 =" -> "150 E8" [label="imtmp_2"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "148 =" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "138 =" [shape=circle];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "137 E8" -> "138 =" [label="imclose"];
  "136 =" [shape=circle];
  "136 =" -> "137 E8" [label="imtmp_1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "135 E8" [label="imtmp_1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 =" [label="imclose"];
  "132 =" [shape=circle];
  "132 =" -> "133 E8" [label="imtmp_1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 =" [label="imclose"];
  "130 =" [shape=circle];
  "130 =" -> "131 E8" [label="imtmp_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 =" [label="imclose"];
  "128 =" [shape=circle];
  "128 =" -> "129 E8" [label="imtmp_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 =" [label="imclose"];
  "126 =" [shape=circle];
  "126 =" -> "127 E8" [label="imtmp_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 =" [label="imclose"];
  "124 =" [shape=circle];
  "124 =" -> "125 E8" [label="imtmp_1"];
  "123 E8" [shape=box];
  "123 E8" -> "124 =" [label="imclose"];
  "121 =" [shape=circle];
  "121 =" -> "123 E8" [label="imtmp_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imclose"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imclose"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imclose"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imclose"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imclose"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imclose"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imclose"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imclose"];
  "104 =" [shape=circle];
  "104 =" -> "106 D8" [label="imtmp_1"];
  "98 =" [shape=circle];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "97 D8" -> "98 =" [label="imopen"];
  "96 =" [shape=circle];
  "96 =" -> "97 D8" [label="imtmp_0"];
  "95 D8" [shape=box];
  "95 D8" -> "96 =" [label="imopen"];
  "94 =" [shape=circle];
  "94 =" -> "95 D8" [label="imtmp_0"];
  "93 D8" [shape=box];
  "93 D8" -> "94 =" [label="imopen"];
  "92 =" [shape=circle];
  "92 =" -> "93 D8" [label="imtmp_0"];
  "91 D8" [shape=box];
  "91 D8" -> "92 =" [label="imopen"];
  "90 =" [shape=circle];
  "90 =" -> "91 D8" [label="imtmp_0"];
  "89 D8" [shape=box];
  "89 D8" -> "90 =" [label="imopen"];
  "88 =" [shape=circle];
  "88 =" -> "89 D8" [label="imtmp_0"];
  "87 D8" [shape=box];
  "87 D8" -> "88 =" [label="imopen"];
  "86 =" [shape=circle];
  "86 =" -> "87 D8" [label="imtmp_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 =" [label="imopen"];
  "84 =" [shape=circle];
  "84 =" -> "85 D8" [label="imtmp_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 =" [label="imopen"];
  "82 =" [shape=circle];
  "82 =" -> "83 D8" [label="imtmp_0"];
  "81 D8" [shape=box];
  "81 D8" -> "82 =" [label="imopen"];
  "80 =" [shape=circle];
  "80 =" -> "81 D8" [label="imtmp_0"];
  "79 D8" [shape=box];
  "79 D8" -> "80 =" [label="imopen"];
  "78 =" [shape=circle];
  "78 =" -> "79 D8" [label="imtmp_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 =" [label="imopen"];
  "76 =" [shape=circle];
  "76 =" -> "77 D8" [label="imtmp_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 =" [label="imopen"];
  "74 =" [shape=circle];
  "74 =" -> "75 D8" [label="imtmp_0"];
  "73 D8" [shape=box];
  "73 D8" -> "74 =" [label="imopen"];
  "72 =" [shape=circle];
  "72 =" -> "73 D8" [label="imtmp_0"];
  "71 D8" [shape=box];
  "71 D8" -> "72 =" [label="imopen"];
  "70 =" [shape=circle];
  "70 =" -> "71 D8" [label="imtmp_0"];
  "69 D8" [shape=box];
  "69 D8" -> "70 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "69 D8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "63 =" [shape=circle];
  "63 =" -> "64 E8" [label="imtmp_0"];
  "62 E8" [shape=box];
  "62 E8" -> "63 =" [label="imopen"];
  "61 =" [shape=circle];
  "61 =" -> "62 E8" [label="imtmp_0"];
  "60 E8" [shape=box];
  "60 E8" -> "61 =" [label="imopen"];
  "59 =" [shape=circle];
  "59 =" -> "60 E8" [label="imtmp_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 =" [label="imopen"];
  "57 =" [shape=circle];
  "57 =" -> "58 E8" [label="imtmp_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 =" [label="imopen"];
  "55 =" [shape=circle];
  "55 =" -> "56 E8" [label="imtmp_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 =" [label="imopen"];
  "53 =" [shape=circle];
  "53 =" -> "54 E8" [label="imtmp_0"];
  "52 E8" [shape=box];
  "52 E8" -> "53 =" [label="imopen"];
  "51 =" [shape=circle];
  "51 =" -> "52 E8" [label="imtmp_0"];
  "50 E8" [shape=box];
  "50 E8" -> "51 =" [label="imopen"];
  "49 =" [shape=circle];
  "49 =" -> "50 E8" [label="imtmp_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 =" [label="imopen"];
  "47 =" [shape=circle];
  "47 =" -> "48 E8" [label="imtmp_0"];
  "46 E8" [shape=box];
  "46 E8" -> "47 =" [label="imopen"];
  "45 =" [shape=circle];
  "45 =" -> "46 E8" [label="imtmp_0"];
  "44 E8" [shape=box];
  "44 E8" -> "45 =" [label="imopen"];
  "43 =" [shape=circle];
  "43 =" -> "44 E8" [label="imtmp_0"];
  "42 E8" [shape=box];
  "42 E8" -> "43 =" [label="imopen"];
  "41 =" [shape=circle];
  "41 =" -> "42 E8" [label="imtmp_0"];
  "40 E8" [shape=box];
  "40 E8" -> "41 =" [label="imopen"];
  "39 =" [shape=circle];
  "39 =" -> "40 E8" [label="imtmp_0"];
  "38 E8" [shape=box];
  "38 E8" -> "39 =" [label="imopen"];
  "36 =" [shape=circle];
  "36 =" -> "38 E8" [label="imtmp_0"];
  "in" -> "197 &";
  "in" -> "104 =";
  "in" -> "36 =";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
  "in" -> "197 &";
}
// graph for dag "main_terapix_helper_0_0_0" of module "main" in dot format
// DAG "main_terapix_helper_0_0_0": #i=1 #o=2 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imopen_26" [shape=circle];
  "imclose_12" [shape=circle];

  // computation vertices
  "112 D8" [shape=box];
  "112 D8" -> "imclose_12";
  "44 E8" [shape=box];
  "44 E8" -> "imopen_26";
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
}
// graph for dag "main_terapix_helper_0_0_1" of module "main" in dot format
// DAG "main_terapix_helper_0_0_1": #i=1 #o=1 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_1" {
  // inputs
  "imclose_12" [shape=circle];

  // outputs
  "imclose_6" [shape=circle];

  // computation vertices
  "125 E8" [shape=box];
  "125 E8" -> "imclose_6";
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "imclose_12" -> "114 D8";
}
// graph for dag "main_terapix_helper_0_0_2" of module "main" in dot format
// DAG "main_terapix_helper_0_0_2": #i=1 #o=1 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_2" {
  // inputs
  "imopen_26" [shape=circle];

  // outputs
  "imopen_20" [shape=circle];

  // computation vertices
  "56 E8" [shape=box];
  "56 E8" -> "imopen_20";
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "imopen_26" -> "46 E8";
}
// graph for dag "main_terapix_helper_0_0_3" of module "main" in dot format
// DAG "main_terapix_helper_0_0_3": #i=1 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_3" {
  // inputs
  "imclose_6" [shape=circle];

  // outputs
  "imcloseth" [shape=circle];

  // computation vertices
  "143 thr" [shape=parallelogram];
  "143 thr" -> "imcloseth";
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "imclose_6" -> "127 E8";
}
// graph for dag "main_terapix_helper_0_0_4" of module "main" in dot format
// DAG "main_terapix_helper_0_0_4": #i=1 #o=1 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_4" {
  // inputs
  "imopen_20" [shape=circle];

  // outputs
  "imopen_14" [shape=circle];

  // computation vertices
  "69 D8" [shape=box];
  "69 D8" -> "imopen_14";
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "imopen_20" -> "58 E8";
}
// graph for dag "main_terapix_helper_0_0_5" of module "main" in dot format
// DAG "main_terapix_helper_0_0_5": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_5" {
  // inputs
  "imopen_14" [shape=circle];

  // outputs
  "imopen_6" [shape=circle];

  // computation vertices
  "85 D8" [shape=box];
  "85 D8" -> "imopen_6";
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "imopen_14" -> "71 D8";
}
// graph for dag "main_terapix_helper_0_0_6" of module "main" in dot format
// DAG "main_terapix_helper_0_0_6": #i=1 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_6" {
  // inputs
  "imopen_6" [shape=circle];

  // outputs
  "imopen_1" [shape=circle];

  // computation vertices
  "95 D8" [shape=box];
  "95 D8" -> "imopen_1";
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "imopen_6" -> "87 D8";
}
// graph for dag "main_terapix_helper_0_0_7" of module "main" in dot format
// DAG "main_terapix_helper_0_0_7": #i=2 #o=1 #c=9 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_7" {
  // inputs
  "imcloseth" [shape=circle];
  "imopen_1" [shape=circle];

  // outputs
  "imfilt_2" [shape=circle];

  // computation vertices
  "161 D8" [shape=box];
  "161 D8" -> "imfilt_2";
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "imcloseth" -> "144 &";
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "imopen_1" -> "97 D8";
}
// graph for dag "main_terapix_helper_0_0_8" of module "main" in dot format
// DAG "main_terapix_helper_0_0_8": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_8" {
  // inputs
  "imfilt_2" [shape=circle];

  // outputs
  "imout_2" [shape=circle];

  // computation vertices
  "185 D8" [shape=box];
  "185 D8" -> "imout_2";
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "imfilt_2" -> "163 D8";
}
// graph for dag "main_terapix_helper_0_0_9" of module "main" in dot format
// DAG "main_terapix_helper_0_0_9": #i=2 #o=1 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_9" {
  // inputs
  "imout_2" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "imout_2" -> "187 D8";
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "in" -> "197 &";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 8 image operations in dag
 * dag length is 5, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 72
 */
freia_status main_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][9];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 204;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: E8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_2_0;
  mcu_macro[1][6].xmin2 = imagelet_io_2_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: D8(1) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 3 -> 1
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_1_0;
  mcu_macro[1][8].xmin2 = imagelet_io_1_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 2 is o0 for imopen_26
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for imclose_12
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 4;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 9;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 6 image operations in dag
 * dag length is 7, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 90
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imclose_12
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imclose_6
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 6 image operations in dag
 * dag length is 7, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 90
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imopen_26
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imopen_20
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 7 image operations in dag
 * dag length is 8, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 95
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 6 parameters
  int16_t p_6[3];
  const int32_t x_6 = 3;
  const int32_t y_6 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: thr(1) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  // copy of operation 6 parameters
  p_6[0] = pi3;
  p_6[1] = pi4;
  p_6[2] = pi5;
  gram.xoffset = x_6;
  gram.yoffset = y_6;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_6;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][6].xmin3 = x_6;
  mcu_macro[1][6].xmin3 = x_6;
  mcu_macro[0][6].ymin3 = y_6;
  mcu_macro[1][6].ymin3 = y_6;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_THRESHOLD;


  // inputs:
  // - imagelet 1 is i0 for imclose_6
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imcloseth
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 6 image operations in dag
 * dag length is 7, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 90
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imopen_20
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imopen_14
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_5(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imopen_14
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imopen_6
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 5 image operations in dag
 * dag length is 6, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 75
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_6(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imopen_6
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imopen_1
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 5;
  mcu_instr.borderRight  = 5;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 9 image operations in dag
 * dag length is 10, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 114
 * - communication: 72
 */
freia_status main_terapix_helper_0_0_7(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  const int32_t * pi7)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[3];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[9];
  const int32_t x_3 = 6;
  const int32_t y_3 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][9];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 6;
  int image_height = i0->heightWa;
  int max_computed_size = 192;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: thr(3) -> 3
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi4;
  p_1[1] = pi5;
  p_1[2] = pi6;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 2: &(3,1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_3;
  mcu_macro[1][2].xmin3 = imagelet_3;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_AND3;
  // 3: E8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  for(i=0; i<9; i++)
    p_3[i] = pi7[i];
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_3;
  mcu_macro[1][4].xmin3 = x_3;
  mcu_macro[0][4].ymin3 = y_3;
  mcu_macro[1][4].ymin3 = y_3;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_3;
  mcu_macro[1][5].xmin3 = x_3;
  mcu_macro[0][5].ymin3 = y_3;
  mcu_macro[1][5].ymin3 = y_3;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(2) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_2_0;
  mcu_macro[1][6].xmin1 = imagelet_io_2_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_3;
  mcu_macro[1][6].xmin3 = x_3;
  mcu_macro[0][6].ymin3 = y_3;
  mcu_macro[1][6].ymin3 = y_3;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: D8(3) -> 2
  mcu_macro[0][7].xmin1 = imagelet_3;
  mcu_macro[1][7].xmin1 = imagelet_3;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_2_0;
  mcu_macro[1][7].xmin2 = imagelet_io_2_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_3;
  mcu_macro[1][7].xmin3 = x_3;
  mcu_macro[0][7].ymin3 = y_3;
  mcu_macro[1][7].ymin3 = y_3;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(2) -> 1
  mcu_macro[0][8].xmin1 = imagelet_io_2_0;
  mcu_macro[1][8].xmin1 = imagelet_io_2_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_1_0;
  mcu_macro[1][8].xmin2 = imagelet_io_1_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_3;
  mcu_macro[1][8].xmin3 = x_3;
  mcu_macro[0][8].ymin3 = y_3;
  mcu_macro[1][8].ymin3 = y_3;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imcloseth
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for imopen_1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imfilt_2
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 6;
  mcu_instr.borderBottom = 6;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 9;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_8(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 2;
  int image_height = i0->heightWa;
  int max_computed_size = 337;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi3[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_2;
  mcu_macro[1][4].xmin3 = x_2;
  mcu_macro[0][4].ymin3 = y_2;
  mcu_macro[1][4].ymin3 = y_2;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_2;
  mcu_macro[1][5].xmin3 = x_2;
  mcu_macro[0][5].ymin3 = y_2;
  mcu_macro[1][5].ymin3 = y_2;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_2;
  mcu_macro[1][6].xmin3 = x_2;
  mcu_macro[0][6].ymin3 = y_2;
  mcu_macro[1][6].ymin3 = y_2;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_2;
  mcu_macro[1][7].xmin3 = x_2;
  mcu_macro[0][7].ymin3 = y_2;
  mcu_macro[1][7].ymin3 = y_2;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imfilt_2
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imout_2
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 2;
  mcu_instr.borderBottom = 2;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 6 image operations in dag
 * dag length is 7, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 79
 * - communication: 72
 */
freia_status main_terapix_helper_0_0_9(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  const int32_t * pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 198;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(3) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi4[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(3) -> 1
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_2;
  mcu_macro[1][4].xmin3 = x_2;
  mcu_macro[0][4].ymin3 = y_2;
  mcu_macro[1][4].ymin3 = y_2;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: &(3,2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_io_1_0;
  mcu_macro[1][5].xmin3 = imagelet_io_1_1;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_AND3;


  // inputs:
  // - imagelet 1 is i0 for imout_2
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for in
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 5;
  mcu_instr.borderRight  = 5;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose, *imcloseth;                     /*0008*/
   freia_data2d *imfilt, *imout, *out;                                  /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_terapix_helper_0_0_0(imopen, imclose, in, kernel1x3);           /*0038*/

   main_terapix_helper_0_0_1(imclose, imclose, kernel1x3);              /*0114*/

   main_terapix_helper_0_0_2(imopen, imopen, kernel1x3);                /*0046*/
   main_terapix_helper_0_0_3(imcloseth, imclose, kernel1x3, 150, 255, 1);              /*0127*/
   main_terapix_helper_0_0_4(imopen, imopen, kernel1x3);                /*0058*/

   main_terapix_helper_0_0_5(imopen, imopen, kernel1x3);                /*0071*/
   main_terapix_helper_0_0_6(imopen, imopen, kernel1x3);                /*0087*/
   main_terapix_helper_0_0_7(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);              /*0097*/
   
   
   
   
   
   main_terapix_helper_0_0_8(imout, imfilt, kernel3x1, kernel1x3);      /*0163*/
   
   
   
   main_terapix_helper_0_0_9(out, imout, in, kernel1x3, freia_morpho_kernel_8c);       /*0187*/
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose, *imcloseth;                     /*0008*/
   freia_data2d *imfilt, *imout, *out;                                  /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_terapix_helper_0_0_0(imopen, imclose, in, kernel1x3);           /*0038*/

   main_terapix_helper_0_0_1(imclose, imclose, kernel1x3);              /*0114*/

   main_terapix_helper_0_0_2(imopen, imopen, kernel1x3);                /*0046*/
   main_terapix_helper_0_0_3(imcloseth, imclose, kernel1x3, 150, 255, 1);              /*0127*/
   main_terapix_helper_0_0_4(imopen, imopen, kernel1x3);                /*0058*/

   main_terapix_helper_0_0_5(imopen, imopen, kernel1x3);                /*0071*/
   main_terapix_helper_0_0_6(imopen, imopen, kernel1x3);                /*0087*/
   main_terapix_helper_0_0_7(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);              /*0097*/
   
   
   
   
   
   main_terapix_helper_0_0_8(imout, imfilt, kernel3x1, kernel1x3);      /*0163*/
   
   
   
   main_terapix_helper_0_0_9(out, imout, in, kernel1x3, freia_morpho_kernel_8c);       /*0187*/
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *immir, *imopen, *imclose, *imopenth, *imcloseth;  /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_data2d *imtmp_0, *imtmp_1, *imtmp_2, *imtmp_3;                 /*0013*/
   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0022*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0034*/

   ret = freia_aipo_copy(imtmp_0, in);                                  /*0036*/

   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0038*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0039*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0040*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0041*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0042*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0043*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0044*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0045*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0046*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0047*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0048*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0049*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0050*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0051*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0052*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0053*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0054*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0055*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0056*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0057*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0058*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0059*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0060*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0061*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0062*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0063*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0064*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0065*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0066*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0067*/

   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0069*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0070*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0071*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0072*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0073*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0074*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0075*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0076*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0077*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0078*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0079*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0080*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0081*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0082*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0083*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0084*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0085*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0086*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0087*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0088*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0089*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0090*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0091*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0092*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0093*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0094*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0095*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0096*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0097*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0098*/

   freia_common_destruct_data(imtmp_0);                                 /*0100*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0102*/

   ret |= freia_aipo_copy(imtmp_1, in);                                 /*0104*/

   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0106*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0107*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0108*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0109*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0110*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0111*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0112*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0113*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0114*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0115*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0116*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0117*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0118*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0119*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0120*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0121*/

   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0123*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0124*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0125*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0126*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0127*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0128*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0129*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0130*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0131*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0132*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0133*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0134*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0135*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0136*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0137*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0138*/

   freia_common_destruct_data(imtmp_1);                                 /*0140*/

   ret |= freia_aipo_threshold(imopenth, imopen, 1, 50, 1);             /*0142*/
   ret |= freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);        /*0143*/
   ret |= freia_aipo_and(imand, imopenth, imcloseth);                   /*0144*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0146*/

   ret |= freia_aipo_copy(imtmp_2, imand);                              /*0148*/

   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0150*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0151*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0152*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0153*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0154*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0155*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0156*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0157*/

   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0159*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0160*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0161*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0162*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0163*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0164*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0165*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0166*/

   freia_common_destruct_data(imtmp_2);                                 /*0168*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0170*/

   ret |= freia_aipo_copy(imtmp_3, imfilt);                             /*0172*/

   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0174*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0175*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0176*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0177*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0178*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0179*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0180*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0181*/

   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0183*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0184*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0185*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0186*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0187*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0188*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0189*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0190*/

   freia_common_destruct_data(imtmp_3);                                 /*0192*/

   ret |= freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);     /*0194*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0195*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0196*/
   ret |= freia_aipo_and(out, out, in);                                 /*0197*/

   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(immir);                                   /*0202*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=0 #I=66 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out"];
  "190 =" [shape=circle];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "189 D8" -> "190 =" [label="imout"];
  "188 =" [shape=circle];
  "188 =" -> "189 D8" [label="imtmp_3"];
  "187 D8" [shape=box];
  "187 D8" -> "188 =" [label="imout"];
  "186 =" [shape=circle];
  "186 =" -> "187 D8" [label="imtmp_3"];
  "185 D8" [shape=box];
  "185 D8" -> "186 =" [label="imout"];
  "184 =" [shape=circle];
  "184 =" -> "185 D8" [label="imtmp_3"];
  "183 D8" [shape=box];
  "183 D8" -> "184 =" [label="imout"];
  "181 =" [shape=circle];
  "181 =" -> "183 D8" [label="imtmp_3"];
  "180 E8" [shape=box];
  "180 E8" -> "181 =" [label="imout"];
  "179 =" [shape=circle];
  "179 =" -> "180 E8" [label="imtmp_3"];
  "178 E8" [shape=box];
  "178 E8" -> "179 =" [label="imout"];
  "177 =" [shape=circle];
  "177 =" -> "178 E8" [label="imtmp_3"];
  "176 E8" [shape=box];
  "176 E8" -> "177 =" [label="imout"];
  "175 =" [shape=circle];
  "175 =" -> "176 E8" [label="imtmp_3"];
  "174 E8" [shape=box];
  "174 E8" -> "175 =" [label="imout"];
  "172 =" [shape=circle];
  "172 =" -> "174 E8" [label="imtmp_3"];
  "166 =" [shape=circle];
  "165 D8" [shape=box];
  "165 D8" -> "172 =" [label="imfilt"];
  "165 D8" -> "166 =" [label="imfilt"];
  "164 =" [shape=circle];
  "164 =" -> "165 D8" [label="imtmp_2"];
  "163 D8" [shape=box];
  "163 D8" -> "164 =" [label="imfilt"];
  "162 =" [shape=circle];
  "162 =" -> "163 D8" [label="imtmp_2"];
  "161 D8" [shape=box];
  "161 D8" -> "162 =" [label="imfilt"];
  "160 =" [shape=circle];
  "160 =" -> "161 D8" [label="imtmp_2"];
  "159 D8" [shape=box];
  "159 D8" -> "160 =" [label="imfilt"];
  "157 =" [shape=circle];
  "157 =" -> "159 D8" [label="imtmp_2"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imfilt"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_2"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imfilt"];
  "153 =" [shape=circle];
  "153 =" -> "154 E8" [label="imtmp_2"];
  "152 E8" [shape=box];
  "152 E8" -> "153 =" [label="imfilt"];
  "151 =" [shape=circle];
  "151 =" -> "152 E8" [label="imtmp_2"];
  "150 E8" [shape=box];
  "150 E8" -> "151 =" [label="imfilt"];
  "148 =" [shape=circle];
  "148 =" -> "150 E8" [label="imtmp_2"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "148 =" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "138 =" [shape=circle];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "137 E8" -> "138 =" [label="imclose"];
  "136 =" [shape=circle];
  "136 =" -> "137 E8" [label="imtmp_1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "135 E8" [label="imtmp_1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 =" [label="imclose"];
  "132 =" [shape=circle];
  "132 =" -> "133 E8" [label="imtmp_1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 =" [label="imclose"];
  "130 =" [shape=circle];
  "130 =" -> "131 E8" [label="imtmp_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 =" [label="imclose"];
  "128 =" [shape=circle];
  "128 =" -> "129 E8" [label="imtmp_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 =" [label="imclose"];
  "126 =" [shape=circle];
  "126 =" -> "127 E8" [label="imtmp_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 =" [label="imclose"];
  "124 =" [shape=circle];
  "124 =" -> "125 E8" [label="imtmp_1"];
  "123 E8" [shape=box];
  "123 E8" -> "124 =" [label="imclose"];
  "121 =" [shape=circle];
  "121 =" -> "123 E8" [label="imtmp_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imclose"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imclose"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imclose"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imclose"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imclose"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imclose"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imclose"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imclose"];
  "104 =" [shape=circle];
  "104 =" -> "106 D8" [label="imtmp_1"];
  "98 =" [shape=circle];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "97 D8" -> "98 =" [label="imopen"];
  "96 =" [shape=circle];
  "96 =" -> "97 D8" [label="imtmp_0"];
  "95 D8" [shape=box];
  "95 D8" -> "96 =" [label="imopen"];
  "94 =" [shape=circle];
  "94 =" -> "95 D8" [label="imtmp_0"];
  "93 D8" [shape=box];
  "93 D8" -> "94 =" [label="imopen"];
  "92 =" [shape=circle];
  "92 =" -> "93 D8" [label="imtmp_0"];
  "91 D8" [shape=box];
  "91 D8" -> "92 =" [label="imopen"];
  "90 =" [shape=circle];
  "90 =" -> "91 D8" [label="imtmp_0"];
  "89 D8" [shape=box];
  "89 D8" -> "90 =" [label="imopen"];
  "88 =" [shape=circle];
  "88 =" -> "89 D8" [label="imtmp_0"];
  "87 D8" [shape=box];
  "87 D8" -> "88 =" [label="imopen"];
  "86 =" [shape=circle];
  "86 =" -> "87 D8" [label="imtmp_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 =" [label="imopen"];
  "84 =" [shape=circle];
  "84 =" -> "85 D8" [label="imtmp_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 =" [label="imopen"];
  "82 =" [shape=circle];
  "82 =" -> "83 D8" [label="imtmp_0"];
  "81 D8" [shape=box];
  "81 D8" -> "82 =" [label="imopen"];
  "80 =" [shape=circle];
  "80 =" -> "81 D8" [label="imtmp_0"];
  "79 D8" [shape=box];
  "79 D8" -> "80 =" [label="imopen"];
  "78 =" [shape=circle];
  "78 =" -> "79 D8" [label="imtmp_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 =" [label="imopen"];
  "76 =" [shape=circle];
  "76 =" -> "77 D8" [label="imtmp_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 =" [label="imopen"];
  "74 =" [shape=circle];
  "74 =" -> "75 D8" [label="imtmp_0"];
  "73 D8" [shape=box];
  "73 D8" -> "74 =" [label="imopen"];
  "72 =" [shape=circle];
  "72 =" -> "73 D8" [label="imtmp_0"];
  "71 D8" [shape=box];
  "71 D8" -> "72 =" [label="imopen"];
  "70 =" [shape=circle];
  "70 =" -> "71 D8" [label="imtmp_0"];
  "69 D8" [shape=box];
  "69 D8" -> "70 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "69 D8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "63 =" [shape=circle];
  "63 =" -> "64 E8" [label="imtmp_0"];
  "62 E8" [shape=box];
  "62 E8" -> "63 =" [label="imopen"];
  "61 =" [shape=circle];
  "61 =" -> "62 E8" [label="imtmp_0"];
  "60 E8" [shape=box];
  "60 E8" -> "61 =" [label="imopen"];
  "59 =" [shape=circle];
  "59 =" -> "60 E8" [label="imtmp_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 =" [label="imopen"];
  "57 =" [shape=circle];
  "57 =" -> "58 E8" [label="imtmp_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 =" [label="imopen"];
  "55 =" [shape=circle];
  "55 =" -> "56 E8" [label="imtmp_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 =" [label="imopen"];
  "53 =" [shape=circle];
  "53 =" -> "54 E8" [label="imtmp_0"];
  "52 E8" [shape=box];
  "52 E8" -> "53 =" [label="imopen"];
  "51 =" [shape=circle];
  "51 =" -> "52 E8" [label="imtmp_0"];
  "50 E8" [shape=box];
  "50 E8" -> "51 =" [label="imopen"];
  "49 =" [shape=circle];
  "49 =" -> "50 E8" [label="imtmp_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 =" [label="imopen"];
  "47 =" [shape=circle];
  "47 =" -> "48 E8" [label="imtmp_0"];
  "46 E8" [shape=box];
  "46 E8" -> "47 =" [label="imopen"];
  "45 =" [shape=circle];
  "45 =" -> "46 E8" [label="imtmp_0"];
  "44 E8" [shape=box];
  "44 E8" -> "45 =" [label="imopen"];
  "43 =" [shape=circle];
  "43 =" -> "44 E8" [label="imtmp_0"];
  "42 E8" [shape=box];
  "42 E8" -> "43 =" [label="imopen"];
  "41 =" [shape=circle];
  "41 =" -> "42 E8" [label="imtmp_0"];
  "40 E8" [shape=box];
  "40 E8" -> "41 =" [label="imopen"];
  "39 =" [shape=circle];
  "39 =" -> "40 E8" [label="imtmp_0"];
  "38 E8" [shape=box];
  "38 E8" -> "39 =" [label="imopen"];
  "36 =" [shape=circle];
  "36 =" -> "38 E8" [label="imtmp_0"];
  "in" -> "197 &";
  "in" -> "104 =";
  "in" -> "36 =";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
  "in" -> "197 &";
}
// graph for dag "main_opencl_helper_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "197 &";
  "in" -> "106 D8";
  "in" -> "38 E8";
}
// graph for dag "main_opencl_helper_0_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0_0": #i=1 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imopen_29" [shape=circle];
  "imclose_15" [shape=circle];

  // computation vertices
  "106 D8" [shape=box];
  "106 D8" -> "imclose_15";
  "38 E8" [shape=box];
  "38 E8" -> "imopen_29";
  "in" -> "106 D8";
  "in" -> "38 E8";
}
// graph for dag "main_opencl_helper_0_0_2" of module "main" in dot format
// DAG "main_opencl_helper_0_0_2": #i=2 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_2" {
  // inputs
  "imclose_1" [shape=circle];
  "imopen_1" [shape=circle];

  // outputs
  "imand" [shape=circle];

  // computation vertices
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "imand";
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "imopen_1" -> "97 D8";
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "imclose_1" -> "137 E8";
}
// graph for dag "main_opencl_helper_0_0_4" of module "main" in dot format
// DAG "main_opencl_helper_0_0_4": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_4" {
  // inputs
  "in" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "in" -> "197 &";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "out_2" -> "196 D8";
}
// graph for dag "main_opencl_helper_D8_146" of module "main" in dot format
// DAG "main_opencl_helper_D8_146": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_146" {
  // inputs
  "imfilt_1" [shape=circle];

  // outputs
  "imfilt" [shape=circle];

  // computation vertices
  "165 D8" [shape=box];
  "165 D8" -> "imfilt";
  "imfilt_1" -> "165 D8";
}
// graph for dag "main_opencl_helper_D8_511" of module "main" in dot format
// DAG "main_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_511" {
  // inputs
  "out_3" [shape=circle];

  // outputs
  "out_2" [shape=circle];

  // computation vertices
  "195 D8" [shape=box];
  "195 D8" -> "out_2";
  "out_3" -> "195 D8";
}
// graph for dag "main_opencl_helper_D8_56" of module "main" in dot format
// DAG "main_opencl_helper_D8_56": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_56" {
  // inputs
  "imopen_2" [shape=circle];

  // outputs
  "imopen_1" [shape=circle];

  // computation vertices
  "95 D8" [shape=box];
  "95 D8" -> "imopen_1";
  "imopen_2" -> "95 D8";
}
// graph for dag "main_opencl_helper_E8_146" of module "main" in dot format
// DAG "main_opencl_helper_E8_146": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_E8_146" {
  // inputs
  "imfilt_5" [shape=circle];

  // outputs
  "imfilt_4" [shape=circle];

  // computation vertices
  "156 E8" [shape=box];
  "156 E8" -> "imfilt_4";
  "imfilt_5" -> "156 E8";
}
// graph for dag "main_opencl_helper_E8_56" of module "main" in dot format
// DAG "main_opencl_helper_E8_56": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_E8_56" {
  // inputs
  "imopen_16" [shape=circle];

  // outputs
  "imopen_15" [shape=circle];

  // computation vertices
  "66 E8" [shape=box];
  "66 E8" -> "imopen_15";
  "imopen_16" -> "66 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 69 ops and 66 copies, optimized to 69 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_0_0_0
static cl_kernel main_opencl_helper_0_0_0_kernel[2];

// compile kernels for main_opencl_helper_0_0_0
static freia_status main_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_0
  const char * main_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_0\n"
    "KERNEL void main_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t38 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t106 = PIXEL_MIN;\n"
    "\n"
    "    // pixel computations\n"
    "    t38 = PIXEL_INF(t38, (is_W)? PIXEL_MAX: in0W);\n"
    "    t38 = PIXEL_INF(t38, in0);\n"
    "    t38 = PIXEL_INF(t38, (is_E)? PIXEL_MAX: in0E);\n"
    "    t106 = PIXEL_SUP(t106, (is_W)? PIXEL_MIN: in0W);\n"
    "    t106 = PIXEL_SUP(t106, in0);\n"
    "    t106 = PIXEL_SUP(t106, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t38;\n"
    "    p1[i] = t106;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL8", &main_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL16", &main_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_0
freia_status main_opencl_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_0_kernel[bpp];

  // call kernel main_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 2, 1, 0, 0, o0, o1, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_56
static cl_kernel main_opencl_helper_D8_56_kernel[2];

// compile kernels for main_opencl_helper_D8_56
static freia_status main_opencl_helper_D8_56_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_56
  const char * main_opencl_helper_D8_56_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_56\n"
    "KERNEL void main_opencl_helper_D8_56(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t95 = PIXEL_MIN;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t95 = PIXEL_SUP(t95, (is_W)? PIXEL_MIN: in0W);\n"
    "    t95 = PIXEL_SUP(t95, in0);\n"
    "    t95 = PIXEL_SUP(t95, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t95;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_56_source, "main_opencl_helper_D8_56", "-DPIXEL8", &main_opencl_helper_D8_56_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_56_source, "main_opencl_helper_D8_56", "-DPIXEL16", &main_opencl_helper_D8_56_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_56
freia_status main_opencl_helper_D8_56(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_56_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_56_kernel[bpp];

  // call kernel main_opencl_helper_D8_56
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_E8_56
static cl_kernel main_opencl_helper_E8_56_kernel[2];

// compile kernels for main_opencl_helper_E8_56
static freia_status main_opencl_helper_E8_56_compile(void)
{
  // OpenCL source for main_opencl_helper_E8_56
  const char * main_opencl_helper_E8_56_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_E8_56\n"
    "KERNEL void main_opencl_helper_E8_56(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t66 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t66 = PIXEL_INF(t66, (is_W)? PIXEL_MAX: in0W);\n"
    "    t66 = PIXEL_INF(t66, in0);\n"
    "    t66 = PIXEL_INF(t66, (is_E)? PIXEL_MAX: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t66;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_E8_56_source, "main_opencl_helper_E8_56", "-DPIXEL8", &main_opencl_helper_E8_56_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_E8_56_source, "main_opencl_helper_E8_56", "-DPIXEL16", &main_opencl_helper_E8_56_kernel[1]);
  return err;
}

// helper function main_opencl_helper_E8_56
freia_status main_opencl_helper_E8_56(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_E8_56_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_E8_56_kernel[bpp];

  // call kernel main_opencl_helper_E8_56
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_0_0_2
static cl_kernel main_opencl_helper_0_0_2_kernel[2];

// compile kernels for main_opencl_helper_0_0_2
static freia_status main_opencl_helper_0_0_2_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_2
  const char * main_opencl_helper_0_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_2\n"
    "KERNEL void main_opencl_helper_0_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  int c5)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t137 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t97 = PIXEL_MIN;\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t137 = PIXEL_INF(t137, (is_W)? PIXEL_MAX: in0W);\n"
    "    t137 = PIXEL_INF(t137, in0);\n"
    "    t137 = PIXEL_INF(t137, (is_E)? PIXEL_MAX: in0E);\n"
    "    t97 = PIXEL_SUP(t97, (is_W)? PIXEL_MIN: in1W);\n"
    "    t97 = PIXEL_SUP(t97, in1);\n"
    "    t97 = PIXEL_SUP(t97, (is_E)? PIXEL_MIN: in1E);\n"
    "    PIXEL t142 = PIXEL_THRESHOLD(t97, c0, c1, c2);\n"
    "    PIXEL t143 = PIXEL_THRESHOLD(t137, c3, c4, c5);\n"
    "    PIXEL t144 = PIXEL_AND(t142, t143);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t144;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_2_source, "main_opencl_helper_0_0_2", "-DPIXEL8", &main_opencl_helper_0_0_2_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_2_source, "main_opencl_helper_0_0_2", "-DPIXEL16", &main_opencl_helper_0_0_2_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_2
freia_status main_opencl_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t c5)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_2_kernel[bpp];

  // call kernel main_opencl_helper_0_0_2
  err |= freia_op_call_kernel(kernel, 1, 2, 6, 0, o0, i0, i1, c0, c1, c2, c3, c4, c5);

  return err;
}

// hold kernels for main_opencl_helper_D8_511
static cl_kernel main_opencl_helper_D8_511_kernel[2];

// compile kernels for main_opencl_helper_D8_511
static freia_status main_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_511
  const char * main_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_511\n"
    "KERNEL void main_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t195 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t195 = PIXEL_SUP(t195, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t195 = PIXEL_SUP(t195, (is_N)? PIXEL_MIN: in0N);\n"
    "    t195 = PIXEL_SUP(t195, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t195 = PIXEL_SUP(t195, (is_W)? PIXEL_MIN: in0W);\n"
    "    t195 = PIXEL_SUP(t195, in0);\n"
    "    t195 = PIXEL_SUP(t195, (is_E)? PIXEL_MIN: in0E);\n"
    "    t195 = PIXEL_SUP(t195, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t195 = PIXEL_SUP(t195, (is_S)? PIXEL_MIN: in0S);\n"
    "    t195 = PIXEL_SUP(t195, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t195;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL8", &main_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL16", &main_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_511
freia_status main_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_511_kernel[bpp];

  // call kernel main_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_146
static cl_kernel main_opencl_helper_D8_146_kernel[2];

// compile kernels for main_opencl_helper_D8_146
static freia_status main_opencl_helper_D8_146_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_146
  const char * main_opencl_helper_D8_146_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_146\n"
    "KERNEL void main_opencl_helper_D8_146(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t165 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t165 = PIXEL_SUP(t165, (is_N)? PIXEL_MIN: in0N);\n"
    "    t165 = PIXEL_SUP(t165, in0);\n"
    "    t165 = PIXEL_SUP(t165, (is_S)? PIXEL_MIN: in0S);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t165;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_146_source, "main_opencl_helper_D8_146", "-DPIXEL8", &main_opencl_helper_D8_146_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_146_source, "main_opencl_helper_D8_146", "-DPIXEL16", &main_opencl_helper_D8_146_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_146
freia_status main_opencl_helper_D8_146(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_146_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_146_kernel[bpp];

  // call kernel main_opencl_helper_D8_146
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_E8_146
static cl_kernel main_opencl_helper_E8_146_kernel[2];

// compile kernels for main_opencl_helper_E8_146
static freia_status main_opencl_helper_E8_146_compile(void)
{
  // OpenCL source for main_opencl_helper_E8_146
  const char * main_opencl_helper_E8_146_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_E8_146\n"
    "KERNEL void main_opencl_helper_E8_146(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t156 = PIXEL_MAX;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t156 = PIXEL_INF(t156, (is_N)? PIXEL_MAX: in0N);\n"
    "    t156 = PIXEL_INF(t156, in0);\n"
    "    t156 = PIXEL_INF(t156, (is_S)? PIXEL_MAX: in0S);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t156;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_E8_146_source, "main_opencl_helper_E8_146", "-DPIXEL8", &main_opencl_helper_E8_146_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_E8_146_source, "main_opencl_helper_E8_146", "-DPIXEL16", &main_opencl_helper_E8_146_kernel[1]);
  return err;
}

// helper function main_opencl_helper_E8_146
freia_status main_opencl_helper_E8_146(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_E8_146_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_E8_146_kernel[bpp];

  // call kernel main_opencl_helper_E8_146
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_0_0_4
static cl_kernel main_opencl_helper_0_0_4_kernel[2];

// compile kernels for main_opencl_helper_0_0_4
static freia_status main_opencl_helper_0_0_4_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_4
  const char * main_opencl_helper_0_0_4_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_4\n"
    "KERNEL void main_opencl_helper_0_0_4(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t196 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t196 = PIXEL_SUP(t196, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t196 = PIXEL_SUP(t196, (is_N)? PIXEL_MIN: in1N);\n"
    "    t196 = PIXEL_SUP(t196, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t196 = PIXEL_SUP(t196, (is_W)? PIXEL_MIN: in1W);\n"
    "    t196 = PIXEL_SUP(t196, in1);\n"
    "    t196 = PIXEL_SUP(t196, (is_E)? PIXEL_MIN: in1E);\n"
    "    t196 = PIXEL_SUP(t196, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t196 = PIXEL_SUP(t196, (is_S)? PIXEL_MIN: in1S);\n"
    "    t196 = PIXEL_SUP(t196, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    PIXEL t197 = PIXEL_AND(t196, in0);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t197;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_4_source, "main_opencl_helper_0_0_4", "-DPIXEL8", &main_opencl_helper_0_0_4_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_4_source, "main_opencl_helper_0_0_4", "-DPIXEL16", &main_opencl_helper_0_0_4_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_4
freia_status main_opencl_helper_0_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_4_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_4_kernel[bpp];

  // call kernel main_opencl_helper_0_0_4
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 0, o0, i0, i1);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl function main_opencl_helper_0_0_0
KERNEL void main_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t38 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t106 = PIXEL_MIN;

    // pixel computations
    t38 = PIXEL_INF(t38, (is_W)? PIXEL_MAX: in0W);
    t38 = PIXEL_INF(t38, in0);
    t38 = PIXEL_INF(t38, (is_E)? PIXEL_MAX: in0E);
    t106 = PIXEL_SUP(t106, (is_W)? PIXEL_MIN: in0W);
    t106 = PIXEL_SUP(t106, in0);
    t106 = PIXEL_SUP(t106, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t38;
    p1[i] = t106;
  }
}

// opencl function main_opencl_helper_D8_56
KERNEL void main_opencl_helper_D8_56(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t95 = PIXEL_MIN;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t95 = PIXEL_SUP(t95, (is_W)? PIXEL_MIN: in0W);
    t95 = PIXEL_SUP(t95, in0);
    t95 = PIXEL_SUP(t95, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t95;
  }
}

// opencl function main_opencl_helper_E8_56
KERNEL void main_opencl_helper_E8_56(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t66 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t66 = PIXEL_INF(t66, (is_W)? PIXEL_MAX: in0W);
    t66 = PIXEL_INF(t66, in0);
    t66 = PIXEL_INF(t66, (is_E)? PIXEL_MAX: in0E);

    // set output pixels
    p0[i] = t66;
  }
}

// opencl function main_opencl_helper_0_0_2
KERNEL void main_opencl_helper_0_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  int c5)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t137 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t97 = PIXEL_MIN;
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];

    // pixel computations
    t137 = PIXEL_INF(t137, (is_W)? PIXEL_MAX: in0W);
    t137 = PIXEL_INF(t137, in0);
    t137 = PIXEL_INF(t137, (is_E)? PIXEL_MAX: in0E);
    t97 = PIXEL_SUP(t97, (is_W)? PIXEL_MIN: in1W);
    t97 = PIXEL_SUP(t97, in1);
    t97 = PIXEL_SUP(t97, (is_E)? PIXEL_MIN: in1E);
    PIXEL t142 = PIXEL_THRESHOLD(t97, c0, c1, c2);
    PIXEL t143 = PIXEL_THRESHOLD(t137, c3, c4, c5);
    PIXEL t144 = PIXEL_AND(t142, t143);

    // set output pixels
    p0[i] = t144;
  }
}

// opencl function main_opencl_helper_D8_511
KERNEL void main_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t195 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t195 = PIXEL_SUP(t195, (is_N|is_W)? PIXEL_MIN: in0NW);
    t195 = PIXEL_SUP(t195, (is_N)? PIXEL_MIN: in0N);
    t195 = PIXEL_SUP(t195, (is_N|is_E)? PIXEL_MIN: in0NE);
    t195 = PIXEL_SUP(t195, (is_W)? PIXEL_MIN: in0W);
    t195 = PIXEL_SUP(t195, in0);
    t195 = PIXEL_SUP(t195, (is_E)? PIXEL_MIN: in0E);
    t195 = PIXEL_SUP(t195, (is_S|is_W)? PIXEL_MIN: in0SW);
    t195 = PIXEL_SUP(t195, (is_S)? PIXEL_MIN: in0S);
    t195 = PIXEL_SUP(t195, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t195;
  }
}

// opencl function main_opencl_helper_D8_146
KERNEL void main_opencl_helper_D8_146(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t165 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];

    // pixel computations
    t165 = PIXEL_SUP(t165, (is_N)? PIXEL_MIN: in0N);
    t165 = PIXEL_SUP(t165, in0);
    t165 = PIXEL_SUP(t165, (is_S)? PIXEL_MIN: in0S);

    // set output pixels
    p0[i] = t165;
  }
}

// opencl function main_opencl_helper_E8_146
KERNEL void main_opencl_helper_E8_146(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t156 = PIXEL_MAX;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];

    // pixel computations
    t156 = PIXEL_INF(t156, (is_N)? PIXEL_MAX: in0N);
    t156 = PIXEL_INF(t156, in0);
    t156 = PIXEL_INF(t156, (is_S)? PIXEL_MAX: in0S);

    // set output pixels
    p0[i] = t156;
  }
}

// opencl function main_opencl_helper_0_0_4
KERNEL void main_opencl_helper_0_0_4(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t196 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t196 = PIXEL_SUP(t196, (is_N|is_W)? PIXEL_MIN: in1NW);
    t196 = PIXEL_SUP(t196, (is_N)? PIXEL_MIN: in1N);
    t196 = PIXEL_SUP(t196, (is_N|is_E)? PIXEL_MIN: in1NE);
    t196 = PIXEL_SUP(t196, (is_W)? PIXEL_MIN: in1W);
    t196 = PIXEL_SUP(t196, in1);
    t196 = PIXEL_SUP(t196, (is_E)? PIXEL_MIN: in1E);
    t196 = PIXEL_SUP(t196, (is_S|is_W)? PIXEL_MIN: in1SW);
    t196 = PIXEL_SUP(t196, (is_S)? PIXEL_MIN: in1S);
    t196 = PIXEL_SUP(t196, (is_S|is_E)? PIXEL_MIN: in1SE);
    PIXEL t197 = PIXEL_AND(t196, in0);

    // set output pixels
    p0[i] = t197;
  }
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose;                                 /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_opencl_helper_0_0_0(imopen, imclose, in);                       /*0038*/

   main_opencl_helper_E8_56(imopen, imopen);                            /*0040*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0042*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0044*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0046*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0048*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0050*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0052*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0054*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0056*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0058*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0060*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0062*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0064*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0066*/

   main_opencl_helper_D8_56(imopen, imopen);                            /*0069*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0071*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0073*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0075*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0077*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0079*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0081*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0083*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0085*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0087*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0089*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0091*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0093*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0095*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0108*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0110*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0112*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0114*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0116*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0118*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0120*/

   main_opencl_helper_E8_56(imclose, imclose);                          /*0123*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0125*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0127*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0129*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0131*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0133*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0135*/
   main_opencl_helper_0_0_2(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);            /*0137*/
   
   
   main_opencl_helper_E8_146(imfilt, imand);                            /*0150*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0152*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0154*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0156*/

   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0159*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0161*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0163*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0165*/

   main_opencl_helper_E8_56(imout, imfilt);                             /*0174*/
   main_opencl_helper_E8_56(imout, imout);                              /*0176*/
   main_opencl_helper_E8_56(imout, imout);                              /*0178*/
   main_opencl_helper_E8_56(imout, imout);                              /*0180*/

   main_opencl_helper_D8_56(imout, imout);                              /*0183*/
   main_opencl_helper_D8_56(imout, imout);                              /*0185*/
   main_opencl_helper_D8_56(imout, imout);                              /*0187*/
   main_opencl_helper_D8_56(imout, imout);                              /*0189*/

   main_opencl_helper_D8_511(out, imout);                               /*0194*/
   main_opencl_helper_D8_511(out, out);                                 /*0195*/
   main_opencl_helper_0_0_4(out, in, out);                              /*0196*/
   
   
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *imopen, *imclose;                                 /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   freia_status ret = 0;                                                /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/

   main_opencl_helper_0_0_0(imopen, imclose, in);                       /*0038*/

   main_opencl_helper_E8_56(imopen, imopen);                            /*0040*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0042*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0044*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0046*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0048*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0050*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0052*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0054*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0056*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0058*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0060*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0062*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0064*/
   main_opencl_helper_E8_56(imopen, imopen);                            /*0066*/

   main_opencl_helper_D8_56(imopen, imopen);                            /*0069*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0071*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0073*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0075*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0077*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0079*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0081*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0083*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0085*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0087*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0089*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0091*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0093*/
   main_opencl_helper_D8_56(imopen, imopen);                            /*0095*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0108*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0110*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0112*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0114*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0116*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0118*/
   main_opencl_helper_D8_56(imclose, imclose);                          /*0120*/

   main_opencl_helper_E8_56(imclose, imclose);                          /*0123*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0125*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0127*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0129*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0131*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0133*/
   main_opencl_helper_E8_56(imclose, imclose);                          /*0135*/
   main_opencl_helper_0_0_2(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);            /*0137*/
   
   
   main_opencl_helper_E8_146(imfilt, imand);                            /*0150*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0152*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0154*/
   main_opencl_helper_E8_146(imfilt, imfilt);                           /*0156*/

   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0159*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0161*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0163*/
   main_opencl_helper_D8_146(imfilt, imfilt);                           /*0165*/

   main_opencl_helper_E8_56(imout, imfilt);                             /*0174*/
   main_opencl_helper_E8_56(imout, imout);                              /*0176*/
   main_opencl_helper_E8_56(imout, imout);                              /*0178*/
   main_opencl_helper_E8_56(imout, imout);                              /*0180*/

   main_opencl_helper_D8_56(imout, imout);                              /*0183*/
   main_opencl_helper_D8_56(imout, imout);                              /*0185*/
   main_opencl_helper_D8_56(imout, imout);                              /*0187*/
   main_opencl_helper_D8_56(imout, imout);                              /*0189*/

   main_opencl_helper_D8_511(out, imout);                               /*0194*/
   main_opencl_helper_D8_511(out, out);                                 /*0195*/
   main_opencl_helper_0_0_4(out, in, out);                              /*0196*/
   
   
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}
#
# SIGMAC
#
#
# compile generated lp
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in, *immir, *imopen, *imclose, *imopenth, *imcloseth;  /*0008*/
   freia_data2d *imand, *imfilt, *imout, *out;                          /*0009*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0011*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0012*/
   freia_data2d *imtmp_0, *imtmp_1, *imtmp_2, *imtmp_3;                 /*0013*/
   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0022*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0023*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0024*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0025*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0026*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0027*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0028*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0029*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/

   imtmp_0 = freia_common_create_data(imopen->bpp, imopen->widthWa, imopen->heightWa);                /*0034*/

   ret = freia_aipo_copy(imtmp_0, in);                                  /*0036*/

   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0038*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0039*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0040*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0041*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0042*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0043*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0044*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0045*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0046*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0047*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0048*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0049*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0050*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0051*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0052*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0053*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0054*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0055*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0056*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0057*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0058*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0059*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0060*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0061*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0062*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0063*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0064*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0065*/
   ret |= freia_aipo_erode_8c(imopen, imtmp_0, kernel1x3);              /*0066*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0067*/

   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0069*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0070*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0071*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0072*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0073*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0074*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0075*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0076*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0077*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0078*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0079*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0080*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0081*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0082*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0083*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0084*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0085*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0086*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0087*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0088*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0089*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0090*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0091*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0092*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0093*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0094*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0095*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0096*/
   ret |= freia_aipo_dilate_8c(imopen, imtmp_0, kernel1x3);             /*0097*/
   ret |= freia_aipo_copy(imtmp_0, imopen);                             /*0098*/

   freia_common_destruct_data(imtmp_0);                                 /*0100*/

   imtmp_1 = freia_common_create_data(imclose->bpp, imclose->widthWa, imclose->heightWa);             /*0102*/

   ret |= freia_aipo_copy(imtmp_1, in);                                 /*0104*/

   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0106*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0107*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0108*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0109*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0110*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0111*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0112*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0113*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0114*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0115*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0116*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0117*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0118*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0119*/
   ret |= freia_aipo_dilate_8c(imclose, imtmp_1, kernel1x3);            /*0120*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0121*/

   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0123*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0124*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0125*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0126*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0127*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0128*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0129*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0130*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0131*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0132*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0133*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0134*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0135*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0136*/
   ret |= freia_aipo_erode_8c(imclose, imtmp_1, kernel1x3);             /*0137*/
   ret |= freia_aipo_copy(imtmp_1, imclose);                            /*0138*/

   freia_common_destruct_data(imtmp_1);                                 /*0140*/

   ret |= freia_aipo_threshold(imopenth, imopen, 1, 50, 1);             /*0142*/
   ret |= freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);        /*0143*/
   ret |= freia_aipo_and(imand, imopenth, imcloseth);                   /*0144*/

   imtmp_2 = freia_common_create_data(imfilt->bpp, imfilt->widthWa, imfilt->heightWa);                /*0146*/

   ret |= freia_aipo_copy(imtmp_2, imand);                              /*0148*/

   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0150*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0151*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0152*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0153*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0154*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0155*/
   ret |= freia_aipo_erode_8c(imfilt, imtmp_2, kernel3x1);              /*0156*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0157*/

   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0159*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0160*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0161*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0162*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0163*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0164*/
   ret |= freia_aipo_dilate_8c(imfilt, imtmp_2, kernel3x1);             /*0165*/
   ret |= freia_aipo_copy(imtmp_2, imfilt);                             /*0166*/

   freia_common_destruct_data(imtmp_2);                                 /*0168*/

   imtmp_3 = freia_common_create_data(imout->bpp, imout->widthWa, imout->heightWa);    /*0170*/

   ret |= freia_aipo_copy(imtmp_3, imfilt);                             /*0172*/

   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0174*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0175*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0176*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0177*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0178*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0179*/
   ret |= freia_aipo_erode_8c(imout, imtmp_3, kernel1x3);               /*0180*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0181*/

   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0183*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0184*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0185*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0186*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0187*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0188*/
   ret |= freia_aipo_dilate_8c(imout, imtmp_3, kernel1x3);              /*0189*/
   ret |= freia_aipo_copy(imtmp_3, imout);                              /*0190*/

   freia_common_destruct_data(imtmp_3);                                 /*0192*/

   ret |= freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);     /*0194*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0195*/
   ret |= freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);       /*0196*/
   ret |= freia_aipo_and(out, out, in);                                 /*0197*/

   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(immir);                                   /*0202*/
   freia_common_destruct_data(imopen);                                  /*0203*/
   freia_common_destruct_data(imclose);                                 /*0204*/
   freia_common_destruct_data(imopenth);                                /*0205*/
   freia_common_destruct_data(imcloseth);                               /*0206*/
   freia_common_destruct_data(imand);                                   /*0207*/
   freia_common_destruct_data(imfilt);                                  /*0208*/
   freia_common_destruct_data(imout);                                   /*0209*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=0 #I=66 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out"];
  "190 =" [shape=circle];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "189 D8" -> "190 =" [label="imout"];
  "188 =" [shape=circle];
  "188 =" -> "189 D8" [label="imtmp_3"];
  "187 D8" [shape=box];
  "187 D8" -> "188 =" [label="imout"];
  "186 =" [shape=circle];
  "186 =" -> "187 D8" [label="imtmp_3"];
  "185 D8" [shape=box];
  "185 D8" -> "186 =" [label="imout"];
  "184 =" [shape=circle];
  "184 =" -> "185 D8" [label="imtmp_3"];
  "183 D8" [shape=box];
  "183 D8" -> "184 =" [label="imout"];
  "181 =" [shape=circle];
  "181 =" -> "183 D8" [label="imtmp_3"];
  "180 E8" [shape=box];
  "180 E8" -> "181 =" [label="imout"];
  "179 =" [shape=circle];
  "179 =" -> "180 E8" [label="imtmp_3"];
  "178 E8" [shape=box];
  "178 E8" -> "179 =" [label="imout"];
  "177 =" [shape=circle];
  "177 =" -> "178 E8" [label="imtmp_3"];
  "176 E8" [shape=box];
  "176 E8" -> "177 =" [label="imout"];
  "175 =" [shape=circle];
  "175 =" -> "176 E8" [label="imtmp_3"];
  "174 E8" [shape=box];
  "174 E8" -> "175 =" [label="imout"];
  "172 =" [shape=circle];
  "172 =" -> "174 E8" [label="imtmp_3"];
  "166 =" [shape=circle];
  "165 D8" [shape=box];
  "165 D8" -> "172 =" [label="imfilt"];
  "165 D8" -> "166 =" [label="imfilt"];
  "164 =" [shape=circle];
  "164 =" -> "165 D8" [label="imtmp_2"];
  "163 D8" [shape=box];
  "163 D8" -> "164 =" [label="imfilt"];
  "162 =" [shape=circle];
  "162 =" -> "163 D8" [label="imtmp_2"];
  "161 D8" [shape=box];
  "161 D8" -> "162 =" [label="imfilt"];
  "160 =" [shape=circle];
  "160 =" -> "161 D8" [label="imtmp_2"];
  "159 D8" [shape=box];
  "159 D8" -> "160 =" [label="imfilt"];
  "157 =" [shape=circle];
  "157 =" -> "159 D8" [label="imtmp_2"];
  "156 E8" [shape=box];
  "156 E8" -> "157 =" [label="imfilt"];
  "155 =" [shape=circle];
  "155 =" -> "156 E8" [label="imtmp_2"];
  "154 E8" [shape=box];
  "154 E8" -> "155 =" [label="imfilt"];
  "153 =" [shape=circle];
  "153 =" -> "154 E8" [label="imtmp_2"];
  "152 E8" [shape=box];
  "152 E8" -> "153 =" [label="imfilt"];
  "151 =" [shape=circle];
  "151 =" -> "152 E8" [label="imtmp_2"];
  "150 E8" [shape=box];
  "150 E8" -> "151 =" [label="imfilt"];
  "148 =" [shape=circle];
  "148 =" -> "150 E8" [label="imtmp_2"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "148 =" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "138 =" [shape=circle];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "137 E8" -> "138 =" [label="imclose"];
  "136 =" [shape=circle];
  "136 =" -> "137 E8" [label="imtmp_1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 =" [label="imclose"];
  "134 =" [shape=circle];
  "134 =" -> "135 E8" [label="imtmp_1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 =" [label="imclose"];
  "132 =" [shape=circle];
  "132 =" -> "133 E8" [label="imtmp_1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 =" [label="imclose"];
  "130 =" [shape=circle];
  "130 =" -> "131 E8" [label="imtmp_1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 =" [label="imclose"];
  "128 =" [shape=circle];
  "128 =" -> "129 E8" [label="imtmp_1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 =" [label="imclose"];
  "126 =" [shape=circle];
  "126 =" -> "127 E8" [label="imtmp_1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 =" [label="imclose"];
  "124 =" [shape=circle];
  "124 =" -> "125 E8" [label="imtmp_1"];
  "123 E8" [shape=box];
  "123 E8" -> "124 =" [label="imclose"];
  "121 =" [shape=circle];
  "121 =" -> "123 E8" [label="imtmp_1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 =" [label="imclose"];
  "119 =" [shape=circle];
  "119 =" -> "120 D8" [label="imtmp_1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 =" [label="imclose"];
  "117 =" [shape=circle];
  "117 =" -> "118 D8" [label="imtmp_1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 =" [label="imclose"];
  "115 =" [shape=circle];
  "115 =" -> "116 D8" [label="imtmp_1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 =" [label="imclose"];
  "113 =" [shape=circle];
  "113 =" -> "114 D8" [label="imtmp_1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 =" [label="imclose"];
  "111 =" [shape=circle];
  "111 =" -> "112 D8" [label="imtmp_1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 =" [label="imclose"];
  "109 =" [shape=circle];
  "109 =" -> "110 D8" [label="imtmp_1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 =" [label="imclose"];
  "107 =" [shape=circle];
  "107 =" -> "108 D8" [label="imtmp_1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 =" [label="imclose"];
  "104 =" [shape=circle];
  "104 =" -> "106 D8" [label="imtmp_1"];
  "98 =" [shape=circle];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "97 D8" -> "98 =" [label="imopen"];
  "96 =" [shape=circle];
  "96 =" -> "97 D8" [label="imtmp_0"];
  "95 D8" [shape=box];
  "95 D8" -> "96 =" [label="imopen"];
  "94 =" [shape=circle];
  "94 =" -> "95 D8" [label="imtmp_0"];
  "93 D8" [shape=box];
  "93 D8" -> "94 =" [label="imopen"];
  "92 =" [shape=circle];
  "92 =" -> "93 D8" [label="imtmp_0"];
  "91 D8" [shape=box];
  "91 D8" -> "92 =" [label="imopen"];
  "90 =" [shape=circle];
  "90 =" -> "91 D8" [label="imtmp_0"];
  "89 D8" [shape=box];
  "89 D8" -> "90 =" [label="imopen"];
  "88 =" [shape=circle];
  "88 =" -> "89 D8" [label="imtmp_0"];
  "87 D8" [shape=box];
  "87 D8" -> "88 =" [label="imopen"];
  "86 =" [shape=circle];
  "86 =" -> "87 D8" [label="imtmp_0"];
  "85 D8" [shape=box];
  "85 D8" -> "86 =" [label="imopen"];
  "84 =" [shape=circle];
  "84 =" -> "85 D8" [label="imtmp_0"];
  "83 D8" [shape=box];
  "83 D8" -> "84 =" [label="imopen"];
  "82 =" [shape=circle];
  "82 =" -> "83 D8" [label="imtmp_0"];
  "81 D8" [shape=box];
  "81 D8" -> "82 =" [label="imopen"];
  "80 =" [shape=circle];
  "80 =" -> "81 D8" [label="imtmp_0"];
  "79 D8" [shape=box];
  "79 D8" -> "80 =" [label="imopen"];
  "78 =" [shape=circle];
  "78 =" -> "79 D8" [label="imtmp_0"];
  "77 D8" [shape=box];
  "77 D8" -> "78 =" [label="imopen"];
  "76 =" [shape=circle];
  "76 =" -> "77 D8" [label="imtmp_0"];
  "75 D8" [shape=box];
  "75 D8" -> "76 =" [label="imopen"];
  "74 =" [shape=circle];
  "74 =" -> "75 D8" [label="imtmp_0"];
  "73 D8" [shape=box];
  "73 D8" -> "74 =" [label="imopen"];
  "72 =" [shape=circle];
  "72 =" -> "73 D8" [label="imtmp_0"];
  "71 D8" [shape=box];
  "71 D8" -> "72 =" [label="imopen"];
  "70 =" [shape=circle];
  "70 =" -> "71 D8" [label="imtmp_0"];
  "69 D8" [shape=box];
  "69 D8" -> "70 =" [label="imopen"];
  "67 =" [shape=circle];
  "67 =" -> "69 D8" [label="imtmp_0"];
  "66 E8" [shape=box];
  "66 E8" -> "67 =" [label="imopen"];
  "65 =" [shape=circle];
  "65 =" -> "66 E8" [label="imtmp_0"];
  "64 E8" [shape=box];
  "64 E8" -> "65 =" [label="imopen"];
  "63 =" [shape=circle];
  "63 =" -> "64 E8" [label="imtmp_0"];
  "62 E8" [shape=box];
  "62 E8" -> "63 =" [label="imopen"];
  "61 =" [shape=circle];
  "61 =" -> "62 E8" [label="imtmp_0"];
  "60 E8" [shape=box];
  "60 E8" -> "61 =" [label="imopen"];
  "59 =" [shape=circle];
  "59 =" -> "60 E8" [label="imtmp_0"];
  "58 E8" [shape=box];
  "58 E8" -> "59 =" [label="imopen"];
  "57 =" [shape=circle];
  "57 =" -> "58 E8" [label="imtmp_0"];
  "56 E8" [shape=box];
  "56 E8" -> "57 =" [label="imopen"];
  "55 =" [shape=circle];
  "55 =" -> "56 E8" [label="imtmp_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 =" [label="imopen"];
  "53 =" [shape=circle];
  "53 =" -> "54 E8" [label="imtmp_0"];
  "52 E8" [shape=box];
  "52 E8" -> "53 =" [label="imopen"];
  "51 =" [shape=circle];
  "51 =" -> "52 E8" [label="imtmp_0"];
  "50 E8" [shape=box];
  "50 E8" -> "51 =" [label="imopen"];
  "49 =" [shape=circle];
  "49 =" -> "50 E8" [label="imtmp_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 =" [label="imopen"];
  "47 =" [shape=circle];
  "47 =" -> "48 E8" [label="imtmp_0"];
  "46 E8" [shape=box];
  "46 E8" -> "47 =" [label="imopen"];
  "45 =" [shape=circle];
  "45 =" -> "46 E8" [label="imtmp_0"];
  "44 E8" [shape=box];
  "44 E8" -> "45 =" [label="imopen"];
  "43 =" [shape=circle];
  "43 =" -> "44 E8" [label="imtmp_0"];
  "42 E8" [shape=box];
  "42 E8" -> "43 =" [label="imopen"];
  "41 =" [shape=circle];
  "41 =" -> "42 E8" [label="imtmp_0"];
  "40 E8" [shape=box];
  "40 E8" -> "41 =" [label="imopen"];
  "39 =" [shape=circle];
  "39 =" -> "40 E8" [label="imtmp_0"];
  "38 E8" [shape=box];
  "38 E8" -> "39 =" [label="imopen"];
  "36 =" [shape=circle];
  "36 =" -> "38 E8" [label="imtmp_0"];
  "in" -> "197 &";
  "in" -> "104 =";
  "in" -> "36 =";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "197 &" [shape=trapezium,orientation=270];
  "197 &" -> "out";
  "196 D8" [shape=box];
  "196 D8" -> "197 &" [label="out_1"];
  "195 D8" [shape=box];
  "195 D8" -> "196 D8" [label="out_2"];
  "194 D8" [shape=box];
  "194 D8" -> "195 D8" [label="out_3"];
  "189 D8" [shape=box];
  "189 D8" -> "194 D8" [label="imout"];
  "187 D8" [shape=box];
  "187 D8" -> "189 D8" [label="imout_1"];
  "185 D8" [shape=box];
  "185 D8" -> "187 D8" [label="imout_2"];
  "183 D8" [shape=box];
  "183 D8" -> "185 D8" [label="imout_3"];
  "180 E8" [shape=box];
  "180 E8" -> "183 D8" [label="imout_4"];
  "178 E8" [shape=box];
  "178 E8" -> "180 E8" [label="imout_5"];
  "176 E8" [shape=box];
  "176 E8" -> "178 E8" [label="imout_6"];
  "174 E8" [shape=box];
  "174 E8" -> "176 E8" [label="imout_7"];
  "165 D8" [shape=box];
  "165 D8" -> "174 E8" [label="imfilt"];
  "163 D8" [shape=box];
  "163 D8" -> "165 D8" [label="imfilt_1"];
  "161 D8" [shape=box];
  "161 D8" -> "163 D8" [label="imfilt_2"];
  "159 D8" [shape=box];
  "159 D8" -> "161 D8" [label="imfilt_3"];
  "156 E8" [shape=box];
  "156 E8" -> "159 D8" [label="imfilt_4"];
  "154 E8" [shape=box];
  "154 E8" -> "156 E8" [label="imfilt_5"];
  "152 E8" [shape=box];
  "152 E8" -> "154 E8" [label="imfilt_6"];
  "150 E8" [shape=box];
  "150 E8" -> "152 E8" [label="imfilt_7"];
  "144 &" [shape=trapezium,orientation=270];
  "144 &" -> "150 E8" [label="imand"];
  "143 thr" [shape=parallelogram];
  "143 thr" -> "144 &" [label="imcloseth"];
  "142 thr" [shape=parallelogram];
  "142 thr" -> "144 &" [label="imopenth"];
  "137 E8" [shape=box];
  "137 E8" -> "143 thr" [label="imclose"];
  "135 E8" [shape=box];
  "135 E8" -> "137 E8" [label="imclose_1"];
  "133 E8" [shape=box];
  "133 E8" -> "135 E8" [label="imclose_2"];
  "131 E8" [shape=box];
  "131 E8" -> "133 E8" [label="imclose_3"];
  "129 E8" [shape=box];
  "129 E8" -> "131 E8" [label="imclose_4"];
  "127 E8" [shape=box];
  "127 E8" -> "129 E8" [label="imclose_5"];
  "125 E8" [shape=box];
  "125 E8" -> "127 E8" [label="imclose_6"];
  "123 E8" [shape=box];
  "123 E8" -> "125 E8" [label="imclose_7"];
  "120 D8" [shape=box];
  "120 D8" -> "123 E8" [label="imclose_8"];
  "118 D8" [shape=box];
  "118 D8" -> "120 D8" [label="imclose_9"];
  "116 D8" [shape=box];
  "116 D8" -> "118 D8" [label="imclose_10"];
  "114 D8" [shape=box];
  "114 D8" -> "116 D8" [label="imclose_11"];
  "112 D8" [shape=box];
  "112 D8" -> "114 D8" [label="imclose_12"];
  "110 D8" [shape=box];
  "110 D8" -> "112 D8" [label="imclose_13"];
  "108 D8" [shape=box];
  "108 D8" -> "110 D8" [label="imclose_14"];
  "106 D8" [shape=box];
  "106 D8" -> "108 D8" [label="imclose_15"];
  "97 D8" [shape=box];
  "97 D8" -> "142 thr" [label="imopen"];
  "95 D8" [shape=box];
  "95 D8" -> "97 D8" [label="imopen_1"];
  "93 D8" [shape=box];
  "93 D8" -> "95 D8" [label="imopen_2"];
  "91 D8" [shape=box];
  "91 D8" -> "93 D8" [label="imopen_3"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="imopen_4"];
  "87 D8" [shape=box];
  "87 D8" -> "89 D8" [label="imopen_5"];
  "85 D8" [shape=box];
  "85 D8" -> "87 D8" [label="imopen_6"];
  "83 D8" [shape=box];
  "83 D8" -> "85 D8" [label="imopen_7"];
  "81 D8" [shape=box];
  "81 D8" -> "83 D8" [label="imopen_8"];
  "79 D8" [shape=box];
  "79 D8" -> "81 D8" [label="imopen_9"];
  "77 D8" [shape=box];
  "77 D8" -> "79 D8" [label="imopen_10"];
  "75 D8" [shape=box];
  "75 D8" -> "77 D8" [label="imopen_11"];
  "73 D8" [shape=box];
  "73 D8" -> "75 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "73 D8" [label="imopen_13"];
  "69 D8" [shape=box];
  "69 D8" -> "71 D8" [label="imopen_14"];
  "66 E8" [shape=box];
  "66 E8" -> "69 D8" [label="imopen_15"];
  "64 E8" [shape=box];
  "64 E8" -> "66 E8" [label="imopen_16"];
  "62 E8" [shape=box];
  "62 E8" -> "64 E8" [label="imopen_17"];
  "60 E8" [shape=box];
  "60 E8" -> "62 E8" [label="imopen_18"];
  "58 E8" [shape=box];
  "58 E8" -> "60 E8" [label="imopen_19"];
  "56 E8" [shape=box];
  "56 E8" -> "58 E8" [label="imopen_20"];
  "54 E8" [shape=box];
  "54 E8" -> "56 E8" [label="imopen_21"];
  "52 E8" [shape=box];
  "52 E8" -> "54 E8" [label="imopen_22"];
  "50 E8" [shape=box];
  "50 E8" -> "52 E8" [label="imopen_23"];
  "48 E8" [shape=box];
  "48 E8" -> "50 E8" [label="imopen_24"];
  "46 E8" [shape=box];
  "46 E8" -> "48 E8" [label="imopen_25"];
  "44 E8" [shape=box];
  "44 E8" -> "46 E8" [label="imopen_26"];
  "42 E8" [shape=box];
  "42 E8" -> "44 E8" [label="imopen_27"];
  "40 E8" [shape=box];
  "40 E8" -> "42 E8" [label="imopen_28"];
  "38 E8" [shape=box];
  "38 E8" -> "40 E8" [label="imopen_29"];
  "in" -> "106 D8";
  "in" -> "38 E8";
  "in" -> "197 &";
}

! updated function for OPENCL

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/

   freia_data2d *in;                                                    /*0008*/
   freia_data2d *out;                                                   /*0009*/

   freia_status ret;                                                    /*0014*/

   freia_initialize(argc, argv);                                        /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0019*/

   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0021*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0030*/

   freia_common_rx_image(in, &fdin);                                    /*0032*/
   
   
   
   
   
   ret = 0;                                                             /*0036*/
   
   
   
   
   
   
   
   
   
   
   ret |= freia_mppa_launch(0, 1, 1, 0, 0, in, out);                    /*0197*/
   
   
   
   
   
   
   
   
   freia_common_tx_image(out, &fdout);                                  /*0199*/

   freia_common_destruct_data(in);                                      /*0201*/
   freia_common_destruct_data(out);                                     /*0210*/

   freia_common_close_input(&fdin);                                     /*0212*/
   freia_common_close_output(&fdout);                                   /*0213*/

   freia_shutdown();                                                    /*0215*/
   return ret;                                                          /*0216*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_0 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_0_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 2, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t po0 = PIXEL_THR(pi0, 1, 50, 1);
  int16_t po1 = PIXEL_THR(pi1, 150, 255, 1);
  int16_t po2 = PIXEL_AND(po0, po1);
  outp[0][i] = po2;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi1_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi1_0, int16_t)


#define pi2_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\

CUSTOM_MORPHO_AGENT(pi2_0, int16_t)

subgraph
main_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi1[9] = { 0, 0, 0, 1, 1, 1, 0, 0, 0 };
    int16_t pi2[9] = { 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    int16_t pi3 = 150;
    int16_t pi4 = 255;
    int16_t pi5 = 1;
    int16_t pi6 = 1;
    int16_t pi7 = 50;
    int16_t pi8 = 1;

    // instantiations...
    agent dup0 = new rep(3, width);
    agent ero30 = new erode_pi1_0(width, height);
    agent ero29 = new erode_pi1_0(width, height);
    agent ero28 = new erode_pi1_0(width, height);
    agent ero27 = new erode_pi1_0(width, height);
    agent ero26 = new erode_pi1_0(width, height);
    agent ero25 = new erode_pi1_0(width, height);
    agent ero24 = new erode_pi1_0(width, height);
    agent ero23 = new erode_pi1_0(width, height);
    agent ero22 = new erode_pi1_0(width, height);
    agent ero21 = new erode_pi1_0(width, height);
    agent ero20 = new erode_pi1_0(width, height);
    agent ero19 = new erode_pi1_0(width, height);
    agent ero18 = new erode_pi1_0(width, height);
    agent ero17 = new erode_pi1_0(width, height);
    agent ero16 = new erode_pi1_0(width, height);
    agent dil33 = new dilate_pi1_0(width, height);
    agent dil32 = new dilate_pi1_0(width, height);
    agent dil31 = new dilate_pi1_0(width, height);
    agent dil30 = new dilate_pi1_0(width, height);
    agent dil29 = new dilate_pi1_0(width, height);
    agent dil28 = new dilate_pi1_0(width, height);
    agent dil27 = new dilate_pi1_0(width, height);
    agent dil26 = new dilate_pi1_0(width, height);
    agent dil25 = new dilate_pi1_0(width, height);
    agent dil24 = new dilate_pi1_0(width, height);
    agent dil23 = new dilate_pi1_0(width, height);
    agent dil22 = new dilate_pi1_0(width, height);
    agent dil21 = new dilate_pi1_0(width, height);
    agent dil20 = new dilate_pi1_0(width, height);
    agent dil19 = new dilate_pi1_0(width, height);
    agent dil18 = new dilate_pi1_0(width, height);
    agent dil17 = new dilate_pi1_0(width, height);
    agent dil16 = new dilate_pi1_0(width, height);
    agent dil15 = new dilate_pi1_0(width, height);
    agent dil14 = new dilate_pi1_0(width, height);
    agent dil13 = new dilate_pi1_0(width, height);
    agent dil12 = new dilate_pi1_0(width, height);
    agent dil11 = new dilate_pi1_0(width, height);
    agent ero15 = new erode_pi1_0(width, height);
    agent ero14 = new erode_pi1_0(width, height);
    agent ero13 = new erode_pi1_0(width, height);
    agent ero12 = new erode_pi1_0(width, height);
    agent ero11 = new erode_pi1_0(width, height);
    agent ero10 = new erode_pi1_0(width, height);
    agent ero9 = new erode_pi1_0(width, height);
    agent ero8 = new erode_pi1_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);
    agent ero7 = new erode_pi2_0(width, height);
    agent ero6 = new erode_pi2_0(width, height);
    agent ero5 = new erode_pi2_0(width, height);
    agent ero4 = new erode_pi2_0(width, height);
    agent dil10 = new dilate_pi2_0(width, height);
    agent dil9 = new dilate_pi2_0(width, height);
    agent dil8 = new dilate_pi2_0(width, height);
    agent dil7 = new dilate_pi2_0(width, height);
    agent ero3 = new erode_pi1_0(width, height);
    agent ero2 = new erode_pi1_0(width, height);
    agent ero1 = new erode_pi1_0(width, height);
    agent ero0 = new erode_pi1_0(width, height);
    agent dil6 = new dilate_pi1_0(width, height);
    agent dil5 = new dilate_pi1_0(width, height);
    agent dil4 = new dilate_pi1_0(width, height);
    agent dil3 = new dilate_pi1_0(width, height);
    agent dil2 = new dilate_pi0_0(width, height);
    agent dil1 = new dilate_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);
    agent and0 = new img_and_img_16(width);

    // connections...
    connect (strin.output[0] /* in */, dup0.input);
    connect (dup0.output[2], and0.input[1]);
    connect (dup0.output[1], dil18.input);
    connect (dup0.output[0], ero30.input);
    connect (ero30.output, ero29.input);
    connect (ero29.output, ero28.input);
    connect (ero28.output, ero27.input);
    connect (ero27.output, ero26.input);
    connect (ero26.output, ero25.input);
    connect (ero25.output, ero24.input);
    connect (ero24.output, ero23.input);
    connect (ero23.output, ero22.input);
    connect (ero22.output, ero21.input);
    connect (ero21.output, ero20.input);
    connect (ero20.output, ero19.input);
    connect (ero19.output, ero18.input);
    connect (ero18.output, ero17.input);
    connect (ero17.output, ero16.input);
    connect (ero16.output, dil33.input);
    connect (dil33.output, dil32.input);
    connect (dil32.output, dil31.input);
    connect (dil31.output, dil30.input);
    connect (dil30.output, dil29.input);
    connect (dil29.output, dil28.input);
    connect (dil28.output, dil27.input);
    connect (dil27.output, dil26.input);
    connect (dil26.output, dil25.input);
    connect (dil25.output, dil24.input);
    connect (dil24.output, dil23.input);
    connect (dil23.output, dil22.input);
    connect (dil22.output, dil21.input);
    connect (dil21.output, dil20.input);
    connect (dil20.output, dil19.input);
    connect (dil19.output, cpd0.input[0]);
    connect (dil18.output, dil17.input);
    connect (dil17.output, dil16.input);
    connect (dil16.output, dil15.input);
    connect (dil15.output, dil14.input);
    connect (dil14.output, dil13.input);
    connect (dil13.output, dil12.input);
    connect (dil12.output, dil11.input);
    connect (dil11.output, ero15.input);
    connect (ero15.output, ero14.input);
    connect (ero14.output, ero13.input);
    connect (ero13.output, ero12.input);
    connect (ero12.output, ero11.input);
    connect (ero11.output, ero10.input);
    connect (ero10.output, ero9.input);
    connect (ero9.output, ero8.input);
    connect (ero8.output, cpd0.input[1]);
    connect (cpd0.output[0], ero7.input);
    connect (ero7.output, ero6.input);
    connect (ero6.output, ero5.input);
    connect (ero5.output, ero4.input);
    connect (ero4.output, dil10.input);
    connect (dil10.output, dil9.input);
    connect (dil9.output, dil8.input);
    connect (dil8.output, dil7.input);
    connect (dil7.output, ero3.input);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, dil6.input);
    connect (dil6.output, dil5.input);
    connect (dil5.output, dil4.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, and0.input[0]);
    connect (and0.output, strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


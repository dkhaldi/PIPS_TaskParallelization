
Parsed code for "call05"

void call05(int r, int m, int *x)
{
   int j;

   for (j = 0;j<m;j++)
      x[j] = 10*r+j;
}

Code for "call05"

void call05(int r, int m, int *x)
{
   int j;

   for(j = 0; j <= m-1; j += 1)
      x[j] = 10*r+j;
}

Proper effects for "call05"

void call05(int r, int m, int *x)
{
   int j;
//             <    is read   >: m
//             <    is written>: j

   for(j = 0; j <= m-1; j += 1)
//             <    is read   >: j m r x
//             <    is written>: x[j]
      x[j] = 10*r+j;
}

Cumulated effects for "call05"

//             <may be read   >: r x
//             <may be written>: x[*]
//             <    is read   >: m
void call05(int r, int m, int *x)
{
   int j;
//             <may be read   >: j r x
//             <may be written>: x[*]
//             <    is read   >: m
//             <    is written>: j

   for(j = 0; j <= m-1; j += 1)
//             <may be written>: x[*]
//             <    is read   >: j m r x
      x[j] = 10*r+j;
}

Proper effects for "main"

int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i, j;
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1)
//             <may be written>: y[i][*]
//             <    is read   >: d1 d2 i
      call05(i, d2, y[i]);
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1) {
//             <    is read   >: d1 d2
//             <    is written>: j
      for(j = 0; j <= d2-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 d2 i j stdout y[i][j] 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\n");
   }
}

Cumulated effects for "main"

//             <may be read   >: stdout stdout[0] __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i, j;
//             <may be read   >: d2 i
//             <may be written>: y[*][*]
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1)
//             <may be written>: y[*][*]
//             <    is read   >: d1 d2 i
      call05(i, d2, y[i]);
//             <may be read   >: d2 i j stdout stdout[0] y[*][*] 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: j stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1) {
//             <may be read   >: i j stdout stdout[0] y[*][*] 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: d1 d2
//             <    is written>: j
      for(j = 0; j <= d2-1; j += 1)
//             <may be read   >: stdout[0] y[*][*]
//             <may be written>: stdout[0]
//             <    is read   >: d1 d2 i j stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\n");
   }
}

Regions for "call05"


//  <x-R-EXACT-{}>
//  <x[PHI1]-W-EXACT-{0<=PHI1, PHI1+1<=m}>

void call05(int r, int m, int *x)
{
   int j;

//  <x-R-EXACT-{}>
//  <x[PHI1]-W-EXACT-{0<=PHI1, PHI1+1<=m}>


   for(j = 0; j <= m-1; j += 1)

//  <x-R-EXACT-{}>
//  <x[PHI1]-W-EXACT-{PHI1==j, 0<=j, j+1<=m}>

      x[j] = 10*r+j;
}

Regions for "main"


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main()
{
   int d1 = 4;
   int d2 = 4;
   int y[d1][d2];
   int i, j;

//  <y[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3, d1==4,
//    d2==4}>


   for(i = 0; i <= d1-1; i += 1)

//  <y[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=3, d1==4, d2==4,
//    0<=i, i<=3}>

      call05(i, d2, y[i]);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0, 1<=d1}>
//  <stdout[PHI1]-W-MAY-{PHI1==0, 1<=d1}>
//  <y[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=3, 0<=PHI2, PHI2<=3, d1==4,
//    d2==4}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, d1==4, d2==4}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, d1==4, d2==4}>


   for(i = 0; i <= d1-1; i += 1) {

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <y[PHI1][PHI2]-R-EXACT-{PHI1==i, 0<=PHI2, PHI2<=3, d1==4, d2==4,
//    0<=i, i<=3}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, d1==4, d2==4, 0<=i,
//    i<=3}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, d1==4, d2==4, 0<=i,
//    i<=3}>

      for(j = 0; j <= d2-1; j += 1)

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <y[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, d1==4, d2==4, 0<=i,
//    i<=3, 0<=j, j<=3}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, d1==4, d2==4, 0<=i,
//    i<=3, 0<=j, j<=3}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, d1==4, d2==4, 0<=i,
//    i<=3, 0<=j, j<=3}>

         printf("y[%d][%d] = %d\t", i, j, y[i][j]);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, d1==4, d2==4, j==4,
//    0<=i, i<=3}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, d1==4, d2==4, j==4,
//    0<=i, i<=3}>

      printf("\n");
   }
}

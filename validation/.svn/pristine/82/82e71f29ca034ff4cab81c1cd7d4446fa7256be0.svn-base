
Transformer for "alea"


//  T(alea) {0<=alea, alea<=1}

_Bool alea(void)
{

//  T(alea) {0<=alea, alea<=1}

   // rand() >=0
   // 0 <= ((>=0) % 2) <= 1
   return rand()%2;
}

Preconditions for "alea"


//  P() {}

_Bool alea(void)
{

//  P() {}

   // rand() >=0
   // 0 <= ((>=0) % 2) <= 1
   return rand()%2;
}

Preconditions for "main"


//  P() {}

int main(void)
{

//  P() {}

   _Bool b1, b2, b3, b4, b5, b6, b7;

//  P() {}

   b1 = 1;

//  P(b1) {b1==1}

   b2 = 0;

//  P(b1,b2) {b1==1, b2==0}

   // b3 in 0..1 because of type? %2?
   b3 = alea();

//  P(b1,b2,b3) {b1==1, b2==0, 0<=b3, b3<=1}

   // b4 in 0..1 because logical
   b4 = b1&&b3;

//  P(b1,b2,b3,b4) {b1==1, b2==0, b3==b4, 0<=b3, b3<=1}

   // b5 in 0..1 because logical
   b5 = b1||b3;

//  P(b1,b2,b3,b4,b5) {b1==1, b2==0, b3==b4, b5==1, 0<=b3, b3<=1}

   // b6 in 0..1 because logical
   b6 = !b3;

//  P(b1,b2,b3,b4,b5,b6) {b1==1, b2==0, b3==b4, b3+b6==1, b5==1,
//    0<=b3, b3<=1}

   // b7: xor is a bitwise operator returning an int
   // it requires a special handling when both operand are boolean,
   // which is not (yet) implemented
   b7 = b1^b2;

//  P(b1,b2,b3,b4,b5,b6,b7) {b1==1, b2==0, b3==b4, b3+b6==1, b5==1,
//    b7==1, 0<=b3, b3<=1}

   return 0;
}

setenv WKS matadd
delete $WKS

setproperty ABORT_ON_USER_ERROR TRUE

create $WKS $WKS.f include/p4a_stubs.f

setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE

setproperty EVAL_SYMBOLIC_CONSTANT FALSE
setproperty GPU_LAUNCHER_PREFIX "P4A_LAUNCHER"
setproperty GPU_WRAPPER_PREFIX "P4A_WRAPPER"
setproperty GPU_KERNEL_PREFIX "P4A_KERNEL"
setproperty KERNEL_LOAD_STORE_ALLOCATE_FUNCTION "P4A_ACCEL_MALLOC"
setproperty KERNEL_LOAD_STORE_DEALLOCATE_FUNCTION "P4A_ACCEL_FREE"
setproperty KERNEL_LOAD_STORE_LOAD_FUNCTION "P4A_COPY_TO_ACCEL"
setproperty KERNEL_LOAD_STORE_STORE_FUNCTION "P4A_COPY_FROM_ACCEL"

activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL

# Loop normalize for the C language and GPU friendly
setproperty LOOP_NORMALIZE_ONE_INCREMENT TRUE
setproperty LOOP_NORMALIZE_LOWER_BOUND 0
# It is legal in the following by construction:
setproperty LOOP_NORMALIZE_SKIP_INDEX_SIDE_EFFECT TRUE
# If we do this here, the side effect at the end of a loop on the index
# break parallelization. It would require to apply USE_DEF_ELIM...
display PRINTED_FILE[%ALLFUNC]
apply LOOP_NORMALIZE[MATADD]

apply PRIVATIZE_MODULE[MATADD]

#activate PRINT_CODE_REGIONS
display PRINTED_FILE[%ALLFUNC]
display C_PRINTED_FILE[%ALLFUNC]

# Should not coredump, neither prevent some parallelization
#apply LOCALIZE_DECLARATION[main]

#activate PRINT_CODE_PRECONDITIONS
#display PRINTED_FILE[%ALLFUNC]

activate PRINT_CODE


apply COARSE_GRAIN_PARALLELIZATION[MATADD]

display PRINTED_FILE[MATADD]


apply GPU_IFY[MATADD]

display PRINTED_FILE[MATADD]
display C_PRINTED_FILE[%ALLFUNC]

apply UNSPLIT


quit
# Should be automatic with pyps:
#apply KERNEL_LOAD_STORE[p4a_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2,p4a_kernel_launcher_3,p4a_kernel_launcher_4,p4a_kernel_launcher_5]
apply KERNEL_LOAD_STORE[P4A_LAUNCHER_MATADD_0]
display PRINTED_FILE[%ALLFUNC]
display C_PRINTED_FILE[%ALLFUNC]

# Need pyps for automate this
#apply GPU_LOOP_NEST_ANNOTATE[p4a_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2,p4a_kernel_launcher_3,p4a_kernel_launcher_4,p4a_kernel_launcher_5]
apply GPU_LOOP_NEST_ANNOTATE[P4A_LAUNCHER_0]

# Inline back the kernel since CUDA can only deal with local functions if
# they are in the same file as the caller (by inlining them, by the
# way... :-) )
#apply INLINING[p4a_kernel_0,p4a_kernel_1,p4a_kernel_2,p4a_kernel_3,p4a_kernel_4]
apply INLINING[P4A_KERNEL_0]
# Instead, do a global loop normalization above:
#apply LOOP_NORMALIZE[p4a_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2]
#apply USE_DEF_ELIMINATION[p4a_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2]
#display PRINTED_FILE[p4a_launcher_0,p4a_kernel_launcher_1,p4a_kernel_launcher_2]

#apply SIMPLIFY_CONTROL
#display PRINTED_FILE

setproperty PREPEND_COMMENT "// Prepend here P4A_INIT_ACCEL"
apply PREPEND_COMMENT[main]

echo
echo Unsplit resulting code
echo

apply UNSPLIT

shell echo Generating P4A code:
shell echo
shell cd $WKS.database &> /dev/null ; ../../../P4A_CUDA/p4a_post_processor.py Src/*.c
shell echo
shell echo Compiling CUDA version
shell cd $WKS.database/P4A &> /dev/null ; /usr/local/cuda/bin/nvcc   --compiler-options -fno-strict-aliasing  --ptxas-options=-v  -arch=sm_13 -I.. -I.  -I../../../../P4A_CUDA -DP4A_ACCEL_CUDA -DP4A_DEBUG -I/usr/local/cuda/include -I/home/keryell/NVIDIA_GPU_Computing_SDK/C/src/../common/inc -DUNIX -O2 -c *.cu ../../../../P4A_CUDA/p4a_accel.cu ; g++ -fPIC -o $WKS-cuda   *.o     -L/usr/local/cuda/lib64 -L/home/keryell/NVIDIA_GPU_Computing_SDK/C/src/../lib -L/home/keryell/NVIDIA_GPU_Computing_SDK/C/src/../common/lib/linux  -lcudart     -L/usr/local/cuda/lib64 -L/home/keryell/NVIDIA_GPU_Computing_SDK/C/src/../lib -L/home/keryell/NVIDIA_GPU_Computing_SDK/C/src/../common/lib/linux  -lcutil
shell echo
shell echo Running CUDA version
shell cd $WKS.database/P4A &> /dev/null ; time ./$WKS-cuda  ../../Logo_HPC-Project-512x247-crop.pgm 2000 amplitude.pgm phase.pgm; diff amplitude.pgm ../../amplitude-ref.pgm; diff phase.pgm ../../phase-ref.pgm
shell echo
shell echo Compiling OpenMP version
# -g -DP4A_DEBUG
shell gcc -std=c99 -O3 -fopenmp -I../../P4A_CUDA -DP4A_ACCEL_OPENMP -DP4A_DEBUG -I/usr/local/cuda/include -I$HOME/NVIDIA_GPU_Computing_SDK/C/common/inc $WKS.database/P4A/*.c ../../P4A_CUDA/p4a_accel.c -o $WKS.database/P4A/$WKS -lm
shell echo
shell echo Running OpenMP version
shell cd $WKS.database/P4A &> /dev/null ; time ./$WKS  ../../Logo_HPC-Project-512x247-crop.pgm 2000 amplitude.pgm phase.pgm; diff amplitude.pgm ../../amplitude-ref.pgm; diff phase.pgm ../../phase-ref.pgm
#shell rm -rf $WKS.database/Src/kernelize.o

close
#delete $WKS
quit

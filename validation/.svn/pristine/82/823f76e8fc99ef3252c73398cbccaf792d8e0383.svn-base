Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analyses:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:
Check the proper effects, especially for variable fp and call to fgetc()
void getimage(void)
{
   int i, j;
   unsigned char c;
   FILE *fp;
//             <    is written>: fp
   
   /* To try to avoid fp privatization */
   fp = (void *) 0;
//             <    is written>: i
   
   /* This loops should not be distributed.  On 2009/05/26, if the main()
        is removed, this bug too... */
   for(i = 0; i <= 63; i += 1)
//             <    is written>: j
      for(j = 0; j <= 63; j += 1) {
//             <    is read   >: fp
//             <    is written>: c
         c = foo(fp);
//             <    is read   >: c i j
//             <    is written>: imagein_re[i][j]
         imagein_re[i][j] = c==0?0.0:1.0;
//             <    is read   >: i j
//             <    is written>: imagein_im[i][j]
         imagein_im[i][j] = 0.0;
      }
}
Privatize scalar variables on all the modules of the program:
Ask for some statistics about the job to be done:
Ask for the parallelization of all the modules of the program with OpenMP output:
void getimage(void)
{
   int i, j;
   unsigned char c;
   FILE *fp;
   
   /* To try to avoid fp privatization */
   fp = (void *) 0;
   
   /* This loops should not be distributed.  On 2009/05/26, if the main()
        is removed, this bug too... */
#pragma omp parallel for private(j)
   for(i = 0; i <= 63; i += 1)
#pragma omp parallel for private(c)
      for(j = 0; j <= 63; j += 1) {
         c = foo(fp);
         imagein_re[i][j] = c==0?0.0:1.0;
         imagein_im[i][j] = 0.0;
      }
}
Regenerate the sources from the PIPS transformed code:


Initial code

freia_error freia_cipo_dilate(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   int kernel_8c[9] = {1, 1, 1, 1, 1, 1, 1, 1, 1};

   int kernel_6c[9] = {0, 1, 1, 1, 1, 1, 0, 1, 1};

   int kernel_4c[9] = {0, 1, 0, 1, 1, 1, 0, 1, 0};

   int i;

   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }

   if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) {
      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      return FREIA_SIZE_ERROR;
   }

   if (size==0) {
      freia_aipo_copy(imout, imin);
      return FREIA_OK;
   }

   if (connexity==4) goto _switch_1_case_4;
   if (connexity==6) goto _switch_1_case_6;
   if (connexity==8) goto _switch_1_case_8;

_switch_1_default:   ;
   return FREIA_INVALID_PARAM;

_switch_1_case_8:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_8c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_8c);
   goto _break_1;

_switch_1_case_6:   ;
   freia_aipo_dilate_6c(imout, imin, kernel_6c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_6c(imout, imout, kernel_6c);
   goto _break_1;
_switch_1_case_4:   ;
   freia_aipo_dilate_8c(imout, imin, kernel_4c);
   for (i = 1;i<size;i++)
      freia_aipo_dilate_8c(imout, imout, kernel_4c);
_break_1:   ;

   return FREIA_OK;
}
freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;

   ret = freia_cipo_dilate(imout, imin, connexity, size);
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Because %ALL is modified by code synthesis, let's get ready

 freia_cipo_outer_gradient
     freia_cipo_dilate
         freia_common_check_image_bpp_compat
         freia_common_print_backtrace
         freia_aipo_copy
         freia_aipo_dilate_8c
         freia_aipo_dilate_6c
     freia_aipo_sub

Code after inlining

freia_error freia_cipo_outer_gradient(freia_data2d *imout, freia_data2d *imin, int32_t connexity, uint32_t size)
{
   freia_error ret;
   //PIPS generated variable
   freia_error _return0;
   {
      int kernel_8c[9];

      int kernel_6c[9];

      int kernel_4c[9];

      int i;
      kernel_8c[0] = 1;
      kernel_8c[1] = 1;
      kernel_8c[2] = 1;
      kernel_8c[3] = 1;
      kernel_8c[4] = 1;
      kernel_8c[5] = 1;
      kernel_8c[6] = 1;
      kernel_8c[7] = 1;
      kernel_8c[8] = 1;
      kernel_6c[0] = 0;
      kernel_6c[1] = 1;
      kernel_6c[2] = 1;
      kernel_6c[3] = 1;
      kernel_6c[4] = 1;
      kernel_6c[5] = 1;
      kernel_6c[6] = 0;
      kernel_6c[7] = 1;
      kernel_6c[8] = 1;
      kernel_4c[0] = 0;
      kernel_4c[1] = 1;
      kernel_4c[2] = 0;
      kernel_4c[3] = 1;
      kernel_4c[4] = 1;
      kernel_4c[5] = 1;
      kernel_4c[6] = 0;
      kernel_4c[7] = 1;
      kernel_4c[8] = 0;

      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99998;

      if (freia_common_check_image_bpp_compat(imout, imin, (void *) 0)!=1) goto l99997;

      if (size==0) goto l99996;

      if (connexity==4) goto l99995;
      if (connexity==6) goto l99994;
      if (connexity==8) goto l99993;

      _return0 = FREIA_INVALID_PARAM;
      goto l99992;
l99993:      ;

      freia_aipo_dilate_8c(imout, imin, kernel_8c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_8c);
l99991:      ;
      
      
      _return0 = FREIA_OK;
      goto l99992;
l99994:      ;

      freia_aipo_dilate_6c(imout, imin, kernel_6c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_6c(imout, imout, kernel_6c);
      goto l99991;
l99995:      ;
      freia_aipo_dilate_8c(imout, imin, kernel_4c);
      for (i = 1;i<size;i++)
         freia_aipo_dilate_8c(imout, imout, kernel_4c);
      goto l99991;
l99996:      ;
      freia_aipo_copy(imout, imin);
      _return0 = FREIA_OK;
      goto l99992;
l99997:      ;
      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 95, __FUNCTION__);
      freia_common_print_backtrace();
      _return0 = FREIA_SIZE_ERROR;
      goto l99992;
l99998:      ;
      fprintf(stderr, "ERROR: file %s, line %d, function %s: ""bpp of images are not compatibles\n", "./freia.src/cipo/src/freiaComplexOpMorpho.c", 90, __FUNCTION__);
      freia_common_print_backtrace();
      _return0 = FREIA_SIZE_ERROR;
l99992:      ;

   }
   ret = _return0;
   ret |= freia_aipo_sub(imout, imout, imin);

   return ret;
}

Unsplit resulting code


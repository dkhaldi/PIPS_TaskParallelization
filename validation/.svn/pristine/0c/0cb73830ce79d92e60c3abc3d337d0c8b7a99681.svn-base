
First use the default properties

C     Scalar replacement in the presence of conditional control flow
C
C     Steve Carr and Ken Kennedy
C
C     Software - Practive and Experience, Vol. 24, No. 1, pp. 51-77, 1994
C
C     First example, which turns out to be wrong if the program
C     behaviors must be respected

      SUBROUTINE SCALARIZATION30(A,B,M,N)
      REAL A(N), B(M)

C     a(i) is not scalarized because m<1 is a guard for it. Adding s =
C     a(i) before do j = ... may generate out of bounds accesses that do
C     not exist in the initial code
C
C     Except if declarations can be trusted
      DO I = 1, N
         A_0 = A(I)
         DO J = 1, M
            A_0 = A_0+B(J)
         ENDDO
         A(I) = A_0
      ENDDO

C     Let's make sure that the inner loop is executed
      IF (M.LT.1) STOP

C     The result is copied out for the next loop nest
      DO I = 1, N
         A_1 = A(I)
         DO J = 1, M
            A_1 = A_1+B(J)
         ENDDO
         A(I) = A_1
      ENDDO

C     The inner loop is certainly executed when the outer loop is entered
      DO I = 1, N
         A_2 = A(I)
         DO J = 1, N
            A_2 = A_2+B(J)
         ENDDO
C     No copy out because of the interprocedural analysis: no caller here
      ENDDO

      END

Try again with a different property to exploit the array declarations

C     Scalar replacement in the presence of conditional control flow
C
C     Steve Carr and Ken Kennedy
C
C     Software - Practive and Experience, Vol. 24, No. 1, pp. 51-77, 1994
C
C     First example, which turns out to be wrong if the program
C     behaviors must be respected

      SUBROUTINE SCALARIZATION30(A,B,M,N)
      REAL A(N), B(M)

C     a(i) is not scalarized because m<1 is a guard for it. Adding s =
C     a(i) before do j = ... may generate out of bounds accesses that do
C     not exist in the initial code
C
C     Except if declarations can be trusted
      DO I = 1, N
         A_0 = A(I)
         DO J = 1, M
            A_0 = A_0+B(J)
         ENDDO
         A(I) = A_0
      ENDDO

C     Let's make sure that the inner loop is executed
      IF (M.LT.1) STOP

C     The result is copied out for the next loop nest
      DO I = 1, N
         A_1 = A(I)
         DO J = 1, M
            A_1 = A_1+B(J)
         ENDDO
         A(I) = A_1
      ENDDO

C     The inner loop is certainly executed when the outer loop is entered
      DO I = 1, N
         A_2 = A(I)
         DO J = 1, N
            A_2 = A_2+B(J)
         ENDDO
C     No copy out because of the interprocedural analysis: no caller here
      ENDDO

      END

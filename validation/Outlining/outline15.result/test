void kernel(int H, int R, _int W, float sum_0[1], size_t x, size_t y, float Kernel[R], float Src[W][H])
{
   // Declared by Pass Outlining
   size_t k;
   // Declared as a patch variable by Pass Outlining
   float sum;
   sum = *sum_0;
here:
   for(k = -R; k <= R; k += 1) {
      struct {
         int _;
      } _ = {0};
      int d = y+k+_._;
      if (d>=0&&d<H)
         sum += Src[y][x]*Kernel[R-k];
   }
   *sum_0 = sum;
}
void outline15(_int W, int H, int R, float Dst[W][H], float Src[W][H], float Kernel[R])
{
   size_t y, x, k;
   float sum = 0;
   for(y = 0; y <= H-1; y += 1)
      for(x = 0; x <= W-1; x += 1) {
         sum = 0;
here:         kernel(H, R, W, &sum, x, y, Kernel, Src);
         Dst[y][x] = sum;
      }
}

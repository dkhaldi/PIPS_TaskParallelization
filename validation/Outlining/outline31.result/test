
Initial code

void foo(int bar[256][256])
{
   int i, j;
   for(i = 0; i <= 255; i += 1)
      for(j = 0; j <= 255; j += 1)
kernel:         bar[MIN(i, j)][MAX(i, j)] = MIN(i, j);
}

Convex array regions for the input code


//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=PHI2, PHI2<=255}>

void foo(int bar[256][256])
{
   int i, j;

//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=PHI2, PHI2<=255}>

   for(i = 0; i <= 255; i += 1)

//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=255, PHI1<=i, 0<=PHI2,
//    PHI2<=255, i<=PHI2}>

      for(j = 0; j <= 255; j += 1)

//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=i, PHI1<=j, PHI2<=255,
//    i<=PHI2, j<=PHI2, 0<=i, i<=255, 0<=j, j<=255}>

kernel:         bar[MIN(i, j)][MAX(i, j)] = MIN(i, j);
}

Code after outlining


Effects for the outlined code

//             <may be written>: bar[*][*]
//             <    is read   >: i j
void kernel(int i, int j, int bar[256][256])
{
//             <may be written>: bar[*][*]
//             <    is read   >: i j
kernel:   bar[MIN(i, j)][MAX(i, j)] = MIN(i, j);
}

Regions for the outlined code


//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=i, PHI1<=j, PHI2<=255,
//    i<=PHI2, j<=PHI2, 0<=i, i<=255, 0<=j, j<=255}>

void kernel(int i, int j, int bar[256][256])
{

//  <bar[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=i, PHI1<=j, PHI2<=255,
//    i<=PHI2, j<=PHI2, 0<=i, i<=255, 0<=j, j<=255}>

kernel:   bar[MIN(i, j)][MAX(i, j)] = MIN(i, j);
}

Display all functions

void foo(int bar[256][256])
{
   int i, j;
   for(i = 0; i <= 255; i += 1)
      for(j = 0; j <= 255; j += 1)
kernel:         kernel(i, j, bar);
}
void kernel(int i, int j, int bar[256][256])
{
kernel:   bar[MIN(i, j)][MAX(i, j)] = MIN(i, j);
}

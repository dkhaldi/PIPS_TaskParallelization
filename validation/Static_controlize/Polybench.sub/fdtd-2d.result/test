int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int t, i, j;
//		< is static > FALSE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int tmax = 50;
//		< is static > FALSE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int nx = 1000;
//		< is static > FALSE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int ny = 1000;
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
   
#pragma scop
#pragma live-out ex, ey, hz
   for(t = 0; t <= tmax-1; t += 1) {
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//		<   tests   >
      for(j = 0; j <= ny-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            0 <= 0`j <= ny-1
//		<   tests   >
         ey[0][j] = _fict_[t];
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//		<   tests   >
      for(i = 1; i <= nx-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            1 <= 0`i <= nx-1
//		<   tests   >
         for(j = 0; j <= ny-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            1 <= 0`i <= nx-1
//                            0 <= 0`j <= ny-1
//		<   tests   >
            ey[i][j] = ey[i][j]-0.5*(hz[i][j]-hz[i-1][j]);
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//		<   tests   >
      for(i = 0; i <= nx-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            0 <= 0`i <= nx-1
//		<   tests   >
         for(j = 1; j <= ny-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            0 <= 0`i <= nx-1
//                            1 <= 0`j <= ny-1
//		<   tests   >
            ex[i][j] = ex[i][j]-0.5*(hz[i][j]-hz[i][j-1]);
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//		<   tests   >
      for(i = 0; i <= nx-1-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            0 <= 0`i <= nx-1-1
//		<   tests   >
         for(j = 0; j <= ny-1-1; j += 1)
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tmax-1
//                            0 <= 0`i <= nx-1-1
//                            0 <= 0`j <= ny-1-1
//		<   tests   >
            hz[i][j] = hz[i][j]-0.7*(ex[i][j+1]-ex[i][j]+ey[i+1][j]-ey[i][j]);
   }
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`ny, 0`nx, 0`tmax, 0`j, 0`i, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}

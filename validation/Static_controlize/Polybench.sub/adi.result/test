int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int t, i1, i2;
//		< is static > FALSE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int n = 1024;
//		< is static > FALSE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   int tsteps = 10;
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
   
#pragma scop
#pragma live-out X
   for(t = 0; t <= tsteps-1; t += 1) {
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >
      for(i1 = 0; i1 <= n-1; i1 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//		<   tests   >
         for(i2 = 1; i2 <= n-1; i2 += 1) {
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//                            1 <= 0`i2 <= n-1
//		<   tests   >
            X[i1][i2] = X[i1][i2]-X[i1][i2-1]*A[i1][i2]/B[i1][i2-1];
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//                            1 <= 0`i2 <= n-1
//		<   tests   >
            B[i1][i2] = B[i1][i2]-A[i1][i2]*A[i1][i2]/B[i1][i2-1];
         }
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(i1 = 0; i1 <= n-1; i1 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//		<   tests   >
         X[i1][n-1] = X[i1][n-1]/B[i1][n-1];
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(i1 = 0; i1 <= n-1; i1 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//		<   tests   >
         for(i2 = 0; i2 <= n-2-1; i2 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-1
//                            0 <= 0`i2 <= n-2-1
//		<   tests   >
            X[i1][n-i2-2] = (X[i1][n-2-i2]-X[i1][n-2-i2-1]*A[i1][n-i2-3])/B[i1][n-3-i2];
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(i1 = 1; i1 <= n-1; i1 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            1 <= 0`i1 <= n-1
//		<   tests   >
         for(i2 = 0; i2 <= n-1; i2 += 1) {
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            1 <= 0`i1 <= n-1
//                            0 <= 0`i2 <= n-1
//		<   tests   >
            X[i1][i2] = X[i1][i2]-X[i1-1][i2]*A[i1][i2]/B[i1-1][i2];
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            1 <= 0`i1 <= n-1
//                            0 <= 0`i2 <= n-1
//		<   tests   >
            B[i1][i2] = B[i1][i2]-A[i1][i2]*A[i1][i2]/B[i1-1][i2];
         }
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(i2 = 0; i2 <= n-1; i2 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i2 <= n-1
//		<   tests   >
         X[n-1][i2] = X[n-1][i2]/B[n-1][i2];
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//		<   tests   >

      for(i1 = 0; i1 <= n-2-1; i1 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-2-1
//		<   tests   >
         for(i2 = 0; i2 <= n-1; i2 += 1)
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   > 0 <= 0`t <= tsteps-1
//                            0 <= 0`i1 <= n-2-1
//                            0 <= 0`i2 <= n-1
//		<   tests   >
            X[n-2-i1][i2] = (X[n-2-i1][i2]-X[n-i1-3][i2]*A[n-3-i1][i2])/B[n-2-i1][i2];
   }
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`tsteps, 0`n, 0`i2, 0`i1, 0`t, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}

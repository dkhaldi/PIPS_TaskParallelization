int main(int argc, char **argv)
{
//		< is static > FALSE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   int i, j, k;
//		< is static > FALSE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   int m = 512;
//		< is static > FALSE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   int n = 512;
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Initialize array. */
   init_array();
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Start timer. */
   
#pragma scop
#pragma live-out A
   for(k = 0; k <= n-1; k += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//		<   tests   >
      nrm = 0;
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//		<   tests   >
      for(i = 0; i <= m-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            0 <= 0`i <= m-1
//		<   tests   >
         nrm += A[i][k]*A[i][k];
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//		<   tests   >
      R[k][k] = sqrt(nrm);
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//		<   tests   >
      for(i = 0; i <= m-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            0 <= 0`i <= m-1
//		<   tests   >
         Q[i][k] = A[i][k]/R[k][k];
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//		<   tests   >
      for(j = k+1; j <= n-1; j += 1) {
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            k+1 <= 0`j <= n-1
//		<   tests   >
         R[k][j] = 0;
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            k+1 <= 0`j <= n-1
//		<   tests   >
         for(i = 0; i <= m-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            k+1 <= 0`j <= n-1
//                            0 <= 0`i <= m-1
//		<   tests   >
            R[k][j] += Q[i][k]*A[i][j];
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            k+1 <= 0`j <= n-1
//		<   tests   >
         for(i = 0; i <= m-1; i += 1)
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   > 0 <= 0`k <= n-1
//                            k+1 <= 0`j <= n-1
//                            0 <= 0`i <= m-1
//		<   tests   >
            A[i][j] = A[i][j]-Q[i][k]*R[k][j];
      }
   }
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >
   
   /* Stop and print timer. */
#pragma endscop
   ;
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >

   print_array(argc, argv);
//		< is static > TRUE
//		< parameter > 0`n, 0`m, 0`k, 0`j, 0`i, argc, 
//		<   loops   >
//		<   tests   >

   return 0;
}

void P4A_copy_from_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, void *host_address, const void *accel_address)
{
   size_t i;
   char *cdest = host_address;
   const char *csrc = accel_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i+d1_offset*element_size] = csrc[i];
}
void P4A_copy_from_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, void *host_address, const void *accel_address)
{
   size_t i, j;
   char *cdest = d2_offset*element_size+(char *) host_address;
   const char *csrc = (char *) accel_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[(i+d1_offset)*element_size*d2_size+j] = csrc[i*element_size*d2_block_size+j];
}
void P4A_copy_to_accel_1d(size_t element_size, size_t d1_size, size_t d1_block_size, size_t d1_offset, const void *host_address, void *accel_address)
{
   size_t i;
   char *cdest = accel_address;
   const char *csrc = host_address;
   for(i = 0; i < d1_block_size*element_size-1+1; i += 1)
      cdest[i] = csrc[d1_offset*element_size+i];
}
void P4A_copy_to_accel_2d(size_t element_size, size_t d1_size, size_t d2_size, size_t d1_block_size, size_t d2_block_size, size_t d1_offset, size_t d2_offset, const void *host_address, void *accel_address)
{
   size_t i, j;
   char *cdest = (char *) accel_address;
   const char *csrc = d2_offset*element_size+(char *) host_address;
   for(i = 0; i < d1_block_size; i += 1)
      for(j = 0; j < d2_block_size*element_size-1+1; j += 1)
         cdest[i*element_size*d2_block_size+j] = csrc[(i+d1_offset)*element_size*d2_size+j];
}
void P4A_scmp_dealloc(void *dest)
{
}
void * P4A_scmp_flow(void **flow)
{
}
void P4A_scmp_kernel_0(int a_0[1], int b_0[1], int c[10])
{
   // Declared by Pass Outlining
   int i;
   // Declared as a patch variable by Pass Outlining
   int a, b;
   b = *b_0;
   a = *a_0;

   for(i = 0; i <= 9; i += 1) {
      a++;
      b++;
      c[i]++;
   }
   *a_0 = a;
   *b_0 = b;
}
void P4A_scmp_kernel_1(int a_0[1], int b_0[1])
{
   // Declared by Pass Outlining
   int i;
   // Declared as a patch variable by Pass Outlining
   int a, b;
   b = *b_0;
   a = *a_0;

   for(i = 0; i <= 4; i += 1) {
      a--;
      b--;
   }
   *a_0 = a;
   *b_0 = b;
}
void P4A_scmp_malloc(void **dest, size_t n)
{

   if (*dest==(void *) 0)
      *dest = malloc(n);
}
void P4A_scmp_read(size_t element_size, const void *host_address, void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(accel_address, host_address, element_size);
}
void P4A_scmp_write(size_t element_size, void *host_address, const void *accel_address)
{
   /* We can use memcpy() since we are sure there is no overlap */
   memcpy(host_address, accel_address, element_size);
}
int main()
{
   int i;
   int b;
   int c[10] = {0};
   int a = 2;

   a = 0;
   b = 0;
   {
      //PIPS generated variable
      int (*p4a_var_c0)[10] = (int (*)[10]) 0, *p4a_var_b0 = (int *) 0, *p4a_var_a0 = (int *) 0;
      P4A_scmp_malloc((void **) &p4a_var_a0, sizeof(int)*1);
      P4A_scmp_malloc((void **) &p4a_var_b0, sizeof(int)*1);
      P4A_scmp_malloc((void **) &p4a_var_c0, sizeof(int)*10);
      P4A_scmp_read(sizeof(int), &a, p4a_var_a0);
      P4A_scmp_read(sizeof(int), &b, p4a_var_b0);
      P4A_copy_to_accel_1d(sizeof(int), 10, 10, 0, &c[0], *p4a_var_c0);

      P4A_scmp_kernel_0(&*p4a_var_a0, &*p4a_var_b0, *p4a_var_c0);
      P4A_copy_from_accel_1d(sizeof(int), 10, 10, 0, &c[0], *p4a_var_c0);
      P4A_scmp_write(sizeof(int), &b, p4a_var_b0);
      P4A_scmp_write(sizeof(int), &a, p4a_var_a0);
   }
   {
      //PIPS generated variable
      int *p4a_var_b1 = (int *) 0, *p4a_var_a1 = (int *) 0;
      P4A_scmp_malloc((void **) &p4a_var_a1, sizeof(int)*1);
      P4A_scmp_malloc((void **) &p4a_var_b1, sizeof(int)*1);
      P4A_scmp_read(sizeof(int), &a, p4a_var_a1);
      P4A_scmp_read(sizeof(int), &b, p4a_var_b1);

      P4A_scmp_kernel_1(&*p4a_var_a1, &*p4a_var_b1);
      P4A_scmp_write(sizeof(int), &b, p4a_var_b1);
      P4A_scmp_write(sizeof(int), &a, p4a_var_a1);
   }

   return 0;
}


Init File

int main()
{
   int i, result = 0;
   int size = 10;
   int a[size];

   for(i = 0; i <= 9; i += 1)
      a[i] = i;

   for(i = 0; i <= 9; i += 1)
      result += a[i];

   return result;
}

Regions for "main"

int main()
{

//  <i-WE-EXACT-{}>
//  <result-RE-EXACT-{}>
//  <result-W-EXACT-{}>
//  <result-WE-EXACT-{}>

   int i, result = 0;

//  <size-RE-EXACT-{}>
//  <size-W-EXACT-{}>
//  <size-WE-EXACT-{}>

   int size = 10;

//  <a-WE-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>

   int a[size];

//  <a-RE-EXACT-{}>
//  <a[PHI1]-W-EXACT-{0<=PHI1, PHI1<=9, result==0, size==10}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>


   for(i = 0; i <= 9; i += 1)

//  <a-RE-EXACT-{}>
//  <a[PHI1]-W-EXACT-{PHI1==i, result==0, size==10, 0<=i, i<=9}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>

      a[i] = i;

//  <a-RE-EXACT-{}>
//  <a[PHI1]-R-EXACT-{0<=PHI1, PHI1<=9, size==10}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <result-R-EXACT-{}>
//  <result-RE-EXACT-{}>
//  <result-W-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>


   for(i = 0; i <= 9; i += 1)

//  <a-RE-EXACT-{}>
//  <a[PHI1]-R-EXACT-{PHI1==i, size==10, 0<=i, i<=9}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <result-R-EXACT-{}>
//  <result-RE-EXACT-{}>
//  <result-W-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>

      result += a[i];

//  <result-RE-EXACT-{}>
//  <result-R-EXACT-{}>


   return result;
}

INV Regions for "main"

int main()
{
   int i, result = 0;
   int size = 10;
   int a[size];

   for(i = 0; i <= 9; i += 1)

//  <a-RE-EXACT-{}>
//  <a[PHI1]-W-EXACT-{PHI1==i, result==0, size==10, 0<=i, i<=9}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>

      a[i] = i;

   for(i = 0; i <= 9; i += 1)

//  <a-RE-EXACT-{}>
//  <a[PHI1]-R-EXACT-{PHI1==i, size==10, 0<=i, i<=9}>
//  <i-RE-EXACT-{}>
//  <i-R-EXACT-{}>
//  <result-R-EXACT-{}>
//  <result-RE-EXACT-{}>
//  <result-W-EXACT-{}>
//  <size-RE-EXACT-{}>
//  <size-R-EXACT-{}>

      result += a[i];

   return result;
}

IN Regions for "main"

int main()
{
   int i, result = 0;
   int size = 10;

//  <size-IN-EXACT-{}>

   int a[size];

//  <size-IN-EXACT-{}>


   for(i = 0; i <= 9; i += 1)

//  <i-IN-EXACT-{}>
//  <size-IN-EXACT-{}>

      a[i] = i;

//  <a[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9, size==10}>
//  <result-IN-EXACT-{}>
//  <size-IN-EXACT-{}>


   for(i = 0; i <= 9; i += 1)

//  <a[PHI1]-IN-EXACT-{PHI1==i, size==10, 0<=i, i<=9}>
//  <i-IN-EXACT-{}>
//  <result-IN-EXACT-{}>
//  <size-IN-EXACT-{}>

      result += a[i];

//  <result-IN-EXACT-{}>


   return result;
}

OUT Regions for "main"

int main()
{

//  <result-OUT-EXACT-{}>

   int i, result = 0;

//  <size-OUT-EXACT-{}>

   int size = 10;
   int a[size];

//  <a[PHI1]-OUT-EXACT-{0<=PHI1, PHI1<=9, result==0, size==10}>


   for(i = 0; i <= 9; i += 1)

//  <a[PHI1]-OUT-EXACT-{PHI1==i, result==0, size==10, 0<=i, i<=9}>

      a[i] = i;

//  <result-OUT-EXACT-{}>


   for(i = 0; i <= 9; i += 1)

//  <result-OUT-MAY-{0<=i, i<=9}>

      result += a[i];

   return result;
}

PROPER_EFFECTS

int main()
{
//             <    is written>: result
//             <    is referenced>: result
//             <    is declared>: i result
   int i, result = 0;
//             <    is written>: size
//             <    is referenced>: size
//             <    is declared>: size
   int size = 10;
//             <    is read   >: size
//             <    is referenced>: size
//             <    is declared>: a
   int a[size];
//             <    is written>: i
//             <    is referenced>: i

   for(i = 0; i <= 9; i += 1)
//             <    is read   >: i size
//             <    is written>: a[i]
//             <    is referenced>: a i size
      a[i] = i;
//             <    is written>: i
//             <    is referenced>: i

   for(i = 0; i <= 9; i += 1)
//             <    is read   >: a[i] i result size
//             <    is written>: result
//             <    is referenced>: a i result size
      result += a[i];
//             <    is read   >: result
//             <    is referenced>: result

   return result;
}

CUMULATED_EFFECTS

int main()
{
//             <    is written>: result
//             <    is referenced>: result
//             <    is declared>: i result
   int i, result = 0;
//             <    is written>: size
//             <    is referenced>: size
//             <    is declared>: size
   int size = 10;
//             <    is read   >: size
//             <    is referenced>: size
//             <    is declared>: a
   int a[size];
//             <may be written>: a[*]
//             <    is read   >: i size
//             <    is written>: i
//             <    is referenced>: a i size

   for(i = 0; i <= 9; i += 1)
//             <may be written>: a[*]
//             <    is read   >: i size
//             <    is referenced>: a i size
      a[i] = i;
//             <may be read   >: a[*]
//             <    is read   >: i result size
//             <    is written>: i result
//             <    is referenced>: a i result size

   for(i = 0; i <= 9; i += 1)
//             <may be read   >: a[*]
//             <    is read   >: i result size
//             <    is written>: result
//             <    is referenced>: a i result size
      result += a[i];
//             <    is read   >: result
//             <    is referenced>: result

   return result;
}

IN_EFFECTS

int main()
{
   int i, result = 0;
   int size = 10;
//             <    is imported>: size
   int a[size];
//             <    is imported>: size

   for(i = 0; i <= 9; i += 1)
//             <    is imported>: i size
      a[i] = i;
//             <may be imported>: a[*]
//             <    is imported>: result size

   for(i = 0; i <= 9; i += 1)
//             <may be imported>: a[*]
//             <    is imported>: i result size
      result += a[i];
//             <    is imported>: result

   return result;
}

OUT_EFFECTS

int main()
{
//             <    is exported>: result
   int i, result = 0;
//             <    is exported>: size
   int size = 10;
   int a[size];
//             <may be exported>: a[*]

   for(i = 0; i <= 9; i += 1)
//             <may be exported>: a[*]
      a[i] = i;
//             <    is exported>: result

   for(i = 0; i <= 9; i += 1)
//             <    is exported>: result
      result += a[i];

   return result;
}

LIVE_IN_PATHS

int main()
{
   int i, result = 0;
//             <    is alive (in)>: result
   int size = 10;
//             <    is alive (in)>: result size
   int a[size];
//             <may be alive (in)>: a[*]
//             <    is alive (in)>: result size

   for(i = 0; i <= 9; i += 1)
//             <may be alive (in)>: a[*]
//             <    is alive (in)>: i result size
      a[i] = i;
//             <may be alive (in)>: a[*]
//             <    is alive (in)>: result size

   for(i = 0; i <= 9; i += 1)
//             <may be alive (in)>: a[*]
//             <    is alive (in)>: i result size
      result += a[i];
//             <    is alive (in)>: result

   return result;
}

LIVE_OUT_PATHS

int main()
{
//             <    is alive (out)>: result
   int i, result = 0;
//             <    is alive (out)>: result size
   int size = 10;
//             <may be alive (out)>: a[*]
//             <    is alive (out)>: result size
   int a[size];
//             <may be alive (out)>: a[*]
//             <    is alive (out)>: result size

   for(i = 0; i <= 9; i += 1)
//             <may be alive (out)>: a[*]
//             <    is alive (out)>: i result size
      a[i] = i;
//             <    is alive (out)>: result

   for(i = 0; i <= 9; i += 1)
//             <may be alive (out)>: a[*] result size
//             <    is alive (out)>: i
      result += a[i];

   return result;
}

Warnings



Proper pointer effects for "main"

s_with_pointer foo1(s_with_pointer s)
{
//             <    is read   >: s.n s.p
//             <    is written>: s_loc.n s_loc.p
   s_with_pointer s_loc = s;
//             <    is read   >: s_loc.n s_loc.p
   return s_loc;
}
s_with_array foo2(s_with_array s)
{
//             <may be read   >: s.array[*]
//             <may be written>: s_loc.array[*]
//             <    is read   >: s.n
//             <    is written>: s_loc.n
   s_with_array s_loc = s;
//             <may be read   >: s_loc.array[*]
//             <    is read   >: s_loc.n
   return s_loc;
}
int main()
{
   s_with_pointer a, b;
   s_with_array c, d;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: a.n
      a.n = 2;
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: a.p i
//             <    is written>: a.p[i]
         (a.p)[i] = i;
//             <    is read   >: a.n a.p
//             <    is written>: b.n b.p
      
      // definition of b, also modifies the elements of a.p
      b = foo1(a);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: b.p i
//             <    is written>: b.p[i]
         (b.p)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: a.p a.p[i] b.p b.p[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <    is written>: c.n
      
      // definition of c
      c.n = 3;
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: i
//             <    is written>: c.array[i]
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
//             <    is read   >: c.n
//             <    is written>: d.n
      
      // definition of d, does not modify c
      d = foo2(c);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i
//             <    is written>: d.array[i]
         (d.array)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: c.array[i] d.array[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
   }
   return 0;
}

Cumulated pointer effects for "main"

//             <    is read   >: s.n s.p
s_with_pointer foo1(s_with_pointer s)
{
//             <    is read   >: s.n s.p
//             <    is written>: s_loc.n s_loc.p
   s_with_pointer s_loc = s;
//             <    is read   >: s_loc.n s_loc.p
   return s_loc;
}
//             <may be read   >: s.array[*]
//             <    is read   >: s.n
s_with_array foo2(s_with_array s)
{
//             <may be read   >: s.array[*]
//             <may be written>: s_loc.array[*]
//             <    is read   >: s.n
//             <    is written>: s_loc.n
   s_with_array s_loc = s;
//             <may be read   >: s_loc.array[*]
//             <    is read   >: s_loc.n
   return s_loc;
}
//             <may be read   >: stdout stdout[0] 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
int main()
{
   s_with_pointer a, b;
   s_with_array c, d;

   int i, j;
//             <may be read   >: a.n a.p a.p[*] b.p b.p[*] c.array[*] 
//                               c.n d.array[*] i stdout stdout[0] 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: a.n a.p a.p[*] b.n b.p b.p[*] 
//                               c.array[*] c.n d.array[*] d.n i 
//                               stdout[0] _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: a.n
      a.n = 2;
//             <may be written>: a.p[*]
//             <    is read   >: a.p i
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <may be written>: a.p[*]
//             <    is read   >: a.p i
         (a.p)[i] = i;
//             <    is read   >: a.n a.p
//             <    is written>: b.n b.p
      
      // definition of b, also modifies the elements of a.p
      b = foo1(a);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <may be read   >: a.p[*] b.p[*] stdout[0]
//             <may be written>: b.p[*] stdout[0]
//             <    is read   >: a.p b.p i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: b.p[*]
//             <    is read   >: b.p i
         (b.p)[i] = i*10;
//             <may be read   >: a.p[*] b.p[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: a.p b.p i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <    is written>: c.n
      
      // definition of c
      c.n = 3;
//             <may be written>: c.array[*]
//             <    is read   >: i
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <may be written>: c.array[*]
//             <    is read   >: i
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
//             <    is read   >: c.n
//             <    is written>: d.n
      
      // definition of d, does not modify c
      d = foo2(c);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <may be read   >: c.array[*] d.array[*] stdout[0]
//             <may be written>: d.array[*] stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: d.array[*]
//             <    is read   >: i
         (d.array)[i] = i*10;
//             <may be read   >: c.array[*] d.array[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
   }
//             <may be read   >: __IO_EFFECTS:LUNS[1]
   return 0;
}

Printed files with pointer regions


//  <s.n-R-EXACT-{}>
//  <s.p-R-EXACT-{}>

s_with_pointer foo1(s_with_pointer s)
{

//  <s.n-R-EXACT-{}>
//  <s.p-R-EXACT-{}>
//  <s_loc.n-W-EXACT-{}>
//  <s_loc.p-W-EXACT-{}>

   s_with_pointer s_loc = s;

//  <s_loc.n-R-EXACT-{}>
//  <s_loc.p-R-EXACT-{}>

   return s_loc;
}

//  <s.array[PHI2]-R-MAY-{}>
//  <s.n-R-EXACT-{}>

s_with_array foo2(s_with_array s)
{

//  <s.array[PHI2]-R-MAY-{}>
//  <s.n-R-EXACT-{}>
//  <s_loc.array[PHI2]-W-MAY-{}>
//  <s_loc.n-W-EXACT-{}>

   s_with_array s_loc = s;

//  <s_loc.array[PHI2]-R-MAY-{}>
//  <s_loc.n-R-EXACT-{}>

   return s_loc;
}

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;

   int i, j;

//  <a.n-R-MAY-{}>
//  <a.n-W-EXACT-{}>
//  <a.p-R-MAY-{}>
//  <a.p-W-EXACT-{}>
//  <a.p[PHI2]-R-MAY-{}>
//  <a.p[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <b.n-W-MAY-{}>
//  <b.p-R-MAY-{}>
//  <b.p-W-MAY-{}>
//  <b.p[PHI2]-R-MAY-{}>
//  <b.p[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <c.array[PHI2]-R-MAY-{}>
//  <c.array[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <c.n-R-MAY-{}>
//  <c.n-W-MAY-{}>
//  <d.array[PHI2]-R-MAY-{0<=PHI2, PHI2<=9}>
//  <d.array[PHI2]-W-MAY-{}>
//  <d.n-W-MAY-{}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

   
   // just to create a block for prettyprinting
   if (1) {

//  <a.p-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      // definition of a
      a.p = (int *) malloc(10*sizeof(int));

//  <a.n-W-EXACT-{}>

      a.n = 2;

//  <a.p-R-MAY-{}>
//  <a.p[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>

      for(i = 0; i <= 9; i += 1)

//  <a.p-R-EXACT-{0<=i, i<=9}>
//  <a.p[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (a.p)[i] = i;

//  <a.n-R-EXACT-{i==10}>
//  <a.p-R-EXACT-{i==10}>
//  <b.n-W-EXACT-{i==10}>
//  <b.p-W-EXACT-{i==10}>

      
      // definition of b, also modifies the elements of a.p
      b = foo1(a);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==10}>

      printf("\nstruct with pointer copy : \n");

//  <a.p-R-EXACT-{}>
//  <a.p[PHI2]-R-MAY-{}>
//  <b.p-R-MAY-{}>
//  <b.p[PHI2]-R-MAY-{}>
//  <b.p[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= 9; i += 1) {

//  <b.p-R-EXACT-{0<=i, i<=9}>
//  <b.p[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (b.p)[i] = i*10;

//  <a.p-R-EXACT-{}>
//  <a.p[PHI2]-R-EXACT-{PHI2==i}>
//  <b.p-R-EXACT-{}>
//  <b.p[PHI2]-R-EXACT-{PHI2==i}>
//  <i-R-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }

//  <c.n-W-EXACT-{i==10}>

      
      // definition of c
      c.n = 3;

//  <c.array[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>

      for(i = 0; i <= 9; i += 1)

//  <c.array[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (c.array)[i] = i;

//  <c.array[PHI2]-R-MAY-{i==10}>
//  <c.n-R-EXACT-{i==10}>
//  <d.array[PHI2]-W-MAY-{i==10}>
//  <d.n-W-EXACT-{i==10}>

      
      // definition of d, does not modify c
      d = foo2(c);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==10}>

      printf("\nstruct with array copy : \n");

//  <c.array[PHI2]-R-MAY-{0<=PHI2, PHI2<=9}>
//  <d.array[PHI2]-R-MAY-{0<=PHI2, PHI2<=9}>
//  <d.array[PHI2]-W-MAY-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{PHI1==1}>

      for(i = 0; i <= 9; i += 1) {

//  <d.array[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (d.array)[i] = i*10;

//  <c.array[PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <d.array[PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, 0<=i, i<=9}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, 0<=i, i<=9}>

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{PHI1==1}>

   return 0;
}

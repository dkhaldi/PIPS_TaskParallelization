
Proper effects for "init"

void init(mys *m)
{
   int i;                                                               /*0014*/
//             <    is read   >: m
//             <    is written>: m[0].num
   m->num = 5;                                                          /*0015*/
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));                                     /*0016*/
//             <    is read   >: m
//             <    is written>: m[0].tab1[0]
   (m->tab1)[0] = 10;                                                   /*0017*/
//             <    is read   >: m m[0].tab2
//             <    is written>: m[0].tab2[0]
   (m->tab2)[0] = 20;                                                   /*0018*/
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {                                         /*0019*/
//             <    is read   >: i m
//             <    is written>: m[0].tab1[i]
      (m->tab1)[i] = 1;                                                 /*0021*/
//             <    is read   >: i m m[0].tab1[i] m[0].tab2
//             <    is written>: m[0].tab2[i]
      (m->tab2)[i] = (m->tab1)[i];                                      /*0022*/
   }
}

Proper effects for "init2"

void init2(mys *n)
{
   int i;                                                               /*0029*/
   mys m;                                                               /*0030*/
//             <may be read   >: n[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: n n[0].num n[0].tab2
//             <    is written>: m.num m.tab2

   m = *n;                                                              /*0032*/
//             <    is written>: m.num
   m.num = 5;                                                           /*0033*/
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));                                      /*0034*/
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;                                                    /*0035*/
//             <    is read   >: m.tab2
//             <    is written>: m.tab2[0]
   (m.tab2)[0] = 20;                                                    /*0036*/
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {                                         /*0037*/
//             <    is read   >: i
//             <    is written>: m.tab1[i]
      (m.tab1)[i] = 1;                                                  /*0039*/
//             <    is read   >: i m.tab1[i] m.tab2
//             <    is written>: m.tab2[i]
      (m.tab2)[i] = (m.tab1)[i];                                        /*0040*/
   }
}

Proper effects for "init3"

void init3(mys **p)
{
   int i;                                                               /*0047*/
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));                                         /*0048*/
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {                                         /*0049*/
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i] _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));                                       /*0051*/
//             <    is read   >: i p p[i] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i][0].tab2 _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));                               /*0052*/
   }
//             <    is read   >: p p[0]
//             <    is written>: p[0][0].num

   p[0]->num = 11;                                                      /*0055*/
//             <    is read   >: p p[0]
//             <    is written>: p[0][0].tab1[0]
   (p[0]->tab1)[0] = 20;                                                /*0056*/
//             <    is read   >: p p[0] p[0][0].tab2
//             <    is written>: p[0][0].tab2[0]
   (p[0]->tab2)[0] = 30;                                                /*0057*/
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {                                         /*0059*/
//             <    is read   >: i p p[i]
//             <    is written>: p[i][0].num
      p[i]->num = 10;                                                   /*0061*/
//             <    is read   >: i p p[i]
//             <    is written>: p[i][0].tab1[0]
      (p[i]->tab1)[0] = 21;                                             /*0062*/
//             <    is read   >: i p p[i] p[i] p[i][0].tab1[0] 
//                               p[i][0].tab2
//             <    is written>: p[i][0].tab2[0]
      (p[i]->tab2)[0] = (p[i]->tab1)[0];                                /*0063*/
   }
}

Proper effects for "init4"

void init4(mys *p[5])
{
   int i;                                                               /*0069*/
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {                                         /*0070*/
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i] _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));                                       /*0072*/
//             <    is read   >: i p[i] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i][0].tab2 _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));                               /*0073*/
   }
//             <    is read   >: p[0]
//             <    is written>: p[0][0].num

   p[0]->num = 11;                                                      /*0076*/
//             <    is read   >: p[0]
//             <    is written>: p[0][0].tab1[0]
   (p[0]->tab1)[0] = 20;                                                /*0077*/
//             <    is read   >: p[0] p[0][0].tab2
//             <    is written>: p[0][0].tab2[0]
   (p[0]->tab2)[0] = 30;                                                /*0078*/
//             <    is written>: i
   
   
   for(i = 1; i <= 4; i += 1) {                                         /*0081*/
//             <    is read   >: i p[i]
//             <    is written>: p[i][0].num
      p[i]->num = 10;                                                   /*0083*/
//             <    is read   >: i p[i]
//             <    is written>: p[i][0].tab1[0]
      (p[i]->tab1)[0] = 21;                                             /*0084*/
//             <    is read   >: i p[i] p[i] p[i][0].tab1[0] 
//                               p[i][0].tab2
//             <    is written>: p[i][0].tab2[0]
      (p[i]->tab2)[0] = (p[i]->tab1)[0];                                /*0085*/
   }
}

Proper regions for "init"

void init(mys *m)
{
   int i;                                                               /*0014*/

//  <m-R-EXACT-{}>
//  <m[PHI1].num-W-EXACT-{PHI1==0}>

   m->num = 5;                                                          /*0015*/

//  <m-R-EXACT-{}>
//  <m[PHI1].tab2-W-EXACT-{PHI1==0}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   m->tab2 = malloc(5*sizeof(int));                                     /*0016*/

//  <m-R-EXACT-{}>
//  <m[PHI1].tab1[PHI3]-W-EXACT-{PHI1==0, PHI3==0}>

   (m->tab1)[0] = 10;                                                   /*0017*/

//  <m-R-EXACT-{}>
//  <m[PHI1].tab2-R-EXACT-{PHI1==0}>
//  <m[PHI1].tab2[PHI3]-W-EXACT-{PHI1==0, PHI3==0}>

   (m->tab2)[0] = 20;                                                   /*0018*/

//  <i-W-EXACT-{}>

   for(i = 0; i <= 4; i += 1) {                                         /*0019*/

//  <i-R-EXACT-{}>
//  <m-R-EXACT-{}>
//  <m[PHI1].tab1[PHI3]-W-EXACT-{PHI1==0, PHI3==i, 0<=i, i<=4}>

      (m->tab1)[i] = 1;                                                 /*0021*/

//  <i-R-EXACT-{}>
//  <m-R-EXACT-{}>
//  <m[PHI1].tab1[PHI3]-R-EXACT-{PHI1==0, PHI3==i, 0<=i, i<=4}>
//  <m[PHI1].tab2-R-EXACT-{PHI1==0, 0<=i, i<=4}>
//  <m[PHI1].tab2[PHI3]-W-EXACT-{PHI1==0, PHI3==i, 0<=i, i<=4}>

      (m->tab2)[i] = (m->tab1)[i];                                      /*0022*/
   }
}

Proper regions for "init2"

void init2(mys *n)
{
   int i;                                                               /*0029*/
   mys m;                                                               /*0030*/

//  <m.num-W-EXACT-{}>
//  <m.tab1[PHI2]-W-MAY-{}>
//  <m.tab2-W-EXACT-{}>
//  <n-R-EXACT-{}>
//  <n[PHI1].num-R-EXACT-{PHI1==0}>
//  <n[PHI1].tab1[PHI3]-R-MAY-{PHI1==0}>
//  <n[PHI1].tab2-R-EXACT-{PHI1==0}>


   m = *n;                                                              /*0032*/

//  <m.num-W-EXACT-{}>

   m.num = 5;                                                           /*0033*/

//  <m.tab2-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   m.tab2 = malloc(5*sizeof(int));                                      /*0034*/

//  <m.tab1[PHI2]-W-EXACT-{PHI2==0}>

   (m.tab1)[0] = 10;                                                    /*0035*/

//  <m.tab2-R-EXACT-{}>
//  <m.tab2[PHI2]-W-EXACT-{PHI2==0}>

   (m.tab2)[0] = 20;                                                    /*0036*/

//  <i-W-EXACT-{}>

   for(i = 0; i <= 4; i += 1) {                                         /*0037*/

//  <i-R-EXACT-{}>
//  <m.tab1[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=4}>

      (m.tab1)[i] = 1;                                                  /*0039*/

//  <i-R-EXACT-{}>
//  <m.tab1[PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=4}>
//  <m.tab2-R-EXACT-{0<=i, i<=4}>
//  <m.tab2[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=4}>

      (m.tab2)[i] = (m.tab1)[i];                                        /*0040*/
   }
}

Proper regions for "init3"

void init3(mys **p)
{
   int i;                                                               /*0047*/

//  <p-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   p = malloc(5*sizeof(mys *));                                         /*0048*/

//  <i-W-EXACT-{}>

   for(i = 0; i <= 4; i += 1) {                                         /*0049*/

//  <i-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=4}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      p[i] = malloc(sizeof(mys));                                       /*0051*/

//  <i-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=4}>
//  <p[PHI1][PHI2].tab2-W-EXACT-{PHI1==i, PHI2==0, 0<=i, i<=4}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      p[i]->tab2 = malloc(5*sizeof(int));                               /*0052*/
   }

//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].num-W-EXACT-{PHI1==0, PHI2==0, i==5}>


   p[0]->num = 11;                                                      /*0055*/

//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].tab1[PHI4]-W-EXACT-{PHI1==0, PHI2==0, PHI4==0,
//    i==5}>

   (p[0]->tab1)[0] = 20;                                                /*0056*/

//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].tab2-R-EXACT-{PHI1==0, PHI2==0, i==5}>
//  <p[PHI1][PHI2].tab2[PHI4]-W-EXACT-{PHI1==0, PHI2==0, PHI4==0,
//    i==5}>

   (p[0]->tab2)[0] = 30;                                                /*0057*/

//  <i-W-EXACT-{}>


   for(i = 1; i <= 4; i += 1) {                                         /*0059*/

//  <i-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].num-W-EXACT-{PHI1==i, PHI2==0, 1<=i, i<=4}>

      p[i]->num = 10;                                                   /*0061*/

//  <i-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab1[PHI4]-W-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>

      (p[i]->tab1)[0] = 21;                                             /*0062*/

//  <i-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab1[PHI4]-R-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>
//  <p[PHI1][PHI2].tab2-R-EXACT-{PHI1==i, PHI2==0, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab2[PHI4]-W-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>

      (p[i]->tab2)[0] = (p[i]->tab1)[0];                                /*0063*/
   }
}

Proper regions for "init4"

void init4(mys *p[5])
{
   int i;                                                               /*0069*/

//  <i-W-EXACT-{}>

   for(i = 0; i <= 4; i += 1) {                                         /*0070*/

//  <i-R-EXACT-{}>
//  <p[PHI1]-W-EXACT-{PHI1==i, 0<=i, i<=4}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      p[i] = malloc(sizeof(mys));                                       /*0072*/

//  <i-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 0<=i, i<=4}>
//  <p[PHI1][PHI2].tab2-W-EXACT-{PHI1==i, PHI2==0, 0<=i, i<=4}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      p[i]->tab2 = malloc(5*sizeof(int));                               /*0073*/
   }

//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].num-W-EXACT-{PHI1==0, PHI2==0, i==5}>


   p[0]->num = 11;                                                      /*0076*/

//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].tab1[PHI4]-W-EXACT-{PHI1==0, PHI2==0, PHI4==0,
//    i==5}>

   (p[0]->tab1)[0] = 20;                                                /*0077*/

//  <p[PHI1]-R-EXACT-{PHI1==0, i==5}>
//  <p[PHI1][PHI2].tab2-R-EXACT-{PHI1==0, PHI2==0, i==5}>
//  <p[PHI1][PHI2].tab2[PHI4]-W-EXACT-{PHI1==0, PHI2==0, PHI4==0,
//    i==5}>

   (p[0]->tab2)[0] = 30;                                                /*0078*/

//  <i-W-EXACT-{}>

   
   
   for(i = 1; i <= 4; i += 1) {                                         /*0081*/

//  <i-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].num-W-EXACT-{PHI1==i, PHI2==0, 1<=i, i<=4}>

      p[i]->num = 10;                                                   /*0083*/

//  <i-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab1[PHI4]-W-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>

      (p[i]->tab1)[0] = 21;                                             /*0084*/

//  <i-R-EXACT-{}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1]-R-EXACT-{PHI1==i, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab1[PHI4]-R-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>
//  <p[PHI1][PHI2].tab2-R-EXACT-{PHI1==i, PHI2==0, 1<=i, i<=4}>
//  <p[PHI1][PHI2].tab2[PHI4]-W-EXACT-{PHI1==i, PHI2==0, PHI4==0,
//    1<=i, i<=4}>

      (p[i]->tab2)[0] = (p[i]->tab1)[0];                                /*0085*/
   }
}

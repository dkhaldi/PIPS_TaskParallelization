
Parsed code for call22

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
   y[i] = 0;
   p->one = 1;
   (p->two)[j] = 2.;
   *q[i] = 3;
}

Code for call22

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
   y[i] = 0;
   p->one = 1;
   (p->two)[j] = 2.;
   *q[i] = 3;
}

Proper effects for call22

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <    is read   >: i
//             <    is written>: y[i]
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: p[0].one
   p->one = 1;
//             <    is read   >: j p
//             <    is written>: p[0].two[j]
   (p->two)[j] = 2.;
//             <    is read   >: i q[i]
//             <    is written>: q[i][0]
   *q[i] = 3;
}

Cumulated pointer effects for call22

//             <may be read   >: q[*]
//             <may be written>: p[0].two[*] q[*][0] y[*]
//             <    is read   >: i j p
//             <    is written>: p[0].one
void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{
//             <    is read   >: j
//             <    is written>: i
   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;
//             <may be written>: y[*]
//             <    is read   >: i
   y[i] = 0;
//             <    is read   >: p
//             <    is written>: p[0].one
   p->one = 1;
//             <may be written>: p[0].two[*]
//             <    is read   >: j p
   (p->two)[j] = 2.;
//             <may be read   >: q[*]
//             <may be written>: q[*][0]
//             <    is read   >: i
   *q[i] = 3;
}

Cumulated effects for "main"

int main()
{
   int a;
   int b;
   int x[10];
   int *ap[10];
   tf_t s;
//             <    is written>: sp
   tf_t *sp = &s;
//             <may be read   >: ap[*]
//             <may be written>: ap[*][0] sp[0].two[*] x[*]
//             <    is read   >: a b sp
//             <    is written>: sp[0].one

   call22(a, b, x, ap, sp);
}

Transformers for call22


//  T() {}

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{

//  T(i) {i==j+1}

   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;

//  T() {}

   y[i] = 0;

//  T(i,j) {}

   p->one = 1;

//  T(i,j) {}

   (p->two)[j] = 2.;

//  T(i,j) {}

   *q[i] = 3;
}

Transformers for "main"


//  T() {}

int main()
{

//  T() {}

   int a;

//  T() {}

   int b;

//  T() {}

   int x[10];

//  T() {}

   int *ap[10];

//  T() {}

   tf_t s;

//  T() {}

   tf_t *sp = &s;

//  T(a,b) {}


   call22(a, b, x, ap, sp);
}

Preconditions for "main"


//  P() {}

int main()
{

//  P() {}

   int a;

//  P() {}

   int b;

//  P() {}

   int x[10];

//  P() {}

   int *ap[10];

//  P() {}

   tf_t s;

//  P() {}

   tf_t *sp = &s;

//  P() {}


   call22(a, b, x, ap, sp);
}

Preconditions for call22


//  P() {}

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{

//  P() {}

   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;

//  P(i) {i==j+1}

   y[i] = 0;

//  P(i) {i==j+1}

   p->one = 1;

//  P(i,j) {}

   (p->two)[j] = 2.;

//  P(i,j) {}

   *q[i] = 3;
}

Pointer Regions for call22


//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1].one-W-EXACT-{PHI1==0}>
//  <p[PHI1].two[PHI3]-W-MAY-{PHI1==0}>
//  <q[PHI1]-R-MAY-{}>
//  <q[PHI1][PHI2]-W-MAY-{PHI2==0}>
//  <y[PHI1]-W-EXACT-{PHI1==j+1}>

void call22(int i, int j, int y[10], int *q[10], tf_t *p)
{

//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>

   /* i can be modified locally, but it won't show in the summary
        effects... which creates a problem for transformer and
        precondition computation. */
   i = j+1;

//  <i-R-EXACT-{}>
//  <y[PHI1]-W-EXACT-{PHI1==i, i==j+1}>

   y[i] = 0;

//  <p-R-EXACT-{}>
//  <p[PHI1].one-W-EXACT-{PHI1==0, i==j+1}>

   p->one = 1;

//  <j-R-EXACT-{}>
//  <p-R-EXACT-{}>
//  <p[PHI1].two[PHI3]-W-EXACT-{PHI1==0, PHI3==j}>

   (p->two)[j] = 2.;

//  <i-R-EXACT-{}>
//  <q[PHI1]-R-EXACT-{PHI1==i}>
//  <q[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==0}>

   *q[i] = 3;
}

Pointer Regions for "main"

int main()
{
   int a;
   int b;
   int x[10];
   int *ap[10];
   tf_t s;

//  <sp-W-EXACT-{}>

   tf_t *sp = &s;

//  <a-R-EXACT-{}>
//  <ap[PHI1]-R-MAY-{}>
//  <ap[PHI1][PHI2]-W-MAY-{PHI2==0}>
//  <b-R-EXACT-{}>
//  <sp-R-EXACT-{}>
//  <sp[PHI1].one-W-EXACT-{PHI1==0}>
//  <sp[PHI1].two[PHI3]-W-MAY-{PHI1==0}>
//  <x[PHI1]-W-EXACT-{PHI1==b+1}>


   call22(a, b, x, ap, sp);
}

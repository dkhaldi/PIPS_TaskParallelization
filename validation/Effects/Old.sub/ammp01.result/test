
Parsed printed file for "a_m_serial"

ATOM * a_m_serial(int serial)
{
   static ATOM *ap = (void *) 0;
   static ATOM *lastmatched = (void *) 0;
   int i, n, a_number();
   if (atomUPDATE)
      n = a_number();
   else
      n = atomNUMBER;

   ap = first;
   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)
      return (void *) 0;
   if (lastmatched==(void *) 0)
      lastmatched = first;

   if (serial==lastmatched->serial)
      return lastmatched;
   if (serial>lastmatched->serial)
      ap = lastmatched;
   for (i = 0;i<n;i++) {
      if (ap->serial==serial) {
         lastmatched = ap;
         return ap;
      }
      if (ap==ap->next)
         ap = first;
      else
         ap = ap->next;
   }
   return (void *) 0;
}

Proper effects for "a_m_serial"

ATOM * a_m_serial(int serial)
{
   static ATOM *ap = (void *) 0;
   static ATOM *lastmatched = (void *) 0;
   int i, n, a_number();
//             <    is read   >: atomUPDATE
   if (atomUPDATE)
//             <may be read   >: first
//             <may be written>: atomNUMBER atomUPDATE
//             <    is read   >: atomNUMBER atomUPDATE
//             <    is written>: n
      n = a_number();
   else
//             <    is read   >: atomNUMBER
//             <    is written>: n
      n = atomNUMBER;
//             <    is read   >: first
//             <    is written>: ap

   ap = first;
//             <    is read   >: ap
   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)
      return (void *) 0;
//             <    is read   >: lastmatched
   if (lastmatched==(void *) 0)
//             <    is read   >: first
//             <    is written>: lastmatched
      lastmatched = first;
//             <    is read   >: lastmatched lastmatched[0].serial 
//                               serial

   if (serial==lastmatched->serial)
//             <    is read   >: lastmatched
      return lastmatched;
//             <    is read   >: lastmatched lastmatched[0].serial 
//                               serial
   if (serial>lastmatched->serial)
//             <    is read   >: lastmatched
//             <    is written>: ap
      ap = lastmatched;
//             <    is read   >: n
//             <    is written>: i
   for(i = 0; i <= n-1; i += 1) {
//             <    is read   >: ap ap[0].serial n serial
      if (ap->serial==serial) {
//             <    is read   >: ap n
//             <    is written>: lastmatched
         lastmatched = ap;
//             <    is read   >: ap n
         return ap;
      }
//             <    is read   >: ap ap[0].next n
      if (ap==ap->next)
//             <    is read   >: first n
//             <    is written>: ap
         ap = first;
      else
//             <    is read   >: ap ap[0].next n
//             <    is written>: ap
         ap = ap->next;
   }
   return (void *) 0;
}

Cumulated effects for "a_m_serial"

//             <may be read   >: ap[0].next ap[0].serial
//             <may be written>: atomNUMBER atomUPDATE lastmatched
//             <    is read   >: ap atomNUMBER atomUPDATE first 
//                               lastmatched lastmatched[0].serial 
//                               serial
//             <    is written>: ap
ATOM * a_m_serial(int serial)
{
   static ATOM *ap = (void *) 0;
   static ATOM *lastmatched = (void *) 0;
   int i, n, a_number();
//             <may be read   >: first
//             <may be written>: atomNUMBER atomUPDATE
//             <    is read   >: atomNUMBER atomUPDATE
//             <    is written>: n
   if (atomUPDATE)
//             <may be read   >: first
//             <may be written>: atomNUMBER atomUPDATE
//             <    is read   >: atomNUMBER atomUPDATE
//             <    is written>: n
      n = a_number();
   else
//             <    is read   >: atomNUMBER
//             <    is written>: n
      n = atomNUMBER;
//             <    is read   >: first
//             <    is written>: ap

   ap = first;
//             <    is read   >: ap
   /* static pointer is hook for more efficient search */
   if (ap==(void *) 0)
      return (void *) 0;
//             <may be read   >: first
//             <may be written>: lastmatched
//             <    is read   >: lastmatched
   if (lastmatched==(void *) 0)
//             <    is read   >: first
//             <    is written>: lastmatched
      lastmatched = first;
//             <    is read   >: lastmatched lastmatched[0].serial 
//                               serial

   if (serial==lastmatched->serial)
//             <    is read   >: lastmatched
      return lastmatched;
//             <may be written>: ap
//             <    is read   >: lastmatched lastmatched[0].serial 
//                               serial
   if (serial>lastmatched->serial)
//             <    is read   >: lastmatched
//             <    is written>: ap
      ap = lastmatched;
//             <may be read   >: ap ap[0].next ap[0].serial first 
//                               serial
//             <may be written>: ap lastmatched
//             <    is read   >: n
//             <    is written>: i
   for(i = 0; i <= n-1; i += 1) {
//             <may be written>: lastmatched
//             <    is read   >: ap ap[0].serial n serial
      if (ap->serial==serial) {
//             <    is read   >: ap n
//             <    is written>: lastmatched
         lastmatched = ap;
//             <    is read   >: ap n
         return ap;
      }
//             <may be read   >: first
//             <    is read   >: ap ap[0].next n
//             <    is written>: ap
      if (ap==ap->next)
//             <    is read   >: first n
//             <    is written>: ap
         ap = first;
      else
//             <    is read   >: ap ap[0].next n
//             <    is written>: ap
         ap = ap->next;
   }
   return (void *) 0;
}

Parsed printed file for "activate"

int activate(int i1, int i2)
{
   int upper, lower;
   ATOM *ap, *a_m_serial(int), *a_next(int);
   int i, numatm, a_number();

   if (i2==0) {
      ap = a_m_serial(i1);
      if (ap!=(void *) 0)
         ap->active = 1;
      return 0;
   }

   upper = i2;
   lower = i1;
   if (i2<i1) {
      lower = i2;
      upper = i1;
   }

   numatm = a_number();
   for (i = 0;i<numatm;i++) {
      ap = a_next(i);
      if (ap->serial>=lower&&ap->serial<=upper)
         ap->active = 1;
   }
   return 0;
}

Proper effects for "activate"

int activate(int i1, int i2)
{
   int upper, lower;
   ATOM *ap, *a_m_serial(int), *a_next(int flag);
   int i, numatm, a_number();
//             <    is read   >: i2

   if (i2==0) {
//             <may be read   >: a_m_serial:0`ap[0].next 
//                               a_m_serial:0`ap[0].serial
//             <may be written>: atomNUMBER atomUPDATE 
//                               a_m_serial:0`lastmatched
//             <    is read   >: atomNUMBER atomUPDATE first i1 
//                               a_m_serial:0`ap 
//                               a_m_serial:0`lastmatched 
//                               a_m_serial:0`lastmatched[0].serial
//             <    is written>: ap a_m_serial:0`ap
      ap = a_m_serial(i1);
//             <    is read   >: ap
      if (ap!=(void *) 0)
//             <    is read   >: ap
//             <    is written>: ap[0].active
         ap->active = 1;
      return 0;
   }
//             <    is read   >: i2
//             <    is written>: upper

   upper = i2;
//             <    is read   >: i1
//             <    is written>: lower
   lower = i1;
//             <    is read   >: i1 i2
   if (i2<i1) {
//             <    is read   >: i2
//             <    is written>: lower
      lower = i2;
//             <    is read   >: i1
//             <    is written>: upper
      upper = i1;
   }
//             <may be read   >: first
//             <may be written>: atomNUMBER atomUPDATE
//             <    is read   >: atomNUMBER atomUPDATE
//             <    is written>: numatm

   numatm = a_number();
//             <    is read   >: numatm
//             <    is written>: i
   for(i = 0; i <= numatm-1; i += 1) {
//             <may be read   >: first
//             <    is read   >: i numatm a_next:0`ap 
//                               a_next:0`ap[0].next
//             <    is written>: ap a_next:0`ap
      ap = a_next(i);
//             <    is read   >: ap ap[0].serial ap[0].serial lower 
//                               numatm upper
      if (ap->serial>=lower&&ap->serial<=upper)
//             <    is read   >: ap numatm
//             <    is written>: ap[0].active
         ap->active = 1;
   }
   return 0;
}

Cumulated effects for "activate"

//             <may be read   >: first a_m_serial:0`ap 
//                               a_m_serial:0`ap[0].next 
//                               a_m_serial:0`ap[0].serial 
//                               a_m_serial:0`lastmatched 
//                               a_m_serial:0`lastmatched[0].serial 
//                               a_next:0`ap a_next:0`ap[0].next
//             <may be written>: atomNUMBER atomUPDATE a_m_serial:0`ap
//                               a_m_serial:0`lastmatched a_next:0`ap
//             <    is read   >: atomNUMBER atomUPDATE i1 i2
int activate(int i1, int i2)
{
   int upper, lower;
   ATOM *ap, *a_m_serial(int), *a_next(int flag);
   int i, numatm, a_number();
//             <may be read   >: ap atomNUMBER atomUPDATE first i1 
//                               a_m_serial:0`ap 
//                               a_m_serial:0`ap[0].next 
//                               a_m_serial:0`ap[0].serial 
//                               a_m_serial:0`lastmatched 
//                               a_m_serial:0`lastmatched[0].serial
//             <may be written>: ap ap[0].active atomNUMBER atomUPDATE
//                               a_m_serial:0`ap 
//                               a_m_serial:0`lastmatched
//             <    is read   >: i2

   if (i2==0) {
//             <may be read   >: a_m_serial:0`ap[0].next 
//                               a_m_serial:0`ap[0].serial
//             <may be written>: atomNUMBER atomUPDATE 
//                               a_m_serial:0`lastmatched
//             <    is read   >: atomNUMBER atomUPDATE first i1 
//                               a_m_serial:0`ap 
//                               a_m_serial:0`lastmatched 
//                               a_m_serial:0`lastmatched[0].serial
//             <    is written>: ap a_m_serial:0`ap
      ap = a_m_serial(i1);
//             <may be written>: ap[0].active
//             <    is read   >: ap
      if (ap!=(void *) 0)
//             <    is read   >: ap
//             <    is written>: ap[0].active
         ap->active = 1;
      return 0;
   }
//             <    is read   >: i2
//             <    is written>: upper

   upper = i2;
//             <    is read   >: i1
//             <    is written>: lower
   lower = i1;
//             <may be written>: lower upper
//             <    is read   >: i1 i2
   if (i2<i1) {
//             <    is read   >: i2
//             <    is written>: lower
      lower = i2;
//             <    is read   >: i1
//             <    is written>: upper
      upper = i1;
   }
//             <may be read   >: first
//             <may be written>: atomNUMBER atomUPDATE
//             <    is read   >: atomNUMBER atomUPDATE
//             <    is written>: numatm

   numatm = a_number();
//             <may be read   >: ap ap[0].serial first i lower upper 
//                               a_next:0`ap a_next:0`ap[0].next
//             <may be written>: ap ap[0].active a_next:0`ap
//             <    is read   >: numatm
//             <    is written>: i
   for(i = 0; i <= numatm-1; i += 1) {
//             <may be read   >: first
//             <    is read   >: i numatm a_next:0`ap 
//                               a_next:0`ap[0].next
//             <    is written>: ap a_next:0`ap
      ap = a_next(i);
//             <may be written>: ap[0].active
//             <    is read   >: ap ap[0].serial lower numatm upper
      if (ap->serial>=lower&&ap->serial<=upper)
//             <    is read   >: ap numatm
//             <    is written>: ap[0].active
         ap->active = 1;
   }
   return 0;
}


Parsed code for "call14"

void call14(int n, int m, int *x)
{
   int i, j;

   for (i = 0;i<n*m;i++)
      x[i] = i;
}

Code for "call14"

void call14(int n, int m, int *x)
{
   int i, j;

   for(i = 0; i <= n*m-1; i += 1)
      x[i] = i;
}

Proper effects for "call14"

void call14(int n, int m, int *x)
{
   int i, j;
//             <    is read   >: m n
//             <    is written>: i

   for(i = 0; i <= n*m-1; i += 1)
//             <    is read   >: i m n x
//             <    is written>: x[i]
      x[i] = i;
}

Cumulated effects for "call14"

//             <may be read   >: x
//             <may be written>: x[*]
//             <    is read   >: m n
void call14(int n, int m, int *x)
{
   int i, j;
//             <may be read   >: i x
//             <may be written>: x[*]
//             <    is read   >: m n
//             <    is written>: i

   for(i = 0; i <= n*m-1; i += 1)
//             <may be written>: x[*]
//             <    is read   >: i m n x
      x[i] = i;
}

Proper effects for "main"

int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i, j;
//             <may be written>: y[*][*]
//             <    is read   >: d1 d2

   call14(d1, d2, (int *) y);
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1) {
//             <    is read   >: d1 d2
//             <    is written>: j
      for(j = 0; j <= d2-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 d2 i j stdout y[i][j] 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\n");
   }
}

Cumulated effects for "main"

//             <may be read   >: stdout stdout[0] __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i, j;
//             <may be written>: y[*][*]
//             <    is read   >: d1 d2

   call14(d1, d2, (int *) y);
//             <may be read   >: d2 i j stdout stdout[0] y[*][*] 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: j stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1) {
//             <may be read   >: i j stdout stdout[0] y[*][*] 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] __IO_EFFECTS:LUNS[1]
//             <    is read   >: d1 d2
//             <    is written>: j
      for(j = 0; j <= d2-1; j += 1)
//             <may be read   >: stdout[0] y[*][*]
//             <may be written>: stdout[0]
//             <    is read   >: d1 d2 i j stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\n");
   }
}

Proper effects for "main"

int main()
{
   int d1 = 4;
   int d2 = 4;
   int y[d1][d2];
   int i, j;

//  <y[PHI1][PHI2]-W-MAY-{d1==4, d1==4, d2==4, d2==4}>


   call14(d1, d2, (int *) y);

   for(i = 0; i <= d1-1; i += 1) {
      for(j = 0; j <= d2-1; j += 1)

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <y[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, i+1<=d1, j+1<=d2, 0<=i,
//    0<=j}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i+1<=d1, j+1<=d2, 0<=i,
//    0<=j}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i+1<=d1, j+1<=d2, 0<=i,
//    0<=j}>

         printf("y[%d][%d] = %d\t", i, j, y[i][j]);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i+1<=d1, d2<=j, 0<=i,
//    0<=j}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i+1<=d1, d2<=j, 0<=i,
//    0<=j}>

      printf("\n");
   }
}

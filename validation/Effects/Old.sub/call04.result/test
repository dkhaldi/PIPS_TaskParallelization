
Parsed code for "call04"

void call04(int n, int m, int x[n][m])
{
   int i, j;

   for (i = 0;i<n;i++)
      for (j = 0;j<m;j++)
         x[i][j] = 0;
}

Code for "call04"

void call04(int n, int m, int x[n][m])
{
   int i, j;

   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= m-1; j += 1)
         x[i][j] = 0;
}

Proper effects for "call04"

void call04(int n, int m, int x[n][m])
{
   int i, j;
//             <    is read   >: n
//             <    is written>: i

   for(i = 0; i <= n-1; i += 1)
//             <    is read   >: m n
//             <    is written>: j
      for(j = 0; j <= m-1; j += 1)
//             <    is read   >: i j m n
//             <    is written>: x[i][j]
         x[i][j] = 0;
}

Cumulated effects for "call04"

//             <may be written>: x[*][*]
//             <    is read   >: m n
void call04(int n, int m, int x[n][m])
{
   int i, j;
//             <may be read   >: i j m
//             <may be written>: j x[*][*]
//             <    is read   >: n
//             <    is written>: i

   for(i = 0; i <= n-1; i += 1)
//             <may be read   >: i j
//             <may be written>: x[*][*]
//             <    is read   >: m n
//             <    is written>: j
      for(j = 0; j <= m-1; j += 1)
//             <may be written>: x[*][*]
//             <    is read   >: i j m n
         x[i][j] = 0;
}

Proper effects for "main"

int main()
{
//             <    is written>: d1
   int d1 = 10;
//             <    is written>: d2
   int d2 = 10;
//             <    is read   >: d1 d2
   int y[d1][d2];
//             <may be written>: y[*][*]
//             <    is read   >: d1 d2

   call04(d1, d2, y);
}

Cumulated effects for "main"

int main()
{
//             <    is written>: d1
   int d1 = 10;
//             <    is written>: d2
   int d2 = 10;
//             <    is read   >: d1 d2
   int y[d1][d2];
//             <may be written>: y[*][*]
//             <    is read   >: d1 d2

   call04(d1, d2, y);
}

Regions for "call04"


//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9, m==10,
//    n==10}>

void call04(int n, int m, int x[n][m])
{
   int i, j;

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9, m==10,
//    n==10}>


   for(i = 0; i <= n-1; i += 1)

//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-EXACT-{PHI1==i, 0<=PHI2, PHI2<=9, m==10, n==10,
//    0<=i, i<=9}>

      for(j = 0; j <= m-1; j += 1)

//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <m-R-EXACT-{}>
//  <n-R-EXACT-{}>
//  <x[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, m==10, n==10, 0<=i,
//    i<=9, 0<=j, j<=9}>

         x[i][j] = 0;
}

Regions for "main"

int main()
{

//  <d1-W-EXACT-{}>

   int d1 = 10;

//  <d2-W-EXACT-{}>

   int d2 = 10;

//  <d1-R-EXACT-{}>
//  <d2-R-EXACT-{}>

   int y[d1][d2];

//  <d1-R-EXACT-{}>
//  <d2-R-EXACT-{}>
//  <y[PHI1][PHI2]-W-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    d1==10, d2==10}>


   call04(d1, d2, y);
}

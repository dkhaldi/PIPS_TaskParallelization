
Proper pointer effects for "main"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: a.p i
//             <    is written>: a.p[i]
         (a.p)[i] = i;
//             <    is read   >: a.p
//             <    is written>: b.p
      
      // definition of b, also modifies a
      b = a;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: b.p i
//             <    is written>: b.p[i]
         (b.p)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: a.p a.p[i] b.p b.p[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <    is written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: i
//             <    is written>: c.array[i]
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
      
      // definition of d, does not modify c
      d = c;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i
//             <    is written>: d.array[i]
         (d.array)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: c.array[i] d.array[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//             <    is written>: i
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: e.champ[i].p _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <    is read   >: e.champ[i].p i j
//             <    is written>: e.champ[i].p[j]
            ((e.champ)[i].p)[j] = i+j;
      }
//             <may be read   >: e.champ[*].p
//             <may be written>: f.champ[*].p
      
      // definition of f, also modifies e
      f = e;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <    is read   >: f.champ[i].p i j
//             <    is written>: f.champ[i].p[j]
            ((f.champ)[i].p)[j] = i*j;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: e.champ[i].p e.champ[i].p[j] 
//                               f.champ[i].p f.champ[i].p[j] i j 
//                               stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//             <    is written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <    is read   >: i j
//             <    is written>: g.champ[i].array[j]
            ((g.champ)[i].array)[j] = i+j;
//             <may be read   >: g.champ[*].array[*]
//             <may be written>: h.champ[*].array[*]
      
      // definition of h, does not modify g
      h = g;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <    is read   >: i j
//             <    is written>: h.champ[i].array[j]
            ((h.champ)[i].array)[j] = i*j;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: g.champ[i].array[j] 
//                               h.champ[i].array[j] i j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

Proper effects for "struct09"

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <    is written>: i
      for(i = 0; i <= 9; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: a.p i
         (a.p)[i] = i;
//             <    is read   >: a.p
//             <    is written>: b.p
      
      // definition of b, also modifies a
      b = a;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: b.p i
         (b.p)[i] = i*10;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <    is written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//             <    is read   >: i
//             <    is written>: c.array[i]
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
      
      // definition of d, does not modify c
      d = c;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i
//             <    is written>: d.array[i]
         (d.array)[i] = i*10;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: c.array[i] d.array[i] i stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//             <    is written>: i
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: e.champ[i].p _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: e.champ[i].p i j
            ((e.champ)[i].p)[j] = i+j;
      }
//             <may be read   >: e.champ[*].p
//             <may be written>: f.champ[*].p
      
      // definition of f, also modifies e
      f = e;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: f.champ[i].p i j
            ((f.champ)[i].p)[j] = i*j;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//             <    is written>: i
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <    is read   >: i j
//             <    is written>: g.champ[i].array[j]
            ((g.champ)[i].array)[j] = i+j;
//             <may be read   >: g.champ[*].array[*]
//             <may be written>: h.champ[*].array[*]
      
      // definition of h, does not modify g
      h = g;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//             <    is written>: i
      for(i = 0; i <= 4; i += 1)
//             <    is written>: j
         for(j = 0; j <= 9; j += 1) {
//             <    is read   >: i j
//             <    is written>: h.champ[i].array[j]
            ((h.champ)[i].array)[j] = i*j;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: g.champ[i].array[j] 
//                               h.champ[i].array[j] i j stdout 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
   return 0;
}

Cumulated effects for "struct09"

//             <may be read   >: stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;
//             <may be read   >: stdout stdout[0] 
//                               *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
//             <may be written>: stdout[0] *ANY_MODULE*:*ANYWHERE* 
//                               _MALLOC_EFFECTS:_MALLOC_ 
//                               __IO_EFFECTS:LUNS[1]
   
   // just to create a block for prettyprinting
   if (1) {
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: a.p _MALLOC_EFFECTS:_MALLOC_
      // definition of a
      a.p = (int *) malloc(10*sizeof(int));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: a.p i
      for(i = 0; i <= 9; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: a.p i
         (a.p)[i] = i;
//             <    is read   >: a.p
//             <    is written>: b.p
      
      // definition of b, also modifies a
      b = a;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with pointer copy : \n");
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: b.p i
         (b.p)[i] = i*10;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }
//             <may be written>: c.array[*]
//             <    is read   >: i
//             <    is written>: i
      
      // definition of c
      for(i = 0; i <= 9; i += 1)
//             <may be written>: c.array[*]
//             <    is read   >: i
         (c.array)[i] = i;
//             <may be read   >: c.array[*]
//             <may be written>: d.array[*]
      
      // definition of d, does not modify c
      d = c;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array copy : \n");
//             <may be read   >: c.array[*] d.array[*] stdout[0]
//             <may be written>: d.array[*] stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 9; i += 1) {
//             <may be written>: d.array[*]
//             <    is read   >: i
         (d.array)[i] = i*10;
//             <may be read   >: c.array[*] d.array[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }
//             <may be read   >: e.champ[*].p
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i j _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      
      // definition of e
      for(i = 0; i <= 4; i += 1) {
//             <may be written>: e.champ[*].p
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
         (e.champ)[i].p = malloc(10*sizeof(int));
//             <may be read   >: e.champ[*].p
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i j
         for(j = 0; j <= 9; j += 1)
//             <may be read   >: e.champ[*].p
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i j
            ((e.champ)[i].p)[j] = i+j;
      }
//             <may be read   >: e.champ[*].p
//             <may be written>: f.champ[*].p
      
      // definition of f, also modifies e
      f = e;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with pointer copy : \n");
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 4; i += 1)
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         for(j = 0; j <= 9; j += 1) {
//             <may be read   >: f.champ[*].p
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i j
            ((f.champ)[i].p)[j] = i*j;
//             <may be read   >: stdout[0] *ANY_MODULE*:*ANYWHERE*
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }
//             <may be written>: g.champ[*].array[*]
//             <    is read   >: i j
//             <    is written>: i j
      
      // definition of g
      for(i = 0; i <= 4; i += 1)
//             <may be written>: g.champ[*].array[*]
//             <    is read   >: i j
//             <    is written>: j
         for(j = 0; j <= 9; j += 1)
//             <may be written>: g.champ[*].array[*]
//             <    is read   >: i j
            ((g.champ)[i].array)[j] = i+j;
//             <may be read   >: g.champ[*].array[*]
//             <may be written>: h.champ[*].array[*]
      
      // definition of h, does not modify g
      h = g;
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\nstruct with array of structs with array copy : \n");
//             <may be read   >: g.champ[*].array[*] 
//                               h.champ[*].array[*] stdout[0]
//             <may be written>: h.champ[*].array[*] stdout[0]
//             <    is read   >: i j stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: i j __IO_EFFECTS:LUNS[1]
      for(i = 0; i <= 4; i += 1)
//             <may be read   >: g.champ[*].array[*] 
//                               h.champ[*].array[*] stdout[0]
//             <may be written>: h.champ[*].array[*] stdout[0]
//             <    is read   >: i j stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: j __IO_EFFECTS:LUNS[1]
         for(j = 0; j <= 9; j += 1) {
//             <may be written>: h.champ[*].array[*]
//             <    is read   >: i j
            ((h.champ)[i].array)[j] = i*j;
//             <may be read   >: g.champ[*].array[*] 
//                               h.champ[*].array[*] stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: i j stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }
//             <may be read   >: __IO_EFFECTS:LUNS[1]
   return 0;
}

Printed files with regions


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main()
{
   s_with_pointer a, b;
   s_with_array c, d;
   s_with_array_of_struct_with_pointer e, f;
   s_with_array_of_struct_with_array g, h;

   int i, j;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

   
   // just to create a block for prettyprinting
   if (1) {

//  <a.p-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      // definition of a
      a.p = (int *) malloc(10*sizeof(int));

//  <a.p-R-EXACT-{}>
//  <i-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

      for(i = 0; i <= 9; i += 1)

//  <a.p-R-EXACT-{0<=i, i<=9}>
//  <i-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

         (a.p)[i] = i;

//  <a.p-R-EXACT-{i==10}>
//  <b.p-W-EXACT-{i==10}>

      
      // definition of b, also modifies a
      b = a;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==10}>

      printf("\nstruct with pointer copy : \n");

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 9; i += 1) {

//  <b.p-R-EXACT-{0<=i, i<=9}>
//  <i-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

         (b.p)[i] = i*10;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         printf("a.p[%d] = %d; b.p[%d] = %d \n", i, (a.p)[i], i, (b.p)[i]);
      }

//  <c.array[PHI2]-W-EXACT-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>

      
      // definition of c
      for(i = 0; i <= 9; i += 1)

//  <c.array[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (c.array)[i] = i;

//  <c.array[PHI2]-R-MAY-{i==10}>
//  <d.array[PHI2]-W-MAY-{i==10}>

      
      // definition of d, does not modify c
      d = c;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==10}>

      printf("\nstruct with array copy : \n");

//  <c.array[PHI2]-R-EXACT-{0<=PHI2, PHI2<=9}>
//  <d.array[PHI2]-R-EXACT-{0<=PHI2, PHI2<=9}>
//  <d.array[PHI2]-W-EXACT-{0<=PHI2, PHI2<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 9; i += 1) {

//  <d.array[PHI2]-W-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>

         (d.array)[i] = i*10;

//  <c.array[PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <d.array[PHI2]-R-EXACT-{PHI2==i, 0<=i, i<=9}>
//  <i-R-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, 0<=i, i<=9}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, 0<=i, i<=9}>

         printf("c.array[%d] = %d; d.array[%d] = %d \n", i, (c.array)[i], i, (d.array)[i]);
      }

//  <e.champ[PHI2].p-R-EXACT-{}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

      
      // definition of e
      for(i = 0; i <= 4; i += 1) {

//  <e.champ[PHI2].p-W-EXACT-{PHI2==i, 0<=i, i<=4}>
//  <i-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

         (e.champ)[i].p = malloc(10*sizeof(int));

//  <e.champ[PHI2].p-R-EXACT-{}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

         for(j = 0; j <= 9; j += 1)

//  <e.champ[PHI2].p-R-EXACT-{PHI2==i, 0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

            ((e.champ)[i].p)[j] = i+j;
      }

//  <e.champ[PHI2].p-R-MAY-{i==5, j==10}>
//  <f.champ[PHI2].p-W-MAY-{i==5, j==10}>

      
      // definition of f, also modifies e
      f = e;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==5, j==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==5, j==10}>

      printf("\nstruct with array of structs with pointer copy : \n");

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 4; i += 1)

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

         for(j = 0; j <= 9; j += 1) {

//  <f.champ[PHI2].p-R-EXACT-{PHI2==i, 0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <*ANY_MODULE*:*ANYWHERE*-W-MAY-{}>

            ((f.champ)[i].p)[j] = i*j;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

            printf("e.champ[%d].p[%d] = %d ; f.champ[%d].p[%d] = %d \n", i, j, ((e.champ)[i].p)[j], i, j, ((f.champ)[i].p)[j]);
         }

//  <g.champ[PHI2].array[PHI4]-W-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

      
      // definition of g
      for(i = 0; i <= 4; i += 1)

//  <g.champ[PHI2].array[PHI4]-W-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>

         for(j = 0; j <= 9; j += 1)

//  <g.champ[PHI2].array[PHI4]-W-EXACT-{PHI2==i, PHI4==j, 0<=i, i<=4,
//    0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>

            ((g.champ)[i].array)[j] = i+j;

//  <g.champ[PHI2].array[PHI4]-R-MAY-{i==5, j==10}>
//  <h.champ[PHI2].array[PHI4]-W-MAY-{i==5, j==10}>

      
      // definition of h, does not modify g
      h = g;

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, i==5, j==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, i==5, j==10}>

      printf("\nstruct with array of structs with array copy : \n");

//  <g.champ[PHI2].array[PHI4]-R-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <h.champ[PHI2].array[PHI4]-R-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <h.champ[PHI2].array[PHI4]-W-EXACT-{0<=PHI2, PHI2<=4, 0<=PHI4,
//    PHI4<=9}>
//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

      for(i = 0; i <= 4; i += 1)

//  <g.champ[PHI2].array[PHI4]-R-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <h.champ[PHI2].array[PHI4]-R-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <h.champ[PHI2].array[PHI4]-W-EXACT-{PHI2==i, 0<=PHI4, PHI4<=9,
//    0<=i, i<=4}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <j-W-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, 0<=i, i<=4}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, 0<=i, i<=4}>

         for(j = 0; j <= 9; j += 1) {

//  <h.champ[PHI2].array[PHI4]-W-EXACT-{PHI2==i, PHI4==j, 0<=i, i<=4,
//    0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>

            ((h.champ)[i].array)[j] = i*j;

//  <g.champ[PHI2].array[PHI4]-R-EXACT-{PHI2==i, PHI4==j, 0<=i, i<=4,
//    0<=j, j<=9}>
//  <h.champ[PHI2].array[PHI4]-R-EXACT-{PHI2==i, PHI4==j, 0<=i, i<=4,
//    0<=j, j<=9}>
//  <i-R-EXACT-{}>
//  <j-R-EXACT-{}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, 0<=i, i<=4, 0<=j,
//    j<=9}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, 0<=i, i<=4, 0<=j,
//    j<=9}>

            printf("g.champ[%d].array[%d] = %d ; h.champ[%d].array[%d] = %d \n", i, j, ((g.champ)[i].array)[j], i, j, ((h.champ)[i].array)[j]);
         }
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>

   return 0;
}

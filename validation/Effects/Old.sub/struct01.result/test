
Proper pointer effects for "main"

int main()
{
   struct one {
      int first;
      int second;
   } x, y[10], z[10];
   int i;
//             <    is written>: x.first

   x.first = 1;
//             <    is written>: x.second
   x.second = 2;
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i x.first
//             <    is written>: y[i].first
      y[i].first = x.first;
//             <    is read   >: i x.second
//             <    is written>: y[i].second
      y[i].second = x.second;
   }
//             <    is written>: i

   for(i = 0; i <= 9; i += 1)
//             <    is read   >: i x.first x.second
//             <    is written>: z[i].first z[i].second
      z[i] = x;
   return 0;
}

Cumulated pointer effects for "main"

int main()
{
   struct one {
      int first;
      int second;
   } x, y[10], z[10];
   int i;
//             <    is written>: x.first

   x.first = 1;
//             <    is written>: x.second
   x.second = 2;
//             <may be written>: y[*].first y[*].second
//             <    is read   >: i x.first x.second
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <may be written>: y[*].first
//             <    is read   >: i x.first
      y[i].first = x.first;
//             <may be written>: y[*].second
//             <    is read   >: i x.second
      y[i].second = x.second;
   }
//             <may be written>: z[*].first z[*].second
//             <    is read   >: i x.first x.second
//             <    is written>: i

   for(i = 0; i <= 9; i += 1)
//             <may be written>: z[*].first z[*].second
//             <    is read   >: i x.first x.second
      z[i] = x;
   return 0;
}

Proper effects for "main"

int main()
{
   struct one {
      int first;
      int second;
   } x, y[10], z[10];
   int i;
//             <    is written>: x.first

   x.first = 1;
//             <    is written>: x.second
   x.second = 2;
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <    is read   >: i x.first
//             <    is written>: y[i].first
      y[i].first = x.first;
//             <    is read   >: i x.second
//             <    is written>: y[i].second
      y[i].second = x.second;
   }
//             <    is written>: i

   for(i = 0; i <= 9; i += 1)
//             <    is read   >: i x.first x.second
//             <    is written>: z[i].first z[i].second
      z[i] = x;
   return 0;
}

Cumulated effects for "main"

int main()
{
   struct one {
      int first;
      int second;
   } x, y[10], z[10];
   int i;
//             <    is written>: x.first

   x.first = 1;
//             <    is written>: x.second
   x.second = 2;
//             <may be written>: y[*].first y[*].second
//             <    is read   >: i x.first x.second
//             <    is written>: i

   for(i = 0; i <= 9; i += 1) {
//             <may be written>: y[*].first
//             <    is read   >: i x.first
      y[i].first = x.first;
//             <may be written>: y[*].second
//             <    is read   >: i x.second
      y[i].second = x.second;
   }
//             <may be written>: z[*].first z[*].second
//             <    is read   >: i x.first x.second
//             <    is written>: i

   for(i = 0; i <= 9; i += 1)
//             <may be written>: z[*].first z[*].second
//             <    is read   >: i x.first x.second
      z[i] = x;
   return 0;
}

Transformers for "main"


//  T(main) {main==0}

int main()
{

//  T() {}

   struct one {
      int first;
      int second;
   } x, y[10], z[10];

//  T() {}

   int i;

//  T() {}


   x.first = 1;

//  T() {}

   x.second = 2;

//  T(i) {0<=i, i<=9}


   for(i = 0; i <= 9; i += 1) {

//  T() {}

      y[i].first = x.first;

//  T() {}

      y[i].second = x.second;
   }

//  T(i) {0<=i, i<=9}


   for(i = 0; i <= 9; i += 1)

//  T() {}

      z[i] = x;

//  T(main) {main==0}

   return 0;
}

Printed files with regions

int main()
{
   struct one {
      int first;
      int second;
   } x, y[10], z[10];
   int i;

//  <x.first-W-EXACT-{}>


   x.first = 1;

//  <x.second-W-EXACT-{}>

   x.second = 2;

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <x.first-R-EXACT-{}>
//  <x.second-R-EXACT-{}>
//  <y[PHI1].first-W-EXACT-{0<=PHI1, PHI1<=9}>
//  <y[PHI1].second-W-EXACT-{0<=PHI1, PHI1<=9}>


   for(i = 0; i <= 9; i += 1) {

//  <i-R-EXACT-{}>
//  <x.first-R-EXACT-{0<=i, i<=9}>
//  <y[PHI1].first-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      y[i].first = x.first;

//  <i-R-EXACT-{}>
//  <x.second-R-EXACT-{0<=i, i<=9}>
//  <y[PHI1].second-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      y[i].second = x.second;
   }

//  <i-R-EXACT-{}>
//  <i-W-EXACT-{}>
//  <x.first-R-EXACT-{}>
//  <x.second-R-EXACT-{}>
//  <z[PHI1].first-W-EXACT-{0<=PHI1, PHI1<=9}>
//  <z[PHI1].second-W-EXACT-{0<=PHI1, PHI1<=9}>


   for(i = 0; i <= 9; i += 1)

//  <i-R-EXACT-{}>
//  <x.first-R-EXACT-{0<=i, i<=9}>
//  <x.second-R-EXACT-{0<=i, i<=9}>
//  <z[PHI1].first-W-EXACT-{PHI1==i, 0<=i, i<=9}>
//  <z[PHI1].second-W-EXACT-{PHI1==i, 0<=i, i<=9}>

      z[i] = x;
   return 0;
}

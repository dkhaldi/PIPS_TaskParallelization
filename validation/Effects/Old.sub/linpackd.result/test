      SUBROUTINE DGESL(A,LDA,N,IPVT,B,JOB)
      INTEGER LDA,N,IPVT(1),JOB
      DOUBLE PRECISION A(LDA,1),B(1)
c
c     dgesl solves the double precision system
c     a * x = b  or  trans(a) * x = b
c     using the factors computed by dgeco or dgefa.
c
c     on entry
c
c        a       double precision(lda, n)
c                the output from dgeco or dgefa.
c
c        lda     integer
c                the leading dimension of the array  a .
c
c        n       integer
c                the order of the matrix  a .
c
c        ipvt    integer(n)
c                the pivot vector from dgeco or dgefa.
c
c        b       double precision(n)
c                the right hand side vector.
c
c        job     integer
c                = 0         to solve  a*x = b ,
c                = nonzero   to solve  trans(a)*x = b  where
c                            trans(a)  is the transpose.
c
c     on return
c
c        b       the solution vector  x .
c
c     error condition
c
c        a division by zero will occur if the input factor contains a
c        zero on the diagonal.  technically this indicates singularity
c        but it is often caused by improper arguments or improper
c        setting of lda .  it will not occur if the subroutines are
c        called correctly and if dgeco has set rcond .gt. 0.0
c        or dgefa has set info .eq. 0 .
c
c     to compute  inverse(a) * c  where  c  is a matrix
c     with  p  columns
c           call dgeco(a,lda,n,ipvt,rcond,z)
c           if (rcond is too small) go to ...
c           do 10 j = 1, p
c              call dgesl(a,lda,n,ipvt,c(1,j),0)
c        10 continue
c
c     linpack. this version dated 08/14/78 .
c     cleve moler, university of new mexico, argonne national lab.
c
c     subroutines and functions
c
c     blas daxpy,ddot
c
c     internal variables
c
      DOUBLE PRECISION DDOT,T
      INTEGER K,KB,L,NM1
C             <    is read   >: N
C             <    is written>: NM1
c
      NM1 = N-1                                                         0064
C             <    is read   >: JOB
      IF (JOB.NE.0) GOTO 50                                             0065
C             <    is read   >: NM1
c
c        job = 0 , solve  a * x = b
c        first solve  l*y = b
c
      IF (NM1.LT.1) GOTO 30                                             0070
C             <    is read   >: NM1
C             <    is written>: K
      DO 20 K = 1, NM1                                                  0071
C             <    is read   >: IPVT(K) K NM1
C             <    is written>: L
         L = IPVT(K)                                                    0072
C             <    is read   >: B(L) L NM1
C             <    is written>: T
         T = B(L)                                                       0073
C             <    is read   >: K L NM1
         IF (L.EQ.K) GOTO 10                                            0074
C             <    is read   >: B(K) K L NM1
C             <    is written>: B(L)
         B(L) = B(K)                                                    0075
C             <    is read   >: K NM1 T
C             <    is written>: B(K)
         B(K) = T                                                       0076
C             <    is read   >: NM1
10       CONTINUE                                                       0077
C             <may be read   >: A(*,*) B(*) T
C             <may be written>: B(*)
C             <    is read   >: K N NM1
         CALL DAXPY(N-K, T, A(K+1,K), 1, B(K+1), 1)                     0078
C             <    is read   >: NM1
20       CONTINUE                                                       0079
30    CONTINUE                                                          0080
C             <    is read   >: N
C             <    is written>: KB
c
c        now solve  u*x = y
c
      DO 40 KB = 1, N                                                   0084
C             <    is read   >: KB N
C             <    is written>: K
         K = N+1-KB                                                     0085
C             <    is read   >: A(K,K) B(K) K LDA N
C             <    is written>: B(K)
         B(K) = B(K)/A(K,K)                                             0086
C             <    is read   >: B(K) K N
C             <    is written>: T
         T = -B(K)                                                      0087
C             <may be read   >: A(*,*) B(*) T
C             <may be written>: B(*)
C             <    is read   >: K N
         CALL DAXPY(K-1, T, A(1,K), 1, B(1), 1)                         0088
C             <    is read   >: N
40       CONTINUE                                                       0089
      GOTO 100
50    CONTINUE                                                          0091
C             <    is read   >: N
C             <    is written>: K
c
c        job = nonzero, solve  trans(a) * x = b
c        first solve  trans(u)*y = b
c
      DO 60 K = 1, N                                                    0096
C             <may be read   >: A(*,*) B(*)
C             <    is read   >: K N
C             <    is written>: T
         T = DDOT(K-1, A(1,K), 1, B(1), 1)                              0097
C             <    is read   >: A(K,K) B(K) K LDA N T
C             <    is written>: B(K)
         B(K) = (B(K)-T)/A(K,K)                                         0098
C             <    is read   >: N
60       CONTINUE                                                       0099
C             <    is read   >: NM1
c
c        now solve trans(l)*x = y
c
      IF (NM1.LT.1) GOTO 90                                             0103
C             <    is read   >: NM1
C             <    is written>: KB
      DO 80 KB = 1, NM1                                                 0104
C             <    is read   >: KB N NM1
C             <    is written>: K
         K = N-KB                                                       0105
C             <may be read   >: A(*,*) B(*)
C             <    is read   >: B(K) K N NM1
C             <    is written>: B(K)
         B(K) = B(K)+DDOT(N-K, A(K+1,K), 1, B(K+1), 1)                  0106
C             <    is read   >: IPVT(K) K NM1
C             <    is written>: L
         L = IPVT(K)                                                    0107
C             <    is read   >: K L NM1
         IF (L.EQ.K) GOTO 70                                            0108
C             <    is read   >: B(L) L NM1
C             <    is written>: T
         T = B(L)                                                       0109
C             <    is read   >: B(K) K L NM1
C             <    is written>: B(L)
         B(L) = B(K)                                                    0110
C             <    is read   >: K NM1 T
C             <    is written>: B(K)
         B(K) = T                                                       0111
C             <    is read   >: NM1
70       CONTINUE                                                       0112
C             <    is read   >: NM1
80       CONTINUE                                                       0113
90    CONTINUE                                                          0114
100   CONTINUE                                                          0115
      END
C             <may be read   >: A(*,*) B(*) IPVT(*) JOB
C             <may be written>: B(*)
C             <    is read   >: LDA N
      SUBROUTINE DGESL(A,LDA,N,IPVT,B,JOB)
      INTEGER LDA,N,IPVT(1),JOB
      DOUBLE PRECISION A(LDA,1),B(1)
c
c     dgesl solves the double precision system
c     a * x = b  or  trans(a) * x = b
c     using the factors computed by dgeco or dgefa.
c
c     on entry
c
c        a       double precision(lda, n)
c                the output from dgeco or dgefa.
c
c        lda     integer
c                the leading dimension of the array  a .
c
c        n       integer
c                the order of the matrix  a .
c
c        ipvt    integer(n)
c                the pivot vector from dgeco or dgefa.
c
c        b       double precision(n)
c                the right hand side vector.
c
c        job     integer
c                = 0         to solve  a*x = b ,
c                = nonzero   to solve  trans(a)*x = b  where
c                            trans(a)  is the transpose.
c
c     on return
c
c        b       the solution vector  x .
c
c     error condition
c
c        a division by zero will occur if the input factor contains a
c        zero on the diagonal.  technically this indicates singularity
c        but it is often caused by improper arguments or improper
c        setting of lda .  it will not occur if the subroutines are
c        called correctly and if dgeco has set rcond .gt. 0.0
c        or dgefa has set info .eq. 0 .
c
c     to compute  inverse(a) * c  where  c  is a matrix
c     with  p  columns
c           call dgeco(a,lda,n,ipvt,rcond,z)
c           if (rcond is too small) go to ...
c           do 10 j = 1, p
c              call dgesl(a,lda,n,ipvt,c(1,j),0)
c        10 continue
c
c     linpack. this version dated 08/14/78 .
c     cleve moler, university of new mexico, argonne national lab.
c
c     subroutines and functions
c
c     blas daxpy,ddot
c
c     internal variables
c
      DOUBLE PRECISION DDOT,T
      INTEGER K,KB,L,NM1
C             <    is read   >: N
C             <    is written>: NM1
c
      NM1 = N-1                                                         0064
C             <    is read   >: JOB
      IF (JOB.NE.0) GOTO 50                                             0065
C             <    is read   >: NM1
c
c        job = 0 , solve  a * x = b
c        first solve  l*y = b
c
      IF (NM1.LT.1) GOTO 30                                             0070
C             <may be read   >: A(*,*) B(*) IPVT(*) K L N T
C             <may be written>: B(*) L T
C             <    is read   >: NM1
C             <    is written>: K
      DO 20 K = 1, NM1                                                  0071
C             <may be read   >: IPVT(*)
C             <    is read   >: K NM1
C             <    is written>: L
         L = IPVT(K)                                                    0072
C             <may be read   >: B(*)
C             <    is read   >: L NM1
C             <    is written>: T
         T = B(L)                                                       0073
C             <    is read   >: K L NM1
         IF (L.EQ.K) GOTO 10                                            0074
C             <may be read   >: B(*)
C             <may be written>: B(*)
C             <    is read   >: K L NM1
         B(L) = B(K)                                                    0075
C             <may be written>: B(*)
C             <    is read   >: K NM1 T
         B(K) = T                                                       0076
C             <    is read   >: NM1
10       CONTINUE                                                       0077
C             <may be read   >: A(*,*) B(*) T
C             <may be written>: B(*)
C             <    is read   >: K N NM1
         CALL DAXPY(N-K, T, A(K+1,K), 1, B(K+1), 1)                     0078
C             <    is read   >: NM1
20       CONTINUE                                                       0079
30    CONTINUE                                                          0080
C             <may be read   >: A(*,*) B(*) K KB LDA T
C             <may be written>: B(*) K T
C             <    is read   >: N
C             <    is written>: KB
c
c        now solve  u*x = y
c
      DO 40 KB = 1, N                                                   0084
C             <    is read   >: KB N
C             <    is written>: K
         K = N+1-KB                                                     0085
C             <may be read   >: A(*,*) B(*)
C             <may be written>: B(*)
C             <    is read   >: K LDA N
         B(K) = B(K)/A(K,K)                                             0086
C             <may be read   >: B(*)
C             <    is read   >: K N
C             <    is written>: T
         T = -B(K)                                                      0087
C             <may be read   >: A(*,*) B(*) T
C             <may be written>: B(*)
C             <    is read   >: K N
         CALL DAXPY(K-1, T, A(1,K), 1, B(1), 1)                         0088
C             <    is read   >: N
40       CONTINUE                                                       0089
      GOTO 100
50    CONTINUE                                                          0091
C             <may be read   >: A(*,*) B(*) K LDA T
C             <may be written>: B(*) T
C             <    is read   >: N
C             <    is written>: K
c
c        job = nonzero, solve  trans(a) * x = b
c        first solve  trans(u)*y = b
c
      DO 60 K = 1, N                                                    0096
C             <may be read   >: A(*,*) B(*)
C             <    is read   >: K N
C             <    is written>: T
         T = DDOT(K-1, A(1,K), 1, B(1), 1)                              0097
C             <may be read   >: A(*,*) B(*)
C             <may be written>: B(*)
C             <    is read   >: K LDA N T
         B(K) = (B(K)-T)/A(K,K)                                         0098
C             <    is read   >: N
60       CONTINUE                                                       0099
C             <    is read   >: NM1
c
c        now solve trans(l)*x = y
c
      IF (NM1.LT.1) GOTO 90                                             0103
C             <may be read   >: A(*,*) B(*) IPVT(*) K KB L N T
C             <may be written>: B(*) K L T
C             <    is read   >: NM1
C             <    is written>: KB
      DO 80 KB = 1, NM1                                                 0104
C             <    is read   >: KB N NM1
C             <    is written>: K
         K = N-KB                                                       0105
C             <may be read   >: A(*,*) B(*)
C             <may be written>: B(*)
C             <    is read   >: K N NM1
         B(K) = B(K)+DDOT(N-K, A(K+1,K), 1, B(K+1), 1)                  0106
C             <may be read   >: IPVT(*)
C             <    is read   >: K NM1
C             <    is written>: L
         L = IPVT(K)                                                    0107
C             <    is read   >: K L NM1
         IF (L.EQ.K) GOTO 70                                            0108
C             <may be read   >: B(*)
C             <    is read   >: L NM1
C             <    is written>: T
         T = B(L)                                                       0109
C             <may be read   >: B(*)
C             <may be written>: B(*)
C             <    is read   >: K L NM1
         B(L) = B(K)                                                    0110
C             <may be written>: B(*)
C             <    is read   >: K NM1 T
         B(K) = T                                                       0111
C             <    is read   >: NM1
70       CONTINUE                                                       0112
C             <    is read   >: NM1
80       CONTINUE                                                       0113
90    CONTINUE                                                          0114
100   CONTINUE                                                          0115
      END


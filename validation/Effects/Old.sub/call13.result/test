
Parsed code for "call13"

void call13(int nrec, int nsa, int ntt, Cplfloat ptrin[nrec][nsa], Cplfloat ptrout[nrec-ntt+1][ntt][nsa][ntt][nsa])
{
   int i, j1, j2, k1, k2;
   float R, I;

   R = 0.0;
   I = 0.0;

   for (i = 0;i<nrec-ntt+1;i++)
      //    MOTIF     
      for (j1 = 0;j1<ntt;j1++)
         for (j2 = 0;j2<nsa;j2++)
            for (k1 = 0;k1<ntt;k1++)
               for (k2 = 0;k2<nsa;k2++) {
                  R = ptrin[i+j1][j2].re*ptrin[i+k1][k2].re+ptrin[i+j1][j2].im*ptrin[i+k1][k2].im;
                  I = -ptrin[i+j1][j2].re*ptrin[i+k1][k2].im+ptrin[i+j1][j2].im*ptrin[i+k1][k2].re;
                  ptrout[i][j1][j2][k1][k2].re = R;
                  ptrout[i][j1][j2][k1][k2].im = I;
               }
}

Code for "call13"

void call13(int nrec, int nsa, int ntt, Cplfloat ptrin[nrec][nsa], Cplfloat ptrout[nrec-ntt+1][ntt][nsa][ntt][nsa])
{
   int i, j1, j2, k1, k2;
   float R, I;

   R = 0.0;
   I = 0.0;

   for(i = 0; i <= nrec-ntt+1-1; i += 1)
      //    MOTIF     
      for(j1 = 0; j1 <= ntt-1; j1 += 1)
         for(j2 = 0; j2 <= nsa-1; j2 += 1)
            for(k1 = 0; k1 <= ntt-1; k1 += 1)
               for(k2 = 0; k2 <= nsa-1; k2 += 1) {
                  R = ptrin[i+j1][j2].re*ptrin[i+k1][k2].re+ptrin[i+j1][j2].im*ptrin[i+k1][k2].im;
                  I = -ptrin[i+j1][j2].re*ptrin[i+k1][k2].im+ptrin[i+j1][j2].im*ptrin[i+k1][k2].re;
                  ptrout[i][j1][j2][k1][k2].re = R;
                  ptrout[i][j1][j2][k1][k2].im = I;
               }
}

Proper effects for "call13"

void call13(int nrec, int nsa, int ntt, Cplfloat ptrin[nrec][nsa], Cplfloat ptrout[nrec-ntt+1][ntt][nsa][ntt][nsa])
{
   int i, j1, j2, k1, k2;
   float R, I;
//             <    is written>: R

   R = 0.0;
//             <    is written>: I
   I = 0.0;
//             <    is read   >: nrec ntt
//             <    is written>: i

   for(i = 0; i <= nrec-ntt+1-1; i += 1)
//             <    is read   >: nrec ntt
//             <    is written>: j1
      //    MOTIF     
      for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <    is read   >: nrec nsa ntt
//             <    is written>: j2
         for(j2 = 0; j2 <= nsa-1; j2 += 1)
//             <    is read   >: nrec nsa ntt
//             <    is written>: k1
            for(k1 = 0; k1 <= ntt-1; k1 += 1)
//             <    is read   >: nrec nsa ntt
//             <    is written>: k2
               for(k2 = 0; k2 <= nsa-1; k2 += 1) {
//             <    is read   >: i j1 j2 k1 k2 nrec nsa ntt 
//                               ptrin[i+j1][j2].im ptrin[i+j1][j2].re
//                               ptrin[i+k1][k2].im ptrin[i+k1][k2].re
//             <    is written>: R
                  R = ptrin[i+j1][j2].re*ptrin[i+k1][k2].re+ptrin[i+j1][j2].im*ptrin[i+k1][k2].im;
//             <    is read   >: i j1 j2 k1 k2 nrec nsa ntt 
//                               ptrin[i+j1][j2].im ptrin[i+j1][j2].re
//                               ptrin[i+k1][k2].im ptrin[i+k1][k2].re
//             <    is written>: I
                  I = -ptrin[i+j1][j2].re*ptrin[i+k1][k2].im+ptrin[i+j1][j2].im*ptrin[i+k1][k2].re;
//             <    is read   >: R i j1 j2 k1 k2 nrec nsa ntt
//             <    is written>: ptrout[i][j1][j2][k1][k2].re
                  ptrout[i][j1][j2][k1][k2].re = R;
//             <    is read   >: I i j1 j2 k1 k2 nrec nsa ntt
//             <    is written>: ptrout[i][j1][j2][k1][k2].im
                  ptrout[i][j1][j2][k1][k2].im = I;
               }
}

Cumulated effects for "call13"

//             <may be read   >: ptrin[*][*].im ptrin[*][*].re
//             <may be written>: ptrout[*][*][*][*][*].im 
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec nsa ntt
void call13(int nrec, int nsa, int ntt, Cplfloat ptrin[nrec][nsa], Cplfloat ptrout[nrec-ntt+1][ntt][nsa][ntt][nsa])
{
   int i, j1, j2, k1, k2;
   float R, I;
//             <    is written>: R

   R = 0.0;
//             <    is written>: I
   I = 0.0;
//             <may be read   >: I R i j1 j2 k1 k2 nsa ptrin[*][*].im 
//                               ptrin[*][*].re
//             <may be written>: I R j1 j2 k1 k2 
//                               ptrout[*][*][*][*][*].im 
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec ntt
//             <    is written>: i

   for(i = 0; i <= nrec-ntt+1-1; i += 1)
//             <may be read   >: I R i j1 j2 k1 k2 nsa ptrin[*][*].im 
//                               ptrin[*][*].re
//             <may be written>: I R j2 k1 k2 ptrout[*][*][*][*][*].im
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec ntt
//             <    is written>: j1
      //    MOTIF     
      for(j1 = 0; j1 <= ntt-1; j1 += 1)
//             <may be read   >: I R i j1 j2 k1 k2 ptrin[*][*].im 
//                               ptrin[*][*].re
//             <may be written>: I R k1 k2 ptrout[*][*][*][*][*].im 
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec nsa ntt
//             <    is written>: j2
         for(j2 = 0; j2 <= nsa-1; j2 += 1)
//             <may be read   >: I R i j1 j2 k1 k2 ptrin[*][*].im 
//                               ptrin[*][*].re
//             <may be written>: I R k2 ptrout[*][*][*][*][*].im 
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec nsa ntt
//             <    is written>: k1
            for(k1 = 0; k1 <= ntt-1; k1 += 1)
//             <may be read   >: I R i j1 j2 k1 k2 ptrin[*][*].im 
//                               ptrin[*][*].re
//             <may be written>: I R ptrout[*][*][*][*][*].im 
//                               ptrout[*][*][*][*][*].re
//             <    is read   >: nrec nsa ntt
//             <    is written>: k2
               for(k2 = 0; k2 <= nsa-1; k2 += 1) {
//             <may be read   >: ptrin[*][*].im ptrin[*][*].re
//             <    is read   >: i j1 j2 k1 k2 nrec nsa ntt
//             <    is written>: R
                  R = ptrin[i+j1][j2].re*ptrin[i+k1][k2].re+ptrin[i+j1][j2].im*ptrin[i+k1][k2].im;
//             <may be read   >: ptrin[*][*].im ptrin[*][*].re
//             <    is read   >: i j1 j2 k1 k2 nrec nsa ntt
//             <    is written>: I
                  I = -ptrin[i+j1][j2].re*ptrin[i+k1][k2].im+ptrin[i+j1][j2].im*ptrin[i+k1][k2].re;
//             <may be written>: ptrout[*][*][*][*][*].re
//             <    is read   >: R i j1 j2 k1 k2 nrec nsa ntt
                  ptrout[i][j1][j2][k1][k2].re = R;
//             <may be written>: ptrout[*][*][*][*][*].im
//             <    is read   >: I i j1 j2 k1 k2 nrec nsa ntt
                  ptrout[i][j1][j2][k1][k2].im = I;
               }
}

Regions for "call13"


//  <ptrin[PHI1][PHI2].im-R-MAY-{0<=PHI1, PHI1+1<=nrec, 0<=PHI2,
//    PHI2+1<=nsa, ntt<=nrec, 1<=ntt}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{0<=PHI1, PHI1+1<=nrec, 0<=PHI2,
//    PHI2+1<=nsa, ntt<=nrec, 1<=ntt}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{0<=PHI1,
//    PHI1+ntt<=nrec, 0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa,
//    0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{0<=PHI1,
//    PHI1+ntt<=nrec, 0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa,
//    0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa}>

void call13(int nrec, int nsa, int ntt, Cplfloat ptrin[nrec][nsa], Cplfloat ptrout[nrec-ntt+1][ntt][nsa][ntt][nsa])
{
   int i, j1, j2, k1, k2;
   float R, I;

   R = 0.0;
   I = 0.0;

//  <ptrin[PHI1][PHI2].im-R-MAY-{0<=PHI1, PHI1+1<=nrec, 0<=PHI2,
//    PHI2+1<=nsa, ntt<=nrec, 1<=ntt}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{0<=PHI1, PHI1+1<=nrec, 0<=PHI2,
//    PHI2+1<=nsa, ntt<=nrec, 1<=ntt}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{0<=PHI1,
//    PHI1+ntt<=nrec, 0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa,
//    0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{0<=PHI1,
//    PHI1+ntt<=nrec, 0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa,
//    0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa}>


   for(i = 0; i <= nrec-ntt+1-1; i += 1)

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 1<=nsa}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{PHI1==i,
//    0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa, 0<=PHI4,
//    PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa, 0<=i, i+ntt<=nrec}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{PHI1==i,
//    0<=PHI2, PHI2+1<=ntt, 0<=PHI3, PHI3+1<=nsa, 0<=PHI4,
//    PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa, 0<=i, i+ntt<=nrec}>

      //    MOTIF     
      for(j1 = 0; j1 <= ntt-1; j1 += 1)

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 1<=nsa}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{PHI1==i,
//    PHI2==j1, 0<=PHI3, PHI3+1<=nsa, 0<=PHI4, PHI4+1<=ntt, 0<=PHI5,
//    PHI5+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{PHI1==i,
//    PHI2==j1, 0<=PHI3, PHI3+1<=nsa, 0<=PHI4, PHI4+1<=ntt, 0<=PHI5,
//    PHI5+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt}>

         for(j2 = 0; j2 <= nsa-1; j2 += 1)

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2,
//    j2+1<=nsa}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1+1<=i+ntt, 0<=PHI2,
//    PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2,
//    j2+1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, 0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa,
//    0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, 0<=PHI4, PHI4+1<=ntt, 0<=PHI5, PHI5+1<=nsa,
//    0<=i, i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa}>

            for(k1 = 0; k1 <= ntt-1; k1 += 1)

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2+1<=nsa, 0<=i,
//    i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1,
//    k1+1<=ntt}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2+1<=nsa, 0<=i,
//    i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1,
//    k1+1<=ntt}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, PHI4==k1, 0<=PHI5, PHI5+1<=nsa, 0<=i,
//    i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1,
//    k1+1<=ntt}>
//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, PHI4==k1, 0<=PHI5, PHI5+1<=nsa, 0<=i,
//    i+ntt<=nrec, 0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1,
//    k1+1<=ntt}>

               for(k2 = 0; k2 <= nsa-1; k2 += 1) {

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2<=j2+k2,
//    j2+k2+1<=PHI2+nsa, PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1,
//    j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2<=j2+k2,
//    j2+k2+1<=PHI2+nsa, PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1,
//    j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>

                  R = ptrin[i+j1][j2].re*ptrin[i+k1][k2].re+ptrin[i+j1][j2].im*ptrin[i+k1][k2].im;

//  <ptrin[PHI1][PHI2].im-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2<=j2+k2,
//    j2+k2+1<=PHI2+nsa, PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1,
//    j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>
//  <ptrin[PHI1][PHI2].re-R-MAY-{i<=PHI1, PHI1<=i+j1+k1,
//    i+j1+k1+1<=PHI1+ntt, PHI1+1<=i+ntt, 0<=PHI2, PHI2<=j2+k2,
//    j2+k2+1<=PHI2+nsa, PHI2+1<=nsa, 0<=i, i+ntt<=nrec, 0<=j1,
//    j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>

                  I = -ptrin[i+j1][j2].re*ptrin[i+k1][k2].im+ptrin[i+j1][j2].im*ptrin[i+k1][k2].re;

//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].re-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, PHI4==k1, PHI5==k2, 0<=i, i+ntt<=nrec,
//    0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>

                  ptrout[i][j1][j2][k1][k2].re = R;

//  <ptrout[PHI1][PHI2][PHI3][PHI4][PHI5].im-W-EXACT-{PHI1==i,
//    PHI2==j1, PHI3==j2, PHI4==k1, PHI5==k2, 0<=i, i+ntt<=nrec,
//    0<=j1, j1+1<=ntt, 0<=j2, j2+1<=nsa, 0<=k1, k1+1<=ntt, 0<=k2,
//    k2+1<=nsa}>

                  ptrout[i][j1][j2][k1][k2].im = I;
               }
}

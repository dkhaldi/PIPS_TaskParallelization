
Points-to for "init" 


// Points To IN:
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY


// Points To OUT:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

void init(mys *m)
{

// Points To: none

   int i;

// Points To:
// m -> *NULL* , MAY
// m -> _m_1[0] , MAY

   m->num = 5;

// Points To:
// m -> _m_1[0] , EXACT

   m->tab2 = malloc(5*sizeof(int));

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab1)[0] = 10;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab2)[0] = 20;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab1)[i] = 1;

// Points To:
// _m_1[0].tab2 -> *HEAP*_l_21[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab2)[i] = (m->tab1)[i];
   }
}

Proper effects with points-to for "init"

void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_21[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i m
//             <    is written>: _m_1[0].tab1[i]
      (m->tab1)[i] = 1;
//             <may be written>: *HEAP*_l_21[i]
//             <    is read   >: _m_1[0].tab1[i] _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
}

Cumulated effects with points-to for "init"

//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 m 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].num _m_1[0].tab2 
//                               _MALLOC_EFFECTS:_MALLOC_
void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_21[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_21[*] _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 i m
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: i m
      (m->tab1)[i] = 1;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
}

Points-to for "init2" 


// Points To IN:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> *NULL* , MAY
// n -> _n_1[0] , MAY


// Points To OUT:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

void init2(mys *n)
{

// Points To: none

   int i;

// Points To: none

   mys m;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> undefined , EXACT
// n -> *NULL* , MAY
// n -> _n_1[0] , MAY


   m = *n;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.num = 5;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.tab2 = malloc(5*sizeof(int));

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_39[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab1)[0] = 10;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_39[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab2)[0] = 20;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_39[0] , MAY
// n -> _n_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_39[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab1)[i] = 1;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_39[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab2)[i] = (m.tab1)[i];
   }
}

Proper effects with points-to for "init2"

void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_39[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i
//             <    is written>: m.tab1[i]
      (m.tab1)[i] = 1;
//             <may be written>: *HEAP*_l_39[i]
//             <    is read   >: i m.tab1[i] m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Cumulated effects with points-to for "init2"

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_39[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_39[*] m.tab1[*]
//             <    is read   >: i m.tab2
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: m.tab1[*]
//             <    is read   >: i
      (m.tab1)[i] = 1;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_39[*]
//             <    is read   >: i m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Points-to for "init3" 


// Points To IN: none


// Points To OUT:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

void init3(mys **p)
{

// Points To: none

   int i;

// Points To: none

   p = malloc(5*sizeof(mys *));

// Points To:
// *HEAP*_l_53[*] -> undefined , EXACT
// p -> *HEAP*_l_53[0] , MAY

   for(i = 0; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

      p[i] = malloc(sizeof(mys));

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// *HEAP*_l_56.tab2 -> undefined , MAY
// p -> *HEAP*_l_53[0] , MAY

      p[i]->tab2 = malloc(5*sizeof(int));
   }

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY


   p[0]->num = 11;

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

   (p[0]->tab1)[0] = 20;

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

   (p[0]->tab2)[0] = 30;

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY


   for(i = 1; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

      p[i]->num = 10;

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

      (p[i]->tab1)[0] = 21;

// Points To:
// *HEAP*_l_53[*] -> *HEAP*_l_56 , MAY
// *HEAP*_l_53[*] -> undefined , MAY
// *HEAP*_l_56.tab2 -> *HEAP*_l_57[0] , MAY
// p -> *HEAP*_l_53[0] , MAY

      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Proper effects with points-to for "init3"

void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_53[i]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_53[i]
//             <may be written>: *HEAP*_l_53[i][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_53[0]
//             <may be written>: *HEAP*_l_53[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_53[0]
//             <may be written>: *HEAP*_l_53[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_53[0] *HEAP*_l_53[0][0].tab2
//             <may be written>: *HEAP*_l_53[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_53[i]
//             <may be written>: *HEAP*_l_53[i][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_53[i]
//             <may be written>: *HEAP*_l_53[i][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_53[i] *HEAP*_l_53[i] 
//                               *HEAP*_l_53[i][0].tab1[0] 
//                               *HEAP*_l_53[i][0].tab2
//             <may be written>: *HEAP*_l_53[i][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Cumulated effects with points-to for "init3"

//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <may be read   >: *HEAP*_l_53[*]
//             <may be written>: *HEAP*_l_53 *HEAP*_l_53[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i _MALLOC_EFFECTS:_MALLOC_
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_53[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_53[*]
//             <may be written>: *HEAP*_l_53[*][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_53[0]
//             <may be written>: *HEAP*_l_53[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_53[0]
//             <may be written>: *HEAP*_l_53[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_53[0] *HEAP*_l_53[0][0].tab2
//             <may be written>: *HEAP*_l_53[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <may be read   >: *HEAP*_l_53 *HEAP*_l_53 
//                               *HEAP*_l_53[*]
//             <may be written>: *HEAP*_l_53 *HEAP*_l_53 
//                               *HEAP*_l_53[*][0].num
//             <    is read   >: i p
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_53[*]
//             <may be written>: *HEAP*_l_53[*][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_53[*]
//             <may be written>: *HEAP*_l_53[*][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_53[*] 
//                               *HEAP*_l_53[*][0].tab1[0] 
//                               *HEAP*_l_53[*][0].tab2
//             <may be written>: *HEAP*_l_53[*][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Points-to for "init4" 


// Points To IN:
// p[*] -> *NULL* , MAY
// p[*] -> _p_1[*][0] , MAY


// Points To OUT:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

void init4(mys *p[5])
{

// Points To: none

   int i;

// Points To: none

   for(i = 0; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

      p[i] = malloc(sizeof(mys));

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> *NULL* , MAY
// p[*] -> _p_1[*][0] , MAY

      p[i]->tab2 = malloc(5*sizeof(int));
   }

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY


   p[0]->num = 11;

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

   (p[0]->tab1)[0] = 20;

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

   (p[0]->tab2)[0] = 30;

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

   
   
   for(i = 1; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

      p[i]->num = 10;

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

      (p[i]->tab1)[0] = 21;

// Points To:
// *HEAP*_l_77.tab2 -> *HEAP*_l_78[0] , MAY
// *HEAP*_l_77.tab2 -> undefined , MAY
// _p_1[*][0].tab2 -> *HEAP*_l_78[0] , MAY
// p[*] -> *HEAP*_l_77 , MAY
// p[*] -> _p_1[*][0] , MAY

      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Proper effects with points-to for "init4"

void init4(mys *p[5])
{
   int i;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i] _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be written>: *HEAP*_l_77.tab2 _p_1[*][0].tab2
//             <    is read   >: i p[i] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be written>: *HEAP*_l_77.num _p_1[*][0].num
//             <    is read   >: p[0]

   p[0]->num = 11;
//             <may be written>: *HEAP*_l_77.tab1[0] 
//                               _p_1[*][0].tab1[0]
//             <    is read   >: p[0]
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_77.tab2 _p_1[*][0].tab2
//             <may be written>: *HEAP*_l_77.tab2[0] *HEAP*_l_78[0]
//             <    is read   >: p[0]
   (p[0]->tab2)[0] = 30;
//             <    is written>: i
   
   
   for(i = 1; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_77.num _p_1[*][0].num
//             <    is read   >: i p[i]
      p[i]->num = 10;
//             <may be written>: *HEAP*_l_77.tab1[0] 
//                               _p_1[*][0].tab1[0]
//             <    is read   >: i p[i]
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_77.tab1[0] *HEAP*_l_77.tab2 
//                               _p_1[*][0].tab1[0] _p_1[*][0].tab2
//             <may be written>: *HEAP*_l_77.tab2[0] *HEAP*_l_78[0]
//             <    is read   >: i p[i] p[i]
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Cumulated effects with points-to for "init4"

//             <may be read   >: _p_1[*][0].tab1[0] _p_1[*][0].tab2 
//                               p[*]
//             <may be written>: _p_1[*][0].num _p_1[*][0].tab1[0] 
//                               _p_1[*][0].tab2 p[*]
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init4(mys *p[5])
{
   int i;
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_77.tab2 _p_1[*][0].tab2 p[*]
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i _MALLOC_EFFECTS:_MALLOC_
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: p[*]
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_77.tab2 _p_1[*][0].tab2
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be written>: *HEAP*_l_77.num _p_1[*][0].num
//             <    is read   >: p[0]

   p[0]->num = 11;
//             <may be written>: *HEAP*_l_77.tab1[0] 
//                               _p_1[*][0].tab1[0]
//             <    is read   >: p[0]
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_77.tab2 _p_1[*][0].tab2
//             <may be written>: *HEAP*_l_77.tab2[0] *HEAP*_l_78[0]
//             <    is read   >: p[0]
   (p[0]->tab2)[0] = 30;
//             <may be read   >: *HEAP*_l_77.tab1[0] *HEAP*_l_77.tab2 
//                               _p_1[*][0].tab1[0] _p_1[*][0].tab2 
//                               p[*]
//             <may be written>: *HEAP*_l_77 *HEAP*_l_77.num 
//                               *HEAP*_l_77.tab1[0] *HEAP*_l_78[0] 
//                               _p_1[*][0].num _p_1[*][0].tab1[0]
//             <    is read   >: i
//             <    is written>: i
   
   
   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_77.num _p_1[*][0].num
//             <    is read   >: i
      p[i]->num = 10;
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_77.tab1[0] 
//                               _p_1[*][0].tab1[0]
//             <    is read   >: i
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_77.tab1[0] *HEAP*_l_77.tab2 
//                               _p_1[*][0].tab1[0] _p_1[*][0].tab2 
//                               p[*]
//             <may be written>: *HEAP*_l_77.tab2[0] *HEAP*_l_78[0]
//             <    is read   >: i
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   mys s1, s2, s3, s4[5];

// Points To:
// s1.tab2 -> undefined , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   mys *p = &s1, *q = &s2, **r = &q, *s[5];

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , EXACT
// s1.tab2 -> undefined , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   int i;

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , EXACT
// s1.tab2 -> undefined , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT


   for(i = 0; i <= 4; i += 1)

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> undefined , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

      s[i] = &s4[i];

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> undefined , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT


   init(p);

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> init:*HEAP*_l_21[0] , MAY
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   init2(q);

// Points To:
// p -> s1 , EXACT
// q -> s2 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> init:*HEAP*_l_21[0] , MAY
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   q = &s3;

// Points To:
// p -> s1 , EXACT
// q -> s3 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> init:*HEAP*_l_21[0] , MAY
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   init3(r);

// Points To:
// init3:*HEAP*_l_53[*] -> init3:*HEAP*_l_56 , MAY
// init3:*HEAP*_l_53[*] -> undefined , MAY
// p -> s1 , EXACT
// q -> s3 , EXACT
// r -> q , EXACT
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> init:*HEAP*_l_21[0] , MAY
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> undefined , EXACT

   init4(s);

// Points To:
// init3:*HEAP*_l_53[*] -> init3:*HEAP*_l_56 , MAY
// init3:*HEAP*_l_53[*] -> undefined , MAY
// init4:*HEAP*_l_77.tab2 -> init4:*HEAP*_l_78[0] , MAY
// init4:*HEAP*_l_77.tab2 -> undefined , MAY
// p -> s1 , EXACT
// q -> s3 , EXACT
// r -> q , EXACT
// s[*] -> init4:*HEAP*_l_77 , MAY
// s[*] -> undefined , MAY
// s[*] -> s4[*] , MAY
// s1.tab2 -> init:*HEAP*_l_21[0] , MAY
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT
// s4[*].tab2 -> init4:*HEAP*_l_78[0] , MAY
// s4[*].tab2 -> undefined , MAY


   return 1;
}

Proper effects with points-to for "main"

int main()
{
   mys s1, s2, s3, s4[5];
//             <    is written>: p q r
   mys *p = &s1, *q = &s2, **r = &q, *s[5];
   int i;
//             <    is written>: i

   for(i = 0; i <= 4; i += 1)
//             <    is read   >: i
//             <    is written>: s[i]
      s[i] = &s4[i];
//             <may be read   >: s1.tab1[*]
//             <may be written>: s1.tab1[*]
//             <    is read   >: p s1.tab2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: s1.num s1.tab2 
//                               _MALLOC_EFFECTS:_MALLOC_

   init(p);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   init2(q);
//             <    is written>: q
   q = &s3;
//             <    is read   >: r _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   init3(r);
//             <may be read   >: s[*] s4[0].tab1[0] s4[0].tab2
//             <may be written>: s[*] s4[0].num s4[0].tab1[0] 
//                               s4[0].tab2
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   init4(s);

   return 1;
}


Points-to for "init" 


// Points To IN:
// m -> *NULL_POINTER* , MAY
// m -> _m_1[0] , MAY


// Points To OUT:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

void init(mys *m)
{

// Points To: none

   int i;

// Points To:
// m -> *NULL_POINTER* , MAY
// m -> _m_1[0] , MAY

   m->num = 5;

// Points To:
// m -> _m_1[0] , EXACT

   m->tab2 = malloc(5*sizeof(int));

// Points To:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab1)[0] = 10;

// Points To:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

   (m->tab2)[0] = 20;

// Points To:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab1)[i] = 1;

// Points To:
// _m_1[*].tab2 -> *HEAP*_l_23[0] , MAY
// _m_1[0].tab2 -> *HEAP*_l_23[0] , MAY
// m -> _m_1[0] , EXACT

      (m->tab2)[i] = (m->tab1)[i];
   }
}

Proper effects with points-to for "init"

void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_23[0] *HEAP*_l_23[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i m
//             <    is written>: _m_1[0].tab1[i]
      (m->tab1)[i] = 1;
//             <may be written>: *HEAP*_l_23[i] *HEAP*_l_23[i]
//             <    is read   >: _m_1[0].tab1[i] _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
}

Cumulated effects with points-to for "init"

//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 m 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].num _m_1[0].tab2 
//                               _MALLOC_EFFECTS:_MALLOC_
void init(mys *m)
{
   int i;
//             <    is read   >: m
//             <    is written>: _m_1[0].num
   m->num = 5;
//             <    is read   >: m _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _m_1[0].tab2 _MALLOC_EFFECTS:_MALLOC_
   m->tab2 = malloc(5*sizeof(int));
//             <    is read   >: m
//             <    is written>: _m_1[0].tab1[0]
   (m->tab1)[0] = 10;
//             <may be written>: *HEAP*_l_23[0]
//             <    is read   >: _m_1[0].tab2 m
   (m->tab2)[0] = 20;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_23[*] _m_1[0].tab1[*]
//             <    is read   >: _m_1[0].tab2 i m
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: _m_1[0].tab1[*]
//             <    is read   >: i m
      (m->tab1)[i] = 1;
//             <may be read   >: _m_1[0].tab1[*]
//             <may be written>: *HEAP*_l_23[*]
//             <    is read   >: _m_1[0].tab2 i m
      (m->tab2)[i] = (m->tab1)[i];
   }
}

Points-to for "init2" 


// Points To IN:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> *NULL_POINTER* , MAY
// n -> _n_1[0] , MAY


// Points To OUT:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

void init2(mys *n)
{

// Points To: none

   int i;

// Points To: none

   mys m;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> undefined , EXACT
// n -> *NULL_POINTER* , MAY
// n -> _n_1[0] , MAY


   m = *n;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL_POINTER* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.num = 5;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL_POINTER* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.tab2 = malloc(5*sizeof(int));

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_41[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab1)[0] = 10;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_41[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab2)[0] = 20;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_41[0] , MAY
// n -> _n_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_41[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab1)[i] = 1;

// Points To:
// _n_1[0].tab2 -> *NULL_POINTER* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_41[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab2)[i] = (m.tab1)[i];
   }
}

Proper effects with points-to for "init2"

void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_41[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i
//             <    is written>: m.tab1[i]
      (m.tab1)[i] = 1;
//             <may be written>: *HEAP*_l_41[i]
//             <    is read   >: i m.tab1[i] m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Cumulated effects with points-to for "init2"

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_41[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_41[*] m.tab1[*]
//             <    is read   >: i m.tab2
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: m.tab1[*]
//             <    is read   >: i
      (m.tab1)[i] = 1;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_41[*]
//             <    is read   >: i m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Points-to for "init3" 


// Points To IN: none


// Points To OUT:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

void init3(mys **p)
{

// Points To: none

   int i;

// Points To: none

   p = malloc(5*sizeof(mys *));

// Points To:
// p -> *HEAP*_l_55[0] , MAY

   for(i = 0; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

      p[i] = malloc(sizeof(mys));

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

      p[i]->tab2 = malloc(5*sizeof(int));
   }

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY


   p[0]->num = 11;

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

   (p[0]->tab1)[0] = 20;

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

   (p[0]->tab2)[0] = 30;

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY


   for(i = 1; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

      p[i]->num = 10;

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

      (p[i]->tab1)[0] = 21;

// Points To:
// *HEAP*_l_55[*] -> *HEAP*_l_58 , MAY
// *HEAP*_l_58.tab2 -> *HEAP*_l_59[0] , MAY
// p -> *HEAP*_l_55[0] , MAY

      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Proper effects with points-to for "init3"

void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_55[i]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_55[i]
//             <may be written>: *HEAP*_l_55[i][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_55[0]
//             <may be written>: *HEAP*_l_55[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_55[0]
//             <may be written>: *HEAP*_l_55[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_55[0] *HEAP*_l_55[0][0].tab2
//             <may be written>: *HEAP*_l_55[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_55[i]
//             <may be written>: *HEAP*_l_55[i][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_55[i]
//             <may be written>: *HEAP*_l_55[i][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_55[i] *HEAP*_l_55[i] 
//                               *HEAP*_l_55[i][0].tab1[0] 
//                               *HEAP*_l_55[i][0].tab2
//             <may be written>: *HEAP*_l_55[i][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Cumulated effects with points-to for "init3"

//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <may be read   >: *HEAP*_l_55[*]
//             <may be written>: *HEAP*_l_55 *HEAP*_l_55[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i _MALLOC_EFFECTS:_MALLOC_
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_55[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_55[*]
//             <may be written>: *HEAP*_l_55[*][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_55[0]
//             <may be written>: *HEAP*_l_55[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_55[0]
//             <may be written>: *HEAP*_l_55[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_55[0] *HEAP*_l_55[0][0].tab2
//             <may be written>: *HEAP*_l_55[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <may be read   >: *HEAP*_l_55 *HEAP*_l_55 
//                               *HEAP*_l_55[*]
//             <may be written>: *HEAP*_l_55 *HEAP*_l_55 
//                               *HEAP*_l_55[*][0].num
//             <    is read   >: i p
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_55[*]
//             <may be written>: *HEAP*_l_55[*][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_55[*]
//             <may be written>: *HEAP*_l_55[*][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_55[*] 
//                               *HEAP*_l_55[*][0].tab1[0] 
//                               *HEAP*_l_55[*][0].tab2
//             <may be written>: *HEAP*_l_55[*][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Points-to for "init4" 


// Points To IN: none


// Points To OUT:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

void init4(mys *p[5])
{

// Points To: none

   int i;

// Points To: none

   for(i = 0; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

      p[i] = malloc(sizeof(mys));

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

      p[i]->tab2 = malloc(5*sizeof(int));
   }

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY


   p[0]->num = 11;

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

   (p[0]->tab1)[0] = 20;

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

   (p[0]->tab2)[0] = 30;

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

   
   
   for(i = 1; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

      p[i]->num = 10;

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

      (p[i]->tab1)[0] = 21;

// Points To:
// *HEAP*_l_79.tab2 -> *HEAP*_l_80[0] , MAY
// p[*] -> *HEAP*_l_79 , MAY

      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Proper effects with points-to for "init4"

void init4(mys *p[5])
{
   int i;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p[i] _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be written>: *HEAP*_l_79.tab2
//             <    is read   >: i p[i] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be written>: *HEAP*_l_79.num
//             <    is read   >: p[0]

   p[0]->num = 11;
//             <may be written>: *HEAP*_l_79.tab1[0]
//             <    is read   >: p[0]
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_79.tab2
//             <may be written>: *HEAP*_l_79.tab2[0]
//             <    is read   >: p[0]
   (p[0]->tab2)[0] = 30;
//             <    is written>: i
   
   
   for(i = 1; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_79.num
//             <    is read   >: i p[i]
      p[i]->num = 10;
//             <may be written>: *HEAP*_l_79.tab1[0]
//             <    is read   >: i p[i]
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_79.tab1[0] *HEAP*_l_79.tab2
//             <may be written>: *HEAP*_l_79.tab2[0]
//             <    is read   >: i p[i] p[i]
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Cumulated effects with points-to for "init4"

//             <may be read   >: p[*]
//             <may be written>: p[*]
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init4(mys *p[5])
{
   int i;
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_79.tab2 p[*]
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i _MALLOC_EFFECTS:_MALLOC_
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: p[*]
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_79.tab2
//             <    is read   >: i _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be written>: *HEAP*_l_79.num
//             <    is read   >: p[0]

   p[0]->num = 11;
//             <may be written>: *HEAP*_l_79.tab1[0]
//             <    is read   >: p[0]
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_79.tab2
//             <may be written>: *HEAP*_l_79.tab2[0]
//             <    is read   >: p[0]
   (p[0]->tab2)[0] = 30;
//             <may be read   >: *HEAP*_l_79.tab1[0] *HEAP*_l_79.tab2 
//                               p[*]
//             <may be written>: *HEAP*_l_79 *HEAP*_l_79.num 
//                               *HEAP*_l_79.tab1[0]
//             <    is read   >: i
//             <    is written>: i
   
   
   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_79.num
//             <    is read   >: i
      p[i]->num = 10;
//             <may be read   >: p[*]
//             <may be written>: *HEAP*_l_79.tab1[0]
//             <    is read   >: i
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_79.tab1[0] *HEAP*_l_79.tab2 
//                               p[*]
//             <may be written>: *HEAP*_l_79.tab2[0]
//             <    is read   >: i
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   mys *p, *q, **r, *s[5];

// Points To:
// p -> undefined , EXACT
// q -> undefined , EXACT
// r -> undefined , EXACT
// s[*] -> undefined , EXACT


   init(p);

// Points To: unreachable

   init2(q);

// Points To: unreachable

   init3(r);

// Points To: unreachable

   init4(s);

// Points To: unreachable


   return 1;
}

Proper effects with points-to for "main"


Warnings and errors

CUMULATED_EFFECTS_WITH_POINTS_TO[init] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.
INTERPROCEDURAL_POINTS_TO_ANALYSIS[init2] (points_to_set_block_projection) Memory leak for bucket "init2:*HEAP*_l_41".
INTERPROCEDURAL_POINTS_TO_ANALYSIS[init3] (points_to_function_projection) Memory cell *HEAP*_l_55[0] leaked.
INTERPROCEDURAL_POINTS_TO_ANALYSIS[init4] (points_to_function_projection) Memory cell *HEAP*_l_79 leaked.
PROPER_EFFECTS_WITH_POINTS_TO[main] (backward_translation_of_points_to_formal_context_effect) user error
PROPER_EFFECTS_WITH_POINTS_TO[main] (backward_translation_of_points_to_formal_context_effect) Effect "init:_m_1[0].num" of callee "init" cannot be translated. Check that the caller "main" provides initialized parameters.
PROPER_EFFECTS_WITH_POINTS_TO[main] (set_debug_stack_pointer) debug level stack is set to 2
unknown[unknown] (safe_do_something) Request aborted under pipsmake: build resource PRINTED_FILE for module main.
unknown[unknown] (display_a_resource) user error
unknown[unknown] (display_a_resource) Cannot build view file PRINTED_FILE

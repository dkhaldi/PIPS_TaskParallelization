
Points-to for "call01"


// Points To IN:
// pi -> *NULL* , MAY
// pi -> _pi_1[0] , MAY
// q -> *NULL* , MAY
// q -> _q_2[0] , MAY


// Points To OUT:
// pi -> _pi_1[1] , EXACT
// q -> _q_2[0] , EXACT

void call01(int *pi, tf_t *q)
{

// Points To:
// pi -> *NULL* , MAY
// pi -> _pi_1[0] , MAY

   *pi = 1;

// Points To:
// pi -> _pi_1[0] , EXACT

   /* pi is passed by value: pi++ does not generate a summary effect
        for call01 */
   pi++;

// Points To:
// pi -> _pi_1[1] , EXACT
// q -> *NULL* , MAY
// q -> _q_2[0] , MAY

   q->one = 1;

// Points To:
// pi -> _pi_1[1] , EXACT
// q -> _q_2[0] , EXACT

   (q->two)[4] = 2;

// Points To:
// pi -> _pi_1[1] , EXACT
// q -> _q_2[0] , EXACT

   return;
}

Proper effects with points-to for "call01"

void call01(int *pi, tf_t *q)
{
//             <    is read   >: pi
//             <    is written>: _pi_1[0]
   *pi = 1;
//             <    is read   >: pi
//             <    is written>: pi
   /* pi is passed by value: pi++ does not generate a summary effect
        for call01 */
   pi++;
//             <    is read   >: q
//             <    is written>: _q_2[0].one
   q->one = 1;
//             <    is read   >: q
//             <    is written>: _q_2[0].two[4]
   (q->two)[4] = 2;
   return;
}

Cumulated effects with points-to for "call01"

//             <    is read   >: pi q
//             <    is written>: _pi_1[0] _q_2[0].one _q_2[0].two[4]
void call01(int *pi, tf_t *q)
{
//             <    is read   >: pi
//             <    is written>: _pi_1[0]
   *pi = 1;
//             <    is read   >: pi
//             <    is written>: pi
   /* pi is passed by value: pi++ does not generate a summary effect
        for call01 */
   pi++;
//             <    is read   >: q
//             <    is written>: _q_2[0].one
   q->one = 1;
//             <    is read   >: q
//             <    is written>: _q_2[0].two[4]
   (q->two)[4] = 2;
   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i[10];

// Points To: none

   tf_t s;

// Points To: none


   call01(&i[0], &s);

// Points To: none

   return i[1];
}

Proper effects with points-to for "main"

int main()
{
   int i[10];
   tf_t s;
//             <    is written>: i[0] s.one s.two[4]

   call01(&i[0], &s);
//             <    is read   >: i[1]
   return i[1];
}

Warnings and errors:



Points-to for "init3" 


// Points To IN: none


// Points To OUT:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

void init3(mys **p)
{

// Points To: none

   int i;

// Points To: none

   p = malloc(5*sizeof(mys *));

// Points To:
// *HEAP*_l_26[*] -> undefined , EXACT
// p -> *HEAP*_l_26[0] , MAY

   for(i = 0; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

      p[i] = malloc(sizeof(mys));

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// *HEAP*_l_29.tab2 -> undefined , MAY
// p -> *HEAP*_l_26[0] , MAY

      p[i]->tab2 = malloc(5*sizeof(int));
   }

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY


   p[0]->num = 11;

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

   (p[0]->tab1)[0] = 20;

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

   (p[0]->tab2)[0] = 30;

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY


   for(i = 1; i <= 4; i += 1) {

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

      p[i]->num = 10;

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

      (p[i]->tab1)[0] = 21;

// Points To:
// *HEAP*_l_26[*] -> *HEAP*_l_29 , MAY
// *HEAP*_l_26[*] -> undefined , MAY
// *HEAP*_l_29.tab2 -> *HEAP*_l_30[0] , MAY
// p -> *HEAP*_l_26[0] , MAY

      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Proper effects with points-to for "init3"

void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_26[i]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_26[i]
//             <may be written>: *HEAP*_l_26[i][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_26[0]
//             <may be written>: *HEAP*_l_26[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_26[0]
//             <may be written>: *HEAP*_l_26[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_26[0] *HEAP*_l_26[0][0].tab2
//             <may be written>: *HEAP*_l_26[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_26[i]
//             <may be written>: *HEAP*_l_26[i][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_26[i]
//             <may be written>: *HEAP*_l_26[i][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_26[i] *HEAP*_l_26[i] 
//                               *HEAP*_l_26[i][0].tab1[0] 
//                               *HEAP*_l_26[i][0].tab2
//             <may be written>: *HEAP*_l_26[i][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Cumulated effects with points-to for "init3"

//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init3(mys **p)
{
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   p = malloc(5*sizeof(mys *));
//             <may be read   >: *HEAP*_l_26[*]
//             <may be written>: *HEAP*_l_26 *HEAP*_l_26[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: i _MALLOC_EFFECTS:_MALLOC_
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: *HEAP*_l_26[*]
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i] = malloc(sizeof(mys));
//             <may be read   >: *HEAP*_l_26[*]
//             <may be written>: *HEAP*_l_26[*][0].tab2
//             <    is read   >: i p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      p[i]->tab2 = malloc(5*sizeof(int));
   }
//             <may be read   >: *HEAP*_l_26[0]
//             <may be written>: *HEAP*_l_26[0][0].num
//             <    is read   >: p

   p[0]->num = 11;
//             <may be read   >: *HEAP*_l_26[0]
//             <may be written>: *HEAP*_l_26[0][0].tab1[0]
//             <    is read   >: p
   (p[0]->tab1)[0] = 20;
//             <may be read   >: *HEAP*_l_26[0] *HEAP*_l_26[0][0].tab2
//             <may be written>: *HEAP*_l_26[0][0].tab2[0]
//             <    is read   >: p
   (p[0]->tab2)[0] = 30;
//             <may be read   >: *HEAP*_l_26 *HEAP*_l_26 
//                               *HEAP*_l_26[*]
//             <may be written>: *HEAP*_l_26 *HEAP*_l_26 
//                               *HEAP*_l_26[*][0].num
//             <    is read   >: i p
//             <    is written>: i

   for(i = 1; i <= 4; i += 1) {
//             <may be read   >: *HEAP*_l_26[*]
//             <may be written>: *HEAP*_l_26[*][0].num
//             <    is read   >: i p
      p[i]->num = 10;
//             <may be read   >: *HEAP*_l_26[*]
//             <may be written>: *HEAP*_l_26[*][0].tab1[0]
//             <    is read   >: i p
      (p[i]->tab1)[0] = 21;
//             <may be read   >: *HEAP*_l_26[*] 
//                               *HEAP*_l_26[*][0].tab1[0] 
//                               *HEAP*_l_26[*][0].tab2
//             <may be written>: *HEAP*_l_26[*][0].tab2[0]
//             <    is read   >: i p
      (p[i]->tab2)[0] = (p[i]->tab1)[0];
   }
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   mys s2, s3;

// Points To:
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT

   mys *q = &s2, **r = &q;

// Points To:
// q -> s2 , EXACT
// r -> q , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT


   q = &s3;

// Points To:
// q -> s3 , EXACT
// r -> q , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT

   init3(r);

// Points To:
// init3:*HEAP*_l_26[*] -> init3:*HEAP*_l_29 , MAY
// init3:*HEAP*_l_26[*] -> undefined , MAY
// q -> s3 , EXACT
// r -> q , EXACT
// s2.tab2 -> undefined , EXACT
// s3.tab2 -> undefined , EXACT


   return 1;
}

Proper effects with points-to for "main"

int main()
{
   mys s2, s3;
//             <    is written>: q r
   mys *q = &s2, **r = &q;
//             <    is written>: q

   q = &s3;
//             <    is read   >: r _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   init3(r);

   return 1;
}

Warnings and errors (two memory leaks should be detected)

PROPER_EFFECTS_WITH_POINTS_TO[init3] (abstract_locations_max) property "ALIASING_ACROSS_TYPES" is assumed true for abstract locations.

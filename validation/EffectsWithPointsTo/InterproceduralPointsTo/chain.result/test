
POINTS TO for chain


// Points To IN:
// c1 -> _c1_1 , EXACT
// c2 -> _c2_2 , EXACT


// Points To OUT:
// _c1_1.next -> _c2_2 , EXACT

void chain(ilp_t c1, ilp_t c2)
{

// Points To:
// c1 -> _c1_1 , EXACT
// c2 -> _c2_2 , EXACT

   c1->next = c2;
}

// Points To IN: none


// Points To OUT:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT

int main()
{

// Points To: none

   ilp_t x1 = (ilp_t) malloc(sizeof(il_t));

// Points To:
// x1 -> *HEAP*_l_12 , EXACT

   ilp_t x2 = (ilp_t) malloc(sizeof(il_t));

// Points To:
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   x1->next = (void *) 0;

// Points To:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   x2->next = (void *) 0;

// Points To:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT


   chain(x1, x2);

// Points To:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   return 0;
}

PROPER  EFFECTS WITH POINTS TO

void chain(ilp_t c1, ilp_t c2)
{
//             <    is read   >: c1 c2
//             <    is written>: _c1_1.next
   c1->next = c2;
}
int main()
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: x1 _MALLOC_EFFECTS:_MALLOC_
   ilp_t x1 = (ilp_t) malloc(sizeof(il_t));
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: x2 _MALLOC_EFFECTS:_MALLOC_
   ilp_t x2 = (ilp_t) malloc(sizeof(il_t));
//             <    is read   >: x1
//             <    is written>: *HEAP*_l_12.next
   x1->next = (void *) 0;
//             <    is read   >: x2
//             <    is written>: *HEAP*_l_13.next
   x2->next = (void *) 0;
//             <    is read   >: x1 x2
//             <    is written>: chain:_c1_1.next

   chain(x1, x2);
   return 0;
}

CUMULATED  EFFECTS WITH POINTS TO

//             <    is read   >: c1 c2
//             <    is written>: _c1_1.next
void chain(ilp_t c1, ilp_t c2)
{
//             <    is read   >: c1 c2
//             <    is written>: _c1_1.next
   c1->next = c2;
}
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_ 
//                               chain:_c1_1.next
int main()
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: x1 _MALLOC_EFFECTS:_MALLOC_
   ilp_t x1 = (ilp_t) malloc(sizeof(il_t));
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: x2 _MALLOC_EFFECTS:_MALLOC_
   ilp_t x2 = (ilp_t) malloc(sizeof(il_t));
//             <    is read   >: x1
//             <    is written>: *HEAP*_l_12.next
   x1->next = (void *) 0;
//             <    is read   >: x2
//             <    is written>: *HEAP*_l_13.next
   x2->next = (void *) 0;
//             <    is read   >: x1 x2
//             <    is written>: chain:_c1_1.next

   chain(x1, x2);
   return 0;
}

POINTS TO for chain


// Points To IN:
// c1 -> _c1_1 , EXACT
// c2 -> _c2_2 , EXACT


// Points To OUT:
// _c1_1.next -> _c2_2 , EXACT

void chain(ilp_t c1, ilp_t c2)
{

// Points To:
// c1 -> _c1_1 , EXACT
// c2 -> _c2_2 , EXACT

   c1->next = c2;
}

// Points To IN: none


// Points To OUT:
// *HEAP*_l_12.next -> *HEAP*_l_13 , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT

int main()
{

// Points To: none

   ilp_t x1 = (ilp_t) malloc(sizeof(il_t));

// Points To:
// x1 -> *HEAP*_l_12 , EXACT

   ilp_t x2 = (ilp_t) malloc(sizeof(il_t));

// Points To:
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   x1->next = (void *) 0;

// Points To:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   x2->next = (void *) 0;

// Points To:
// *HEAP*_l_12.next -> *NULL_POINTER* , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT


   chain(x1, x2);

// Points To:
// *HEAP*_l_12.next -> *HEAP*_l_13 , EXACT
// *HEAP*_l_13.next -> *NULL_POINTER* , EXACT
// x1 -> *HEAP*_l_12 , EXACT
// x2 -> *HEAP*_l_13 , EXACT

   return 0;
}
INIT_POINTS_TO_ANALYSIS[chain] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[main] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "main:*HEAP*_l_13".
INTRAPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "main:*HEAP*_l_12".
INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "main:*HEAP*_l_12".


POINTS TO for pointer01


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_7 , EXACT

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_7 , EXACT

   *p = v;

// Points To:
// p -> *HEAP*_l_7 , EXACT

   return p;
}

// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   pointer p1, p2, p3;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   p2 = alloc_pointer(17);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   p3 = alloc_pointer(19);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   
   
   pointer_free(p1);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   pointer_free(p2);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   pointer_free(p3);

// Points To:
// p1 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p2 -> *ANY_MODULE*:*ANYWHERE* , EXACT
// p3 -> *ANY_MODULE*:*ANYWHERE* , EXACT

   return;
}

// Points To IN: none


// Points To OUT: none

//#include<stdlib.h>

// Points To: none

typedef int *pointer;

// should catch that returned value is malloc'ed there

// Points To: none

pointer alloc_pointer(int v);


// Points To: none

void pointer_free(pointer p);

// no pointer assignment, no change in points-to

// Points To: none

void pointer_set(pointer p, int v);

// no pointer assignment, no change in points-to

// Points To: none

void pointer_add(pointer q1, const pointer q2, const pointer q3);

// no pointer assignment, no change in points-to

// Points To: none

int pointer_get(const pointer p);


// Points To: none

int main(void);

// Points To IN:
// q1 -> _q1_1 , EXACT
// q2 -> _q2_2 , EXACT
// q3 -> _q3_3 , EXACT


// Points To OUT: none

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> _q1_1 , EXACT
// q2 -> _q2_2 , EXACT
// q3 -> _q3_3 , EXACT

   *q1 = *q2+*q3;
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

void pointer_free(pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   free(p);
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

int pointer_get(const pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   return *p;
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

void pointer_set(pointer p, int v)
{

// Points To:
// p -> _p_1 , EXACT

   *p = v;
}

PROPER  EFFECTS WITH POINTS TO

pointer alloc_pointer(int v)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   pointer p = malloc(sizeof(int));
//             <    is read   >: p v
//             <    is written>: *HEAP*_l_7
   *p = v;
//             <    is read   >: p
   return p;
}
int main(void)
{
   pointer p1, p2, p3;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p2 _MALLOC_EFFECTS:_MALLOC_
   p2 = alloc_pointer(17);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p3 _MALLOC_EFFECTS:_MALLOC_
   p3 = alloc_pointer(19);
//             <    is read   >: p1 p2 p3 pointer_add:_q2_2 
//                               pointer_add:_q3_3
//             <    is written>: pointer_add:_q1_1
   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);
//             <    is read   >: p3
//             <    is written>: pointer_set:_p_1
   
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);
//             <    is read   >: p1 p2 p3 pointer_add:_q2_2 
//                               pointer_add:_q3_3
//             <    is written>: pointer_add:_q1_1
   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   
   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <    is read   >: p3 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p3);
   return;
}
//#include<stdlib.h>
typedef int *pointer;

// should catch that returned value is malloc'ed there
pointer alloc_pointer(int v);

void pointer_free(pointer p);

// no pointer assignment, no change in points-to
void pointer_set(pointer p, int v);

// no pointer assignment, no change in points-to
void pointer_add(pointer q1, const pointer q2, const pointer q3);

// no pointer assignment, no change in points-to
int pointer_get(const pointer p);

int main(void);
void pointer_add(pointer q1, const pointer q2, const pointer q3)
{
//             <    is read   >: _q2_2 _q3_3 q1 q2 q3
//             <    is written>: _q1_1
   *q1 = *q2+*q3;
}
void pointer_free(pointer p)
{
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}
int pointer_get(const pointer p)
{
//             <    is read   >: _p_1 p
   return *p;
}
void pointer_set(pointer p, int v)
{
//             <    is read   >: p v
//             <    is written>: _p_1
   *p = v;
}

CUMULATED  EFFECTS WITH POINTS TO

//             <    is read   >: v _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
pointer alloc_pointer(int v)
{
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
   pointer p = malloc(sizeof(int));
//             <    is read   >: p v
//             <    is written>: *HEAP*_l_7
   *p = v;
//             <    is read   >: p
   return p;
}
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_ 
//                               pointer_add:_q2_2 pointer_add:_q3_3
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_ 
//                               pointer_add:_q1_1 pointer_set:_p_1
int main(void)
{
   pointer p1, p2, p3;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p2 _MALLOC_EFFECTS:_MALLOC_
   p2 = alloc_pointer(17);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p3 _MALLOC_EFFECTS:_MALLOC_
   p3 = alloc_pointer(19);
//             <    is read   >: p1 p2 p3 pointer_add:_q2_2 
//                               pointer_add:_q3_3
//             <    is written>: pointer_add:_q1_1
   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);
//             <    is read   >: p3
//             <    is written>: pointer_set:_p_1
   
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);
//             <    is read   >: p1 p2 p3 pointer_add:_q2_2 
//                               pointer_add:_q3_3
//             <    is written>: pointer_add:_q1_1
   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   
   pointer_free(p1);
//             <    is read   >: p2 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p2);
//             <    is read   >: p3 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   pointer_free(p3);
   return;
}
//#include<stdlib.h>
typedef int *pointer;

// should catch that returned value is malloc'ed there
pointer alloc_pointer(int v);

void pointer_free(pointer p);

// no pointer assignment, no change in points-to
void pointer_set(pointer p, int v);

// no pointer assignment, no change in points-to
void pointer_add(pointer q1, const pointer q2, const pointer q3);

// no pointer assignment, no change in points-to
int pointer_get(const pointer p);

int main(void);
//             <    is read   >: _q2_2 _q3_3 q1 q2 q3
//             <    is written>: _q1_1
void pointer_add(pointer q1, const pointer q2, const pointer q3)
{
//             <    is read   >: _q2_2 _q3_3 q1 q2 q3
//             <    is written>: _q1_1
   *q1 = *q2+*q3;
}
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void pointer_free(pointer p)
{
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p);
}
//             <    is read   >: _p_1 p
int pointer_get(const pointer p)
{
//             <    is read   >: _p_1 p
   return *p;
}
//             <    is read   >: p v
//             <    is written>: _p_1
void pointer_set(pointer p, int v)
{
//             <    is read   >: p v
//             <    is written>: _p_1
   *p = v;
}

POINTS TO for pointer01


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_7 , EXACT

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_7 , EXACT

   *p = v;

// Points To:
// p -> *HEAP*_l_7 , EXACT

   return p;
}

// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   pointer p1, p2, p3;

// Points To:
// p1 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> *ANY_MODULE*:*NOWHERE* , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   p2 = alloc_pointer(17);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> *ANY_MODULE*:*NOWHERE* , EXACT

   p3 = alloc_pointer(19);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p1, p2, p3);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   
   
   // no pointer assigned! can keep all points-to
   pointer_set(p3, 23);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   
   // no pointer assigned! can keep all points-to
   pointer_add(p3, p2, p1);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   
   
   pointer_free(p1);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   pointer_free(p2);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   pointer_free(p3);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p2 -> alloc_pointer:*HEAP*_l_7 , EXACT
// p3 -> alloc_pointer:*HEAP*_l_7 , EXACT

   return;
}

// Points To IN: none


// Points To OUT: none

//#include<stdlib.h>

// Points To: none

typedef int *pointer;

// should catch that returned value is malloc'ed there

// Points To: none

pointer alloc_pointer(int v);


// Points To: none

void pointer_free(pointer p);

// no pointer assignment, no change in points-to

// Points To: none

void pointer_set(pointer p, int v);

// no pointer assignment, no change in points-to

// Points To: none

void pointer_add(pointer q1, const pointer q2, const pointer q3);

// no pointer assignment, no change in points-to

// Points To: none

int pointer_get(const pointer p);


// Points To: none

int main(void);

// Points To IN:
// q1 -> _q1_1 , EXACT
// q2 -> _q2_2 , EXACT
// q3 -> _q3_3 , EXACT


// Points To OUT: none

void pointer_add(pointer q1, const pointer q2, const pointer q3)
{

// Points To:
// q1 -> _q1_1 , EXACT
// q2 -> _q2_2 , EXACT
// q3 -> _q3_3 , EXACT

   *q1 = *q2+*q3;
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

void pointer_free(pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   free(p);
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

int pointer_get(const pointer p)
{

// Points To:
// p -> _p_1 , EXACT

   return *p;
}

// Points To IN:
// p -> _p_1 , EXACT


// Points To OUT: none

void pointer_set(pointer p, int v)
{

// Points To:
// p -> _p_1 , EXACT

   *p = v;
}
INIT_POINTS_TO_ANALYSIS[alloc_pointer] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[main] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[pointer_free] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[pointer_set] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[pointer_add] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[pointer01!] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INIT_POINTS_TO_ANALYSIS[pointer_get] (init_points_to_analysis) Property ALIASING_ACROSS_TYPES is ignored
INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_interprocedural) Function has not a side effect on pointers variablesINTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "alloc_pointer:*HEAP*_l_7".
INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "alloc_pointer:*HEAP*_l_7".
INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (points_to_block_projection) Memory leak for bucket "alloc_pointer:*HEAP*_l_7".

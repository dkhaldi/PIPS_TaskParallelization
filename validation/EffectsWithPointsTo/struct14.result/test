
Points-to for "init2" 


// Points To IN:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> *NULL* , MAY
// n -> _n_1[0] , MAY


// Points To OUT:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

void init2(mys *n)
{

// Points To: none

   int i;

// Points To: none

   mys m;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> undefined , EXACT
// n -> *NULL* , MAY
// n -> _n_1[0] , MAY


   m = *n;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.num = 5;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *NULL* , MAY
// m.tab2 -> _n_1_3__1[0][0] , MAY
// n -> _n_1[0] , EXACT

   m.tab2 = malloc(5*sizeof(int));

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_23[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab1)[0] = 10;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_23[0] , MAY
// n -> _n_1[0] , EXACT

   (m.tab2)[0] = 20;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_23[0] , MAY
// n -> _n_1[0] , EXACT

   for(i = 0; i <= 4; i += 1) {

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_23[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab1)[i] = 1;

// Points To:
// _n_1[0].tab2 -> *NULL* , MAY
// _n_1[0].tab2 -> _n_1_3__1[0][0] , MAY
// m.tab2 -> *HEAP*_l_23[0] , MAY
// n -> _n_1[0] , EXACT

      (m.tab2)[i] = (m.tab1)[i];
   }
}

Proper effects with points-to for "init2"

void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_23[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <    is read   >: i
//             <    is written>: m.tab1[i]
      (m.tab1)[i] = 1;
//             <may be written>: *HEAP*_l_23[i]
//             <    is read   >: i m.tab1[i] m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Cumulated effects with points-to for "init2"

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
void init2(mys *n)
{
   int i;
   mys m;
//             <may be read   >: _n_1[0].tab1[*]
//             <may be written>: m.tab1[*]
//             <    is read   >: _n_1[0].num _n_1[0].tab2 n
//             <    is written>: m.num m.tab2

   m = *n;
//             <    is written>: m.num
   m.num = 5;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m.tab2 _MALLOC_EFFECTS:_MALLOC_
   m.tab2 = malloc(5*sizeof(int));
//             <    is written>: m.tab1[0]
   (m.tab1)[0] = 10;
//             <may be written>: *HEAP*_l_23[0]
//             <    is read   >: m.tab2
   (m.tab2)[0] = 20;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_23[*] m.tab1[*]
//             <    is read   >: i m.tab2
//             <    is written>: i
   for(i = 0; i <= 4; i += 1) {
//             <may be written>: m.tab1[*]
//             <    is read   >: i
      (m.tab1)[i] = 1;
//             <may be read   >: m.tab1[*]
//             <may be written>: *HEAP*_l_23[*]
//             <    is read   >: i m.tab2
      (m.tab2)[i] = (m.tab1)[i];
   }
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   mys s2;

// Points To:
// s2.tab2 -> undefined , EXACT

   mys *q = &s2;

// Points To:
// q -> s2 , EXACT
// s2.tab2 -> undefined , EXACT


   init2(q);

// Points To:
// q -> s2 , EXACT
// s2.tab2 -> undefined , EXACT


   return 1;
}

Proper effects with points-to for "main"

int main()
{
   mys s2;
//             <    is written>: q
   mys *q = &s2;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_

   init2(q);

   return 1;
}

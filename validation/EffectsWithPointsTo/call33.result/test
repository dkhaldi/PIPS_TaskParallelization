
Points-to for call33


// Points To IN:
// q -> *NULL_POINTER* , MAY
// q -> _q_2[0] , MAY


// Points To OUT:
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

void call33(int i, int *q)
{

// Points To:
// q -> *NULL_POINTER* , MAY
// q -> _q_2[0] , MAY

   *q = 1;

// Points To:
// q -> _q_2[0] , EXACT

   // added to check effects
   free(q);

// Points To:
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   return;
}

Points-to for "call33_caller"


// Points To IN:
// qq[*] -> *NULL_POINTER* , MAY
// qq[0] -> *NULL_POINTER* , MAY
// qq[*] -> _qq_1[*][0] , MAY
// qq[0] -> _qq_1[0][0] , MAY


// Points To OUT:
// qq[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY

int call33_caller(int *qq[10])
{

// Points To:
// qq[0] -> *NULL_POINTER* , MAY
// qq[0] -> _qq_1[0][0] , MAY

   int ii = *qq[0];

// Points To:
// qq[*] -> *NULL_POINTER* , MAY
// qq[*] -> _qq_1[*][0] , MAY
// qq[0] -> _qq_1[0][0] , EXACT

   call33(ii, qq[ii]);

// Points To:
// qq[*] -> *ANY_MODULE*:*NOWHERE*_b0 , MAY
// qq[0] -> _qq_1[0][0] , EXACT

   return ii++;
}

Proper effects with points-to for "call33_caller"

int call33_caller(int *qq[10])
{
//             <may be read   >: _qq_1[0][0]
//             <    is read   >: qq[0]
//             <    is written>: ii
   int ii = *qq[0];
//             <may be written>: _qq_1[*][0]
//             <    is read   >: ii qq[ii] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   call33(ii, qq[ii]);
//             <    is read   >: ii
//             <    is written>: ii
   return ii++;
}

Cumulated effects with points-to for "call33_caller"

int call33_caller(int *qq[10])
{
//             <may be read   >: _qq_1[0][0]
//             <    is read   >: qq[0]
//             <    is written>: ii
   int ii = *qq[0];
//             <may be written>: _qq_1[*][0]
//             <    is read   >: ii qq[ii] _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   call33(ii, qq[ii]);
//             <    is read   >: ii
//             <    is written>: ii
   return ii++;
}

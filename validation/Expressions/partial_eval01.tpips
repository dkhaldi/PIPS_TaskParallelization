setenv WS="partial_eval01"
setproperty ABORT_ON_USER_ERROR TRUE
delete $WS
create $WS $WS.c

setproperty CONSTANT_PATH_EFFECTS TRUE

echo
echo Initial code for "duck"
echo

display PRINTED_FILE[duck]

echo
echo Initial code with proper effects for "main"
echo

activate PRINT_CODE_PROPER_EFFECTS
display PRINTED_FILE[main]
activate PRINT_CODE

echo
echo Initial code with proper effects for "duck"
echo

activate PRINT_CODE_PROPER_EFFECTS
display PRINTED_FILE[duck]
activate PRINT_CODE

echo
echo Initial code with preconditions for "main"
echo

activate PRINT_CODE_PRECONDITIONS
display PRINTED_FILE[main]
activate PRINT_CODE

echo
echo Initial code with preconditions for "duck"
echo

activate PRINT_CODE_PRECONDITIONS
display PRINTED_FILE[duck]
activate PRINT_CODE

apply UNSPLIT
shell gcc -c $WS.database/Src/$WS.c
quit

echo
echo Code of "duck" after array conversion
echo

setproperty LINEARIZE_ARRAY_USE_POINTERS TRUE
apply LINEARIZE_ARRAY[duck]
display PRINTED_FILE[duck]

echo
echo Code of "duck" after partial eval
echo

apply PARTIAL_EVAL[duck]
display PRINTED_FILE[duck]

echo
echo Unsplit resulting code
echo

apply UNSPLIT

# This is not wise because of the include expansion
#shell cat $WS.database/Src/$WS.c

#shell cc $WS.c -o $WS.database/Tmp/ref
#shell cc $WS.database/Src/$WS.c  -o $WS.database/Tmp/out
#shell if test `./$WS.database/Tmp/ref` = `./$WS.database/Tmp/out`; then echo "ok"; else echo "ko" ; fi

shell cc $WS.c -o $WS.database/Tmp/ref
shell cc $WS.database/Src/$WS.c -o $WS.database/Tmp/out
shell if test `./$WS.database/Tmp/ref` = `./$WS.database/Tmp/out`; then echo "ok"; else echo "ko" ; fi

close
#delete $WS
quit



Initial code for partial_eval02

int partial_eval02(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{
   int *zaza = (int *) fifi+(3-1-0+1)*1;
   int i;

   i = size;
   return *((int *) riri+2) = *(zaza+1)+*(&loulou[0][0][0]+3+(6-1-0+1)*(0+(size-1-0+1)*0));
}

Initial code for "main"

int main()
{
   int riri[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
   int fifi[2][3] = {{10, 11, 12}, {13, 14, 15}};
   int size = 2;
   int loulou[1][size][6];
   int i;
   int j;
   int k = 16;

   i = size;

   for(i = 0; i <= size-1; i += 1)
      for(j = 0; j <= 5; j += 1)
         loulou[0][i][j] = k++;

   printf("%d\n", partial_eval02(riri, fifi, size, loulou));

   return 0;
}

Cumulated effects for partial_eval02

//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: riri[2]
int partial_eval02(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{
//             <    is written>: zaza
   int *zaza = (int *) fifi+(3-1-0+1)*1;
   int i;
//             <    is read   >: size
//             <    is written>: i

   i = size;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: riri[2]
   return *((int *) riri+2) = *(zaza+1)+*(&loulou[0][0][0]+3+(6-1-0+1)*(0+(size-1-0+1)*0));
}

Preconditions "main"


//  P() {}

int main()
{

//  P() {}

   int riri[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

//  P() {}

   int fifi[2][3] = {{10, 11, 12}, {13, 14, 15}};

//  P() {}

   int size = 2;

//  P(size) {size==2}

   int loulou[1][size][6];

//  P(size) {size==2}

   int i;

//  P(size) {size==2}

   int j;

//  P(size) {size==2}

   int k = 16;

//  P(k,size) {k==16, size==2}


   i = size;

//  P(i,k,size) {i==2, k==16, size==2}


   for(i = 0; i <= size-1; i += 1)

//  P(i,j,k,size) {6i==k-16, size==2, 0<=i, i<=1}

      for(j = 0; j <= 5; j += 1)

//  P(i,j,k,size) {6i+j==k-16, size==2, 0<=i, i<=1, 0<=j, j<=5}

         loulou[0][i][j] = k++;

//  P(i,j,k,size) {i==2, j==6, k==28, size==2}


   printf("%d\n", partial_eval02(riri, fifi, size, loulou));

//  P(i,j,k,size) {i==2, j==6, k==28, size==2}


   return 0;
}

Preconditions partial_eval02


//  P() {size==2}

int partial_eval02(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{

//  P() {size==2}

   int *zaza = (int *) fifi+(3-1-0+1)*1;

//  P() {size==2}

   int i;

//  P() {size==2}


   i = size;

//  P(i) {i==2, size==2}

   return *((int *) riri+2) = *(zaza+1)+*(&loulou[0][0][0]+3+(6-1-0+1)*(0+(size-1-0+1)*0));
}

Code after partial evaluation for "partial_eval02"

int partial_eval02(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{
   int *zaza = (int *) fifi+3;
   int i;

   i = 2;
   return *((int *) riri+2) = *(zaza+1)+*(&loulou[0][0][0]+3);
}

Code after partial evaluation for "main"

int main()
{
   int riri[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
   int fifi[2][3] = {{10, 11, 12}, {13, 14, 15}};
   int size = 2;
   int loulou[1][2][6];
   int i;
   int j;
   int k = 16;

   i = 2;

   for(i = 0; i <= 1; i += 1)
      for(j = 0; j <= 5; j += 1)
         loulou[0][i][j] = k++;

   printf("%d\n", partial_eval02(riri, fifi, 2, loulou));

   return 0;
}

Same code with evaluation of constants

int partial_eval02(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{
   int *zaza = (int *) fifi+3;
   int i;

   i = 2;
   return *((int *) riri+2) = *(zaza+1)+*(&loulou[0][0][0]+3);
}

Unsplit resulting code

ok

#
# AIPO
#
#
# compile generated anr999_01
#

! initial function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0050*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0051*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   ret_0 |= freia_aipo_sub(og, t, og);                                  /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! graphs

// graph for dag "dag_0" of module "anr999_01" in dot format
// DAG "dag_0": #i=1 #o=2 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="t"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="t"];
  "42 D8" [shape=box];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "50 D8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_cleaned_0" of module "anr999_01" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}

! updated function for AIPO

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0 = 0;                                              /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/

   freia_aipo_dilate_8c(t, od, freia_morpho_kernel_8c);                 /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   freia_aipo_sub(og, t, og);                                           /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}
#
# SPOC
#

! initial function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0050*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0051*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   ret_0 |= freia_aipo_sub(og, t, og);                                  /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! graphs

// graph for dag "anr999_01_spoc_helper_0_0" of module "anr999_01" in dot format
// DAG "anr999_01_spoc_helper_0_0": #i=1 #o=2 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "t" [shape=circle];

  // computation vertices
  "53 D8" [shape=box];
  "53 D8" -> "t";
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "anr999_01_spoc_helper_0_1" of module "anr999_01" in dot format
// DAG "anr999_01_spoc_helper_0_1": #i=2 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_spoc_helper_0_1" {
  // inputs
  "in" [shape=circle];
  "t" [shape=circle];

  // outputs
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "t" -> "67 -";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "in" -> "59 E8";
}
// graph for dag "dag_0" of module "anr999_01" in dot format
// DAG "dag_0": #i=1 #o=2 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="t"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="t"];
  "42 D8" [shape=box];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "50 D8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_cleaned_0" of module "anr999_01" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 13 ops and 0 copies, optimized to 11 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// # SPOC calls: 2

// FREIA-SPoC helper function for module anr999_01
freia_status anr999_01_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t * po0,
  int32_t * po1,
  const int32_t * pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;

  // 0`in [0 measure 0] -> [0 measure 0] 0 undefined
  // nope


  // STAGE 1
  // 0`in [0 measure 0] -> [1 poc 0] 41 dilate_8c
  // 0`in [1 input 0] -> [1 poc 0] 41 dilate_8c
  // nope
  // poc 41 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi2[i];


  // STAGE 2
  // 0`od_1 [1 poc 0] -> [2 poc 0] 42 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`od_1 [2 input 0] -> [2 poc 0] 42 dilate_8c
  // nope
  // poc 42 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi2[i];


  // STAGE 4
  // 0`od [2 poc 0] -> [4 poc 0] 52 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`od [3 input 0] -> [4 poc 0] 52 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`od [4 input 0] -> [4 poc 0] 52 dilate_8c
  // nope
  // poc 52 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi2[i];


  // STAGE 5
  // 0`t_1 [4 poc 0] -> [5 poc 0] 53 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t_1 [5 input 0] -> [5 poc 0] 53 dilate_8c
  // nope
  // poc 53 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi2[i];


  // output image 0`od on 1 and image 0`t on 0
  // 0`od [3 poc 0] -> [5 output 1] 0 null
  si.mux[3][1].op = SPOC_MUX_IN0;
  si.mux[3][3].op = SPOC_MUX_IN0;
  // 0`od [4 input 1] -> [5 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`od [5 input 1] -> [5 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`od [5 output 1] -> [7 output 1] 0 null
  // 0`od [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`od [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`t [5 poc 0] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t [5 output 0] -> [7 output 0] 0 null
  // 0`t [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i0);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 38 global_min stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].minimum;

  // measure 39 global_vol stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

// FREIA-SPoC helper function for module anr999_01
freia_status anr999_01_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 59 erode_8c
  // nope
  // poc 59 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`og_4 [0 poc 0] -> [1 poc 0] 60 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`og_4 [1 input 0] -> [1 poc 0] 60 erode_8c
  // nope
  // poc 60 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`og_3 [1 poc 0] -> [2 poc 0] 61 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`og_3 [2 input 0] -> [2 poc 0] 61 erode_8c
  // nope
  // poc 61 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`og_2 [2 poc 0] -> [3 poc 0] 62 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`og_2 [3 input 0] -> [3 poc 0] 62 erode_8c
  // nope
  // poc 62 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`og_1 [3 poc 0] -> [3 alu] 67 sub
  // nope
  // 0`t [0 input 1] -> [3 alu] 67 sub
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`t [1 input 1] -> [3 alu] 67 sub
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`t [2 input 1] -> [3 alu] 67 sub
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`t [3 input 1] -> [3 alu] 67 sub
  // nope
  // alu 67 sub stage 3 flipped
  si.alu[3][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image 0`og on 0
  // 0`og [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`og [3 output 0] -> [7 output 0] 0 null
  // 0`og [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`og [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`og [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`og [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   anr999_01_spoc_helper_0_0_0(od, t, in, &measure_min, &measure_vol, freia_morpho_kernel_8c);        /*0038*/
   
   
   
   anr999_01_spoc_helper_0_1_0(og, in, t, freia_morpho_kernel_8c);      /*0059*/

   freia_common_destruct_data(t);                                       /*0069*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! cleaned up function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   0;                                                                   /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = 0;                                                           /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/

   I_13 = 0;                                                            /*0070*/
   0;                                                                   /*0071*/

   anr999_01_spoc_helper_0_0_0(od, t, in, &measure_min, &measure_vol, freia_morpho_kernel_8c);        /*0038*/
   
   
   
   anr999_01_spoc_helper_0_1_0(og, in, t, freia_morpho_kernel_8c);      /*0059*/

   freia_common_destruct_data(t);                                       /*0069*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}
#
# TERAPIX
#

! initial function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0050*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0051*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   ret_0 |= freia_aipo_sub(og, t, og);                                  /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! graphs

// graph for dag "anr999_01_terapix_helper_0_0_0" of module "anr999_01" in dot format
// DAG "anr999_01_terapix_helper_0_0_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_0" of module "anr999_01" in dot format
// DAG "dag_0": #i=1 #o=2 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="t"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="t"];
  "42 D8" [shape=box];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "50 D8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_cleaned_0" of module "anr999_01" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 13 ops and 0 copies, optimized to 11 ops and 0+0+0 copies

/* FREIA terapix helper function for module anr999_01
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 11 image operations in dag
 * dag length is 6, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 130
 * - communication: 72
 */
freia_status anr999_01_terapix_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t * po3,
  int32_t * po4,
  const int32_t * pi5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // array for reduction 0 extraction
  int32_t red_0[1];
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 1;
  const int32_t y_1_val = 0;
  // array for reduction 1 extraction
  int32_t red_1[1];
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 2;
  const int32_t y_2 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][11];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 4;
  int image_height = i0->heightWa;
  int max_computed_size = 162;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 170;
  int imagelet_3 = 340;
  int imagelet_4 = 510;
  int imagelet_5 = 680;
  int imagelet_6 = 850;

  // memory for reductions
  int reduction_0 = 1023;
  int reduction_1 = 1021;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: min(1)
  // initializing  0_val
  p_0_val[0] = INT16_MAX;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = reduction_0;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 1;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure min at reduction_0
  mcu_macro[0][0].xmin2 = reduction_0;
  mcu_macro[1][0].xmin2 = reduction_0;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_MIN;
  // 1: vol(1)
  // initializing  1_val
  p_1_val[0] = 0;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = reduction_1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_1
  mcu_macro[0][1].xmin2 = reduction_1;
  mcu_macro[1][1].xmin2 = reduction_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi5[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: E8(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_2;
  mcu_macro[1][3].xmin3 = x_2;
  mcu_macro[0][3].ymin3 = y_2;
  mcu_macro[1][3].ymin3 = y_2;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: D8(2) -> 1
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_1_0;
  mcu_macro[1][4].xmin2 = imagelet_io_1_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_2;
  mcu_macro[1][4].xmin3 = x_2;
  mcu_macro[0][4].ymin3 = y_2;
  mcu_macro[1][4].ymin3 = y_2;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_2;
  mcu_macro[1][5].xmin3 = x_2;
  mcu_macro[0][5].ymin3 = y_2;
  mcu_macro[1][5].ymin3 = y_2;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: D8(1) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_2;
  mcu_macro[1][6].xmin3 = x_2;
  mcu_macro[0][6].ymin3 = y_2;
  mcu_macro[1][6].ymin3 = y_2;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: E8(2) -> 4
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_4;
  mcu_macro[1][7].xmin2 = imagelet_4;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_2;
  mcu_macro[1][7].xmin3 = x_2;
  mcu_macro[0][7].ymin3 = y_2;
  mcu_macro[1][7].ymin3 = y_2;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_2;
  mcu_macro[1][8].xmin3 = x_2;
  mcu_macro[0][8].ymin3 = y_2;
  mcu_macro[1][8].ymin3 = y_2;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: E8(4) -> 3
  mcu_macro[0][9].xmin1 = imagelet_4;
  mcu_macro[1][9].xmin1 = imagelet_4;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_2;
  mcu_macro[1][9].xmin3 = x_2;
  mcu_macro[0][9].ymin3 = y_2;
  mcu_macro[1][9].ymin3 = y_2;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: -(2,3) -> 2
  mcu_macro[0][10].xmin1 = imagelet_io_2_0;
  mcu_macro[1][10].xmin1 = imagelet_io_2_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = imagelet_io_2_0;
  mcu_macro[1][10].xmin3 = imagelet_io_2_1;
  mcu_macro[0][10].ymin3 = 0;
  mcu_macro[1][10].ymin3 = 0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_SUB3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for od
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for og
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 4;
  mcu_instr.borderBottom = 4;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 4;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 11;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures
  // get measure min result from reduction_0
  redter.xres = reduction_0;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_0;
  redter.macroid = TERAPIX_UCODE_GLOBAL_MIN;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po3 = (int32_t) red_0[0];
  // get measure vol result from reduction_1
  redter.xres = reduction_1;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_1;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_1[0];

  return ret;
}


! updated function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   anr999_01_terapix_helper_0_0_0(od, og, in, &measure_min, &measure_vol, freia_morpho_kernel_8c);    /*0038*/
   
   
   
   
   
   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! cleaned up function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   0;                                                                   /*0046*/

   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = 0;                                                           /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/

   I_13 = 0;                                                            /*0070*/
   0;                                                                   /*0071*/

   anr999_01_terapix_helper_0_0_0(od, og, in, &measure_min, &measure_vol, freia_morpho_kernel_8c);    /*0038*/
   
   
   
   
   
   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}
#
# OPENCL
#

! initial function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0050*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0051*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   ret_0 |= freia_aipo_sub(og, t, og);                                  /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! graphs

// graph for dag "anr999_01_opencl_helper_0_0" of module "anr999_01" in dot format
// DAG "anr999_01_opencl_helper_0_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "anr999_01_opencl_helper_0_0_0" of module "anr999_01" in dot format
// DAG "anr999_01_opencl_helper_0_0_0": #i=1 #o=2 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_opencl_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od_1" [shape=circle];
  "og_4" [shape=circle];

  // computation vertices
  "59 E8" [shape=box];
  "59 E8" -> "og_4";
  "41 D8" [shape=box];
  "41 D8" -> "od_1";
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "anr999_01_opencl_helper_0_0_2" of module "anr999_01" in dot format
// DAG "anr999_01_opencl_helper_0_0_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_opencl_helper_0_0_2" {
  // inputs
  "og_2" [shape=circle];
  "t_1" [shape=circle];

  // outputs
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "og_2" -> "62 E8";
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "t_1" -> "53 D8";
}
// graph for dag "anr999_01_opencl_helper_D8_511" of module "anr999_01" in dot format
// DAG "anr999_01_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_opencl_helper_D8_511" {
  // inputs
  "od" [shape=circle];

  // outputs
  "t_1" [shape=circle];

  // computation vertices
  "52 D8" [shape=box];
  "52 D8" -> "t_1";
  "od" -> "52 D8";
}
// graph for dag "anr999_01_opencl_helper_E8_511" of module "anr999_01" in dot format
// DAG "anr999_01_opencl_helper_E8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "anr999_01_opencl_helper_E8_511" {
  // inputs
  "og_3" [shape=circle];

  // outputs
  "og_2" [shape=circle];

  // computation vertices
  "61 E8" [shape=box];
  "61 E8" -> "og_2";
  "og_3" -> "61 E8";
}
// graph for dag "dag_0" of module "anr999_01" in dot format
// DAG "dag_0": #i=1 #o=2 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="t"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="t"];
  "42 D8" [shape=box];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "50 D8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_cleaned_0" of module "anr999_01" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 13 ops and 0 copies, optimized to 11 ops and 0+0+0 copies

// hold kernels for anr999_01_opencl_helper_0_0_0
static cl_kernel anr999_01_opencl_helper_0_0_0_kernel[2];

// compile kernels for anr999_01_opencl_helper_0_0_0
static freia_status anr999_01_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for anr999_01_opencl_helper_0_0_0
  const char * anr999_01_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function anr999_01_opencl_helper_0_0_0\n"
    "KERNEL void anr999_01_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL t41 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL t59 = PIXEL_MAX;\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL_MINIMUM(red38, in0);\n"
    "    PIXEL_VOLUME(red39, in0);\n"
    "    t41 = PIXEL_SUP(t41, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t41 = PIXEL_SUP(t41, (is_N)? PIXEL_MIN: in0N);\n"
    "    t41 = PIXEL_SUP(t41, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t41 = PIXEL_SUP(t41, (is_W)? PIXEL_MIN: in0W);\n"
    "    t41 = PIXEL_SUP(t41, in0);\n"
    "    t41 = PIXEL_SUP(t41, (is_E)? PIXEL_MIN: in0E);\n"
    "    t41 = PIXEL_SUP(t41, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t41 = PIXEL_SUP(t41, (is_S)? PIXEL_MIN: in0S);\n"
    "    t41 = PIXEL_SUP(t41, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    t59 = PIXEL_INF(t59, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t59 = PIXEL_INF(t59, (is_N)? PIXEL_MAX: in0N);\n"
    "    t59 = PIXEL_INF(t59, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t59 = PIXEL_INF(t59, (is_W)? PIXEL_MAX: in0W);\n"
    "    t59 = PIXEL_INF(t59, in0);\n"
    "    t59 = PIXEL_INF(t59, (is_E)? PIXEL_MAX: in0E);\n"
    "    t59 = PIXEL_INF(t59, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t59 = PIXEL_INF(t59, (is_S)? PIXEL_MAX: in0S);\n"
    "    t59 = PIXEL_INF(t59, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t41;\n"
    "    p1[i] = t59;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].min = minv;\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_0_0_0_source, "anr999_01_opencl_helper_0_0_0", "-DPIXEL8", &anr999_01_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_0_0_0_source, "anr999_01_opencl_helper_0_0_0", "-DPIXEL16", &anr999_01_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function anr999_01_opencl_helper_0_0_0
freia_status anr999_01_opencl_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  int32_t * po3,
  int32_t * po4)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= anr999_01_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = anr999_01_opencl_helper_0_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel anr999_01_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 2, 1, 0, 1, o0, o1, i0, &redres);

  // return reduction results
  *po3 = redres.minimum;
  *po4 = redres.volume;

  return err;
}

// hold kernels for anr999_01_opencl_helper_D8_511
static cl_kernel anr999_01_opencl_helper_D8_511_kernel[2];

// compile kernels for anr999_01_opencl_helper_D8_511
static freia_status anr999_01_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for anr999_01_opencl_helper_D8_511
  const char * anr999_01_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function anr999_01_opencl_helper_D8_511\n"
    "KERNEL void anr999_01_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t52 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t52 = PIXEL_SUP(t52, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t52 = PIXEL_SUP(t52, (is_N)? PIXEL_MIN: in0N);\n"
    "    t52 = PIXEL_SUP(t52, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t52 = PIXEL_SUP(t52, (is_W)? PIXEL_MIN: in0W);\n"
    "    t52 = PIXEL_SUP(t52, in0);\n"
    "    t52 = PIXEL_SUP(t52, (is_E)? PIXEL_MIN: in0E);\n"
    "    t52 = PIXEL_SUP(t52, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t52 = PIXEL_SUP(t52, (is_S)? PIXEL_MIN: in0S);\n"
    "    t52 = PIXEL_SUP(t52, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t52;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_D8_511_source, "anr999_01_opencl_helper_D8_511", "-DPIXEL8", &anr999_01_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_D8_511_source, "anr999_01_opencl_helper_D8_511", "-DPIXEL16", &anr999_01_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function anr999_01_opencl_helper_D8_511
freia_status anr999_01_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= anr999_01_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = anr999_01_opencl_helper_D8_511_kernel[bpp];

  // call kernel anr999_01_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for anr999_01_opencl_helper_E8_511
static cl_kernel anr999_01_opencl_helper_E8_511_kernel[2];

// compile kernels for anr999_01_opencl_helper_E8_511
static freia_status anr999_01_opencl_helper_E8_511_compile(void)
{
  // OpenCL source for anr999_01_opencl_helper_E8_511
  const char * anr999_01_opencl_helper_E8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function anr999_01_opencl_helper_E8_511\n"
    "KERNEL void anr999_01_opencl_helper_E8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t61 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t61 = PIXEL_INF(t61, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t61 = PIXEL_INF(t61, (is_N)? PIXEL_MAX: in0N);\n"
    "    t61 = PIXEL_INF(t61, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t61 = PIXEL_INF(t61, (is_W)? PIXEL_MAX: in0W);\n"
    "    t61 = PIXEL_INF(t61, in0);\n"
    "    t61 = PIXEL_INF(t61, (is_E)? PIXEL_MAX: in0E);\n"
    "    t61 = PIXEL_INF(t61, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t61 = PIXEL_INF(t61, (is_S)? PIXEL_MAX: in0S);\n"
    "    t61 = PIXEL_INF(t61, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t61;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_E8_511_source, "anr999_01_opencl_helper_E8_511", "-DPIXEL8", &anr999_01_opencl_helper_E8_511_kernel[0]);
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_E8_511_source, "anr999_01_opencl_helper_E8_511", "-DPIXEL16", &anr999_01_opencl_helper_E8_511_kernel[1]);
  return err;
}

// helper function anr999_01_opencl_helper_E8_511
freia_status anr999_01_opencl_helper_E8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= anr999_01_opencl_helper_E8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = anr999_01_opencl_helper_E8_511_kernel[bpp];

  // call kernel anr999_01_opencl_helper_E8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for anr999_01_opencl_helper_0_0_2
static cl_kernel anr999_01_opencl_helper_0_0_2_kernel[2];

// compile kernels for anr999_01_opencl_helper_0_0_2
static freia_status anr999_01_opencl_helper_0_0_2_compile(void)
{
  // OpenCL source for anr999_01_opencl_helper_0_0_2
  const char * anr999_01_opencl_helper_0_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function anr999_01_opencl_helper_0_0_2\n"
    "KERNEL void anr999_01_opencl_helper_0_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t53 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL t62 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t53 = PIXEL_SUP(t53, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t53 = PIXEL_SUP(t53, (is_N)? PIXEL_MIN: in1N);\n"
    "    t53 = PIXEL_SUP(t53, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t53 = PIXEL_SUP(t53, (is_W)? PIXEL_MIN: in1W);\n"
    "    t53 = PIXEL_SUP(t53, in1);\n"
    "    t53 = PIXEL_SUP(t53, (is_E)? PIXEL_MIN: in1E);\n"
    "    t53 = PIXEL_SUP(t53, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t53 = PIXEL_SUP(t53, (is_S)? PIXEL_MIN: in1S);\n"
    "    t53 = PIXEL_SUP(t53, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    t62 = PIXEL_INF(t62, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t62 = PIXEL_INF(t62, (is_N)? PIXEL_MAX: in0N);\n"
    "    t62 = PIXEL_INF(t62, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t62 = PIXEL_INF(t62, (is_W)? PIXEL_MAX: in0W);\n"
    "    t62 = PIXEL_INF(t62, in0);\n"
    "    t62 = PIXEL_INF(t62, (is_E)? PIXEL_MAX: in0E);\n"
    "    t62 = PIXEL_INF(t62, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t62 = PIXEL_INF(t62, (is_S)? PIXEL_MAX: in0S);\n"
    "    t62 = PIXEL_INF(t62, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t67 = PIXEL_SUB(t53, t62);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t67;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_0_0_2_source, "anr999_01_opencl_helper_0_0_2", "-DPIXEL8", &anr999_01_opencl_helper_0_0_2_kernel[0]);
  err |= freia_op_compile_kernel(anr999_01_opencl_helper_0_0_2_source, "anr999_01_opencl_helper_0_0_2", "-DPIXEL16", &anr999_01_opencl_helper_0_0_2_kernel[1]);
  return err;
}

// helper function anr999_01_opencl_helper_0_0_2
freia_status anr999_01_opencl_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= anr999_01_opencl_helper_0_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = anr999_01_opencl_helper_0_0_2_kernel[bpp];

  // call kernel anr999_01_opencl_helper_0_0_2
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 0, o0, i0, i1);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function anr999_01

// opencl for dag 0

// opencl function anr999_01_opencl_helper_0_0_0
KERNEL void anr999_01_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL t41 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL t59 = PIXEL_MAX;

    // pixel computations
    PIXEL_MINIMUM(red38, in0);
    PIXEL_VOLUME(red39, in0);
    t41 = PIXEL_SUP(t41, (is_N|is_W)? PIXEL_MIN: in0NW);
    t41 = PIXEL_SUP(t41, (is_N)? PIXEL_MIN: in0N);
    t41 = PIXEL_SUP(t41, (is_N|is_E)? PIXEL_MIN: in0NE);
    t41 = PIXEL_SUP(t41, (is_W)? PIXEL_MIN: in0W);
    t41 = PIXEL_SUP(t41, in0);
    t41 = PIXEL_SUP(t41, (is_E)? PIXEL_MIN: in0E);
    t41 = PIXEL_SUP(t41, (is_S|is_W)? PIXEL_MIN: in0SW);
    t41 = PIXEL_SUP(t41, (is_S)? PIXEL_MIN: in0S);
    t41 = PIXEL_SUP(t41, (is_S|is_E)? PIXEL_MIN: in0SE);
    t59 = PIXEL_INF(t59, (is_N|is_W)? PIXEL_MAX: in0NW);
    t59 = PIXEL_INF(t59, (is_N)? PIXEL_MAX: in0N);
    t59 = PIXEL_INF(t59, (is_N|is_E)? PIXEL_MAX: in0NE);
    t59 = PIXEL_INF(t59, (is_W)? PIXEL_MAX: in0W);
    t59 = PIXEL_INF(t59, in0);
    t59 = PIXEL_INF(t59, (is_E)? PIXEL_MAX: in0E);
    t59 = PIXEL_INF(t59, (is_S|is_W)? PIXEL_MAX: in0SW);
    t59 = PIXEL_INF(t59, (is_S)? PIXEL_MAX: in0S);
    t59 = PIXEL_INF(t59, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t41;
    p1[i] = t59;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].min = minv;
  redX[thrid].vol = vol;
}

// opencl function anr999_01_opencl_helper_D8_511
KERNEL void anr999_01_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t52 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t52 = PIXEL_SUP(t52, (is_N|is_W)? PIXEL_MIN: in0NW);
    t52 = PIXEL_SUP(t52, (is_N)? PIXEL_MIN: in0N);
    t52 = PIXEL_SUP(t52, (is_N|is_E)? PIXEL_MIN: in0NE);
    t52 = PIXEL_SUP(t52, (is_W)? PIXEL_MIN: in0W);
    t52 = PIXEL_SUP(t52, in0);
    t52 = PIXEL_SUP(t52, (is_E)? PIXEL_MIN: in0E);
    t52 = PIXEL_SUP(t52, (is_S|is_W)? PIXEL_MIN: in0SW);
    t52 = PIXEL_SUP(t52, (is_S)? PIXEL_MIN: in0S);
    t52 = PIXEL_SUP(t52, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t52;
  }
}

// opencl function anr999_01_opencl_helper_E8_511
KERNEL void anr999_01_opencl_helper_E8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t61 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t61 = PIXEL_INF(t61, (is_N|is_W)? PIXEL_MAX: in0NW);
    t61 = PIXEL_INF(t61, (is_N)? PIXEL_MAX: in0N);
    t61 = PIXEL_INF(t61, (is_N|is_E)? PIXEL_MAX: in0NE);
    t61 = PIXEL_INF(t61, (is_W)? PIXEL_MAX: in0W);
    t61 = PIXEL_INF(t61, in0);
    t61 = PIXEL_INF(t61, (is_E)? PIXEL_MAX: in0E);
    t61 = PIXEL_INF(t61, (is_S|is_W)? PIXEL_MAX: in0SW);
    t61 = PIXEL_INF(t61, (is_S)? PIXEL_MAX: in0S);
    t61 = PIXEL_INF(t61, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t61;
  }
}

// opencl function anr999_01_opencl_helper_0_0_2
KERNEL void anr999_01_opencl_helper_0_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t53 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL t62 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t53 = PIXEL_SUP(t53, (is_N|is_W)? PIXEL_MIN: in1NW);
    t53 = PIXEL_SUP(t53, (is_N)? PIXEL_MIN: in1N);
    t53 = PIXEL_SUP(t53, (is_N|is_E)? PIXEL_MIN: in1NE);
    t53 = PIXEL_SUP(t53, (is_W)? PIXEL_MIN: in1W);
    t53 = PIXEL_SUP(t53, in1);
    t53 = PIXEL_SUP(t53, (is_E)? PIXEL_MIN: in1E);
    t53 = PIXEL_SUP(t53, (is_S|is_W)? PIXEL_MIN: in1SW);
    t53 = PIXEL_SUP(t53, (is_S)? PIXEL_MIN: in1S);
    t53 = PIXEL_SUP(t53, (is_S|is_E)? PIXEL_MIN: in1SE);
    t62 = PIXEL_INF(t62, (is_N|is_W)? PIXEL_MAX: in0NW);
    t62 = PIXEL_INF(t62, (is_N)? PIXEL_MAX: in0N);
    t62 = PIXEL_INF(t62, (is_N|is_E)? PIXEL_MAX: in0NE);
    t62 = PIXEL_INF(t62, (is_W)? PIXEL_MAX: in0W);
    t62 = PIXEL_INF(t62, in0);
    t62 = PIXEL_INF(t62, (is_E)? PIXEL_MAX: in0E);
    t62 = PIXEL_INF(t62, (is_S|is_W)? PIXEL_MAX: in0SW);
    t62 = PIXEL_INF(t62, (is_S)? PIXEL_MAX: in0S);
    t62 = PIXEL_INF(t62, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t67 = PIXEL_SUB(t53, t62);

    // set output pixels
    p0[i] = t67;
  }
}

! updated function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   anr999_01_opencl_helper_0_0_0(od, og, in, &measure_min, &measure_vol);              /*0038*/
   
   
   anr999_01_opencl_helper_D8_511(od, od);                              /*0042*/
   anr999_01_opencl_helper_D8_511(t, od);                               /*0052*/
   anr999_01_opencl_helper_E8_511(og, og);                              /*0060*/
   anr999_01_opencl_helper_E8_511(og, og);                              /*0061*/
   anr999_01_opencl_helper_0_0_2(og, og, t);                            /*0062*/
   
   
   freia_common_destruct_data(t);                                       /*0069*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! cleaned up function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   0;                                                                   /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = 0;                                                           /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/

   I_13 = 0;                                                            /*0070*/
   0;                                                                   /*0071*/

   anr999_01_opencl_helper_0_0_0(od, og, in, &measure_min, &measure_vol);              /*0038*/
   
   
   anr999_01_opencl_helper_D8_511(od, od);                              /*0042*/
   anr999_01_opencl_helper_D8_511(t, od);                               /*0052*/
   anr999_01_opencl_helper_E8_511(og, og);                              /*0060*/
   anr999_01_opencl_helper_E8_511(og, og);                              /*0061*/
   anr999_01_opencl_helper_0_0_2(og, og, t);                            /*0062*/
   
   
   freia_common_destruct_data(t);                                       /*0069*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}
#
# SIGMAC
#
#
# compile generated anr999_01
#

! initial function

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   freia_data2d *t;                                                     /*0025*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/

   freia_aipo_global_min(in, &measure_min);                             /*0038*/
   freia_aipo_global_vol(in, &measure_vol);                             /*0039*/

   freia_aipo_dilate_8c(od, in, freia_morpho_kernel_8c);                /*0041*/
   freia_aipo_dilate_8c(od, od, freia_morpho_kernel_8c);                /*0042*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   t = freia_common_create_data(og->bpp, og->widthWa, og->heightWa);    /*0048*/

   freia_aipo_dilate_8c(t, in, freia_morpho_kernel_8c);                 /*0050*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0051*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0052*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0053*/
   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/

   freia_aipo_erode_8c(og, in, freia_morpho_kernel_8c);                 /*0059*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0060*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0061*/
   freia_aipo_erode_8c(og, og, freia_morpho_kernel_8c);                 /*0062*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   ret_0 |= freia_aipo_sub(og, t, og);                                  /*0067*/

   freia_common_destruct_data(t);                                       /*0069*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/

   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! graphs

// graph for dag "dag_0" of module "anr999_01" in dot format
// DAG "dag_0": #i=1 #o=2 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="t"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="t"];
  "42 D8" [shape=box];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "50 D8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}
// graph for dag "dag_cleaned_0" of module "anr999_01" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "od" [shape=circle];
  "og" [shape=circle];

  // computation vertices
  "67 -" [shape=trapezium,orientation=270];
  "67 -" -> "og";
  "62 E8" [shape=box];
  "62 E8" -> "67 -" [label="og_1"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="og_2"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="og_3"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="og_4"];
  "53 D8" [shape=box];
  "53 D8" -> "67 -" [label="t"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="t_1"];
  "42 D8" [shape=box];
  "42 D8" -> "52 D8" [label="od"];
  "42 D8" -> "od";
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="od_1"];
  "39 vol" [shape=diamond];
  "38 min" [shape=diamond];
  "in" -> "59 E8";
  "in" -> "41 D8";
  "in" -> "39 vol";
  "in" -> "38 min";
}

! updated function for OPENCL

int anr999_01(void)
{
   int I_13;                                                            /*0012*/
   int I_6;                                                             /*0013*/
   freia_dataio fdin;                                                   /*0014*/
   freia_dataio fdout;                                                  /*0015*/
   freia_data2d *in;                                                    /*0016*/
   freia_data2d *og;                                                    /*0017*/
   freia_data2d *od;                                                    /*0018*/
   int32_t measure_min;                                                 /*0019*/
   int32_t measure_vol;                                                 /*0020*/
   int i_0;                                                             /*0021*/
   int I_10_0;                                                          /*0022*/
   int I_3_0;                                                           /*0023*/
   freia_status ret_0;                                                  /*0024*/
   int i_1;                                                             /*0026*/
   int i_2;                                                             /*0027*/

   freia_common_open_input(&fdin, 0);                                   /*0029*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0030*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0032*/
   od = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0033*/
   og = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0034*/

   freia_common_rx_image(in, &fdin);                                    /*0036*/
   i_0 = 10;                                                            /*0043*/

   I_6 = 0;                                                             /*0045*/
   I_6;                                                                 /*0046*/

   i_1 = 10;                                                            /*0054*/

   I_3_0 = 0;                                                           /*0056*/
   ret_0 = I_3_0;                                                       /*0057*/
   i_2 = 10;                                                            /*0063*/

   I_10_0 = 0;                                                          /*0065*/
   ret_0 |= I_10_0;                                                     /*0066*/
   I_13 = 0;                                                            /*0070*/
   I_13;                                                                /*0071*/
   
   
   
   ret_0 |= freia_mppa_launch(0, 1, 2, 0, 2, in, od, og, &measure_vol, &measure_min);  /*0067*/
   
   
   
   printf("input global min = %d\n", measure_min);                      /*0073*/
   printf("input global volume = %d\n", measure_vol);                   /*0074*/

   freia_common_tx_image(in, &fdout);                                   /*0076*/
   freia_common_tx_image(od, &fdout);                                   /*0077*/
   freia_common_tx_image(og, &fdout);                                   /*0078*/

   freia_common_destruct_data(in);                                      /*0080*/
   freia_common_destruct_data(od);                                      /*0081*/
   freia_common_destruct_data(og);                                      /*0082*/

   freia_common_close_input(&fdin);                                     /*0084*/
   freia_common_close_output(&fdout);                                   /*0085*/

   return 0;                                                            /*0087*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=anr999_01 fname=anr999_01_sigmac_helper_0 split=0


/*#####################################################################*/
/*############### anr999_01_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
anr999_01_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 2);
    agent jo = new Join<int32_t>(2, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup1 = new rep(4, width);
    agent min0 = new img_global_min(width, height);
    agent vol0 = new img_global_vol(width, height);
    agent dil3 = new dilate_pi0_0(width, height);
    agent dup0 = new rep(2, width);
    agent dil2 = new dilate_pi0_0(width, height);
    agent dil1 = new dilate_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);
    agent ero3 = new erode_pi0_0(width, height);
    agent ero2 = new erode_pi0_0(width, height);
    agent ero1 = new erode_pi0_0(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent sub0 = new img_sub_img_16(width);

    // connections...
    connect (strin.output[0] /* in */, dup1.input);
    connect (dup1.output[3], ero3.input);
    connect (dup1.output[2], dil3.input);
    connect (dup1.output[1], vol0.input);
    connect (dup1.output[0], min0.input);
    connect (min0.output, jo.input[1]);
    connect (vol0.output, jo.input[0]);
    connect (dil3.output, dil2.input);
    connect (dil2.output, dup0.input);
    connect (dup0.output[1], dil1.input);
    connect (dup0.output[0], strout.input[0] /* od */);
    connect (dil1.output, dil0.input);
    connect (dil0.output, sub0.input[0]);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, sub0.input[1]);
    connect (sub0.output, strout.input[1] /* og */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new anr999_01_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


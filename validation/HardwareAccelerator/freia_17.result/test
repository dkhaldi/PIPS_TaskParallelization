#
# AIPO
#
#
# compile generated freia_17
#

! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);      /*0012*/
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0022*/
   freia_aipo_copy(t1, t0);                                             /*0023*/
   freia_aipo_copy(t2, t1);                                             /*0024*/
   freia_aipo_copy(o, t2);                                              /*0025*/
   freia_aipo_copy(t3, t1);                                             /*0026*/
   freia_aipo_copy(t4, t0);                                             /*0027*/
   freia_aipo_copy(t5, o);                                              /*0028*/

   freia_common_destruct_data(t0);                                      /*0030*/
   freia_common_destruct_data(t1);                                      /*0031*/
   freia_common_destruct_data(t2);                                      /*0032*/
   freia_common_destruct_data(t3);                                      /*0033*/
   freia_common_destruct_data(t4);                                      /*0034*/
   freia_common_destruct_data(t5);                                      /*0035*/

   return FREIA_OK;                                                     /*0037*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=7 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "28 =" [shape=circle];
  "27 =" [shape=circle];
  "26 =" [shape=circle];
  "25 =" [shape=circle];
  "25 =" -> "28 =" [label="o"];
  "25 =" -> "o";
  "24 =" [shape=circle];
  "24 =" -> "25 =" [label="t2"];
  "23 =" [shape=circle];
  "23 =" -> "26 =" [label="t1"];
  "23 =" -> "24 =" [label="t1"];
  "22 =" [shape=circle];
  "22 =" -> "27 =" [label="t0"];
  "22 =" -> "23 =" [label="t0"];
  "i" -> "22 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! updated function for AIPO

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0037*/
}
#
# SPOC
#

! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);      /*0012*/
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0022*/
   freia_aipo_copy(t1, t0);                                             /*0023*/
   freia_aipo_copy(t2, t1);                                             /*0024*/
   freia_aipo_copy(o, t2);                                              /*0025*/
   freia_aipo_copy(t3, t1);                                             /*0026*/
   freia_aipo_copy(t4, t0);                                             /*0027*/
   freia_aipo_copy(t5, o);                                              /*0028*/

   freia_common_destruct_data(t0);                                      /*0030*/
   freia_common_destruct_data(t1);                                      /*0031*/
   freia_common_destruct_data(t2);                                      /*0032*/
   freia_common_destruct_data(t3);                                      /*0033*/
   freia_common_destruct_data(t4);                                      /*0034*/
   freia_common_destruct_data(t5);                                      /*0035*/

   return FREIA_OK;                                                     /*0037*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=7 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "28 =" [shape=circle];
  "27 =" [shape=circle];
  "26 =" [shape=circle];
  "25 =" [shape=circle];
  "25 =" -> "28 =" [label="o"];
  "25 =" -> "o";
  "24 =" [shape=circle];
  "24 =" -> "25 =" [label="t2"];
  "23 =" [shape=circle];
  "23 =" -> "26 =" [label="t1"];
  "23 =" -> "24 =" [label="t1"];
  "22 =" [shape=circle];
  "22 =" -> "27 =" [label="t0"];
  "22 =" -> "23 =" [label="t0"];
  "i" -> "22 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 7 copies, optimized to 0 ops and 0+1+0 copies
// # SPOC calls: 0

! updated function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0037*/
}

! cleaned up function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0037*/
}
#
# TERAPIX
#

! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);      /*0012*/
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0022*/
   freia_aipo_copy(t1, t0);                                             /*0023*/
   freia_aipo_copy(t2, t1);                                             /*0024*/
   freia_aipo_copy(o, t2);                                              /*0025*/
   freia_aipo_copy(t3, t1);                                             /*0026*/
   freia_aipo_copy(t4, t0);                                             /*0027*/
   freia_aipo_copy(t5, o);                                              /*0028*/

   freia_common_destruct_data(t0);                                      /*0030*/
   freia_common_destruct_data(t1);                                      /*0031*/
   freia_common_destruct_data(t2);                                      /*0032*/
   freia_common_destruct_data(t3);                                      /*0033*/
   freia_common_destruct_data(t4);                                      /*0034*/
   freia_common_destruct_data(t5);                                      /*0035*/

   return FREIA_OK;                                                     /*0037*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=7 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "28 =" [shape=circle];
  "27 =" [shape=circle];
  "26 =" [shape=circle];
  "25 =" [shape=circle];
  "25 =" -> "28 =" [label="o"];
  "25 =" -> "o";
  "24 =" [shape=circle];
  "24 =" -> "25 =" [label="t2"];
  "23 =" [shape=circle];
  "23 =" -> "26 =" [label="t1"];
  "23 =" -> "24 =" [label="t1"];
  "22 =" [shape=circle];
  "22 =" -> "27 =" [label="t0"];
  "22 =" -> "23 =" [label="t0"];
  "i" -> "22 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 7 copies, optimized to 0 ops and 0+1+0 copies

! updated function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0037*/
}

! cleaned up function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0037*/
}
#
# OPENCL
#

! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);      /*0012*/
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0022*/
   freia_aipo_copy(t1, t0);                                             /*0023*/
   freia_aipo_copy(t2, t1);                                             /*0024*/
   freia_aipo_copy(o, t2);                                              /*0025*/
   freia_aipo_copy(t3, t1);                                             /*0026*/
   freia_aipo_copy(t4, t0);                                             /*0027*/
   freia_aipo_copy(t5, o);                                              /*0028*/

   freia_common_destruct_data(t0);                                      /*0030*/
   freia_common_destruct_data(t1);                                      /*0031*/
   freia_common_destruct_data(t2);                                      /*0032*/
   freia_common_destruct_data(t3);                                      /*0033*/
   freia_common_destruct_data(t4);                                      /*0034*/
   freia_common_destruct_data(t5);                                      /*0035*/

   return FREIA_OK;                                                     /*0037*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=7 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "28 =" [shape=circle];
  "27 =" [shape=circle];
  "26 =" [shape=circle];
  "25 =" [shape=circle];
  "25 =" -> "28 =" [label="o"];
  "25 =" -> "o";
  "24 =" [shape=circle];
  "24 =" -> "25 =" [label="t2"];
  "23 =" [shape=circle];
  "23 =" -> "26 =" [label="t1"];
  "23 =" -> "24 =" [label="t1"];
  "22 =" [shape=circle];
  "22 =" -> "27 =" [label="t0"];
  "22 =" -> "23 =" [label="t0"];
  "i" -> "22 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 0 ops and 7 copies, optimized to 0 ops and 0+1+0 copies
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_17

// opencl for dag 0

! updated function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0037*/
}

! cleaned up function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return 0;                                                            /*0037*/
}
#
# SIGMAC
#
#
# compile generated freia_17
#

! initial function

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t0 = freia_common_create_data(16, 128, 128), *t1 = freia_common_create_data(16, 128, 128), *t2 = freia_common_create_data(16, 128, 128), *t3 = freia_common_create_data(16, 128, 128), *t4 = freia_common_create_data(16, 128, 128), *t5 = freia_common_create_data(16, 128, 128);      /*0012*/
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(t0, i);                                              /*0022*/
   freia_aipo_copy(t1, t0);                                             /*0023*/
   freia_aipo_copy(t2, t1);                                             /*0024*/
   freia_aipo_copy(o, t2);                                              /*0025*/
   freia_aipo_copy(t3, t1);                                             /*0026*/
   freia_aipo_copy(t4, t0);                                             /*0027*/
   freia_aipo_copy(t5, o);                                              /*0028*/

   freia_common_destruct_data(t0);                                      /*0030*/
   freia_common_destruct_data(t1);                                      /*0031*/
   freia_common_destruct_data(t2);                                      /*0032*/
   freia_common_destruct_data(t3);                                      /*0033*/
   freia_common_destruct_data(t4);                                      /*0034*/
   freia_common_destruct_data(t5);                                      /*0035*/

   return FREIA_OK;                                                     /*0037*/
}

! graphs

// graph for dag "dag_0" of module "freia_17" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=7 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "28 =" [shape=circle];
  "27 =" [shape=circle];
  "26 =" [shape=circle];
  "25 =" [shape=circle];
  "25 =" -> "28 =" [label="o"];
  "25 =" -> "o";
  "24 =" [shape=circle];
  "24 =" -> "25 =" [label="t2"];
  "23 =" [shape=circle];
  "23 =" -> "26 =" [label="t1"];
  "23 =" -> "24 =" [label="t1"];
  "22 =" [shape=circle];
  "22 =" -> "27 =" [label="t0"];
  "22 =" -> "23 =" [label="t0"];
  "i" -> "22 =";
}
// graph for dag "dag_cleaned_0" of module "freia_17" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "o" [shape=circle];
  "o =" [shape=circle,label="=",style="dashed"]
  "i" -> "o =";
  "o =" -> "o";
}

! updated function for OPENCL

freia_status freia_17(freia_data2d *o, freia_data2d *i)
{
   
   // useless copies
   // t0 = i
   // t1 = t0
   // t2 = t1
   // o = t2
   // t3 = t1
   // t4 = t0
   // t5 = o
   freia_aipo_copy(o, i);
   
   
   return FREIA_OK;                                                     /*0037*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"




/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 10;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

  }
}
#
# FREIA COMPILATION DONE
#


#
# AIPO
#
#
# compile generated median_1_11
#

! initial function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);            /*0010*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0014*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0018*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0019*/

   ret |= freia_aipo_inf(o, t, i);                                      /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0024*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0028*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0032*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0033*/

   ret |= freia_aipo_sup(o, o, t);                                      /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! graphs

// graph for dag "dag_0" of module "median_1" in dot format
// DAG "dag_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t"];
  "19 E8" -> "21 <" [label="t"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "dag_cleaned_0" of module "median_1" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}

! updated function for AIPO

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);                  /*0010*/
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0014*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0018*/
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0019*/

   freia_aipo_inf(o, t, i);                                             /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0024*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0028*/
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);                   /*0032*/
   freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);                  /*0033*/

   freia_aipo_sup(o, o, t);                                             /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}
#
# SPOC
#

! initial function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);            /*0010*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0014*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0018*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0019*/

   ret |= freia_aipo_inf(o, t, i);                                      /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0024*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0028*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0032*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0033*/

   ret |= freia_aipo_sup(o, o, t);                                      /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! graphs

// graph for dag "dag_0" of module "median_1" in dot format
// DAG "dag_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t"];
  "19 E8" -> "21 <" [label="t"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "dag_cleaned_0" of module "median_1" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "median_1_spoc_helper_0_0" of module "median_1" in dot format
// DAG "median_1_spoc_helper_0_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "median_1_spoc_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 14 ops and 0 copies, optimized to 14 ops and 0+0+0 copies
// split 0: 2 cuts
// # SPOC calls: 2

// FREIA-SPoC helper function for module median_1
freia_status median_1_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // i [0 input 0] -> [0 poc 0] 10 dilate_8c
  // nope
  // poc 10 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`t_11 [0 poc 0] -> [1 poc 0] 11 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`t_11 [1 input 0] -> [1 poc 0] 11 erode_8c
  // nope
  // poc 11 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`t_10 [1 poc 0] -> [2 poc 0] 14 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`t_10 [2 input 0] -> [2 poc 0] 14 erode_8c
  // nope
  // poc 14 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`t_9 [2 poc 0] -> [3 poc 0] 15 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`t_9 [3 input 0] -> [3 poc 0] 15 dilate_8c
  // nope
  // poc 15 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`t_8 [3 poc 0] -> [4 poc 0] 18 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`t_8 [4 input 0] -> [4 poc 0] 18 dilate_8c
  // nope
  // poc 18 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`t_7 [4 poc 0] -> [5 poc 0] 19 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`t_7 [5 input 0] -> [5 poc 0] 19 erode_8c
  // nope
  // poc 19 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`t_6 [5 poc 0] -> [5 alu] 21 inf
  // nope
  // i [0 input 1] -> [5 alu] 21 inf
  si.mux[0][3].op = SPOC_MUX_IN1;
  // i [1 input 1] -> [5 alu] 21 inf
  si.mux[1][3].op = SPOC_MUX_IN1;
  // i [2 input 1] -> [5 alu] 21 inf
  si.mux[2][3].op = SPOC_MUX_IN1;
  // i [3 input 1] -> [5 alu] 21 inf
  si.mux[3][3].op = SPOC_MUX_IN1;
  // i [4 input 1] -> [5 alu] 21 inf
  si.mux[4][3].op = SPOC_MUX_IN1;
  // i [5 input 1] -> [5 alu] 21 inf
  // nope
  // alu 21 inf stage 5
  si.alu[5][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 6
  // 0`t_6 [5 poc 0] -> [6 poc 0] 24 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`t_6 [6 input 0] -> [6 poc 0] 24 erode_8c
  // nope
  // poc 24 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`t_5 [6 poc 0] -> [7 poc 0] 25 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`t_5 [7 input 0] -> [7 poc 0] 25 dilate_8c
  // nope
  // poc 25 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 8
  // 0`t_4 [7 poc 0] -> [8 poc 0] 28 dilate_8c
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`t_4 [8 input 0] -> [8 poc 0] 28 dilate_8c
  // nope
  // poc 28 dilate_8c stage 8 side 0
  si.poc[8][0].op = SPOC_POC_DILATE;
  si.poc[8][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][0].kernel[i] = pi0[i];


  // STAGE 9
  // 0`t_3 [8 poc 0] -> [9 poc 0] 29 erode_8c
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`t_3 [9 input 0] -> [9 poc 0] 29 erode_8c
  // nope
  // poc 29 erode_8c stage 9 side 0
  si.poc[9][0].op = SPOC_POC_ERODE;
  si.poc[9][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][0].kernel[i] = pi0[i];


  // STAGE 10
  // 0`t_2 [9 poc 0] -> [10 poc 0] 32 erode_8c
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`t_2 [10 input 0] -> [10 poc 0] 32 erode_8c
  // nope
  // poc 32 erode_8c stage 10 side 0
  si.poc[10][0].op = SPOC_POC_ERODE;
  si.poc[10][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][0].kernel[i] = pi0[i];


  // output image 0`t_1 on 0 and image o_1 on 1
  // 0`t_1 [10 poc 0] -> [10 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`t_1 [10 output 0] -> [10 output 0] 0 null
  // nope

  // o_1 [5 alu] -> [10 output 1] 0 null
  si.mux[5][1].op = SPOC_MUX_IN1;
  si.mux[5][3].op = SPOC_MUX_IN0;
  // o_1 [6 input 1] -> [10 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // o_1 [7 input 1] -> [10 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;
  // o_1 [8 input 1] -> [10 output 1] 0 null
  si.mux[8][3].op = SPOC_MUX_IN1;
  // o_1 [9 input 1] -> [10 output 1] 0 null
  si.mux[9][3].op = SPOC_MUX_IN1;
  // o_1 [10 input 1] -> [10 output 1] 0 null
  si.mux[10][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // o_1 [10 output 1] -> [10 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module median_1
freia_status median_1_spoc_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`t_1 [0 input 0] -> [0 poc 0] 33 dilate_8c
  // nope
  // poc 33 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`t [0 poc 0] -> [0 alu] 35 sup
  // nope
  // o_1 [0 input 1] -> [0 alu] 35 sup
  // nope
  // alu 35 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image o on 0
  // o [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // o [0 output 0] -> [10 output 0] 0 null
  // o [1 input 0] -> [10 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // o [2 input 0] -> [10 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [10 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [10 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [10 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [10 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [10 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // o [8 input 0] -> [10 output 0] 0 null
  si.mux[8][0].op = SPOC_MUX_IN0;
  // o [9 input 0] -> [10 output 0] 0 null
  si.mux[9][0].op = SPOC_MUX_IN0;
  // o [10 input 0] -> [10 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_spoc_helper_0_0_0(t, o, i, freia_morpho_kernel_8c);         /*0010*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   
   // ret |= freia_cipo_open(t, i, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_spoc_helper_0_0_1(o, t, o, freia_morpho_kernel_8c);         /*0033*/
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! cleaned up function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_spoc_helper_0_0_0(t, o, i, freia_morpho_kernel_8c);         /*0010*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   
   // ret |= freia_cipo_open(t, i, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_spoc_helper_0_0_1(o, t, o, freia_morpho_kernel_8c);         /*0033*/
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}
#
# TERAPIX
#

! initial function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);            /*0010*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0014*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0018*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0019*/

   ret |= freia_aipo_inf(o, t, i);                                      /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0024*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0028*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0032*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0033*/

   ret |= freia_aipo_sup(o, o, t);                                      /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! graphs

// graph for dag "dag_0" of module "median_1" in dot format
// DAG "dag_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t"];
  "19 E8" -> "21 <" [label="t"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "dag_cleaned_0" of module "median_1" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "median_1_terapix_helper_0_0_0" of module "median_1" in dot format
// DAG "median_1_terapix_helper_0_0_0": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "median_1_terapix_helper_0_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "t_9" [shape=circle];

  // computation vertices
  "14 E8" [shape=box];
  "14 E8" -> "t_9";
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "10 D8";
}
// graph for dag "median_1_terapix_helper_0_0_1" of module "median_1" in dot format
// DAG "median_1_terapix_helper_0_0_1": #i=2 #o=2 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "median_1_terapix_helper_0_0_1" {
  // inputs
  "t_9" [shape=circle];
  "i" [shape=circle];

  // outputs
  "t_6" [shape=circle];
  "o_1" [shape=circle];

  // computation vertices
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "o_1";
  "i" -> "21 <";
  "19 E8" [shape=box];
  "19 E8" -> "21 <" [label="t_6"];
  "19 E8" -> "t_6";
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "t_9" -> "15 D8";
}
// graph for dag "median_1_terapix_helper_0_0_2" of module "median_1" in dot format
// DAG "median_1_terapix_helper_0_0_2": #i=1 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "median_1_terapix_helper_0_0_2" {
  // inputs
  "t_6" [shape=circle];

  // outputs
  "t_3" [shape=circle];

  // computation vertices
  "28 D8" [shape=box];
  "28 D8" -> "t_3";
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "t_6" -> "24 E8";
}
// graph for dag "median_1_terapix_helper_0_0_3" of module "median_1" in dot format
// DAG "median_1_terapix_helper_0_0_3": #i=2 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "median_1_terapix_helper_0_0_3" {
  // inputs
  "t_3" [shape=circle];
  "o_1" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "t_3" -> "29 E8";
  "o_1" -> "35 >";
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 14 ops and 0 copies, optimized to 14 ops and 0+0+0 copies

/* FREIA terapix helper function for module median_1
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 12
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 45
 * - communication: 24
 */
freia_status median_1_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 335;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for i
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for t_9
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module median_1
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 12
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 4 image operations in dag
 * dag length is 5, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 49
 * - communication: 48
 */
freia_status median_1_terapix_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][5];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 198;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(3) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: <(3,2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF3;
  // output copy 3 -> 2
  mcu_macro[0][4].xmin1 = imagelet_3;
  mcu_macro[1][4].xmin1 = imagelet_3;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for t_9
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for t_6
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for o_1
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 5;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module median_1
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 12
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 45
 * - communication: 24
 */
freia_status median_1_terapix_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 335;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for t_6
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for t_3
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module median_1
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 12
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 4 image operations in dag
 * dag length is 5, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 49
 * - communication: 36
 */
freia_status median_1_terapix_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 198;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(3) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: >(2,3) -> 1
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_io_1_0;
  mcu_macro[1][3].xmin3 = imagelet_io_1_1;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_SUP3;


  // inputs:
  // - imagelet 1 is i0 for t_3
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for o_1
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_terapix_helper_0_0_0(t, i, freia_morpho_kernel_8c);         /*0010*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_terapix_helper_0_0_1(t, o, t, i, freia_morpho_kernel_8c);   /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   
   // ret |= freia_cipo_open(t, i, c, 1);
   median_1_terapix_helper_0_0_2(t, t, freia_morpho_kernel_8c);         /*0024*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_terapix_helper_0_0_3(o, t, o, freia_morpho_kernel_8c);      /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! cleaned up function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_terapix_helper_0_0_0(t, i, freia_morpho_kernel_8c);         /*0010*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_terapix_helper_0_0_1(t, o, t, i, freia_morpho_kernel_8c);   /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   
   // ret |= freia_cipo_open(t, i, c, 1);
   median_1_terapix_helper_0_0_2(t, t, freia_morpho_kernel_8c);         /*0024*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_terapix_helper_0_0_3(o, t, o, freia_morpho_kernel_8c);      /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}
#
# OPENCL
#

! initial function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);            /*0010*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0014*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0018*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0019*/

   ret |= freia_aipo_inf(o, t, i);                                      /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0024*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0028*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0032*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0033*/

   ret |= freia_aipo_sup(o, o, t);                                      /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! graphs

// graph for dag "dag_0" of module "median_1" in dot format
// DAG "dag_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t"];
  "19 E8" -> "21 <" [label="t"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "dag_cleaned_0" of module "median_1" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "median_1_opencl_helper_0_0" of module "median_1" in dot format
// DAG "median_1_opencl_helper_0_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "median_1_opencl_helper_0_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "median_1_opencl_helper_0_0_1" of module "median_1" in dot format
// DAG "median_1_opencl_helper_0_0_1": #i=3 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "median_1_opencl_helper_0_0_1" {
  // inputs
  "t_1" [shape=circle];
  "t_6" [shape=circle];
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "i" -> "21 <";
  "t_6" -> "21 <";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "t_1" -> "33 D8";
}
// graph for dag "median_1_opencl_helper_D8_511" of module "median_1" in dot format
// DAG "median_1_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "median_1_opencl_helper_D8_511" {
  // inputs
  "t_4" [shape=circle];

  // outputs
  "t_3" [shape=circle];

  // computation vertices
  "28 D8" [shape=box];
  "28 D8" -> "t_3";
  "t_4" -> "28 D8";
}
// graph for dag "median_1_opencl_helper_E8_511" of module "median_1" in dot format
// DAG "median_1_opencl_helper_E8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "median_1_opencl_helper_E8_511" {
  // inputs
  "t_2" [shape=circle];

  // outputs
  "t_1" [shape=circle];

  // computation vertices
  "32 E8" [shape=box];
  "32 E8" -> "t_1";
  "t_2" -> "32 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 14 ops and 0 copies, optimized to 14 ops and 0+0+0 copies

// hold kernels for median_1_opencl_helper_E8_511
static cl_kernel median_1_opencl_helper_E8_511_kernel[2];

// compile kernels for median_1_opencl_helper_E8_511
static freia_status median_1_opencl_helper_E8_511_compile(void)
{
  // OpenCL source for median_1_opencl_helper_E8_511
  const char * median_1_opencl_helper_E8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function median_1_opencl_helper_E8_511\n"
    "KERNEL void median_1_opencl_helper_E8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t32 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t32 = PIXEL_INF(t32, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t32 = PIXEL_INF(t32, (is_N)? PIXEL_MAX: in0N);\n"
    "    t32 = PIXEL_INF(t32, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t32 = PIXEL_INF(t32, (is_W)? PIXEL_MAX: in0W);\n"
    "    t32 = PIXEL_INF(t32, in0);\n"
    "    t32 = PIXEL_INF(t32, (is_E)? PIXEL_MAX: in0E);\n"
    "    t32 = PIXEL_INF(t32, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t32 = PIXEL_INF(t32, (is_S)? PIXEL_MAX: in0S);\n"
    "    t32 = PIXEL_INF(t32, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t32;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(median_1_opencl_helper_E8_511_source, "median_1_opencl_helper_E8_511", "-DPIXEL8", &median_1_opencl_helper_E8_511_kernel[0]);
  err |= freia_op_compile_kernel(median_1_opencl_helper_E8_511_source, "median_1_opencl_helper_E8_511", "-DPIXEL16", &median_1_opencl_helper_E8_511_kernel[1]);
  return err;
}

// helper function median_1_opencl_helper_E8_511
freia_status median_1_opencl_helper_E8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= median_1_opencl_helper_E8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = median_1_opencl_helper_E8_511_kernel[bpp];

  // call kernel median_1_opencl_helper_E8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for median_1_opencl_helper_D8_511
static cl_kernel median_1_opencl_helper_D8_511_kernel[2];

// compile kernels for median_1_opencl_helper_D8_511
static freia_status median_1_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for median_1_opencl_helper_D8_511
  const char * median_1_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function median_1_opencl_helper_D8_511\n"
    "KERNEL void median_1_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t28 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t28 = PIXEL_SUP(t28, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t28 = PIXEL_SUP(t28, (is_N)? PIXEL_MIN: in0N);\n"
    "    t28 = PIXEL_SUP(t28, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t28 = PIXEL_SUP(t28, (is_W)? PIXEL_MIN: in0W);\n"
    "    t28 = PIXEL_SUP(t28, in0);\n"
    "    t28 = PIXEL_SUP(t28, (is_E)? PIXEL_MIN: in0E);\n"
    "    t28 = PIXEL_SUP(t28, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t28 = PIXEL_SUP(t28, (is_S)? PIXEL_MIN: in0S);\n"
    "    t28 = PIXEL_SUP(t28, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t28;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(median_1_opencl_helper_D8_511_source, "median_1_opencl_helper_D8_511", "-DPIXEL8", &median_1_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(median_1_opencl_helper_D8_511_source, "median_1_opencl_helper_D8_511", "-DPIXEL16", &median_1_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function median_1_opencl_helper_D8_511
freia_status median_1_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= median_1_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = median_1_opencl_helper_D8_511_kernel[bpp];

  // call kernel median_1_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for median_1_opencl_helper_0_0_1
static cl_kernel median_1_opencl_helper_0_0_1_kernel[2];

// compile kernels for median_1_opencl_helper_0_0_1
static freia_status median_1_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for median_1_opencl_helper_0_0_1
  const char * median_1_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function median_1_opencl_helper_0_0_1\n"
    "KERNEL void median_1_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t33 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t33 = PIXEL_SUP(t33, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t33 = PIXEL_SUP(t33, (is_N)? PIXEL_MIN: in0N);\n"
    "    t33 = PIXEL_SUP(t33, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t33 = PIXEL_SUP(t33, (is_W)? PIXEL_MIN: in0W);\n"
    "    t33 = PIXEL_SUP(t33, in0);\n"
    "    t33 = PIXEL_SUP(t33, (is_E)? PIXEL_MIN: in0E);\n"
    "    t33 = PIXEL_SUP(t33, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t33 = PIXEL_SUP(t33, (is_S)? PIXEL_MIN: in0S);\n"
    "    t33 = PIXEL_SUP(t33, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    PIXEL t21 = PIXEL_INF(in1, in2);\n"
    "    PIXEL t35 = PIXEL_SUP(t21, t33);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t35;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(median_1_opencl_helper_0_0_1_source, "median_1_opencl_helper_0_0_1", "-DPIXEL8", &median_1_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(median_1_opencl_helper_0_0_1_source, "median_1_opencl_helper_0_0_1", "-DPIXEL16", &median_1_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function median_1_opencl_helper_0_0_1
freia_status median_1_opencl_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= median_1_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = median_1_opencl_helper_0_0_1_kernel[bpp];

  // call kernel median_1_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 3, 0, 0, o0, i0, i1, i2);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function median_1

// opencl for dag 0

// opencl function median_1_opencl_helper_E8_511
KERNEL void median_1_opencl_helper_E8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t32 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t32 = PIXEL_INF(t32, (is_N|is_W)? PIXEL_MAX: in0NW);
    t32 = PIXEL_INF(t32, (is_N)? PIXEL_MAX: in0N);
    t32 = PIXEL_INF(t32, (is_N|is_E)? PIXEL_MAX: in0NE);
    t32 = PIXEL_INF(t32, (is_W)? PIXEL_MAX: in0W);
    t32 = PIXEL_INF(t32, in0);
    t32 = PIXEL_INF(t32, (is_E)? PIXEL_MAX: in0E);
    t32 = PIXEL_INF(t32, (is_S|is_W)? PIXEL_MAX: in0SW);
    t32 = PIXEL_INF(t32, (is_S)? PIXEL_MAX: in0S);
    t32 = PIXEL_INF(t32, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t32;
  }
}

// opencl function median_1_opencl_helper_D8_511
KERNEL void median_1_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t28 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t28 = PIXEL_SUP(t28, (is_N|is_W)? PIXEL_MIN: in0NW);
    t28 = PIXEL_SUP(t28, (is_N)? PIXEL_MIN: in0N);
    t28 = PIXEL_SUP(t28, (is_N|is_E)? PIXEL_MIN: in0NE);
    t28 = PIXEL_SUP(t28, (is_W)? PIXEL_MIN: in0W);
    t28 = PIXEL_SUP(t28, in0);
    t28 = PIXEL_SUP(t28, (is_E)? PIXEL_MIN: in0E);
    t28 = PIXEL_SUP(t28, (is_S|is_W)? PIXEL_MIN: in0SW);
    t28 = PIXEL_SUP(t28, (is_S)? PIXEL_MIN: in0S);
    t28 = PIXEL_SUP(t28, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t28;
  }
}

// opencl function median_1_opencl_helper_0_0_1
KERNEL void median_1_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t33 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];

    // pixel computations
    t33 = PIXEL_SUP(t33, (is_N|is_W)? PIXEL_MIN: in0NW);
    t33 = PIXEL_SUP(t33, (is_N)? PIXEL_MIN: in0N);
    t33 = PIXEL_SUP(t33, (is_N|is_E)? PIXEL_MIN: in0NE);
    t33 = PIXEL_SUP(t33, (is_W)? PIXEL_MIN: in0W);
    t33 = PIXEL_SUP(t33, in0);
    t33 = PIXEL_SUP(t33, (is_E)? PIXEL_MIN: in0E);
    t33 = PIXEL_SUP(t33, (is_S|is_W)? PIXEL_MIN: in0SW);
    t33 = PIXEL_SUP(t33, (is_S)? PIXEL_MIN: in0S);
    t33 = PIXEL_SUP(t33, (is_S|is_E)? PIXEL_MIN: in0SE);
    PIXEL t21 = PIXEL_INF(in1, in2);
    PIXEL t35 = PIXEL_SUP(t21, t33);

    // set output pixels
    p0[i] = t35;
  }
}

! updated function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   // hardware accelerator generated variable
   freia_data2d *t_6 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_opencl_helper_D8_511(t, i);                                 /*0010*/
   median_1_opencl_helper_E8_511(t, t);                                 /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_opencl_helper_E8_511(t, t);                                 /*0014*/
   median_1_opencl_helper_D8_511(t, t);                                 /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_opencl_helper_D8_511(t, t);                                 /*0018*/
   median_1_opencl_helper_E8_511(t_6, t);                               /*0019*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   median_1_opencl_helper_E8_511(t, t_6);                               /*0024*/
   median_1_opencl_helper_D8_511(t, t);                                 /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_opencl_helper_D8_511(t, t);                                 /*0028*/
   median_1_opencl_helper_E8_511(t, t);                                 /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_opencl_helper_E8_511(t, t);                                 /*0032*/

   median_1_opencl_helper_0_0_1(o, t, t_6, i);                          /*0033*/
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   freia_common_destruct_data(t_6);
   return ret;                                                          /*0039*/
}

! cleaned up function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret = 0;                                                /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   // hardware accelerator generated variable
   freia_data2d *t_6 = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   median_1_opencl_helper_D8_511(t, i);                                 /*0010*/
   median_1_opencl_helper_E8_511(t, t);                                 /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_opencl_helper_E8_511(t, t);                                 /*0014*/
   median_1_opencl_helper_D8_511(t, t);                                 /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_opencl_helper_D8_511(t, t);                                 /*0018*/
   median_1_opencl_helper_E8_511(t_6, t);                               /*0019*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   median_1_opencl_helper_E8_511(t, t_6);                               /*0024*/
   median_1_opencl_helper_D8_511(t, t);                                 /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   median_1_opencl_helper_D8_511(t, t);                                 /*0028*/
   median_1_opencl_helper_E8_511(t, t);                                 /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   median_1_opencl_helper_E8_511(t, t);                                 /*0032*/

   median_1_opencl_helper_0_0_1(o, t, t_6, i);                          /*0033*/
   
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   freia_common_destruct_data(t_6);
   return ret;                                                          /*0039*/
}
#
# SIGMAC
#
#
# compile generated median_1_11
#

! initial function

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   freia_data2d *t = freia_common_create_data(i->bpp, i->widthWa, i->heightWa);        /*0006*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = freia_aipo_dilate_8c(t, i, freia_morpho_kernel_8c);            /*0010*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0011*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0014*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0015*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0018*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0019*/

   ret |= freia_aipo_inf(o, t, i);                                      /*0021*/
   
   // ret |= freia_cipo_open(t, i, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0024*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0025*/
   
   // ret |= freia_cipo_close(t, t, c, 1);
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0028*/
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0029*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   ret |= freia_aipo_erode_8c(t, t, freia_morpho_kernel_8c);            /*0032*/
   ret |= freia_aipo_dilate_8c(t, t, freia_morpho_kernel_8c);           /*0033*/

   ret |= freia_aipo_sup(o, o, t);                                      /*0035*/
   
   // cleanup
   ret |= freia_common_destruct_data(t);                                /*0038*/
   return ret;                                                          /*0039*/
}

! graphs

// graph for dag "dag_0" of module "median_1" in dot format
// DAG "dag_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t"];
  "19 E8" -> "21 <" [label="t"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t"];
  "i" -> "21 <";
  "i" -> "10 D8";
}
// graph for dag "dag_cleaned_0" of module "median_1" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=14 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "o" [shape=circle];

  // computation vertices
  "35 >" [shape=trapezium,orientation=270];
  "35 >" -> "o";
  "33 D8" [shape=box];
  "33 D8" -> "35 >" [label="t"];
  "32 E8" [shape=box];
  "32 E8" -> "33 D8" [label="t_1"];
  "29 E8" [shape=box];
  "29 E8" -> "32 E8" [label="t_2"];
  "28 D8" [shape=box];
  "28 D8" -> "29 E8" [label="t_3"];
  "25 D8" [shape=box];
  "25 D8" -> "28 D8" [label="t_4"];
  "24 E8" [shape=box];
  "24 E8" -> "25 D8" [label="t_5"];
  "21 <" [shape=trapezium,orientation=270];
  "21 <" -> "35 >" [label="o_1"];
  "19 E8" [shape=box];
  "19 E8" -> "24 E8" [label="t_6"];
  "19 E8" -> "21 <" [label="t_6"];
  "18 D8" [shape=box];
  "18 D8" -> "19 E8" [label="t_7"];
  "15 D8" [shape=box];
  "15 D8" -> "18 D8" [label="t_8"];
  "14 E8" [shape=box];
  "14 E8" -> "15 D8" [label="t_9"];
  "11 E8" [shape=box];
  "11 E8" -> "14 E8" [label="t_10"];
  "10 D8" [shape=box];
  "10 D8" -> "11 E8" [label="t_11"];
  "i" -> "21 <";
  "i" -> "10 D8";
}

! updated function for OPENCL

freia_status median_1(freia_data2d *o, freia_data2d *i)
{
   freia_status ret;                                                    /*0005*/
   
   // int32_t c = 8;
   // ret =  freia_cipo_close(t, i, c, 1);
   ret = 0;                                                             /*0010*/
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   
   // ret |= freia_cipo_open(t, i, c, 1);
   
   // ret |= freia_cipo_close(t, t, c, 1);
   
   // ret |= freia_cipo_open(t, t, c, 1);
   
   ret |= freia_mppa_launch(0, 1, 1, 0, 0, i, o);                       /*0035*/
   
   // cleanup
   ret |= 0;                                                            /*0038*/
   return ret;                                                          /*0039*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=median_1 fname=median_1_sigmac_helper_0 split=0


/*#####################################################################*/
/*################ median_1_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_INF(pi1, pi0);
  int16_t po1 = PIXEL_SUP(po0, pi2);
  outp[0][i] = po1;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
median_1_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup1 = new rep(2, width);
    agent dil5 = new dilate_pi0_0(width, height);
    agent ero5 = new erode_pi0_0(width, height);
    agent ero4 = new erode_pi0_0(width, height);
    agent dil4 = new dilate_pi0_0(width, height);
    agent dil3 = new dilate_pi0_0(width, height);
    agent dup0 = new rep(2, width);
    agent ero3 = new erode_pi0_0(width, height);
    agent ero2 = new erode_pi0_0(width, height);
    agent dil2 = new dilate_pi0_0(width, height);
    agent dil1 = new dilate_pi0_0(width, height);
    agent ero1 = new erode_pi0_0(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);

    // connections...
    connect (strin.output[0] /* i */, dup1.input);
    connect (dup1.output[1], cpd0.input[0]);
    connect (dup1.output[0], dil5.input);
    connect (dil5.output, ero5.input);
    connect (ero5.output, ero4.input);
    connect (ero4.output, dil4.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, ero3.input);
    connect (ero3.output, dup0.input);
    connect (dup0.output[1], ero2.input);
    connect (dup0.output[0], cpd0.input[1]);
    connect (ero2.output, dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, dil0.input);
    connect (dil0.output, cpd0.input[2]);
    connect (cpd0.output[0], strout.input[0] /* o */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new median_1_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


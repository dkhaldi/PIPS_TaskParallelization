#
# AIPO
#
#
# compile generated freia_42
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
// DAG "dag_0": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
// DAG "dag_cleaned_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}

! updated function for AIPO

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   // hardware accelerator generated variable
   freia_data2d *i1_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i1_1 = freia_common_create_data(i1->bpp, i1->widthWa, i1->heightWa);
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1_1, i3, i1);                                        /*0037*/
   freia_aipo_absdiff(i1, i2, i1_1);                                    /*0038*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i3, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i1_1, i6);                                    /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i1_1);
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# SPOC
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
// DAG "dag_0": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
// DAG "dag_cleaned_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_spoc_helper_0_0" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_0": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i1_2" [shape=circle];
  "i6_2" [shape=circle];

  // computation vertices
  "42 E8" [shape=box];
  "42 E8" -> "i6_2";
  "i4" -> "42 E8";
  "36 E8" [shape=box];
  "36 E8" -> "i1_2";
  "i0" -> "36 E8";
}
// graph for dag "freia_42_spoc_helper_0_1" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_1": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_1" {
  // inputs
  "i0" [shape=circle];
  "i1_2" [shape=circle];

  // outputs
  "i3" [shape=circle];
  "i1_1" [shape=circle];

  // computation vertices
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "i1_1";
  "i1_2" -> "37 -";
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "35 D8" -> "i3";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_spoc_helper_0_2" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_2" {
  // inputs
  "i1_1" [shape=circle];
  "i2" [shape=circle];

  // outputs
  "i1" [shape=circle];

  // computation vertices
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "i1";
  "i1_1" -> "38 -|";
  "i2" -> "38 -|";
}
// graph for dag "freia_42_spoc_helper_0_3" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_3": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_3" {
  // inputs
  "i3" [shape=circle];
  "i6_2" [shape=circle];

  // outputs
  "i6_1" [shape=circle];

  // computation vertices
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "i6_1";
  "i6_2" -> "43 -";
  "i3" -> "43 -";
}
// graph for dag "freia_42_spoc_helper_0_4" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_4": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_4" {
  // inputs
  "i1_1" [shape=circle];
  "i6_1" [shape=circle];

  // outputs
  "i6" [shape=circle];

  // computation vertices
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "i6";
  "i6_1" -> "44 -|";
  "i1_1" -> "44 -|";
}
// graph for dag "freia_42_spoc_helper_0_5" of module "freia_42" in dot format
// DAG "freia_42_spoc_helper_0_5": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_spoc_helper_0_5" {
  // inputs
  "i1" [shape=circle];
  "i6" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "i1" -> "45 <";
  "i6" -> "45 <";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 11 ops and 0 copies, optimized to 8 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// split 4: 1 cut
// split 5: 1 cut
// # SPOC calls: 6

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i0 [0 input 0] -> [0 poc 0] 36 erode_8c
  // nope
  // poc 36 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`i4 [0 input 1] -> [0 poc 1] 42 erode_8c
  // nope
  // poc 42 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // output image 0`i1_2 on 0 and image 0`i6_2 on 1
  // 0`i1_2 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1_2 [0 output 0] -> [7 output 0] 0 null
  // 0`i1_2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i1_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`i6_2 [0 poc 1] -> [0 output 1] 0 null
  si.mux[0][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`i6_2 [0 output 1] -> [7 output 1] 0 null
  // 0`i6_2 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`i6_2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i0 [0 input 0] -> [0 poc 0] 35 dilate_8c
  // nope
  // poc 35 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`i3 [0 poc 0] -> [0 alu] 37 sub
  // nope
  // 0`i1_2 [0 input 1] -> [0 alu] 37 sub
  // nope
  // alu 37 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`i3 on 0 and image 0`i1_1 on 1
  // 0`i3 [0 poc 0] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i3 [0 output 0] -> [7 output 0] 0 null
  // 0`i3 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i3 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i3 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i3 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i3 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i3 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i3 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`i1_1 [0 alu] -> [0 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1_1 [0 output 1] -> [7 output 1] 0 null
  // 0`i1_1 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`i1_1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1_1 [0 input 0] -> [0 alu] 38 absdiff
  // nope
  // 0`i2 [0 input 1] -> [0 alu] 38 absdiff
  // nope
  // alu 38 absdiff stage 0
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN0_IN1;


  // output image 0`i1 on 0
  // 0`i1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i1 [0 output 0] -> [7 output 0] 0 null
  // 0`i1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i3 [0 input 0] -> [0 alu] 43 sub
  // nope
  // 0`i6_2 [0 input 1] -> [0 alu] 43 sub
  // nope
  // alu 43 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`i6_1 on 0
  // 0`i6_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i6_1 [0 output 0] -> [7 output 0] 0 null
  // 0`i6_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i6_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_4_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1_1 [0 input 0] -> [0 alu] 44 absdiff
  // nope
  // 0`i6_1 [0 input 1] -> [0 alu] 44 absdiff
  // nope
  // alu 44 absdiff stage 0
  si.alu[0][0].op = SPOC_ALU_ABSSUB_IN0_IN1;


  // output image 0`i6 on 0
  // 0`i6 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i6 [0 output 0] -> [7 output 0] 0 null
  // 0`i6 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i6 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i6 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i6 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i6 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i6 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i6 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module freia_42
freia_status freia_42_spoc_helper_0_5_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`i1 [0 input 0] -> [0 alu] 45 inf
  // nope
  // 0`i6 [0 input 1] -> [0 alu] 45 inf
  // nope
  // alu 45 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // output image 0`i7 on 0
  // 0`i7 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`i7 [0 output 0] -> [7 output 0] 0 null
  // 0`i7 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`i7 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`i7 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`i7 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`i7 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`i7 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`i7 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   // hardware accelerator generated variable
   freia_data2d *i1_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i1_1 = freia_common_create_data(i1->bpp, i1->widthWa, i1->heightWa);
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/
   freia_42_spoc_helper_0_0_0(i1, i6, i0, i4, freia_morpho_kernel_8c);  /*0036*/

   freia_42_spoc_helper_0_1_0(i3, i1_1, i0, i1, freia_morpho_kernel_8c);               /*0037*/
   freia_42_spoc_helper_0_2_0(i1, i1_1, i2);                            /*0038*/
   freia_42_spoc_helper_0_3_0(i6, i3, i6);                              /*0043*/
   freia_42_spoc_helper_0_4_0(i6, i1_1, i6);                            /*0044*/
   freia_42_spoc_helper_0_5_0(i7, i1, i6);                              /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i1_1);
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! cleaned up function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   // hardware accelerator generated variable
   freia_data2d *i1_1 = 0;

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i1_1 = freia_common_create_data(i1->bpp, i1->widthWa, i1->heightWa);
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/
   freia_42_spoc_helper_0_0_0(i1, i6, i0, i4, freia_morpho_kernel_8c);  /*0036*/

   freia_42_spoc_helper_0_1_0(i3, i1_1, i0, i1, freia_morpho_kernel_8c);               /*0037*/
   freia_42_spoc_helper_0_2_0(i1, i1_1, i2);                            /*0038*/
   freia_42_spoc_helper_0_3_0(i6, i3, i6);                              /*0043*/
   freia_42_spoc_helper_0_4_0(i6, i1_1, i6);                            /*0044*/
   freia_42_spoc_helper_0_5_0(i7, i1, i6);                              /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i1_1);
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# TERAPIX
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
// DAG "dag_0": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
// DAG "dag_cleaned_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_terapix_helper_0_0_0" of module "freia_42" in dot format
// DAG "freia_42_terapix_helper_0_0_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_terapix_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "i0" -> "35 D8";
  "i0" -> "36 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 11 ops and 0 copies, optimized to 8 ops and 0+0+0 copies

/* FREIA terapix helper function for module freia_42
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 1 output image
 * 8 image operations in dag
 * dag length is 5, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 65
 * - communication: 96
 */
freia_status freia_42_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const int32_t * pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 5 computation imagelets
  // - 3 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 126;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 128;
  int imagelet_3 = 256;
  int imagelet_4 = 384;
  int imagelet_5 = 512;
  int imagelet_6 = 640;
  int imagelet_7 = 768;
  int imagelet_8 = 896;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_6;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_7;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_8;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 4
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_4;
  mcu_macro[1][0].xmin2 = imagelet_4;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(3) -> 5
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_5;
  mcu_macro[1][1].xmin2 = imagelet_5;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(1) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_3_0;
  mcu_macro[1][2].xmin2 = imagelet_io_3_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: -(3,4) -> 4
  mcu_macro[0][3].xmin1 = imagelet_io_3_0;
  mcu_macro[1][3].xmin1 = imagelet_io_3_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_4;
  mcu_macro[1][3].xmin2 = imagelet_4;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = imagelet_4;
  mcu_macro[1][3].xmin3 = imagelet_4;
  mcu_macro[0][3].ymin3 = 0;
  mcu_macro[1][3].ymin3 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_SUB3;
  // 4: -|(2,4) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_4;
  mcu_macro[1][4].xmin2 = imagelet_4;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = imagelet_io_2_0;
  mcu_macro[1][4].xmin3 = imagelet_io_2_1;
  mcu_macro[0][4].ymin3 = 0;
  mcu_macro[1][4].ymin3 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  // 5: -(3,5) -> 5
  mcu_macro[0][5].xmin1 = imagelet_io_3_0;
  mcu_macro[1][5].xmin1 = imagelet_io_3_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_5;
  mcu_macro[1][5].xmin2 = imagelet_5;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_5;
  mcu_macro[1][5].xmin3 = imagelet_5;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SUB3;
  // 6: -|(4,5) -> 5
  mcu_macro[0][6].xmin1 = imagelet_4;
  mcu_macro[1][6].xmin1 = imagelet_4;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_5;
  mcu_macro[1][6].xmin2 = imagelet_5;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_5;
  mcu_macro[1][6].xmin3 = imagelet_5;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ABS_DIFF3;
  // 7: <(5,2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_5;
  mcu_macro[1][7].xmin1 = imagelet_5;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_2_0;
  mcu_macro[1][7].xmin2 = imagelet_io_2_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = imagelet_io_1_0;
  mcu_macro[1][7].xmin3 = imagelet_io_1_1;
  mcu_macro[0][7].ymin3 = 0;
  mcu_macro[1][7].ymin3 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_INF3;


  // inputs:
  // - imagelet 1 is i0 for i0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for i2
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for i4
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 1 is o0 for i7
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1, i2);

  // extract measures

  return ret;
}


! updated function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_terapix_helper_0_0_0(i7, i0, i2, i4, freia_morpho_kernel_8c);              /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! cleaned up function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_terapix_helper_0_0_0(i7, i0, i2, i4, freia_morpho_kernel_8c);              /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# OPENCL
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
// DAG "dag_0": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
// DAG "dag_cleaned_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_opencl_helper_0_0" of module "freia_42" in dot format
// DAG "freia_42_opencl_helper_0_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_opencl_helper_0_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "freia_42_opencl_helper_0_0_0" of module "freia_42" in dot format
// DAG "freia_42_opencl_helper_0_0_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "freia_42_opencl_helper_0_0_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 11 ops and 0 copies, optimized to 8 ops and 0+0+0 copies

// hold kernels for freia_42_opencl_helper_0_0_0
static cl_kernel freia_42_opencl_helper_0_0_0_kernel[2];

// compile kernels for freia_42_opencl_helper_0_0_0
static freia_status freia_42_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for freia_42_opencl_helper_0_0_0
  const char * freia_42_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function freia_42_opencl_helper_0_0_0\n"
    "KERNEL void freia_42_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t42 = PIXEL_MAX;\n"
    "    PIXEL in2NW = (is_N|is_W)? 0: j2[i-pitch-1];\n"
    "    PIXEL in2N = (is_N)? 0: j2[i-pitch];\n"
    "    PIXEL in2NE = (is_N|is_E)? 0: j2[i-pitch+1];\n"
    "    PIXEL in2W = (is_W)? 0: j2[i-1];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in2E = (is_E)? 0: j2[i+1];\n"
    "    PIXEL in2SW = (is_S|is_W)? 0: j2[i+pitch-1];\n"
    "    PIXEL in2S = (is_S)? 0: j2[i+pitch];\n"
    "    PIXEL in2SE = (is_S|is_E)? 0: j2[i+pitch+1];\n"
    "    PIXEL t35 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL t36 = PIXEL_MAX;\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t42 = PIXEL_INF(t42, (is_N|is_W)? PIXEL_MAX: in2NW);\n"
    "    t42 = PIXEL_INF(t42, (is_N)? PIXEL_MAX: in2N);\n"
    "    t42 = PIXEL_INF(t42, (is_N|is_E)? PIXEL_MAX: in2NE);\n"
    "    t42 = PIXEL_INF(t42, (is_W)? PIXEL_MAX: in2W);\n"
    "    t42 = PIXEL_INF(t42, in2);\n"
    "    t42 = PIXEL_INF(t42, (is_E)? PIXEL_MAX: in2E);\n"
    "    t42 = PIXEL_INF(t42, (is_S|is_W)? PIXEL_MAX: in2SW);\n"
    "    t42 = PIXEL_INF(t42, (is_S)? PIXEL_MAX: in2S);\n"
    "    t42 = PIXEL_INF(t42, (is_S|is_E)? PIXEL_MAX: in2SE);\n"
    "    t35 = PIXEL_SUP(t35, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t35 = PIXEL_SUP(t35, (is_N)? PIXEL_MIN: in0N);\n"
    "    t35 = PIXEL_SUP(t35, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t35 = PIXEL_SUP(t35, (is_W)? PIXEL_MIN: in0W);\n"
    "    t35 = PIXEL_SUP(t35, in0);\n"
    "    t35 = PIXEL_SUP(t35, (is_E)? PIXEL_MIN: in0E);\n"
    "    t35 = PIXEL_SUP(t35, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t35 = PIXEL_SUP(t35, (is_S)? PIXEL_MIN: in0S);\n"
    "    t35 = PIXEL_SUP(t35, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    t36 = PIXEL_INF(t36, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t36 = PIXEL_INF(t36, (is_N)? PIXEL_MAX: in0N);\n"
    "    t36 = PIXEL_INF(t36, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t36 = PIXEL_INF(t36, (is_W)? PIXEL_MAX: in0W);\n"
    "    t36 = PIXEL_INF(t36, in0);\n"
    "    t36 = PIXEL_INF(t36, (is_E)? PIXEL_MAX: in0E);\n"
    "    t36 = PIXEL_INF(t36, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t36 = PIXEL_INF(t36, (is_S)? PIXEL_MAX: in0S);\n"
    "    t36 = PIXEL_INF(t36, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t37 = PIXEL_SUB(t35, t36);\n"
    "    PIXEL t43 = PIXEL_SUB(t35, t42);\n"
    "    PIXEL t38 = PIXEL_ABSDIFF(in1, t37);\n"
    "    PIXEL t44 = PIXEL_ABSDIFF(t37, t43);\n"
    "    PIXEL t45 = PIXEL_INF(t44, t38);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t45;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(freia_42_opencl_helper_0_0_0_source, "freia_42_opencl_helper_0_0_0", "-DPIXEL8", &freia_42_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(freia_42_opencl_helper_0_0_0_source, "freia_42_opencl_helper_0_0_0", "-DPIXEL16", &freia_42_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function freia_42_opencl_helper_0_0_0
freia_status freia_42_opencl_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= freia_42_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = freia_42_opencl_helper_0_0_0_kernel[bpp];

  // call kernel freia_42_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 1, 3, 0, 0, o0, i0, i1, i2);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function freia_42

// opencl for dag 0

// opencl function freia_42_opencl_helper_0_0_0
KERNEL void freia_42_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t42 = PIXEL_MAX;
    PIXEL in2NW = (is_N|is_W)? 0: j2[i-pitch-1];
    PIXEL in2N = (is_N)? 0: j2[i-pitch];
    PIXEL in2NE = (is_N|is_E)? 0: j2[i-pitch+1];
    PIXEL in2W = (is_W)? 0: j2[i-1];
    PIXEL in2 = j2[i];
    PIXEL in2E = (is_E)? 0: j2[i+1];
    PIXEL in2SW = (is_S|is_W)? 0: j2[i+pitch-1];
    PIXEL in2S = (is_S)? 0: j2[i+pitch];
    PIXEL in2SE = (is_S|is_E)? 0: j2[i+pitch+1];
    PIXEL t35 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL t36 = PIXEL_MAX;
    PIXEL in1 = j1[i];

    // pixel computations
    t42 = PIXEL_INF(t42, (is_N|is_W)? PIXEL_MAX: in2NW);
    t42 = PIXEL_INF(t42, (is_N)? PIXEL_MAX: in2N);
    t42 = PIXEL_INF(t42, (is_N|is_E)? PIXEL_MAX: in2NE);
    t42 = PIXEL_INF(t42, (is_W)? PIXEL_MAX: in2W);
    t42 = PIXEL_INF(t42, in2);
    t42 = PIXEL_INF(t42, (is_E)? PIXEL_MAX: in2E);
    t42 = PIXEL_INF(t42, (is_S|is_W)? PIXEL_MAX: in2SW);
    t42 = PIXEL_INF(t42, (is_S)? PIXEL_MAX: in2S);
    t42 = PIXEL_INF(t42, (is_S|is_E)? PIXEL_MAX: in2SE);
    t35 = PIXEL_SUP(t35, (is_N|is_W)? PIXEL_MIN: in0NW);
    t35 = PIXEL_SUP(t35, (is_N)? PIXEL_MIN: in0N);
    t35 = PIXEL_SUP(t35, (is_N|is_E)? PIXEL_MIN: in0NE);
    t35 = PIXEL_SUP(t35, (is_W)? PIXEL_MIN: in0W);
    t35 = PIXEL_SUP(t35, in0);
    t35 = PIXEL_SUP(t35, (is_E)? PIXEL_MIN: in0E);
    t35 = PIXEL_SUP(t35, (is_S|is_W)? PIXEL_MIN: in0SW);
    t35 = PIXEL_SUP(t35, (is_S)? PIXEL_MIN: in0S);
    t35 = PIXEL_SUP(t35, (is_S|is_E)? PIXEL_MIN: in0SE);
    t36 = PIXEL_INF(t36, (is_N|is_W)? PIXEL_MAX: in0NW);
    t36 = PIXEL_INF(t36, (is_N)? PIXEL_MAX: in0N);
    t36 = PIXEL_INF(t36, (is_N|is_E)? PIXEL_MAX: in0NE);
    t36 = PIXEL_INF(t36, (is_W)? PIXEL_MAX: in0W);
    t36 = PIXEL_INF(t36, in0);
    t36 = PIXEL_INF(t36, (is_E)? PIXEL_MAX: in0E);
    t36 = PIXEL_INF(t36, (is_S|is_W)? PIXEL_MAX: in0SW);
    t36 = PIXEL_INF(t36, (is_S)? PIXEL_MAX: in0S);
    t36 = PIXEL_INF(t36, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t37 = PIXEL_SUB(t35, t36);
    PIXEL t43 = PIXEL_SUB(t35, t42);
    PIXEL t38 = PIXEL_ABSDIFF(in1, t37);
    PIXEL t44 = PIXEL_ABSDIFF(t37, t43);
    PIXEL t45 = PIXEL_INF(t44, t38);

    // set output pixels
    p0[i] = t45;
  }
}

! updated function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_opencl_helper_0_0_0(i7, i0, i2, i4);                        /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! cleaned up function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_42_opencl_helper_0_0_0(i7, i0, i2, i4);                        /*0035*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}
#
# SIGMAC
#
#
# compile generated freia_42
#

! initial function

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i1;                                                    /*0010*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i3;                                                    /*0012*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i6;                                                    /*0014*/
   freia_data2d *i7;                                                    /*0015*/
   freia_data2d *i5;                                                    /*0016*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0021*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0023*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i5 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0025*/
   i6 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0026*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_aipo_dilate_8c(i3, i0, freia_morpho_kernel_8c);                /*0035*/
   freia_aipo_erode_8c(i1, i0, freia_morpho_kernel_8c);                 /*0036*/
   freia_aipo_sub(i1, i3, i1);                                          /*0037*/
   freia_aipo_absdiff(i1, i2, i1);                                      /*0038*/
   freia_aipo_dilate_8c(i5, i0, freia_morpho_kernel_8c);                /*0039*/
   freia_aipo_erode_8c(i2, i0, freia_morpho_kernel_8c);                 /*0040*/
   freia_aipo_sub(i2, i5, i2);                                          /*0041*/
   freia_aipo_erode_8c(i6, i4, freia_morpho_kernel_8c);                 /*0042*/
   freia_aipo_sub(i6, i5, i6);                                          /*0043*/
   freia_aipo_absdiff(i6, i2, i6);                                      /*0044*/
   freia_aipo_inf(i7, i6, i1);                                          /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i1);                                      /*0050*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i3);                                      /*0052*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i5);                                      /*0054*/
   freia_common_destruct_data(i6);                                      /*0055*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! graphs

// graph for dag "dag_0" of module "freia_42" in dot format
// DAG "dag_0": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6"];
  "i4" -> "42 E8";
  "41 -" [shape=trapezium,orientation=270];
  "41 -" -> "44 -|" [label="i2"];
  "40 E8" [shape=box];
  "40 E8" -> "41 -" [label="i2"];
  "39 D8" [shape=box];
  "39 D8" -> "43 -" [label="i5"];
  "39 D8" -> "41 -" [label="i5"];
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "38 -|" [label="i1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1"];
  "35 D8" [shape=box];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "40 E8";
  "i0" -> "39 D8";
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}
// graph for dag "dag_cleaned_0" of module "freia_42" in dot format
// DAG "dag_cleaned_0": #i=3 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "i0" [shape=circle];
  "i2" [shape=circle];
  "i4" [shape=circle];

  // outputs
  "i7" [shape=circle];

  // computation vertices
  "45 <" [shape=trapezium,orientation=270];
  "45 <" -> "i7";
  "44 -|" [shape=trapezium,orientation=270];
  "44 -|" -> "45 <" [label="i6"];
  "43 -" [shape=trapezium,orientation=270];
  "43 -" -> "44 -|" [label="i6_1"];
  "42 E8" [shape=box];
  "42 E8" -> "43 -" [label="i6_2"];
  "i4" -> "42 E8";
  "38 -|" [shape=trapezium,orientation=270];
  "38 -|" -> "45 <" [label="i1"];
  "i2" -> "38 -|";
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "44 -|" [label="i1_1"];
  "37 -" -> "38 -|" [label="i1_1"];
  "36 E8" [shape=box];
  "36 E8" -> "37 -" [label="i1_2"];
  "35 D8" [shape=box];
  "35 D8" -> "43 -" [label="i3"];
  "35 D8" -> "37 -" [label="i3"];
  "i0" -> "36 E8";
  "i0" -> "35 D8";
}

! updated function for OPENCL

int freia_42(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *i0;                                                    /*0009*/
   freia_data2d *i2;                                                    /*0011*/
   freia_data2d *i4;                                                    /*0013*/
   freia_data2d *i7;                                                    /*0015*/

   freia_common_open_input(&fdin, 0);                                   /*0018*/

   i0 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0020*/
   i2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0022*/
   i4 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0024*/
   i7 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0027*/

   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0029*/

   freia_common_rx_image(i0, &fdin);                                    /*0031*/
   freia_common_rx_image(i2, &fdin);                                    /*0032*/
   freia_common_rx_image(i4, &fdin);                                    /*0033*/

   freia_mppa_launch(0, 3, 1, 0, 0, i0, i2, i4, i7);                    /*0045*/

   freia_common_tx_image(i7, &fdout);                                   /*0047*/

   freia_common_destruct_data(i0);                                      /*0049*/
   freia_common_destruct_data(i2);                                      /*0051*/
   freia_common_destruct_data(i4);                                      /*0053*/
   freia_common_destruct_data(i7);                                      /*0056*/

   freia_common_close_input(&fdin);                                     /*0058*/
   freia_common_close_output(&fdout);                                   /*0059*/
   return 0;                                                            /*0060*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=freia_42 fname=freia_42_sigmac_helper_0 split=0


/*#####################################################################*/
/*################ freia_42_sigmac_helper_0_0 Subgraph ################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 2, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_SUB(pi1, pi0);
  int16_t po1 = PIXEL_ABSD(pi2, po0);
  outp[0][i] = po1;
  outp[1][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_0_1, int16_t, 4, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t po0 = PIXEL_SUB(pi1, pi0);
  int16_t po1 = PIXEL_ABSD(pi2, po0);
  int16_t po2 = PIXEL_INF(po1, pi3);
  outp[0][i] = po2;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
freia_42_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 3, width, height);
    agent strin = new Streamer_In(width, height, 3);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup1 = new rep(2, width);
    agent dup0 = new rep(2, width);
    agent dil0 = new dilate_pi0_0(width, height);
    agent ero1 = new erode_pi0_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);
    agent ero0 = new erode_pi0_0(width, height);
    agent cpd1 = new agent_compound_0_1(width);

    // connections...
    connect (strin.output[0] /* i0 */, dup1.input);
    connect (dup1.output[1], ero1.input);
    connect (dup1.output[0], dil0.input);
    connect (dil0.output, dup0.input);
    connect (dup0.output[1], cpd1.input[1]);
    connect (dup0.output[0], cpd0.input[1]);
    connect (ero1.output, cpd0.input[0]);
    connect (cpd0.output[1], cpd1.input[2]);
    connect (strin.output[1] /* i2 */, cpd0.input[2]);
    connect (cpd0.output[0], cpd1.input[3]);
    connect (strin.output[2] /* i4 */, ero0.input);
    connect (ero0.output, cpd1.input[0]);
    connect (cpd1.output[0], strout.input[0] /* i7 */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new freia_42_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


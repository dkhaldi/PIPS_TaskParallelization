#
# AIPO
#
#
# compile generated burner
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=1 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}

! updated function for AIPO

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=1 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "22 =" [shape=circle];
  "22 =" -> "in";
  "imin" -> "22 =";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1"];
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "432 >" [label="imWork1"];
  "430 thr" [shape=parallelogram];
  "430 thr" -> "432 >" [label="imZone3"];
  "430 thr" -> "imZone3";
  "429 thr" [shape=parallelogram];
  "429 thr" -> "431 >" [label="imZone2"];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "431 >" [label="imZone1"];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "427 -" [label="imClose"];
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out"];
  "452 vol" [shape=diamond];
  "451 >" [shape=trapezium,orientation=270];
  "451 >" -> "453 E8" [label="out"];
  "451 >" -> "452 vol" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 >" [label="out"];
  "449 >" [shape=trapezium,orientation=270];
  "449 >" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 >" [label="out"];
  "447 >" [shape=trapezium,orientation=270];
  "447 >" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 >" [label="out"];
  "445 >" [shape=trapezium,orientation=270];
  "445 >" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 >" [label="out"];
  "443 >" [shape=trapezium,orientation=270];
  "443 >" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 >" [label="out"];
  "441 >" [shape=trapezium,orientation=270];
  "441 >" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 >" [label="out"];
  "439 >" [shape=trapezium,orientation=270];
  "439 >" -> "440 E8" [label="out"];
  "imWork1" -> "454 >";
  "imWork1" -> "451 >";
  "imWork1" -> "449 >";
  "imWork1" -> "447 >";
  "imWork1" -> "445 >";
  "imWork1" -> "443 >";
  "imWork1" -> "441 >";
  "imWork1" -> "439 >";
  "438 E8" [shape=box];
  "438 E8" -> "439 >" [label="out"];
  "out" -> "438 E8";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "462 >" [label="imWork1"];
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "461 >" [label="imWork1"];
  "459 <_" [shape=trapezium,orientation=270];
  "459 <_" -> "462 >" [label="out"];
  "out" -> "459 <_";
  "458 <_" [shape=trapezium,orientation=270];
  "458 <_" -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <_";
  "457 <_" [shape=trapezium,orientation=270];
  "457 <_" -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <_";
  "456 <_" [shape=trapezium,orientation=270];
  "456 <_" -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <_";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out_1"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1_1"];
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "432 >" [label="imWork1_2"];
  "430 thr" [shape=parallelogram];
  "430 thr" -> "432 >" [label="imZone3"];
  "430 thr" -> "imZone3";
  "429 thr" [shape=parallelogram];
  "429 thr" -> "431 >" [label="imZone2"];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "431 >" [label="imZone1"];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "427 -" [label="imClose"];
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out_2"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_3"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_4"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_5"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_6"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_7"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_8"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_9"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_10"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_11"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_12"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_13"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_14"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_15"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_16"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_17"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_18"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_19"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_20"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_21"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_22"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_23"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_24"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_25"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_26"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_27"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_28"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_29"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_30"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_31"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_32"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_33"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_34"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_35"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_36"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_37"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_38"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_39"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_40"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_41"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_42"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_43"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_44"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_45"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_46"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_47"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_48"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_49"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_50"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_51"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_52"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_53"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_54"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_55"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_56"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_57"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_58"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_59"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_60"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_61"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_62"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_63"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_64"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_65"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_66"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_67"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_68"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out_69"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out_70"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out_71"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out_72"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out_73"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out_74"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out_75"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out_76"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out_77"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out_78"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out_79"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out_80"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out_81"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out_82"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out_83"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out_84"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out_85"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out_86"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out_87"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out_88"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out_89"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out_90"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out_91"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out_92"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out_93"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out_94"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out_95"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out_96"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out_97"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out_98"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out_99"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out_100"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out_101"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out_102"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_103"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_104"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_105"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_106"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_107"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_108"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_109"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_110"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_111"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_112"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_113"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_114"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_115"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_116"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_117"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_118"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_119"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_120"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_121"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_122"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_123"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_124"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_125"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_126"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_127"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_128"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_129"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_130"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_131"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_132"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_133"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_134"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_135"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_136"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_137"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_138"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_139"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_140"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_141"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_142"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_143"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_144"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_145"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_146"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_147"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_148"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_149"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_150"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_151"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_152"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_153"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_154"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_155"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_156"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_157"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_158"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_159"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_160"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_161"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_162"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_163"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_164"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_165"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_166"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_167"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_168"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_169"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out_170"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out_171"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out_172"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out_173"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out_174"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out_175"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out_176"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out_177"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out_178"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out_179"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out_180"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out_181"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out_182"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out_183"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out_184"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out_185"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out_186"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out_187"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out_188"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_189"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_190"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out_191"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out_192"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out_193"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out_194"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out_195"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out_196"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out_197"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out_198"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out_199"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out_200"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out_201"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1_3"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_4"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_5"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_6"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_7"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_8"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_9"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_10"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_11"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_12"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_13"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_14"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_15"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_16"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_17"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_18"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_19"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_20"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_21"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_22"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_23"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_24"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_25"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_26"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_27"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_28"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_29"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_30"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_31"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_32"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_33"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_34"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_35"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_36"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_37"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_38"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_39"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_40"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_41"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_42"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_43"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_44"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_45"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_46"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_47"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_48"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_49"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_50"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_51"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_52"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_53"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_54"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_55"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_56"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_57"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_58"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_59"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_60"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_61"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_62"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_63"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_64"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_65"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_66"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_67"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_68"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_69"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_70"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_71"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_72"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1_73"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1_74"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1_75"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1_76"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1_77"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1_78"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1_79"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1_80"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1_81"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1_82"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1_83"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1_84"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1_85"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1_86"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1_87"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1_88"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1_89"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1_90"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1_91"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1_92"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1_93"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1_94"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1_95"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1_96"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1_97"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1_98"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1_99"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1_100"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1_101"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1_102"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1_103"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_104"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_105"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_106"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_107"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_108"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_109"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_110"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_111"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_112"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_113"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_114"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_115"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_116"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_117"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_118"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_119"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_120"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_121"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_122"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_123"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_124"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_125"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_126"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_127"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_128"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_129"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_130"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_131"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_132"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_133"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_134"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_135"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_136"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_137"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_138"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_139"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_140"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_141"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_142"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_143"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_144"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_145"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_146"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_147"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_148"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_149"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_150"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_151"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_152"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_153"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_154"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_155"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_156"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_157"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_158"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_159"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_160"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_161"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_162"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_163"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_164"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_165"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_166"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_167"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_168"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_169"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_170"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_171"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_172"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_173"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1_174"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1_175"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1_176"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1_177"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1_178"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1_179"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1_180"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1_181"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1_182"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1_183"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1_184"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1_185"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1_186"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1_187"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1_188"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1_189"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1_190"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1_191"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1_192"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1_193"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1_194"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1_195"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1_196"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1_197"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1_198"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1_199"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1_200"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1_201"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_202"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out_202"];
  "452 vol" [shape=diamond];
  "451 >" [shape=trapezium,orientation=270];
  "451 >" -> "453 E8" [label="out_203"];
  "451 >" -> "452 vol" [label="out_203"];
  "450 E8" [shape=box];
  "450 E8" -> "451 >" [label="out_204"];
  "449 >" [shape=trapezium,orientation=270];
  "449 >" -> "450 E8" [label="out_205"];
  "448 E8" [shape=box];
  "448 E8" -> "449 >" [label="out_206"];
  "447 >" [shape=trapezium,orientation=270];
  "447 >" -> "448 E8" [label="out_207"];
  "446 E8" [shape=box];
  "446 E8" -> "447 >" [label="out_208"];
  "445 >" [shape=trapezium,orientation=270];
  "445 >" -> "446 E8" [label="out_209"];
  "444 E8" [shape=box];
  "444 E8" -> "445 >" [label="out_210"];
  "443 >" [shape=trapezium,orientation=270];
  "443 >" -> "444 E8" [label="out_211"];
  "442 E8" [shape=box];
  "442 E8" -> "443 >" [label="out_212"];
  "441 >" [shape=trapezium,orientation=270];
  "441 >" -> "442 E8" [label="out_213"];
  "440 E8" [shape=box];
  "440 E8" -> "441 >" [label="out_214"];
  "439 >" [shape=trapezium,orientation=270];
  "439 >" -> "440 E8" [label="out_215"];
  "imWork1" -> "454 >";
  "imWork1" -> "451 >";
  "imWork1" -> "449 >";
  "imWork1" -> "447 >";
  "imWork1" -> "445 >";
  "imWork1" -> "443 >";
  "imWork1" -> "441 >";
  "imWork1" -> "439 >";
  "438 E8" [shape=box];
  "438 E8" -> "439 >" [label="out_216"];
  "out" -> "438 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "462 >" [label="imWork1"];
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "461 >" [label="imWork1_203"];
  "459 <_" [shape=trapezium,orientation=270];
  "459 <_" -> "462 >" [label="out_217"];
  "out" -> "459 <_";
  "458 <_" [shape=trapezium,orientation=270];
  "458 <_" -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <_";
  "457 <_" [shape=trapezium,orientation=270];
  "457 <_" -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <_";
  "456 <_" [shape=trapezium,orientation=270];
  "456 <_" -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <_";
}
// graph for dag "main_spoc_helper_1_0" of module "main" in dot format
// DAG "main_spoc_helper_1_0": #i=1 #o=2 #c=402 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imClose" [shape=circle];
  "imZone3" [shape=circle];

  // computation vertices
  "430 thr" [shape=parallelogram];
  "430 thr" -> "imZone3";
  "426 <" [shape=trapezium,orientation=270];
  "426 <" -> "430 thr" [label="imClose"];
  "426 <" -> "imClose";
  "425 E8" [shape=box];
  "425 E8" -> "426 <" [label="out_2"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_3"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_4"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_5"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_6"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_7"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_8"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_9"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_10"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_11"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_12"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_13"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_14"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_15"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_16"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_17"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_18"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_19"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_20"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_21"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_22"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_23"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_24"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_25"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_26"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_27"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_28"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_29"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_30"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_31"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_32"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_33"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_34"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_35"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_36"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_37"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_38"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_39"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_40"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_41"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_42"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_43"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_44"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_45"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_46"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_47"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_48"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_49"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_50"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_51"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_52"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_53"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_54"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_55"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_56"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_57"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_58"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_59"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_60"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_61"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_62"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_63"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_64"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_65"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_66"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_67"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_68"];
  "358 E8" [shape=box];
  "358 E8" -> "359 E8" [label="out_69"];
  "357 E8" [shape=box];
  "357 E8" -> "358 E8" [label="out_70"];
  "356 E8" [shape=box];
  "356 E8" -> "357 E8" [label="out_71"];
  "355 E8" [shape=box];
  "355 E8" -> "356 E8" [label="out_72"];
  "354 E8" [shape=box];
  "354 E8" -> "355 E8" [label="out_73"];
  "353 E8" [shape=box];
  "353 E8" -> "354 E8" [label="out_74"];
  "352 E8" [shape=box];
  "352 E8" -> "353 E8" [label="out_75"];
  "351 E8" [shape=box];
  "351 E8" -> "352 E8" [label="out_76"];
  "350 E8" [shape=box];
  "350 E8" -> "351 E8" [label="out_77"];
  "349 E8" [shape=box];
  "349 E8" -> "350 E8" [label="out_78"];
  "348 E8" [shape=box];
  "348 E8" -> "349 E8" [label="out_79"];
  "347 E8" [shape=box];
  "347 E8" -> "348 E8" [label="out_80"];
  "346 E8" [shape=box];
  "346 E8" -> "347 E8" [label="out_81"];
  "345 E8" [shape=box];
  "345 E8" -> "346 E8" [label="out_82"];
  "344 E8" [shape=box];
  "344 E8" -> "345 E8" [label="out_83"];
  "343 E8" [shape=box];
  "343 E8" -> "344 E8" [label="out_84"];
  "342 E8" [shape=box];
  "342 E8" -> "343 E8" [label="out_85"];
  "341 E8" [shape=box];
  "341 E8" -> "342 E8" [label="out_86"];
  "340 E8" [shape=box];
  "340 E8" -> "341 E8" [label="out_87"];
  "339 E8" [shape=box];
  "339 E8" -> "340 E8" [label="out_88"];
  "338 E8" [shape=box];
  "338 E8" -> "339 E8" [label="out_89"];
  "337 E8" [shape=box];
  "337 E8" -> "338 E8" [label="out_90"];
  "336 E8" [shape=box];
  "336 E8" -> "337 E8" [label="out_91"];
  "335 E8" [shape=box];
  "335 E8" -> "336 E8" [label="out_92"];
  "334 E8" [shape=box];
  "334 E8" -> "335 E8" [label="out_93"];
  "333 E8" [shape=box];
  "333 E8" -> "334 E8" [label="out_94"];
  "332 E8" [shape=box];
  "332 E8" -> "333 E8" [label="out_95"];
  "331 E8" [shape=box];
  "331 E8" -> "332 E8" [label="out_96"];
  "330 E8" [shape=box];
  "330 E8" -> "331 E8" [label="out_97"];
  "329 E8" [shape=box];
  "329 E8" -> "330 E8" [label="out_98"];
  "328 E8" [shape=box];
  "328 E8" -> "329 E8" [label="out_99"];
  "327 E8" [shape=box];
  "327 E8" -> "328 E8" [label="out_100"];
  "326 E8" [shape=box];
  "326 E8" -> "327 E8" [label="out_101"];
  "325 D8" [shape=box];
  "325 D8" -> "326 E8" [label="out_102"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_103"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_104"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_105"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_106"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_107"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_108"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_109"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_110"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_111"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_112"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_113"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_114"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_115"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_116"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_117"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_118"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_119"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_120"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_121"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_122"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_123"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_124"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_125"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_126"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_127"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_128"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_129"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_130"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_131"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_132"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_133"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_134"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_135"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_136"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_137"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_138"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_139"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_140"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_141"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_142"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_143"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_144"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_145"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_146"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_147"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_148"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_149"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_150"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_151"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_152"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_153"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_154"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_155"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_156"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_157"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_158"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_159"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_160"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_161"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_162"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_163"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_164"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_165"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_166"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_167"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_168"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_169"];
  "257 D8" [shape=box];
  "257 D8" -> "258 D8" [label="out_170"];
  "256 D8" [shape=box];
  "256 D8" -> "257 D8" [label="out_171"];
  "255 D8" [shape=box];
  "255 D8" -> "256 D8" [label="out_172"];
  "254 D8" [shape=box];
  "254 D8" -> "255 D8" [label="out_173"];
  "253 D8" [shape=box];
  "253 D8" -> "254 D8" [label="out_174"];
  "252 D8" [shape=box];
  "252 D8" -> "253 D8" [label="out_175"];
  "251 D8" [shape=box];
  "251 D8" -> "252 D8" [label="out_176"];
  "250 D8" [shape=box];
  "250 D8" -> "251 D8" [label="out_177"];
  "249 D8" [shape=box];
  "249 D8" -> "250 D8" [label="out_178"];
  "248 D8" [shape=box];
  "248 D8" -> "249 D8" [label="out_179"];
  "247 D8" [shape=box];
  "247 D8" -> "248 D8" [label="out_180"];
  "246 D8" [shape=box];
  "246 D8" -> "247 D8" [label="out_181"];
  "245 D8" [shape=box];
  "245 D8" -> "246 D8" [label="out_182"];
  "244 D8" [shape=box];
  "244 D8" -> "245 D8" [label="out_183"];
  "243 D8" [shape=box];
  "243 D8" -> "244 D8" [label="out_184"];
  "242 D8" [shape=box];
  "242 D8" -> "243 D8" [label="out_185"];
  "241 D8" [shape=box];
  "241 D8" -> "242 D8" [label="out_186"];
  "240 D8" [shape=box];
  "240 D8" -> "241 D8" [label="out_187"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="out_188"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="out_189"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="out_190"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="out_191"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="out_192"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="out_193"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="out_194"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="out_195"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="out_196"];
  "230 D8" [shape=box];
  "230 D8" -> "231 D8" [label="out_197"];
  "229 D8" [shape=box];
  "229 D8" -> "230 D8" [label="out_198"];
  "228 D8" [shape=box];
  "228 D8" -> "229 D8" [label="out_199"];
  "227 D8" [shape=box];
  "227 D8" -> "228 D8" [label="out_200"];
  "226 D8" [shape=box];
  "226 D8" -> "227 D8" [label="out_201"];
  "224 E8" [shape=box];
  "224 E8" -> "426 <" [label="imWork1_3"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_4"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_5"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_6"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_7"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_8"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_9"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_10"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_11"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_12"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_13"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_14"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_15"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_16"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_17"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_18"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_19"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_20"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_21"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_22"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_23"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_24"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_25"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_26"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_27"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_28"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_29"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_30"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_31"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_32"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_33"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_34"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_35"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_36"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_37"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_38"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_39"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_40"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_41"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_42"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_43"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_44"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_45"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_46"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_47"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_48"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_49"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_50"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_51"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_52"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_53"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_54"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_55"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_56"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_57"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_58"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_59"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_60"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_61"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_62"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_63"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_64"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_65"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_66"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_67"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_68"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_69"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_70"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_71"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_72"];
  "154 E8" [shape=box];
  "154 E8" -> "155 E8" [label="imWork1_73"];
  "153 E8" [shape=box];
  "153 E8" -> "154 E8" [label="imWork1_74"];
  "152 E8" [shape=box];
  "152 E8" -> "153 E8" [label="imWork1_75"];
  "151 E8" [shape=box];
  "151 E8" -> "152 E8" [label="imWork1_76"];
  "150 E8" [shape=box];
  "150 E8" -> "151 E8" [label="imWork1_77"];
  "149 E8" [shape=box];
  "149 E8" -> "150 E8" [label="imWork1_78"];
  "148 E8" [shape=box];
  "148 E8" -> "149 E8" [label="imWork1_79"];
  "147 E8" [shape=box];
  "147 E8" -> "148 E8" [label="imWork1_80"];
  "146 E8" [shape=box];
  "146 E8" -> "147 E8" [label="imWork1_81"];
  "145 E8" [shape=box];
  "145 E8" -> "146 E8" [label="imWork1_82"];
  "144 E8" [shape=box];
  "144 E8" -> "145 E8" [label="imWork1_83"];
  "143 E8" [shape=box];
  "143 E8" -> "144 E8" [label="imWork1_84"];
  "142 E8" [shape=box];
  "142 E8" -> "143 E8" [label="imWork1_85"];
  "141 E8" [shape=box];
  "141 E8" -> "142 E8" [label="imWork1_86"];
  "140 E8" [shape=box];
  "140 E8" -> "141 E8" [label="imWork1_87"];
  "139 E8" [shape=box];
  "139 E8" -> "140 E8" [label="imWork1_88"];
  "138 E8" [shape=box];
  "138 E8" -> "139 E8" [label="imWork1_89"];
  "137 E8" [shape=box];
  "137 E8" -> "138 E8" [label="imWork1_90"];
  "136 E8" [shape=box];
  "136 E8" -> "137 E8" [label="imWork1_91"];
  "135 E8" [shape=box];
  "135 E8" -> "136 E8" [label="imWork1_92"];
  "134 E8" [shape=box];
  "134 E8" -> "135 E8" [label="imWork1_93"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imWork1_94"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imWork1_95"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imWork1_96"];
  "130 E8" [shape=box];
  "130 E8" -> "131 E8" [label="imWork1_97"];
  "129 E8" [shape=box];
  "129 E8" -> "130 E8" [label="imWork1_98"];
  "128 E8" [shape=box];
  "128 E8" -> "129 E8" [label="imWork1_99"];
  "127 E8" [shape=box];
  "127 E8" -> "128 E8" [label="imWork1_100"];
  "126 E8" [shape=box];
  "126 E8" -> "127 E8" [label="imWork1_101"];
  "125 E8" [shape=box];
  "125 E8" -> "126 E8" [label="imWork1_102"];
  "124 D8" [shape=box];
  "124 D8" -> "125 E8" [label="imWork1_103"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_104"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_105"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_106"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_107"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_108"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_109"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_110"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_111"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_112"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_113"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_114"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_115"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_116"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_117"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_118"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_119"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_120"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_121"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_122"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_123"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_124"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_125"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_126"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_127"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_128"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_129"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_130"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_131"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_132"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_133"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_134"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_135"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_136"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_137"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_138"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_139"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_140"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_141"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_142"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_143"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_144"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_145"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_146"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_147"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_148"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_149"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_150"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_151"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_152"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_153"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_154"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_155"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_156"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_157"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_158"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_159"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_160"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_161"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_162"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_163"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_164"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_165"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_166"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_167"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_168"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_169"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_170"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_171"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_172"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_173"];
  "53 D8" [shape=box];
  "53 D8" -> "54 D8" [label="imWork1_174"];
  "52 D8" [shape=box];
  "52 D8" -> "53 D8" [label="imWork1_175"];
  "51 D8" [shape=box];
  "51 D8" -> "52 D8" [label="imWork1_176"];
  "50 D8" [shape=box];
  "50 D8" -> "51 D8" [label="imWork1_177"];
  "49 D8" [shape=box];
  "49 D8" -> "50 D8" [label="imWork1_178"];
  "48 D8" [shape=box];
  "48 D8" -> "49 D8" [label="imWork1_179"];
  "47 D8" [shape=box];
  "47 D8" -> "48 D8" [label="imWork1_180"];
  "46 D8" [shape=box];
  "46 D8" -> "47 D8" [label="imWork1_181"];
  "45 D8" [shape=box];
  "45 D8" -> "46 D8" [label="imWork1_182"];
  "44 D8" [shape=box];
  "44 D8" -> "45 D8" [label="imWork1_183"];
  "43 D8" [shape=box];
  "43 D8" -> "44 D8" [label="imWork1_184"];
  "42 D8" [shape=box];
  "42 D8" -> "43 D8" [label="imWork1_185"];
  "41 D8" [shape=box];
  "41 D8" -> "42 D8" [label="imWork1_186"];
  "40 D8" [shape=box];
  "40 D8" -> "41 D8" [label="imWork1_187"];
  "39 D8" [shape=box];
  "39 D8" -> "40 D8" [label="imWork1_188"];
  "38 D8" [shape=box];
  "38 D8" -> "39 D8" [label="imWork1_189"];
  "37 D8" [shape=box];
  "37 D8" -> "38 D8" [label="imWork1_190"];
  "36 D8" [shape=box];
  "36 D8" -> "37 D8" [label="imWork1_191"];
  "35 D8" [shape=box];
  "35 D8" -> "36 D8" [label="imWork1_192"];
  "34 D8" [shape=box];
  "34 D8" -> "35 D8" [label="imWork1_193"];
  "33 D8" [shape=box];
  "33 D8" -> "34 D8" [label="imWork1_194"];
  "32 D8" [shape=box];
  "32 D8" -> "33 D8" [label="imWork1_195"];
  "31 D8" [shape=box];
  "31 D8" -> "32 D8" [label="imWork1_196"];
  "30 D8" [shape=box];
  "30 D8" -> "31 D8" [label="imWork1_197"];
  "29 D8" [shape=box];
  "29 D8" -> "30 D8" [label="imWork1_198"];
  "28 D8" [shape=box];
  "28 D8" -> "29 D8" [label="imWork1_199"];
  "27 D8" [shape=box];
  "27 D8" -> "28 D8" [label="imWork1_200"];
  "26 D8" [shape=box];
  "26 D8" -> "27 D8" [label="imWork1_201"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_202"];
  "in" -> "226 D8";
  "in" -> "25 D8";
}
// graph for dag "main_spoc_helper_1_1" of module "main" in dot format
// DAG "main_spoc_helper_1_1": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_1" {
  // inputs
  "imClose" [shape=circle];
  "imin" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // computation vertices
  "429 thr" [shape=parallelogram];
  "429 thr" -> "imZone2";
  "428 thr" [shape=parallelogram];
  "428 thr" -> "imZone1";
  "427 -" [shape=trapezium,orientation=270];
  "427 -" -> "429 thr" [label="imTophat"];
  "427 -" -> "428 thr" [label="imTophat"];
  "imin" -> "427 -";
  "imClose" -> "427 -";
}
// graph for dag "main_spoc_helper_1_2" of module "main" in dot format
// DAG "main_spoc_helper_1_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_2" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // outputs
  "imWork1_2" [shape=circle];

  // computation vertices
  "431 >" [shape=trapezium,orientation=270];
  "431 >" -> "imWork1_2";
  "imZone2" -> "431 >";
  "imZone1" -> "431 >";
}
// graph for dag "main_spoc_helper_1_3" of module "main" in dot format
// DAG "main_spoc_helper_1_3": #i=2 #o=2 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_3" {
  // inputs
  "imWork1_2" [shape=circle];
  "imZone3" [shape=circle];

  // outputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "436 vol" [shape=diamond];
  "435 D8" [shape=box];
  "435 D8" -> "436 vol" [label="out"];
  "435 D8" -> "out";
  "434 D8" [shape=box];
  "434 D8" -> "435 D8" [label="out_1"];
  "433 !" [shape=trapezium,orientation=270];
  "433 !" -> "434 D8" [label="imWork1"];
  "433 !" -> "imWork1";
  "432 >" [shape=trapezium,orientation=270];
  "432 >" -> "433 !" [label="imWork1_1"];
  "imZone3" -> "432 >";
  "imWork1_2" -> "432 >";
}
// graph for dag "main_spoc_helper_2_0" of module "main" in dot format
// DAG "main_spoc_helper_2_0": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_2_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "455 vol" [shape=diamond];
  "454 >" [shape=trapezium,orientation=270];
  "454 >" -> "455 vol" [label="out"];
  "454 >" -> "out'";
  "453 E8" [shape=box];
  "453 E8" -> "454 >" [label="out_202"];
  "452 vol" [shape=diamond];
  "451 >" [shape=trapezium,orientation=270];
  "451 >" -> "453 E8" [label="out_203"];
  "451 >" -> "452 vol" [label="out_203"];
  "450 E8" [shape=box];
  "450 E8" -> "451 >" [label="out_204"];
  "449 >" [shape=trapezium,orientation=270];
  "449 >" -> "450 E8" [label="out_205"];
  "448 E8" [shape=box];
  "448 E8" -> "449 >" [label="out_206"];
  "447 >" [shape=trapezium,orientation=270];
  "447 >" -> "448 E8" [label="out_207"];
  "446 E8" [shape=box];
  "446 E8" -> "447 >" [label="out_208"];
  "445 >" [shape=trapezium,orientation=270];
  "445 >" -> "446 E8" [label="out_209"];
  "444 E8" [shape=box];
  "444 E8" -> "445 >" [label="out_210"];
  "443 >" [shape=trapezium,orientation=270];
  "443 >" -> "444 E8" [label="out_211"];
  "442 E8" [shape=box];
  "442 E8" -> "443 >" [label="out_212"];
  "441 >" [shape=trapezium,orientation=270];
  "441 >" -> "442 E8" [label="out_213"];
  "440 E8" [shape=box];
  "440 E8" -> "441 >" [label="out_214"];
  "439 >" [shape=trapezium,orientation=270];
  "439 >" -> "440 E8" [label="out_215"];
  "imWork1" -> "454 >";
  "imWork1" -> "451 >";
  "imWork1" -> "449 >";
  "imWork1" -> "447 >";
  "imWork1" -> "445 >";
  "imWork1" -> "443 >";
  "imWork1" -> "441 >";
  "imWork1" -> "439 >";
  "438 E8" [shape=box];
  "438 E8" -> "439 >" [label="out_216"];
  "out" -> "438 E8";
}
// graph for dag "main_spoc_helper_3_0" of module "main" in dot format
// DAG "main_spoc_helper_3_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_3_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];

  // outputs
  "imWork1_203" [shape=circle];

  // computation vertices
  "460 >" [shape=trapezium,orientation=270];
  "460 >" -> "imWork1_203";
  "457 <_" [shape=trapezium,orientation=270];
  "457 <_" -> "460 >" [label="imZone2"];
  "imZone2" -> "457 <_";
  "456 <_" [shape=trapezium,orientation=270];
  "456 <_" -> "460 >" [label="imZone1"];
  "imZone1" -> "456 <_";
}
// graph for dag "main_spoc_helper_3_1" of module "main" in dot format
// DAG "main_spoc_helper_3_1": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_3_1" {
  // inputs
  "imWork1_203" [shape=circle];
  "imZone3" [shape=circle];

  // outputs
  "imWork1" [shape=circle];

  // computation vertices
  "461 >" [shape=trapezium,orientation=270];
  "461 >" -> "imWork1";
  "imWork1_203" -> "461 >";
  "458 <_" [shape=trapezium,orientation=270];
  "458 <_" -> "461 >" [label="imZone3"];
  "imZone3" -> "458 <_";
}
// graph for dag "main_spoc_helper_3_2" of module "main" in dot format
// DAG "main_spoc_helper_3_2": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_3_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "462 >" [shape=trapezium,orientation=270];
  "462 >" -> "out'";
  "imWork1" -> "462 >";
  "459 <_" [shape=trapezium,orientation=270];
  "459 <_" -> "462 >" [label="out_217"];
  "out" -> "459 <_";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1+0 copies
// # SPOC calls: 0

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0+0 copies
// split 0: 25 cuts
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// # SPOC calls: 28

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 25 dilate_8c
  // nope
  // poc 25 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_202 [0 poc 0] -> [1 poc 0] 26 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_202 [1 input 0] -> [1 poc 0] 26 dilate_8c
  // nope
  // poc 26 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_201 [1 poc 0] -> [2 poc 0] 27 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_201 [2 input 0] -> [2 poc 0] 27 dilate_8c
  // nope
  // poc 27 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_200 [2 poc 0] -> [3 poc 0] 28 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_200 [3 input 0] -> [3 poc 0] 28 dilate_8c
  // nope
  // poc 28 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_199 [3 poc 0] -> [4 poc 0] 29 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_199 [4 input 0] -> [4 poc 0] 29 dilate_8c
  // nope
  // poc 29 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_198 [4 poc 0] -> [5 poc 0] 30 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_198 [5 input 0] -> [5 poc 0] 30 dilate_8c
  // nope
  // poc 30 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_197 [5 poc 0] -> [6 poc 0] 31 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_197 [6 input 0] -> [6 poc 0] 31 dilate_8c
  // nope
  // poc 31 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_196 [6 poc 0] -> [7 poc 0] 32 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_196 [7 input 0] -> [7 poc 0] 32 dilate_8c
  // nope
  // poc 32 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 226 dilate_8c
  // nope
  // poc 226 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_201 [0 poc 1] -> [1 poc 1] 227 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_201 [1 input 1] -> [1 poc 1] 227 dilate_8c
  // nope
  // poc 227 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_200 [1 poc 1] -> [2 poc 1] 228 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_200 [2 input 1] -> [2 poc 1] 228 dilate_8c
  // nope
  // poc 228 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_199 [2 poc 1] -> [3 poc 1] 229 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_199 [3 input 1] -> [3 poc 1] 229 dilate_8c
  // nope
  // poc 229 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_198 [3 poc 1] -> [4 poc 1] 230 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_198 [4 input 1] -> [4 poc 1] 230 dilate_8c
  // nope
  // poc 230 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_197 [4 poc 1] -> [5 poc 1] 231 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_197 [5 input 1] -> [5 poc 1] 231 dilate_8c
  // nope
  // poc 231 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_196 [5 poc 1] -> [6 poc 1] 232 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_196 [6 input 1] -> [6 poc 1] 232 dilate_8c
  // nope
  // poc 232 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_195 [6 poc 1] -> [7 poc 1] 233 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_195 [7 input 1] -> [7 poc 1] 233 dilate_8c
  // nope
  // poc 233 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_195 on 0 and image 0`out_194 on 1
  // 0`imWork1_195 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_195 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_194 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_194 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_195 [0 input 0] -> [0 poc 0] 33 dilate_8c
  // nope
  // poc 33 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_194 [0 poc 0] -> [1 poc 0] 34 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_194 [1 input 0] -> [1 poc 0] 34 dilate_8c
  // nope
  // poc 34 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_193 [1 poc 0] -> [2 poc 0] 35 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_193 [2 input 0] -> [2 poc 0] 35 dilate_8c
  // nope
  // poc 35 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_192 [2 poc 0] -> [3 poc 0] 36 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_192 [3 input 0] -> [3 poc 0] 36 dilate_8c
  // nope
  // poc 36 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_191 [3 poc 0] -> [4 poc 0] 37 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_191 [4 input 0] -> [4 poc 0] 37 dilate_8c
  // nope
  // poc 37 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_190 [4 poc 0] -> [5 poc 0] 38 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_190 [5 input 0] -> [5 poc 0] 38 dilate_8c
  // nope
  // poc 38 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_189 [5 poc 0] -> [6 poc 0] 39 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_189 [6 input 0] -> [6 poc 0] 39 dilate_8c
  // nope
  // poc 39 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_188 [6 poc 0] -> [7 poc 0] 40 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_188 [7 input 0] -> [7 poc 0] 40 dilate_8c
  // nope
  // poc 40 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_194 [0 input 1] -> [0 poc 1] 234 dilate_8c
  // nope
  // poc 234 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_193 [0 poc 1] -> [1 poc 1] 235 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_193 [1 input 1] -> [1 poc 1] 235 dilate_8c
  // nope
  // poc 235 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_192 [1 poc 1] -> [2 poc 1] 236 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_192 [2 input 1] -> [2 poc 1] 236 dilate_8c
  // nope
  // poc 236 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_191 [2 poc 1] -> [3 poc 1] 237 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_191 [3 input 1] -> [3 poc 1] 237 dilate_8c
  // nope
  // poc 237 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_190 [3 poc 1] -> [4 poc 1] 238 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_190 [4 input 1] -> [4 poc 1] 238 dilate_8c
  // nope
  // poc 238 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_189 [4 poc 1] -> [5 poc 1] 239 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_189 [5 input 1] -> [5 poc 1] 239 dilate_8c
  // nope
  // poc 239 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_188 [5 poc 1] -> [6 poc 1] 240 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_188 [6 input 1] -> [6 poc 1] 240 dilate_8c
  // nope
  // poc 240 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_187 [6 poc 1] -> [7 poc 1] 241 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_187 [7 input 1] -> [7 poc 1] 241 dilate_8c
  // nope
  // poc 241 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_187 on 0 and image 0`out_186 on 1
  // 0`imWork1_187 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_187 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_186 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_186 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_187 [0 input 0] -> [0 poc 0] 41 dilate_8c
  // nope
  // poc 41 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_186 [0 poc 0] -> [1 poc 0] 42 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_186 [1 input 0] -> [1 poc 0] 42 dilate_8c
  // nope
  // poc 42 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_185 [1 poc 0] -> [2 poc 0] 43 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_185 [2 input 0] -> [2 poc 0] 43 dilate_8c
  // nope
  // poc 43 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_184 [2 poc 0] -> [3 poc 0] 44 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_184 [3 input 0] -> [3 poc 0] 44 dilate_8c
  // nope
  // poc 44 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_183 [3 poc 0] -> [4 poc 0] 45 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_183 [4 input 0] -> [4 poc 0] 45 dilate_8c
  // nope
  // poc 45 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_182 [4 poc 0] -> [5 poc 0] 46 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_182 [5 input 0] -> [5 poc 0] 46 dilate_8c
  // nope
  // poc 46 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_181 [5 poc 0] -> [6 poc 0] 47 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_181 [6 input 0] -> [6 poc 0] 47 dilate_8c
  // nope
  // poc 47 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_180 [6 poc 0] -> [7 poc 0] 48 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_180 [7 input 0] -> [7 poc 0] 48 dilate_8c
  // nope
  // poc 48 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_186 [0 input 1] -> [0 poc 1] 242 dilate_8c
  // nope
  // poc 242 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_185 [0 poc 1] -> [1 poc 1] 243 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_185 [1 input 1] -> [1 poc 1] 243 dilate_8c
  // nope
  // poc 243 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_184 [1 poc 1] -> [2 poc 1] 244 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_184 [2 input 1] -> [2 poc 1] 244 dilate_8c
  // nope
  // poc 244 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_183 [2 poc 1] -> [3 poc 1] 245 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_183 [3 input 1] -> [3 poc 1] 245 dilate_8c
  // nope
  // poc 245 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_182 [3 poc 1] -> [4 poc 1] 246 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_182 [4 input 1] -> [4 poc 1] 246 dilate_8c
  // nope
  // poc 246 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_181 [4 poc 1] -> [5 poc 1] 247 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_181 [5 input 1] -> [5 poc 1] 247 dilate_8c
  // nope
  // poc 247 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_180 [5 poc 1] -> [6 poc 1] 248 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_180 [6 input 1] -> [6 poc 1] 248 dilate_8c
  // nope
  // poc 248 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_179 [6 poc 1] -> [7 poc 1] 249 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_179 [7 input 1] -> [7 poc 1] 249 dilate_8c
  // nope
  // poc 249 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_179 on 0 and image 0`out_178 on 1
  // 0`imWork1_179 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_179 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_178 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_178 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_3(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_179 [0 input 0] -> [0 poc 0] 49 dilate_8c
  // nope
  // poc 49 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_178 [0 poc 0] -> [1 poc 0] 50 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_178 [1 input 0] -> [1 poc 0] 50 dilate_8c
  // nope
  // poc 50 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_177 [1 poc 0] -> [2 poc 0] 51 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_177 [2 input 0] -> [2 poc 0] 51 dilate_8c
  // nope
  // poc 51 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_176 [2 poc 0] -> [3 poc 0] 52 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_176 [3 input 0] -> [3 poc 0] 52 dilate_8c
  // nope
  // poc 52 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_175 [3 poc 0] -> [4 poc 0] 53 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_175 [4 input 0] -> [4 poc 0] 53 dilate_8c
  // nope
  // poc 53 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_174 [4 poc 0] -> [5 poc 0] 54 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_174 [5 input 0] -> [5 poc 0] 54 dilate_8c
  // nope
  // poc 54 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_173 [5 poc 0] -> [6 poc 0] 55 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_173 [6 input 0] -> [6 poc 0] 55 dilate_8c
  // nope
  // poc 55 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_172 [6 poc 0] -> [7 poc 0] 56 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_172 [7 input 0] -> [7 poc 0] 56 dilate_8c
  // nope
  // poc 56 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_178 [0 input 1] -> [0 poc 1] 250 dilate_8c
  // nope
  // poc 250 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_177 [0 poc 1] -> [1 poc 1] 251 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_177 [1 input 1] -> [1 poc 1] 251 dilate_8c
  // nope
  // poc 251 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_176 [1 poc 1] -> [2 poc 1] 252 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_176 [2 input 1] -> [2 poc 1] 252 dilate_8c
  // nope
  // poc 252 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_175 [2 poc 1] -> [3 poc 1] 253 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_175 [3 input 1] -> [3 poc 1] 253 dilate_8c
  // nope
  // poc 253 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_174 [3 poc 1] -> [4 poc 1] 254 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_174 [4 input 1] -> [4 poc 1] 254 dilate_8c
  // nope
  // poc 254 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_173 [4 poc 1] -> [5 poc 1] 255 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_173 [5 input 1] -> [5 poc 1] 255 dilate_8c
  // nope
  // poc 255 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_172 [5 poc 1] -> [6 poc 1] 256 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_172 [6 input 1] -> [6 poc 1] 256 dilate_8c
  // nope
  // poc 256 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_171 [6 poc 1] -> [7 poc 1] 257 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_171 [7 input 1] -> [7 poc 1] 257 dilate_8c
  // nope
  // poc 257 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_171 on 0 and image 0`out_170 on 1
  // 0`imWork1_171 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_171 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_170 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_170 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_4(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_171 [0 input 0] -> [0 poc 0] 57 dilate_8c
  // nope
  // poc 57 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_170 [0 poc 0] -> [1 poc 0] 58 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_170 [1 input 0] -> [1 poc 0] 58 dilate_8c
  // nope
  // poc 58 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_169 [1 poc 0] -> [2 poc 0] 59 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_169 [2 input 0] -> [2 poc 0] 59 dilate_8c
  // nope
  // poc 59 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_168 [2 poc 0] -> [3 poc 0] 60 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_168 [3 input 0] -> [3 poc 0] 60 dilate_8c
  // nope
  // poc 60 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_167 [3 poc 0] -> [4 poc 0] 61 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_167 [4 input 0] -> [4 poc 0] 61 dilate_8c
  // nope
  // poc 61 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_166 [4 poc 0] -> [5 poc 0] 62 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_166 [5 input 0] -> [5 poc 0] 62 dilate_8c
  // nope
  // poc 62 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_165 [5 poc 0] -> [6 poc 0] 63 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_165 [6 input 0] -> [6 poc 0] 63 dilate_8c
  // nope
  // poc 63 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_164 [6 poc 0] -> [7 poc 0] 64 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_164 [7 input 0] -> [7 poc 0] 64 dilate_8c
  // nope
  // poc 64 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_170 [0 input 1] -> [0 poc 1] 258 dilate_8c
  // nope
  // poc 258 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_169 [0 poc 1] -> [1 poc 1] 259 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_169 [1 input 1] -> [1 poc 1] 259 dilate_8c
  // nope
  // poc 259 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_168 [1 poc 1] -> [2 poc 1] 260 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_168 [2 input 1] -> [2 poc 1] 260 dilate_8c
  // nope
  // poc 260 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_167 [2 poc 1] -> [3 poc 1] 261 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_167 [3 input 1] -> [3 poc 1] 261 dilate_8c
  // nope
  // poc 261 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_166 [3 poc 1] -> [4 poc 1] 262 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_166 [4 input 1] -> [4 poc 1] 262 dilate_8c
  // nope
  // poc 262 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_165 [4 poc 1] -> [5 poc 1] 263 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_165 [5 input 1] -> [5 poc 1] 263 dilate_8c
  // nope
  // poc 263 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_164 [5 poc 1] -> [6 poc 1] 264 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_164 [6 input 1] -> [6 poc 1] 264 dilate_8c
  // nope
  // poc 264 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_163 [6 poc 1] -> [7 poc 1] 265 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_163 [7 input 1] -> [7 poc 1] 265 dilate_8c
  // nope
  // poc 265 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_163 on 0 and image 0`out_162 on 1
  // 0`imWork1_163 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_163 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_162 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_162 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_5(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_163 [0 input 0] -> [0 poc 0] 65 dilate_8c
  // nope
  // poc 65 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_162 [0 poc 0] -> [1 poc 0] 66 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_162 [1 input 0] -> [1 poc 0] 66 dilate_8c
  // nope
  // poc 66 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_161 [1 poc 0] -> [2 poc 0] 67 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_161 [2 input 0] -> [2 poc 0] 67 dilate_8c
  // nope
  // poc 67 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_160 [2 poc 0] -> [3 poc 0] 68 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_160 [3 input 0] -> [3 poc 0] 68 dilate_8c
  // nope
  // poc 68 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_159 [3 poc 0] -> [4 poc 0] 69 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_159 [4 input 0] -> [4 poc 0] 69 dilate_8c
  // nope
  // poc 69 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_158 [4 poc 0] -> [5 poc 0] 70 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_158 [5 input 0] -> [5 poc 0] 70 dilate_8c
  // nope
  // poc 70 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_157 [5 poc 0] -> [6 poc 0] 71 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_157 [6 input 0] -> [6 poc 0] 71 dilate_8c
  // nope
  // poc 71 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_156 [6 poc 0] -> [7 poc 0] 72 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_156 [7 input 0] -> [7 poc 0] 72 dilate_8c
  // nope
  // poc 72 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_162 [0 input 1] -> [0 poc 1] 266 dilate_8c
  // nope
  // poc 266 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_161 [0 poc 1] -> [1 poc 1] 267 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_161 [1 input 1] -> [1 poc 1] 267 dilate_8c
  // nope
  // poc 267 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_160 [1 poc 1] -> [2 poc 1] 268 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_160 [2 input 1] -> [2 poc 1] 268 dilate_8c
  // nope
  // poc 268 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_159 [2 poc 1] -> [3 poc 1] 269 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_159 [3 input 1] -> [3 poc 1] 269 dilate_8c
  // nope
  // poc 269 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_158 [3 poc 1] -> [4 poc 1] 270 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_158 [4 input 1] -> [4 poc 1] 270 dilate_8c
  // nope
  // poc 270 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_157 [4 poc 1] -> [5 poc 1] 271 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_157 [5 input 1] -> [5 poc 1] 271 dilate_8c
  // nope
  // poc 271 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_156 [5 poc 1] -> [6 poc 1] 272 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_156 [6 input 1] -> [6 poc 1] 272 dilate_8c
  // nope
  // poc 272 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_155 [6 poc 1] -> [7 poc 1] 273 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_155 [7 input 1] -> [7 poc 1] 273 dilate_8c
  // nope
  // poc 273 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_155 on 0 and image 0`out_154 on 1
  // 0`imWork1_155 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_155 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_154 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_154 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_6(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_155 [0 input 0] -> [0 poc 0] 73 dilate_8c
  // nope
  // poc 73 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_154 [0 poc 0] -> [1 poc 0] 74 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_154 [1 input 0] -> [1 poc 0] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_153 [1 poc 0] -> [2 poc 0] 75 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_153 [2 input 0] -> [2 poc 0] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_152 [2 poc 0] -> [3 poc 0] 76 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_152 [3 input 0] -> [3 poc 0] 76 dilate_8c
  // nope
  // poc 76 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_151 [3 poc 0] -> [4 poc 0] 77 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_151 [4 input 0] -> [4 poc 0] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_150 [4 poc 0] -> [5 poc 0] 78 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_150 [5 input 0] -> [5 poc 0] 78 dilate_8c
  // nope
  // poc 78 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_149 [5 poc 0] -> [6 poc 0] 79 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_149 [6 input 0] -> [6 poc 0] 79 dilate_8c
  // nope
  // poc 79 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_148 [6 poc 0] -> [7 poc 0] 80 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_148 [7 input 0] -> [7 poc 0] 80 dilate_8c
  // nope
  // poc 80 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_154 [0 input 1] -> [0 poc 1] 274 dilate_8c
  // nope
  // poc 274 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_153 [0 poc 1] -> [1 poc 1] 275 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_153 [1 input 1] -> [1 poc 1] 275 dilate_8c
  // nope
  // poc 275 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_152 [1 poc 1] -> [2 poc 1] 276 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_152 [2 input 1] -> [2 poc 1] 276 dilate_8c
  // nope
  // poc 276 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_151 [2 poc 1] -> [3 poc 1] 277 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_151 [3 input 1] -> [3 poc 1] 277 dilate_8c
  // nope
  // poc 277 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_150 [3 poc 1] -> [4 poc 1] 278 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_150 [4 input 1] -> [4 poc 1] 278 dilate_8c
  // nope
  // poc 278 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_149 [4 poc 1] -> [5 poc 1] 279 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_149 [5 input 1] -> [5 poc 1] 279 dilate_8c
  // nope
  // poc 279 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_148 [5 poc 1] -> [6 poc 1] 280 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_148 [6 input 1] -> [6 poc 1] 280 dilate_8c
  // nope
  // poc 280 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_147 [6 poc 1] -> [7 poc 1] 281 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_147 [7 input 1] -> [7 poc 1] 281 dilate_8c
  // nope
  // poc 281 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_147 on 0 and image 0`out_146 on 1
  // 0`imWork1_147 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_147 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_146 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_146 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_7(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_147 [0 input 0] -> [0 poc 0] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_146 [0 poc 0] -> [1 poc 0] 82 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_146 [1 input 0] -> [1 poc 0] 82 dilate_8c
  // nope
  // poc 82 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_145 [1 poc 0] -> [2 poc 0] 83 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_145 [2 input 0] -> [2 poc 0] 83 dilate_8c
  // nope
  // poc 83 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_144 [2 poc 0] -> [3 poc 0] 84 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_144 [3 input 0] -> [3 poc 0] 84 dilate_8c
  // nope
  // poc 84 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_143 [3 poc 0] -> [4 poc 0] 85 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_143 [4 input 0] -> [4 poc 0] 85 dilate_8c
  // nope
  // poc 85 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_142 [4 poc 0] -> [5 poc 0] 86 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_142 [5 input 0] -> [5 poc 0] 86 dilate_8c
  // nope
  // poc 86 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_141 [5 poc 0] -> [6 poc 0] 87 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_141 [6 input 0] -> [6 poc 0] 87 dilate_8c
  // nope
  // poc 87 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_140 [6 poc 0] -> [7 poc 0] 88 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_140 [7 input 0] -> [7 poc 0] 88 dilate_8c
  // nope
  // poc 88 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_146 [0 input 1] -> [0 poc 1] 282 dilate_8c
  // nope
  // poc 282 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_145 [0 poc 1] -> [1 poc 1] 283 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_145 [1 input 1] -> [1 poc 1] 283 dilate_8c
  // nope
  // poc 283 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_144 [1 poc 1] -> [2 poc 1] 284 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_144 [2 input 1] -> [2 poc 1] 284 dilate_8c
  // nope
  // poc 284 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_143 [2 poc 1] -> [3 poc 1] 285 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_143 [3 input 1] -> [3 poc 1] 285 dilate_8c
  // nope
  // poc 285 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_142 [3 poc 1] -> [4 poc 1] 286 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_142 [4 input 1] -> [4 poc 1] 286 dilate_8c
  // nope
  // poc 286 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_141 [4 poc 1] -> [5 poc 1] 287 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_141 [5 input 1] -> [5 poc 1] 287 dilate_8c
  // nope
  // poc 287 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_140 [5 poc 1] -> [6 poc 1] 288 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_140 [6 input 1] -> [6 poc 1] 288 dilate_8c
  // nope
  // poc 288 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_139 [6 poc 1] -> [7 poc 1] 289 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_139 [7 input 1] -> [7 poc 1] 289 dilate_8c
  // nope
  // poc 289 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_139 on 0 and image 0`out_138 on 1
  // 0`imWork1_139 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_139 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_138 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_138 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_8(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_139 [0 input 0] -> [0 poc 0] 89 dilate_8c
  // nope
  // poc 89 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_138 [0 poc 0] -> [1 poc 0] 90 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_138 [1 input 0] -> [1 poc 0] 90 dilate_8c
  // nope
  // poc 90 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_137 [1 poc 0] -> [2 poc 0] 91 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_137 [2 input 0] -> [2 poc 0] 91 dilate_8c
  // nope
  // poc 91 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_136 [2 poc 0] -> [3 poc 0] 92 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_136 [3 input 0] -> [3 poc 0] 92 dilate_8c
  // nope
  // poc 92 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_135 [3 poc 0] -> [4 poc 0] 93 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_135 [4 input 0] -> [4 poc 0] 93 dilate_8c
  // nope
  // poc 93 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_134 [4 poc 0] -> [5 poc 0] 94 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_134 [5 input 0] -> [5 poc 0] 94 dilate_8c
  // nope
  // poc 94 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_133 [5 poc 0] -> [6 poc 0] 95 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_133 [6 input 0] -> [6 poc 0] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_132 [6 poc 0] -> [7 poc 0] 96 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_132 [7 input 0] -> [7 poc 0] 96 dilate_8c
  // nope
  // poc 96 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_138 [0 input 1] -> [0 poc 1] 290 dilate_8c
  // nope
  // poc 290 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_137 [0 poc 1] -> [1 poc 1] 291 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_137 [1 input 1] -> [1 poc 1] 291 dilate_8c
  // nope
  // poc 291 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_136 [1 poc 1] -> [2 poc 1] 292 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_136 [2 input 1] -> [2 poc 1] 292 dilate_8c
  // nope
  // poc 292 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_135 [2 poc 1] -> [3 poc 1] 293 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_135 [3 input 1] -> [3 poc 1] 293 dilate_8c
  // nope
  // poc 293 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_134 [3 poc 1] -> [4 poc 1] 294 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_134 [4 input 1] -> [4 poc 1] 294 dilate_8c
  // nope
  // poc 294 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_133 [4 poc 1] -> [5 poc 1] 295 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_133 [5 input 1] -> [5 poc 1] 295 dilate_8c
  // nope
  // poc 295 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_132 [5 poc 1] -> [6 poc 1] 296 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_132 [6 input 1] -> [6 poc 1] 296 dilate_8c
  // nope
  // poc 296 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_131 [6 poc 1] -> [7 poc 1] 297 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_131 [7 input 1] -> [7 poc 1] 297 dilate_8c
  // nope
  // poc 297 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_131 on 0 and image 0`out_130 on 1
  // 0`imWork1_131 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_131 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_130 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_130 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_9(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_131 [0 input 0] -> [0 poc 0] 97 dilate_8c
  // nope
  // poc 97 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_130 [0 poc 0] -> [1 poc 0] 98 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_130 [1 input 0] -> [1 poc 0] 98 dilate_8c
  // nope
  // poc 98 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_129 [1 poc 0] -> [2 poc 0] 99 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_129 [2 input 0] -> [2 poc 0] 99 dilate_8c
  // nope
  // poc 99 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_128 [2 poc 0] -> [3 poc 0] 100 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_128 [3 input 0] -> [3 poc 0] 100 dilate_8c
  // nope
  // poc 100 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_127 [3 poc 0] -> [4 poc 0] 101 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_127 [4 input 0] -> [4 poc 0] 101 dilate_8c
  // nope
  // poc 101 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_126 [4 poc 0] -> [5 poc 0] 102 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_126 [5 input 0] -> [5 poc 0] 102 dilate_8c
  // nope
  // poc 102 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_125 [5 poc 0] -> [6 poc 0] 103 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_125 [6 input 0] -> [6 poc 0] 103 dilate_8c
  // nope
  // poc 103 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_124 [6 poc 0] -> [7 poc 0] 104 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_124 [7 input 0] -> [7 poc 0] 104 dilate_8c
  // nope
  // poc 104 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_130 [0 input 1] -> [0 poc 1] 298 dilate_8c
  // nope
  // poc 298 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_129 [0 poc 1] -> [1 poc 1] 299 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_129 [1 input 1] -> [1 poc 1] 299 dilate_8c
  // nope
  // poc 299 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_128 [1 poc 1] -> [2 poc 1] 300 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_128 [2 input 1] -> [2 poc 1] 300 dilate_8c
  // nope
  // poc 300 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_127 [2 poc 1] -> [3 poc 1] 301 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_127 [3 input 1] -> [3 poc 1] 301 dilate_8c
  // nope
  // poc 301 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_126 [3 poc 1] -> [4 poc 1] 302 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_126 [4 input 1] -> [4 poc 1] 302 dilate_8c
  // nope
  // poc 302 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_125 [4 poc 1] -> [5 poc 1] 303 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_125 [5 input 1] -> [5 poc 1] 303 dilate_8c
  // nope
  // poc 303 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_124 [5 poc 1] -> [6 poc 1] 304 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_124 [6 input 1] -> [6 poc 1] 304 dilate_8c
  // nope
  // poc 304 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_123 [6 poc 1] -> [7 poc 1] 305 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_123 [7 input 1] -> [7 poc 1] 305 dilate_8c
  // nope
  // poc 305 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_123 on 0 and image 0`out_122 on 1
  // 0`imWork1_123 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_123 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_122 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_122 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_10(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_123 [0 input 0] -> [0 poc 0] 105 dilate_8c
  // nope
  // poc 105 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_122 [0 poc 0] -> [1 poc 0] 106 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_122 [1 input 0] -> [1 poc 0] 106 dilate_8c
  // nope
  // poc 106 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_121 [1 poc 0] -> [2 poc 0] 107 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_121 [2 input 0] -> [2 poc 0] 107 dilate_8c
  // nope
  // poc 107 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_120 [2 poc 0] -> [3 poc 0] 108 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_120 [3 input 0] -> [3 poc 0] 108 dilate_8c
  // nope
  // poc 108 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_119 [3 poc 0] -> [4 poc 0] 109 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_119 [4 input 0] -> [4 poc 0] 109 dilate_8c
  // nope
  // poc 109 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_118 [4 poc 0] -> [5 poc 0] 110 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_118 [5 input 0] -> [5 poc 0] 110 dilate_8c
  // nope
  // poc 110 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_117 [5 poc 0] -> [6 poc 0] 111 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_117 [6 input 0] -> [6 poc 0] 111 dilate_8c
  // nope
  // poc 111 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_116 [6 poc 0] -> [7 poc 0] 112 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_116 [7 input 0] -> [7 poc 0] 112 dilate_8c
  // nope
  // poc 112 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_122 [0 input 1] -> [0 poc 1] 306 dilate_8c
  // nope
  // poc 306 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_121 [0 poc 1] -> [1 poc 1] 307 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_121 [1 input 1] -> [1 poc 1] 307 dilate_8c
  // nope
  // poc 307 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_120 [1 poc 1] -> [2 poc 1] 308 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_120 [2 input 1] -> [2 poc 1] 308 dilate_8c
  // nope
  // poc 308 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_119 [2 poc 1] -> [3 poc 1] 309 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_119 [3 input 1] -> [3 poc 1] 309 dilate_8c
  // nope
  // poc 309 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_118 [3 poc 1] -> [4 poc 1] 310 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_118 [4 input 1] -> [4 poc 1] 310 dilate_8c
  // nope
  // poc 310 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_117 [4 poc 1] -> [5 poc 1] 311 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_117 [5 input 1] -> [5 poc 1] 311 dilate_8c
  // nope
  // poc 311 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_116 [5 poc 1] -> [6 poc 1] 312 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_116 [6 input 1] -> [6 poc 1] 312 dilate_8c
  // nope
  // poc 312 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_115 [6 poc 1] -> [7 poc 1] 313 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_115 [7 input 1] -> [7 poc 1] 313 dilate_8c
  // nope
  // poc 313 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_115 on 0 and image 0`out_114 on 1
  // 0`imWork1_115 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_115 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_114 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_114 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_11(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_115 [0 input 0] -> [0 poc 0] 113 dilate_8c
  // nope
  // poc 113 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_114 [0 poc 0] -> [1 poc 0] 114 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_114 [1 input 0] -> [1 poc 0] 114 dilate_8c
  // nope
  // poc 114 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_113 [1 poc 0] -> [2 poc 0] 115 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_113 [2 input 0] -> [2 poc 0] 115 dilate_8c
  // nope
  // poc 115 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_112 [2 poc 0] -> [3 poc 0] 116 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_112 [3 input 0] -> [3 poc 0] 116 dilate_8c
  // nope
  // poc 116 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_111 [3 poc 0] -> [4 poc 0] 117 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_111 [4 input 0] -> [4 poc 0] 117 dilate_8c
  // nope
  // poc 117 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_110 [4 poc 0] -> [5 poc 0] 118 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_110 [5 input 0] -> [5 poc 0] 118 dilate_8c
  // nope
  // poc 118 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_109 [5 poc 0] -> [6 poc 0] 119 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_109 [6 input 0] -> [6 poc 0] 119 dilate_8c
  // nope
  // poc 119 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_108 [6 poc 0] -> [7 poc 0] 120 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_108 [7 input 0] -> [7 poc 0] 120 dilate_8c
  // nope
  // poc 120 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_114 [0 input 1] -> [0 poc 1] 314 dilate_8c
  // nope
  // poc 314 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_113 [0 poc 1] -> [1 poc 1] 315 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_113 [1 input 1] -> [1 poc 1] 315 dilate_8c
  // nope
  // poc 315 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_112 [1 poc 1] -> [2 poc 1] 316 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_112 [2 input 1] -> [2 poc 1] 316 dilate_8c
  // nope
  // poc 316 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_111 [2 poc 1] -> [3 poc 1] 317 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_111 [3 input 1] -> [3 poc 1] 317 dilate_8c
  // nope
  // poc 317 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_110 [3 poc 1] -> [4 poc 1] 318 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_110 [4 input 1] -> [4 poc 1] 318 dilate_8c
  // nope
  // poc 318 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_109 [4 poc 1] -> [5 poc 1] 319 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_109 [5 input 1] -> [5 poc 1] 319 dilate_8c
  // nope
  // poc 319 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_108 [5 poc 1] -> [6 poc 1] 320 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_108 [6 input 1] -> [6 poc 1] 320 dilate_8c
  // nope
  // poc 320 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_107 [6 poc 1] -> [7 poc 1] 321 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_107 [7 input 1] -> [7 poc 1] 321 dilate_8c
  // nope
  // poc 321 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_107 on 0 and image 0`out_106 on 1
  // 0`imWork1_107 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_107 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_106 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_106 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_12(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1,
  const int32_t * pi2,
  const int32_t * pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_107 [0 input 0] -> [0 poc 0] 121 dilate_8c
  // nope
  // poc 121 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_106 [0 poc 0] -> [1 poc 0] 122 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_106 [1 input 0] -> [1 poc 0] 122 dilate_8c
  // nope
  // poc 122 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_105 [1 poc 0] -> [2 poc 0] 123 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_105 [2 input 0] -> [2 poc 0] 123 dilate_8c
  // nope
  // poc 123 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_104 [2 poc 0] -> [3 poc 0] 124 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_104 [3 input 0] -> [3 poc 0] 124 dilate_8c
  // nope
  // poc 124 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_103 [3 poc 0] -> [4 poc 0] 125 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_103 [4 input 0] -> [4 poc 0] 125 erode_8c
  // nope
  // poc 125 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi1[i];


  // STAGE 5
  // 0`imWork1_102 [4 poc 0] -> [5 poc 0] 126 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_102 [5 input 0] -> [5 poc 0] 126 erode_8c
  // nope
  // poc 126 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi1[i];


  // STAGE 6
  // 0`imWork1_101 [5 poc 0] -> [6 poc 0] 127 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_101 [6 input 0] -> [6 poc 0] 127 erode_8c
  // nope
  // poc 127 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi1[i];


  // STAGE 7
  // 0`imWork1_100 [6 poc 0] -> [7 poc 0] 128 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_100 [7 input 0] -> [7 poc 0] 128 erode_8c
  // nope
  // poc 128 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // STAGE 0
  // 0`out_106 [0 input 1] -> [0 poc 1] 322 dilate_8c
  // nope
  // poc 322 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi2[i];


  // STAGE 1
  // 0`out_105 [0 poc 1] -> [1 poc 1] 323 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_105 [1 input 1] -> [1 poc 1] 323 dilate_8c
  // nope
  // poc 323 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi2[i];


  // STAGE 2
  // 0`out_104 [1 poc 1] -> [2 poc 1] 324 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_104 [2 input 1] -> [2 poc 1] 324 dilate_8c
  // nope
  // poc 324 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi2[i];


  // STAGE 3
  // 0`out_103 [2 poc 1] -> [3 poc 1] 325 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_103 [3 input 1] -> [3 poc 1] 325 dilate_8c
  // nope
  // poc 325 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi2[i];


  // STAGE 4
  // 0`out_102 [3 poc 1] -> [4 poc 1] 326 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_102 [4 input 1] -> [4 poc 1] 326 erode_8c
  // nope
  // poc 326 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi3[i];


  // STAGE 5
  // 0`out_101 [4 poc 1] -> [5 poc 1] 327 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_101 [5 input 1] -> [5 poc 1] 327 erode_8c
  // nope
  // poc 327 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi3[i];


  // STAGE 6
  // 0`out_100 [5 poc 1] -> [6 poc 1] 328 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_100 [6 input 1] -> [6 poc 1] 328 erode_8c
  // nope
  // poc 328 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi3[i];


  // STAGE 7
  // 0`out_99 [6 poc 1] -> [7 poc 1] 329 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_99 [7 input 1] -> [7 poc 1] 329 erode_8c
  // nope
  // poc 329 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi3[i];


  // output image 0`imWork1_99 on 0 and image 0`out_98 on 1
  // 0`imWork1_99 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_99 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_98 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_98 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_13(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_99 [0 input 0] -> [0 poc 0] 129 erode_8c
  // nope
  // poc 129 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_98 [0 poc 0] -> [1 poc 0] 130 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_98 [1 input 0] -> [1 poc 0] 130 erode_8c
  // nope
  // poc 130 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_97 [1 poc 0] -> [2 poc 0] 131 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_97 [2 input 0] -> [2 poc 0] 131 erode_8c
  // nope
  // poc 131 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_96 [2 poc 0] -> [3 poc 0] 132 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_96 [3 input 0] -> [3 poc 0] 132 erode_8c
  // nope
  // poc 132 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_95 [3 poc 0] -> [4 poc 0] 133 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_95 [4 input 0] -> [4 poc 0] 133 erode_8c
  // nope
  // poc 133 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_94 [4 poc 0] -> [5 poc 0] 134 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_94 [5 input 0] -> [5 poc 0] 134 erode_8c
  // nope
  // poc 134 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_93 [5 poc 0] -> [6 poc 0] 135 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_93 [6 input 0] -> [6 poc 0] 135 erode_8c
  // nope
  // poc 135 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_92 [6 poc 0] -> [7 poc 0] 136 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_92 [7 input 0] -> [7 poc 0] 136 erode_8c
  // nope
  // poc 136 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_98 [0 input 1] -> [0 poc 1] 330 erode_8c
  // nope
  // poc 330 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_97 [0 poc 1] -> [1 poc 1] 331 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_97 [1 input 1] -> [1 poc 1] 331 erode_8c
  // nope
  // poc 331 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_96 [1 poc 1] -> [2 poc 1] 332 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_96 [2 input 1] -> [2 poc 1] 332 erode_8c
  // nope
  // poc 332 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_95 [2 poc 1] -> [3 poc 1] 333 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_95 [3 input 1] -> [3 poc 1] 333 erode_8c
  // nope
  // poc 333 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_94 [3 poc 1] -> [4 poc 1] 334 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_94 [4 input 1] -> [4 poc 1] 334 erode_8c
  // nope
  // poc 334 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_93 [4 poc 1] -> [5 poc 1] 335 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_93 [5 input 1] -> [5 poc 1] 335 erode_8c
  // nope
  // poc 335 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_92 [5 poc 1] -> [6 poc 1] 336 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_92 [6 input 1] -> [6 poc 1] 336 erode_8c
  // nope
  // poc 336 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_91 [6 poc 1] -> [7 poc 1] 337 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_91 [7 input 1] -> [7 poc 1] 337 erode_8c
  // nope
  // poc 337 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_91 on 0 and image 0`out_90 on 1
  // 0`imWork1_91 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_91 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_90 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_90 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_14(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_91 [0 input 0] -> [0 poc 0] 137 erode_8c
  // nope
  // poc 137 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_90 [0 poc 0] -> [1 poc 0] 138 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_90 [1 input 0] -> [1 poc 0] 138 erode_8c
  // nope
  // poc 138 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_89 [1 poc 0] -> [2 poc 0] 139 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_89 [2 input 0] -> [2 poc 0] 139 erode_8c
  // nope
  // poc 139 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_88 [2 poc 0] -> [3 poc 0] 140 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_88 [3 input 0] -> [3 poc 0] 140 erode_8c
  // nope
  // poc 140 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_87 [3 poc 0] -> [4 poc 0] 141 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_87 [4 input 0] -> [4 poc 0] 141 erode_8c
  // nope
  // poc 141 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_86 [4 poc 0] -> [5 poc 0] 142 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_86 [5 input 0] -> [5 poc 0] 142 erode_8c
  // nope
  // poc 142 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_85 [5 poc 0] -> [6 poc 0] 143 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_85 [6 input 0] -> [6 poc 0] 143 erode_8c
  // nope
  // poc 143 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_84 [6 poc 0] -> [7 poc 0] 144 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_84 [7 input 0] -> [7 poc 0] 144 erode_8c
  // nope
  // poc 144 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_90 [0 input 1] -> [0 poc 1] 338 erode_8c
  // nope
  // poc 338 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_89 [0 poc 1] -> [1 poc 1] 339 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_89 [1 input 1] -> [1 poc 1] 339 erode_8c
  // nope
  // poc 339 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_88 [1 poc 1] -> [2 poc 1] 340 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_88 [2 input 1] -> [2 poc 1] 340 erode_8c
  // nope
  // poc 340 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_87 [2 poc 1] -> [3 poc 1] 341 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_87 [3 input 1] -> [3 poc 1] 341 erode_8c
  // nope
  // poc 341 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_86 [3 poc 1] -> [4 poc 1] 342 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_86 [4 input 1] -> [4 poc 1] 342 erode_8c
  // nope
  // poc 342 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_85 [4 poc 1] -> [5 poc 1] 343 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_85 [5 input 1] -> [5 poc 1] 343 erode_8c
  // nope
  // poc 343 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_84 [5 poc 1] -> [6 poc 1] 344 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_84 [6 input 1] -> [6 poc 1] 344 erode_8c
  // nope
  // poc 344 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_83 [6 poc 1] -> [7 poc 1] 345 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_83 [7 input 1] -> [7 poc 1] 345 erode_8c
  // nope
  // poc 345 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_83 on 0 and image 0`out_82 on 1
  // 0`imWork1_83 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_83 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_82 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_82 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_15(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_83 [0 input 0] -> [0 poc 0] 145 erode_8c
  // nope
  // poc 145 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_82 [0 poc 0] -> [1 poc 0] 146 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_82 [1 input 0] -> [1 poc 0] 146 erode_8c
  // nope
  // poc 146 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_81 [1 poc 0] -> [2 poc 0] 147 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_81 [2 input 0] -> [2 poc 0] 147 erode_8c
  // nope
  // poc 147 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_80 [2 poc 0] -> [3 poc 0] 148 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_80 [3 input 0] -> [3 poc 0] 148 erode_8c
  // nope
  // poc 148 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_79 [3 poc 0] -> [4 poc 0] 149 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_79 [4 input 0] -> [4 poc 0] 149 erode_8c
  // nope
  // poc 149 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_78 [4 poc 0] -> [5 poc 0] 150 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_78 [5 input 0] -> [5 poc 0] 150 erode_8c
  // nope
  // poc 150 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_77 [5 poc 0] -> [6 poc 0] 151 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_77 [6 input 0] -> [6 poc 0] 151 erode_8c
  // nope
  // poc 151 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_76 [6 poc 0] -> [7 poc 0] 152 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_76 [7 input 0] -> [7 poc 0] 152 erode_8c
  // nope
  // poc 152 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_82 [0 input 1] -> [0 poc 1] 346 erode_8c
  // nope
  // poc 346 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_81 [0 poc 1] -> [1 poc 1] 347 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_81 [1 input 1] -> [1 poc 1] 347 erode_8c
  // nope
  // poc 347 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_80 [1 poc 1] -> [2 poc 1] 348 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_80 [2 input 1] -> [2 poc 1] 348 erode_8c
  // nope
  // poc 348 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_79 [2 poc 1] -> [3 poc 1] 349 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_79 [3 input 1] -> [3 poc 1] 349 erode_8c
  // nope
  // poc 349 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_78 [3 poc 1] -> [4 poc 1] 350 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_78 [4 input 1] -> [4 poc 1] 350 erode_8c
  // nope
  // poc 350 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_77 [4 poc 1] -> [5 poc 1] 351 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_77 [5 input 1] -> [5 poc 1] 351 erode_8c
  // nope
  // poc 351 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_76 [5 poc 1] -> [6 poc 1] 352 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_76 [6 input 1] -> [6 poc 1] 352 erode_8c
  // nope
  // poc 352 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_75 [6 poc 1] -> [7 poc 1] 353 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_75 [7 input 1] -> [7 poc 1] 353 erode_8c
  // nope
  // poc 353 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_75 on 0 and image 0`out_74 on 1
  // 0`imWork1_75 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_75 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_74 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_74 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_16(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_75 [0 input 0] -> [0 poc 0] 153 erode_8c
  // nope
  // poc 153 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_74 [0 poc 0] -> [1 poc 0] 154 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_74 [1 input 0] -> [1 poc 0] 154 erode_8c
  // nope
  // poc 154 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_73 [1 poc 0] -> [2 poc 0] 155 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_73 [2 input 0] -> [2 poc 0] 155 erode_8c
  // nope
  // poc 155 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_72 [2 poc 0] -> [3 poc 0] 156 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_72 [3 input 0] -> [3 poc 0] 156 erode_8c
  // nope
  // poc 156 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_71 [3 poc 0] -> [4 poc 0] 157 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_71 [4 input 0] -> [4 poc 0] 157 erode_8c
  // nope
  // poc 157 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_70 [4 poc 0] -> [5 poc 0] 158 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_70 [5 input 0] -> [5 poc 0] 158 erode_8c
  // nope
  // poc 158 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_69 [5 poc 0] -> [6 poc 0] 159 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_69 [6 input 0] -> [6 poc 0] 159 erode_8c
  // nope
  // poc 159 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_68 [6 poc 0] -> [7 poc 0] 160 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_68 [7 input 0] -> [7 poc 0] 160 erode_8c
  // nope
  // poc 160 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_74 [0 input 1] -> [0 poc 1] 354 erode_8c
  // nope
  // poc 354 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_73 [0 poc 1] -> [1 poc 1] 355 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_73 [1 input 1] -> [1 poc 1] 355 erode_8c
  // nope
  // poc 355 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_72 [1 poc 1] -> [2 poc 1] 356 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_72 [2 input 1] -> [2 poc 1] 356 erode_8c
  // nope
  // poc 356 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_71 [2 poc 1] -> [3 poc 1] 357 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_71 [3 input 1] -> [3 poc 1] 357 erode_8c
  // nope
  // poc 357 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_70 [3 poc 1] -> [4 poc 1] 358 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_70 [4 input 1] -> [4 poc 1] 358 erode_8c
  // nope
  // poc 358 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_69 [4 poc 1] -> [5 poc 1] 359 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_69 [5 input 1] -> [5 poc 1] 359 erode_8c
  // nope
  // poc 359 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_68 [5 poc 1] -> [6 poc 1] 360 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_68 [6 input 1] -> [6 poc 1] 360 erode_8c
  // nope
  // poc 360 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_67 [6 poc 1] -> [7 poc 1] 361 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_67 [7 input 1] -> [7 poc 1] 361 erode_8c
  // nope
  // poc 361 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_67 on 0 and image 0`out_66 on 1
  // 0`imWork1_67 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_67 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_66 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_66 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_17(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_67 [0 input 0] -> [0 poc 0] 161 erode_8c
  // nope
  // poc 161 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_66 [0 poc 0] -> [1 poc 0] 162 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_66 [1 input 0] -> [1 poc 0] 162 erode_8c
  // nope
  // poc 162 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_65 [1 poc 0] -> [2 poc 0] 163 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_65 [2 input 0] -> [2 poc 0] 163 erode_8c
  // nope
  // poc 163 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_64 [2 poc 0] -> [3 poc 0] 164 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_64 [3 input 0] -> [3 poc 0] 164 erode_8c
  // nope
  // poc 164 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_63 [3 poc 0] -> [4 poc 0] 165 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_63 [4 input 0] -> [4 poc 0] 165 erode_8c
  // nope
  // poc 165 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_62 [4 poc 0] -> [5 poc 0] 166 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_62 [5 input 0] -> [5 poc 0] 166 erode_8c
  // nope
  // poc 166 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_61 [5 poc 0] -> [6 poc 0] 167 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_61 [6 input 0] -> [6 poc 0] 167 erode_8c
  // nope
  // poc 167 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_60 [6 poc 0] -> [7 poc 0] 168 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_60 [7 input 0] -> [7 poc 0] 168 erode_8c
  // nope
  // poc 168 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_66 [0 input 1] -> [0 poc 1] 362 erode_8c
  // nope
  // poc 362 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_65 [0 poc 1] -> [1 poc 1] 363 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_65 [1 input 1] -> [1 poc 1] 363 erode_8c
  // nope
  // poc 363 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_64 [1 poc 1] -> [2 poc 1] 364 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_64 [2 input 1] -> [2 poc 1] 364 erode_8c
  // nope
  // poc 364 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_63 [2 poc 1] -> [3 poc 1] 365 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_63 [3 input 1] -> [3 poc 1] 365 erode_8c
  // nope
  // poc 365 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_62 [3 poc 1] -> [4 poc 1] 366 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_62 [4 input 1] -> [4 poc 1] 366 erode_8c
  // nope
  // poc 366 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_61 [4 poc 1] -> [5 poc 1] 367 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_61 [5 input 1] -> [5 poc 1] 367 erode_8c
  // nope
  // poc 367 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_60 [5 poc 1] -> [6 poc 1] 368 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_60 [6 input 1] -> [6 poc 1] 368 erode_8c
  // nope
  // poc 368 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_59 [6 poc 1] -> [7 poc 1] 369 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_59 [7 input 1] -> [7 poc 1] 369 erode_8c
  // nope
  // poc 369 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_59 on 0 and image 0`out_58 on 1
  // 0`imWork1_59 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_59 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_58 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_58 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_18(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_59 [0 input 0] -> [0 poc 0] 169 erode_8c
  // nope
  // poc 169 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_58 [0 poc 0] -> [1 poc 0] 170 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_58 [1 input 0] -> [1 poc 0] 170 erode_8c
  // nope
  // poc 170 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_57 [1 poc 0] -> [2 poc 0] 171 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_57 [2 input 0] -> [2 poc 0] 171 erode_8c
  // nope
  // poc 171 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_56 [2 poc 0] -> [3 poc 0] 172 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_56 [3 input 0] -> [3 poc 0] 172 erode_8c
  // nope
  // poc 172 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_55 [3 poc 0] -> [4 poc 0] 173 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_55 [4 input 0] -> [4 poc 0] 173 erode_8c
  // nope
  // poc 173 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_54 [4 poc 0] -> [5 poc 0] 174 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_54 [5 input 0] -> [5 poc 0] 174 erode_8c
  // nope
  // poc 174 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_53 [5 poc 0] -> [6 poc 0] 175 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_53 [6 input 0] -> [6 poc 0] 175 erode_8c
  // nope
  // poc 175 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_52 [6 poc 0] -> [7 poc 0] 176 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_52 [7 input 0] -> [7 poc 0] 176 erode_8c
  // nope
  // poc 176 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_58 [0 input 1] -> [0 poc 1] 370 erode_8c
  // nope
  // poc 370 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_57 [0 poc 1] -> [1 poc 1] 371 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_57 [1 input 1] -> [1 poc 1] 371 erode_8c
  // nope
  // poc 371 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_56 [1 poc 1] -> [2 poc 1] 372 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_56 [2 input 1] -> [2 poc 1] 372 erode_8c
  // nope
  // poc 372 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_55 [2 poc 1] -> [3 poc 1] 373 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_55 [3 input 1] -> [3 poc 1] 373 erode_8c
  // nope
  // poc 373 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_54 [3 poc 1] -> [4 poc 1] 374 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_54 [4 input 1] -> [4 poc 1] 374 erode_8c
  // nope
  // poc 374 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_53 [4 poc 1] -> [5 poc 1] 375 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_53 [5 input 1] -> [5 poc 1] 375 erode_8c
  // nope
  // poc 375 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_52 [5 poc 1] -> [6 poc 1] 376 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_52 [6 input 1] -> [6 poc 1] 376 erode_8c
  // nope
  // poc 376 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_51 [6 poc 1] -> [7 poc 1] 377 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_51 [7 input 1] -> [7 poc 1] 377 erode_8c
  // nope
  // poc 377 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_51 on 0 and image 0`out_50 on 1
  // 0`imWork1_51 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_51 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_50 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_50 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_19(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_51 [0 input 0] -> [0 poc 0] 177 erode_8c
  // nope
  // poc 177 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_50 [0 poc 0] -> [1 poc 0] 178 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_50 [1 input 0] -> [1 poc 0] 178 erode_8c
  // nope
  // poc 178 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_49 [1 poc 0] -> [2 poc 0] 179 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_49 [2 input 0] -> [2 poc 0] 179 erode_8c
  // nope
  // poc 179 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_48 [2 poc 0] -> [3 poc 0] 180 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_48 [3 input 0] -> [3 poc 0] 180 erode_8c
  // nope
  // poc 180 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_47 [3 poc 0] -> [4 poc 0] 181 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_47 [4 input 0] -> [4 poc 0] 181 erode_8c
  // nope
  // poc 181 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_46 [4 poc 0] -> [5 poc 0] 182 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_46 [5 input 0] -> [5 poc 0] 182 erode_8c
  // nope
  // poc 182 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_45 [5 poc 0] -> [6 poc 0] 183 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_45 [6 input 0] -> [6 poc 0] 183 erode_8c
  // nope
  // poc 183 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_44 [6 poc 0] -> [7 poc 0] 184 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_44 [7 input 0] -> [7 poc 0] 184 erode_8c
  // nope
  // poc 184 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_50 [0 input 1] -> [0 poc 1] 378 erode_8c
  // nope
  // poc 378 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_49 [0 poc 1] -> [1 poc 1] 379 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_49 [1 input 1] -> [1 poc 1] 379 erode_8c
  // nope
  // poc 379 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_48 [1 poc 1] -> [2 poc 1] 380 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_48 [2 input 1] -> [2 poc 1] 380 erode_8c
  // nope
  // poc 380 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_47 [2 poc 1] -> [3 poc 1] 381 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_47 [3 input 1] -> [3 poc 1] 381 erode_8c
  // nope
  // poc 381 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_46 [3 poc 1] -> [4 poc 1] 382 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_46 [4 input 1] -> [4 poc 1] 382 erode_8c
  // nope
  // poc 382 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_45 [4 poc 1] -> [5 poc 1] 383 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_45 [5 input 1] -> [5 poc 1] 383 erode_8c
  // nope
  // poc 383 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_44 [5 poc 1] -> [6 poc 1] 384 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_44 [6 input 1] -> [6 poc 1] 384 erode_8c
  // nope
  // poc 384 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_43 [6 poc 1] -> [7 poc 1] 385 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_43 [7 input 1] -> [7 poc 1] 385 erode_8c
  // nope
  // poc 385 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_43 on 0 and image 0`out_42 on 1
  // 0`imWork1_43 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_43 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_42 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_42 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_20(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_43 [0 input 0] -> [0 poc 0] 185 erode_8c
  // nope
  // poc 185 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_42 [0 poc 0] -> [1 poc 0] 186 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_42 [1 input 0] -> [1 poc 0] 186 erode_8c
  // nope
  // poc 186 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_41 [1 poc 0] -> [2 poc 0] 187 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_41 [2 input 0] -> [2 poc 0] 187 erode_8c
  // nope
  // poc 187 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_40 [2 poc 0] -> [3 poc 0] 188 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_40 [3 input 0] -> [3 poc 0] 188 erode_8c
  // nope
  // poc 188 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_39 [3 poc 0] -> [4 poc 0] 189 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_39 [4 input 0] -> [4 poc 0] 189 erode_8c
  // nope
  // poc 189 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_38 [4 poc 0] -> [5 poc 0] 190 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_38 [5 input 0] -> [5 poc 0] 190 erode_8c
  // nope
  // poc 190 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_37 [5 poc 0] -> [6 poc 0] 191 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_37 [6 input 0] -> [6 poc 0] 191 erode_8c
  // nope
  // poc 191 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_36 [6 poc 0] -> [7 poc 0] 192 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_36 [7 input 0] -> [7 poc 0] 192 erode_8c
  // nope
  // poc 192 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_42 [0 input 1] -> [0 poc 1] 386 erode_8c
  // nope
  // poc 386 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_41 [0 poc 1] -> [1 poc 1] 387 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_41 [1 input 1] -> [1 poc 1] 387 erode_8c
  // nope
  // poc 387 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_40 [1 poc 1] -> [2 poc 1] 388 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_40 [2 input 1] -> [2 poc 1] 388 erode_8c
  // nope
  // poc 388 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_39 [2 poc 1] -> [3 poc 1] 389 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_39 [3 input 1] -> [3 poc 1] 389 erode_8c
  // nope
  // poc 389 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_38 [3 poc 1] -> [4 poc 1] 390 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_38 [4 input 1] -> [4 poc 1] 390 erode_8c
  // nope
  // poc 390 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_37 [4 poc 1] -> [5 poc 1] 391 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_37 [5 input 1] -> [5 poc 1] 391 erode_8c
  // nope
  // poc 391 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_36 [5 poc 1] -> [6 poc 1] 392 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_36 [6 input 1] -> [6 poc 1] 392 erode_8c
  // nope
  // poc 392 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_35 [6 poc 1] -> [7 poc 1] 393 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_35 [7 input 1] -> [7 poc 1] 393 erode_8c
  // nope
  // poc 393 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_35 on 0 and image 0`out_34 on 1
  // 0`imWork1_35 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_35 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_34 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_34 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_21(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_35 [0 input 0] -> [0 poc 0] 193 erode_8c
  // nope
  // poc 193 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_34 [0 poc 0] -> [1 poc 0] 194 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_34 [1 input 0] -> [1 poc 0] 194 erode_8c
  // nope
  // poc 194 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_33 [1 poc 0] -> [2 poc 0] 195 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_33 [2 input 0] -> [2 poc 0] 195 erode_8c
  // nope
  // poc 195 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_32 [2 poc 0] -> [3 poc 0] 196 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_32 [3 input 0] -> [3 poc 0] 196 erode_8c
  // nope
  // poc 196 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_31 [3 poc 0] -> [4 poc 0] 197 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_31 [4 input 0] -> [4 poc 0] 197 erode_8c
  // nope
  // poc 197 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_30 [4 poc 0] -> [5 poc 0] 198 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_30 [5 input 0] -> [5 poc 0] 198 erode_8c
  // nope
  // poc 198 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_29 [5 poc 0] -> [6 poc 0] 199 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_29 [6 input 0] -> [6 poc 0] 199 erode_8c
  // nope
  // poc 199 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_28 [6 poc 0] -> [7 poc 0] 200 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_28 [7 input 0] -> [7 poc 0] 200 erode_8c
  // nope
  // poc 200 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_34 [0 input 1] -> [0 poc 1] 394 erode_8c
  // nope
  // poc 394 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_33 [0 poc 1] -> [1 poc 1] 395 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_33 [1 input 1] -> [1 poc 1] 395 erode_8c
  // nope
  // poc 395 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_32 [1 poc 1] -> [2 poc 1] 396 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_32 [2 input 1] -> [2 poc 1] 396 erode_8c
  // nope
  // poc 396 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_31 [2 poc 1] -> [3 poc 1] 397 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_31 [3 input 1] -> [3 poc 1] 397 erode_8c
  // nope
  // poc 397 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_30 [3 poc 1] -> [4 poc 1] 398 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_30 [4 input 1] -> [4 poc 1] 398 erode_8c
  // nope
  // poc 398 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_29 [4 poc 1] -> [5 poc 1] 399 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_29 [5 input 1] -> [5 poc 1] 399 erode_8c
  // nope
  // poc 399 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_28 [5 poc 1] -> [6 poc 1] 400 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_28 [6 input 1] -> [6 poc 1] 400 erode_8c
  // nope
  // poc 400 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_27 [6 poc 1] -> [7 poc 1] 401 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_27 [7 input 1] -> [7 poc 1] 401 erode_8c
  // nope
  // poc 401 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_27 on 0 and image 0`out_26 on 1
  // 0`imWork1_27 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_27 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_26 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_26 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_22(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_27 [0 input 0] -> [0 poc 0] 201 erode_8c
  // nope
  // poc 201 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_26 [0 poc 0] -> [1 poc 0] 202 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_26 [1 input 0] -> [1 poc 0] 202 erode_8c
  // nope
  // poc 202 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_25 [1 poc 0] -> [2 poc 0] 203 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_25 [2 input 0] -> [2 poc 0] 203 erode_8c
  // nope
  // poc 203 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_24 [2 poc 0] -> [3 poc 0] 204 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_24 [3 input 0] -> [3 poc 0] 204 erode_8c
  // nope
  // poc 204 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_23 [3 poc 0] -> [4 poc 0] 205 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_23 [4 input 0] -> [4 poc 0] 205 erode_8c
  // nope
  // poc 205 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_22 [4 poc 0] -> [5 poc 0] 206 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_22 [5 input 0] -> [5 poc 0] 206 erode_8c
  // nope
  // poc 206 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_21 [5 poc 0] -> [6 poc 0] 207 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_21 [6 input 0] -> [6 poc 0] 207 erode_8c
  // nope
  // poc 207 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_20 [6 poc 0] -> [7 poc 0] 208 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_20 [7 input 0] -> [7 poc 0] 208 erode_8c
  // nope
  // poc 208 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_26 [0 input 1] -> [0 poc 1] 402 erode_8c
  // nope
  // poc 402 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_25 [0 poc 1] -> [1 poc 1] 403 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_25 [1 input 1] -> [1 poc 1] 403 erode_8c
  // nope
  // poc 403 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_24 [1 poc 1] -> [2 poc 1] 404 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_24 [2 input 1] -> [2 poc 1] 404 erode_8c
  // nope
  // poc 404 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_23 [2 poc 1] -> [3 poc 1] 405 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_23 [3 input 1] -> [3 poc 1] 405 erode_8c
  // nope
  // poc 405 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_22 [3 poc 1] -> [4 poc 1] 406 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_22 [4 input 1] -> [4 poc 1] 406 erode_8c
  // nope
  // poc 406 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_21 [4 poc 1] -> [5 poc 1] 407 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_21 [5 input 1] -> [5 poc 1] 407 erode_8c
  // nope
  // poc 407 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_20 [5 poc 1] -> [6 poc 1] 408 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_20 [6 input 1] -> [6 poc 1] 408 erode_8c
  // nope
  // poc 408 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_19 [6 poc 1] -> [7 poc 1] 409 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_19 [7 input 1] -> [7 poc 1] 409 erode_8c
  // nope
  // poc 409 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_19 on 0 and image 0`out_18 on 1
  // 0`imWork1_19 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_19 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_18 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_18 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_23(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_19 [0 input 0] -> [0 poc 0] 209 erode_8c
  // nope
  // poc 209 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_18 [0 poc 0] -> [1 poc 0] 210 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_18 [1 input 0] -> [1 poc 0] 210 erode_8c
  // nope
  // poc 210 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_17 [1 poc 0] -> [2 poc 0] 211 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_17 [2 input 0] -> [2 poc 0] 211 erode_8c
  // nope
  // poc 211 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_16 [2 poc 0] -> [3 poc 0] 212 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_16 [3 input 0] -> [3 poc 0] 212 erode_8c
  // nope
  // poc 212 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_15 [3 poc 0] -> [4 poc 0] 213 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_15 [4 input 0] -> [4 poc 0] 213 erode_8c
  // nope
  // poc 213 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_14 [4 poc 0] -> [5 poc 0] 214 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_14 [5 input 0] -> [5 poc 0] 214 erode_8c
  // nope
  // poc 214 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_13 [5 poc 0] -> [6 poc 0] 215 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_13 [6 input 0] -> [6 poc 0] 215 erode_8c
  // nope
  // poc 215 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_12 [6 poc 0] -> [7 poc 0] 216 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_12 [7 input 0] -> [7 poc 0] 216 erode_8c
  // nope
  // poc 216 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_18 [0 input 1] -> [0 poc 1] 410 erode_8c
  // nope
  // poc 410 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_17 [0 poc 1] -> [1 poc 1] 411 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_17 [1 input 1] -> [1 poc 1] 411 erode_8c
  // nope
  // poc 411 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_16 [1 poc 1] -> [2 poc 1] 412 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_16 [2 input 1] -> [2 poc 1] 412 erode_8c
  // nope
  // poc 412 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_15 [2 poc 1] -> [3 poc 1] 413 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_15 [3 input 1] -> [3 poc 1] 413 erode_8c
  // nope
  // poc 413 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_14 [3 poc 1] -> [4 poc 1] 414 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_14 [4 input 1] -> [4 poc 1] 414 erode_8c
  // nope
  // poc 414 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_13 [4 poc 1] -> [5 poc 1] 415 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_13 [5 input 1] -> [5 poc 1] 415 erode_8c
  // nope
  // poc 415 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_12 [5 poc 1] -> [6 poc 1] 416 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_12 [6 input 1] -> [6 poc 1] 416 erode_8c
  // nope
  // poc 416 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_11 [6 poc 1] -> [7 poc 1] 417 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_11 [7 input 1] -> [7 poc 1] 417 erode_8c
  // nope
  // poc 417 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];


  // output image 0`imWork1_11 on 0 and image 0`out_10 on 1
  // 0`imWork1_11 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_11 [7 output 0] -> [7 output 0] 0 null
  // nope

  // 0`out_10 [7 poc 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`out_10 [7 output 1] -> [7 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_24(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  const int32_t * pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_11 [0 input 0] -> [0 poc 0] 217 erode_8c
  // nope
  // poc 217 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_10 [0 poc 0] -> [1 poc 0] 218 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_10 [1 input 0] -> [1 poc 0] 218 erode_8c
  // nope
  // poc 218 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_9 [1 poc 0] -> [2 poc 0] 219 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_9 [2 input 0] -> [2 poc 0] 219 erode_8c
  // nope
  // poc 219 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imWork1_8 [2 poc 0] -> [3 poc 0] 220 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_8 [3 input 0] -> [3 poc 0] 220 erode_8c
  // nope
  // poc 220 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imWork1_7 [3 poc 0] -> [4 poc 0] 221 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_7 [4 input 0] -> [4 poc 0] 221 erode_8c
  // nope
  // poc 221 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imWork1_6 [4 poc 0] -> [5 poc 0] 222 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_6 [5 input 0] -> [5 poc 0] 222 erode_8c
  // nope
  // poc 222 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imWork1_5 [5 poc 0] -> [6 poc 0] 223 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_5 [6 input 0] -> [6 poc 0] 223 erode_8c
  // nope
  // poc 223 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imWork1_4 [6 poc 0] -> [7 poc 0] 224 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_4 [7 input 0] -> [7 poc 0] 224 erode_8c
  // nope
  // poc 224 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`out_10 [0 input 1] -> [0 poc 1] 418 erode_8c
  // nope
  // poc 418 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi1[i];


  // STAGE 1
  // 0`out_9 [0 poc 1] -> [1 poc 1] 419 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`out_9 [1 input 1] -> [1 poc 1] 419 erode_8c
  // nope
  // poc 419 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi1[i];


  // STAGE 2
  // 0`out_8 [1 poc 1] -> [2 poc 1] 420 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`out_8 [2 input 1] -> [2 poc 1] 420 erode_8c
  // nope
  // poc 420 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi1[i];


  // STAGE 3
  // 0`out_7 [2 poc 1] -> [3 poc 1] 421 erode_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`out_7 [3 input 1] -> [3 poc 1] 421 erode_8c
  // nope
  // poc 421 erode_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_ERODE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi1[i];


  // STAGE 4
  // 0`out_6 [3 poc 1] -> [4 poc 1] 422 erode_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`out_6 [4 input 1] -> [4 poc 1] 422 erode_8c
  // nope
  // poc 422 erode_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_ERODE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi1[i];


  // STAGE 5
  // 0`out_5 [4 poc 1] -> [5 poc 1] 423 erode_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`out_5 [5 input 1] -> [5 poc 1] 423 erode_8c
  // nope
  // poc 423 erode_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_ERODE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi1[i];


  // STAGE 6
  // 0`out_4 [5 poc 1] -> [6 poc 1] 424 erode_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`out_4 [6 input 1] -> [6 poc 1] 424 erode_8c
  // nope
  // poc 424 erode_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_ERODE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi1[i];


  // STAGE 7
  // 0`out_3 [6 poc 1] -> [7 poc 1] 425 erode_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`out_3 [7 input 1] -> [7 poc 1] 425 erode_8c
  // nope
  // poc 425 erode_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_ERODE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi1[i];

  // 0`imWork1_3 [7 poc 0] -> [7 alu] 426 inf
  // nope
  // 0`out_2 [7 poc 1] -> [7 alu] 426 inf
  // nope
  // alu 426 inf stage 7
  si.alu[7][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`imClose [7 alu] -> [7 threshold 0] 430 threshold
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;
  // threshold 430 threshold stage 7 side 0
  si.th[7][0].op = pi4? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[7][0].boundmin = pi2;
  sp.th[7][0].boundmax = pi3;


  // output image 0`imClose on 1 and image 0`imZone3 on 0
  // 0`imClose [7 alu] -> [7 output 1] 0 null
  si.mux[7][1].op = SPOC_MUX_IN1;
  si.mux[7][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imClose [7 output 1] -> [7 output 1] 0 null
  // nope

  // 0`imZone3 [7 threshold 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imZone3 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_1_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imClose [0 input 0] -> [0 alu] 427 sub
  // nope
  // 0`imin [0 input 1] -> [0 alu] 427 sub
  // nope
  // alu 427 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`imTophat [0 alu] -> [0 threshold 0] 428 threshold
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // threshold 428 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;

  // 0`imTophat [0 alu] -> [0 threshold 1] 429 threshold
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // threshold 429 threshold stage 0 side 1
  si.th[0][1].op = pi5? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][1].boundmin = pi3;
  sp.th[0][1].boundmax = pi4;


  // output image 0`imZone1 on 0 and image 0`imZone2 on 1
  // 0`imZone1 [0 threshold 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`imZone1 [0 output 0] -> [7 output 0] 0 null
  // 0`imZone1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`imZone2 [0 threshold 1] -> [0 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`imZone2 [0 output 1] -> [7 output 1] 0 null
  // 0`imZone2 [1 input 1] -> [7 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone1 [0 input 0] -> [0 alu] 431 sup
  // nope
  // 0`imZone2 [0 input 1] -> [0 alu] 431 sup
  // nope
  // alu 431 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1_2 on 0
  // 0`imWork1_2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_2 [0 output 0] -> [7 output 0] 0 null
  // 0`imWork1_2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_3_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1_2 [0 input 0] -> [0 alu] 432 sup
  // nope
  // 0`imZone3 [0 input 1] -> [0 alu] 432 sup
  // nope
  // alu 432 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 1
  // 0`imWork1_1 [0 alu] -> [1 alu] 433 not
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`imWork1_1 [1 input 0] -> [1 alu] 433 not
  // nope
  // alu 433 not stage 1
  si.alu[1][0].op = SPOC_ALU_NOT_IN0;


  // STAGE 3
  // 0`imWork1 [1 alu] -> [3 poc 0] 434 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`imWork1 [2 input 0] -> [3 poc 0] 434 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 0] -> [3 poc 0] 434 dilate_8c
  // nope
  // poc 434 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`out_1 [3 poc 0] -> [4 poc 0] 435 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_1 [4 input 0] -> [4 poc 0] 435 dilate_8c
  // nope
  // poc 435 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`out [4 poc 0] -> [4 measure 0] 435 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;


  // output image 0`imWork1 on 1 and image 0`out on 0
  // 0`imWork1 [2 poc 0] -> [4 output 1] 0 null
  si.mux[2][1].op = SPOC_MUX_IN0;
  si.mux[2][3].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 1] -> [4 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [4 input 1] -> [4 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imWork1 [4 output 1] -> [7 output 1] 0 null
  // 0`imWork1 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // 0`out [4 measure 0] -> [4 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [4 output 0] -> [7 output 0] 0 null
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 436 global_vol stage 4 side 0
  *po1 = (int32_t) reduc.measure[4][0].volume;

  return ret;
}

// dag 2: 18 ops and 0 copies, optimized to 18 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out [0 input 1] -> [0 poc 1] 438 erode_8c
  // nope
  // poc 438 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imWork1 [0 input 0] -> [0 alu] 439 sup
  // nope
  // 0`out_216 [0 poc 1] -> [0 alu] 439 sup
  // nope
  // alu 439 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 1
  // 0`out_215 [0 alu] -> [1 poc 0] 440 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`out_215 [1 input 0] -> [1 poc 0] 440 erode_8c
  // nope
  // poc 440 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`imWork1 [0 input 0] -> [1 alu] 441 sup
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imWork1 [1 input 1] -> [1 alu] 441 sup
  // nope
  // 0`out_214 [1 poc 0] -> [1 alu] 441 sup
  // nope
  // alu 441 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 2
  // 0`out_213 [1 alu] -> [2 poc 0] 442 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`out_213 [2 input 0] -> [2 poc 0] 442 erode_8c
  // nope
  // poc 442 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imWork1 [1 poc 1] -> [2 alu] 443 sup
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [2 input 1] -> [2 alu] 443 sup
  // nope
  // 0`out_212 [2 poc 0] -> [2 alu] 443 sup
  // nope
  // alu 443 sup stage 2
  si.alu[2][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 3
  // 0`out_211 [2 alu] -> [3 poc 0] 444 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`out_211 [3 input 0] -> [3 poc 0] 444 erode_8c
  // nope
  // poc 444 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`imWork1 [2 poc 1] -> [3 alu] 445 sup
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [3 input 1] -> [3 alu] 445 sup
  // nope
  // 0`out_210 [3 poc 0] -> [3 alu] 445 sup
  // nope
  // alu 445 sup stage 3
  si.alu[3][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 4
  // 0`out_209 [3 alu] -> [4 poc 0] 446 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`out_209 [4 input 0] -> [4 poc 0] 446 erode_8c
  // nope
  // poc 446 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`imWork1 [3 poc 1] -> [4 alu] 447 sup
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [4 input 1] -> [4 alu] 447 sup
  // nope
  // 0`out_208 [4 poc 0] -> [4 alu] 447 sup
  // nope
  // alu 447 sup stage 4
  si.alu[4][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 5
  // 0`out_207 [4 alu] -> [5 poc 0] 448 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // 0`out_207 [5 input 0] -> [5 poc 0] 448 erode_8c
  // nope
  // poc 448 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`imWork1 [4 poc 1] -> [5 alu] 449 sup
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [5 input 1] -> [5 alu] 449 sup
  // nope
  // 0`out_206 [5 poc 0] -> [5 alu] 449 sup
  // nope
  // alu 449 sup stage 5
  si.alu[5][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 6
  // 0`out_205 [5 alu] -> [6 poc 0] 450 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // 0`out_205 [6 input 0] -> [6 poc 0] 450 erode_8c
  // nope
  // poc 450 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`imWork1 [5 poc 1] -> [6 alu] 451 sup
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [6 input 1] -> [6 alu] 451 sup
  // nope
  // 0`out_204 [6 poc 0] -> [6 alu] 451 sup
  // nope
  // alu 451 sup stage 6
  si.alu[6][0].op = SPOC_ALU_SUP_IN0_IN1;

  // 0`out_203 [6 alu] -> [6 measure 0] 451 sup
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;


  // STAGE 7
  // 0`out_203 [6 measure 0] -> [7 poc 0] 453 erode_8c
  // 0`out_203 [7 input 0] -> [7 poc 0] 453 erode_8c
  // nope
  // poc 453 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`imWork1 [6 poc 1] -> [7 alu] 454 sup
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imWork1 [7 input 1] -> [7 alu] 454 sup
  // nope
  // 0`out_202 [7 poc 0] -> [7 alu] 454 sup
  // nope
  // alu 454 sup stage 7
  si.alu[7][0].op = SPOC_ALU_SUP_IN0_IN1;

  // 0`out [7 alu] -> [7 measure 0] 454 sup
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;


  // output image 0`out on 0
  // 0`out [7 measure 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 452 global_vol stage 6 side 0
  *po1 = (int32_t) reduc.measure[6][0].volume;

  // measure 455 global_vol stage 7 side 0
  *po2 = (int32_t) reduc.measure[7][0].volume;

  return ret;
}

// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// # SPOC calls: 3

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone1 [0 input 0] -> [0 alu] 456 inf_const
  // nope
  // alu 456 inf_const stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imZone2 [0 input 1] -> [1 alu] 457 inf_const
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imZone2 [1 input 1] -> [1 alu] 457 inf_const
  // nope
  // alu 457 inf_const stage 1 flipped
  si.alu[1][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[1][0].constant = pi1;


  // STAGE 2
  // 0`imZone1 [0 alu] -> [2 alu] 460 sup
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`imZone1 [1 input 0] -> [2 alu] 460 sup
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imZone1 [2 input 0] -> [2 alu] 460 sup
  // nope
  // 0`imZone2 [1 alu] -> [2 alu] 460 sup
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;
  // 0`imZone2 [2 input 1] -> [2 alu] 460 sup
  // nope
  // alu 460 sup stage 2
  si.alu[2][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1_203 on 0
  // 0`imWork1_203 [2 alu] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1_203 [2 output 0] -> [7 output 0] 0 null
  // 0`imWork1_203 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_3_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imZone3 [0 input 1] -> [0 alu] 458 inf_const
  // nope
  // alu 458 inf_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imWork1_203 [0 input 0] -> [1 alu] 461 sup
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_203 [1 input 0] -> [1 alu] 461 sup
  // nope
  // 0`imZone3 [0 alu] -> [1 alu] 461 sup
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imZone3 [1 input 1] -> [1 alu] 461 sup
  // nope
  // alu 461 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`imWork1 on 0
  // 0`imWork1 [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1 [1 output 0] -> [7 output 0] 0 null
  // 0`imWork1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_3_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out [0 input 1] -> [0 alu] 459 inf_const
  // nope
  // alu 459 inf_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_INF_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // 0`imWork1 [0 input 0] -> [1 alu] 462 sup
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [1 input 0] -> [1 alu] 462 sup
  // nope
  // 0`out_217 [0 alu] -> [1 alu] 462 sup
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`out_217 [1 input 1] -> [1 alu] 462 sup
  // nope
  // alu 462 sup stage 1
  si.alu[1][0].op = SPOC_ALU_SUP_IN0_IN1;


  // output image 0`out on 0
  // 0`out [1 alu] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [1 output 0] -> [7 output 0] 0 null
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imin, *in, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;    /*0002*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0003*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0004*/
   int32_t neighborTransposed_0[9];                                     /*0005*/
   int32_t neighborTransposed_1[9];                                     /*0006*/
   int32_t volprevious;                                                 /*0007*/
   int32_t volcurrent;                                                  /*0008*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0009*/
   freia_common_open_input(&fdin, 0);                                   /*0010*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0011*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0012*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0013*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0014*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0016*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0017*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0021*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0023*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0024*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0225*/

   main_spoc_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);              /*0025*/
   main_spoc_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0033*/
   main_spoc_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0041*/
   main_spoc_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0049*/
   main_spoc_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0057*/
   main_spoc_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0065*/
   main_spoc_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0073*/
   main_spoc_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0081*/
   main_spoc_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0089*/
   main_spoc_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0097*/
   main_spoc_helper_1_0_10(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);   /*0105*/
   main_spoc_helper_1_0_11(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);   /*0113*/
   main_spoc_helper_1_0_12(imWork1, out, imWork1, out, freia_morpho_k8_center_east, neighborTransposed_0, freia_morpho_k8_center_north, neighborTransposed_1);    /*0121*/

   main_spoc_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0129*/
   main_spoc_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0137*/
   main_spoc_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0145*/
   main_spoc_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0153*/
   main_spoc_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0161*/
   main_spoc_helper_1_0_18(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0169*/
   main_spoc_helper_1_0_19(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0177*/
   main_spoc_helper_1_0_20(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0185*/
   main_spoc_helper_1_0_21(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0193*/
   main_spoc_helper_1_0_22(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0201*/
   main_spoc_helper_1_0_23(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0209*/
   main_spoc_helper_1_0_24(imClose, imZone3, imWork1, out, neighborTransposed_0, neighborTransposed_1, 100, 150, 1);                /*0217*/
   
   
   
   main_spoc_helper_1_1_0(imZone1, imZone2, imClose, imin, 105, 255, 1, 60, 105, 1);   /*0427*/
   
   
   main_spoc_helper_1_2_0(imWork1, imZone1, imZone2);                   /*0431*/
   main_spoc_helper_1_3_0(imWork1, out, imWork1, imZone3, freia_morpho_kernel_8c, &volcurrent);       /*0432*/
   
   
   do {                                                                 /*0437*/
      main_spoc_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volprevious, &volcurrent);   /*0438*/
   }
   while (volcurrent!=volprevious);                                     /*0437*/
   
   // Change  pixel values for the display
   main_spoc_helper_3_0_0(imWork1, imZone1, imZone2, 40, 100);          /*0456*/

   main_spoc_helper_3_1_0(imWork1, imWork1, imZone3, 170);              /*0458*/
   main_spoc_helper_3_2_0(out, imWork1, out, 250);                      /*0459*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0463*/
   freia_common_tx_image(out, &fdout);                                  /*0464*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0465*/
   freia_common_destruct_data(in);                                      /*0466*/
   freia_common_destruct_data(imClose);                                 /*0468*/
   freia_common_destruct_data(imZone1);                                 /*0469*/
   freia_common_destruct_data(imZone2);                                 /*0470*/
   freia_common_destruct_data(imZone3);                                 /*0471*/
   freia_common_destruct_data(imWork1);                                 /*0472*/
   freia_common_destruct_data(out);                                     /*0473*/

   freia_common_close_input(&fdin);                                     /*0474*/
   freia_common_close_output(&fdout);                                   /*0475*/

   freia_shutdown();                                                    /*0476*/
   return 0;                                                            /*0477*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imin, *in, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;    /*0002*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0003*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0004*/
   int32_t neighborTransposed_0[9];                                     /*0005*/
   int32_t neighborTransposed_1[9];                                     /*0006*/
   int32_t volprevious;                                                 /*0007*/
   int32_t volcurrent;                                                  /*0008*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0009*/
   freia_common_open_input(&fdin, 0);                                   /*0010*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0011*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0012*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0013*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0014*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0016*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0017*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0021*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0023*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0024*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0225*/

   main_spoc_helper_1_0_0(imWork1, out, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);              /*0025*/
   main_spoc_helper_1_0_1(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0033*/
   main_spoc_helper_1_0_2(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0041*/
   main_spoc_helper_1_0_3(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0049*/
   main_spoc_helper_1_0_4(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0057*/
   main_spoc_helper_1_0_5(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0065*/
   main_spoc_helper_1_0_6(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0073*/
   main_spoc_helper_1_0_7(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0081*/
   main_spoc_helper_1_0_8(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0089*/
   main_spoc_helper_1_0_9(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);    /*0097*/
   main_spoc_helper_1_0_10(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);   /*0105*/
   main_spoc_helper_1_0_11(imWork1, out, imWork1, out, freia_morpho_k8_center_east, freia_morpho_k8_center_north);   /*0113*/
   main_spoc_helper_1_0_12(imWork1, out, imWork1, out, freia_morpho_k8_center_east, neighborTransposed_0, freia_morpho_k8_center_north, neighborTransposed_1);    /*0121*/

   main_spoc_helper_1_0_13(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0129*/
   main_spoc_helper_1_0_14(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0137*/
   main_spoc_helper_1_0_15(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0145*/
   main_spoc_helper_1_0_16(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0153*/
   main_spoc_helper_1_0_17(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0161*/
   main_spoc_helper_1_0_18(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0169*/
   main_spoc_helper_1_0_19(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0177*/
   main_spoc_helper_1_0_20(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0185*/
   main_spoc_helper_1_0_21(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0193*/
   main_spoc_helper_1_0_22(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0201*/
   main_spoc_helper_1_0_23(imWork1, out, imWork1, out, neighborTransposed_0, neighborTransposed_1);   /*0209*/
   main_spoc_helper_1_0_24(imClose, imZone3, imWork1, out, neighborTransposed_0, neighborTransposed_1, 100, 150, 1);                /*0217*/
   
   
   
   main_spoc_helper_1_1_0(imZone1, imZone2, imClose, imin, 105, 255, 1, 60, 105, 1);   /*0427*/
   
   
   main_spoc_helper_1_2_0(imWork1, imZone1, imZone2);                   /*0431*/
   main_spoc_helper_1_3_0(imWork1, out, imWork1, imZone3, freia_morpho_kernel_8c, &volcurrent);       /*0432*/
   
   
   do {                                                                 /*0437*/
      main_spoc_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volprevious, &volcurrent);   /*0438*/
   }
   while (volcurrent!=volprevious);                                     /*0437*/
   
   // Change  pixel values for the display
   main_spoc_helper_3_0_0(imWork1, imZone1, imZone2, 40, 100);          /*0456*/

   main_spoc_helper_3_1_0(imWork1, imWork1, imZone3, 170);              /*0458*/
   main_spoc_helper_3_2_0(out, imWork1, out, 250);                      /*0459*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0463*/
   freia_common_tx_image(out, &fdout);                                  /*0464*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0465*/
   freia_common_destruct_data(in);                                      /*0466*/
   freia_common_destruct_data(imClose);                                 /*0468*/
   freia_common_destruct_data(imZone1);                                 /*0469*/
   freia_common_destruct_data(imZone2);                                 /*0470*/
   freia_common_destruct_data(imZone3);                                 /*0471*/
   freia_common_destruct_data(imWork1);                                 /*0472*/
   freia_common_destruct_data(out);                                     /*0473*/

   freia_common_close_input(&fdin);                                     /*0474*/
   freia_common_close_output(&fdout);                                   /*0475*/

   freia_shutdown();                                                    /*0476*/
   return 0;                                                            /*0477*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=1 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "main_terapix_helper_1_0_0" of module "main" in dot format
// DAG "main_terapix_helper_1_0_0": #i=1 #o=2 #c=16 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imWork1_195" [shape=circle];
  "out_194" [shape=circle];

  // computation vertices
  "265 D8" [shape=box];
  "265 D8" -> "out_194";
  "61 D8" [shape=box];
  "61 D8" -> "imWork1_195";
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "main_terapix_helper_1_0_1" of module "main" in dot format
// DAG "main_terapix_helper_1_0_1": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_1" {
  // inputs
  "out_194" [shape=circle];

  // outputs
  "out_186" [shape=circle];

  // computation vertices
  "273 D8" [shape=box];
  "273 D8" -> "out_186";
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "out_194" -> "266 D8";
}
// graph for dag "main_terapix_helper_1_0_10" of module "main" in dot format
// DAG "main_terapix_helper_1_0_10": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_10" {
  // inputs
  "imWork1_163" [shape=circle];

  // outputs
  "imWork1_155" [shape=circle];

  // computation vertices
  "101 D8" [shape=box];
  "101 D8" -> "imWork1_155";
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "imWork1_163" -> "94 D8";
}
// graph for dag "main_terapix_helper_1_0_11" of module "main" in dot format
// DAG "main_terapix_helper_1_0_11": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_11" {
  // inputs
  "out_154" [shape=circle];

  // outputs
  "out_146" [shape=circle];

  // computation vertices
  "313 D8" [shape=box];
  "313 D8" -> "out_146";
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "out_154" -> "306 D8";
}
// graph for dag "main_terapix_helper_1_0_12" of module "main" in dot format
// DAG "main_terapix_helper_1_0_12": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_12" {
  // inputs
  "imWork1_155" [shape=circle];

  // outputs
  "imWork1_147" [shape=circle];

  // computation vertices
  "109 D8" [shape=box];
  "109 D8" -> "imWork1_147";
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "imWork1_155" -> "102 D8";
}
// graph for dag "main_terapix_helper_1_0_13" of module "main" in dot format
// DAG "main_terapix_helper_1_0_13": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_13" {
  // inputs
  "out_146" [shape=circle];

  // outputs
  "out_138" [shape=circle];

  // computation vertices
  "321 D8" [shape=box];
  "321 D8" -> "out_138";
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "out_146" -> "314 D8";
}
// graph for dag "main_terapix_helper_1_0_14" of module "main" in dot format
// DAG "main_terapix_helper_1_0_14": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_14" {
  // inputs
  "imWork1_147" [shape=circle];

  // outputs
  "imWork1_139" [shape=circle];

  // computation vertices
  "117 D8" [shape=box];
  "117 D8" -> "imWork1_139";
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "imWork1_147" -> "110 D8";
}
// graph for dag "main_terapix_helper_1_0_15" of module "main" in dot format
// DAG "main_terapix_helper_1_0_15": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_15" {
  // inputs
  "out_138" [shape=circle];

  // outputs
  "out_130" [shape=circle];

  // computation vertices
  "329 D8" [shape=box];
  "329 D8" -> "out_130";
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "out_138" -> "322 D8";
}
// graph for dag "main_terapix_helper_1_0_16" of module "main" in dot format
// DAG "main_terapix_helper_1_0_16": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_16" {
  // inputs
  "imWork1_139" [shape=circle];

  // outputs
  "imWork1_131" [shape=circle];

  // computation vertices
  "125 D8" [shape=box];
  "125 D8" -> "imWork1_131";
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "imWork1_139" -> "118 D8";
}
// graph for dag "main_terapix_helper_1_0_17" of module "main" in dot format
// DAG "main_terapix_helper_1_0_17": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_17" {
  // inputs
  "out_130" [shape=circle];

  // outputs
  "out_122" [shape=circle];

  // computation vertices
  "337 D8" [shape=box];
  "337 D8" -> "out_122";
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "out_130" -> "330 D8";
}
// graph for dag "main_terapix_helper_1_0_18" of module "main" in dot format
// DAG "main_terapix_helper_1_0_18": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_18" {
  // inputs
  "imWork1_131" [shape=circle];

  // outputs
  "imWork1_123" [shape=circle];

  // computation vertices
  "133 D8" [shape=box];
  "133 D8" -> "imWork1_123";
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "imWork1_131" -> "126 D8";
}
// graph for dag "main_terapix_helper_1_0_19" of module "main" in dot format
// DAG "main_terapix_helper_1_0_19": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_19" {
  // inputs
  "out_122" [shape=circle];

  // outputs
  "out_114" [shape=circle];

  // computation vertices
  "345 D8" [shape=box];
  "345 D8" -> "out_114";
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "out_122" -> "338 D8";
}
// graph for dag "main_terapix_helper_1_0_2" of module "main" in dot format
// DAG "main_terapix_helper_1_0_2": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_2" {
  // inputs
  "imWork1_195" [shape=circle];

  // outputs
  "imWork1_187" [shape=circle];

  // computation vertices
  "69 D8" [shape=box];
  "69 D8" -> "imWork1_187";
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "imWork1_195" -> "62 D8";
}
// graph for dag "main_terapix_helper_1_0_20" of module "main" in dot format
// DAG "main_terapix_helper_1_0_20": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_20" {
  // inputs
  "imWork1_123" [shape=circle];

  // outputs
  "imWork1_115" [shape=circle];

  // computation vertices
  "141 D8" [shape=box];
  "141 D8" -> "imWork1_115";
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "imWork1_123" -> "134 D8";
}
// graph for dag "main_terapix_helper_1_0_21" of module "main" in dot format
// DAG "main_terapix_helper_1_0_21": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_21" {
  // inputs
  "out_114" [shape=circle];

  // outputs
  "out_106" [shape=circle];

  // computation vertices
  "353 D8" [shape=box];
  "353 D8" -> "out_106";
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "out_114" -> "346 D8";
}
// graph for dag "main_terapix_helper_1_0_22" of module "main" in dot format
// DAG "main_terapix_helper_1_0_22": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_22" {
  // inputs
  "imWork1_115" [shape=circle];

  // outputs
  "imWork1_107" [shape=circle];

  // computation vertices
  "149 D8" [shape=box];
  "149 D8" -> "imWork1_107";
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "imWork1_115" -> "142 D8";
}
// graph for dag "main_terapix_helper_1_0_23" of module "main" in dot format
// DAG "main_terapix_helper_1_0_23": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_23" {
  // inputs
  "out_106" [shape=circle];

  // outputs
  "out_98" [shape=circle];

  // computation vertices
  "362 E8" [shape=box];
  "362 E8" -> "out_98";
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "out_106" -> "354 D8";
}
// graph for dag "main_terapix_helper_1_0_24" of module "main" in dot format
// DAG "main_terapix_helper_1_0_24": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_24" {
  // inputs
  "imWork1_107" [shape=circle];

  // outputs
  "imWork1_99" [shape=circle];

  // computation vertices
  "158 E8" [shape=box];
  "158 E8" -> "imWork1_99";
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "imWork1_107" -> "150 D8";
}
// graph for dag "main_terapix_helper_1_0_25" of module "main" in dot format
// DAG "main_terapix_helper_1_0_25": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_25" {
  // inputs
  "out_98" [shape=circle];

  // outputs
  "out_90" [shape=circle];

  // computation vertices
  "370 E8" [shape=box];
  "370 E8" -> "out_90";
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "out_98" -> "363 E8";
}
// graph for dag "main_terapix_helper_1_0_26" of module "main" in dot format
// DAG "main_terapix_helper_1_0_26": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_26" {
  // inputs
  "imWork1_99" [shape=circle];

  // outputs
  "imWork1_91" [shape=circle];

  // computation vertices
  "166 E8" [shape=box];
  "166 E8" -> "imWork1_91";
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "imWork1_99" -> "159 E8";
}
// graph for dag "main_terapix_helper_1_0_27" of module "main" in dot format
// DAG "main_terapix_helper_1_0_27": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_27" {
  // inputs
  "out_90" [shape=circle];

  // outputs
  "out_82" [shape=circle];

  // computation vertices
  "378 E8" [shape=box];
  "378 E8" -> "out_82";
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "out_90" -> "371 E8";
}
// graph for dag "main_terapix_helper_1_0_28" of module "main" in dot format
// DAG "main_terapix_helper_1_0_28": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_28" {
  // inputs
  "imWork1_91" [shape=circle];

  // outputs
  "imWork1_83" [shape=circle];

  // computation vertices
  "174 E8" [shape=box];
  "174 E8" -> "imWork1_83";
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "imWork1_91" -> "167 E8";
}
// graph for dag "main_terapix_helper_1_0_29" of module "main" in dot format
// DAG "main_terapix_helper_1_0_29": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_29" {
  // inputs
  "out_82" [shape=circle];

  // outputs
  "out_74" [shape=circle];

  // computation vertices
  "386 E8" [shape=box];
  "386 E8" -> "out_74";
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "out_82" -> "379 E8";
}
// graph for dag "main_terapix_helper_1_0_3" of module "main" in dot format
// DAG "main_terapix_helper_1_0_3": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_3" {
  // inputs
  "out_186" [shape=circle];

  // outputs
  "out_178" [shape=circle];

  // computation vertices
  "281 D8" [shape=box];
  "281 D8" -> "out_178";
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "out_186" -> "274 D8";
}
// graph for dag "main_terapix_helper_1_0_30" of module "main" in dot format
// DAG "main_terapix_helper_1_0_30": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_30" {
  // inputs
  "imWork1_83" [shape=circle];

  // outputs
  "imWork1_75" [shape=circle];

  // computation vertices
  "182 E8" [shape=box];
  "182 E8" -> "imWork1_75";
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "imWork1_83" -> "175 E8";
}
// graph for dag "main_terapix_helper_1_0_31" of module "main" in dot format
// DAG "main_terapix_helper_1_0_31": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_31" {
  // inputs
  "out_74" [shape=circle];

  // outputs
  "out_66" [shape=circle];

  // computation vertices
  "394 E8" [shape=box];
  "394 E8" -> "out_66";
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "out_74" -> "387 E8";
}
// graph for dag "main_terapix_helper_1_0_32" of module "main" in dot format
// DAG "main_terapix_helper_1_0_32": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_32" {
  // inputs
  "imWork1_75" [shape=circle];

  // outputs
  "imWork1_67" [shape=circle];

  // computation vertices
  "190 E8" [shape=box];
  "190 E8" -> "imWork1_67";
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "imWork1_75" -> "183 E8";
}
// graph for dag "main_terapix_helper_1_0_33" of module "main" in dot format
// DAG "main_terapix_helper_1_0_33": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_33" {
  // inputs
  "out_66" [shape=circle];

  // outputs
  "out_58" [shape=circle];

  // computation vertices
  "402 E8" [shape=box];
  "402 E8" -> "out_58";
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "out_66" -> "395 E8";
}
// graph for dag "main_terapix_helper_1_0_34" of module "main" in dot format
// DAG "main_terapix_helper_1_0_34": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_34" {
  // inputs
  "imWork1_67" [shape=circle];

  // outputs
  "imWork1_59" [shape=circle];

  // computation vertices
  "198 E8" [shape=box];
  "198 E8" -> "imWork1_59";
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "imWork1_67" -> "191 E8";
}
// graph for dag "main_terapix_helper_1_0_35" of module "main" in dot format
// DAG "main_terapix_helper_1_0_35": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_35" {
  // inputs
  "out_58" [shape=circle];

  // outputs
  "out_50" [shape=circle];

  // computation vertices
  "410 E8" [shape=box];
  "410 E8" -> "out_50";
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "out_58" -> "403 E8";
}
// graph for dag "main_terapix_helper_1_0_36" of module "main" in dot format
// DAG "main_terapix_helper_1_0_36": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_36" {
  // inputs
  "imWork1_59" [shape=circle];

  // outputs
  "imWork1_51" [shape=circle];

  // computation vertices
  "206 E8" [shape=box];
  "206 E8" -> "imWork1_51";
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "imWork1_59" -> "199 E8";
}
// graph for dag "main_terapix_helper_1_0_37" of module "main" in dot format
// DAG "main_terapix_helper_1_0_37": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_37" {
  // inputs
  "out_50" [shape=circle];

  // outputs
  "out_42" [shape=circle];

  // computation vertices
  "418 E8" [shape=box];
  "418 E8" -> "out_42";
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "out_50" -> "411 E8";
}
// graph for dag "main_terapix_helper_1_0_38" of module "main" in dot format
// DAG "main_terapix_helper_1_0_38": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_38" {
  // inputs
  "imWork1_51" [shape=circle];

  // outputs
  "imWork1_43" [shape=circle];

  // computation vertices
  "214 E8" [shape=box];
  "214 E8" -> "imWork1_43";
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "imWork1_51" -> "207 E8";
}
// graph for dag "main_terapix_helper_1_0_39" of module "main" in dot format
// DAG "main_terapix_helper_1_0_39": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_39" {
  // inputs
  "out_42" [shape=circle];

  // outputs
  "out_34" [shape=circle];

  // computation vertices
  "426 E8" [shape=box];
  "426 E8" -> "out_34";
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "out_42" -> "419 E8";
}
// graph for dag "main_terapix_helper_1_0_4" of module "main" in dot format
// DAG "main_terapix_helper_1_0_4": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_4" {
  // inputs
  "imWork1_187" [shape=circle];

  // outputs
  "imWork1_179" [shape=circle];

  // computation vertices
  "77 D8" [shape=box];
  "77 D8" -> "imWork1_179";
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "imWork1_187" -> "70 D8";
}
// graph for dag "main_terapix_helper_1_0_40" of module "main" in dot format
// DAG "main_terapix_helper_1_0_40": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_40" {
  // inputs
  "imWork1_43" [shape=circle];

  // outputs
  "imWork1_35" [shape=circle];

  // computation vertices
  "222 E8" [shape=box];
  "222 E8" -> "imWork1_35";
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "imWork1_43" -> "215 E8";
}
// graph for dag "main_terapix_helper_1_0_41" of module "main" in dot format
// DAG "main_terapix_helper_1_0_41": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_41" {
  // inputs
  "out_34" [shape=circle];

  // outputs
  "out_26" [shape=circle];

  // computation vertices
  "434 E8" [shape=box];
  "434 E8" -> "out_26";
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "out_34" -> "427 E8";
}
// graph for dag "main_terapix_helper_1_0_42" of module "main" in dot format
// DAG "main_terapix_helper_1_0_42": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_42" {
  // inputs
  "imWork1_35" [shape=circle];

  // outputs
  "imWork1_27" [shape=circle];

  // computation vertices
  "230 E8" [shape=box];
  "230 E8" -> "imWork1_27";
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "imWork1_35" -> "223 E8";
}
// graph for dag "main_terapix_helper_1_0_43" of module "main" in dot format
// DAG "main_terapix_helper_1_0_43": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_43" {
  // inputs
  "out_26" [shape=circle];

  // outputs
  "out_18" [shape=circle];

  // computation vertices
  "442 E8" [shape=box];
  "442 E8" -> "out_18";
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "out_26" -> "435 E8";
}
// graph for dag "main_terapix_helper_1_0_44" of module "main" in dot format
// DAG "main_terapix_helper_1_0_44": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_44" {
  // inputs
  "imWork1_27" [shape=circle];

  // outputs
  "imWork1_19" [shape=circle];

  // computation vertices
  "238 E8" [shape=box];
  "238 E8" -> "imWork1_19";
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "imWork1_27" -> "231 E8";
}
// graph for dag "main_terapix_helper_1_0_45" of module "main" in dot format
// DAG "main_terapix_helper_1_0_45": #i=1 #o=1 #c=9 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_45" {
  // inputs
  "out_18" [shape=circle];

  // outputs
  "out_9" [shape=circle];

  // computation vertices
  "451 E8" [shape=box];
  "451 E8" -> "out_9";
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "out_18" -> "443 E8";
}
// graph for dag "main_terapix_helper_1_0_46" of module "main" in dot format
// DAG "main_terapix_helper_1_0_46": #i=1 #o=1 #c=9 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_46" {
  // inputs
  "imWork1_19" [shape=circle];

  // outputs
  "imWork1_10" [shape=circle];

  // computation vertices
  "247 E8" [shape=box];
  "247 E8" -> "imWork1_10";
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "imWork1_19" -> "239 E8";
}
// graph for dag "main_terapix_helper_1_0_47" of module "main" in dot format
// DAG "main_terapix_helper_1_0_47": #i=3 #o=5 #c=25 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_47" {
  // inputs
  "imWork1_10" [shape=circle];
  "imin" [shape=circle];
  "out_9" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "out_9" -> "452 E8";
  "imWork1_10" -> "248 E8";
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
}
// graph for dag "main_terapix_helper_1_0_5" of module "main" in dot format
// DAG "main_terapix_helper_1_0_5": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_5" {
  // inputs
  "out_178" [shape=circle];

  // outputs
  "out_170" [shape=circle];

  // computation vertices
  "289 D8" [shape=box];
  "289 D8" -> "out_170";
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "out_178" -> "282 D8";
}
// graph for dag "main_terapix_helper_1_0_6" of module "main" in dot format
// DAG "main_terapix_helper_1_0_6": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_6" {
  // inputs
  "imWork1_179" [shape=circle];

  // outputs
  "imWork1_171" [shape=circle];

  // computation vertices
  "85 D8" [shape=box];
  "85 D8" -> "imWork1_171";
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "imWork1_179" -> "78 D8";
}
// graph for dag "main_terapix_helper_1_0_7" of module "main" in dot format
// DAG "main_terapix_helper_1_0_7": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_7" {
  // inputs
  "out_170" [shape=circle];

  // outputs
  "out_162" [shape=circle];

  // computation vertices
  "297 D8" [shape=box];
  "297 D8" -> "out_162";
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "out_170" -> "290 D8";
}
// graph for dag "main_terapix_helper_1_0_8" of module "main" in dot format
// DAG "main_terapix_helper_1_0_8": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_8" {
  // inputs
  "imWork1_171" [shape=circle];

  // outputs
  "imWork1_163" [shape=circle];

  // computation vertices
  "93 D8" [shape=box];
  "93 D8" -> "imWork1_163";
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "imWork1_171" -> "86 D8";
}
// graph for dag "main_terapix_helper_1_0_9" of module "main" in dot format
// DAG "main_terapix_helper_1_0_9": #i=1 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_9" {
  // inputs
  "out_162" [shape=circle];

  // outputs
  "out_154" [shape=circle];

  // computation vertices
  "305 D8" [shape=box];
  "305 D8" -> "out_154";
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "out_162" -> "298 D8";
}
// graph for dag "main_terapix_helper_2_0_0" of module "main" in dot format
// DAG "main_terapix_helper_2_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_2_0_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "main_terapix_helper_3_0_0" of module "main" in dot format
// DAG "main_terapix_helper_3_0_0": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_3_0_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1+0 copies

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 16 image operations in dag
 * dag length is 9, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 240
 * - communication: 72
 */
freia_status main_terapix_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi3,
  const int32_t * pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][16];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 188;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi4[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(2) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_2_0;
  mcu_macro[1][6].xmin2 = imagelet_io_2_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(1) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(2) -> 1
  mcu_macro[0][8].xmin1 = imagelet_io_2_0;
  mcu_macro[1][8].xmin1 = imagelet_io_2_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_1_0;
  mcu_macro[1][8].xmin2 = imagelet_io_1_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(3) -> 2
  mcu_macro[0][9].xmin1 = imagelet_3;
  mcu_macro[1][9].xmin1 = imagelet_3;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_2_0;
  mcu_macro[1][9].xmin2 = imagelet_io_2_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(1) -> 3
  mcu_macro[0][10].xmin1 = imagelet_io_1_0;
  mcu_macro[1][10].xmin1 = imagelet_io_1_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: D8(2) -> 1
  mcu_macro[0][11].xmin1 = imagelet_io_2_0;
  mcu_macro[1][11].xmin1 = imagelet_io_2_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_1_0;
  mcu_macro[1][11].xmin2 = imagelet_io_1_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: D8(3) -> 2
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_2_0;
  mcu_macro[1][12].xmin2 = imagelet_io_2_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 13: D8(1) -> 3
  mcu_macro[0][13].xmin1 = imagelet_io_1_0;
  mcu_macro[1][13].xmin1 = imagelet_io_1_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_3;
  mcu_macro[1][13].xmin2 = imagelet_3;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: D8(2) -> 1
  mcu_macro[0][14].xmin1 = imagelet_io_2_0;
  mcu_macro[1][14].xmin1 = imagelet_io_2_1;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_1_0;
  mcu_macro[1][14].xmin2 = imagelet_io_1_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 15: D8(3) -> 2
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_io_2_0;
  mcu_macro[1][15].xmin2 = imagelet_io_2_1;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_1;
  mcu_macro[1][15].xmin3 = x_1;
  mcu_macro[0][15].ymin3 = y_1;
  mcu_macro[1][15].ymin3 = y_1;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_195
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for out_194
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 16;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_194
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_186
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_195
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_187
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_186
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_178
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_187
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_179
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_5(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_178
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_170
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_6(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_179
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_171
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_7(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_170
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_162
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_8(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_171
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_163
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_9(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_162
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_154
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_10(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_163
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_155
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_11(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_154
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_146
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_12(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_155
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_147
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_13(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_146
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_138
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_14(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_147
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_139
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_15(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_138
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_130
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_16(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_139
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_131
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_17(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_130
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_122
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_18(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_131
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_123
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_19(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_122
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_114
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_20(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_123
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_115
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_21(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_114
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_106
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_22(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 341;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_115
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_107
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_23(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 4 parameters
  int16_t p_4[9];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  for(i=0; i<9; i++)
    p_4[i] = pi3[i];
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_4;
  mcu_macro[1][5].xmin3 = x_4;
  mcu_macro[0][5].ymin3 = y_4;
  mcu_macro[1][5].ymin3 = y_4;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_4;
  mcu_macro[1][6].xmin3 = x_4;
  mcu_macro[0][6].ymin3 = y_4;
  mcu_macro[1][6].ymin3 = y_4;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_4;
  mcu_macro[1][7].xmin3 = x_4;
  mcu_macro[0][7].ymin3 = y_4;
  mcu_macro[1][7].ymin3 = y_4;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_106
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_98
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 4;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 4;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_24(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  const int32_t * pi3)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 4 parameters
  int16_t p_4[9];
  const int32_t x_4 = 3;
  const int32_t y_4 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 4;
  int image_height = i0->heightWa;
  int max_computed_size = 333;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  // copy of operation 4 parameters
  for(i=0; i<9; i++)
    p_4[i] = pi3[i];
  gram.xoffset = x_4;
  gram.yoffset = y_4;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_4;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][4].xmin3 = x_4;
  mcu_macro[1][4].xmin3 = x_4;
  mcu_macro[0][4].ymin3 = y_4;
  mcu_macro[1][4].ymin3 = y_4;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_4;
  mcu_macro[1][5].xmin3 = x_4;
  mcu_macro[0][5].ymin3 = y_4;
  mcu_macro[1][5].ymin3 = y_4;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_4;
  mcu_macro[1][6].xmin3 = x_4;
  mcu_macro[0][6].ymin3 = y_4;
  mcu_macro[1][6].ymin3 = y_4;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_4;
  mcu_macro[1][7].xmin3 = x_4;
  mcu_macro[0][7].ymin3 = y_4;
  mcu_macro[1][7].ymin3 = y_4;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_107
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_99
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 4;
  mcu_instr.borderBottom = 4;
  mcu_instr.borderLeft   = 4;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_25(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_98
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_90
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_26(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_99
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_91
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_27(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_90
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_82
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_28(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_91
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_83
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_29(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_82
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_74
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_30(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_83
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_75
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_31(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_74
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_66
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_32(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_75
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_67
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_33(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_66
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_58
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_34(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_67
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_59
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_35(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_58
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_50
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_36(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_59
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_51
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_37(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_50
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_42
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_38(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_51
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_43
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_39(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_42
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_34
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_40(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_43
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_35
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_41(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_34
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_26
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_42(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_35
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_27
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_43(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for out_26
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_18
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 8 image operations in dag
 * dag length is 9, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 120
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_44(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 8;
  int image_height = i0->heightWa;
  int max_computed_size = 325;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;


  // inputs:
  // - imagelet 1 is i0 for imWork1_27
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_19
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 8;
  mcu_instr.borderBottom = 8;
  mcu_instr.borderLeft   = 8;
  mcu_instr.borderRight  = 8;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 9 image operations in dag
 * dag length is 10, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 135
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_45(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][10];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 9;
  int image_height = i0->heightWa;
  int max_computed_size = 323;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(1) -> 2
  mcu_macro[0][8].xmin1 = imagelet_io_1_0;
  mcu_macro[1][8].xmin1 = imagelet_io_1_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_2;
  mcu_macro[1][8].xmin2 = imagelet_2;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][9].xmin1 = imagelet_2;
  mcu_macro[1][9].xmin1 = imagelet_2;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_1_0;
  mcu_macro[1][9].xmin2 = imagelet_io_1_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for out_18
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out_9
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 9;
  mcu_instr.borderBottom = 9;
  mcu_instr.borderLeft   = 9;
  mcu_instr.borderRight  = 9;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 10;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 9 image operations in dag
 * dag length is 10, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 135
 * - communication: 48
 */
freia_status main_terapix_helper_1_0_46(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][10];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 9;
  int image_height = i0->heightWa;
  int max_computed_size = 323;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(2) -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_io_1_0;
  mcu_macro[1][6].xmin1 = imagelet_io_1_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(2) -> 1
  mcu_macro[0][7].xmin1 = imagelet_2;
  mcu_macro[1][7].xmin1 = imagelet_2;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_1_0;
  mcu_macro[1][7].xmin2 = imagelet_io_1_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(1) -> 2
  mcu_macro[0][8].xmin1 = imagelet_io_1_0;
  mcu_macro[1][8].xmin1 = imagelet_io_1_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_2;
  mcu_macro[1][8].xmin2 = imagelet_2;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][9].xmin1 = imagelet_2;
  mcu_macro[1][9].xmin1 = imagelet_2;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_1_0;
  mcu_macro[1][9].xmin2 = imagelet_io_1_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_19
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imWork1_10
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 9;
  mcu_instr.borderBottom = 9;
  mcu_instr.borderLeft   = 9;
  mcu_instr.borderRight  = 9;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 10;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 5 output images
 * 25 image operations in dag
 * dag length is 17, dag width is 5
 * costs in cycles per imagelet row:
 * - computation: 278
 * - communication: 192
 */
freia_status main_terapix_helper_1_0_47(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * o3,
  freia_data2d * o4,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const int32_t * pi8,
  const int32_t * pi9,
  int32_t pi10,
  int32_t pi11,
  int32_t pi12,
  int32_t pi13,
  int32_t pi14,
  int32_t pi15,
  int32_t pi16,
  int32_t pi17,
  int32_t pi18,
  const int32_t * pi19,
  int32_t * po20)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 3;
  const int32_t y_1 = 0;
  // operation 16 parameters
  int16_t p_16[3];
  const int32_t x_16 = 6;
  const int32_t y_16 = 0;
  // operation 17 parameters
  int16_t p_17[3];
  const int32_t x_17 = 9;
  const int32_t y_17 = 0;
  // operation 19 parameters
  int16_t p_19[3];
  const int32_t x_19 = 12;
  const int32_t y_19 = 0;
  // operation 22 parameters
  int16_t p_22[9];
  const int32_t x_22 = 15;
  const int32_t y_22 = 0;
  // operation 24_val initialization
  int16_t p_24_val[1];
  const int32_t x_24_val = 18;
  const int32_t y_24_val = 0;
  // array for reduction 24 extraction
  int32_t red_24[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][26];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][5];
  // imagelets definitions:
  // - 6 computation imagelets
  // - 5 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 9;
  int image_height = i0->heightWa;
  int max_computed_size = 74;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 92;
  int imagelet_3 = 184;
  int imagelet_4 = 276;
  int imagelet_5 = 368;
  int imagelet_6 = 460;
  int imagelet_7 = 552;
  int imagelet_8 = 644;
  int imagelet_9 = 736;
  int imagelet_10 = 828;
  int imagelet_11 = 920;

  // memory for reductions
  int reduction_24 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_7;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_8;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_9;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_10;
  int imagelet_io_5_0 = imagelet_5;
  int imagelet_io_5_1 = imagelet_11;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 5
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_5_0;
  mcu_macro[1][0].xmin2 = imagelet_io_5_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi8[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(3) -> 4
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_4_0;
  mcu_macro[1][1].xmin2 = imagelet_io_4_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi9[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: E8(5) -> 3
  mcu_macro[0][2].xmin1 = imagelet_io_5_0;
  mcu_macro[1][2].xmin1 = imagelet_io_5_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_3_0;
  mcu_macro[1][2].xmin2 = imagelet_io_3_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(4) -> 5
  mcu_macro[0][3].xmin1 = imagelet_io_4_0;
  mcu_macro[1][3].xmin1 = imagelet_io_4_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_5_0;
  mcu_macro[1][3].xmin2 = imagelet_io_5_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(3) -> 4
  mcu_macro[0][4].xmin1 = imagelet_io_3_0;
  mcu_macro[1][4].xmin1 = imagelet_io_3_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_4_0;
  mcu_macro[1][4].xmin2 = imagelet_io_4_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(5) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_5_0;
  mcu_macro[1][5].xmin1 = imagelet_io_5_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_3_0;
  mcu_macro[1][5].xmin2 = imagelet_io_3_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(4) -> 5
  mcu_macro[0][6].xmin1 = imagelet_io_4_0;
  mcu_macro[1][6].xmin1 = imagelet_io_4_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_5_0;
  mcu_macro[1][6].xmin2 = imagelet_io_5_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: E8(3) -> 4
  mcu_macro[0][7].xmin1 = imagelet_io_3_0;
  mcu_macro[1][7].xmin1 = imagelet_io_3_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_4_0;
  mcu_macro[1][7].xmin2 = imagelet_io_4_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: E8(5) -> 3
  mcu_macro[0][8].xmin1 = imagelet_io_5_0;
  mcu_macro[1][8].xmin1 = imagelet_io_5_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_3_0;
  mcu_macro[1][8].xmin2 = imagelet_io_3_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: E8(4) -> 5
  mcu_macro[0][9].xmin1 = imagelet_io_4_0;
  mcu_macro[1][9].xmin1 = imagelet_io_4_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_5_0;
  mcu_macro[1][9].xmin2 = imagelet_io_5_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 10: E8(3) -> 4
  mcu_macro[0][10].xmin1 = imagelet_io_3_0;
  mcu_macro[1][10].xmin1 = imagelet_io_3_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_4_0;
  mcu_macro[1][10].xmin2 = imagelet_io_4_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: E8(5) -> 3
  mcu_macro[0][11].xmin1 = imagelet_io_5_0;
  mcu_macro[1][11].xmin1 = imagelet_io_5_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_3_0;
  mcu_macro[1][11].xmin2 = imagelet_io_3_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_1;
  mcu_macro[1][11].xmin3 = x_1;
  mcu_macro[0][11].ymin3 = y_1;
  mcu_macro[1][11].ymin3 = y_1;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 12: E8(4) -> 5
  mcu_macro[0][12].xmin1 = imagelet_io_4_0;
  mcu_macro[1][12].xmin1 = imagelet_io_4_1;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_5_0;
  mcu_macro[1][12].xmin2 = imagelet_io_5_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: E8(3) -> 4
  mcu_macro[0][13].xmin1 = imagelet_io_3_0;
  mcu_macro[1][13].xmin1 = imagelet_io_3_1;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_io_4_0;
  mcu_macro[1][13].xmin2 = imagelet_io_4_1;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_1;
  mcu_macro[1][13].xmin3 = x_1;
  mcu_macro[0][13].ymin3 = y_1;
  mcu_macro[1][13].ymin3 = y_1;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 14: <(5,4) -> 5
  mcu_macro[0][14].xmin1 = imagelet_io_5_0;
  mcu_macro[1][14].xmin1 = imagelet_io_5_1;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_io_4_0;
  mcu_macro[1][14].xmin2 = imagelet_io_4_1;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = imagelet_io_5_0;
  mcu_macro[1][14].xmin3 = imagelet_io_5_1;
  mcu_macro[0][14].ymin3 = 0;
  mcu_macro[1][14].ymin3 = 0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_INF3;
  // 15: -(5,2) -> 4
  mcu_macro[0][15].xmin1 = imagelet_io_5_0;
  mcu_macro[1][15].xmin1 = imagelet_io_5_1;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_io_2_0;
  mcu_macro[1][15].xmin2 = imagelet_io_2_1;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = imagelet_io_4_0;
  mcu_macro[1][15].xmin3 = imagelet_io_4_1;
  mcu_macro[0][15].ymin3 = 0;
  mcu_macro[1][15].ymin3 = 0;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_SUB3;
  // 16: thr(4) -> 1
  mcu_macro[0][16].xmin1 = imagelet_io_4_0;
  mcu_macro[1][16].xmin1 = imagelet_io_4_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_io_1_0;
  mcu_macro[1][16].xmin2 = imagelet_io_1_1;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  // copy of operation 16 parameters
  p_16[0] = pi10;
  p_16[1] = pi11;
  p_16[2] = pi12;
  gram.xoffset = x_16;
  gram.yoffset = y_16;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_16;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][16].xmin3 = x_16;
  mcu_macro[1][16].xmin3 = x_16;
  mcu_macro[0][16].ymin3 = y_16;
  mcu_macro[1][16].ymin3 = y_16;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 17: thr(4) -> 2
  mcu_macro[0][17].xmin1 = imagelet_io_4_0;
  mcu_macro[1][17].xmin1 = imagelet_io_4_1;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_io_2_0;
  mcu_macro[1][17].xmin2 = imagelet_io_2_1;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  // copy of operation 17 parameters
  p_17[0] = pi13;
  p_17[1] = pi14;
  p_17[2] = pi15;
  gram.xoffset = x_17;
  gram.yoffset = y_17;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_17;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][17].xmin3 = x_17;
  mcu_macro[1][17].xmin3 = x_17;
  mcu_macro[0][17].ymin3 = y_17;
  mcu_macro[1][17].ymin3 = y_17;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 18: >(1,2) -> 4
  mcu_macro[0][18].xmin1 = imagelet_io_1_0;
  mcu_macro[1][18].xmin1 = imagelet_io_1_1;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_io_2_0;
  mcu_macro[1][18].xmin2 = imagelet_io_2_1;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = imagelet_io_4_0;
  mcu_macro[1][18].xmin3 = imagelet_io_4_1;
  mcu_macro[0][18].ymin3 = 0;
  mcu_macro[1][18].ymin3 = 0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_SUP3;
  // 19: thr(5) -> 3
  mcu_macro[0][19].xmin1 = imagelet_io_5_0;
  mcu_macro[1][19].xmin1 = imagelet_io_5_1;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_io_3_0;
  mcu_macro[1][19].xmin2 = imagelet_io_3_1;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  // copy of operation 19 parameters
  p_19[0] = pi16;
  p_19[1] = pi17;
  p_19[2] = pi18;
  gram.xoffset = x_19;
  gram.yoffset = y_19;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_19;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][19].xmin3 = x_19;
  mcu_macro[1][19].xmin3 = x_19;
  mcu_macro[0][19].ymin3 = y_19;
  mcu_macro[1][19].ymin3 = y_19;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 20: >(4,3) -> 5
  mcu_macro[0][20].xmin1 = imagelet_io_4_0;
  mcu_macro[1][20].xmin1 = imagelet_io_4_1;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_io_3_0;
  mcu_macro[1][20].xmin2 = imagelet_io_3_1;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = imagelet_io_5_0;
  mcu_macro[1][20].xmin3 = imagelet_io_5_1;
  mcu_macro[0][20].ymin3 = 0;
  mcu_macro[1][20].ymin3 = 0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_SUP3;
  // 21: !(5) -> 4
  mcu_macro[0][21].xmin1 = imagelet_io_5_0;
  mcu_macro[1][21].xmin1 = imagelet_io_5_1;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_io_4_0;
  mcu_macro[1][21].xmin2 = imagelet_io_4_1;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_NOT;
  // 22: D8(4) -> 5
  mcu_macro[0][22].xmin1 = imagelet_io_4_0;
  mcu_macro[1][22].xmin1 = imagelet_io_4_1;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_io_5_0;
  mcu_macro[1][22].xmin2 = imagelet_io_5_1;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  // copy of operation 22 parameters
  for(i=0; i<9; i++)
    p_22[i] = pi19[i];
  gram.xoffset = x_22;
  gram.yoffset = y_22;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_22;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][22].xmin3 = x_22;
  mcu_macro[1][22].xmin3 = x_22;
  mcu_macro[0][22].ymin3 = y_22;
  mcu_macro[1][22].ymin3 = y_22;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 23: D8(5) -> 6
  mcu_macro[0][23].xmin1 = imagelet_io_5_0;
  mcu_macro[1][23].xmin1 = imagelet_io_5_1;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_6;
  mcu_macro[1][23].xmin2 = imagelet_6;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  mcu_macro[0][23].xmin3 = x_22;
  mcu_macro[1][23].xmin3 = x_22;
  mcu_macro[0][23].ymin3 = y_22;
  mcu_macro[1][23].ymin3 = y_22;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 24: vol(6)
  // initializing  24_val
  p_24_val[0] = 0;
  gram.xoffset = x_24_val;
  gram.yoffset = y_24_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_24_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 24_val
  mem_init.xmin1 = reduction_24;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_24
  mcu_macro[0][24].xmin2 = reduction_24;
  mcu_macro[1][24].xmin2 = reduction_24;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = 0;
  mcu_macro[1][24].xmin3 = 0;
  mcu_macro[0][24].ymin3 = 0;
  mcu_macro[1][24].ymin3 = 0;
  mcu_macro[0][24].xmin1 = imagelet_6;
  mcu_macro[1][24].xmin1 = imagelet_6;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // output copy 6 -> 5
  mcu_macro[0][25].xmin1 = imagelet_6;
  mcu_macro[1][25].xmin1 = imagelet_6;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_io_5_0;
  mcu_macro[1][25].xmin2 = imagelet_io_5_1;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imWork1_10
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for imin
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for out_9
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imZone1
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for imZone2
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;
  // - imagelet 3 is o2 for imZone3
  tile_out[0][2].x = imagelet_io_3_0;
  tile_out[0][2].y = 0;
  tile_out[1][2].x = imagelet_io_3_1;
  tile_out[1][2].y = 0;
  // - imagelet 4 is o3 for imWork1
  tile_out[0][3].x = imagelet_io_4_0;
  tile_out[0][3].y = 0;
  tile_out[1][3].x = imagelet_io_4_1;
  tile_out[1][3].y = 0;
  // - imagelet 5 is o4 for out
  tile_out[0][4].x = imagelet_io_5_0;
  tile_out[0][4].y = 0;
  tile_out[1][4].x = imagelet_io_5_1;
  tile_out[1][4].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 9;
  mcu_instr.borderBottom = 9;
  mcu_instr.borderLeft   = 9;
  mcu_instr.borderRight  = 9;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 5;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 26;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, o2, o3, o4, i0, i1, i2);

  // extract measures
  // get measure vol result from reduction_24
  redter.xres = reduction_24;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_24;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po20 = (int32_t) red_24[0];

  return ret;
}


// dag 2: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 72
 */
freia_status main_terapix_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: >(3,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_SUP3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for imWork1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for out
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 4 input images, 1 output image
 * 7 image operations in dag
 * dag length is 5, dag width is 4
 * costs in cycles per imagelet row:
 * - computation: 24
 * - communication: 120
 */
freia_status main_terapix_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[1];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // operation 3 parameters
  int16_t p_3[1];
  const int32_t x_3 = 2;
  const int32_t y_3 = 0;
  // operation 5 parameters
  int16_t p_5[1];
  const int32_t x_5 = 3;
  const int32_t y_5 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][7];
  terapix_tile_info tile_in[2][4];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 4 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 128;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 128;
  int imagelet_3 = 256;
  int imagelet_4 = 384;
  int imagelet_5 = 512;
  int imagelet_6 = 640;
  int imagelet_7 = 768;
  int imagelet_8 = 896;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_6;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_7;
  int imagelet_io_4_0 = imagelet_4;
  int imagelet_io_4_1 = imagelet_8;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: <_(1) -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi5;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_INF_CONST;
  // 1: <_(2) -> 2
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_2_0;
  mcu_macro[1][1].xmin2 = imagelet_io_2_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi6;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_INF_CONST;
  // 2: >(2,1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_1_0;
  mcu_macro[1][2].xmin2 = imagelet_io_1_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_2_0;
  mcu_macro[1][2].xmin3 = imagelet_io_2_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_SUP3;
  // 3: <_(3) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_3_0;
  mcu_macro[1][3].xmin1 = imagelet_io_3_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_3_0;
  mcu_macro[1][3].xmin2 = imagelet_io_3_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi7;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_INF_CONST;
  // 4: >(3,2) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_3_0;
  mcu_macro[1][4].xmin1 = imagelet_io_3_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = imagelet_io_3_0;
  mcu_macro[1][4].xmin3 = imagelet_io_3_1;
  mcu_macro[0][4].ymin3 = 0;
  mcu_macro[1][4].ymin3 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_SUP3;
  // 5: <_(4) -> 4
  mcu_macro[0][5].xmin1 = imagelet_io_4_0;
  mcu_macro[1][5].xmin1 = imagelet_io_4_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_4_0;
  mcu_macro[1][5].xmin2 = imagelet_io_4_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  // copy of operation 5 parameters
  p_5[0] = pi8;
  gram.xoffset = x_5;
  gram.yoffset = y_5;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_5;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][5].xmin3 = x_5;
  mcu_macro[1][5].xmin3 = x_5;
  mcu_macro[0][5].ymin3 = y_5;
  mcu_macro[1][5].ymin3 = y_5;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_INF_CONST;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_INF_CONST;
  // 6: >(4,3) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_4_0;
  mcu_macro[1][6].xmin1 = imagelet_io_4_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_3_0;
  mcu_macro[1][6].xmin2 = imagelet_io_3_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_io_1_0;
  mcu_macro[1][6].xmin3 = imagelet_io_1_1;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_SUP3;


  // inputs:
  // - imagelet 1 is i0 for imZone1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for imZone2
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for imZone3
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;
  // - imagelet 4 is i3 for out
  tile_in[0][3].x = imagelet_io_4_0;
  tile_in[0][3].y = 0;
  tile_in[1][3].x = imagelet_io_4_1;
  tile_in[1][3].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 4;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 7;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1, i2, i3);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   // hardware accelerator generated variable
   freia_data2d *out_194 = 0;
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   out_194 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_terapix_helper_1_0_0(imWork1, out_194, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);       /*0054*/

   main_terapix_helper_1_0_1(out, out_194, freia_morpho_k8_center_north);              /*0266*/
   main_terapix_helper_1_0_2(imWork1, imWork1, freia_morpho_k8_center_east);           /*0062*/
   main_terapix_helper_1_0_3(out, out, freia_morpho_k8_center_north);   /*0274*/
   main_terapix_helper_1_0_4(imWork1, imWork1, freia_morpho_k8_center_east);           /*0070*/
   main_terapix_helper_1_0_5(out, out, freia_morpho_k8_center_north);   /*0282*/
   main_terapix_helper_1_0_6(imWork1, imWork1, freia_morpho_k8_center_east);           /*0078*/
   main_terapix_helper_1_0_7(out, out, freia_morpho_k8_center_north);   /*0290*/
   main_terapix_helper_1_0_8(imWork1, imWork1, freia_morpho_k8_center_east);           /*0086*/
   main_terapix_helper_1_0_9(out, out, freia_morpho_k8_center_north);   /*0298*/
   main_terapix_helper_1_0_10(imWork1, imWork1, freia_morpho_k8_center_east);          /*0094*/
   main_terapix_helper_1_0_11(out, out, freia_morpho_k8_center_north);  /*0306*/
   main_terapix_helper_1_0_12(imWork1, imWork1, freia_morpho_k8_center_east);          /*0102*/
   main_terapix_helper_1_0_13(out, out, freia_morpho_k8_center_north);  /*0314*/
   main_terapix_helper_1_0_14(imWork1, imWork1, freia_morpho_k8_center_east);          /*0110*/
   main_terapix_helper_1_0_15(out, out, freia_morpho_k8_center_north);  /*0322*/
   main_terapix_helper_1_0_16(imWork1, imWork1, freia_morpho_k8_center_east);          /*0118*/
   main_terapix_helper_1_0_17(out, out, freia_morpho_k8_center_north);  /*0330*/
   main_terapix_helper_1_0_18(imWork1, imWork1, freia_morpho_k8_center_east);          /*0126*/
   main_terapix_helper_1_0_19(out, out, freia_morpho_k8_center_north);  /*0338*/
   main_terapix_helper_1_0_20(imWork1, imWork1, freia_morpho_k8_center_east);          /*0134*/
   main_terapix_helper_1_0_21(out, out, freia_morpho_k8_center_north);  /*0346*/
   main_terapix_helper_1_0_22(imWork1, imWork1, freia_morpho_k8_center_east);          /*0142*/
   main_terapix_helper_1_0_23(out, out, freia_morpho_k8_center_north, neighborTransposed_1);          /*0354*/

   main_terapix_helper_1_0_24(imWork1, imWork1, freia_morpho_k8_center_east, neighborTransposed_0);   /*0150*/

   main_terapix_helper_1_0_25(out, out, neighborTransposed_1);          /*0363*/
   main_terapix_helper_1_0_26(imWork1, imWork1, neighborTransposed_0);  /*0159*/
   main_terapix_helper_1_0_27(out, out, neighborTransposed_1);          /*0371*/
   main_terapix_helper_1_0_28(imWork1, imWork1, neighborTransposed_0);  /*0167*/
   main_terapix_helper_1_0_29(out, out, neighborTransposed_1);          /*0379*/
   main_terapix_helper_1_0_30(imWork1, imWork1, neighborTransposed_0);  /*0175*/
   main_terapix_helper_1_0_31(out, out, neighborTransposed_1);          /*0387*/
   main_terapix_helper_1_0_32(imWork1, imWork1, neighborTransposed_0);  /*0183*/
   main_terapix_helper_1_0_33(out, out, neighborTransposed_1);          /*0395*/
   main_terapix_helper_1_0_34(imWork1, imWork1, neighborTransposed_0);  /*0191*/
   main_terapix_helper_1_0_35(out, out, neighborTransposed_1);          /*0403*/
   main_terapix_helper_1_0_36(imWork1, imWork1, neighborTransposed_0);  /*0199*/
   main_terapix_helper_1_0_37(out, out, neighborTransposed_1);          /*0411*/
   main_terapix_helper_1_0_38(imWork1, imWork1, neighborTransposed_0);  /*0207*/
   main_terapix_helper_1_0_39(out, out, neighborTransposed_1);          /*0419*/
   main_terapix_helper_1_0_40(imWork1, imWork1, neighborTransposed_0);  /*0215*/
   main_terapix_helper_1_0_41(out, out, neighborTransposed_1);          /*0427*/
   main_terapix_helper_1_0_42(imWork1, imWork1, neighborTransposed_0);  /*0223*/
   main_terapix_helper_1_0_43(out, out, neighborTransposed_1);          /*0435*/
   main_terapix_helper_1_0_44(imWork1, imWork1, neighborTransposed_0);  /*0231*/
   main_terapix_helper_1_0_45(out, out, neighborTransposed_1);          /*0443*/
   main_terapix_helper_1_0_46(imWork1, imWork1, neighborTransposed_0);  /*0239*/
   main_terapix_helper_1_0_47(imZone1, imZone2, imZone3, imWork1, out, imWork1, imin, out, neighborTransposed_0, neighborTransposed_1, 105, 255, 1, 60, 105, 1, 100, 150, 1, freia_morpho_kernel_8c, &volcurrent);            /*0248*/
   
   
   
   
   
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_terapix_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);              /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_terapix_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);  /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/
   freia_common_destruct_data(out_194);

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   // hardware accelerator generated variable
   freia_data2d *out_194 = 0;
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   out_194 = freia_common_create_data(out->bpp, out->widthWa, out->heightWa);
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_terapix_helper_1_0_0(imWork1, out_194, in, freia_morpho_k8_center_east, freia_morpho_k8_center_north);       /*0054*/

   main_terapix_helper_1_0_1(out, out_194, freia_morpho_k8_center_north);              /*0266*/
   main_terapix_helper_1_0_2(imWork1, imWork1, freia_morpho_k8_center_east);           /*0062*/
   main_terapix_helper_1_0_3(out, out, freia_morpho_k8_center_north);   /*0274*/
   main_terapix_helper_1_0_4(imWork1, imWork1, freia_morpho_k8_center_east);           /*0070*/
   main_terapix_helper_1_0_5(out, out, freia_morpho_k8_center_north);   /*0282*/
   main_terapix_helper_1_0_6(imWork1, imWork1, freia_morpho_k8_center_east);           /*0078*/
   main_terapix_helper_1_0_7(out, out, freia_morpho_k8_center_north);   /*0290*/
   main_terapix_helper_1_0_8(imWork1, imWork1, freia_morpho_k8_center_east);           /*0086*/
   main_terapix_helper_1_0_9(out, out, freia_morpho_k8_center_north);   /*0298*/
   main_terapix_helper_1_0_10(imWork1, imWork1, freia_morpho_k8_center_east);          /*0094*/
   main_terapix_helper_1_0_11(out, out, freia_morpho_k8_center_north);  /*0306*/
   main_terapix_helper_1_0_12(imWork1, imWork1, freia_morpho_k8_center_east);          /*0102*/
   main_terapix_helper_1_0_13(out, out, freia_morpho_k8_center_north);  /*0314*/
   main_terapix_helper_1_0_14(imWork1, imWork1, freia_morpho_k8_center_east);          /*0110*/
   main_terapix_helper_1_0_15(out, out, freia_morpho_k8_center_north);  /*0322*/
   main_terapix_helper_1_0_16(imWork1, imWork1, freia_morpho_k8_center_east);          /*0118*/
   main_terapix_helper_1_0_17(out, out, freia_morpho_k8_center_north);  /*0330*/
   main_terapix_helper_1_0_18(imWork1, imWork1, freia_morpho_k8_center_east);          /*0126*/
   main_terapix_helper_1_0_19(out, out, freia_morpho_k8_center_north);  /*0338*/
   main_terapix_helper_1_0_20(imWork1, imWork1, freia_morpho_k8_center_east);          /*0134*/
   main_terapix_helper_1_0_21(out, out, freia_morpho_k8_center_north);  /*0346*/
   main_terapix_helper_1_0_22(imWork1, imWork1, freia_morpho_k8_center_east);          /*0142*/
   main_terapix_helper_1_0_23(out, out, freia_morpho_k8_center_north, neighborTransposed_1);          /*0354*/

   main_terapix_helper_1_0_24(imWork1, imWork1, freia_morpho_k8_center_east, neighborTransposed_0);   /*0150*/

   main_terapix_helper_1_0_25(out, out, neighborTransposed_1);          /*0363*/
   main_terapix_helper_1_0_26(imWork1, imWork1, neighborTransposed_0);  /*0159*/
   main_terapix_helper_1_0_27(out, out, neighborTransposed_1);          /*0371*/
   main_terapix_helper_1_0_28(imWork1, imWork1, neighborTransposed_0);  /*0167*/
   main_terapix_helper_1_0_29(out, out, neighborTransposed_1);          /*0379*/
   main_terapix_helper_1_0_30(imWork1, imWork1, neighborTransposed_0);  /*0175*/
   main_terapix_helper_1_0_31(out, out, neighborTransposed_1);          /*0387*/
   main_terapix_helper_1_0_32(imWork1, imWork1, neighborTransposed_0);  /*0183*/
   main_terapix_helper_1_0_33(out, out, neighborTransposed_1);          /*0395*/
   main_terapix_helper_1_0_34(imWork1, imWork1, neighborTransposed_0);  /*0191*/
   main_terapix_helper_1_0_35(out, out, neighborTransposed_1);          /*0403*/
   main_terapix_helper_1_0_36(imWork1, imWork1, neighborTransposed_0);  /*0199*/
   main_terapix_helper_1_0_37(out, out, neighborTransposed_1);          /*0411*/
   main_terapix_helper_1_0_38(imWork1, imWork1, neighborTransposed_0);  /*0207*/
   main_terapix_helper_1_0_39(out, out, neighborTransposed_1);          /*0419*/
   main_terapix_helper_1_0_40(imWork1, imWork1, neighborTransposed_0);  /*0215*/
   main_terapix_helper_1_0_41(out, out, neighborTransposed_1);          /*0427*/
   main_terapix_helper_1_0_42(imWork1, imWork1, neighborTransposed_0);  /*0223*/
   main_terapix_helper_1_0_43(out, out, neighborTransposed_1);          /*0435*/
   main_terapix_helper_1_0_44(imWork1, imWork1, neighborTransposed_0);  /*0231*/
   main_terapix_helper_1_0_45(out, out, neighborTransposed_1);          /*0443*/
   main_terapix_helper_1_0_46(imWork1, imWork1, neighborTransposed_0);  /*0239*/
   main_terapix_helper_1_0_47(imZone1, imZone2, imZone3, imWork1, out, imWork1, imin, out, neighborTransposed_0, neighborTransposed_1, 105, 255, 1, 60, 105, 1, 100, 150, 1, freia_morpho_kernel_8c, &volcurrent);            /*0248*/
   
   
   
   
   
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_terapix_helper_2_0_0(out, imWork1, out, freia_morpho_kernel_8c, &volcurrent);              /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_terapix_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);  /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/
   freia_common_destruct_data(out_194);

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=1 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "main_opencl_helper_1_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "main_opencl_helper_1_0_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0_0": #i=1 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imWork1_202" [shape=circle];
  "out_201" [shape=circle];

  // computation vertices
  "258 D8" [shape=box];
  "258 D8" -> "out_201";
  "54 D8" [shape=box];
  "54 D8" -> "imWork1_202";
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "main_opencl_helper_1_0_2" of module "main" in dot format
// DAG "main_opencl_helper_1_0_2": #i=3 #o=4 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0_2" {
  // inputs
  "imWork1_3" [shape=circle];
  "imin" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "imZone3" [shape=circle];
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imWork1" [shape=circle];

  // computation vertices
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "out_2" -> "460 <";
  "imWork1_3" -> "460 <";
}
// graph for dag "main_opencl_helper_1_0_4" of module "main" in dot format
// DAG "main_opencl_helper_1_0_4": #i=1 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0_4" {
  // inputs
  "out_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "out_1" -> "472 D8";
}
// graph for dag "main_opencl_helper_2_0" of module "main" in dot format
// DAG "main_opencl_helper_2_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_2_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "main_opencl_helper_2_0_0" of module "main" in dot format
// DAG "main_opencl_helper_2_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_2_0_0" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "main_opencl_helper_3_0" of module "main" in dot format
// DAG "main_opencl_helper_3_0": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_3_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "main_opencl_helper_3_0_0" of module "main" in dot format
// DAG "main_opencl_helper_3_0_0": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_3_0_0" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "main_opencl_helper_D8_144" of module "main" in dot format
// DAG "main_opencl_helper_D8_144": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_144" {
  // inputs
  "out_103" [shape=circle];

  // outputs
  "out_102" [shape=circle];

  // computation vertices
  "357 D8" [shape=box];
  "357 D8" -> "out_102";
  "out_103" -> "357 D8";
}
// graph for dag "main_opencl_helper_D8_24" of module "main" in dot format
// DAG "main_opencl_helper_D8_24": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_24" {
  // inputs
  "imWork1_104" [shape=circle];

  // outputs
  "imWork1_103" [shape=circle];

  // computation vertices
  "153 D8" [shape=box];
  "153 D8" -> "imWork1_103";
  "imWork1_104" -> "153 D8";
}
// graph for dag "main_opencl_helper_D8_511" of module "main" in dot format
// DAG "main_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_511" {
  // inputs
  "imWork1" [shape=circle];

  // outputs
  "out_1" [shape=circle];

  // computation vertices
  "471 D8" [shape=box];
  "471 D8" -> "out_1";
  "imWork1" -> "471 D8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 0 ops and 1 copies, optimized to 0 ops and 0+1+0 copies

// dag 1: 411 ops and 0 copies, optimized to 411 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_1_0_0
static cl_kernel main_opencl_helper_1_0_0_kernel[2];

// compile kernels for main_opencl_helper_1_0_0
static freia_status main_opencl_helper_1_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_1_0_0
  const char * main_opencl_helper_1_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_1_0_0\n"
    "KERNEL void main_opencl_helper_1_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t54 = PIXEL_MIN;\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t258 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t54 = PIXEL_SUP(t54, in0);\n"
    "    t54 = PIXEL_SUP(t54, (is_E)? PIXEL_MIN: in0E);\n"
    "    t258 = PIXEL_SUP(t258, (is_N)? PIXEL_MIN: in0N);\n"
    "    t258 = PIXEL_SUP(t258, in0);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t54;\n"
    "    p1[i] = t258;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL8", &main_opencl_helper_1_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL16", &main_opencl_helper_1_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_1_0_0
freia_status main_opencl_helper_1_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_1_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_1_0_0_kernel[bpp];

  // call kernel main_opencl_helper_1_0_0
  err |= freia_op_call_kernel(kernel, 2, 1, 0, 0, o0, o1, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_24
static cl_kernel main_opencl_helper_D8_24_kernel[2];

// compile kernels for main_opencl_helper_D8_24
static freia_status main_opencl_helper_D8_24_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_24
  const char * main_opencl_helper_D8_24_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_24\n"
    "KERNEL void main_opencl_helper_D8_24(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t153 = PIXEL_MIN;\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t153 = PIXEL_SUP(t153, in0);\n"
    "    t153 = PIXEL_SUP(t153, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t153;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_24_source, "main_opencl_helper_D8_24", "-DPIXEL8", &main_opencl_helper_D8_24_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_24_source, "main_opencl_helper_D8_24", "-DPIXEL16", &main_opencl_helper_D8_24_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_24
freia_status main_opencl_helper_D8_24(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_24_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_24_kernel[bpp];

  // call kernel main_opencl_helper_D8_24
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_144
static cl_kernel main_opencl_helper_D8_144_kernel[2];

// compile kernels for main_opencl_helper_D8_144
static freia_status main_opencl_helper_D8_144_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_144
  const char * main_opencl_helper_D8_144_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_144\n"
    "KERNEL void main_opencl_helper_D8_144(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t357 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t357 = PIXEL_SUP(t357, (is_N)? PIXEL_MIN: in0N);\n"
    "    t357 = PIXEL_SUP(t357, in0);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t357;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_144_source, "main_opencl_helper_D8_144", "-DPIXEL8", &main_opencl_helper_D8_144_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_144_source, "main_opencl_helper_D8_144", "-DPIXEL16", &main_opencl_helper_D8_144_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_144
freia_status main_opencl_helper_D8_144(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_144_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_144_kernel[bpp];

  // call kernel main_opencl_helper_D8_144
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_1_0_2
static cl_kernel main_opencl_helper_1_0_2_kernel[2];

// compile kernels for main_opencl_helper_1_0_2
static freia_status main_opencl_helper_1_0_2_compile(void)
{
  // OpenCL source for main_opencl_helper_1_0_2
  const char * main_opencl_helper_1_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_1_0_2\n"
    "KERNEL void main_opencl_helper_1_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * o2,\n"
    "  int ofs_o2,\n"
    "  GLOBAL PIXEL * o3,\n"
    "  int ofs_o3,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  int c5,\n"
    "  int c6,\n"
    "  int c7,\n"
    "  int c8)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;\n"
    "  GLOBAL PIXEL * p3 = o3 + ofs_o3 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t460 = PIXEL_INF(in0, in2);\n"
    "    PIXEL t461 = PIXEL_SUB(t460, in1);\n"
    "    PIXEL t465 = PIXEL_THRESHOLD(t460, c0, c1, c2);\n"
    "    PIXEL t463 = PIXEL_THRESHOLD(t461, c3, c4, c5);\n"
    "    PIXEL t464 = PIXEL_THRESHOLD(t461, c6, c7, c8);\n"
    "    PIXEL t467 = PIXEL_SUP(t463, t464);\n"
    "    PIXEL t468 = PIXEL_SUP(t467, t465);\n"
    "    PIXEL t469 = PIXEL_NOT(t468);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t465;\n"
    "    p1[i] = t463;\n"
    "    p2[i] = t464;\n"
    "    p3[i] = t469;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_2_source, "main_opencl_helper_1_0_2", "-DPIXEL8", &main_opencl_helper_1_0_2_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_2_source, "main_opencl_helper_1_0_2", "-DPIXEL16", &main_opencl_helper_1_0_2_kernel[1]);
  return err;
}

// helper function main_opencl_helper_1_0_2
freia_status main_opencl_helper_1_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  freia_data2d * o2,
  freia_data2d * o3,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t c5,
  int32_t c6,
  int32_t c7,
  int32_t c8)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_1_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_1_0_2_kernel[bpp];

  // call kernel main_opencl_helper_1_0_2
  err |= freia_op_call_kernel(kernel, 4, 3, 9, 0, o0, o1, o2, o3, i0, i1, i2, c0, c1, c2, c3, c4, c5, c6, c7, c8);

  return err;
}

// hold kernels for main_opencl_helper_D8_511
static cl_kernel main_opencl_helper_D8_511_kernel[2];

// compile kernels for main_opencl_helper_D8_511
static freia_status main_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_511
  const char * main_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_511\n"
    "KERNEL void main_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t471 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t471 = PIXEL_SUP(t471, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t471 = PIXEL_SUP(t471, (is_N)? PIXEL_MIN: in0N);\n"
    "    t471 = PIXEL_SUP(t471, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t471 = PIXEL_SUP(t471, (is_W)? PIXEL_MIN: in0W);\n"
    "    t471 = PIXEL_SUP(t471, in0);\n"
    "    t471 = PIXEL_SUP(t471, (is_E)? PIXEL_MIN: in0E);\n"
    "    t471 = PIXEL_SUP(t471, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t471 = PIXEL_SUP(t471, (is_S)? PIXEL_MIN: in0S);\n"
    "    t471 = PIXEL_SUP(t471, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t471;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL8", &main_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL16", &main_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_511
freia_status main_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_511_kernel[bpp];

  // call kernel main_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_1_0_4
static cl_kernel main_opencl_helper_1_0_4_kernel[2];

// compile kernels for main_opencl_helper_1_0_4
static freia_status main_opencl_helper_1_0_4_compile(void)
{
  // OpenCL source for main_opencl_helper_1_0_4
  const char * main_opencl_helper_1_0_4_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_1_0_4\n"
    "KERNEL void main_opencl_helper_1_0_4(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t472 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t472 = PIXEL_SUP(t472, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t472 = PIXEL_SUP(t472, (is_N)? PIXEL_MIN: in0N);\n"
    "    t472 = PIXEL_SUP(t472, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t472 = PIXEL_SUP(t472, (is_W)? PIXEL_MIN: in0W);\n"
    "    t472 = PIXEL_SUP(t472, in0);\n"
    "    t472 = PIXEL_SUP(t472, (is_E)? PIXEL_MIN: in0E);\n"
    "    t472 = PIXEL_SUP(t472, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t472 = PIXEL_SUP(t472, (is_S)? PIXEL_MIN: in0S);\n"
    "    t472 = PIXEL_SUP(t472, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    PIXEL_VOLUME(red474, t472);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t472;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_4_source, "main_opencl_helper_1_0_4", "-DPIXEL8", &main_opencl_helper_1_0_4_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_4_source, "main_opencl_helper_1_0_4", "-DPIXEL16", &main_opencl_helper_1_0_4_kernel[1]);
  return err;
}

// helper function main_opencl_helper_1_0_4
freia_status main_opencl_helper_1_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_1_0_4_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_1_0_4_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_1_0_4
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 1, o0, i0, &redres);

  // return reduction results
  *po2 = redres.volume;

  return err;
}

// dag 2: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_2_0_0
static cl_kernel main_opencl_helper_2_0_0_kernel[2];

// compile kernels for main_opencl_helper_2_0_0
static freia_status main_opencl_helper_2_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_2_0_0
  const char * main_opencl_helper_2_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_2_0_0\n"
    "KERNEL void main_opencl_helper_2_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t477 = PIXEL_MAX;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t477 = PIXEL_INF(t477, (is_N|is_W)? PIXEL_MAX: in1NW);\n"
    "    t477 = PIXEL_INF(t477, (is_N)? PIXEL_MAX: in1N);\n"
    "    t477 = PIXEL_INF(t477, (is_N|is_E)? PIXEL_MAX: in1NE);\n"
    "    t477 = PIXEL_INF(t477, (is_W)? PIXEL_MAX: in1W);\n"
    "    t477 = PIXEL_INF(t477, in1);\n"
    "    t477 = PIXEL_INF(t477, (is_E)? PIXEL_MAX: in1E);\n"
    "    t477 = PIXEL_INF(t477, (is_S|is_W)? PIXEL_MAX: in1SW);\n"
    "    t477 = PIXEL_INF(t477, (is_S)? PIXEL_MAX: in1S);\n"
    "    t477 = PIXEL_INF(t477, (is_S|is_E)? PIXEL_MAX: in1SE);\n"
    "    PIXEL t478 = PIXEL_SUP(t477, in0);\n"
    "    PIXEL_VOLUME(red479, t478);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t478;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_2_0_0_source, "main_opencl_helper_2_0_0", "-DPIXEL8", &main_opencl_helper_2_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_2_0_0_source, "main_opencl_helper_2_0_0", "-DPIXEL16", &main_opencl_helper_2_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_2_0_0
freia_status main_opencl_helper_2_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_2_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_2_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_2_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.volume;

  return err;
}

// dag 3: 7 ops and 0 copies, optimized to 7 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_3_0_0
static cl_kernel main_opencl_helper_3_0_0_kernel[2];

// compile kernels for main_opencl_helper_3_0_0
static freia_status main_opencl_helper_3_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_3_0_0
  const char * main_opencl_helper_3_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_3_0_0\n"
    "KERNEL void main_opencl_helper_3_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  GLOBAL PIXEL * i3, // const?\n"
    "  int ofs_i3,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "  GLOBAL PIXEL * j3 = i3 + ofs_i3 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in2 = j2[i];\n"
    "    PIXEL in3 = j3[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t484 = PIXEL_INF(in0, c0);\n"
    "    PIXEL t485 = PIXEL_INF(in1, c1);\n"
    "    PIXEL t486 = PIXEL_INF(in2, c2);\n"
    "    PIXEL t487 = PIXEL_INF(in3, c3);\n"
    "    PIXEL t489 = PIXEL_SUP(t485, t484);\n"
    "    PIXEL t490 = PIXEL_SUP(t486, t489);\n"
    "    PIXEL t491 = PIXEL_SUP(t487, t490);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t491;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_3_0_0_source, "main_opencl_helper_3_0_0", "-DPIXEL8", &main_opencl_helper_3_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_3_0_0_source, "main_opencl_helper_3_0_0", "-DPIXEL16", &main_opencl_helper_3_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_3_0_0
freia_status main_opencl_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  const freia_data2d * i3,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_3_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_3_0_0_kernel[bpp];

  // call kernel main_opencl_helper_3_0_0
  err |= freia_op_call_kernel(kernel, 1, 4, 4, 0, o0, i0, i1, i2, i3, c0, c1, c2, c3);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl for dag 1

// opencl function main_opencl_helper_1_0_0
KERNEL void main_opencl_helper_1_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t54 = PIXEL_MIN;
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t258 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];

    // pixel computations
    t54 = PIXEL_SUP(t54, in0);
    t54 = PIXEL_SUP(t54, (is_E)? PIXEL_MIN: in0E);
    t258 = PIXEL_SUP(t258, (is_N)? PIXEL_MIN: in0N);
    t258 = PIXEL_SUP(t258, in0);

    // set output pixels
    p0[i] = t54;
    p1[i] = t258;
  }
}

// opencl function main_opencl_helper_D8_24
KERNEL void main_opencl_helper_D8_24(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t153 = PIXEL_MIN;
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t153 = PIXEL_SUP(t153, in0);
    t153 = PIXEL_SUP(t153, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t153;
  }
}

// opencl function main_opencl_helper_D8_144
KERNEL void main_opencl_helper_D8_144(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t357 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];

    // pixel computations
    t357 = PIXEL_SUP(t357, (is_N)? PIXEL_MIN: in0N);
    t357 = PIXEL_SUP(t357, in0);

    // set output pixels
    p0[i] = t357;
  }
}

// opencl function main_opencl_helper_1_0_2
KERNEL void main_opencl_helper_1_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * o2,
  int ofs_o2,
  GLOBAL PIXEL * o3,
  int ofs_o3,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  int c5,
  int c6,
  int c7,
  int c8)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * p2 = o2 + ofs_o2 + shift;
  GLOBAL PIXEL * p3 = o3 + ofs_o3 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in2 = j2[i];
    PIXEL in1 = j1[i];

    // pixel computations
    PIXEL t460 = PIXEL_INF(in0, in2);
    PIXEL t461 = PIXEL_SUB(t460, in1);
    PIXEL t465 = PIXEL_THRESHOLD(t460, c0, c1, c2);
    PIXEL t463 = PIXEL_THRESHOLD(t461, c3, c4, c5);
    PIXEL t464 = PIXEL_THRESHOLD(t461, c6, c7, c8);
    PIXEL t467 = PIXEL_SUP(t463, t464);
    PIXEL t468 = PIXEL_SUP(t467, t465);
    PIXEL t469 = PIXEL_NOT(t468);

    // set output pixels
    p0[i] = t465;
    p1[i] = t463;
    p2[i] = t464;
    p3[i] = t469;
  }
}

// opencl function main_opencl_helper_D8_511
KERNEL void main_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t471 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t471 = PIXEL_SUP(t471, (is_N|is_W)? PIXEL_MIN: in0NW);
    t471 = PIXEL_SUP(t471, (is_N)? PIXEL_MIN: in0N);
    t471 = PIXEL_SUP(t471, (is_N|is_E)? PIXEL_MIN: in0NE);
    t471 = PIXEL_SUP(t471, (is_W)? PIXEL_MIN: in0W);
    t471 = PIXEL_SUP(t471, in0);
    t471 = PIXEL_SUP(t471, (is_E)? PIXEL_MIN: in0E);
    t471 = PIXEL_SUP(t471, (is_S|is_W)? PIXEL_MIN: in0SW);
    t471 = PIXEL_SUP(t471, (is_S)? PIXEL_MIN: in0S);
    t471 = PIXEL_SUP(t471, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t471;
  }
}

// opencl function main_opencl_helper_1_0_4
KERNEL void main_opencl_helper_1_0_4(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t472 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t472 = PIXEL_SUP(t472, (is_N|is_W)? PIXEL_MIN: in0NW);
    t472 = PIXEL_SUP(t472, (is_N)? PIXEL_MIN: in0N);
    t472 = PIXEL_SUP(t472, (is_N|is_E)? PIXEL_MIN: in0NE);
    t472 = PIXEL_SUP(t472, (is_W)? PIXEL_MIN: in0W);
    t472 = PIXEL_SUP(t472, in0);
    t472 = PIXEL_SUP(t472, (is_E)? PIXEL_MIN: in0E);
    t472 = PIXEL_SUP(t472, (is_S|is_W)? PIXEL_MIN: in0SW);
    t472 = PIXEL_SUP(t472, (is_S)? PIXEL_MIN: in0S);
    t472 = PIXEL_SUP(t472, (is_S|is_E)? PIXEL_MIN: in0SE);
    PIXEL_VOLUME(red474, t472);

    // set output pixels
    p0[i] = t472;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 2

// opencl function main_opencl_helper_2_0_0
KERNEL void main_opencl_helper_2_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t477 = PIXEL_MAX;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t477 = PIXEL_INF(t477, (is_N|is_W)? PIXEL_MAX: in1NW);
    t477 = PIXEL_INF(t477, (is_N)? PIXEL_MAX: in1N);
    t477 = PIXEL_INF(t477, (is_N|is_E)? PIXEL_MAX: in1NE);
    t477 = PIXEL_INF(t477, (is_W)? PIXEL_MAX: in1W);
    t477 = PIXEL_INF(t477, in1);
    t477 = PIXEL_INF(t477, (is_E)? PIXEL_MAX: in1E);
    t477 = PIXEL_INF(t477, (is_S|is_W)? PIXEL_MAX: in1SW);
    t477 = PIXEL_INF(t477, (is_S)? PIXEL_MAX: in1S);
    t477 = PIXEL_INF(t477, (is_S|is_E)? PIXEL_MAX: in1SE);
    PIXEL t478 = PIXEL_SUP(t477, in0);
    PIXEL_VOLUME(red479, t478);

    // set output pixels
    p0[i] = t478;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 3

// opencl function main_opencl_helper_3_0_0
KERNEL void main_opencl_helper_3_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  GLOBAL PIXEL * i3, // const?
  int ofs_i3,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;
  GLOBAL PIXEL * j3 = i3 + ofs_i3 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];
    PIXEL in2 = j2[i];
    PIXEL in3 = j3[i];

    // pixel computations
    PIXEL t484 = PIXEL_INF(in0, c0);
    PIXEL t485 = PIXEL_INF(in1, c1);
    PIXEL t486 = PIXEL_INF(in2, c2);
    PIXEL t487 = PIXEL_INF(in3, c3);
    PIXEL t489 = PIXEL_SUP(t485, t484);
    PIXEL t490 = PIXEL_SUP(t486, t489);
    PIXEL t491 = PIXEL_SUP(t487, t490);

    // set output pixels
    p0[i] = t491;
  }
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_opencl_helper_1_0_0(imWork1, out, in);                          /*0054*/

   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0055*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0056*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0057*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0058*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0059*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0060*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0061*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0062*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0063*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0064*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0065*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0066*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0067*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0068*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0069*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0070*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0071*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0072*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0073*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0074*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0075*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0076*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0077*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0078*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0079*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0080*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0081*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0082*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0083*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0084*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0085*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0086*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0087*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0088*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0089*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0090*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0091*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0092*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0093*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0094*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0095*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0096*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0097*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0098*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0099*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0100*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0101*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0102*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0103*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0104*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0105*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0106*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0107*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0108*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0109*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0110*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0111*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0112*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0113*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0114*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0115*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0116*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0117*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0118*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0119*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0120*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0121*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0122*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0123*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0124*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0125*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0126*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0127*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0128*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0129*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0130*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0131*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0132*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0133*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0134*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0135*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0136*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0137*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0138*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0139*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0140*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0141*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0142*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0143*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0144*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0145*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0146*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0147*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0148*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0149*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0150*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0151*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0152*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/
   main_opencl_helper_D8_144(out, out);                                 /*0259*/
   main_opencl_helper_D8_144(out, out);                                 /*0260*/
   main_opencl_helper_D8_144(out, out);                                 /*0261*/
   main_opencl_helper_D8_144(out, out);                                 /*0262*/
   main_opencl_helper_D8_144(out, out);                                 /*0263*/
   main_opencl_helper_D8_144(out, out);                                 /*0264*/
   main_opencl_helper_D8_144(out, out);                                 /*0265*/
   main_opencl_helper_D8_144(out, out);                                 /*0266*/
   main_opencl_helper_D8_144(out, out);                                 /*0267*/
   main_opencl_helper_D8_144(out, out);                                 /*0268*/
   main_opencl_helper_D8_144(out, out);                                 /*0269*/
   main_opencl_helper_D8_144(out, out);                                 /*0270*/
   main_opencl_helper_D8_144(out, out);                                 /*0271*/
   main_opencl_helper_D8_144(out, out);                                 /*0272*/
   main_opencl_helper_D8_144(out, out);                                 /*0273*/
   main_opencl_helper_D8_144(out, out);                                 /*0274*/
   main_opencl_helper_D8_144(out, out);                                 /*0275*/
   main_opencl_helper_D8_144(out, out);                                 /*0276*/
   main_opencl_helper_D8_144(out, out);                                 /*0277*/
   main_opencl_helper_D8_144(out, out);                                 /*0278*/
   main_opencl_helper_D8_144(out, out);                                 /*0279*/
   main_opencl_helper_D8_144(out, out);                                 /*0280*/
   main_opencl_helper_D8_144(out, out);                                 /*0281*/
   main_opencl_helper_D8_144(out, out);                                 /*0282*/
   main_opencl_helper_D8_144(out, out);                                 /*0283*/
   main_opencl_helper_D8_144(out, out);                                 /*0284*/
   main_opencl_helper_D8_144(out, out);                                 /*0285*/
   main_opencl_helper_D8_144(out, out);                                 /*0286*/
   main_opencl_helper_D8_144(out, out);                                 /*0287*/
   main_opencl_helper_D8_144(out, out);                                 /*0288*/
   main_opencl_helper_D8_144(out, out);                                 /*0289*/
   main_opencl_helper_D8_144(out, out);                                 /*0290*/
   main_opencl_helper_D8_144(out, out);                                 /*0291*/
   main_opencl_helper_D8_144(out, out);                                 /*0292*/
   main_opencl_helper_D8_144(out, out);                                 /*0293*/
   main_opencl_helper_D8_144(out, out);                                 /*0294*/
   main_opencl_helper_D8_144(out, out);                                 /*0295*/
   main_opencl_helper_D8_144(out, out);                                 /*0296*/
   main_opencl_helper_D8_144(out, out);                                 /*0297*/
   main_opencl_helper_D8_144(out, out);                                 /*0298*/
   main_opencl_helper_D8_144(out, out);                                 /*0299*/
   main_opencl_helper_D8_144(out, out);                                 /*0300*/
   main_opencl_helper_D8_144(out, out);                                 /*0301*/
   main_opencl_helper_D8_144(out, out);                                 /*0302*/
   main_opencl_helper_D8_144(out, out);                                 /*0303*/
   main_opencl_helper_D8_144(out, out);                                 /*0304*/
   main_opencl_helper_D8_144(out, out);                                 /*0305*/
   main_opencl_helper_D8_144(out, out);                                 /*0306*/
   main_opencl_helper_D8_144(out, out);                                 /*0307*/
   main_opencl_helper_D8_144(out, out);                                 /*0308*/
   main_opencl_helper_D8_144(out, out);                                 /*0309*/
   main_opencl_helper_D8_144(out, out);                                 /*0310*/
   main_opencl_helper_D8_144(out, out);                                 /*0311*/
   main_opencl_helper_D8_144(out, out);                                 /*0312*/
   main_opencl_helper_D8_144(out, out);                                 /*0313*/
   main_opencl_helper_D8_144(out, out);                                 /*0314*/
   main_opencl_helper_D8_144(out, out);                                 /*0315*/
   main_opencl_helper_D8_144(out, out);                                 /*0316*/
   main_opencl_helper_D8_144(out, out);                                 /*0317*/
   main_opencl_helper_D8_144(out, out);                                 /*0318*/
   main_opencl_helper_D8_144(out, out);                                 /*0319*/
   main_opencl_helper_D8_144(out, out);                                 /*0320*/
   main_opencl_helper_D8_144(out, out);                                 /*0321*/
   main_opencl_helper_D8_144(out, out);                                 /*0322*/
   main_opencl_helper_D8_144(out, out);                                 /*0323*/
   main_opencl_helper_D8_144(out, out);                                 /*0324*/
   main_opencl_helper_D8_144(out, out);                                 /*0325*/
   main_opencl_helper_D8_144(out, out);                                 /*0326*/
   main_opencl_helper_D8_144(out, out);                                 /*0327*/
   main_opencl_helper_D8_144(out, out);                                 /*0328*/
   main_opencl_helper_D8_144(out, out);                                 /*0329*/
   main_opencl_helper_D8_144(out, out);                                 /*0330*/
   main_opencl_helper_D8_144(out, out);                                 /*0331*/
   main_opencl_helper_D8_144(out, out);                                 /*0332*/
   main_opencl_helper_D8_144(out, out);                                 /*0333*/
   main_opencl_helper_D8_144(out, out);                                 /*0334*/
   main_opencl_helper_D8_144(out, out);                                 /*0335*/
   main_opencl_helper_D8_144(out, out);                                 /*0336*/
   main_opencl_helper_D8_144(out, out);                                 /*0337*/
   main_opencl_helper_D8_144(out, out);                                 /*0338*/
   main_opencl_helper_D8_144(out, out);                                 /*0339*/
   main_opencl_helper_D8_144(out, out);                                 /*0340*/
   main_opencl_helper_D8_144(out, out);                                 /*0341*/
   main_opencl_helper_D8_144(out, out);                                 /*0342*/
   main_opencl_helper_D8_144(out, out);                                 /*0343*/
   main_opencl_helper_D8_144(out, out);                                 /*0344*/
   main_opencl_helper_D8_144(out, out);                                 /*0345*/
   main_opencl_helper_D8_144(out, out);                                 /*0346*/
   main_opencl_helper_D8_144(out, out);                                 /*0347*/
   main_opencl_helper_D8_144(out, out);                                 /*0348*/
   main_opencl_helper_D8_144(out, out);                                 /*0349*/
   main_opencl_helper_D8_144(out, out);                                 /*0350*/
   main_opencl_helper_D8_144(out, out);                                 /*0351*/
   main_opencl_helper_D8_144(out, out);                                 /*0352*/
   main_opencl_helper_D8_144(out, out);                                 /*0353*/
   main_opencl_helper_D8_144(out, out);                                 /*0354*/
   main_opencl_helper_D8_144(out, out);                                 /*0355*/
   main_opencl_helper_D8_144(out, out);                                 /*0356*/
   main_opencl_helper_D8_144(out, out);                                 /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   main_opencl_helper_1_0_2(imZone3, imZone1, imZone2, imWork1, imWork1, imin, out, 100, 150, 1, 105, 255, 1, 60, 105, 1);          /*0460*/
   
   
   
   main_opencl_helper_D8_511(out, imWork1);                             /*0471*/
   main_opencl_helper_1_0_4(out, out, &volcurrent);                     /*0472*/

   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_opencl_helper_2_0_0(out, imWork1, out, &volcurrent);         /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_opencl_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);   /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   main_opencl_helper_1_0_0(imWork1, out, in);                          /*0054*/

   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0055*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0056*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0057*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0058*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0059*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0060*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0061*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0062*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0063*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0064*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0065*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0066*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0067*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0068*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0069*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0070*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0071*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0072*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0073*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0074*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0075*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0076*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0077*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0078*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0079*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0080*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0081*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0082*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0083*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0084*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0085*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0086*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0087*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0088*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0089*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0090*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0091*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0092*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0093*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0094*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0095*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0096*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0097*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0098*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0099*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0100*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0101*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0102*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0103*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0104*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0105*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0106*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0107*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0108*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0109*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0110*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0111*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0112*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0113*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0114*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0115*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0116*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0117*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0118*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0119*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0120*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0121*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0122*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0123*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0124*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0125*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0126*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0127*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0128*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0129*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0130*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0131*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0132*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0133*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0134*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0135*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0136*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0137*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0138*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0139*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0140*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0141*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0142*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0143*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0144*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0145*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0146*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0147*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0148*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0149*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0150*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0151*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0152*/
   main_opencl_helper_D8_24(imWork1, imWork1);                          /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/
   main_opencl_helper_D8_144(out, out);                                 /*0259*/
   main_opencl_helper_D8_144(out, out);                                 /*0260*/
   main_opencl_helper_D8_144(out, out);                                 /*0261*/
   main_opencl_helper_D8_144(out, out);                                 /*0262*/
   main_opencl_helper_D8_144(out, out);                                 /*0263*/
   main_opencl_helper_D8_144(out, out);                                 /*0264*/
   main_opencl_helper_D8_144(out, out);                                 /*0265*/
   main_opencl_helper_D8_144(out, out);                                 /*0266*/
   main_opencl_helper_D8_144(out, out);                                 /*0267*/
   main_opencl_helper_D8_144(out, out);                                 /*0268*/
   main_opencl_helper_D8_144(out, out);                                 /*0269*/
   main_opencl_helper_D8_144(out, out);                                 /*0270*/
   main_opencl_helper_D8_144(out, out);                                 /*0271*/
   main_opencl_helper_D8_144(out, out);                                 /*0272*/
   main_opencl_helper_D8_144(out, out);                                 /*0273*/
   main_opencl_helper_D8_144(out, out);                                 /*0274*/
   main_opencl_helper_D8_144(out, out);                                 /*0275*/
   main_opencl_helper_D8_144(out, out);                                 /*0276*/
   main_opencl_helper_D8_144(out, out);                                 /*0277*/
   main_opencl_helper_D8_144(out, out);                                 /*0278*/
   main_opencl_helper_D8_144(out, out);                                 /*0279*/
   main_opencl_helper_D8_144(out, out);                                 /*0280*/
   main_opencl_helper_D8_144(out, out);                                 /*0281*/
   main_opencl_helper_D8_144(out, out);                                 /*0282*/
   main_opencl_helper_D8_144(out, out);                                 /*0283*/
   main_opencl_helper_D8_144(out, out);                                 /*0284*/
   main_opencl_helper_D8_144(out, out);                                 /*0285*/
   main_opencl_helper_D8_144(out, out);                                 /*0286*/
   main_opencl_helper_D8_144(out, out);                                 /*0287*/
   main_opencl_helper_D8_144(out, out);                                 /*0288*/
   main_opencl_helper_D8_144(out, out);                                 /*0289*/
   main_opencl_helper_D8_144(out, out);                                 /*0290*/
   main_opencl_helper_D8_144(out, out);                                 /*0291*/
   main_opencl_helper_D8_144(out, out);                                 /*0292*/
   main_opencl_helper_D8_144(out, out);                                 /*0293*/
   main_opencl_helper_D8_144(out, out);                                 /*0294*/
   main_opencl_helper_D8_144(out, out);                                 /*0295*/
   main_opencl_helper_D8_144(out, out);                                 /*0296*/
   main_opencl_helper_D8_144(out, out);                                 /*0297*/
   main_opencl_helper_D8_144(out, out);                                 /*0298*/
   main_opencl_helper_D8_144(out, out);                                 /*0299*/
   main_opencl_helper_D8_144(out, out);                                 /*0300*/
   main_opencl_helper_D8_144(out, out);                                 /*0301*/
   main_opencl_helper_D8_144(out, out);                                 /*0302*/
   main_opencl_helper_D8_144(out, out);                                 /*0303*/
   main_opencl_helper_D8_144(out, out);                                 /*0304*/
   main_opencl_helper_D8_144(out, out);                                 /*0305*/
   main_opencl_helper_D8_144(out, out);                                 /*0306*/
   main_opencl_helper_D8_144(out, out);                                 /*0307*/
   main_opencl_helper_D8_144(out, out);                                 /*0308*/
   main_opencl_helper_D8_144(out, out);                                 /*0309*/
   main_opencl_helper_D8_144(out, out);                                 /*0310*/
   main_opencl_helper_D8_144(out, out);                                 /*0311*/
   main_opencl_helper_D8_144(out, out);                                 /*0312*/
   main_opencl_helper_D8_144(out, out);                                 /*0313*/
   main_opencl_helper_D8_144(out, out);                                 /*0314*/
   main_opencl_helper_D8_144(out, out);                                 /*0315*/
   main_opencl_helper_D8_144(out, out);                                 /*0316*/
   main_opencl_helper_D8_144(out, out);                                 /*0317*/
   main_opencl_helper_D8_144(out, out);                                 /*0318*/
   main_opencl_helper_D8_144(out, out);                                 /*0319*/
   main_opencl_helper_D8_144(out, out);                                 /*0320*/
   main_opencl_helper_D8_144(out, out);                                 /*0321*/
   main_opencl_helper_D8_144(out, out);                                 /*0322*/
   main_opencl_helper_D8_144(out, out);                                 /*0323*/
   main_opencl_helper_D8_144(out, out);                                 /*0324*/
   main_opencl_helper_D8_144(out, out);                                 /*0325*/
   main_opencl_helper_D8_144(out, out);                                 /*0326*/
   main_opencl_helper_D8_144(out, out);                                 /*0327*/
   main_opencl_helper_D8_144(out, out);                                 /*0328*/
   main_opencl_helper_D8_144(out, out);                                 /*0329*/
   main_opencl_helper_D8_144(out, out);                                 /*0330*/
   main_opencl_helper_D8_144(out, out);                                 /*0331*/
   main_opencl_helper_D8_144(out, out);                                 /*0332*/
   main_opencl_helper_D8_144(out, out);                                 /*0333*/
   main_opencl_helper_D8_144(out, out);                                 /*0334*/
   main_opencl_helper_D8_144(out, out);                                 /*0335*/
   main_opencl_helper_D8_144(out, out);                                 /*0336*/
   main_opencl_helper_D8_144(out, out);                                 /*0337*/
   main_opencl_helper_D8_144(out, out);                                 /*0338*/
   main_opencl_helper_D8_144(out, out);                                 /*0339*/
   main_opencl_helper_D8_144(out, out);                                 /*0340*/
   main_opencl_helper_D8_144(out, out);                                 /*0341*/
   main_opencl_helper_D8_144(out, out);                                 /*0342*/
   main_opencl_helper_D8_144(out, out);                                 /*0343*/
   main_opencl_helper_D8_144(out, out);                                 /*0344*/
   main_opencl_helper_D8_144(out, out);                                 /*0345*/
   main_opencl_helper_D8_144(out, out);                                 /*0346*/
   main_opencl_helper_D8_144(out, out);                                 /*0347*/
   main_opencl_helper_D8_144(out, out);                                 /*0348*/
   main_opencl_helper_D8_144(out, out);                                 /*0349*/
   main_opencl_helper_D8_144(out, out);                                 /*0350*/
   main_opencl_helper_D8_144(out, out);                                 /*0351*/
   main_opencl_helper_D8_144(out, out);                                 /*0352*/
   main_opencl_helper_D8_144(out, out);                                 /*0353*/
   main_opencl_helper_D8_144(out, out);                                 /*0354*/
   main_opencl_helper_D8_144(out, out);                                 /*0355*/
   main_opencl_helper_D8_144(out, out);                                 /*0356*/
   main_opencl_helper_D8_144(out, out);                                 /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   main_opencl_helper_1_0_2(imZone3, imZone1, imZone2, imWork1, imWork1, imin, out, 100, 150, 1, 105, 255, 1, 60, 105, 1);          /*0460*/
   
   
   
   main_opencl_helper_D8_511(out, imWork1);                             /*0471*/
   main_opencl_helper_1_0_4(out, out, &volcurrent);                     /*0472*/

   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      main_opencl_helper_2_0_0(out, imWork1, out, &volcurrent);         /*0477*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   main_opencl_helper_3_0_0(out, imZone1, imZone2, imZone3, out, 40, 100, 170, 250);   /*0484*/
   
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}
#
# SIGMAC
#
#
# compile generated burner
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imTophat, *imClose, *imZone1, *imZone2, *imZone3, *imWork1, *out;        /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imClose = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0036*/
   imTophat = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);             /*0037*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);                                           /*0047*/

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_k8_center_east);      /*0054*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0055*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0056*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0057*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0058*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0059*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0060*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0061*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0062*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0063*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0064*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0065*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0066*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0067*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0068*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0069*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0070*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0071*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0072*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0073*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0074*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0075*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0076*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0077*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0078*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0079*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0080*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0081*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0082*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0083*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0084*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0085*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0086*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0087*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0088*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0089*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0090*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0091*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0092*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0093*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0094*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0095*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0096*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0097*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0098*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0099*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0100*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0101*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0102*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0103*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0104*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0105*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0106*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0107*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0108*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0109*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0110*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0111*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0112*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0113*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0114*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0115*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0116*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0117*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0118*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0119*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0120*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0121*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0122*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0123*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0124*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0125*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0126*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0127*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0128*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0129*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0130*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0131*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0132*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0133*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0134*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0135*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0136*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0137*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0138*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0139*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0140*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0141*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0142*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0143*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0144*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0145*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0146*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0147*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0148*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0149*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0150*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0151*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0152*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_k8_center_east);                /*0153*/

   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0155*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0156*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0157*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0158*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0159*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0160*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0161*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0162*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0163*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0164*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0165*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0166*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0167*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0168*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0169*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0170*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0171*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0172*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0173*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0174*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0175*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0176*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0177*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0178*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0179*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0180*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0181*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0182*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0183*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0184*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0185*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0186*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0187*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0188*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0189*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0190*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0191*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0192*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0193*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0194*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0195*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0196*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0197*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0198*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0199*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0200*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0201*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0202*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0203*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0204*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0205*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0206*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0207*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0208*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0209*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0210*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0211*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0212*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0213*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0214*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0215*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0216*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0217*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0218*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0219*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0220*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0221*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0222*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0223*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0224*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0225*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0226*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0227*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0228*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0229*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0230*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0231*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0232*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0233*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0234*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0235*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0236*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0237*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0238*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0239*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0240*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0241*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0242*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0243*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0244*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0245*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0246*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0247*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0248*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0249*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0250*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0251*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0252*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0253*/
   freia_aipo_erode_8c(imWork1, imWork1, neighborTransposed_0);         /*0254*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/

   freia_aipo_dilate_8c(out, in, freia_morpho_k8_center_north);         /*0258*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0259*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0260*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0261*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0262*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0263*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0264*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0265*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0266*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0267*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0268*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0269*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0270*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0271*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0272*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0273*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0274*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0275*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0276*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0277*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0278*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0279*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0280*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0281*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0282*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0283*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0284*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0285*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0286*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0287*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0288*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0289*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0290*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0291*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0292*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0293*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0294*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0295*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0296*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0297*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0298*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0299*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0300*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0301*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0302*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0303*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0304*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0305*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0306*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0307*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0308*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0309*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0310*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0311*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0312*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0313*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0314*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0315*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0316*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0317*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0318*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0319*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0320*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0321*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0322*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0323*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0324*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0325*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0326*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0327*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0328*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0329*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0330*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0331*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0332*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0333*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0334*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0335*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0336*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0337*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0338*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0339*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0340*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0341*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0342*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0343*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0344*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0345*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0346*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0347*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0348*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0349*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0350*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0351*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0352*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0353*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0354*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0355*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0356*/
   freia_aipo_dilate_8c(out, out, freia_morpho_k8_center_north);        /*0357*/

   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0359*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0360*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0361*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0362*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0363*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0364*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0365*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0366*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0367*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0368*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0369*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0370*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0371*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0372*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0373*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0374*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0375*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0376*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0377*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0378*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0379*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0380*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0381*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0382*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0383*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0384*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0385*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0386*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0387*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0388*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0389*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0390*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0391*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0392*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0393*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0394*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0395*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0396*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0397*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0398*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0399*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0400*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0401*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0402*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0403*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0404*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0405*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0406*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0407*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0408*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0409*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0410*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0411*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0412*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0413*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0414*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0415*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0416*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0417*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0418*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0419*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0420*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0421*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0422*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0423*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0424*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0425*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0426*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0427*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0428*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0429*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0430*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0431*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0432*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0433*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0434*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0435*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0436*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0437*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0438*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0439*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0440*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0441*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0442*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0443*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0444*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0445*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0446*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0447*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0448*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0449*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0450*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0451*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0452*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0453*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0454*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0455*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0456*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0457*/
   freia_aipo_erode_8c(out, out, neighborTransposed_1);                 /*0458*/

   freia_aipo_inf(imClose, imWork1, out);                               /*0460*/
   freia_aipo_sub(imTophat, imClose, imin);                             /*0461*/

   freia_aipo_threshold(imZone1, imTophat, 105, 255, 1);                /*0463*/
   freia_aipo_threshold(imZone2, imTophat, 60, 105, 1);                 /*0464*/
   freia_aipo_threshold(imZone3, imClose, 100, 150, 1);                 /*0465*/

   freia_aipo_sup(imWork1, imZone1, imZone2);                           /*0467*/
   freia_aipo_sup(imWork1, imWork1, imZone3);                           /*0468*/
   freia_aipo_not(imWork1, imWork1);                                    /*0469*/

   freia_aipo_dilate_8c(out, imWork1, freia_morpho_kernel_8c);          /*0471*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0472*/

   freia_aipo_global_vol(out, &volcurrent);                             /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_aipo_erode_8c(out, out, freia_morpho_kernel_8c);            /*0477*/
      freia_aipo_sup(out, out, imWork1);                                /*0478*/
      freia_aipo_global_vol(out, &volcurrent);                          /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   freia_aipo_inf_const(imZone1, imZone1, 40);                          /*0484*/
   freia_aipo_inf_const(imZone2, imZone2, 100);                         /*0485*/
   freia_aipo_inf_const(imZone3, imZone3, 170);                         /*0486*/
   freia_aipo_inf_const(out, out, 250);                                 /*0487*/

   freia_aipo_sup(imWork1, imZone2, imZone1);                           /*0489*/
   freia_aipo_sup(imWork1, imZone3, imWork1);                           /*0490*/
   freia_aipo_sup(out, out, imWork1);                                   /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imTophat);                                /*0500*/
   freia_common_destruct_data(imClose);                                 /*0501*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=0 #s=0 #I=1 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imin" [shape=circle];

  // outputs
  "in" [shape=circle];

  // computation vertices
  "47 =" [shape=circle];
  "47 =" -> "in";
  "imin" -> "47 =";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out"];
  "out" -> "477 E8";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=0 #o=0 #c=0 #s=0 #I=0 #B=1 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs

  // computation vertices

  // external before copies: 1
  "in" [shape=circle];
  "in =" [shape=circle,label="=",style="dashed"]
  "imin" -> "in =";
  "in =" -> "in";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=5 #c=411 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imin" [shape=circle];
  "in" [shape=circle];

  // outputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // computation vertices
  "474 vol" [shape=diamond];
  "472 D8" [shape=box];
  "472 D8" -> "474 vol" [label="out"];
  "472 D8" -> "out";
  "471 D8" [shape=box];
  "471 D8" -> "472 D8" [label="out_1"];
  "469 !" [shape=trapezium,orientation=270];
  "469 !" -> "471 D8" [label="imWork1"];
  "469 !" -> "imWork1";
  "468 >" [shape=trapezium,orientation=270];
  "468 >" -> "469 !" [label="imWork1_1"];
  "467 >" [shape=trapezium,orientation=270];
  "467 >" -> "468 >" [label="imWork1_2"];
  "465 thr" [shape=parallelogram];
  "465 thr" -> "468 >" [label="imZone3"];
  "465 thr" -> "imZone3";
  "464 thr" [shape=parallelogram];
  "464 thr" -> "467 >" [label="imZone2"];
  "464 thr" -> "imZone2";
  "463 thr" [shape=parallelogram];
  "463 thr" -> "467 >" [label="imZone1"];
  "463 thr" -> "imZone1";
  "461 -" [shape=trapezium,orientation=270];
  "461 -" -> "464 thr" [label="imTophat"];
  "461 -" -> "463 thr" [label="imTophat"];
  "imin" -> "461 -";
  "460 <" [shape=trapezium,orientation=270];
  "460 <" -> "465 thr" [label="imClose"];
  "460 <" -> "461 -" [label="imClose"];
  "458 E8" [shape=box];
  "458 E8" -> "460 <" [label="out_2"];
  "457 E8" [shape=box];
  "457 E8" -> "458 E8" [label="out_3"];
  "456 E8" [shape=box];
  "456 E8" -> "457 E8" [label="out_4"];
  "455 E8" [shape=box];
  "455 E8" -> "456 E8" [label="out_5"];
  "454 E8" [shape=box];
  "454 E8" -> "455 E8" [label="out_6"];
  "453 E8" [shape=box];
  "453 E8" -> "454 E8" [label="out_7"];
  "452 E8" [shape=box];
  "452 E8" -> "453 E8" [label="out_8"];
  "451 E8" [shape=box];
  "451 E8" -> "452 E8" [label="out_9"];
  "450 E8" [shape=box];
  "450 E8" -> "451 E8" [label="out_10"];
  "449 E8" [shape=box];
  "449 E8" -> "450 E8" [label="out_11"];
  "448 E8" [shape=box];
  "448 E8" -> "449 E8" [label="out_12"];
  "447 E8" [shape=box];
  "447 E8" -> "448 E8" [label="out_13"];
  "446 E8" [shape=box];
  "446 E8" -> "447 E8" [label="out_14"];
  "445 E8" [shape=box];
  "445 E8" -> "446 E8" [label="out_15"];
  "444 E8" [shape=box];
  "444 E8" -> "445 E8" [label="out_16"];
  "443 E8" [shape=box];
  "443 E8" -> "444 E8" [label="out_17"];
  "442 E8" [shape=box];
  "442 E8" -> "443 E8" [label="out_18"];
  "441 E8" [shape=box];
  "441 E8" -> "442 E8" [label="out_19"];
  "440 E8" [shape=box];
  "440 E8" -> "441 E8" [label="out_20"];
  "439 E8" [shape=box];
  "439 E8" -> "440 E8" [label="out_21"];
  "438 E8" [shape=box];
  "438 E8" -> "439 E8" [label="out_22"];
  "437 E8" [shape=box];
  "437 E8" -> "438 E8" [label="out_23"];
  "436 E8" [shape=box];
  "436 E8" -> "437 E8" [label="out_24"];
  "435 E8" [shape=box];
  "435 E8" -> "436 E8" [label="out_25"];
  "434 E8" [shape=box];
  "434 E8" -> "435 E8" [label="out_26"];
  "433 E8" [shape=box];
  "433 E8" -> "434 E8" [label="out_27"];
  "432 E8" [shape=box];
  "432 E8" -> "433 E8" [label="out_28"];
  "431 E8" [shape=box];
  "431 E8" -> "432 E8" [label="out_29"];
  "430 E8" [shape=box];
  "430 E8" -> "431 E8" [label="out_30"];
  "429 E8" [shape=box];
  "429 E8" -> "430 E8" [label="out_31"];
  "428 E8" [shape=box];
  "428 E8" -> "429 E8" [label="out_32"];
  "427 E8" [shape=box];
  "427 E8" -> "428 E8" [label="out_33"];
  "426 E8" [shape=box];
  "426 E8" -> "427 E8" [label="out_34"];
  "425 E8" [shape=box];
  "425 E8" -> "426 E8" [label="out_35"];
  "424 E8" [shape=box];
  "424 E8" -> "425 E8" [label="out_36"];
  "423 E8" [shape=box];
  "423 E8" -> "424 E8" [label="out_37"];
  "422 E8" [shape=box];
  "422 E8" -> "423 E8" [label="out_38"];
  "421 E8" [shape=box];
  "421 E8" -> "422 E8" [label="out_39"];
  "420 E8" [shape=box];
  "420 E8" -> "421 E8" [label="out_40"];
  "419 E8" [shape=box];
  "419 E8" -> "420 E8" [label="out_41"];
  "418 E8" [shape=box];
  "418 E8" -> "419 E8" [label="out_42"];
  "417 E8" [shape=box];
  "417 E8" -> "418 E8" [label="out_43"];
  "416 E8" [shape=box];
  "416 E8" -> "417 E8" [label="out_44"];
  "415 E8" [shape=box];
  "415 E8" -> "416 E8" [label="out_45"];
  "414 E8" [shape=box];
  "414 E8" -> "415 E8" [label="out_46"];
  "413 E8" [shape=box];
  "413 E8" -> "414 E8" [label="out_47"];
  "412 E8" [shape=box];
  "412 E8" -> "413 E8" [label="out_48"];
  "411 E8" [shape=box];
  "411 E8" -> "412 E8" [label="out_49"];
  "410 E8" [shape=box];
  "410 E8" -> "411 E8" [label="out_50"];
  "409 E8" [shape=box];
  "409 E8" -> "410 E8" [label="out_51"];
  "408 E8" [shape=box];
  "408 E8" -> "409 E8" [label="out_52"];
  "407 E8" [shape=box];
  "407 E8" -> "408 E8" [label="out_53"];
  "406 E8" [shape=box];
  "406 E8" -> "407 E8" [label="out_54"];
  "405 E8" [shape=box];
  "405 E8" -> "406 E8" [label="out_55"];
  "404 E8" [shape=box];
  "404 E8" -> "405 E8" [label="out_56"];
  "403 E8" [shape=box];
  "403 E8" -> "404 E8" [label="out_57"];
  "402 E8" [shape=box];
  "402 E8" -> "403 E8" [label="out_58"];
  "401 E8" [shape=box];
  "401 E8" -> "402 E8" [label="out_59"];
  "400 E8" [shape=box];
  "400 E8" -> "401 E8" [label="out_60"];
  "399 E8" [shape=box];
  "399 E8" -> "400 E8" [label="out_61"];
  "398 E8" [shape=box];
  "398 E8" -> "399 E8" [label="out_62"];
  "397 E8" [shape=box];
  "397 E8" -> "398 E8" [label="out_63"];
  "396 E8" [shape=box];
  "396 E8" -> "397 E8" [label="out_64"];
  "395 E8" [shape=box];
  "395 E8" -> "396 E8" [label="out_65"];
  "394 E8" [shape=box];
  "394 E8" -> "395 E8" [label="out_66"];
  "393 E8" [shape=box];
  "393 E8" -> "394 E8" [label="out_67"];
  "392 E8" [shape=box];
  "392 E8" -> "393 E8" [label="out_68"];
  "391 E8" [shape=box];
  "391 E8" -> "392 E8" [label="out_69"];
  "390 E8" [shape=box];
  "390 E8" -> "391 E8" [label="out_70"];
  "389 E8" [shape=box];
  "389 E8" -> "390 E8" [label="out_71"];
  "388 E8" [shape=box];
  "388 E8" -> "389 E8" [label="out_72"];
  "387 E8" [shape=box];
  "387 E8" -> "388 E8" [label="out_73"];
  "386 E8" [shape=box];
  "386 E8" -> "387 E8" [label="out_74"];
  "385 E8" [shape=box];
  "385 E8" -> "386 E8" [label="out_75"];
  "384 E8" [shape=box];
  "384 E8" -> "385 E8" [label="out_76"];
  "383 E8" [shape=box];
  "383 E8" -> "384 E8" [label="out_77"];
  "382 E8" [shape=box];
  "382 E8" -> "383 E8" [label="out_78"];
  "381 E8" [shape=box];
  "381 E8" -> "382 E8" [label="out_79"];
  "380 E8" [shape=box];
  "380 E8" -> "381 E8" [label="out_80"];
  "379 E8" [shape=box];
  "379 E8" -> "380 E8" [label="out_81"];
  "378 E8" [shape=box];
  "378 E8" -> "379 E8" [label="out_82"];
  "377 E8" [shape=box];
  "377 E8" -> "378 E8" [label="out_83"];
  "376 E8" [shape=box];
  "376 E8" -> "377 E8" [label="out_84"];
  "375 E8" [shape=box];
  "375 E8" -> "376 E8" [label="out_85"];
  "374 E8" [shape=box];
  "374 E8" -> "375 E8" [label="out_86"];
  "373 E8" [shape=box];
  "373 E8" -> "374 E8" [label="out_87"];
  "372 E8" [shape=box];
  "372 E8" -> "373 E8" [label="out_88"];
  "371 E8" [shape=box];
  "371 E8" -> "372 E8" [label="out_89"];
  "370 E8" [shape=box];
  "370 E8" -> "371 E8" [label="out_90"];
  "369 E8" [shape=box];
  "369 E8" -> "370 E8" [label="out_91"];
  "368 E8" [shape=box];
  "368 E8" -> "369 E8" [label="out_92"];
  "367 E8" [shape=box];
  "367 E8" -> "368 E8" [label="out_93"];
  "366 E8" [shape=box];
  "366 E8" -> "367 E8" [label="out_94"];
  "365 E8" [shape=box];
  "365 E8" -> "366 E8" [label="out_95"];
  "364 E8" [shape=box];
  "364 E8" -> "365 E8" [label="out_96"];
  "363 E8" [shape=box];
  "363 E8" -> "364 E8" [label="out_97"];
  "362 E8" [shape=box];
  "362 E8" -> "363 E8" [label="out_98"];
  "361 E8" [shape=box];
  "361 E8" -> "362 E8" [label="out_99"];
  "360 E8" [shape=box];
  "360 E8" -> "361 E8" [label="out_100"];
  "359 E8" [shape=box];
  "359 E8" -> "360 E8" [label="out_101"];
  "357 D8" [shape=box];
  "357 D8" -> "359 E8" [label="out_102"];
  "356 D8" [shape=box];
  "356 D8" -> "357 D8" [label="out_103"];
  "355 D8" [shape=box];
  "355 D8" -> "356 D8" [label="out_104"];
  "354 D8" [shape=box];
  "354 D8" -> "355 D8" [label="out_105"];
  "353 D8" [shape=box];
  "353 D8" -> "354 D8" [label="out_106"];
  "352 D8" [shape=box];
  "352 D8" -> "353 D8" [label="out_107"];
  "351 D8" [shape=box];
  "351 D8" -> "352 D8" [label="out_108"];
  "350 D8" [shape=box];
  "350 D8" -> "351 D8" [label="out_109"];
  "349 D8" [shape=box];
  "349 D8" -> "350 D8" [label="out_110"];
  "348 D8" [shape=box];
  "348 D8" -> "349 D8" [label="out_111"];
  "347 D8" [shape=box];
  "347 D8" -> "348 D8" [label="out_112"];
  "346 D8" [shape=box];
  "346 D8" -> "347 D8" [label="out_113"];
  "345 D8" [shape=box];
  "345 D8" -> "346 D8" [label="out_114"];
  "344 D8" [shape=box];
  "344 D8" -> "345 D8" [label="out_115"];
  "343 D8" [shape=box];
  "343 D8" -> "344 D8" [label="out_116"];
  "342 D8" [shape=box];
  "342 D8" -> "343 D8" [label="out_117"];
  "341 D8" [shape=box];
  "341 D8" -> "342 D8" [label="out_118"];
  "340 D8" [shape=box];
  "340 D8" -> "341 D8" [label="out_119"];
  "339 D8" [shape=box];
  "339 D8" -> "340 D8" [label="out_120"];
  "338 D8" [shape=box];
  "338 D8" -> "339 D8" [label="out_121"];
  "337 D8" [shape=box];
  "337 D8" -> "338 D8" [label="out_122"];
  "336 D8" [shape=box];
  "336 D8" -> "337 D8" [label="out_123"];
  "335 D8" [shape=box];
  "335 D8" -> "336 D8" [label="out_124"];
  "334 D8" [shape=box];
  "334 D8" -> "335 D8" [label="out_125"];
  "333 D8" [shape=box];
  "333 D8" -> "334 D8" [label="out_126"];
  "332 D8" [shape=box];
  "332 D8" -> "333 D8" [label="out_127"];
  "331 D8" [shape=box];
  "331 D8" -> "332 D8" [label="out_128"];
  "330 D8" [shape=box];
  "330 D8" -> "331 D8" [label="out_129"];
  "329 D8" [shape=box];
  "329 D8" -> "330 D8" [label="out_130"];
  "328 D8" [shape=box];
  "328 D8" -> "329 D8" [label="out_131"];
  "327 D8" [shape=box];
  "327 D8" -> "328 D8" [label="out_132"];
  "326 D8" [shape=box];
  "326 D8" -> "327 D8" [label="out_133"];
  "325 D8" [shape=box];
  "325 D8" -> "326 D8" [label="out_134"];
  "324 D8" [shape=box];
  "324 D8" -> "325 D8" [label="out_135"];
  "323 D8" [shape=box];
  "323 D8" -> "324 D8" [label="out_136"];
  "322 D8" [shape=box];
  "322 D8" -> "323 D8" [label="out_137"];
  "321 D8" [shape=box];
  "321 D8" -> "322 D8" [label="out_138"];
  "320 D8" [shape=box];
  "320 D8" -> "321 D8" [label="out_139"];
  "319 D8" [shape=box];
  "319 D8" -> "320 D8" [label="out_140"];
  "318 D8" [shape=box];
  "318 D8" -> "319 D8" [label="out_141"];
  "317 D8" [shape=box];
  "317 D8" -> "318 D8" [label="out_142"];
  "316 D8" [shape=box];
  "316 D8" -> "317 D8" [label="out_143"];
  "315 D8" [shape=box];
  "315 D8" -> "316 D8" [label="out_144"];
  "314 D8" [shape=box];
  "314 D8" -> "315 D8" [label="out_145"];
  "313 D8" [shape=box];
  "313 D8" -> "314 D8" [label="out_146"];
  "312 D8" [shape=box];
  "312 D8" -> "313 D8" [label="out_147"];
  "311 D8" [shape=box];
  "311 D8" -> "312 D8" [label="out_148"];
  "310 D8" [shape=box];
  "310 D8" -> "311 D8" [label="out_149"];
  "309 D8" [shape=box];
  "309 D8" -> "310 D8" [label="out_150"];
  "308 D8" [shape=box];
  "308 D8" -> "309 D8" [label="out_151"];
  "307 D8" [shape=box];
  "307 D8" -> "308 D8" [label="out_152"];
  "306 D8" [shape=box];
  "306 D8" -> "307 D8" [label="out_153"];
  "305 D8" [shape=box];
  "305 D8" -> "306 D8" [label="out_154"];
  "304 D8" [shape=box];
  "304 D8" -> "305 D8" [label="out_155"];
  "303 D8" [shape=box];
  "303 D8" -> "304 D8" [label="out_156"];
  "302 D8" [shape=box];
  "302 D8" -> "303 D8" [label="out_157"];
  "301 D8" [shape=box];
  "301 D8" -> "302 D8" [label="out_158"];
  "300 D8" [shape=box];
  "300 D8" -> "301 D8" [label="out_159"];
  "299 D8" [shape=box];
  "299 D8" -> "300 D8" [label="out_160"];
  "298 D8" [shape=box];
  "298 D8" -> "299 D8" [label="out_161"];
  "297 D8" [shape=box];
  "297 D8" -> "298 D8" [label="out_162"];
  "296 D8" [shape=box];
  "296 D8" -> "297 D8" [label="out_163"];
  "295 D8" [shape=box];
  "295 D8" -> "296 D8" [label="out_164"];
  "294 D8" [shape=box];
  "294 D8" -> "295 D8" [label="out_165"];
  "293 D8" [shape=box];
  "293 D8" -> "294 D8" [label="out_166"];
  "292 D8" [shape=box];
  "292 D8" -> "293 D8" [label="out_167"];
  "291 D8" [shape=box];
  "291 D8" -> "292 D8" [label="out_168"];
  "290 D8" [shape=box];
  "290 D8" -> "291 D8" [label="out_169"];
  "289 D8" [shape=box];
  "289 D8" -> "290 D8" [label="out_170"];
  "288 D8" [shape=box];
  "288 D8" -> "289 D8" [label="out_171"];
  "287 D8" [shape=box];
  "287 D8" -> "288 D8" [label="out_172"];
  "286 D8" [shape=box];
  "286 D8" -> "287 D8" [label="out_173"];
  "285 D8" [shape=box];
  "285 D8" -> "286 D8" [label="out_174"];
  "284 D8" [shape=box];
  "284 D8" -> "285 D8" [label="out_175"];
  "283 D8" [shape=box];
  "283 D8" -> "284 D8" [label="out_176"];
  "282 D8" [shape=box];
  "282 D8" -> "283 D8" [label="out_177"];
  "281 D8" [shape=box];
  "281 D8" -> "282 D8" [label="out_178"];
  "280 D8" [shape=box];
  "280 D8" -> "281 D8" [label="out_179"];
  "279 D8" [shape=box];
  "279 D8" -> "280 D8" [label="out_180"];
  "278 D8" [shape=box];
  "278 D8" -> "279 D8" [label="out_181"];
  "277 D8" [shape=box];
  "277 D8" -> "278 D8" [label="out_182"];
  "276 D8" [shape=box];
  "276 D8" -> "277 D8" [label="out_183"];
  "275 D8" [shape=box];
  "275 D8" -> "276 D8" [label="out_184"];
  "274 D8" [shape=box];
  "274 D8" -> "275 D8" [label="out_185"];
  "273 D8" [shape=box];
  "273 D8" -> "274 D8" [label="out_186"];
  "272 D8" [shape=box];
  "272 D8" -> "273 D8" [label="out_187"];
  "271 D8" [shape=box];
  "271 D8" -> "272 D8" [label="out_188"];
  "270 D8" [shape=box];
  "270 D8" -> "271 D8" [label="out_189"];
  "269 D8" [shape=box];
  "269 D8" -> "270 D8" [label="out_190"];
  "268 D8" [shape=box];
  "268 D8" -> "269 D8" [label="out_191"];
  "267 D8" [shape=box];
  "267 D8" -> "268 D8" [label="out_192"];
  "266 D8" [shape=box];
  "266 D8" -> "267 D8" [label="out_193"];
  "265 D8" [shape=box];
  "265 D8" -> "266 D8" [label="out_194"];
  "264 D8" [shape=box];
  "264 D8" -> "265 D8" [label="out_195"];
  "263 D8" [shape=box];
  "263 D8" -> "264 D8" [label="out_196"];
  "262 D8" [shape=box];
  "262 D8" -> "263 D8" [label="out_197"];
  "261 D8" [shape=box];
  "261 D8" -> "262 D8" [label="out_198"];
  "260 D8" [shape=box];
  "260 D8" -> "261 D8" [label="out_199"];
  "259 D8" [shape=box];
  "259 D8" -> "260 D8" [label="out_200"];
  "258 D8" [shape=box];
  "258 D8" -> "259 D8" [label="out_201"];
  "254 E8" [shape=box];
  "254 E8" -> "460 <" [label="imWork1_3"];
  "253 E8" [shape=box];
  "253 E8" -> "254 E8" [label="imWork1_4"];
  "252 E8" [shape=box];
  "252 E8" -> "253 E8" [label="imWork1_5"];
  "251 E8" [shape=box];
  "251 E8" -> "252 E8" [label="imWork1_6"];
  "250 E8" [shape=box];
  "250 E8" -> "251 E8" [label="imWork1_7"];
  "249 E8" [shape=box];
  "249 E8" -> "250 E8" [label="imWork1_8"];
  "248 E8" [shape=box];
  "248 E8" -> "249 E8" [label="imWork1_9"];
  "247 E8" [shape=box];
  "247 E8" -> "248 E8" [label="imWork1_10"];
  "246 E8" [shape=box];
  "246 E8" -> "247 E8" [label="imWork1_11"];
  "245 E8" [shape=box];
  "245 E8" -> "246 E8" [label="imWork1_12"];
  "244 E8" [shape=box];
  "244 E8" -> "245 E8" [label="imWork1_13"];
  "243 E8" [shape=box];
  "243 E8" -> "244 E8" [label="imWork1_14"];
  "242 E8" [shape=box];
  "242 E8" -> "243 E8" [label="imWork1_15"];
  "241 E8" [shape=box];
  "241 E8" -> "242 E8" [label="imWork1_16"];
  "240 E8" [shape=box];
  "240 E8" -> "241 E8" [label="imWork1_17"];
  "239 E8" [shape=box];
  "239 E8" -> "240 E8" [label="imWork1_18"];
  "238 E8" [shape=box];
  "238 E8" -> "239 E8" [label="imWork1_19"];
  "237 E8" [shape=box];
  "237 E8" -> "238 E8" [label="imWork1_20"];
  "236 E8" [shape=box];
  "236 E8" -> "237 E8" [label="imWork1_21"];
  "235 E8" [shape=box];
  "235 E8" -> "236 E8" [label="imWork1_22"];
  "234 E8" [shape=box];
  "234 E8" -> "235 E8" [label="imWork1_23"];
  "233 E8" [shape=box];
  "233 E8" -> "234 E8" [label="imWork1_24"];
  "232 E8" [shape=box];
  "232 E8" -> "233 E8" [label="imWork1_25"];
  "231 E8" [shape=box];
  "231 E8" -> "232 E8" [label="imWork1_26"];
  "230 E8" [shape=box];
  "230 E8" -> "231 E8" [label="imWork1_27"];
  "229 E8" [shape=box];
  "229 E8" -> "230 E8" [label="imWork1_28"];
  "228 E8" [shape=box];
  "228 E8" -> "229 E8" [label="imWork1_29"];
  "227 E8" [shape=box];
  "227 E8" -> "228 E8" [label="imWork1_30"];
  "226 E8" [shape=box];
  "226 E8" -> "227 E8" [label="imWork1_31"];
  "225 E8" [shape=box];
  "225 E8" -> "226 E8" [label="imWork1_32"];
  "224 E8" [shape=box];
  "224 E8" -> "225 E8" [label="imWork1_33"];
  "223 E8" [shape=box];
  "223 E8" -> "224 E8" [label="imWork1_34"];
  "222 E8" [shape=box];
  "222 E8" -> "223 E8" [label="imWork1_35"];
  "221 E8" [shape=box];
  "221 E8" -> "222 E8" [label="imWork1_36"];
  "220 E8" [shape=box];
  "220 E8" -> "221 E8" [label="imWork1_37"];
  "219 E8" [shape=box];
  "219 E8" -> "220 E8" [label="imWork1_38"];
  "218 E8" [shape=box];
  "218 E8" -> "219 E8" [label="imWork1_39"];
  "217 E8" [shape=box];
  "217 E8" -> "218 E8" [label="imWork1_40"];
  "216 E8" [shape=box];
  "216 E8" -> "217 E8" [label="imWork1_41"];
  "215 E8" [shape=box];
  "215 E8" -> "216 E8" [label="imWork1_42"];
  "214 E8" [shape=box];
  "214 E8" -> "215 E8" [label="imWork1_43"];
  "213 E8" [shape=box];
  "213 E8" -> "214 E8" [label="imWork1_44"];
  "212 E8" [shape=box];
  "212 E8" -> "213 E8" [label="imWork1_45"];
  "211 E8" [shape=box];
  "211 E8" -> "212 E8" [label="imWork1_46"];
  "210 E8" [shape=box];
  "210 E8" -> "211 E8" [label="imWork1_47"];
  "209 E8" [shape=box];
  "209 E8" -> "210 E8" [label="imWork1_48"];
  "208 E8" [shape=box];
  "208 E8" -> "209 E8" [label="imWork1_49"];
  "207 E8" [shape=box];
  "207 E8" -> "208 E8" [label="imWork1_50"];
  "206 E8" [shape=box];
  "206 E8" -> "207 E8" [label="imWork1_51"];
  "205 E8" [shape=box];
  "205 E8" -> "206 E8" [label="imWork1_52"];
  "204 E8" [shape=box];
  "204 E8" -> "205 E8" [label="imWork1_53"];
  "203 E8" [shape=box];
  "203 E8" -> "204 E8" [label="imWork1_54"];
  "202 E8" [shape=box];
  "202 E8" -> "203 E8" [label="imWork1_55"];
  "201 E8" [shape=box];
  "201 E8" -> "202 E8" [label="imWork1_56"];
  "200 E8" [shape=box];
  "200 E8" -> "201 E8" [label="imWork1_57"];
  "199 E8" [shape=box];
  "199 E8" -> "200 E8" [label="imWork1_58"];
  "198 E8" [shape=box];
  "198 E8" -> "199 E8" [label="imWork1_59"];
  "197 E8" [shape=box];
  "197 E8" -> "198 E8" [label="imWork1_60"];
  "196 E8" [shape=box];
  "196 E8" -> "197 E8" [label="imWork1_61"];
  "195 E8" [shape=box];
  "195 E8" -> "196 E8" [label="imWork1_62"];
  "194 E8" [shape=box];
  "194 E8" -> "195 E8" [label="imWork1_63"];
  "193 E8" [shape=box];
  "193 E8" -> "194 E8" [label="imWork1_64"];
  "192 E8" [shape=box];
  "192 E8" -> "193 E8" [label="imWork1_65"];
  "191 E8" [shape=box];
  "191 E8" -> "192 E8" [label="imWork1_66"];
  "190 E8" [shape=box];
  "190 E8" -> "191 E8" [label="imWork1_67"];
  "189 E8" [shape=box];
  "189 E8" -> "190 E8" [label="imWork1_68"];
  "188 E8" [shape=box];
  "188 E8" -> "189 E8" [label="imWork1_69"];
  "187 E8" [shape=box];
  "187 E8" -> "188 E8" [label="imWork1_70"];
  "186 E8" [shape=box];
  "186 E8" -> "187 E8" [label="imWork1_71"];
  "185 E8" [shape=box];
  "185 E8" -> "186 E8" [label="imWork1_72"];
  "184 E8" [shape=box];
  "184 E8" -> "185 E8" [label="imWork1_73"];
  "183 E8" [shape=box];
  "183 E8" -> "184 E8" [label="imWork1_74"];
  "182 E8" [shape=box];
  "182 E8" -> "183 E8" [label="imWork1_75"];
  "181 E8" [shape=box];
  "181 E8" -> "182 E8" [label="imWork1_76"];
  "180 E8" [shape=box];
  "180 E8" -> "181 E8" [label="imWork1_77"];
  "179 E8" [shape=box];
  "179 E8" -> "180 E8" [label="imWork1_78"];
  "178 E8" [shape=box];
  "178 E8" -> "179 E8" [label="imWork1_79"];
  "177 E8" [shape=box];
  "177 E8" -> "178 E8" [label="imWork1_80"];
  "176 E8" [shape=box];
  "176 E8" -> "177 E8" [label="imWork1_81"];
  "175 E8" [shape=box];
  "175 E8" -> "176 E8" [label="imWork1_82"];
  "174 E8" [shape=box];
  "174 E8" -> "175 E8" [label="imWork1_83"];
  "173 E8" [shape=box];
  "173 E8" -> "174 E8" [label="imWork1_84"];
  "172 E8" [shape=box];
  "172 E8" -> "173 E8" [label="imWork1_85"];
  "171 E8" [shape=box];
  "171 E8" -> "172 E8" [label="imWork1_86"];
  "170 E8" [shape=box];
  "170 E8" -> "171 E8" [label="imWork1_87"];
  "169 E8" [shape=box];
  "169 E8" -> "170 E8" [label="imWork1_88"];
  "168 E8" [shape=box];
  "168 E8" -> "169 E8" [label="imWork1_89"];
  "167 E8" [shape=box];
  "167 E8" -> "168 E8" [label="imWork1_90"];
  "166 E8" [shape=box];
  "166 E8" -> "167 E8" [label="imWork1_91"];
  "165 E8" [shape=box];
  "165 E8" -> "166 E8" [label="imWork1_92"];
  "164 E8" [shape=box];
  "164 E8" -> "165 E8" [label="imWork1_93"];
  "163 E8" [shape=box];
  "163 E8" -> "164 E8" [label="imWork1_94"];
  "162 E8" [shape=box];
  "162 E8" -> "163 E8" [label="imWork1_95"];
  "161 E8" [shape=box];
  "161 E8" -> "162 E8" [label="imWork1_96"];
  "160 E8" [shape=box];
  "160 E8" -> "161 E8" [label="imWork1_97"];
  "159 E8" [shape=box];
  "159 E8" -> "160 E8" [label="imWork1_98"];
  "158 E8" [shape=box];
  "158 E8" -> "159 E8" [label="imWork1_99"];
  "157 E8" [shape=box];
  "157 E8" -> "158 E8" [label="imWork1_100"];
  "156 E8" [shape=box];
  "156 E8" -> "157 E8" [label="imWork1_101"];
  "155 E8" [shape=box];
  "155 E8" -> "156 E8" [label="imWork1_102"];
  "153 D8" [shape=box];
  "153 D8" -> "155 E8" [label="imWork1_103"];
  "152 D8" [shape=box];
  "152 D8" -> "153 D8" [label="imWork1_104"];
  "151 D8" [shape=box];
  "151 D8" -> "152 D8" [label="imWork1_105"];
  "150 D8" [shape=box];
  "150 D8" -> "151 D8" [label="imWork1_106"];
  "149 D8" [shape=box];
  "149 D8" -> "150 D8" [label="imWork1_107"];
  "148 D8" [shape=box];
  "148 D8" -> "149 D8" [label="imWork1_108"];
  "147 D8" [shape=box];
  "147 D8" -> "148 D8" [label="imWork1_109"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="imWork1_110"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="imWork1_111"];
  "144 D8" [shape=box];
  "144 D8" -> "145 D8" [label="imWork1_112"];
  "143 D8" [shape=box];
  "143 D8" -> "144 D8" [label="imWork1_113"];
  "142 D8" [shape=box];
  "142 D8" -> "143 D8" [label="imWork1_114"];
  "141 D8" [shape=box];
  "141 D8" -> "142 D8" [label="imWork1_115"];
  "140 D8" [shape=box];
  "140 D8" -> "141 D8" [label="imWork1_116"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imWork1_117"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imWork1_118"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imWork1_119"];
  "136 D8" [shape=box];
  "136 D8" -> "137 D8" [label="imWork1_120"];
  "135 D8" [shape=box];
  "135 D8" -> "136 D8" [label="imWork1_121"];
  "134 D8" [shape=box];
  "134 D8" -> "135 D8" [label="imWork1_122"];
  "133 D8" [shape=box];
  "133 D8" -> "134 D8" [label="imWork1_123"];
  "132 D8" [shape=box];
  "132 D8" -> "133 D8" [label="imWork1_124"];
  "131 D8" [shape=box];
  "131 D8" -> "132 D8" [label="imWork1_125"];
  "130 D8" [shape=box];
  "130 D8" -> "131 D8" [label="imWork1_126"];
  "129 D8" [shape=box];
  "129 D8" -> "130 D8" [label="imWork1_127"];
  "128 D8" [shape=box];
  "128 D8" -> "129 D8" [label="imWork1_128"];
  "127 D8" [shape=box];
  "127 D8" -> "128 D8" [label="imWork1_129"];
  "126 D8" [shape=box];
  "126 D8" -> "127 D8" [label="imWork1_130"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imWork1_131"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imWork1_132"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imWork1_133"];
  "122 D8" [shape=box];
  "122 D8" -> "123 D8" [label="imWork1_134"];
  "121 D8" [shape=box];
  "121 D8" -> "122 D8" [label="imWork1_135"];
  "120 D8" [shape=box];
  "120 D8" -> "121 D8" [label="imWork1_136"];
  "119 D8" [shape=box];
  "119 D8" -> "120 D8" [label="imWork1_137"];
  "118 D8" [shape=box];
  "118 D8" -> "119 D8" [label="imWork1_138"];
  "117 D8" [shape=box];
  "117 D8" -> "118 D8" [label="imWork1_139"];
  "116 D8" [shape=box];
  "116 D8" -> "117 D8" [label="imWork1_140"];
  "115 D8" [shape=box];
  "115 D8" -> "116 D8" [label="imWork1_141"];
  "114 D8" [shape=box];
  "114 D8" -> "115 D8" [label="imWork1_142"];
  "113 D8" [shape=box];
  "113 D8" -> "114 D8" [label="imWork1_143"];
  "112 D8" [shape=box];
  "112 D8" -> "113 D8" [label="imWork1_144"];
  "111 D8" [shape=box];
  "111 D8" -> "112 D8" [label="imWork1_145"];
  "110 D8" [shape=box];
  "110 D8" -> "111 D8" [label="imWork1_146"];
  "109 D8" [shape=box];
  "109 D8" -> "110 D8" [label="imWork1_147"];
  "108 D8" [shape=box];
  "108 D8" -> "109 D8" [label="imWork1_148"];
  "107 D8" [shape=box];
  "107 D8" -> "108 D8" [label="imWork1_149"];
  "106 D8" [shape=box];
  "106 D8" -> "107 D8" [label="imWork1_150"];
  "105 D8" [shape=box];
  "105 D8" -> "106 D8" [label="imWork1_151"];
  "104 D8" [shape=box];
  "104 D8" -> "105 D8" [label="imWork1_152"];
  "103 D8" [shape=box];
  "103 D8" -> "104 D8" [label="imWork1_153"];
  "102 D8" [shape=box];
  "102 D8" -> "103 D8" [label="imWork1_154"];
  "101 D8" [shape=box];
  "101 D8" -> "102 D8" [label="imWork1_155"];
  "100 D8" [shape=box];
  "100 D8" -> "101 D8" [label="imWork1_156"];
  "99 D8" [shape=box];
  "99 D8" -> "100 D8" [label="imWork1_157"];
  "98 D8" [shape=box];
  "98 D8" -> "99 D8" [label="imWork1_158"];
  "97 D8" [shape=box];
  "97 D8" -> "98 D8" [label="imWork1_159"];
  "96 D8" [shape=box];
  "96 D8" -> "97 D8" [label="imWork1_160"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imWork1_161"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imWork1_162"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imWork1_163"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imWork1_164"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imWork1_165"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imWork1_166"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imWork1_167"];
  "88 D8" [shape=box];
  "88 D8" -> "89 D8" [label="imWork1_168"];
  "87 D8" [shape=box];
  "87 D8" -> "88 D8" [label="imWork1_169"];
  "86 D8" [shape=box];
  "86 D8" -> "87 D8" [label="imWork1_170"];
  "85 D8" [shape=box];
  "85 D8" -> "86 D8" [label="imWork1_171"];
  "84 D8" [shape=box];
  "84 D8" -> "85 D8" [label="imWork1_172"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imWork1_173"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imWork1_174"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imWork1_175"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imWork1_176"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imWork1_177"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imWork1_178"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imWork1_179"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imWork1_180"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imWork1_181"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imWork1_182"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imWork1_183"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imWork1_184"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imWork1_185"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imWork1_186"];
  "69 D8" [shape=box];
  "69 D8" -> "70 D8" [label="imWork1_187"];
  "68 D8" [shape=box];
  "68 D8" -> "69 D8" [label="imWork1_188"];
  "67 D8" [shape=box];
  "67 D8" -> "68 D8" [label="imWork1_189"];
  "66 D8" [shape=box];
  "66 D8" -> "67 D8" [label="imWork1_190"];
  "65 D8" [shape=box];
  "65 D8" -> "66 D8" [label="imWork1_191"];
  "64 D8" [shape=box];
  "64 D8" -> "65 D8" [label="imWork1_192"];
  "63 D8" [shape=box];
  "63 D8" -> "64 D8" [label="imWork1_193"];
  "62 D8" [shape=box];
  "62 D8" -> "63 D8" [label="imWork1_194"];
  "61 D8" [shape=box];
  "61 D8" -> "62 D8" [label="imWork1_195"];
  "60 D8" [shape=box];
  "60 D8" -> "61 D8" [label="imWork1_196"];
  "59 D8" [shape=box];
  "59 D8" -> "60 D8" [label="imWork1_197"];
  "58 D8" [shape=box];
  "58 D8" -> "59 D8" [label="imWork1_198"];
  "57 D8" [shape=box];
  "57 D8" -> "58 D8" [label="imWork1_199"];
  "56 D8" [shape=box];
  "56 D8" -> "57 D8" [label="imWork1_200"];
  "55 D8" [shape=box];
  "55 D8" -> "56 D8" [label="imWork1_201"];
  "54 D8" [shape=box];
  "54 D8" -> "55 D8" [label="imWork1_202"];
  "in" -> "258 D8";
  "in" -> "54 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "imWork1" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "479 vol" [shape=diamond];
  "478 >" [shape=trapezium,orientation=270];
  "478 >" -> "479 vol" [label="out"];
  "478 >" -> "out'";
  "imWork1" -> "478 >";
  "477 E8" [shape=box];
  "477 E8" -> "478 >" [label="out_202"];
  "out" -> "477 E8";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=4 #o=1 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imZone1" [shape=circle];
  "imZone2" [shape=circle];
  "imZone3" [shape=circle];
  "out" [shape=circle];

  // outputs
  "out'" [shape=circle];

  // computation vertices
  "491 >" [shape=trapezium,orientation=270];
  "491 >" -> "out'";
  "490 >" [shape=trapezium,orientation=270];
  "490 >" -> "491 >" [label="imWork1"];
  "489 >" [shape=trapezium,orientation=270];
  "489 >" -> "490 >" [label="imWork1_203"];
  "487 <_" [shape=trapezium,orientation=270];
  "487 <_" -> "491 >" [label="out_203"];
  "out" -> "487 <_";
  "486 <_" [shape=trapezium,orientation=270];
  "486 <_" -> "490 >" [label="imZone3"];
  "imZone3" -> "486 <_";
  "485 <_" [shape=trapezium,orientation=270];
  "485 <_" -> "489 >" [label="imZone2"];
  "imZone2" -> "485 <_";
  "484 <_" [shape=trapezium,orientation=270];
  "484 <_" -> "489 >" [label="imZone1"];
  "imZone1" -> "484 <_";
}

! updated function for OPENCL

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0018*/
   freia_data2d *imin, *in, *imZone1, *imZone2, *imZone3, *imWork1, *out;              /*0019*/

   static const int32_t freia_morpho_k8_center_east[9] = {0, 0, 0, 0, 1, 1, 0, 0, 0};  /*0021*/
   static const int32_t freia_morpho_k8_center_north[9] = {0, 1, 0, 0, 1, 0, 0, 0, 0};                /*0022*/
   int32_t neighborTransposed_0[9];                                     /*0023*/
   int32_t neighborTransposed_1[9];                                     /*0024*/
   register int32_t volprevious;                                        /*0025*/
   int32_t volcurrent;                                                  /*0026*/
   
   // there should be a freia_initialize()? yup we should have one for opencl
   // 1st arg: 1=GPU, 2=CPU, 2nd arg sub-device
   freia_initialize(argc, argv);                                        /*0030*/
   freia_common_open_input(&fdin, 0);                                   /*0031*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0032*/

   imin = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0034*/
   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0035*/
   imZone1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0038*/
   imZone2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0039*/
   imZone3 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0040*/

   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0042*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0043*/
   
   // input
   freia_common_rx_image(imin, &fdin);                                  /*0046*/
   freia_aipo_copy(in, imin);

   freia_common_draw_rect(in, in->xStartWa, in->yStartWa, in->xStartWa+in->widthWa-1, in->yStartWa+in->heightWa-1, 255);            /*0049*/
   
   // Closing
   transposeNeighbor(neighborTransposed_0, freia_morpho_k8_center_east);               /*0052*/

   transposeNeighbor(neighborTransposed_1, freia_morpho_k8_center_north);              /*0256*/
   
   
   
   
   
   
   
   
   
   freia_mppa_launch(0, 2, 5, 0, 1, imin, in, imZone1, imZone2, imZone3, imWork1, out, &volcurrent);  /*0474*/
   do {                                                                 /*0481*/
      volprevious = volcurrent;                                         /*0476*/
      freia_mppa_launch(1, 2, 1, 0, 1, imWork1, out, out, &volcurrent);                /*0479*/
   }
   while (volcurrent!=volprevious);                                     /*0481*/
   
   // Change  pixel values for the display
   
   freia_mppa_launch(2, 4, 1, 0, 0, imZone1, imZone2, imZone3, out, out);              /*0491*/
   
   // output
   freia_common_tx_image(imin, &fdout);                                 /*0494*/
   freia_common_tx_image(out, &fdout);                                  /*0495*/
   
   // cleanup
   freia_common_destruct_data(imin);                                    /*0498*/
   freia_common_destruct_data(in);                                      /*0499*/
   freia_common_destruct_data(imZone1);                                 /*0502*/
   freia_common_destruct_data(imZone2);                                 /*0503*/
   freia_common_destruct_data(imZone3);                                 /*0504*/
   freia_common_destruct_data(imWork1);                                 /*0505*/
   freia_common_destruct_data(out);                                     /*0506*/

   freia_common_close_input(&fdin);                                     /*0508*/
   freia_common_close_output(&fdout);                                   /*0509*/

   freia_shutdown();                                                    /*0511*/
   return 0;                                                            /*0512*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_1 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_1_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 3, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_INF(pi1, pi0);
  int16_t po1 = PIXEL_SUB(po0, pi2);
  int16_t po2 = PIXEL_THR(po1, 105, 255, 1);
  int16_t po3 = PIXEL_THR(po1, 60, 105, 1);
  outp[0][i] = po3;
  outp[1][i] = po2;
  outp[2][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_0_1, int16_t, 3, 2, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_THR(pi0, 100, 150, 1);
  int16_t po1 = PIXEL_SUP(pi2, pi1);
  int16_t po2 = PIXEL_SUP(po1, po0);
  int16_t po3 = PIXEL_NOT(po2);
  outp[0][i] = po3;
  outp[1][i] = po0;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi10_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi10_0, int16_t)


#define pi11_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\

CUSTOM_MORPHO_AGENT(pi11_0, int16_t)


#define pi12_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi12_0, int16_t)


#define pi13_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi13_0, int16_t)

subgraph
main_sigmac_helper_1_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 5, width, height);
    agent strout = new Streamer_Out(width, height, 5);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi1 = 100;
    int16_t pi2 = 150;
    int16_t pi3 = 1;
    int16_t pi4 = 60;
    int16_t pi5 = 105;
    int16_t pi6 = 1;
    int16_t pi7 = 105;
    int16_t pi8 = 255;
    int16_t pi9 = 1;
    int16_t pi10[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi11[9] = { 0, 1, 0, 0, 1, 0, 0, 0, 0 };
    int16_t pi12[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi13[9] = { 0, 0, 0, 0, 1, 1, 0, 0, 0 };

    // instantiations...
    agent dup4 = new rep(2, width);
    agent dil201 = new dilate_pi13_0(width, height);
    agent dil200 = new dilate_pi13_0(width, height);
    agent dil199 = new dilate_pi13_0(width, height);
    agent dil198 = new dilate_pi13_0(width, height);
    agent dil197 = new dilate_pi13_0(width, height);
    agent dil196 = new dilate_pi13_0(width, height);
    agent dil195 = new dilate_pi13_0(width, height);
    agent dil194 = new dilate_pi13_0(width, height);
    agent dil193 = new dilate_pi13_0(width, height);
    agent dil192 = new dilate_pi13_0(width, height);
    agent dil191 = new dilate_pi13_0(width, height);
    agent dil190 = new dilate_pi13_0(width, height);
    agent dil189 = new dilate_pi13_0(width, height);
    agent dil188 = new dilate_pi13_0(width, height);
    agent dil187 = new dilate_pi13_0(width, height);
    agent dil186 = new dilate_pi13_0(width, height);
    agent dil185 = new dilate_pi13_0(width, height);
    agent dil184 = new dilate_pi13_0(width, height);
    agent dil183 = new dilate_pi13_0(width, height);
    agent dil182 = new dilate_pi13_0(width, height);
    agent dil181 = new dilate_pi13_0(width, height);
    agent dil180 = new dilate_pi13_0(width, height);
    agent dil179 = new dilate_pi13_0(width, height);
    agent dil178 = new dilate_pi13_0(width, height);
    agent dil177 = new dilate_pi13_0(width, height);
    agent dil176 = new dilate_pi13_0(width, height);
    agent dil175 = new dilate_pi13_0(width, height);
    agent dil174 = new dilate_pi13_0(width, height);
    agent dil173 = new dilate_pi13_0(width, height);
    agent dil172 = new dilate_pi13_0(width, height);
    agent dil171 = new dilate_pi13_0(width, height);
    agent dil170 = new dilate_pi13_0(width, height);
    agent dil169 = new dilate_pi13_0(width, height);
    agent dil168 = new dilate_pi13_0(width, height);
    agent dil167 = new dilate_pi13_0(width, height);
    agent dil166 = new dilate_pi13_0(width, height);
    agent dil165 = new dilate_pi13_0(width, height);
    agent dil164 = new dilate_pi13_0(width, height);
    agent dil163 = new dilate_pi13_0(width, height);
    agent dil162 = new dilate_pi13_0(width, height);
    agent dil161 = new dilate_pi13_0(width, height);
    agent dil160 = new dilate_pi13_0(width, height);
    agent dil159 = new dilate_pi13_0(width, height);
    agent dil158 = new dilate_pi13_0(width, height);
    agent dil157 = new dilate_pi13_0(width, height);
    agent dil156 = new dilate_pi13_0(width, height);
    agent dil155 = new dilate_pi13_0(width, height);
    agent dil154 = new dilate_pi13_0(width, height);
    agent dil153 = new dilate_pi13_0(width, height);
    agent dil152 = new dilate_pi13_0(width, height);
    agent dil151 = new dilate_pi13_0(width, height);
    agent dil150 = new dilate_pi13_0(width, height);
    agent dil149 = new dilate_pi13_0(width, height);
    agent dil148 = new dilate_pi13_0(width, height);
    agent dil147 = new dilate_pi13_0(width, height);
    agent dil146 = new dilate_pi13_0(width, height);
    agent dil145 = new dilate_pi13_0(width, height);
    agent dil144 = new dilate_pi13_0(width, height);
    agent dil143 = new dilate_pi13_0(width, height);
    agent dil142 = new dilate_pi13_0(width, height);
    agent dil141 = new dilate_pi13_0(width, height);
    agent dil140 = new dilate_pi13_0(width, height);
    agent dil139 = new dilate_pi13_0(width, height);
    agent dil138 = new dilate_pi13_0(width, height);
    agent dil137 = new dilate_pi13_0(width, height);
    agent dil136 = new dilate_pi13_0(width, height);
    agent dil135 = new dilate_pi13_0(width, height);
    agent dil134 = new dilate_pi13_0(width, height);
    agent dil133 = new dilate_pi13_0(width, height);
    agent dil132 = new dilate_pi13_0(width, height);
    agent dil131 = new dilate_pi13_0(width, height);
    agent dil130 = new dilate_pi13_0(width, height);
    agent dil129 = new dilate_pi13_0(width, height);
    agent dil128 = new dilate_pi13_0(width, height);
    agent dil127 = new dilate_pi13_0(width, height);
    agent dil126 = new dilate_pi13_0(width, height);
    agent dil125 = new dilate_pi13_0(width, height);
    agent dil124 = new dilate_pi13_0(width, height);
    agent dil123 = new dilate_pi13_0(width, height);
    agent dil122 = new dilate_pi13_0(width, height);
    agent dil121 = new dilate_pi13_0(width, height);
    agent dil120 = new dilate_pi13_0(width, height);
    agent dil119 = new dilate_pi13_0(width, height);
    agent dil118 = new dilate_pi13_0(width, height);
    agent dil117 = new dilate_pi13_0(width, height);
    agent dil116 = new dilate_pi13_0(width, height);
    agent dil115 = new dilate_pi13_0(width, height);
    agent dil114 = new dilate_pi13_0(width, height);
    agent dil113 = new dilate_pi13_0(width, height);
    agent dil112 = new dilate_pi13_0(width, height);
    agent dil111 = new dilate_pi13_0(width, height);
    agent dil110 = new dilate_pi13_0(width, height);
    agent dil109 = new dilate_pi13_0(width, height);
    agent dil108 = new dilate_pi13_0(width, height);
    agent dil107 = new dilate_pi13_0(width, height);
    agent dil106 = new dilate_pi13_0(width, height);
    agent dil105 = new dilate_pi13_0(width, height);
    agent dil104 = new dilate_pi13_0(width, height);
    agent dil103 = new dilate_pi13_0(width, height);
    agent dil102 = new dilate_pi13_0(width, height);
    agent ero199 = new erode_pi12_0(width, height);
    agent ero198 = new erode_pi12_0(width, height);
    agent ero197 = new erode_pi12_0(width, height);
    agent ero196 = new erode_pi12_0(width, height);
    agent ero195 = new erode_pi12_0(width, height);
    agent ero194 = new erode_pi12_0(width, height);
    agent ero193 = new erode_pi12_0(width, height);
    agent ero192 = new erode_pi12_0(width, height);
    agent ero191 = new erode_pi12_0(width, height);
    agent ero190 = new erode_pi12_0(width, height);
    agent ero189 = new erode_pi12_0(width, height);
    agent ero188 = new erode_pi12_0(width, height);
    agent ero187 = new erode_pi12_0(width, height);
    agent ero186 = new erode_pi12_0(width, height);
    agent ero185 = new erode_pi12_0(width, height);
    agent ero184 = new erode_pi12_0(width, height);
    agent ero183 = new erode_pi12_0(width, height);
    agent ero182 = new erode_pi12_0(width, height);
    agent ero181 = new erode_pi12_0(width, height);
    agent ero180 = new erode_pi12_0(width, height);
    agent ero179 = new erode_pi12_0(width, height);
    agent ero178 = new erode_pi12_0(width, height);
    agent ero177 = new erode_pi12_0(width, height);
    agent ero176 = new erode_pi12_0(width, height);
    agent ero175 = new erode_pi12_0(width, height);
    agent ero174 = new erode_pi12_0(width, height);
    agent ero173 = new erode_pi12_0(width, height);
    agent ero172 = new erode_pi12_0(width, height);
    agent ero171 = new erode_pi12_0(width, height);
    agent ero170 = new erode_pi12_0(width, height);
    agent ero169 = new erode_pi12_0(width, height);
    agent ero168 = new erode_pi12_0(width, height);
    agent ero167 = new erode_pi12_0(width, height);
    agent ero166 = new erode_pi12_0(width, height);
    agent ero165 = new erode_pi12_0(width, height);
    agent ero164 = new erode_pi12_0(width, height);
    agent ero163 = new erode_pi12_0(width, height);
    agent ero162 = new erode_pi12_0(width, height);
    agent ero161 = new erode_pi12_0(width, height);
    agent ero160 = new erode_pi12_0(width, height);
    agent ero159 = new erode_pi12_0(width, height);
    agent ero158 = new erode_pi12_0(width, height);
    agent ero157 = new erode_pi12_0(width, height);
    agent ero156 = new erode_pi12_0(width, height);
    agent ero155 = new erode_pi12_0(width, height);
    agent ero154 = new erode_pi12_0(width, height);
    agent ero153 = new erode_pi12_0(width, height);
    agent ero152 = new erode_pi12_0(width, height);
    agent ero151 = new erode_pi12_0(width, height);
    agent ero150 = new erode_pi12_0(width, height);
    agent ero149 = new erode_pi12_0(width, height);
    agent ero148 = new erode_pi12_0(width, height);
    agent ero147 = new erode_pi12_0(width, height);
    agent ero146 = new erode_pi12_0(width, height);
    agent ero145 = new erode_pi12_0(width, height);
    agent ero144 = new erode_pi12_0(width, height);
    agent ero143 = new erode_pi12_0(width, height);
    agent ero142 = new erode_pi12_0(width, height);
    agent ero141 = new erode_pi12_0(width, height);
    agent ero140 = new erode_pi12_0(width, height);
    agent ero139 = new erode_pi12_0(width, height);
    agent ero138 = new erode_pi12_0(width, height);
    agent ero137 = new erode_pi12_0(width, height);
    agent ero136 = new erode_pi12_0(width, height);
    agent ero135 = new erode_pi12_0(width, height);
    agent ero134 = new erode_pi12_0(width, height);
    agent ero133 = new erode_pi12_0(width, height);
    agent ero132 = new erode_pi12_0(width, height);
    agent ero131 = new erode_pi12_0(width, height);
    agent ero130 = new erode_pi12_0(width, height);
    agent ero129 = new erode_pi12_0(width, height);
    agent ero128 = new erode_pi12_0(width, height);
    agent ero127 = new erode_pi12_0(width, height);
    agent ero126 = new erode_pi12_0(width, height);
    agent ero125 = new erode_pi12_0(width, height);
    agent ero124 = new erode_pi12_0(width, height);
    agent ero123 = new erode_pi12_0(width, height);
    agent ero122 = new erode_pi12_0(width, height);
    agent ero121 = new erode_pi12_0(width, height);
    agent ero120 = new erode_pi12_0(width, height);
    agent ero119 = new erode_pi12_0(width, height);
    agent ero118 = new erode_pi12_0(width, height);
    agent ero117 = new erode_pi12_0(width, height);
    agent ero116 = new erode_pi12_0(width, height);
    agent ero115 = new erode_pi12_0(width, height);
    agent ero114 = new erode_pi12_0(width, height);
    agent ero113 = new erode_pi12_0(width, height);
    agent ero112 = new erode_pi12_0(width, height);
    agent ero111 = new erode_pi12_0(width, height);
    agent ero110 = new erode_pi12_0(width, height);
    agent ero109 = new erode_pi12_0(width, height);
    agent ero108 = new erode_pi12_0(width, height);
    agent ero107 = new erode_pi12_0(width, height);
    agent ero106 = new erode_pi12_0(width, height);
    agent ero105 = new erode_pi12_0(width, height);
    agent ero104 = new erode_pi12_0(width, height);
    agent ero103 = new erode_pi12_0(width, height);
    agent ero102 = new erode_pi12_0(width, height);
    agent ero101 = new erode_pi12_0(width, height);
    agent ero100 = new erode_pi12_0(width, height);
    agent dil101 = new dilate_pi11_0(width, height);
    agent dil100 = new dilate_pi11_0(width, height);
    agent dil99 = new dilate_pi11_0(width, height);
    agent dil98 = new dilate_pi11_0(width, height);
    agent dil97 = new dilate_pi11_0(width, height);
    agent dil96 = new dilate_pi11_0(width, height);
    agent dil95 = new dilate_pi11_0(width, height);
    agent dil94 = new dilate_pi11_0(width, height);
    agent dil93 = new dilate_pi11_0(width, height);
    agent dil92 = new dilate_pi11_0(width, height);
    agent dil91 = new dilate_pi11_0(width, height);
    agent dil90 = new dilate_pi11_0(width, height);
    agent dil89 = new dilate_pi11_0(width, height);
    agent dil88 = new dilate_pi11_0(width, height);
    agent dil87 = new dilate_pi11_0(width, height);
    agent dil86 = new dilate_pi11_0(width, height);
    agent dil85 = new dilate_pi11_0(width, height);
    agent dil84 = new dilate_pi11_0(width, height);
    agent dil83 = new dilate_pi11_0(width, height);
    agent dil82 = new dilate_pi11_0(width, height);
    agent dil81 = new dilate_pi11_0(width, height);
    agent dil80 = new dilate_pi11_0(width, height);
    agent dil79 = new dilate_pi11_0(width, height);
    agent dil78 = new dilate_pi11_0(width, height);
    agent dil77 = new dilate_pi11_0(width, height);
    agent dil76 = new dilate_pi11_0(width, height);
    agent dil75 = new dilate_pi11_0(width, height);
    agent dil74 = new dilate_pi11_0(width, height);
    agent dil73 = new dilate_pi11_0(width, height);
    agent dil72 = new dilate_pi11_0(width, height);
    agent dil71 = new dilate_pi11_0(width, height);
    agent dil70 = new dilate_pi11_0(width, height);
    agent dil69 = new dilate_pi11_0(width, height);
    agent dil68 = new dilate_pi11_0(width, height);
    agent dil67 = new dilate_pi11_0(width, height);
    agent dil66 = new dilate_pi11_0(width, height);
    agent dil65 = new dilate_pi11_0(width, height);
    agent dil64 = new dilate_pi11_0(width, height);
    agent dil63 = new dilate_pi11_0(width, height);
    agent dil62 = new dilate_pi11_0(width, height);
    agent dil61 = new dilate_pi11_0(width, height);
    agent dil60 = new dilate_pi11_0(width, height);
    agent dil59 = new dilate_pi11_0(width, height);
    agent dil58 = new dilate_pi11_0(width, height);
    agent dil57 = new dilate_pi11_0(width, height);
    agent dil56 = new dilate_pi11_0(width, height);
    agent dil55 = new dilate_pi11_0(width, height);
    agent dil54 = new dilate_pi11_0(width, height);
    agent dil53 = new dilate_pi11_0(width, height);
    agent dil52 = new dilate_pi11_0(width, height);
    agent dil51 = new dilate_pi11_0(width, height);
    agent dil50 = new dilate_pi11_0(width, height);
    agent dil49 = new dilate_pi11_0(width, height);
    agent dil48 = new dilate_pi11_0(width, height);
    agent dil47 = new dilate_pi11_0(width, height);
    agent dil46 = new dilate_pi11_0(width, height);
    agent dil45 = new dilate_pi11_0(width, height);
    agent dil44 = new dilate_pi11_0(width, height);
    agent dil43 = new dilate_pi11_0(width, height);
    agent dil42 = new dilate_pi11_0(width, height);
    agent dil41 = new dilate_pi11_0(width, height);
    agent dil40 = new dilate_pi11_0(width, height);
    agent dil39 = new dilate_pi11_0(width, height);
    agent dil38 = new dilate_pi11_0(width, height);
    agent dil37 = new dilate_pi11_0(width, height);
    agent dil36 = new dilate_pi11_0(width, height);
    agent dil35 = new dilate_pi11_0(width, height);
    agent dil34 = new dilate_pi11_0(width, height);
    agent dil33 = new dilate_pi11_0(width, height);
    agent dil32 = new dilate_pi11_0(width, height);
    agent dil31 = new dilate_pi11_0(width, height);
    agent dil30 = new dilate_pi11_0(width, height);
    agent dil29 = new dilate_pi11_0(width, height);
    agent dil28 = new dilate_pi11_0(width, height);
    agent dil27 = new dilate_pi11_0(width, height);
    agent dil26 = new dilate_pi11_0(width, height);
    agent dil25 = new dilate_pi11_0(width, height);
    agent dil24 = new dilate_pi11_0(width, height);
    agent dil23 = new dilate_pi11_0(width, height);
    agent dil22 = new dilate_pi11_0(width, height);
    agent dil21 = new dilate_pi11_0(width, height);
    agent dil20 = new dilate_pi11_0(width, height);
    agent dil19 = new dilate_pi11_0(width, height);
    agent dil18 = new dilate_pi11_0(width, height);
    agent dil17 = new dilate_pi11_0(width, height);
    agent dil16 = new dilate_pi11_0(width, height);
    agent dil15 = new dilate_pi11_0(width, height);
    agent dil14 = new dilate_pi11_0(width, height);
    agent dil13 = new dilate_pi11_0(width, height);
    agent dil12 = new dilate_pi11_0(width, height);
    agent dil11 = new dilate_pi11_0(width, height);
    agent dil10 = new dilate_pi11_0(width, height);
    agent dil9 = new dilate_pi11_0(width, height);
    agent dil8 = new dilate_pi11_0(width, height);
    agent dil7 = new dilate_pi11_0(width, height);
    agent dil6 = new dilate_pi11_0(width, height);
    agent dil5 = new dilate_pi11_0(width, height);
    agent dil4 = new dilate_pi11_0(width, height);
    agent dil3 = new dilate_pi11_0(width, height);
    agent dil2 = new dilate_pi11_0(width, height);
    agent ero99 = new erode_pi10_0(width, height);
    agent ero98 = new erode_pi10_0(width, height);
    agent ero97 = new erode_pi10_0(width, height);
    agent ero96 = new erode_pi10_0(width, height);
    agent ero95 = new erode_pi10_0(width, height);
    agent ero94 = new erode_pi10_0(width, height);
    agent ero93 = new erode_pi10_0(width, height);
    agent ero92 = new erode_pi10_0(width, height);
    agent ero91 = new erode_pi10_0(width, height);
    agent ero90 = new erode_pi10_0(width, height);
    agent ero89 = new erode_pi10_0(width, height);
    agent ero88 = new erode_pi10_0(width, height);
    agent ero87 = new erode_pi10_0(width, height);
    agent ero86 = new erode_pi10_0(width, height);
    agent ero85 = new erode_pi10_0(width, height);
    agent ero84 = new erode_pi10_0(width, height);
    agent ero83 = new erode_pi10_0(width, height);
    agent ero82 = new erode_pi10_0(width, height);
    agent ero81 = new erode_pi10_0(width, height);
    agent ero80 = new erode_pi10_0(width, height);
    agent ero79 = new erode_pi10_0(width, height);
    agent ero78 = new erode_pi10_0(width, height);
    agent ero77 = new erode_pi10_0(width, height);
    agent ero76 = new erode_pi10_0(width, height);
    agent ero75 = new erode_pi10_0(width, height);
    agent ero74 = new erode_pi10_0(width, height);
    agent ero73 = new erode_pi10_0(width, height);
    agent ero72 = new erode_pi10_0(width, height);
    agent ero71 = new erode_pi10_0(width, height);
    agent ero70 = new erode_pi10_0(width, height);
    agent ero69 = new erode_pi10_0(width, height);
    agent ero68 = new erode_pi10_0(width, height);
    agent ero67 = new erode_pi10_0(width, height);
    agent ero66 = new erode_pi10_0(width, height);
    agent ero65 = new erode_pi10_0(width, height);
    agent ero64 = new erode_pi10_0(width, height);
    agent ero63 = new erode_pi10_0(width, height);
    agent ero62 = new erode_pi10_0(width, height);
    agent ero61 = new erode_pi10_0(width, height);
    agent ero60 = new erode_pi10_0(width, height);
    agent ero59 = new erode_pi10_0(width, height);
    agent ero58 = new erode_pi10_0(width, height);
    agent ero57 = new erode_pi10_0(width, height);
    agent ero56 = new erode_pi10_0(width, height);
    agent ero55 = new erode_pi10_0(width, height);
    agent ero54 = new erode_pi10_0(width, height);
    agent ero53 = new erode_pi10_0(width, height);
    agent ero52 = new erode_pi10_0(width, height);
    agent ero51 = new erode_pi10_0(width, height);
    agent ero50 = new erode_pi10_0(width, height);
    agent ero49 = new erode_pi10_0(width, height);
    agent ero48 = new erode_pi10_0(width, height);
    agent ero47 = new erode_pi10_0(width, height);
    agent ero46 = new erode_pi10_0(width, height);
    agent ero45 = new erode_pi10_0(width, height);
    agent ero44 = new erode_pi10_0(width, height);
    agent ero43 = new erode_pi10_0(width, height);
    agent ero42 = new erode_pi10_0(width, height);
    agent ero41 = new erode_pi10_0(width, height);
    agent ero40 = new erode_pi10_0(width, height);
    agent ero39 = new erode_pi10_0(width, height);
    agent ero38 = new erode_pi10_0(width, height);
    agent ero37 = new erode_pi10_0(width, height);
    agent ero36 = new erode_pi10_0(width, height);
    agent ero35 = new erode_pi10_0(width, height);
    agent ero34 = new erode_pi10_0(width, height);
    agent ero33 = new erode_pi10_0(width, height);
    agent ero32 = new erode_pi10_0(width, height);
    agent ero31 = new erode_pi10_0(width, height);
    agent ero30 = new erode_pi10_0(width, height);
    agent ero29 = new erode_pi10_0(width, height);
    agent ero28 = new erode_pi10_0(width, height);
    agent ero27 = new erode_pi10_0(width, height);
    agent ero26 = new erode_pi10_0(width, height);
    agent ero25 = new erode_pi10_0(width, height);
    agent ero24 = new erode_pi10_0(width, height);
    agent ero23 = new erode_pi10_0(width, height);
    agent ero22 = new erode_pi10_0(width, height);
    agent ero21 = new erode_pi10_0(width, height);
    agent ero20 = new erode_pi10_0(width, height);
    agent ero19 = new erode_pi10_0(width, height);
    agent ero18 = new erode_pi10_0(width, height);
    agent ero17 = new erode_pi10_0(width, height);
    agent ero16 = new erode_pi10_0(width, height);
    agent ero15 = new erode_pi10_0(width, height);
    agent ero14 = new erode_pi10_0(width, height);
    agent ero13 = new erode_pi10_0(width, height);
    agent ero12 = new erode_pi10_0(width, height);
    agent ero11 = new erode_pi10_0(width, height);
    agent ero10 = new erode_pi10_0(width, height);
    agent ero9 = new erode_pi10_0(width, height);
    agent ero8 = new erode_pi10_0(width, height);
    agent ero7 = new erode_pi10_0(width, height);
    agent ero6 = new erode_pi10_0(width, height);
    agent ero5 = new erode_pi10_0(width, height);
    agent ero4 = new erode_pi10_0(width, height);
    agent ero3 = new erode_pi10_0(width, height);
    agent ero2 = new erode_pi10_0(width, height);
    agent ero1 = new erode_pi10_0(width, height);
    agent ero0 = new erode_pi10_0(width, height);
    agent dup3 = new rep(2, width);
    agent dup2 = new rep(2, width);
    agent cpd0 = new agent_compound_0_0(width);
    agent dup1 = new rep(2, width);
    agent cpd1 = new agent_compound_0_1(width);
    agent dil1 = new dilate_pi0_0(width, height);
    agent dup0 = new rep(2, width);
    agent dil0 = new dilate_pi0_0(width, height);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* in */, dup4.input);
    connect (dup4.output[1], dil101.input);
    connect (dup4.output[0], dil201.input);
    connect (dil201.output, dil200.input);
    connect (dil200.output, dil199.input);
    connect (dil199.output, dil198.input);
    connect (dil198.output, dil197.input);
    connect (dil197.output, dil196.input);
    connect (dil196.output, dil195.input);
    connect (dil195.output, dil194.input);
    connect (dil194.output, dil193.input);
    connect (dil193.output, dil192.input);
    connect (dil192.output, dil191.input);
    connect (dil191.output, dil190.input);
    connect (dil190.output, dil189.input);
    connect (dil189.output, dil188.input);
    connect (dil188.output, dil187.input);
    connect (dil187.output, dil186.input);
    connect (dil186.output, dil185.input);
    connect (dil185.output, dil184.input);
    connect (dil184.output, dil183.input);
    connect (dil183.output, dil182.input);
    connect (dil182.output, dil181.input);
    connect (dil181.output, dil180.input);
    connect (dil180.output, dil179.input);
    connect (dil179.output, dil178.input);
    connect (dil178.output, dil177.input);
    connect (dil177.output, dil176.input);
    connect (dil176.output, dil175.input);
    connect (dil175.output, dil174.input);
    connect (dil174.output, dil173.input);
    connect (dil173.output, dil172.input);
    connect (dil172.output, dil171.input);
    connect (dil171.output, dil170.input);
    connect (dil170.output, dil169.input);
    connect (dil169.output, dil168.input);
    connect (dil168.output, dil167.input);
    connect (dil167.output, dil166.input);
    connect (dil166.output, dil165.input);
    connect (dil165.output, dil164.input);
    connect (dil164.output, dil163.input);
    connect (dil163.output, dil162.input);
    connect (dil162.output, dil161.input);
    connect (dil161.output, dil160.input);
    connect (dil160.output, dil159.input);
    connect (dil159.output, dil158.input);
    connect (dil158.output, dil157.input);
    connect (dil157.output, dil156.input);
    connect (dil156.output, dil155.input);
    connect (dil155.output, dil154.input);
    connect (dil154.output, dil153.input);
    connect (dil153.output, dil152.input);
    connect (dil152.output, dil151.input);
    connect (dil151.output, dil150.input);
    connect (dil150.output, dil149.input);
    connect (dil149.output, dil148.input);
    connect (dil148.output, dil147.input);
    connect (dil147.output, dil146.input);
    connect (dil146.output, dil145.input);
    connect (dil145.output, dil144.input);
    connect (dil144.output, dil143.input);
    connect (dil143.output, dil142.input);
    connect (dil142.output, dil141.input);
    connect (dil141.output, dil140.input);
    connect (dil140.output, dil139.input);
    connect (dil139.output, dil138.input);
    connect (dil138.output, dil137.input);
    connect (dil137.output, dil136.input);
    connect (dil136.output, dil135.input);
    connect (dil135.output, dil134.input);
    connect (dil134.output, dil133.input);
    connect (dil133.output, dil132.input);
    connect (dil132.output, dil131.input);
    connect (dil131.output, dil130.input);
    connect (dil130.output, dil129.input);
    connect (dil129.output, dil128.input);
    connect (dil128.output, dil127.input);
    connect (dil127.output, dil126.input);
    connect (dil126.output, dil125.input);
    connect (dil125.output, dil124.input);
    connect (dil124.output, dil123.input);
    connect (dil123.output, dil122.input);
    connect (dil122.output, dil121.input);
    connect (dil121.output, dil120.input);
    connect (dil120.output, dil119.input);
    connect (dil119.output, dil118.input);
    connect (dil118.output, dil117.input);
    connect (dil117.output, dil116.input);
    connect (dil116.output, dil115.input);
    connect (dil115.output, dil114.input);
    connect (dil114.output, dil113.input);
    connect (dil113.output, dil112.input);
    connect (dil112.output, dil111.input);
    connect (dil111.output, dil110.input);
    connect (dil110.output, dil109.input);
    connect (dil109.output, dil108.input);
    connect (dil108.output, dil107.input);
    connect (dil107.output, dil106.input);
    connect (dil106.output, dil105.input);
    connect (dil105.output, dil104.input);
    connect (dil104.output, dil103.input);
    connect (dil103.output, dil102.input);
    connect (dil102.output, ero199.input);
    connect (ero199.output, ero198.input);
    connect (ero198.output, ero197.input);
    connect (ero197.output, ero196.input);
    connect (ero196.output, ero195.input);
    connect (ero195.output, ero194.input);
    connect (ero194.output, ero193.input);
    connect (ero193.output, ero192.input);
    connect (ero192.output, ero191.input);
    connect (ero191.output, ero190.input);
    connect (ero190.output, ero189.input);
    connect (ero189.output, ero188.input);
    connect (ero188.output, ero187.input);
    connect (ero187.output, ero186.input);
    connect (ero186.output, ero185.input);
    connect (ero185.output, ero184.input);
    connect (ero184.output, ero183.input);
    connect (ero183.output, ero182.input);
    connect (ero182.output, ero181.input);
    connect (ero181.output, ero180.input);
    connect (ero180.output, ero179.input);
    connect (ero179.output, ero178.input);
    connect (ero178.output, ero177.input);
    connect (ero177.output, ero176.input);
    connect (ero176.output, ero175.input);
    connect (ero175.output, ero174.input);
    connect (ero174.output, ero173.input);
    connect (ero173.output, ero172.input);
    connect (ero172.output, ero171.input);
    connect (ero171.output, ero170.input);
    connect (ero170.output, ero169.input);
    connect (ero169.output, ero168.input);
    connect (ero168.output, ero167.input);
    connect (ero167.output, ero166.input);
    connect (ero166.output, ero165.input);
    connect (ero165.output, ero164.input);
    connect (ero164.output, ero163.input);
    connect (ero163.output, ero162.input);
    connect (ero162.output, ero161.input);
    connect (ero161.output, ero160.input);
    connect (ero160.output, ero159.input);
    connect (ero159.output, ero158.input);
    connect (ero158.output, ero157.input);
    connect (ero157.output, ero156.input);
    connect (ero156.output, ero155.input);
    connect (ero155.output, ero154.input);
    connect (ero154.output, ero153.input);
    connect (ero153.output, ero152.input);
    connect (ero152.output, ero151.input);
    connect (ero151.output, ero150.input);
    connect (ero150.output, ero149.input);
    connect (ero149.output, ero148.input);
    connect (ero148.output, ero147.input);
    connect (ero147.output, ero146.input);
    connect (ero146.output, ero145.input);
    connect (ero145.output, ero144.input);
    connect (ero144.output, ero143.input);
    connect (ero143.output, ero142.input);
    connect (ero142.output, ero141.input);
    connect (ero141.output, ero140.input);
    connect (ero140.output, ero139.input);
    connect (ero139.output, ero138.input);
    connect (ero138.output, ero137.input);
    connect (ero137.output, ero136.input);
    connect (ero136.output, ero135.input);
    connect (ero135.output, ero134.input);
    connect (ero134.output, ero133.input);
    connect (ero133.output, ero132.input);
    connect (ero132.output, ero131.input);
    connect (ero131.output, ero130.input);
    connect (ero130.output, ero129.input);
    connect (ero129.output, ero128.input);
    connect (ero128.output, ero127.input);
    connect (ero127.output, ero126.input);
    connect (ero126.output, ero125.input);
    connect (ero125.output, ero124.input);
    connect (ero124.output, ero123.input);
    connect (ero123.output, ero122.input);
    connect (ero122.output, ero121.input);
    connect (ero121.output, ero120.input);
    connect (ero120.output, ero119.input);
    connect (ero119.output, ero118.input);
    connect (ero118.output, ero117.input);
    connect (ero117.output, ero116.input);
    connect (ero116.output, ero115.input);
    connect (ero115.output, ero114.input);
    connect (ero114.output, ero113.input);
    connect (ero113.output, ero112.input);
    connect (ero112.output, ero111.input);
    connect (ero111.output, ero110.input);
    connect (ero110.output, ero109.input);
    connect (ero109.output, ero108.input);
    connect (ero108.output, ero107.input);
    connect (ero107.output, ero106.input);
    connect (ero106.output, ero105.input);
    connect (ero105.output, ero104.input);
    connect (ero104.output, ero103.input);
    connect (ero103.output, ero102.input);
    connect (ero102.output, ero101.input);
    connect (ero101.output, ero100.input);
    connect (ero100.output, cpd0.input[1]);
    connect (dil101.output, dil100.input);
    connect (dil100.output, dil99.input);
    connect (dil99.output, dil98.input);
    connect (dil98.output, dil97.input);
    connect (dil97.output, dil96.input);
    connect (dil96.output, dil95.input);
    connect (dil95.output, dil94.input);
    connect (dil94.output, dil93.input);
    connect (dil93.output, dil92.input);
    connect (dil92.output, dil91.input);
    connect (dil91.output, dil90.input);
    connect (dil90.output, dil89.input);
    connect (dil89.output, dil88.input);
    connect (dil88.output, dil87.input);
    connect (dil87.output, dil86.input);
    connect (dil86.output, dil85.input);
    connect (dil85.output, dil84.input);
    connect (dil84.output, dil83.input);
    connect (dil83.output, dil82.input);
    connect (dil82.output, dil81.input);
    connect (dil81.output, dil80.input);
    connect (dil80.output, dil79.input);
    connect (dil79.output, dil78.input);
    connect (dil78.output, dil77.input);
    connect (dil77.output, dil76.input);
    connect (dil76.output, dil75.input);
    connect (dil75.output, dil74.input);
    connect (dil74.output, dil73.input);
    connect (dil73.output, dil72.input);
    connect (dil72.output, dil71.input);
    connect (dil71.output, dil70.input);
    connect (dil70.output, dil69.input);
    connect (dil69.output, dil68.input);
    connect (dil68.output, dil67.input);
    connect (dil67.output, dil66.input);
    connect (dil66.output, dil65.input);
    connect (dil65.output, dil64.input);
    connect (dil64.output, dil63.input);
    connect (dil63.output, dil62.input);
    connect (dil62.output, dil61.input);
    connect (dil61.output, dil60.input);
    connect (dil60.output, dil59.input);
    connect (dil59.output, dil58.input);
    connect (dil58.output, dil57.input);
    connect (dil57.output, dil56.input);
    connect (dil56.output, dil55.input);
    connect (dil55.output, dil54.input);
    connect (dil54.output, dil53.input);
    connect (dil53.output, dil52.input);
    connect (dil52.output, dil51.input);
    connect (dil51.output, dil50.input);
    connect (dil50.output, dil49.input);
    connect (dil49.output, dil48.input);
    connect (dil48.output, dil47.input);
    connect (dil47.output, dil46.input);
    connect (dil46.output, dil45.input);
    connect (dil45.output, dil44.input);
    connect (dil44.output, dil43.input);
    connect (dil43.output, dil42.input);
    connect (dil42.output, dil41.input);
    connect (dil41.output, dil40.input);
    connect (dil40.output, dil39.input);
    connect (dil39.output, dil38.input);
    connect (dil38.output, dil37.input);
    connect (dil37.output, dil36.input);
    connect (dil36.output, dil35.input);
    connect (dil35.output, dil34.input);
    connect (dil34.output, dil33.input);
    connect (dil33.output, dil32.input);
    connect (dil32.output, dil31.input);
    connect (dil31.output, dil30.input);
    connect (dil30.output, dil29.input);
    connect (dil29.output, dil28.input);
    connect (dil28.output, dil27.input);
    connect (dil27.output, dil26.input);
    connect (dil26.output, dil25.input);
    connect (dil25.output, dil24.input);
    connect (dil24.output, dil23.input);
    connect (dil23.output, dil22.input);
    connect (dil22.output, dil21.input);
    connect (dil21.output, dil20.input);
    connect (dil20.output, dil19.input);
    connect (dil19.output, dil18.input);
    connect (dil18.output, dil17.input);
    connect (dil17.output, dil16.input);
    connect (dil16.output, dil15.input);
    connect (dil15.output, dil14.input);
    connect (dil14.output, dil13.input);
    connect (dil13.output, dil12.input);
    connect (dil12.output, dil11.input);
    connect (dil11.output, dil10.input);
    connect (dil10.output, dil9.input);
    connect (dil9.output, dil8.input);
    connect (dil8.output, dil7.input);
    connect (dil7.output, dil6.input);
    connect (dil6.output, dil5.input);
    connect (dil5.output, dil4.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, dil2.input);
    connect (dil2.output, ero99.input);
    connect (ero99.output, ero98.input);
    connect (ero98.output, ero97.input);
    connect (ero97.output, ero96.input);
    connect (ero96.output, ero95.input);
    connect (ero95.output, ero94.input);
    connect (ero94.output, ero93.input);
    connect (ero93.output, ero92.input);
    connect (ero92.output, ero91.input);
    connect (ero91.output, ero90.input);
    connect (ero90.output, ero89.input);
    connect (ero89.output, ero88.input);
    connect (ero88.output, ero87.input);
    connect (ero87.output, ero86.input);
    connect (ero86.output, ero85.input);
    connect (ero85.output, ero84.input);
    connect (ero84.output, ero83.input);
    connect (ero83.output, ero82.input);
    connect (ero82.output, ero81.input);
    connect (ero81.output, ero80.input);
    connect (ero80.output, ero79.input);
    connect (ero79.output, ero78.input);
    connect (ero78.output, ero77.input);
    connect (ero77.output, ero76.input);
    connect (ero76.output, ero75.input);
    connect (ero75.output, ero74.input);
    connect (ero74.output, ero73.input);
    connect (ero73.output, ero72.input);
    connect (ero72.output, ero71.input);
    connect (ero71.output, ero70.input);
    connect (ero70.output, ero69.input);
    connect (ero69.output, ero68.input);
    connect (ero68.output, ero67.input);
    connect (ero67.output, ero66.input);
    connect (ero66.output, ero65.input);
    connect (ero65.output, ero64.input);
    connect (ero64.output, ero63.input);
    connect (ero63.output, ero62.input);
    connect (ero62.output, ero61.input);
    connect (ero61.output, ero60.input);
    connect (ero60.output, ero59.input);
    connect (ero59.output, ero58.input);
    connect (ero58.output, ero57.input);
    connect (ero57.output, ero56.input);
    connect (ero56.output, ero55.input);
    connect (ero55.output, ero54.input);
    connect (ero54.output, ero53.input);
    connect (ero53.output, ero52.input);
    connect (ero52.output, ero51.input);
    connect (ero51.output, ero50.input);
    connect (ero50.output, ero49.input);
    connect (ero49.output, ero48.input);
    connect (ero48.output, ero47.input);
    connect (ero47.output, ero46.input);
    connect (ero46.output, ero45.input);
    connect (ero45.output, ero44.input);
    connect (ero44.output, ero43.input);
    connect (ero43.output, ero42.input);
    connect (ero42.output, ero41.input);
    connect (ero41.output, ero40.input);
    connect (ero40.output, ero39.input);
    connect (ero39.output, ero38.input);
    connect (ero38.output, ero37.input);
    connect (ero37.output, ero36.input);
    connect (ero36.output, ero35.input);
    connect (ero35.output, ero34.input);
    connect (ero34.output, ero33.input);
    connect (ero33.output, ero32.input);
    connect (ero32.output, ero31.input);
    connect (ero31.output, ero30.input);
    connect (ero30.output, ero29.input);
    connect (ero29.output, ero28.input);
    connect (ero28.output, ero27.input);
    connect (ero27.output, ero26.input);
    connect (ero26.output, ero25.input);
    connect (ero25.output, ero24.input);
    connect (ero24.output, ero23.input);
    connect (ero23.output, ero22.input);
    connect (ero22.output, ero21.input);
    connect (ero21.output, ero20.input);
    connect (ero20.output, ero19.input);
    connect (ero19.output, ero18.input);
    connect (ero18.output, ero17.input);
    connect (ero17.output, ero16.input);
    connect (ero16.output, ero15.input);
    connect (ero15.output, ero14.input);
    connect (ero14.output, ero13.input);
    connect (ero13.output, ero12.input);
    connect (ero12.output, ero11.input);
    connect (ero11.output, ero10.input);
    connect (ero10.output, ero9.input);
    connect (ero9.output, ero8.input);
    connect (ero8.output, ero7.input);
    connect (ero7.output, ero6.input);
    connect (ero6.output, ero5.input);
    connect (ero5.output, ero4.input);
    connect (ero4.output, ero3.input);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, cpd0.input[0]);
    connect (cpd0.output[2], cpd1.input[0]);
    connect (strin.output[0] /* imin */, cpd0.input[2]);
    connect (cpd0.output[1], dup3.input);
    connect (dup3.output[1], cpd1.input[2]);
    connect (dup3.output[0], strout.input[0] /* imZone1 */);
    connect (cpd0.output[0], dup2.input);
    connect (dup2.output[1], cpd1.input[1]);
    connect (dup2.output[0], strout.input[1] /* imZone2 */);
    connect (cpd1.output[1], strout.input[2] /* imZone3 */);
    connect (cpd1.output[0], dup1.input);
    connect (dup1.output[1], dil1.input);
    connect (dup1.output[0], strout.input[3] /* imWork1 */);
    connect (dil1.output, dil0.input);
    connect (dil0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[4] /* out */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_2 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_2_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_1(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_1, int16_t)

subgraph
main_sigmac_helper_2_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent ero0 = new erode_pi0_1(width, height);
    agent dup0 = new rep(2, width);
    agent sup0 = new img_sup_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* out */, ero0.input);
    connect (ero0.output, sup0.input[0]);
    connect (strin.output[0] /* imWork1 */, sup0.input[1]);
    connect (sup0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* out */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_3 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_3_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_2_0, int16_t, 3, 3, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_INFC(pi0, 40);
  int16_t po1 = PIXEL_INFC(pi1, 100);
  int16_t po2 = PIXEL_INFC(pi2, 170);
  outp[0][i] = po2;
  outp[1][i] = po1;
  outp[2][i] = po0;
);

AGENT_MERGE_ARITH(agent_compound_2_1, int16_t, 4, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t pi3 = inp[3][i];
  int16_t po0 = PIXEL_INFC(pi0, 250);
  int16_t po1 = PIXEL_SUP(pi2, pi1);
  int16_t po2 = PIXEL_SUP(pi3, po1);
  int16_t po3 = PIXEL_SUP(po0, po2);
  outp[0][i] = po3;
);

subgraph
main_sigmac_helper_3_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 4, width, height);
    agent strin = new Streamer_In(width, height, 4);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0 = 250;
    int16_t pi1 = 170;
    int16_t pi2 = 100;
    int16_t pi3 = 40;

    // instantiations...
    agent cpd0 = new agent_compound_2_0(width);
    agent cpd1 = new agent_compound_2_1(width);

    // connections...
    connect (strin.output[0] /* imZone1 */, cpd0.input[0]);
    connect (cpd0.output[2], cpd1.input[1]);
    connect (strin.output[1] /* imZone2 */, cpd0.input[1]);
    connect (cpd0.output[1], cpd1.input[2]);
    connect (strin.output[2] /* imZone3 */, cpd0.input[2]);
    connect (cpd0.output[0], cpd1.input[3]);
    connect (strin.output[3] /* out */, cpd1.input[0]);
    connect (cpd1.output[0], strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 22;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_1_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

    new main_sigmac_helper_2_0
    (pipes[14], pipes[15],
     width, height, sizeMax,
     pipes[16], pipes[17]);

    new main_sigmac_helper_3_0
    (pipes[18], pipes[19],
     width, height, sizeMax,
     pipes[20], pipes[21]);

  }
}
#
# FREIA COMPILATION DONE
#


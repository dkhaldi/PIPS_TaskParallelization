#
# AIPO
#
#
# compile generated antibio
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   register int i, j;                                                   /*0010*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0, i_1, i_2;                                          /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1, *w2_1;                                           /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   register int i_9;                                                    /*0066*/

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   i_0 = 1;                                                             /*0090*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = freia_aipo_global_vol(w1_0, &volcurrent_0);                  /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      ret_1 |= freia_aipo_inf(w1_0, w1_0, imIn);                        /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      ret_0 |= freia_aipo_global_vol(w1_0, &volcurrent_0);              /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_aipo_global_vol(w2_0, &volcurrent_1);                  /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      ret_3 |= freia_aipo_inf(w2_0, w2_0, imIn);                        /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      ret_2 |= freia_aipo_global_vol(w2_0, &volcurrent_1);              /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0, w1_0, 30, w1_0->bpp==16?32767:255, 1);    /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0167*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   freia_aipo_copy(w2_0, w1_0);                                         /*0172*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   w2_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0199*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_set_constant(w2_1, w1_1->bpp==16?32767:255);              /*0205*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/

   freia_aipo_copy(w3, w1_1);                                           /*0208*/
   measure_oldVol = 0;                                                  /*0209*/

   while (measure_vol!=measure_oldVol) {                                /*0211*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   freia_common_destruct_data(w2_1);                                    /*0226*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   ret_5 |= freia_aipo_inf(imOut, imOut, w1_0);                         /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_4" of module "main" in dot format
// DAG "dag_4": #i=3 #o=4 #c=12 #s=0 #I=2 #B=0 #A=0
digraph "dag_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w2_0'" [shape=circle];
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // computation vertices
  "208 =" [shape=circle];
  "208 =" -> "w3";
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "208 =" [label="w1_1"];
  "206 -s_" -> "w1_1";
  "205 C" [shape=trapezium,orientation=270];
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1"];
  "201 thr" -> "204 vol" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3"];
  "imIn" -> "175 thr";
  "172 =" [shape=circle];
  "172 =" -> "w2_0'";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "172 =" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "dag_5" of module "main" in dot format
// DAG "dag_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_6" of module "main" in dot format
// DAG "dag_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0_2"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_cleaned_4" of module "main" in dot format
// DAG "dag_cleaned_4": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=2
digraph "dag_cleaned_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";

  // external after copies: 2
  "w2_0'" [shape=circle];
  "w2_0 =" [shape=circle,label="=",style="dashed"]
  "w1_0'" -> "w2_0 =";
  "w2_0 =" -> "w2_0'";
  "w3" [shape=circle];
  "w3 =" [shape=circle,label="=",style="dashed"]
  "w1_1" -> "w3 =";
  "w3 =" -> "w3";
}
// graph for dag "dag_cleaned_5" of module "main" in dot format
// DAG "dag_cleaned_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_cleaned_6" of module "main" in dot format
// DAG "dag_cleaned_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}

! updated function for AIPO

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1 = 0;                                     /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3 = 0;                                     /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5 = 0;                                     /*0064*/
   //PIPS generated variable
   // hardware accelerator generated variable
   freia_data2d *w1_0_8 = 0;

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   w1_0_8 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/

   freia_aipo_global_vol(w1_0, &volcurrent_0);                          /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      freia_aipo_inf(w1_0, w1_0, imIn);                                 /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      freia_aipo_global_vol(w1_0, &volcurrent_0);                       /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   freia_aipo_global_vol(w2_0, &volcurrent_1);                          /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      freia_aipo_inf(w2_0, w2_0, imIn);                                 /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      freia_aipo_global_vol(w2_0, &volcurrent_1);                       /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0_8, w1_0, 30, w1_0->bpp==16?32767:255, 1);  /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0_8, freia_morpho_kernel_8c);          /*0167*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   freia_aipo_inf(imOut, imOut, w1_0);                                  /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w1_0_8);
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   register int i, j;                                                   /*0010*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0, i_1, i_2;                                          /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1, *w2_1;                                           /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   register int i_9;                                                    /*0066*/

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   i_0 = 1;                                                             /*0090*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = freia_aipo_global_vol(w1_0, &volcurrent_0);                  /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      ret_1 |= freia_aipo_inf(w1_0, w1_0, imIn);                        /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      ret_0 |= freia_aipo_global_vol(w1_0, &volcurrent_0);              /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_aipo_global_vol(w2_0, &volcurrent_1);                  /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      ret_3 |= freia_aipo_inf(w2_0, w2_0, imIn);                        /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      ret_2 |= freia_aipo_global_vol(w2_0, &volcurrent_1);              /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0, w1_0, 30, w1_0->bpp==16?32767:255, 1);    /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0167*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   freia_aipo_copy(w2_0, w1_0);                                         /*0172*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   w2_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0199*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_set_constant(w2_1, w1_1->bpp==16?32767:255);              /*0205*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/

   freia_aipo_copy(w3, w1_1);                                           /*0208*/
   measure_oldVol = 0;                                                  /*0209*/

   while (measure_vol!=measure_oldVol) {                                /*0211*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   freia_common_destruct_data(w2_1);                                    /*0226*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   ret_5 |= freia_aipo_inf(imOut, imOut, w1_0);                         /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "58 vol" [shape=diamond];
  "56 E8" [shape=box];
  "56 E8" -> "w2_0";
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="w2_0"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="w2_0"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="w2_0"];
  "51 E8" [shape=box];
  "51 E8" -> "58 vol" [label="w1_0"];
  "51 E8" -> "53 E8" [label="w1_0"];
  "51 E8" -> "w1_0";
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="w1_0"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="w1_0"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="w1_0"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="w1_0"];
  "44 D8" [shape=box];
  "44 D8" -> "47 E8" [label="w1_0"];
  "42 D8" [shape=box];
  "42 D8" -> "44 D8" [label="w1_0"];
  "imIn" -> "42 D8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=18 #s=23 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "117 vol" [shape=diamond];
  "116 ?" [shape=none];
  "108 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "115 ?" [shape=none];
  "115 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "108 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "101 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "114 <" [shape=trapezium,orientation=270];
  "114 <" -> "117 vol" [label="w1_0"];
  "114 <" -> "w1_0'";
  "113 ?" [shape=none];
  "113 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "107 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "100 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "110 D8" [shape=box];
  "110 D8" -> "114 <" [label="w1_0"];
  "109 vol" [shape=diamond];
  "108 ?" [shape=none];
  "108 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "107 ?" [shape=none];
  "107 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "101 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "106 <" [shape=trapezium,orientation=270];
  "106 <" -> "110 D8" [label="w1_0"];
  "106 <" -> "109 vol" [label="w1_0"];
  "105 ?" [shape=none];
  "105 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "100 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "102 D8" [shape=box];
  "102 D8" -> "106 <" [label="w1_0"];
  "101 ?" [shape=none];
  "101 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "100 ?" [shape=none];
  "100 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "99 <" [shape=trapezium,orientation=270];
  "99 <" -> "102 D8" [label="w1_0"];
  "98 ?" [shape=none];
  "98 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "95 D8" [shape=box];
  "95 D8" -> "99 <" [label="w1_0"];
  "94 ?" [shape=none];
  "94 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "93 ?" [shape=none];
  "93 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "92 <" [shape=trapezium,orientation=270];
  "92 <" -> "95 D8" [label="w1_0"];
  "91 ?" [shape=none];
  "91 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "88 D8" [shape=box];
  "88 D8" -> "92 <" [label="w1_0"];
  "87 ?" [shape=none];
  "87 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "86 ?" [shape=none];
  "86 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "85 <" [shape=trapezium,orientation=270];
  "85 <" -> "88 D8" [label="w1_0"];
  "84 ?" [shape=none];
  "84 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "81 D8" [shape=box];
  "81 D8" -> "85 <" [label="w1_0"];
  "80 ?" [shape=none];
  "80 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "79 ?" [shape=none];
  "79 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "78 <" [shape=trapezium,orientation=270];
  "78 <" -> "81 D8" [label="w1_0"];
  "77 ?" [shape=none];
  "77 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "79 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "74 D8" [shape=box];
  "74 D8" -> "78 <" [label="w1_0"];
  "73 ?" [shape=none];
  "73 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "73 ?" [arrowhead=empty,label="ret_0"];
  "72 ?" [shape=none];
  "72 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "73 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "71 <" [shape=trapezium,orientation=270];
  "71 <" -> "74 D8" [label="w1_0"];
  "70 ?" [shape=none];
  "70 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "79 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "72 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "70 ?" [arrowhead=empty,label="ret_1"];
  "67 D8" [shape=box];
  "67 D8" -> "71 <" [label="w1_0"];
  "66 ?" [shape=none];
  "66 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "73 ?" [arrowhead=empty,label="ret_0"];
  "65 ?" [shape=none];
  "65 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "73 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "66 ?" [arrowhead=empty,label="_return12"];
  "64 <" [shape=trapezium,orientation=270];
  "64 <" -> "67 D8" [label="w1_0"];
  "imIn" -> "114 <";
  "imIn" -> "106 <";
  "imIn" -> "99 <";
  "imIn" -> "92 <";
  "imIn" -> "85 <";
  "imIn" -> "78 <";
  "imIn" -> "71 <";
  "imIn" -> "64 <";
  "60 D8" [shape=box];
  "60 D8" -> "64 <" [label="w1_0"];
  "w1_0" -> "60 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "119 vol" [shape=diamond];
  "w2_0" -> "119 vol";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=2 #o=1 #c=18 #s=23 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "178 vol" [shape=diamond];
  "177 ?" [shape=none];
  "169 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "176 ?" [shape=none];
  "176 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "169 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "162 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "175 <" [shape=trapezium,orientation=270];
  "175 <" -> "178 vol" [label="w2_0"];
  "175 <" -> "w2_0'";
  "174 ?" [shape=none];
  "174 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "168 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "161 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "171 D8" [shape=box];
  "171 D8" -> "175 <" [label="w2_0"];
  "170 vol" [shape=diamond];
  "169 ?" [shape=none];
  "169 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "168 ?" [shape=none];
  "168 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "162 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "167 <" [shape=trapezium,orientation=270];
  "167 <" -> "171 D8" [label="w2_0"];
  "167 <" -> "170 vol" [label="w2_0"];
  "166 ?" [shape=none];
  "166 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "161 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "163 D8" [shape=box];
  "163 D8" -> "167 <" [label="w2_0"];
  "162 ?" [shape=none];
  "162 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "161 ?" [shape=none];
  "161 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "163 D8" [label="w2_0"];
  "159 ?" [shape=none];
  "159 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "156 D8" [shape=box];
  "156 D8" -> "160 <" [label="w2_0"];
  "155 ?" [shape=none];
  "155 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "154 ?" [shape=none];
  "154 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "156 D8" [label="w2_0"];
  "152 ?" [shape=none];
  "152 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "149 D8" [shape=box];
  "149 D8" -> "153 <" [label="w2_0"];
  "148 ?" [shape=none];
  "148 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "147 ?" [shape=none];
  "147 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "149 D8" [label="w2_0"];
  "145 ?" [shape=none];
  "145 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "142 D8" [shape=box];
  "142 D8" -> "146 <" [label="w2_0"];
  "141 ?" [shape=none];
  "141 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "140 ?" [shape=none];
  "140 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "139 <" [shape=trapezium,orientation=270];
  "139 <" -> "142 D8" [label="w2_0"];
  "138 ?" [shape=none];
  "138 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "140 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "135 D8" [shape=box];
  "135 D8" -> "139 <" [label="w2_0"];
  "134 ?" [shape=none];
  "134 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "134 ?" [arrowhead=empty,label="ret_2"];
  "133 ?" [shape=none];
  "133 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "134 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "132 <" [shape=trapezium,orientation=270];
  "132 <" -> "135 D8" [label="w2_0"];
  "131 ?" [shape=none];
  "131 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "140 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "133 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "131 ?" [arrowhead=empty,label="ret_3"];
  "128 D8" [shape=box];
  "128 D8" -> "132 <" [label="w2_0"];
  "127 ?" [shape=none];
  "127 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "134 ?" [arrowhead=empty,label="ret_2"];
  "126 ?" [shape=none];
  "126 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "134 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "127 ?" [arrowhead=empty,label="_return13"];
  "125 <" [shape=trapezium,orientation=270];
  "125 <" -> "128 D8" [label="w2_0"];
  "imIn" -> "175 <";
  "imIn" -> "167 <";
  "imIn" -> "160 <";
  "imIn" -> "153 <";
  "imIn" -> "146 <";
  "imIn" -> "139 <";
  "imIn" -> "132 <";
  "imIn" -> "125 <";
  "121 D8" [shape=box];
  "121 D8" -> "125 <" [label="w2_0"];
  "w2_0" -> "121 D8";
}
// graph for dag "dag_4" of module "main" in dot format
// DAG "dag_4": #i=3 #o=4 #c=12 #s=0 #I=2 #B=0 #A=0
digraph "dag_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w2_0'" [shape=circle];
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // computation vertices
  "203 =" [shape=circle];
  "203 =" -> "w3";
  "202 -s_" [shape=trapezium,orientation=270];
  "202 -s_" -> "203 =" [label="w1_1"];
  "202 -s_" -> "w1_1";
  "201 C" [shape=trapezium,orientation=270];
  "200 vol" [shape=diamond];
  "199 thr" [shape=parallelogram];
  "199 thr" -> "202 -s_" [label="w1_1"];
  "199 thr" -> "200 vol" [label="w1_1"];
  "193 E8" [shape=box];
  "193 E8" -> "199 thr" [label="w4"];
  "189 D8" [shape=box];
  "189 D8" -> "193 E8" [label="w4"];
  "188 >" [shape=trapezium,orientation=270];
  "188 >" -> "189 D8" [label="w4"];
  "187 !" [shape=trapezium,orientation=270];
  "187 !" -> "188 >" [label="w3"];
  "186 thr" [shape=parallelogram];
  "186 thr" -> "187 !" [label="w3"];
  "imIn" -> "186 thr";
  "185 =" [shape=circle];
  "185 =" -> "w2_0'";
  "182 D8" [shape=box];
  "182 D8" -> "188 >" [label="w1_0"];
  "182 D8" -> "185 =" [label="w1_0"];
  "182 D8" -> "w1_0'";
  "181 thr" [shape=parallelogram];
  "181 thr" -> "182 D8" [label="w1_0"];
  "180 -" [shape=trapezium,orientation=270];
  "180 -" -> "181 thr" [label="w1_0"];
  "w2_0" -> "180 -";
  "w1_0" -> "180 -";
}
// graph for dag "dag_5" of module "main" in dot format
// DAG "dag_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "211 vol" [shape=diamond];
  "209 +" [shape=trapezium,orientation=270];
  "209 +" -> "w3'";
  "w3" -> "209 +";
  "206 E8" [shape=box];
  "206 E8" -> "211 vol" [label="w1_1"];
  "206 E8" -> "209 +" [label="w1_1"];
  "206 E8" -> "w1_1'";
  "w1_1" -> "206 E8";
}
// graph for dag "dag_6" of module "main" in dot format
// DAG "dag_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "233 *_" [shape=trapezium,orientation=270];
  "233 *_" -> "imOut";
  "227 <" [shape=trapezium,orientation=270];
  "227 <" -> "233 *_" [label="imOut"];
  "224 D8" [shape=box];
  "224 D8" -> "227 <" [label="imOut"];
  "223 D8" [shape=box];
  "223 D8" -> "224 D8" [label="imOut"];
  "222 D8" [shape=box];
  "222 D8" -> "223 D8" [label="imOut"];
  "221 D8" [shape=box];
  "221 D8" -> "222 D8" [label="imOut"];
  "220 D8" [shape=box];
  "220 D8" -> "221 D8" [label="imOut"];
  "219 D8" [shape=box];
  "219 D8" -> "220 D8" [label="imOut"];
  "218 D8" [shape=box];
  "218 D8" -> "219 D8" [label="imOut"];
  "217 D8" [shape=box];
  "217 D8" -> "218 D8" [label="imOut"];
  "216 D8" [shape=box];
  "216 D8" -> "217 D8" [label="imOut"];
  "215 D8" [shape=box];
  "215 D8" -> "216 D8" [label="imOut"];
  "214 <" [shape=trapezium,orientation=270];
  "214 <" -> "215 D8" [label="w4"];
  "w1_0" -> "227 <";
  "w1_0" -> "214 <";
  "w3" -> "214 <";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "58 vol" [shape=diamond];
  "56 E8" [shape=box];
  "56 E8" -> "w2_0";
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="w2_0_1"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="w2_0_2"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="w2_0_3"];
  "51 E8" [shape=box];
  "51 E8" -> "58 vol" [label="w1_0"];
  "51 E8" -> "53 E8" [label="w1_0"];
  "51 E8" -> "w1_0";
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="w1_0_1"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="w1_0_2"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="w1_0_3"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="w1_0_4"];
  "44 D8" [shape=box];
  "44 D8" -> "47 E8" [label="w1_0_5"];
  "42 D8" [shape=box];
  "42 D8" -> "44 D8" [label="w1_0_6"];
  "imIn" -> "42 D8";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=18 #s=23 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "117 vol" [shape=diamond];
  "116 ?" [shape=none];
  "108 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "115 ?" [shape=none];
  "115 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "108 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "101 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "114 <" [shape=trapezium,orientation=270];
  "114 <" -> "117 vol" [label="w1_0"];
  "114 <" -> "w1_0'";
  "113 ?" [shape=none];
  "113 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "107 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "100 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "110 D8" [shape=box];
  "110 D8" -> "114 <" [label="w1_0_7"];
  "109 vol" [shape=diamond];
  "108 ?" [shape=none];
  "108 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "107 ?" [shape=none];
  "107 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "107 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "101 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "106 <" [shape=trapezium,orientation=270];
  "106 <" -> "110 D8" [label="w1_0_8"];
  "106 <" -> "109 vol" [label="w1_0_8"];
  "105 ?" [shape=none];
  "105 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "105 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "100 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "102 D8" [shape=box];
  "102 D8" -> "106 <" [label="w1_0_9"];
  "101 ?" [shape=none];
  "101 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "101 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "100 ?" [shape=none];
  "100 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "100 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "94 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "99 <" [shape=trapezium,orientation=270];
  "99 <" -> "102 D8" [label="w1_0_10"];
  "98 ?" [shape=none];
  "98 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "98 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "93 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "95 D8" [shape=box];
  "95 D8" -> "99 <" [label="w1_0_11"];
  "94 ?" [shape=none];
  "94 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "94 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "93 ?" [shape=none];
  "93 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "93 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "87 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "92 <" [shape=trapezium,orientation=270];
  "92 <" -> "95 D8" [label="w1_0_12"];
  "91 ?" [shape=none];
  "91 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "91 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "86 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "88 D8" [shape=box];
  "88 D8" -> "92 <" [label="w1_0_13"];
  "87 ?" [shape=none];
  "87 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "87 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "86 ?" [shape=none];
  "86 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "86 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "80 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "85 <" [shape=trapezium,orientation=270];
  "85 <" -> "88 D8" [label="w1_0_14"];
  "84 ?" [shape=none];
  "84 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "84 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "79 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "81 D8" [shape=box];
  "81 D8" -> "85 <" [label="w1_0_15"];
  "80 ?" [shape=none];
  "80 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "80 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "79 ?" [shape=none];
  "79 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "79 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "73 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "78 <" [shape=trapezium,orientation=270];
  "78 <" -> "81 D8" [label="w1_0_16"];
  "77 ?" [shape=none];
  "77 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "77 ?" -> "79 ?" [arrowhead=empty,label="ret_1"];
  "72 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "74 D8" [shape=box];
  "74 D8" -> "78 <" [label="w1_0_17"];
  "73 ?" [shape=none];
  "73 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "73 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "73 ?" [arrowhead=empty,label="ret_0"];
  "72 ?" [shape=none];
  "72 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "72 ?" -> "73 ?" [arrowhead=empty,label="_return12"];
  "66 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "71 <" [shape=trapezium,orientation=270];
  "71 <" -> "74 D8" [label="w1_0_18"];
  "70 ?" [shape=none];
  "70 ?" -> "115 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "113 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "107 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "105 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "100 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "98 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "93 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "91 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "86 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "84 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "79 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "77 ?" [arrowhead=empty,label="ret_1"];
  "70 ?" -> "72 ?" [arrowhead=empty,label="ret_1"];
  "65 ?" -> "70 ?" [arrowhead=empty,label="ret_1"];
  "67 D8" [shape=box];
  "67 D8" -> "71 <" [label="w1_0_19"];
  "66 ?" [shape=none];
  "66 ?" -> "116 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "108 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "101 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "94 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "87 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "80 ?" [arrowhead=empty,label="ret_0"];
  "66 ?" -> "73 ?" [arrowhead=empty,label="ret_0"];
  "65 ?" [shape=none];
  "65 ?" -> "116 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "115 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "108 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "107 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "101 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "100 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "94 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "93 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "87 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "86 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "80 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "79 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "73 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "72 ?" [arrowhead=empty,label="_return12"];
  "65 ?" -> "66 ?" [arrowhead=empty,label="_return12"];
  "64 <" [shape=trapezium,orientation=270];
  "64 <" -> "67 D8" [label="w1_0_20"];
  "imIn" -> "114 <";
  "imIn" -> "106 <";
  "imIn" -> "99 <";
  "imIn" -> "92 <";
  "imIn" -> "85 <";
  "imIn" -> "78 <";
  "imIn" -> "71 <";
  "imIn" -> "64 <";
  "60 D8" [shape=box];
  "60 D8" -> "64 <" [label="w1_0_21"];
  "w1_0" -> "60 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "119 vol" [shape=diamond];
  "w2_0" -> "119 vol";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=2 #o=1 #c=18 #s=23 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "178 vol" [shape=diamond];
  "177 ?" [shape=none];
  "169 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "176 ?" [shape=none];
  "176 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "169 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "162 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "175 <" [shape=trapezium,orientation=270];
  "175 <" -> "178 vol" [label="w2_0"];
  "175 <" -> "w2_0'";
  "174 ?" [shape=none];
  "174 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "168 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "161 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "171 D8" [shape=box];
  "171 D8" -> "175 <" [label="w2_0_4"];
  "170 vol" [shape=diamond];
  "169 ?" [shape=none];
  "169 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "168 ?" [shape=none];
  "168 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "168 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "162 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "167 <" [shape=trapezium,orientation=270];
  "167 <" -> "171 D8" [label="w2_0_5"];
  "167 <" -> "170 vol" [label="w2_0_5"];
  "166 ?" [shape=none];
  "166 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "166 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "161 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "163 D8" [shape=box];
  "163 D8" -> "167 <" [label="w2_0_6"];
  "162 ?" [shape=none];
  "162 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "162 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "161 ?" [shape=none];
  "161 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "161 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "155 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "163 D8" [label="w2_0_7"];
  "159 ?" [shape=none];
  "159 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "159 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "154 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "156 D8" [shape=box];
  "156 D8" -> "160 <" [label="w2_0_8"];
  "155 ?" [shape=none];
  "155 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "155 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "154 ?" [shape=none];
  "154 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "154 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "148 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "156 D8" [label="w2_0_9"];
  "152 ?" [shape=none];
  "152 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "152 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "147 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "149 D8" [shape=box];
  "149 D8" -> "153 <" [label="w2_0_10"];
  "148 ?" [shape=none];
  "148 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "148 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "147 ?" [shape=none];
  "147 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "147 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "141 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "149 D8" [label="w2_0_11"];
  "145 ?" [shape=none];
  "145 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "145 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "140 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "142 D8" [shape=box];
  "142 D8" -> "146 <" [label="w2_0_12"];
  "141 ?" [shape=none];
  "141 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "141 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "140 ?" [shape=none];
  "140 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "140 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "134 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "139 <" [shape=trapezium,orientation=270];
  "139 <" -> "142 D8" [label="w2_0_13"];
  "138 ?" [shape=none];
  "138 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "138 ?" -> "140 ?" [arrowhead=empty,label="ret_3"];
  "133 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "135 D8" [shape=box];
  "135 D8" -> "139 <" [label="w2_0_14"];
  "134 ?" [shape=none];
  "134 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "134 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "134 ?" [arrowhead=empty,label="ret_2"];
  "133 ?" [shape=none];
  "133 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "133 ?" -> "134 ?" [arrowhead=empty,label="_return13"];
  "127 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "132 <" [shape=trapezium,orientation=270];
  "132 <" -> "135 D8" [label="w2_0_15"];
  "131 ?" [shape=none];
  "131 ?" -> "176 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "174 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "168 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "166 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "161 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "159 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "154 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "152 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "147 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "145 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "140 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "138 ?" [arrowhead=empty,label="ret_3"];
  "131 ?" -> "133 ?" [arrowhead=empty,label="ret_3"];
  "126 ?" -> "131 ?" [arrowhead=empty,label="ret_3"];
  "128 D8" [shape=box];
  "128 D8" -> "132 <" [label="w2_0_16"];
  "127 ?" [shape=none];
  "127 ?" -> "177 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "169 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "162 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "155 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "148 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "141 ?" [arrowhead=empty,label="ret_2"];
  "127 ?" -> "134 ?" [arrowhead=empty,label="ret_2"];
  "126 ?" [shape=none];
  "126 ?" -> "177 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "176 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "169 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "168 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "162 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "161 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "155 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "148 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "147 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "141 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "140 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "134 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "133 ?" [arrowhead=empty,label="_return13"];
  "126 ?" -> "127 ?" [arrowhead=empty,label="_return13"];
  "125 <" [shape=trapezium,orientation=270];
  "125 <" -> "128 D8" [label="w2_0_17"];
  "imIn" -> "175 <";
  "imIn" -> "167 <";
  "imIn" -> "160 <";
  "imIn" -> "153 <";
  "imIn" -> "146 <";
  "imIn" -> "139 <";
  "imIn" -> "132 <";
  "imIn" -> "125 <";
  "121 D8" [shape=box];
  "121 D8" -> "125 <" [label="w2_0_18"];
  "w2_0" -> "121 D8";
}
// graph for dag "dag_cleaned_4" of module "main" in dot format
// DAG "dag_cleaned_4": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=2
digraph "dag_cleaned_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "202 -s_" [shape=trapezium,orientation=270];
  "202 -s_" -> "w1_1";
  "200 vol" [shape=diamond];
  "199 thr" [shape=parallelogram];
  "199 thr" -> "202 -s_" [label="w1_1_1"];
  "199 thr" -> "200 vol" [label="w1_1_1"];
  "193 E8" [shape=box];
  "193 E8" -> "199 thr" [label="w4"];
  "189 D8" [shape=box];
  "189 D8" -> "193 E8" [label="w4_1"];
  "188 >" [shape=trapezium,orientation=270];
  "188 >" -> "189 D8" [label="w4_2"];
  "187 !" [shape=trapezium,orientation=270];
  "187 !" -> "188 >" [label="w3_1"];
  "186 thr" [shape=parallelogram];
  "186 thr" -> "187 !" [label="w3_2"];
  "imIn" -> "186 thr";
  "182 D8" [shape=box];
  "182 D8" -> "188 >" [label="w1_0"];
  "182 D8" -> "w1_0'";
  "181 thr" [shape=parallelogram];
  "181 thr" -> "182 D8" [label="w1_0_22"];
  "180 -" [shape=trapezium,orientation=270];
  "180 -" -> "181 thr" [label="w1_0_23"];
  "w2_0" -> "180 -";
  "w1_0" -> "180 -";

  // external after copies: 2
  "w2_0'" [shape=circle];
  "w2_0 =" [shape=circle,label="=",style="dashed"]
  "w1_0'" -> "w2_0 =";
  "w2_0 =" -> "w2_0'";
  "w3" [shape=circle];
  "w3 =" [shape=circle,label="=",style="dashed"]
  "w1_1" -> "w3 =";
  "w3 =" -> "w3";
}
// graph for dag "dag_cleaned_5" of module "main" in dot format
// DAG "dag_cleaned_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "211 vol" [shape=diamond];
  "209 +" [shape=trapezium,orientation=270];
  "209 +" -> "w3'";
  "w3" -> "209 +";
  "206 E8" [shape=box];
  "206 E8" -> "211 vol" [label="w1_1"];
  "206 E8" -> "209 +" [label="w1_1"];
  "206 E8" -> "w1_1'";
  "w1_1" -> "206 E8";
}
// graph for dag "dag_cleaned_6" of module "main" in dot format
// DAG "dag_cleaned_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "233 *_" [shape=trapezium,orientation=270];
  "233 *_" -> "imOut";
  "227 <" [shape=trapezium,orientation=270];
  "227 <" -> "233 *_" [label="imOut_1"];
  "224 D8" [shape=box];
  "224 D8" -> "227 <" [label="imOut_2"];
  "223 D8" [shape=box];
  "223 D8" -> "224 D8" [label="imOut_3"];
  "222 D8" [shape=box];
  "222 D8" -> "223 D8" [label="imOut_4"];
  "221 D8" [shape=box];
  "221 D8" -> "222 D8" [label="imOut_5"];
  "220 D8" [shape=box];
  "220 D8" -> "221 D8" [label="imOut_6"];
  "219 D8" [shape=box];
  "219 D8" -> "220 D8" [label="imOut_7"];
  "218 D8" [shape=box];
  "218 D8" -> "219 D8" [label="imOut_8"];
  "217 D8" [shape=box];
  "217 D8" -> "218 D8" [label="imOut_9"];
  "216 D8" [shape=box];
  "216 D8" -> "217 D8" [label="imOut_10"];
  "215 D8" [shape=box];
  "215 D8" -> "216 D8" [label="imOut_11"];
  "214 <" [shape=trapezium,orientation=270];
  "214 <" -> "215 D8" [label="w4"];
  "w1_0" -> "227 <";
  "w1_0" -> "214 <";
  "w3" -> "214 <";
}
// graph for dag "main_spoc_helper_0_0" of module "main" in dot format
// DAG "main_spoc_helper_0_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "56 E8" [shape=box];
  "56 E8" -> "w2_0";
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="w2_0_1"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="w2_0_2"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="w2_0_3"];
  "58 vol" [shape=diamond];
  "51 E8" [shape=box];
  "51 E8" -> "53 E8" [label="w1_0"];
  "51 E8" -> "58 vol" [label="w1_0"];
  "51 E8" -> "w1_0";
  "50 E8" [shape=box];
  "50 E8" -> "51 E8" [label="w1_0_1"];
  "49 E8" [shape=box];
  "49 E8" -> "50 E8" [label="w1_0_2"];
  "48 E8" [shape=box];
  "48 E8" -> "49 E8" [label="w1_0_3"];
  "47 E8" [shape=box];
  "47 E8" -> "48 E8" [label="w1_0_4"];
  "44 D8" [shape=box];
  "44 D8" -> "47 E8" [label="w1_0_5"];
  "42 D8" [shape=box];
  "42 D8" -> "44 D8" [label="w1_0_6"];
  "imIn" -> "42 D8";
}
// graph for dag "main_spoc_helper_1_0" of module "main" in dot format
// DAG "main_spoc_helper_1_0": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_1_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "117 vol" [shape=diamond];
  "114 <" [shape=trapezium,orientation=270];
  "114 <" -> "117 vol" [label="w1_0"];
  "114 <" -> "w1_0'";
  "110 D8" [shape=box];
  "110 D8" -> "114 <" [label="w1_0_7"];
  "109 vol" [shape=diamond];
  "106 <" [shape=trapezium,orientation=270];
  "106 <" -> "110 D8" [label="w1_0_8"];
  "106 <" -> "109 vol" [label="w1_0_8"];
  "102 D8" [shape=box];
  "102 D8" -> "106 <" [label="w1_0_9"];
  "99 <" [shape=trapezium,orientation=270];
  "99 <" -> "102 D8" [label="w1_0_10"];
  "95 D8" [shape=box];
  "95 D8" -> "99 <" [label="w1_0_11"];
  "92 <" [shape=trapezium,orientation=270];
  "92 <" -> "95 D8" [label="w1_0_12"];
  "88 D8" [shape=box];
  "88 D8" -> "92 <" [label="w1_0_13"];
  "85 <" [shape=trapezium,orientation=270];
  "85 <" -> "88 D8" [label="w1_0_14"];
  "81 D8" [shape=box];
  "81 D8" -> "85 <" [label="w1_0_15"];
  "78 <" [shape=trapezium,orientation=270];
  "78 <" -> "81 D8" [label="w1_0_16"];
  "74 D8" [shape=box];
  "74 D8" -> "78 <" [label="w1_0_17"];
  "71 <" [shape=trapezium,orientation=270];
  "71 <" -> "74 D8" [label="w1_0_18"];
  "67 D8" [shape=box];
  "67 D8" -> "71 <" [label="w1_0_19"];
  "64 <" [shape=trapezium,orientation=270];
  "64 <" -> "67 D8" [label="w1_0_20"];
  "imIn" -> "114 <";
  "imIn" -> "106 <";
  "imIn" -> "99 <";
  "imIn" -> "92 <";
  "imIn" -> "85 <";
  "imIn" -> "78 <";
  "imIn" -> "71 <";
  "imIn" -> "64 <";
  "60 D8" [shape=box];
  "60 D8" -> "64 <" [label="w1_0_21"];
  "w1_0" -> "60 D8";
}
// graph for dag "main_spoc_helper_2_0" of module "main" in dot format
// DAG "main_spoc_helper_2_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_2_0" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "119 vol" [shape=diamond];
  "w2_0" -> "119 vol";
}
// graph for dag "main_spoc_helper_3_0" of module "main" in dot format
// DAG "main_spoc_helper_3_0": #i=2 #o=1 #c=18 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_3_0" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "178 vol" [shape=diamond];
  "175 <" [shape=trapezium,orientation=270];
  "175 <" -> "178 vol" [label="w2_0"];
  "175 <" -> "w2_0'";
  "171 D8" [shape=box];
  "171 D8" -> "175 <" [label="w2_0_4"];
  "170 vol" [shape=diamond];
  "167 <" [shape=trapezium,orientation=270];
  "167 <" -> "171 D8" [label="w2_0_5"];
  "167 <" -> "170 vol" [label="w2_0_5"];
  "163 D8" [shape=box];
  "163 D8" -> "167 <" [label="w2_0_6"];
  "160 <" [shape=trapezium,orientation=270];
  "160 <" -> "163 D8" [label="w2_0_7"];
  "156 D8" [shape=box];
  "156 D8" -> "160 <" [label="w2_0_8"];
  "153 <" [shape=trapezium,orientation=270];
  "153 <" -> "156 D8" [label="w2_0_9"];
  "149 D8" [shape=box];
  "149 D8" -> "153 <" [label="w2_0_10"];
  "146 <" [shape=trapezium,orientation=270];
  "146 <" -> "149 D8" [label="w2_0_11"];
  "142 D8" [shape=box];
  "142 D8" -> "146 <" [label="w2_0_12"];
  "139 <" [shape=trapezium,orientation=270];
  "139 <" -> "142 D8" [label="w2_0_13"];
  "135 D8" [shape=box];
  "135 D8" -> "139 <" [label="w2_0_14"];
  "132 <" [shape=trapezium,orientation=270];
  "132 <" -> "135 D8" [label="w2_0_15"];
  "128 D8" [shape=box];
  "128 D8" -> "132 <" [label="w2_0_16"];
  "125 <" [shape=trapezium,orientation=270];
  "125 <" -> "128 D8" [label="w2_0_17"];
  "imIn" -> "175 <";
  "imIn" -> "167 <";
  "imIn" -> "160 <";
  "imIn" -> "153 <";
  "imIn" -> "146 <";
  "imIn" -> "139 <";
  "imIn" -> "132 <";
  "imIn" -> "125 <";
  "121 D8" [shape=box];
  "121 D8" -> "125 <" [label="w2_0_18"];
  "w2_0" -> "121 D8";
}
// graph for dag "main_spoc_helper_4_0" of module "main" in dot format
// DAG "main_spoc_helper_4_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_4_0" {
  // inputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "182 D8" [shape=box];
  "182 D8" -> "w1_0'";
  "181 thr" [shape=parallelogram];
  "181 thr" -> "182 D8" [label="w1_0_22"];
  "180 -" [shape=trapezium,orientation=270];
  "180 -" -> "181 thr" [label="w1_0_23"];
  "w2_0" -> "180 -";
  "w1_0" -> "180 -";
}
// graph for dag "main_spoc_helper_4_1" of module "main" in dot format
// DAG "main_spoc_helper_4_1": #i=2 #o=1 #c=8 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_4_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_1" [shape=circle];

  // computation vertices
  "202 -s_" [shape=trapezium,orientation=270];
  "202 -s_" -> "w1_1";
  "200 vol" [shape=diamond];
  "199 thr" [shape=parallelogram];
  "199 thr" -> "202 -s_" [label="w1_1_1"];
  "199 thr" -> "200 vol" [label="w1_1_1"];
  "193 E8" [shape=box];
  "193 E8" -> "199 thr" [label="w4"];
  "189 D8" [shape=box];
  "189 D8" -> "193 E8" [label="w4_1"];
  "188 >" [shape=trapezium,orientation=270];
  "188 >" -> "189 D8" [label="w4_2"];
  "w1_0" -> "188 >";
  "187 !" [shape=trapezium,orientation=270];
  "187 !" -> "188 >" [label="w3_1"];
  "186 thr" [shape=parallelogram];
  "186 thr" -> "187 !" [label="w3_2"];
  "imIn" -> "186 thr";
}
// graph for dag "main_spoc_helper_5_0" of module "main" in dot format
// DAG "main_spoc_helper_5_0": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_5_0" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "209 +" [shape=trapezium,orientation=270];
  "209 +" -> "w3'";
  "w3" -> "209 +";
  "211 vol" [shape=diamond];
  "206 E8" [shape=box];
  "206 E8" -> "209 +" [label="w1_1"];
  "206 E8" -> "211 vol" [label="w1_1"];
  "206 E8" -> "w1_1'";
  "w1_1" -> "206 E8";
}
// graph for dag "main_spoc_helper_6_0" of module "main" in dot format
// DAG "main_spoc_helper_6_0": #i=2 #o=1 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_6_0" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "233 *_" [shape=trapezium,orientation=270];
  "233 *_" -> "imOut";
  "227 <" [shape=trapezium,orientation=270];
  "227 <" -> "233 *_" [label="imOut_1"];
  "224 D8" [shape=box];
  "224 D8" -> "227 <" [label="imOut_2"];
  "223 D8" [shape=box];
  "223 D8" -> "224 D8" [label="imOut_3"];
  "222 D8" [shape=box];
  "222 D8" -> "223 D8" [label="imOut_4"];
  "221 D8" [shape=box];
  "221 D8" -> "222 D8" [label="imOut_5"];
  "220 D8" [shape=box];
  "220 D8" -> "221 D8" [label="imOut_6"];
  "219 D8" [shape=box];
  "219 D8" -> "220 D8" [label="imOut_7"];
  "218 D8" [shape=box];
  "218 D8" -> "219 D8" [label="imOut_8"];
  "217 D8" [shape=box];
  "217 D8" -> "218 D8" [label="imOut_9"];
  "216 D8" [shape=box];
  "216 D8" -> "217 D8" [label="imOut_10"];
  "215 D8" [shape=box];
  "215 D8" -> "216 D8" [label="imOut_11"];
  "214 <" [shape=trapezium,orientation=270];
  "214 <" -> "215 D8" [label="w4"];
  "w1_0" -> "227 <";
  "w1_0" -> "214 <";
  "w3" -> "214 <";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 12 ops and 0 copies, optimized to 12 ops and 0+0+0 copies
// split 0: 2 cuts
// # SPOC calls: 2

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t * po1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imIn [0 input 0] -> [0 poc 0] 42 dilate_8c
  // nope
  // poc 42 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`w1_0_6 [0 poc 0] -> [1 poc 0] 44 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w1_0_6 [1 input 0] -> [1 poc 0] 44 dilate_8c
  // nope
  // poc 44 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`w1_0_5 [1 poc 0] -> [2 poc 0] 47 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w1_0_5 [2 input 0] -> [2 poc 0] 47 erode_8c
  // nope
  // poc 47 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`w1_0_4 [2 poc 0] -> [3 poc 0] 48 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_0_4 [3 input 0] -> [3 poc 0] 48 erode_8c
  // nope
  // poc 48 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`w1_0_3 [3 poc 0] -> [4 poc 0] 49 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_0_3 [4 input 0] -> [4 poc 0] 49 erode_8c
  // nope
  // poc 49 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`w1_0_2 [4 poc 0] -> [5 poc 0] 50 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_0_2 [5 input 0] -> [5 poc 0] 50 erode_8c
  // nope
  // poc 50 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`w1_0_1 [5 poc 0] -> [6 poc 0] 51 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_0_1 [6 input 0] -> [6 poc 0] 51 erode_8c
  // nope
  // poc 51 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`w1_0 [6 poc 0] -> [6 measure 0] 51 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;


  // STAGE 7
  // 0`w1_0 [6 measure 0] -> [7 poc 0] 53 erode_8c
  // 0`w1_0 [7 input 0] -> [7 poc 0] 53 erode_8c
  // nope
  // poc 53 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // output image 0`w1_0 on 1 and image 0`w2_0_3 on 0
  // 0`w1_0 [6 poc 0] -> [7 output 1] 0 null
  si.mux[6][1].op = SPOC_MUX_IN0;
  si.mux[6][3].op = SPOC_MUX_IN0;
  // 0`w1_0 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`w1_0 [7 output 1] -> [7 output 1] 0 null
  // nope

  // 0`w2_0_3 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_0_3 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 58 global_vol stage 6 side 0
  *po1 = (int32_t) reduc.measure[6][0].volume;

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w2_0_3 [0 input 0] -> [0 poc 0] 54 erode_8c
  // nope
  // poc 54 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`w2_0_2 [0 poc 0] -> [1 poc 0] 55 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`w2_0_2 [1 input 0] -> [1 poc 0] 55 erode_8c
  // nope
  // poc 55 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`w2_0_1 [1 poc 0] -> [2 poc 0] 56 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`w2_0_1 [2 input 0] -> [2 poc 0] 56 erode_8c
  // nope
  // poc 56 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // output image 0`w2_0 on 0
  // 0`w2_0 [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w2_0 [2 output 0] -> [7 output 0] 0 null
  // 0`w2_0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w2_0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w2_0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w2_0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w2_0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// dag 1: 18 ops and 0 copies, optimized to 18 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_0 [0 input 1] -> [0 poc 1] 60 dilate_8c
  // nope
  // poc 60 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imIn [0 input 0] -> [0 alu] 64 inf
  // nope
  // 0`w1_0_21 [0 poc 1] -> [0 alu] 64 inf
  // nope
  // alu 64 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1
  // 0`w1_0_20 [0 alu] -> [1 poc 0] 67 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`w1_0_20 [1 input 0] -> [1 poc 0] 67 dilate_8c
  // nope
  // poc 67 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`imIn [0 input 0] -> [1 alu] 71 inf
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imIn [1 input 1] -> [1 alu] 71 inf
  // nope
  // 0`w1_0_19 [1 poc 0] -> [1 alu] 71 inf
  // nope
  // alu 71 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 2
  // 0`w1_0_18 [1 alu] -> [2 poc 0] 74 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`w1_0_18 [2 input 0] -> [2 poc 0] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imIn [1 poc 1] -> [2 alu] 78 inf
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imIn [2 input 1] -> [2 alu] 78 inf
  // nope
  // 0`w1_0_17 [2 poc 0] -> [2 alu] 78 inf
  // nope
  // alu 78 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 3
  // 0`w1_0_16 [2 alu] -> [3 poc 0] 81 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`w1_0_16 [3 input 0] -> [3 poc 0] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`imIn [2 poc 1] -> [3 alu] 85 inf
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imIn [3 input 1] -> [3 alu] 85 inf
  // nope
  // 0`w1_0_15 [3 poc 0] -> [3 alu] 85 inf
  // nope
  // alu 85 inf stage 3
  si.alu[3][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 4
  // 0`w1_0_14 [3 alu] -> [4 poc 0] 88 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`w1_0_14 [4 input 0] -> [4 poc 0] 88 dilate_8c
  // nope
  // poc 88 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`imIn [3 poc 1] -> [4 alu] 92 inf
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imIn [4 input 1] -> [4 alu] 92 inf
  // nope
  // 0`w1_0_13 [4 poc 0] -> [4 alu] 92 inf
  // nope
  // alu 92 inf stage 4
  si.alu[4][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 5
  // 0`w1_0_12 [4 alu] -> [5 poc 0] 95 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // 0`w1_0_12 [5 input 0] -> [5 poc 0] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`imIn [4 poc 1] -> [5 alu] 99 inf
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imIn [5 input 1] -> [5 alu] 99 inf
  // nope
  // 0`w1_0_11 [5 poc 0] -> [5 alu] 99 inf
  // nope
  // alu 99 inf stage 5
  si.alu[5][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 6
  // 0`w1_0_10 [5 alu] -> [6 poc 0] 102 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // 0`w1_0_10 [6 input 0] -> [6 poc 0] 102 dilate_8c
  // nope
  // poc 102 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`imIn [5 poc 1] -> [6 alu] 106 inf
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imIn [6 input 1] -> [6 alu] 106 inf
  // nope
  // 0`w1_0_9 [6 poc 0] -> [6 alu] 106 inf
  // nope
  // alu 106 inf stage 6
  si.alu[6][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`w1_0_8 [6 alu] -> [6 measure 0] 106 inf
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;


  // STAGE 7
  // 0`w1_0_8 [6 measure 0] -> [7 poc 0] 110 dilate_8c
  // 0`w1_0_8 [7 input 0] -> [7 poc 0] 110 dilate_8c
  // nope
  // poc 110 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`imIn [6 poc 1] -> [7 alu] 114 inf
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imIn [7 input 1] -> [7 alu] 114 inf
  // nope
  // 0`w1_0_7 [7 poc 0] -> [7 alu] 114 inf
  // nope
  // alu 114 inf stage 7
  si.alu[7][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`w1_0 [7 alu] -> [7 measure 0] 114 inf
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;


  // output image 0`w1_0 on 0
  // 0`w1_0 [7 measure 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`w1_0 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 109 global_vol stage 6 side 0
  *po1 = (int32_t) reduc.measure[6][0].volume;

  // measure 117 global_vol stage 7 side 0
  *po2 = (int32_t) reduc.measure[7][0].volume;

  return ret;
}

// dag 2: 1 ops and 0 copies, optimized to 1 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_2_0_0(
  const freia_data2d * i0,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w2_0 [0 input 0] -> [0 measure 0] 0 undefined
  si.mux[0][0].op = SPOC_MUX_IN0;


  // no output image

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, NULL, NULL, i0, NULL);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 119 global_vol stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

// dag 3: 18 ops and 0 copies, optimized to 18 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1,
  int32_t * po2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w2_0 [0 input 1] -> [0 poc 1] 121 dilate_8c
  // nope
  // poc 121 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];

  // 0`imIn [0 input 0] -> [0 alu] 125 inf
  // nope
  // 0`w2_0_18 [0 poc 1] -> [0 alu] 125 inf
  // nope
  // alu 125 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1
  // 0`w2_0_17 [0 alu] -> [1 poc 0] 128 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`w2_0_17 [1 input 0] -> [1 poc 0] 128 dilate_8c
  // nope
  // poc 128 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];

  // 0`imIn [0 input 0] -> [1 alu] 132 inf
  si.mux[0][1].op = SPOC_MUX_IN0;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`imIn [1 input 1] -> [1 alu] 132 inf
  // nope
  // 0`w2_0_16 [1 poc 0] -> [1 alu] 132 inf
  // nope
  // alu 132 inf stage 1
  si.alu[1][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 2
  // 0`w2_0_15 [1 alu] -> [2 poc 0] 135 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`w2_0_15 [2 input 0] -> [2 poc 0] 135 dilate_8c
  // nope
  // poc 135 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imIn [1 poc 1] -> [2 alu] 139 inf
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imIn [2 input 1] -> [2 alu] 139 inf
  // nope
  // 0`w2_0_14 [2 poc 0] -> [2 alu] 139 inf
  // nope
  // alu 139 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 3
  // 0`w2_0_13 [2 alu] -> [3 poc 0] 142 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`w2_0_13 [3 input 0] -> [3 poc 0] 142 dilate_8c
  // nope
  // poc 142 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];

  // 0`imIn [2 poc 1] -> [3 alu] 146 inf
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imIn [3 input 1] -> [3 alu] 146 inf
  // nope
  // 0`w2_0_12 [3 poc 0] -> [3 alu] 146 inf
  // nope
  // alu 146 inf stage 3
  si.alu[3][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 4
  // 0`w2_0_11 [3 alu] -> [4 poc 0] 149 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;
  // 0`w2_0_11 [4 input 0] -> [4 poc 0] 149 dilate_8c
  // nope
  // poc 149 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];

  // 0`imIn [3 poc 1] -> [4 alu] 153 inf
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imIn [4 input 1] -> [4 alu] 153 inf
  // nope
  // 0`w2_0_10 [4 poc 0] -> [4 alu] 153 inf
  // nope
  // alu 153 inf stage 4
  si.alu[4][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 5
  // 0`w2_0_9 [4 alu] -> [5 poc 0] 156 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN1;
  si.mux[4][2].op = SPOC_MUX_IN0;
  // 0`w2_0_9 [5 input 0] -> [5 poc 0] 156 dilate_8c
  // nope
  // poc 156 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];

  // 0`imIn [4 poc 1] -> [5 alu] 160 inf
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imIn [5 input 1] -> [5 alu] 160 inf
  // nope
  // 0`w2_0_8 [5 poc 0] -> [5 alu] 160 inf
  // nope
  // alu 160 inf stage 5
  si.alu[5][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 6
  // 0`w2_0_7 [5 alu] -> [6 poc 0] 163 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;
  // 0`w2_0_7 [6 input 0] -> [6 poc 0] 163 dilate_8c
  // nope
  // poc 163 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];

  // 0`imIn [5 poc 1] -> [6 alu] 167 inf
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imIn [6 input 1] -> [6 alu] 167 inf
  // nope
  // 0`w2_0_6 [6 poc 0] -> [6 alu] 167 inf
  // nope
  // alu 167 inf stage 6
  si.alu[6][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`w2_0_5 [6 alu] -> [6 measure 0] 167 inf
  si.mux[6][0].op = SPOC_MUX_IN1;
  si.mux[6][2].op = SPOC_MUX_IN0;


  // STAGE 7
  // 0`w2_0_5 [6 measure 0] -> [7 poc 0] 171 dilate_8c
  // 0`w2_0_5 [7 input 0] -> [7 poc 0] 171 dilate_8c
  // nope
  // poc 171 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];

  // 0`imIn [6 poc 1] -> [7 alu] 175 inf
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imIn [7 input 1] -> [7 alu] 175 inf
  // nope
  // 0`w2_0_4 [7 poc 0] -> [7 alu] 175 inf
  // nope
  // alu 175 inf stage 7
  si.alu[7][0].op = SPOC_ALU_INF_IN0_IN1;

  // 0`w2_0 [7 alu] -> [7 measure 0] 175 inf
  si.mux[7][0].op = SPOC_MUX_IN1;
  si.mux[7][2].op = SPOC_MUX_IN0;


  // output image 0`w2_0 on 0
  // 0`w2_0 [7 measure 0] -> [7 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`w2_0 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 170 global_vol stage 6 side 0
  *po1 = (int32_t) reduc.measure[6][0].volume;

  // measure 178 global_vol stage 7 side 0
  *po2 = (int32_t) reduc.measure[7][0].volume;

  return ret;
}

// dag 4: 12 ops and 2 copies, optimized to 11 ops and 0+0+2 copies
// split 0: 1 cut
// split 1: 1 cut
// # SPOC calls: 2

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_4_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_0 [0 input 0] -> [0 alu] 180 sub
  // nope
  // 0`w2_0 [0 input 1] -> [0 alu] 180 sub
  // nope
  // alu 180 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`w1_0_23 [0 alu] -> [0 threshold 0] 181 threshold
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // threshold 181 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // 0`w1_0_22 [0 threshold 0] -> [1 poc 0] 182 dilate_8c
  // 0`w1_0_22 [1 input 0] -> [1 poc 0] 182 dilate_8c
  // nope
  // poc 182 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi3[i];


  // output image 0`w1_0 on 0
  // 0`w1_0 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_0 [1 output 0] -> [7 output 0] 0 null
  // 0`w1_0 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_0 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_0 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_0 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_0 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_0 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_4_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  const int32_t * pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t * po7,
  int32_t pi8)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imIn [0 input 0] -> [0 threshold 0] 186 threshold
  si.mux[0][0].op = SPOC_MUX_IN0;
  // threshold 186 threshold stage 0 side 0
  si.th[0][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[0][0].boundmin = pi0;
  sp.th[0][0].boundmax = pi1;


  // STAGE 1
  // 0`w3_2 [0 threshold 0] -> [1 alu] 187 not
  // 0`w3_2 [1 input 0] -> [1 alu] 187 not
  // nope
  // alu 187 not stage 1
  si.alu[1][0].op = SPOC_ALU_NOT_IN0;


  // STAGE 2
  // 0`w3_1 [1 alu] -> [2 alu] 188 sup
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // 0`w3_1 [2 input 0] -> [2 alu] 188 sup
  // nope
  // 0`w1_0 [0 input 1] -> [2 alu] 188 sup
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w1_0 [1 input 1] -> [2 alu] 188 sup
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`w1_0 [2 input 1] -> [2 alu] 188 sup
  // nope
  // alu 188 sup stage 2
  si.alu[2][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 3
  // 0`w4_2 [2 alu] -> [3 poc 0] 189 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`w4_2 [3 input 0] -> [3 poc 0] 189 dilate_8c
  // nope
  // poc 189 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi3[i];


  // STAGE 4
  // 0`w4_1 [3 poc 0] -> [4 poc 0] 193 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w4_1 [4 input 0] -> [4 poc 0] 193 erode_8c
  // nope
  // poc 193 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi3[i];

  // 0`w4 [4 poc 0] -> [4 threshold 0] 199 threshold
  si.mux[4][0].op = SPOC_MUX_IN0;
  // threshold 199 threshold stage 4 side 0
  si.th[4][0].op = pi6? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[4][0].boundmin = pi4;
  sp.th[4][0].boundmax = pi5;

  // 0`w1_1_1 [4 threshold 0] -> [4 measure 0] 199 threshold
  // nope


  // STAGE 5
  // 0`w1_1_1 [4 measure 0] -> [5 alu] 202 subsat_const
  // 0`w1_1_1 [5 input 0] -> [5 alu] 202 subsat_const
  // nope
  // alu 202 subsat_const stage 5
  si.alu[5][0].op = SPOC_ALU_SUBSAT_IN0_CONST;
  sp.alu[5][0].constant = pi8;


  // output image 0`w1_1 on 0
  // 0`w1_1 [5 alu] -> [5 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN1;
  si.mux[5][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1 [5 output 0] -> [7 output 0] 0 null
  // 0`w1_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 200 global_vol stage 4 side 0
  *po7 = (int32_t) reduc.measure[4][0].volume;

  return ret;
}

// dag 5: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_5_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t * po1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_1 [0 input 0] -> [0 poc 0] 206 erode_8c
  // nope
  // poc 206 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];

  // 0`w1_1 [0 poc 0] -> [0 measure 0] 206 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;


  // STAGE 1
  // 0`w1_1 [0 measure 0] -> [1 alu] 209 add
  // 0`w1_1 [1 input 0] -> [1 alu] 209 add
  // nope
  // 0`w3 [0 input 1] -> [1 alu] 209 add
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w3 [1 input 1] -> [1 alu] 209 add
  // nope
  // alu 209 add stage 1
  si.alu[1][0].op = SPOC_ALU_ADD_IN0_IN1;


  // output image 0`w1_1 on 0 and image 0`w3 on 1
  // 0`w1_1 [1 input 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w1_1 [1 output 0] -> [7 output 0] 0 null
  // 0`w1_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`w1_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`w3 [1 alu] -> [1 output 1] 0 null
  si.mux[1][1].op = SPOC_MUX_IN1;
  si.mux[1][3].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`w3 [1 output 1] -> [7 output 1] 0 null
  // 0`w3 [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`w3 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`w3 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`w3 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`w3 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`w3 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 211 global_vol stage 0 side 0
  *po1 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

// dag 6: 13 ops and 0 copies, optimized to 13 ops and 0+0+0 copies
// split 0: 2 cuts
// # SPOC calls: 2

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_6_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`w1_0 [0 input 0] -> [0 alu] 214 inf
  // nope
  // 0`w3 [0 input 1] -> [0 alu] 214 inf
  // nope
  // alu 214 inf stage 0
  si.alu[0][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 1
  // 0`w4 [0 alu] -> [1 poc 0] 215 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;
  // 0`w4 [1 input 0] -> [1 poc 0] 215 dilate_8c
  // nope
  // poc 215 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imOut_11 [1 poc 0] -> [2 poc 0] 216 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imOut_11 [2 input 0] -> [2 poc 0] 216 dilate_8c
  // nope
  // poc 216 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imOut_10 [2 poc 0] -> [3 poc 0] 217 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imOut_10 [3 input 0] -> [3 poc 0] 217 dilate_8c
  // nope
  // poc 217 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imOut_9 [3 poc 0] -> [4 poc 0] 218 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imOut_9 [4 input 0] -> [4 poc 0] 218 dilate_8c
  // nope
  // poc 218 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imOut_8 [4 poc 0] -> [5 poc 0] 219 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imOut_8 [5 input 0] -> [5 poc 0] 219 dilate_8c
  // nope
  // poc 219 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imOut_7 [5 poc 0] -> [6 poc 0] 220 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imOut_7 [6 input 0] -> [6 poc 0] 220 dilate_8c
  // nope
  // poc 220 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imOut_6 [6 poc 0] -> [7 poc 0] 221 dilate_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imOut_6 [7 input 0] -> [7 poc 0] 221 dilate_8c
  // nope
  // poc 221 dilate_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_DILATE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // output image 0`imOut_5 on 0
  // 0`imOut_5 [7 poc 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imOut_5 [7 output 0] -> [7 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_6_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imOut_5 [0 input 0] -> [0 poc 0] 222 dilate_8c
  // nope
  // poc 222 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imOut_4 [0 poc 0] -> [1 poc 0] 223 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imOut_4 [1 input 0] -> [1 poc 0] 223 dilate_8c
  // nope
  // poc 223 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imOut_3 [1 poc 0] -> [2 poc 0] 224 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imOut_3 [2 input 0] -> [2 poc 0] 224 dilate_8c
  // nope
  // poc 224 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imOut_2 [2 poc 0] -> [2 alu] 227 inf
  // nope
  // 0`w1_0 [0 input 1] -> [2 alu] 227 inf
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`w1_0 [1 input 1] -> [2 alu] 227 inf
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`w1_0 [2 input 1] -> [2 alu] 227 inf
  // nope
  // alu 227 inf stage 2
  si.alu[2][0].op = SPOC_ALU_INF_IN0_IN1;


  // STAGE 3
  // 0`imOut_1 [2 alu] -> [3 alu] 233 mul_const
  si.mux[2][0].op = SPOC_MUX_IN1;
  si.mux[2][2].op = SPOC_MUX_IN0;
  // 0`imOut_1 [3 input 0] -> [3 alu] 233 mul_const
  // nope
  // alu 233 mul_const stage 3
  si.alu[3][0].op = SPOC_ALU_MUL_IN0_CONST;
  sp.alu[3][0].constant = pi1;


  // output image 0`imOut on 0
  // 0`imOut [3 alu] -> [3 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN1;
  si.mux[3][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imOut [3 output 0] -> [7 output 0] 0 null
  // 0`imOut [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imOut [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imOut [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imOut [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imIn, *imOut;                                          /*0002*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0004*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0005*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0006*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0007*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0008*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0009*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0010*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0011*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0012*/
   //PIPS generated variable
   register int i_0;                                                    /*0013*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0014*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0015*/
   //PIPS generated variable
   int32_t volprevious_0;                                               /*0016*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0017*/
   //PIPS generated variable
   register int i_3;                                                    /*0018*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0019*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0020*/
   //PIPS generated variable
   int32_t volprevious_1;                                               /*0021*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0022*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0023*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0024*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0025*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0026*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0027*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0028*/
   //PIPS generated variable
   register int i_8;                                                    /*0029*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0030*/
   //PIPS generated variable
   
   freia_initialize(argc, argv);                                        /*0032*/

   freia_common_open_input(&fdin, 0);                                   /*0033*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0034*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0035*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0036*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0037*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0038*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0039*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0040*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0041*/
   i_0 = 1;                                                             /*0043*/
   i_0 = 1+1;                                                           /*0045*/
   
   
   _return1 = 0;                                                        /*0046*/
   
   
   _return4 = 0;                                                        /*0052*/
   
   
   _return5 = 0;                                                        /*0057*/
   
   // 1st step detect centers of halos
   
   
   main_spoc_helper_0_0_0(w1_0, w2_0, imIn, freia_morpho_kernel_8c, &volcurrent_0);    /*0042*/
   
   
   
   
   main_spoc_helper_0_0_1(w2_0, w2_0, freia_morpho_kernel_8c);          /*0054*/

   ret_0 = 0;                                                           /*0058*/
   do {                                                                 /*0059*/
      i_3 = 1;                                                          /*0061*/
      
      
      _return14 = 0;                                                    /*0062*/
      ret_1 = 0;                                                        /*0063*/
      i_3 = 1;                                                          /*0068*/
      
      
      _return14 = 0;                                                    /*0069*/
      i_3 = 1;                                                          /*0075*/
      
      
      _return14 = 0;                                                    /*0076*/
      i_3 = 1;                                                          /*0082*/
      
      
      _return14 = 0;                                                    /*0083*/
      i_3 = 1;                                                          /*0089*/
      
      
      _return14 = 0;                                                    /*0090*/
      i_3 = 1;                                                          /*0096*/
      
      
      _return14 = 0;                                                    /*0097*/
      i_3 = 1;                                                          /*0103*/
      
      
      _return14 = 0;                                                    /*0104*/
      i_3 = 1;                                                          /*0111*/
      
      
      _return14 = 0;                                                    /*0112*/
      
      
      main_spoc_helper_1_0_0(w1_0, imIn, w1_0, freia_morpho_kernel_8c, &volprevious_0, &volcurrent_0);               /*0060*/
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      _return12 = ret_1;                                                /*0065*/
      ret_0 |= _return12;                                               /*0066*/
      ret_1 = 0;                                                        /*0070*/
      
      
      _return12 = ret_1;                                                /*0072*/
      ret_0 |= _return12;                                               /*0073*/
      ret_1 = 0;                                                        /*0077*/
      
      
      _return12 = ret_1;                                                /*0079*/
      ret_0 |= _return12;                                               /*0080*/
      ret_1 = 0;                                                        /*0084*/
      
      
      _return12 = ret_1;                                                /*0086*/
      ret_0 |= _return12;                                               /*0087*/
      ret_1 = 0;                                                        /*0091*/
      
      
      _return12 = ret_1;                                                /*0093*/
      ret_0 |= _return12;                                               /*0094*/
      ret_1 = 0;                                                        /*0098*/
      
      
      _return12 = ret_1;                                                /*0100*/
      ret_0 |= _return12;                                               /*0101*/
      ret_1 = 0;                                                        /*0105*/
      
      
      _return12 = ret_1;                                                /*0107*/
      ret_0 |= _return12;                                               /*0108*/
      ret_1 = 0;                                                        /*0113*/
      
      
      _return12 = ret_1;                                                /*0115*/
      ret_0 |= _return12;                                               /*0116*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0059*/
   
   
   _return8 = ret_0;                                                    /*0118*/

   main_spoc_helper_2_0_0(w2_0, &volcurrent_1);                         /*0119*/
   do {                                                                 /*0120*/
      i_4 = 1;                                                          /*0122*/
      
      
      _return15 = 0;                                                    /*0123*/
      ret_3 = 0;                                                        /*0124*/
      i_4 = 1;                                                          /*0129*/
      
      
      _return15 = 0;                                                    /*0130*/
      i_4 = 1;                                                          /*0136*/
      
      
      _return15 = 0;                                                    /*0137*/
      i_4 = 1;                                                          /*0143*/
      
      
      _return15 = 0;                                                    /*0144*/
      i_4 = 1;                                                          /*0150*/
      
      
      _return15 = 0;                                                    /*0151*/
      i_4 = 1;                                                          /*0157*/
      
      
      _return15 = 0;                                                    /*0158*/
      i_4 = 1;                                                          /*0164*/
      
      
      _return15 = 0;                                                    /*0165*/
      i_4 = 1;                                                          /*0172*/
      
      
      _return15 = 0;                                                    /*0173*/
      
      
      main_spoc_helper_3_0_0(w2_0, imIn, w2_0, freia_morpho_kernel_8c, &volprevious_1, &volcurrent_1);               /*0121*/
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      _return13 = ret_3;                                                /*0126*/
      ret_2 |= _return13;                                               /*0127*/
      ret_3 = 0;                                                        /*0131*/
      
      
      _return13 = ret_3;                                                /*0133*/
      ret_2 |= _return13;                                               /*0134*/
      ret_3 = 0;                                                        /*0138*/
      
      
      _return13 = ret_3;                                                /*0140*/
      ret_2 |= _return13;                                               /*0141*/
      ret_3 = 0;                                                        /*0145*/
      
      
      _return13 = ret_3;                                                /*0147*/
      ret_2 |= _return13;                                               /*0148*/
      ret_3 = 0;                                                        /*0152*/
      
      
      _return13 = ret_3;                                                /*0154*/
      ret_2 |= _return13;                                               /*0155*/
      ret_3 = 0;                                                        /*0159*/
      
      
      _return13 = ret_3;                                                /*0161*/
      ret_2 |= _return13;                                               /*0162*/
      ret_3 = 0;                                                        /*0166*/
      
      
      _return13 = ret_3;                                                /*0168*/
      ret_2 |= _return13;                                               /*0169*/
      ret_3 = 0;                                                        /*0174*/
      
      
      _return13 = ret_3;                                                /*0176*/
      ret_2 |= _return13;                                               /*0177*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0120*/
   
   
   _return9 = ret_2;                                                    /*0179*/
   i_5 = 1;                                                             /*0183*/
   
   
   _return2 = 0;                                                        /*0184*/
   i_6 = 1;                                                             /*0190*/
   
   
   _return3 = 0;                                                        /*0191*/
   ret_4 = 0;                                                           /*0192*/
   i_7 = 1;                                                             /*0194*/
   
   
   _return6 = 0;                                                        /*0195*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0204*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0197*/

   main_spoc_helper_4_0_0(w1_0, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1, freia_morpho_kernel_8c);  /*0180*/
   
   
   
   
   // 2nd detect halos
   main_spoc_helper_4_1_0(w1_1, imIn, w1_0, 30, imIn->bpp==16?32767:255, 1, freia_morpho_kernel_8c, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);         /*0186*/
   
   
   
   
   
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0205*/
      i_8 = 1;                                                          /*0207*/
      
      
      _return11 = 0;                                                    /*0208*/
      measure_oldVol = measure_vol;                                     /*0210*/
      main_spoc_helper_5_0_0(w1_1, w3, w1_1, w3, freia_morpho_kernel_8c, &measure_vol);               /*0206*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0212*/
   
   
   _return10 = 0;                                                       /*0225*/
   ret_5 = 0;                                                           /*0226*/

   main_spoc_helper_6_0_0(imOut, w1_0, w3, freia_morpho_kernel_8c);     /*0214*/
   
   
   main_spoc_helper_6_0_1(imOut, imOut, w1_0, freia_morpho_kernel_8c, 4);              /*0222*/
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0228*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0229*/
   freia_common_destruct_data(w2_0);                                    /*0230*/
   freia_common_destruct_data(w3);                                      /*0231*/
   freia_common_destruct_data(w4);                                      /*0232*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0234*/
   freia_common_tx_image(imOut, &fdout);                                /*0235*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0236*/

   freia_common_destruct_data(imOut);                                   /*0237*/
   freia_common_close_input(&fdin);                                     /*0238*/
   freia_common_close_output(&fdout);                                   /*0239*/
   freia_shutdown();                                                    /*0240*/

   return 0;                                                            /*0241*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0001*/
   freia_data2d *imIn, *imOut;                                          /*0002*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0004*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0005*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0006*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0007*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0008*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0009*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0010*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0011*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0012*/
   //PIPS generated variable
   register int i_0;                                                    /*0013*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0014*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0015*/
   //PIPS generated variable
   int32_t volprevious_0;                                               /*0016*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0017*/
   //PIPS generated variable
   register int i_3;                                                    /*0018*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0019*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0020*/
   //PIPS generated variable
   int32_t volprevious_1;                                               /*0021*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0022*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0023*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0024*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0025*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0026*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0027*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0028*/
   //PIPS generated variable
   register int i_8;                                                    /*0029*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0030*/
   //PIPS generated variable
   
   freia_initialize(argc, argv);                                        /*0032*/

   freia_common_open_input(&fdin, 0);                                   /*0033*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0034*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0035*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0036*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0037*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0038*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0039*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0040*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0041*/
   i_0 = 1;                                                             /*0043*/
   i_0 = 2;                                                             /*0045*/
   
   
   _return1 = 0;                                                        /*0046*/
   
   
   _return4 = 0;                                                        /*0052*/
   
   
   _return5 = 0;                                                        /*0057*/
   
   // 1st step detect centers of halos
   
   
   main_spoc_helper_0_0_0(w1_0, w2_0, imIn, freia_morpho_kernel_8c, &volcurrent_0);    /*0042*/
   
   
   
   
   main_spoc_helper_0_0_1(w2_0, w2_0, freia_morpho_kernel_8c);          /*0054*/

   ret_0 = 0;                                                           /*0058*/
   do {                                                                 /*0059*/
      i_3 = 1;                                                          /*0061*/
      
      
      _return14 = 0;                                                    /*0062*/
      ret_1 = 0;                                                        /*0063*/
      i_3 = 1;                                                          /*0068*/
      
      
      _return14 = 0;                                                    /*0069*/
      i_3 = 1;                                                          /*0075*/
      
      
      _return14 = 0;                                                    /*0076*/
      i_3 = 1;                                                          /*0082*/
      
      
      _return14 = 0;                                                    /*0083*/
      i_3 = 1;                                                          /*0089*/
      
      
      _return14 = 0;                                                    /*0090*/
      i_3 = 1;                                                          /*0096*/
      
      
      _return14 = 0;                                                    /*0097*/
      i_3 = 1;                                                          /*0103*/
      
      
      _return14 = 0;                                                    /*0104*/
      i_3 = 1;                                                          /*0111*/
      
      
      _return14 = 0;                                                    /*0112*/
      
      
      main_spoc_helper_1_0_0(w1_0, imIn, w1_0, freia_morpho_kernel_8c, &volprevious_0, &volcurrent_0);               /*0060*/
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      _return12 = ret_1;                                                /*0065*/
      ret_0 |= _return12;                                               /*0066*/
      ret_1 = 0;                                                        /*0070*/
      
      
      _return12 = ret_1;                                                /*0072*/
      ret_0 |= _return12;                                               /*0073*/
      ret_1 = 0;                                                        /*0077*/
      
      
      _return12 = ret_1;                                                /*0079*/
      ret_0 |= _return12;                                               /*0080*/
      ret_1 = 0;                                                        /*0084*/
      
      
      _return12 = ret_1;                                                /*0086*/
      ret_0 |= _return12;                                               /*0087*/
      ret_1 = 0;                                                        /*0091*/
      
      
      _return12 = ret_1;                                                /*0093*/
      ret_0 |= _return12;                                               /*0094*/
      ret_1 = 0;                                                        /*0098*/
      
      
      _return12 = ret_1;                                                /*0100*/
      ret_0 |= _return12;                                               /*0101*/
      ret_1 = 0;                                                        /*0105*/
      
      
      _return12 = ret_1;                                                /*0107*/
      ret_0 |= _return12;                                               /*0108*/
      ret_1 = 0;                                                        /*0113*/
      
      
      _return12 = ret_1;                                                /*0115*/
      ret_0 |= _return12;                                               /*0116*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0059*/
   
   
   _return8 = ret_0;                                                    /*0118*/

   main_spoc_helper_2_0_0(w2_0, &volcurrent_1);                         /*0119*/
   do {                                                                 /*0120*/
      i_4 = 1;                                                          /*0122*/
      
      
      _return15 = 0;                                                    /*0123*/
      ret_3 = 0;                                                        /*0124*/
      i_4 = 1;                                                          /*0129*/
      
      
      _return15 = 0;                                                    /*0130*/
      i_4 = 1;                                                          /*0136*/
      
      
      _return15 = 0;                                                    /*0137*/
      i_4 = 1;                                                          /*0143*/
      
      
      _return15 = 0;                                                    /*0144*/
      i_4 = 1;                                                          /*0150*/
      
      
      _return15 = 0;                                                    /*0151*/
      i_4 = 1;                                                          /*0157*/
      
      
      _return15 = 0;                                                    /*0158*/
      i_4 = 1;                                                          /*0164*/
      
      
      _return15 = 0;                                                    /*0165*/
      i_4 = 1;                                                          /*0172*/
      
      
      _return15 = 0;                                                    /*0173*/
      
      
      main_spoc_helper_3_0_0(w2_0, imIn, w2_0, freia_morpho_kernel_8c, &volprevious_1, &volcurrent_1);               /*0121*/
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      _return13 = ret_3;                                                /*0126*/
      ret_2 |= _return13;                                               /*0127*/
      ret_3 = 0;                                                        /*0131*/
      
      
      _return13 = ret_3;                                                /*0133*/
      ret_2 |= _return13;                                               /*0134*/
      ret_3 = 0;                                                        /*0138*/
      
      
      _return13 = ret_3;                                                /*0140*/
      ret_2 |= _return13;                                               /*0141*/
      ret_3 = 0;                                                        /*0145*/
      
      
      _return13 = ret_3;                                                /*0147*/
      ret_2 |= _return13;                                               /*0148*/
      ret_3 = 0;                                                        /*0152*/
      
      
      _return13 = ret_3;                                                /*0154*/
      ret_2 |= _return13;                                               /*0155*/
      ret_3 = 0;                                                        /*0159*/
      
      
      _return13 = ret_3;                                                /*0161*/
      ret_2 |= _return13;                                               /*0162*/
      ret_3 = 0;                                                        /*0166*/
      
      
      _return13 = ret_3;                                                /*0168*/
      ret_2 |= _return13;                                               /*0169*/
      ret_3 = 0;                                                        /*0174*/
      
      
      _return13 = ret_3;                                                /*0176*/
      ret_2 |= _return13;                                               /*0177*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0120*/
   
   
   _return9 = ret_2;                                                    /*0179*/
   i_5 = 1;                                                             /*0183*/
   
   
   _return2 = 0;                                                        /*0184*/
   i_6 = 1;                                                             /*0190*/
   
   
   _return3 = 0;                                                        /*0191*/
   ret_4 = 0;                                                           /*0192*/
   i_7 = 1;                                                             /*0194*/
   
   
   _return6 = 0;                                                        /*0195*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0204*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0197*/

   main_spoc_helper_4_0_0(w1_0, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1, freia_morpho_kernel_8c);  /*0180*/
   
   
   
   
   // 2nd detect halos
   main_spoc_helper_4_1_0(w1_1, imIn, w1_0, 30, imIn->bpp==16?32767:255, 1, freia_morpho_kernel_8c, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);         /*0186*/
   
   
   
   
   
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0205*/
      i_8 = 1;                                                          /*0207*/
      
      
      _return11 = 0;                                                    /*0208*/
      measure_oldVol = measure_vol;                                     /*0210*/
      main_spoc_helper_5_0_0(w1_1, w3, w1_1, w3, freia_morpho_kernel_8c, &measure_vol);               /*0206*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0212*/
   
   
   _return10 = 0;                                                       /*0225*/
   ret_5 = 0;                                                           /*0226*/

   main_spoc_helper_6_0_0(imOut, w1_0, w3, freia_morpho_kernel_8c);     /*0214*/
   
   
   main_spoc_helper_6_0_1(imOut, imOut, w1_0, freia_morpho_kernel_8c, 4);              /*0222*/
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0228*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0229*/
   freia_common_destruct_data(w2_0);                                    /*0230*/
   freia_common_destruct_data(w3);                                      /*0231*/
   freia_common_destruct_data(w4);                                      /*0232*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0234*/
   freia_common_tx_image(imOut, &fdout);                                /*0235*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0236*/

   freia_common_destruct_data(imOut);                                   /*0237*/
   freia_common_close_input(&fdin);                                     /*0238*/
   freia_common_close_output(&fdout);                                   /*0239*/
   freia_shutdown();                                                    /*0240*/

   return 0;                                                            /*0241*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   register int i, j;                                                   /*0010*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0, i_1, i_2;                                          /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1, *w2_1;                                           /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   register int i_9;                                                    /*0066*/

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   i_0 = 1;                                                             /*0090*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = freia_aipo_global_vol(w1_0, &volcurrent_0);                  /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      ret_1 |= freia_aipo_inf(w1_0, w1_0, imIn);                        /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      ret_0 |= freia_aipo_global_vol(w1_0, &volcurrent_0);              /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_aipo_global_vol(w2_0, &volcurrent_1);                  /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      ret_3 |= freia_aipo_inf(w2_0, w2_0, imIn);                        /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      ret_2 |= freia_aipo_global_vol(w2_0, &volcurrent_1);              /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0, w1_0, 30, w1_0->bpp==16?32767:255, 1);    /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0167*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   freia_aipo_copy(w2_0, w1_0);                                         /*0172*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   w2_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0199*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_set_constant(w2_1, w1_1->bpp==16?32767:255);              /*0205*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/

   freia_aipo_copy(w3, w1_1);                                           /*0208*/
   measure_oldVol = 0;                                                  /*0209*/

   while (measure_vol!=measure_oldVol) {                                /*0211*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   freia_common_destruct_data(w2_1);                                    /*0226*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   ret_5 |= freia_aipo_inf(imOut, imOut, w1_0);                         /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_4" of module "main" in dot format
// DAG "dag_4": #i=3 #o=4 #c=12 #s=0 #I=2 #B=0 #A=0
digraph "dag_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w2_0'" [shape=circle];
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // computation vertices
  "208 =" [shape=circle];
  "208 =" -> "w3";
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "208 =" [label="w1_1"];
  "206 -s_" -> "w1_1";
  "205 C" [shape=trapezium,orientation=270];
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1"];
  "201 thr" -> "204 vol" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3"];
  "imIn" -> "175 thr";
  "172 =" [shape=circle];
  "172 =" -> "w2_0'";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "172 =" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "dag_5" of module "main" in dot format
// DAG "dag_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_6" of module "main" in dot format
// DAG "dag_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0_2"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_cleaned_4" of module "main" in dot format
// DAG "dag_cleaned_4": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=2
digraph "dag_cleaned_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";

  // external after copies: 2
  "w2_0'" [shape=circle];
  "w2_0 =" [shape=circle,label="=",style="dashed"]
  "w1_0'" -> "w2_0 =";
  "w2_0 =" -> "w2_0'";
  "w3" [shape=circle];
  "w3 =" [shape=circle,label="=",style="dashed"]
  "w1_1" -> "w3 =";
  "w3 =" -> "w3";
}
// graph for dag "dag_cleaned_5" of module "main" in dot format
// DAG "dag_cleaned_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_cleaned_6" of module "main" in dot format
// DAG "dag_cleaned_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "main_terapix_helper_0_0_0" of module "main" in dot format
// DAG "main_terapix_helper_0_0_0": #i=1 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0_2" [shape=circle];

  // computation vertices
  "100 E8" [shape=box];
  "100 E8" -> "w1_0_2";
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "main_terapix_helper_0_0_1" of module "main" in dot format
// DAG "main_terapix_helper_0_0_1": #i=1 #o=2 #c=7 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_1" {
  // inputs
  "w1_0_2" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "w1_0_2" -> "101 E8";
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "116 vol" [shape=diamond];
  "102 E8" [shape=box];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
}
// graph for dag "main_terapix_helper_1_0_0" of module "main" in dot format
// DAG "main_terapix_helper_1_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_1_0_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "main_terapix_helper_2_0_0" of module "main" in dot format
// DAG "main_terapix_helper_2_0_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_2_0_0" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "main_terapix_helper_3_0_0" of module "main" in dot format
// DAG "main_terapix_helper_3_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_3_0_0" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "main_terapix_helper_4_0_0" of module "main" in dot format
// DAG "main_terapix_helper_4_0_0": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_4_0_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "main_terapix_helper_5_0_0" of module "main" in dot format
// DAG "main_terapix_helper_5_0_0": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_5_0_0" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "221 vol" [shape=diamond];
  "214 E8" [shape=box];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "main_terapix_helper_6_0_0" of module "main" in dot format
// DAG "main_terapix_helper_6_0_0": #i=2 #o=1 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_6_0_0" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 12 ops and 0 copies, optimized to 12 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 5 image operations in dag
 * dag length is 6, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 75
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][6];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 2 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 5;
  int image_height = i0->heightWa;
  int max_computed_size = 331;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 341;
  int imagelet_3 = 682;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_3;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: D8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_2;
  mcu_macro[1][1].xmin1 = imagelet_2;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(1) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_2;
  mcu_macro[1][2].xmin2 = imagelet_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: E8(2) -> 1
  mcu_macro[0][3].xmin1 = imagelet_2;
  mcu_macro[1][3].xmin1 = imagelet_2;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_1_0;
  mcu_macro[1][3].xmin2 = imagelet_io_1_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(1) -> 2
  mcu_macro[0][4].xmin1 = imagelet_io_1_0;
  mcu_macro[1][4].xmin1 = imagelet_io_1_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_2;
  mcu_macro[1][4].xmin2 = imagelet_2;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 2 -> 1
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_1_0;
  mcu_macro[1][5].xmin2 = imagelet_io_1_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for imIn
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_0_2
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 5;
  mcu_instr.borderBottom = 5;
  mcu_instr.borderLeft   = 5;
  mcu_instr.borderRight  = 5;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 6;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 2 output images
 * 7 image operations in dag
 * dag length is 7, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 93
 * - communication: 72
 */
freia_status main_terapix_helper_0_0_1(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][8];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 6;
  int image_height = i0->heightWa;
  int max_computed_size = 192;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_2_0;
  mcu_macro[1][0].xmin2 = imagelet_io_2_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: E8(2) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // 3: E8(1) -> 2
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: E8(2) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_2_0;
  mcu_macro[1][4].xmin1 = imagelet_io_2_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: E8(3) -> 2
  mcu_macro[0][5].xmin1 = imagelet_3;
  mcu_macro[1][5].xmin1 = imagelet_3;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_2_0;
  mcu_macro[1][5].xmin2 = imagelet_io_2_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: E8(2) -> 3
  mcu_macro[0][6].xmin1 = imagelet_io_2_0;
  mcu_macro[1][6].xmin1 = imagelet_io_2_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_3;
  mcu_macro[1][6].xmin2 = imagelet_3;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // output copy 3 -> 2
  mcu_macro[0][7].xmin1 = imagelet_3;
  mcu_macro[1][7].xmin1 = imagelet_3;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_2_0;
  mcu_macro[1][7].xmin2 = imagelet_io_2_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for w1_0_2
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;
  // - imagelet 2 is o1 for w2_0
  tile_out[0][1].x = imagelet_io_2_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_2_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 6;
  mcu_instr.borderBottom = 6;
  mcu_instr.borderLeft   = 6;
  mcu_instr.borderRight  = 6;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 8;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 1: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 72
 */
freia_status main_terapix_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: <(3,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_INF3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for imIn
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w1_0
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w1_0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 2: 1 ops and 0 copies, optimized to 1 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 0 output image
 * 1 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 3
 * - communication: 24
 */
freia_status main_terapix_helper_2_0_0(
  const freia_data2d * i0,
  int32_t * po1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0_val initialization
  int16_t p_0_val[1];
  const int32_t x_0_val = 0;
  const int32_t y_0_val = 0;
  // array for reduction 0 extraction
  int32_t red_0[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_in[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = i0->heightWa;
  int max_computed_size = 511;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 511;

  // memory for reductions
  int reduction_0 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: vol(1)
  // initializing  0_val
  p_0_val[0] = 0;
  gram.xoffset = x_0_val;
  gram.yoffset = y_0_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 0_val
  mem_init.xmin1 = reduction_0;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_0
  mcu_macro[0][0].xmin2 = reduction_0;
  mcu_macro[1][0].xmin2 = reduction_0;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = 0;
  mcu_macro[1][0].xmin3 = 0;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_GLOBAL_VOL;

  // inputs:
  // - imagelet 1 is i0 for w2_0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // no output

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 0;
  mcu_instr.out0 = NULL;
  mcu_instr.out1 = NULL;

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, i0);

  // extract measures
  // get measure vol result from reduction_0
  redter.xres = reduction_0;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_0;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po1 = (int32_t) red_0[0];

  return ret;
}


// dag 3: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 3 image operations in dag
 * dag length is 4, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 72
 */
freia_status main_terapix_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t * po4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 2_val initialization
  int16_t p_2_val[1];
  const int32_t x_2_val = 3;
  const int32_t y_2_val = 0;
  // array for reduction 2 extraction
  int32_t red_2[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][3];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_2 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(2) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi3[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: <(3,1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = imagelet_io_1_0;
  mcu_macro[1][1].xmin3 = imagelet_io_1_1;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_INF3;
  // 2: vol(1)
  // initializing  2_val
  p_2_val[0] = 0;
  gram.xoffset = x_2_val;
  gram.yoffset = y_2_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_2_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 2_val
  mem_init.xmin1 = reduction_2;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_2
  mcu_macro[0][2].xmin2 = reduction_2;
  mcu_macro[1][2].xmin2 = reduction_2;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = 0;
  mcu_macro[1][2].xmin3 = 0;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].xmin1 = imagelet_io_1_0;
  mcu_macro[1][2].xmin1 = imagelet_io_1_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for imIn
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w2_0
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for w2_0
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 3;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures
  // get measure vol result from reduction_2
  redter.xres = reduction_2;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_2;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po4 = (int32_t) red_2[0];

  return ret;
}


// dag 4: 12 ops and 2 copies, optimized to 11 ops and 0+0+2 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 3 input images, 2 output images
 * 11 image operations in dag
 * dag length is 9, dag width is 3
 * costs in cycles per imagelet row:
 * - computation: 78
 * - communication: 120
 */
freia_status main_terapix_helper_4_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  const int32_t * pi8,
  int32_t pi9,
  int32_t pi10,
  int32_t pi11,
  int32_t pi12,
  int32_t pi13,
  int32_t pi14,
  int32_t * po15,
  int32_t pi16)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[3];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // operation 2 parameters
  int16_t p_2[9];
  const int32_t x_2 = 3;
  const int32_t y_2 = 0;
  // operation 3 parameters
  int16_t p_3[3];
  const int32_t x_3 = 6;
  const int32_t y_3 = 0;
  // operation 8 parameters
  int16_t p_8[3];
  const int32_t x_8 = 9;
  const int32_t y_8 = 0;
  // operation 9_val initialization
  int16_t p_9_val[1];
  const int32_t x_9_val = 12;
  const int32_t y_9_val = 0;
  // array for reduction 9 extraction
  int32_t red_9[1];
  // operation 10 parameters
  int16_t p_10[1];
  const int32_t x_10 = 13;
  const int32_t y_10 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][11];
  terapix_tile_info tile_in[2][3];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 3 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 164;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 170;
  int imagelet_3 = 340;
  int imagelet_4 = 510;
  int imagelet_5 = 680;
  int imagelet_6 = 850;

  // memory for reductions
  int reduction_9 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;
  int imagelet_io_3_0 = imagelet_3;
  int imagelet_io_3_1 = imagelet_6;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: -(2,3) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_3_0;
  mcu_macro[1][0].xmin2 = imagelet_io_3_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_3_0;
  mcu_macro[1][0].xmin3 = imagelet_io_3_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SUB3;
  // 1: thr(3) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_3_0;
  mcu_macro[1][1].xmin1 = imagelet_io_3_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_3_0;
  mcu_macro[1][1].xmin2 = imagelet_io_3_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi5;
  p_1[1] = pi6;
  p_1[2] = pi7;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_io_3_0;
  mcu_macro[1][2].xmin1 = imagelet_io_3_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  // copy of operation 2 parameters
  for(i=0; i<9; i++)
    p_2[i] = pi8[i];
  gram.xoffset = x_2;
  gram.yoffset = y_2;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_2;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][2].xmin3 = x_2;
  mcu_macro[1][2].xmin3 = x_2;
  mcu_macro[0][2].ymin3 = y_2;
  mcu_macro[1][2].ymin3 = y_2;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: thr(1) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_1_0;
  mcu_macro[1][3].xmin1 = imagelet_io_1_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_3_0;
  mcu_macro[1][3].xmin2 = imagelet_io_3_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  // copy of operation 3 parameters
  p_3[0] = pi9;
  p_3[1] = pi10;
  p_3[2] = pi11;
  gram.xoffset = x_3;
  gram.yoffset = y_3;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_3;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][3].xmin3 = x_3;
  mcu_macro[1][3].xmin3 = x_3;
  mcu_macro[0][3].ymin3 = y_3;
  mcu_macro[1][3].ymin3 = y_3;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 4: !(3) -> 3
  mcu_macro[0][4].xmin1 = imagelet_io_3_0;
  mcu_macro[1][4].xmin1 = imagelet_io_3_1;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_3_0;
  mcu_macro[1][4].xmin2 = imagelet_io_3_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_NOT;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_NOT;
  // 5: >(2,3) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_io_3_0;
  mcu_macro[1][5].xmin2 = imagelet_io_3_1;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = imagelet_io_3_0;
  mcu_macro[1][5].xmin3 = imagelet_io_3_1;
  mcu_macro[0][5].ymin3 = 0;
  mcu_macro[1][5].ymin3 = 0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_SUP3;
  // 6: D8(3) -> 1
  mcu_macro[0][6].xmin1 = imagelet_io_3_0;
  mcu_macro[1][6].xmin1 = imagelet_io_3_1;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_2;
  mcu_macro[1][6].xmin3 = x_2;
  mcu_macro[0][6].ymin3 = y_2;
  mcu_macro[1][6].ymin3 = y_2;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: E8(1) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_io_3_0;
  mcu_macro[1][7].xmin2 = imagelet_io_3_1;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_2;
  mcu_macro[1][7].xmin3 = x_2;
  mcu_macro[0][7].ymin3 = y_2;
  mcu_macro[1][7].ymin3 = y_2;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 8: thr(3) -> 3
  mcu_macro[0][8].xmin1 = imagelet_io_3_0;
  mcu_macro[1][8].xmin1 = imagelet_io_3_1;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_3_0;
  mcu_macro[1][8].xmin2 = imagelet_io_3_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  // copy of operation 8 parameters
  p_8[0] = pi12;
  p_8[1] = pi13;
  p_8[2] = pi14;
  gram.xoffset = x_8;
  gram.yoffset = y_8;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_8;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][8].xmin3 = x_8;
  mcu_macro[1][8].xmin3 = x_8;
  mcu_macro[0][8].ymin3 = y_8;
  mcu_macro[1][8].ymin3 = y_8;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 9: vol(3)
  // initializing  9_val
  p_9_val[0] = 0;
  gram.xoffset = x_9_val;
  gram.yoffset = y_9_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_9_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 9_val
  mem_init.xmin1 = reduction_9;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_9
  mcu_macro[0][9].xmin2 = reduction_9;
  mcu_macro[1][9].xmin2 = reduction_9;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = 0;
  mcu_macro[1][9].xmin3 = 0;
  mcu_macro[0][9].ymin3 = 0;
  mcu_macro[1][9].ymin3 = 0;
  mcu_macro[0][9].xmin1 = imagelet_io_3_0;
  mcu_macro[1][9].xmin1 = imagelet_io_3_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // 10: -s_(3) -> 1
  mcu_macro[0][10].xmin1 = imagelet_io_3_0;
  mcu_macro[1][10].xmin1 = imagelet_io_3_1;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_1_0;
  mcu_macro[1][10].xmin2 = imagelet_io_1_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  // copy of operation 10 parameters
  p_10[0] = pi16;
  gram.xoffset = x_10;
  gram.yoffset = y_10;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_10;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][10].xmin3 = x_10;
  mcu_macro[1][10].xmin3 = x_10;
  mcu_macro[0][10].ymin3 = y_10;
  mcu_macro[1][10].ymin3 = y_10;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_SUBSAT_CONST;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_SUBSAT_CONST;


  // inputs:
  // - imagelet 1 is i0 for imIn
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w1_0
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;
  // - imagelet 3 is i2 for w2_0
  tile_in[0][2].x = imagelet_io_3_0;
  tile_in[0][2].y = 0;
  tile_in[1][2].x = imagelet_io_3_1;
  tile_in[1][2].y = 0;

  // outputs:
  // - imagelet 2 is o0 for w1_0
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for w1_1
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 3;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 11;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1, i2);

  // extract measures
  // get measure vol result from reduction_9
  redter.xres = reduction_9;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_9;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po15 = (int32_t) red_9[0];

  return ret;
}


// dag 5: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 2 output images
 * 3 image operations in dag
 * dag length is 3, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 22
 * - communication: 96
 */
freia_status main_terapix_helper_5_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi4,
  int32_t * po5)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1_val initialization
  int16_t p_1_val[1];
  const int32_t x_1_val = 3;
  const int32_t y_1_val = 0;
  // array for reduction 1 extraction
  int32_t red_1[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][4];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][2];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 1;
  int image_height = i0->heightWa;
  int max_computed_size = 202;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_1 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 3
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_3;
  mcu_macro[1][0].xmin2 = imagelet_3;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi4[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: vol(3)
  // initializing  1_val
  p_1_val[0] = 0;
  gram.xoffset = x_1_val;
  gram.yoffset = y_1_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_1_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 1_val
  mem_init.xmin1 = reduction_1;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_1
  mcu_macro[0][1].xmin2 = reduction_1;
  mcu_macro[1][1].xmin2 = reduction_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = 0;
  mcu_macro[1][1].xmin3 = 0;
  mcu_macro[0][1].ymin3 = 0;
  mcu_macro[1][1].ymin3 = 0;
  mcu_macro[0][1].xmin1 = imagelet_3;
  mcu_macro[1][1].xmin1 = imagelet_3;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  // 2: +(2,3) -> 1
  mcu_macro[0][2].xmin1 = imagelet_io_2_0;
  mcu_macro[1][2].xmin1 = imagelet_io_2_1;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_3;
  mcu_macro[1][2].xmin2 = imagelet_3;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = imagelet_io_1_0;
  mcu_macro[1][2].xmin3 = imagelet_io_1_1;
  mcu_macro[0][2].ymin3 = 0;
  mcu_macro[1][2].ymin3 = 0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ADD3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ADD3;
  // output copy 3 -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_io_2_0;
  mcu_macro[1][3].xmin2 = imagelet_io_2_1;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_COPY;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_COPY;


  // inputs:
  // - imagelet 1 is i0 for w1_1
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w3
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 2 is o0 for w1_1
  tile_out[0][0].x = imagelet_io_2_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_2_1;
  tile_out[1][0].y = 0;
  // - imagelet 1 is o1 for w3
  tile_out[0][1].x = imagelet_io_1_0;
  tile_out[0][1].y = 0;
  tile_out[1][1].x = imagelet_io_1_1;
  tile_out[1][1].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 1;
  mcu_instr.borderBottom = 1;
  mcu_instr.borderLeft   = 1;
  mcu_instr.borderRight  = 1;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 2;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 4;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, o1, i0, i1);

  // extract measures
  // get measure vol result from reduction_1
  redter.xres = reduction_1;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_1;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po5 = (int32_t) red_1[0];

  return ret;
}


// dag 6: 13 ops and 0 copies, optimized to 13 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 2 input images, 1 output image
 * 13 image operations in dag
 * dag length is 14, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 161
 * - communication: 72
 */
freia_status main_terapix_helper_6_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 1 parameters
  int16_t p_1[9];
  const int32_t x_1 = 0;
  const int32_t y_1 = 0;
  // operation 12 parameters
  int16_t p_12[1];
  const int32_t x_12 = 3;
  const int32_t y_12 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][13];
  terapix_tile_info tile_in[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 3 computation imagelets
  // - 2 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 10;
  int image_height = i0->heightWa;
  int max_computed_size = 184;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_4;
  int imagelet_io_2_0 = imagelet_2;
  int imagelet_io_2_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: <(2,1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_2_0;
  mcu_macro[1][0].xmin1 = imagelet_io_2_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_io_1_0;
  mcu_macro[1][0].xmin2 = imagelet_io_1_1;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  mcu_macro[0][0].xmin3 = imagelet_io_2_0;
  mcu_macro[1][0].xmin3 = imagelet_io_2_1;
  mcu_macro[0][0].ymin3 = 0;
  mcu_macro[1][0].ymin3 = 0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_INF3;
  // 1: D8(2) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_2_0;
  mcu_macro[1][1].xmin1 = imagelet_io_2_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  for(i=0; i<9; i++)
    p_1[i] = pi3[i];
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: D8(3) -> 2
  mcu_macro[0][2].xmin1 = imagelet_3;
  mcu_macro[1][2].xmin1 = imagelet_3;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_io_2_0;
  mcu_macro[1][2].xmin2 = imagelet_io_2_1;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_1;
  mcu_macro[1][2].xmin3 = x_1;
  mcu_macro[0][2].ymin3 = y_1;
  mcu_macro[1][2].ymin3 = y_1;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: D8(2) -> 3
  mcu_macro[0][3].xmin1 = imagelet_io_2_0;
  mcu_macro[1][3].xmin1 = imagelet_io_2_1;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_3;
  mcu_macro[1][3].xmin2 = imagelet_3;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_1;
  mcu_macro[1][3].xmin3 = x_1;
  mcu_macro[0][3].ymin3 = y_1;
  mcu_macro[1][3].ymin3 = y_1;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: D8(3) -> 2
  mcu_macro[0][4].xmin1 = imagelet_3;
  mcu_macro[1][4].xmin1 = imagelet_3;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_io_2_0;
  mcu_macro[1][4].xmin2 = imagelet_io_2_1;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_1;
  mcu_macro[1][4].xmin3 = x_1;
  mcu_macro[0][4].ymin3 = y_1;
  mcu_macro[1][4].ymin3 = y_1;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: D8(2) -> 3
  mcu_macro[0][5].xmin1 = imagelet_io_2_0;
  mcu_macro[1][5].xmin1 = imagelet_io_2_1;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_3;
  mcu_macro[1][5].xmin2 = imagelet_3;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_1;
  mcu_macro[1][5].xmin3 = x_1;
  mcu_macro[0][5].ymin3 = y_1;
  mcu_macro[1][5].ymin3 = y_1;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: D8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_2_0;
  mcu_macro[1][6].xmin2 = imagelet_io_2_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_1;
  mcu_macro[1][6].xmin3 = x_1;
  mcu_macro[0][6].ymin3 = y_1;
  mcu_macro[1][6].ymin3 = y_1;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 7: D8(2) -> 3
  mcu_macro[0][7].xmin1 = imagelet_io_2_0;
  mcu_macro[1][7].xmin1 = imagelet_io_2_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_1;
  mcu_macro[1][7].xmin3 = x_1;
  mcu_macro[0][7].ymin3 = y_1;
  mcu_macro[1][7].ymin3 = y_1;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: D8(3) -> 2
  mcu_macro[0][8].xmin1 = imagelet_3;
  mcu_macro[1][8].xmin1 = imagelet_3;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_2_0;
  mcu_macro[1][8].xmin2 = imagelet_io_2_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_1;
  mcu_macro[1][8].xmin3 = x_1;
  mcu_macro[0][8].ymin3 = y_1;
  mcu_macro[1][8].ymin3 = y_1;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 9: D8(2) -> 3
  mcu_macro[0][9].xmin1 = imagelet_io_2_0;
  mcu_macro[1][9].xmin1 = imagelet_io_2_1;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_3;
  mcu_macro[1][9].xmin2 = imagelet_3;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_1;
  mcu_macro[1][9].xmin3 = x_1;
  mcu_macro[0][9].ymin3 = y_1;
  mcu_macro[1][9].ymin3 = y_1;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: D8(3) -> 2
  mcu_macro[0][10].xmin1 = imagelet_3;
  mcu_macro[1][10].xmin1 = imagelet_3;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_io_2_0;
  mcu_macro[1][10].xmin2 = imagelet_io_2_1;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_1;
  mcu_macro[1][10].xmin3 = x_1;
  mcu_macro[0][10].ymin3 = y_1;
  mcu_macro[1][10].ymin3 = y_1;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 11: <(2,1) -> 3
  mcu_macro[0][11].xmin1 = imagelet_io_2_0;
  mcu_macro[1][11].xmin1 = imagelet_io_2_1;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_io_1_0;
  mcu_macro[1][11].xmin2 = imagelet_io_1_1;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = imagelet_3;
  mcu_macro[1][11].xmin3 = imagelet_3;
  mcu_macro[0][11].ymin3 = 0;
  mcu_macro[1][11].ymin3 = 0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_INF3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_INF3;
  // 12: *_(3) -> 1
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_io_1_0;
  mcu_macro[1][12].xmin2 = imagelet_io_1_1;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  // copy of operation 12 parameters
  p_12[0] = pi4;
  gram.xoffset = x_12;
  gram.yoffset = y_12;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_12;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][12].xmin3 = x_12;
  mcu_macro[1][12].xmin3 = x_12;
  mcu_macro[0][12].ymin3 = y_12;
  mcu_macro[1][12].ymin3 = y_12;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_MUL_CONST;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_MUL_CONST;


  // inputs:
  // - imagelet 1 is i0 for w1_0
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;
  // - imagelet 2 is i1 for w3
  tile_in[0][1].x = imagelet_io_2_0;
  tile_in[0][1].y = 0;
  tile_in[1][1].x = imagelet_io_2_1;
  tile_in[1][1].y = 0;

  // outputs:
  // - imagelet 1 is o0 for imOut
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 10;
  mcu_instr.borderBottom = 10;
  mcu_instr.borderLeft   = 10;
  mcu_instr.borderRight  = 10;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 2;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 13;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0, i1);

  // extract measures

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   
   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/
   
   // 1st step detect centers of halos
   
   
   main_terapix_helper_0_0_0(w1_0, imIn, freia_morpho_kernel_8c);       /*0089*/
   
   
   main_terapix_helper_0_0_1(w1_0, w2_0, w1_0, freia_morpho_kernel_8c, &volcurrent_0);                /*0101*/
   
   
   
   ret_0 = 0;                                                           /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      main_terapix_helper_1_0_0(w1_0, imIn, w1_0, freia_morpho_kernel_8c, &volcurrent_0);             /*0121*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   main_terapix_helper_2_0_0(w2_0, &volcurrent_1);                      /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      main_terapix_helper_3_0_0(w2_0, imIn, w2_0, freia_morpho_kernel_8c, &volcurrent_1);             /*0144*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/

   main_terapix_helper_4_0_0(w1_0, w1_1, imIn, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1, freia_morpho_kernel_8c, 30, imIn->bpp==16?32767:255, 1, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);       /*0162*/
   
   
   
   
   // 2nd detect halos
   
   
   
   
   
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      main_terapix_helper_5_0_0(w1_1, w3, w1_1, w3, freia_morpho_kernel_8c, &measure_vol);            /*0214*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/

   main_terapix_helper_6_0_0(imOut, w1_0, w3, freia_morpho_kernel_8c, 4);              /*0228*/
   
   
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   
   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 2;                                                             /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/
   
   // 1st step detect centers of halos
   
   
   main_terapix_helper_0_0_0(w1_0, imIn, freia_morpho_kernel_8c);       /*0089*/
   
   
   main_terapix_helper_0_0_1(w1_0, w2_0, w1_0, freia_morpho_kernel_8c, &volcurrent_0);                /*0101*/
   
   
   
   ret_0 = 0;                                                           /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      main_terapix_helper_1_0_0(w1_0, imIn, w1_0, freia_morpho_kernel_8c, &volcurrent_0);             /*0121*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   main_terapix_helper_2_0_0(w2_0, &volcurrent_1);                      /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      main_terapix_helper_3_0_0(w2_0, imIn, w2_0, freia_morpho_kernel_8c, &volcurrent_1);             /*0144*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/

   main_terapix_helper_4_0_0(w1_0, w1_1, imIn, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1, freia_morpho_kernel_8c, 30, imIn->bpp==16?32767:255, 1, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);       /*0162*/
   
   
   
   
   // 2nd detect halos
   
   
   
   
   
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      main_terapix_helper_5_0_0(w1_1, w3, w1_1, w3, freia_morpho_kernel_8c, &measure_vol);            /*0214*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/

   main_terapix_helper_6_0_0(imOut, w1_0, w3, freia_morpho_kernel_8c, 4);              /*0228*/
   
   
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   register int i, j;                                                   /*0010*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0, i_1, i_2;                                          /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1, *w2_1;                                           /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   register int i_9;                                                    /*0066*/

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   i_0 = 1;                                                             /*0090*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = freia_aipo_global_vol(w1_0, &volcurrent_0);                  /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      ret_1 |= freia_aipo_inf(w1_0, w1_0, imIn);                        /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      ret_0 |= freia_aipo_global_vol(w1_0, &volcurrent_0);              /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_aipo_global_vol(w2_0, &volcurrent_1);                  /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      ret_3 |= freia_aipo_inf(w2_0, w2_0, imIn);                        /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      ret_2 |= freia_aipo_global_vol(w2_0, &volcurrent_1);              /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0, w1_0, 30, w1_0->bpp==16?32767:255, 1);    /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0167*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   freia_aipo_copy(w2_0, w1_0);                                         /*0172*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   w2_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0199*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_set_constant(w2_1, w1_1->bpp==16?32767:255);              /*0205*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/

   freia_aipo_copy(w3, w1_1);                                           /*0208*/
   measure_oldVol = 0;                                                  /*0209*/

   while (measure_vol!=measure_oldVol) {                                /*0211*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   freia_common_destruct_data(w2_1);                                    /*0226*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   ret_5 |= freia_aipo_inf(imOut, imOut, w1_0);                         /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_4" of module "main" in dot format
// DAG "dag_4": #i=3 #o=4 #c=12 #s=0 #I=2 #B=0 #A=0
digraph "dag_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w2_0'" [shape=circle];
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // computation vertices
  "208 =" [shape=circle];
  "208 =" -> "w3";
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "208 =" [label="w1_1"];
  "206 -s_" -> "w1_1";
  "205 C" [shape=trapezium,orientation=270];
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1"];
  "201 thr" -> "204 vol" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3"];
  "imIn" -> "175 thr";
  "172 =" [shape=circle];
  "172 =" -> "w2_0'";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "172 =" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "dag_5" of module "main" in dot format
// DAG "dag_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_6" of module "main" in dot format
// DAG "dag_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0_2"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_cleaned_4" of module "main" in dot format
// DAG "dag_cleaned_4": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=2
digraph "dag_cleaned_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";

  // external after copies: 2
  "w2_0'" [shape=circle];
  "w2_0 =" [shape=circle,label="=",style="dashed"]
  "w1_0'" -> "w2_0 =";
  "w2_0 =" -> "w2_0'";
  "w3" [shape=circle];
  "w3 =" [shape=circle,label="=",style="dashed"]
  "w1_1" -> "w3 =";
  "w3 =" -> "w3";
}
// graph for dag "dag_cleaned_5" of module "main" in dot format
// DAG "dag_cleaned_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_cleaned_6" of module "main" in dot format
// DAG "dag_cleaned_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "main_opencl_helper_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "116 vol" [shape=diamond];
  "102 E8" [shape=box];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0_2"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "main_opencl_helper_0_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0_0": #i=1 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_0" {
  // inputs
  "w1_0" [shape=circle];

  // outputs
  "w2_0_3" [shape=circle];

  // computation vertices
  "108 E8" [shape=box];
  "108 E8" -> "w2_0_3";
  "116 vol" [shape=diamond];
  "w1_0" -> "108 E8";
  "w1_0" -> "116 vol";
}
// graph for dag "main_opencl_helper_1_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "main_opencl_helper_1_0_0" of module "main" in dot format
// DAG "main_opencl_helper_1_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_1_0_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "main_opencl_helper_2_0" of module "main" in dot format
// DAG "main_opencl_helper_2_0": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_2_0" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "main_opencl_helper_3_0" of module "main" in dot format
// DAG "main_opencl_helper_3_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_3_0" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "main_opencl_helper_3_0_0" of module "main" in dot format
// DAG "main_opencl_helper_3_0_0": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_3_0_0" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "main_opencl_helper_4_0" of module "main" in dot format
// DAG "main_opencl_helper_4_0": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_4_0" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "main_opencl_helper_4_0_0" of module "main" in dot format
// DAG "main_opencl_helper_4_0_0": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_4_0_0" {
  // inputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0_8" [shape=circle];

  // computation vertices
  "164 thr" [shape=parallelogram];
  "164 thr" -> "w1_0_8";
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "main_opencl_helper_4_0_1" of module "main" in dot format
// DAG "main_opencl_helper_4_0_1": #i=1 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_4_0_1" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w3_1" [shape=circle];

  // computation vertices
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "w3_1";
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
}
// graph for dag "main_opencl_helper_4_0_2" of module "main" in dot format
// DAG "main_opencl_helper_4_0_2": #i=2 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_4_0_2" {
  // inputs
  "w1_0_8" [shape=circle];
  "w3_1" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w4_2" [shape=circle];

  // computation vertices
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "w4_2";
  "w3_1" -> "178 >";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0";
  "w1_0_8" -> "167 D8";
}
// graph for dag "main_opencl_helper_4_0_4" of module "main" in dot format
// DAG "main_opencl_helper_4_0_4": #i=1 #o=1 #c=4 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_4_0_4" {
  // inputs
  "w4_1" [shape=circle];

  // outputs
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "w4_1" -> "189 E8";
}
// graph for dag "main_opencl_helper_5_0" of module "main" in dot format
// DAG "main_opencl_helper_5_0": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_5_0" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "main_opencl_helper_5_0_0" of module "main" in dot format
// DAG "main_opencl_helper_5_0_0": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_5_0_0" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "main_opencl_helper_6_0" of module "main" in dot format
// DAG "main_opencl_helper_6_0": #i=2 #o=1 #c=13 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_6_0" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "main_opencl_helper_6_0_2" of module "main" in dot format
// DAG "main_opencl_helper_6_0_2": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_6_0_2" {
  // inputs
  "imOut_3" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "w1_0" -> "245 <";
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "imOut_3" -> "240 D8";
}
// graph for dag "main_opencl_helper_D8_511" of module "main" in dot format
// DAG "main_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_511" {
  // inputs
  "w1_0_6" [shape=circle];

  // outputs
  "w1_0_5" [shape=circle];

  // computation vertices
  "91 D8" [shape=box];
  "91 D8" -> "w1_0_5";
  "w1_0_6" -> "91 D8";
}
// graph for dag "main_opencl_helper_E8_511" of module "main" in dot format
// DAG "main_opencl_helper_E8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_E8_511" {
  // inputs
  "w2_0_1" [shape=circle];

  // outputs
  "w2_0" [shape=circle];

  // computation vertices
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "w2_0_1" -> "111 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 12 ops and 0 copies, optimized to 12 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_0_0_0
static cl_kernel main_opencl_helper_0_0_0_kernel[2];

// compile kernels for main_opencl_helper_0_0_0
static freia_status main_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_0
  const char * main_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_0\n"
    "KERNEL void main_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL t108 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL_VOLUME(red116, in0);\n"
    "    t108 = PIXEL_INF(t108, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t108 = PIXEL_INF(t108, (is_N)? PIXEL_MAX: in0N);\n"
    "    t108 = PIXEL_INF(t108, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t108 = PIXEL_INF(t108, (is_W)? PIXEL_MAX: in0W);\n"
    "    t108 = PIXEL_INF(t108, in0);\n"
    "    t108 = PIXEL_INF(t108, (is_E)? PIXEL_MAX: in0E);\n"
    "    t108 = PIXEL_INF(t108, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t108 = PIXEL_INF(t108, (is_S)? PIXEL_MAX: in0S);\n"
    "    t108 = PIXEL_INF(t108, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t108;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL8", &main_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL16", &main_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_0
freia_status main_opencl_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t * po2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 1, o0, i0, &redres);

  // return reduction results
  *po2 = redres.volume;

  return err;
}

// hold kernels for main_opencl_helper_E8_511
static cl_kernel main_opencl_helper_E8_511_kernel[2];

// compile kernels for main_opencl_helper_E8_511
static freia_status main_opencl_helper_E8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_E8_511
  const char * main_opencl_helper_E8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_E8_511\n"
    "KERNEL void main_opencl_helper_E8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t111 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t111 = PIXEL_INF(t111, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t111 = PIXEL_INF(t111, (is_N)? PIXEL_MAX: in0N);\n"
    "    t111 = PIXEL_INF(t111, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t111 = PIXEL_INF(t111, (is_W)? PIXEL_MAX: in0W);\n"
    "    t111 = PIXEL_INF(t111, in0);\n"
    "    t111 = PIXEL_INF(t111, (is_E)? PIXEL_MAX: in0E);\n"
    "    t111 = PIXEL_INF(t111, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t111 = PIXEL_INF(t111, (is_S)? PIXEL_MAX: in0S);\n"
    "    t111 = PIXEL_INF(t111, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t111;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_E8_511_source, "main_opencl_helper_E8_511", "-DPIXEL8", &main_opencl_helper_E8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_E8_511_source, "main_opencl_helper_E8_511", "-DPIXEL16", &main_opencl_helper_E8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_E8_511
freia_status main_opencl_helper_E8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_E8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_E8_511_kernel[bpp];

  // call kernel main_opencl_helper_E8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_511
static cl_kernel main_opencl_helper_D8_511_kernel[2];

// compile kernels for main_opencl_helper_D8_511
static freia_status main_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_511
  const char * main_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_511\n"
    "KERNEL void main_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t91 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t91 = PIXEL_SUP(t91, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t91 = PIXEL_SUP(t91, (is_N)? PIXEL_MIN: in0N);\n"
    "    t91 = PIXEL_SUP(t91, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t91 = PIXEL_SUP(t91, (is_W)? PIXEL_MIN: in0W);\n"
    "    t91 = PIXEL_SUP(t91, in0);\n"
    "    t91 = PIXEL_SUP(t91, (is_E)? PIXEL_MIN: in0E);\n"
    "    t91 = PIXEL_SUP(t91, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t91 = PIXEL_SUP(t91, (is_S)? PIXEL_MIN: in0S);\n"
    "    t91 = PIXEL_SUP(t91, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t91;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL8", &main_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL16", &main_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_511
freia_status main_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_511_kernel[bpp];

  // call kernel main_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// dag 1: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_1_0_0
static cl_kernel main_opencl_helper_1_0_0_kernel[2];

// compile kernels for main_opencl_helper_1_0_0
static freia_status main_opencl_helper_1_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_1_0_0
  const char * main_opencl_helper_1_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_1_0_0\n"
    "KERNEL void main_opencl_helper_1_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t121 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t121 = PIXEL_SUP(t121, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t121 = PIXEL_SUP(t121, (is_N)? PIXEL_MIN: in1N);\n"
    "    t121 = PIXEL_SUP(t121, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t121 = PIXEL_SUP(t121, (is_W)? PIXEL_MIN: in1W);\n"
    "    t121 = PIXEL_SUP(t121, in1);\n"
    "    t121 = PIXEL_SUP(t121, (is_E)? PIXEL_MIN: in1E);\n"
    "    t121 = PIXEL_SUP(t121, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t121 = PIXEL_SUP(t121, (is_S)? PIXEL_MIN: in1S);\n"
    "    t121 = PIXEL_SUP(t121, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    PIXEL t127 = PIXEL_INF(t121, in0);\n"
    "    PIXEL_VOLUME(red132, t127);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t127;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL8", &main_opencl_helper_1_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_1_0_0_source, "main_opencl_helper_1_0_0", "-DPIXEL16", &main_opencl_helper_1_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_1_0_0
freia_status main_opencl_helper_1_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_1_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_1_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_1_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.volume;

  return err;
}

// dag 2: 1 ops and 0 copies, optimized to 1 ops and 0+0+0 copies

// dag 3: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_3_0_0
static cl_kernel main_opencl_helper_3_0_0_kernel[2];

// compile kernels for main_opencl_helper_3_0_0
static freia_status main_opencl_helper_3_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_3_0_0
  const char * main_opencl_helper_3_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_3_0_0\n"
    "KERNEL void main_opencl_helper_3_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t144 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t144 = PIXEL_SUP(t144, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t144 = PIXEL_SUP(t144, (is_N)? PIXEL_MIN: in1N);\n"
    "    t144 = PIXEL_SUP(t144, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t144 = PIXEL_SUP(t144, (is_W)? PIXEL_MIN: in1W);\n"
    "    t144 = PIXEL_SUP(t144, in1);\n"
    "    t144 = PIXEL_SUP(t144, (is_E)? PIXEL_MIN: in1E);\n"
    "    t144 = PIXEL_SUP(t144, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t144 = PIXEL_SUP(t144, (is_S)? PIXEL_MIN: in1S);\n"
    "    t144 = PIXEL_SUP(t144, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    PIXEL t150 = PIXEL_INF(t144, in0);\n"
    "    PIXEL_VOLUME(red155, t150);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t150;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_3_0_0_source, "main_opencl_helper_3_0_0", "-DPIXEL8", &main_opencl_helper_3_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_3_0_0_source, "main_opencl_helper_3_0_0", "-DPIXEL16", &main_opencl_helper_3_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_3_0_0
freia_status main_opencl_helper_3_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_3_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_3_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_3_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 1, o0, i0, i1, &redres);

  // return reduction results
  *po3 = redres.volume;

  return err;
}

// dag 4: 12 ops and 2 copies, optimized to 11 ops and 0+0+2 copies

// hold kernels for main_opencl_helper_4_0_0
static cl_kernel main_opencl_helper_4_0_0_kernel[2];

// compile kernels for main_opencl_helper_4_0_0
static freia_status main_opencl_helper_4_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_4_0_0
  const char * main_opencl_helper_4_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_4_0_0\n"
    "KERNEL void main_opencl_helper_4_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t162 = PIXEL_SUB(in0, in1);\n"
    "    PIXEL t164 = PIXEL_THRESHOLD(t162, c0, c1, c2);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t164;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_0_source, "main_opencl_helper_4_0_0", "-DPIXEL8", &main_opencl_helper_4_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_0_source, "main_opencl_helper_4_0_0", "-DPIXEL16", &main_opencl_helper_4_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_4_0_0
freia_status main_opencl_helper_4_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_4_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_4_0_0_kernel[bpp];

  // call kernel main_opencl_helper_4_0_0
  err |= freia_op_call_kernel(kernel, 1, 2, 3, 0, o0, i0, i1, c0, c1, c2);

  return err;
}

// hold kernels for main_opencl_helper_4_0_1
static cl_kernel main_opencl_helper_4_0_1_kernel[2];

// compile kernels for main_opencl_helper_4_0_1
static freia_status main_opencl_helper_4_0_1_compile(void)
{
  // OpenCL source for main_opencl_helper_4_0_1
  const char * main_opencl_helper_4_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_4_0_1\n"
    "KERNEL void main_opencl_helper_4_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // get input pixels\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t175 = PIXEL_THRESHOLD(in0, c0, c1, c2);\n"
    "    PIXEL t176 = PIXEL_NOT(t175);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t176;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_1_source, "main_opencl_helper_4_0_1", "-DPIXEL8", &main_opencl_helper_4_0_1_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_1_source, "main_opencl_helper_4_0_1", "-DPIXEL16", &main_opencl_helper_4_0_1_kernel[1]);
  return err;
}

// helper function main_opencl_helper_4_0_1
freia_status main_opencl_helper_4_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t c0,
  int32_t c1,
  int32_t c2)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_4_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_4_0_1_kernel[bpp];

  // call kernel main_opencl_helper_4_0_1
  err |= freia_op_call_kernel(kernel, 1, 1, 3, 0, o0, i0, c0, c1, c2);

  return err;
}

// hold kernels for main_opencl_helper_4_0_2
static cl_kernel main_opencl_helper_4_0_2_kernel[2];

// compile kernels for main_opencl_helper_4_0_2
static freia_status main_opencl_helper_4_0_2_compile(void)
{
  // OpenCL source for main_opencl_helper_4_0_2
  const char * main_opencl_helper_4_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_4_0_2\n"
    "KERNEL void main_opencl_helper_4_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t167 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t167 = PIXEL_SUP(t167, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t167 = PIXEL_SUP(t167, (is_N)? PIXEL_MIN: in0N);\n"
    "    t167 = PIXEL_SUP(t167, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t167 = PIXEL_SUP(t167, (is_W)? PIXEL_MIN: in0W);\n"
    "    t167 = PIXEL_SUP(t167, in0);\n"
    "    t167 = PIXEL_SUP(t167, (is_E)? PIXEL_MIN: in0E);\n"
    "    t167 = PIXEL_SUP(t167, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t167 = PIXEL_SUP(t167, (is_S)? PIXEL_MIN: in0S);\n"
    "    t167 = PIXEL_SUP(t167, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    PIXEL t178 = PIXEL_SUP(t167, in1);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t167;\n"
    "    p1[i] = t178;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_2_source, "main_opencl_helper_4_0_2", "-DPIXEL8", &main_opencl_helper_4_0_2_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_2_source, "main_opencl_helper_4_0_2", "-DPIXEL16", &main_opencl_helper_4_0_2_kernel[1]);
  return err;
}

// helper function main_opencl_helper_4_0_2
freia_status main_opencl_helper_4_0_2(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_4_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_4_0_2_kernel[bpp];

  // call kernel main_opencl_helper_4_0_2
  err |= freia_op_call_kernel(kernel, 2, 2, 0, 0, o0, o1, i0, i1);

  return err;
}

// hold kernels for main_opencl_helper_4_0_4
static cl_kernel main_opencl_helper_4_0_4_kernel[2];

// compile kernels for main_opencl_helper_4_0_4
static freia_status main_opencl_helper_4_0_4_compile(void)
{
  // OpenCL source for main_opencl_helper_4_0_4
  const char * main_opencl_helper_4_0_4_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_4_0_4\n"
    "KERNEL void main_opencl_helper_4_0_4(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t189 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t189 = PIXEL_INF(t189, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t189 = PIXEL_INF(t189, (is_N)? PIXEL_MAX: in0N);\n"
    "    t189 = PIXEL_INF(t189, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t189 = PIXEL_INF(t189, (is_W)? PIXEL_MAX: in0W);\n"
    "    t189 = PIXEL_INF(t189, in0);\n"
    "    t189 = PIXEL_INF(t189, (is_E)? PIXEL_MAX: in0E);\n"
    "    t189 = PIXEL_INF(t189, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t189 = PIXEL_INF(t189, (is_S)? PIXEL_MAX: in0S);\n"
    "    t189 = PIXEL_INF(t189, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t201 = PIXEL_THRESHOLD(t189, c0, c1, c2);\n"
    "    PIXEL_VOLUME(red204, t201);\n"
    "    PIXEL t206 = PIXEL_SUBSAT(t201, c3);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t206;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_4_source, "main_opencl_helper_4_0_4", "-DPIXEL8", &main_opencl_helper_4_0_4_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_4_0_4_source, "main_opencl_helper_4_0_4", "-DPIXEL16", &main_opencl_helper_4_0_4_kernel[1]);
  return err;
}

// helper function main_opencl_helper_4_0_4
freia_status main_opencl_helper_4_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t * po2,
  int32_t c3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_4_0_4_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_4_0_4_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_4_0_4
  err |= freia_op_call_kernel(kernel, 1, 1, 4, 1, o0, i0, c0, c1, c2, c3, &redres);

  // return reduction results
  *po2 = redres.volume;

  return err;
}

// dag 5: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_5_0_0
static cl_kernel main_opencl_helper_5_0_0_kernel[2];

// compile kernels for main_opencl_helper_5_0_0
static freia_status main_opencl_helper_5_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_5_0_0
  const char * main_opencl_helper_5_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_5_0_0\n"
    "KERNEL void main_opencl_helper_5_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t214 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t214 = PIXEL_INF(t214, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t214 = PIXEL_INF(t214, (is_N)? PIXEL_MAX: in0N);\n"
    "    t214 = PIXEL_INF(t214, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t214 = PIXEL_INF(t214, (is_W)? PIXEL_MAX: in0W);\n"
    "    t214 = PIXEL_INF(t214, in0);\n"
    "    t214 = PIXEL_INF(t214, (is_E)? PIXEL_MAX: in0E);\n"
    "    t214 = PIXEL_INF(t214, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t214 = PIXEL_INF(t214, (is_S)? PIXEL_MAX: in0S);\n"
    "    t214 = PIXEL_INF(t214, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "    PIXEL t219 = PIXEL_ADD(in1, t214);\n"
    "    PIXEL_VOLUME(red221, t214);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t214;\n"
    "    p1[i] = t219;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_5_0_0_source, "main_opencl_helper_5_0_0", "-DPIXEL8", &main_opencl_helper_5_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_5_0_0_source, "main_opencl_helper_5_0_0", "-DPIXEL16", &main_opencl_helper_5_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_5_0_0
freia_status main_opencl_helper_5_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po4)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_5_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_5_0_0_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_5_0_0
  err |= freia_op_call_kernel(kernel, 2, 2, 0, 1, o0, o1, i0, i1, &redres);

  // return reduction results
  *po4 = redres.volume;

  return err;
}

// dag 6: 13 ops and 0 copies, optimized to 13 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_6_0_2
static cl_kernel main_opencl_helper_6_0_2_kernel[2];

// compile kernels for main_opencl_helper_6_0_2
static freia_status main_opencl_helper_6_0_2_compile(void)
{
  // OpenCL source for main_opencl_helper_6_0_2
  const char * main_opencl_helper_6_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_6_0_2\n"
    "KERNEL void main_opencl_helper_6_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t240 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL in1 = j1[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t240 = PIXEL_SUP(t240, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t240 = PIXEL_SUP(t240, (is_N)? PIXEL_MIN: in0N);\n"
    "    t240 = PIXEL_SUP(t240, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t240 = PIXEL_SUP(t240, (is_W)? PIXEL_MIN: in0W);\n"
    "    t240 = PIXEL_SUP(t240, in0);\n"
    "    t240 = PIXEL_SUP(t240, (is_E)? PIXEL_MIN: in0E);\n"
    "    t240 = PIXEL_SUP(t240, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t240 = PIXEL_SUP(t240, (is_S)? PIXEL_MIN: in0S);\n"
    "    t240 = PIXEL_SUP(t240, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    PIXEL t245 = PIXEL_INF(t240, in1);\n"
    "    PIXEL t257 = PIXEL_MUL(t245, c0);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t257;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_6_0_2_source, "main_opencl_helper_6_0_2", "-DPIXEL8", &main_opencl_helper_6_0_2_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_6_0_2_source, "main_opencl_helper_6_0_2", "-DPIXEL16", &main_opencl_helper_6_0_2_kernel[1]);
  return err;
}

// helper function main_opencl_helper_6_0_2
freia_status main_opencl_helper_6_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_6_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_6_0_2_kernel[bpp];

  // call kernel main_opencl_helper_6_0_2
  err |= freia_op_call_kernel(kernel, 1, 2, 1, 0, o0, i0, i1, c0);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl function main_opencl_helper_0_0_0
KERNEL void main_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL t108 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    PIXEL_VOLUME(red116, in0);
    t108 = PIXEL_INF(t108, (is_N|is_W)? PIXEL_MAX: in0NW);
    t108 = PIXEL_INF(t108, (is_N)? PIXEL_MAX: in0N);
    t108 = PIXEL_INF(t108, (is_N|is_E)? PIXEL_MAX: in0NE);
    t108 = PIXEL_INF(t108, (is_W)? PIXEL_MAX: in0W);
    t108 = PIXEL_INF(t108, in0);
    t108 = PIXEL_INF(t108, (is_E)? PIXEL_MAX: in0E);
    t108 = PIXEL_INF(t108, (is_S|is_W)? PIXEL_MAX: in0SW);
    t108 = PIXEL_INF(t108, (is_S)? PIXEL_MAX: in0S);
    t108 = PIXEL_INF(t108, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t108;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl function main_opencl_helper_E8_511
KERNEL void main_opencl_helper_E8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t111 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t111 = PIXEL_INF(t111, (is_N|is_W)? PIXEL_MAX: in0NW);
    t111 = PIXEL_INF(t111, (is_N)? PIXEL_MAX: in0N);
    t111 = PIXEL_INF(t111, (is_N|is_E)? PIXEL_MAX: in0NE);
    t111 = PIXEL_INF(t111, (is_W)? PIXEL_MAX: in0W);
    t111 = PIXEL_INF(t111, in0);
    t111 = PIXEL_INF(t111, (is_E)? PIXEL_MAX: in0E);
    t111 = PIXEL_INF(t111, (is_S|is_W)? PIXEL_MAX: in0SW);
    t111 = PIXEL_INF(t111, (is_S)? PIXEL_MAX: in0S);
    t111 = PIXEL_INF(t111, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t111;
  }
}

// opencl function main_opencl_helper_D8_511
KERNEL void main_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t91 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t91 = PIXEL_SUP(t91, (is_N|is_W)? PIXEL_MIN: in0NW);
    t91 = PIXEL_SUP(t91, (is_N)? PIXEL_MIN: in0N);
    t91 = PIXEL_SUP(t91, (is_N|is_E)? PIXEL_MIN: in0NE);
    t91 = PIXEL_SUP(t91, (is_W)? PIXEL_MIN: in0W);
    t91 = PIXEL_SUP(t91, in0);
    t91 = PIXEL_SUP(t91, (is_E)? PIXEL_MIN: in0E);
    t91 = PIXEL_SUP(t91, (is_S|is_W)? PIXEL_MIN: in0SW);
    t91 = PIXEL_SUP(t91, (is_S)? PIXEL_MIN: in0S);
    t91 = PIXEL_SUP(t91, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t91;
  }
}

// opencl for dag 1

// opencl function main_opencl_helper_1_0_0
KERNEL void main_opencl_helper_1_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t121 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t121 = PIXEL_SUP(t121, (is_N|is_W)? PIXEL_MIN: in1NW);
    t121 = PIXEL_SUP(t121, (is_N)? PIXEL_MIN: in1N);
    t121 = PIXEL_SUP(t121, (is_N|is_E)? PIXEL_MIN: in1NE);
    t121 = PIXEL_SUP(t121, (is_W)? PIXEL_MIN: in1W);
    t121 = PIXEL_SUP(t121, in1);
    t121 = PIXEL_SUP(t121, (is_E)? PIXEL_MIN: in1E);
    t121 = PIXEL_SUP(t121, (is_S|is_W)? PIXEL_MIN: in1SW);
    t121 = PIXEL_SUP(t121, (is_S)? PIXEL_MIN: in1S);
    t121 = PIXEL_SUP(t121, (is_S|is_E)? PIXEL_MIN: in1SE);
    PIXEL t127 = PIXEL_INF(t121, in0);
    PIXEL_VOLUME(red132, t127);

    // set output pixels
    p0[i] = t127;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 2

// opencl for dag 3

// opencl function main_opencl_helper_3_0_0
KERNEL void main_opencl_helper_3_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t144 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t144 = PIXEL_SUP(t144, (is_N|is_W)? PIXEL_MIN: in1NW);
    t144 = PIXEL_SUP(t144, (is_N)? PIXEL_MIN: in1N);
    t144 = PIXEL_SUP(t144, (is_N|is_E)? PIXEL_MIN: in1NE);
    t144 = PIXEL_SUP(t144, (is_W)? PIXEL_MIN: in1W);
    t144 = PIXEL_SUP(t144, in1);
    t144 = PIXEL_SUP(t144, (is_E)? PIXEL_MIN: in1E);
    t144 = PIXEL_SUP(t144, (is_S|is_W)? PIXEL_MIN: in1SW);
    t144 = PIXEL_SUP(t144, (is_S)? PIXEL_MIN: in1S);
    t144 = PIXEL_SUP(t144, (is_S|is_E)? PIXEL_MIN: in1SE);
    PIXEL t150 = PIXEL_INF(t144, in0);
    PIXEL_VOLUME(red155, t150);

    // set output pixels
    p0[i] = t150;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 4

// opencl function main_opencl_helper_4_0_0
KERNEL void main_opencl_helper_4_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];
    PIXEL in1 = j1[i];

    // pixel computations
    PIXEL t162 = PIXEL_SUB(in0, in1);
    PIXEL t164 = PIXEL_THRESHOLD(t162, c0, c1, c2);

    // set output pixels
    p0[i] = t164;
  }
}

// opencl function main_opencl_helper_4_0_1
KERNEL void main_opencl_helper_4_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // get input pixels
    PIXEL in0 = j0[i];

    // pixel computations
    PIXEL t175 = PIXEL_THRESHOLD(in0, c0, c1, c2);
    PIXEL t176 = PIXEL_NOT(t175);

    // set output pixels
    p0[i] = t176;
  }
}

// opencl function main_opencl_helper_4_0_2
KERNEL void main_opencl_helper_4_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t167 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL in1 = j1[i];

    // pixel computations
    t167 = PIXEL_SUP(t167, (is_N|is_W)? PIXEL_MIN: in0NW);
    t167 = PIXEL_SUP(t167, (is_N)? PIXEL_MIN: in0N);
    t167 = PIXEL_SUP(t167, (is_N|is_E)? PIXEL_MIN: in0NE);
    t167 = PIXEL_SUP(t167, (is_W)? PIXEL_MIN: in0W);
    t167 = PIXEL_SUP(t167, in0);
    t167 = PIXEL_SUP(t167, (is_E)? PIXEL_MIN: in0E);
    t167 = PIXEL_SUP(t167, (is_S|is_W)? PIXEL_MIN: in0SW);
    t167 = PIXEL_SUP(t167, (is_S)? PIXEL_MIN: in0S);
    t167 = PIXEL_SUP(t167, (is_S|is_E)? PIXEL_MIN: in0SE);
    PIXEL t178 = PIXEL_SUP(t167, in1);

    // set output pixels
    p0[i] = t167;
    p1[i] = t178;
  }
}

// opencl function main_opencl_helper_4_0_4
KERNEL void main_opencl_helper_4_0_4(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t189 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t189 = PIXEL_INF(t189, (is_N|is_W)? PIXEL_MAX: in0NW);
    t189 = PIXEL_INF(t189, (is_N)? PIXEL_MAX: in0N);
    t189 = PIXEL_INF(t189, (is_N|is_E)? PIXEL_MAX: in0NE);
    t189 = PIXEL_INF(t189, (is_W)? PIXEL_MAX: in0W);
    t189 = PIXEL_INF(t189, in0);
    t189 = PIXEL_INF(t189, (is_E)? PIXEL_MAX: in0E);
    t189 = PIXEL_INF(t189, (is_S|is_W)? PIXEL_MAX: in0SW);
    t189 = PIXEL_INF(t189, (is_S)? PIXEL_MAX: in0S);
    t189 = PIXEL_INF(t189, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t201 = PIXEL_THRESHOLD(t189, c0, c1, c2);
    PIXEL_VOLUME(red204, t201);
    PIXEL t206 = PIXEL_SUBSAT(t201, c3);

    // set output pixels
    p0[i] = t206;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 5

// opencl function main_opencl_helper_5_0_0
KERNEL void main_opencl_helper_5_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t214 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL in1 = j1[i];

    // pixel computations
    t214 = PIXEL_INF(t214, (is_N|is_W)? PIXEL_MAX: in0NW);
    t214 = PIXEL_INF(t214, (is_N)? PIXEL_MAX: in0N);
    t214 = PIXEL_INF(t214, (is_N|is_E)? PIXEL_MAX: in0NE);
    t214 = PIXEL_INF(t214, (is_W)? PIXEL_MAX: in0W);
    t214 = PIXEL_INF(t214, in0);
    t214 = PIXEL_INF(t214, (is_E)? PIXEL_MAX: in0E);
    t214 = PIXEL_INF(t214, (is_S|is_W)? PIXEL_MAX: in0SW);
    t214 = PIXEL_INF(t214, (is_S)? PIXEL_MAX: in0S);
    t214 = PIXEL_INF(t214, (is_S|is_E)? PIXEL_MAX: in0SE);
    PIXEL t219 = PIXEL_ADD(in1, t214);
    PIXEL_VOLUME(red221, t214);

    // set output pixels
    p0[i] = t214;
    p1[i] = t219;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

// opencl for dag 6

// opencl function main_opencl_helper_6_0_2
KERNEL void main_opencl_helper_6_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t240 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL in1 = j1[i];

    // pixel computations
    t240 = PIXEL_SUP(t240, (is_N|is_W)? PIXEL_MIN: in0NW);
    t240 = PIXEL_SUP(t240, (is_N)? PIXEL_MIN: in0N);
    t240 = PIXEL_SUP(t240, (is_N|is_E)? PIXEL_MIN: in0NE);
    t240 = PIXEL_SUP(t240, (is_W)? PIXEL_MIN: in0W);
    t240 = PIXEL_SUP(t240, in0);
    t240 = PIXEL_SUP(t240, (is_E)? PIXEL_MIN: in0E);
    t240 = PIXEL_SUP(t240, (is_S|is_W)? PIXEL_MIN: in0SW);
    t240 = PIXEL_SUP(t240, (is_S)? PIXEL_MIN: in0S);
    t240 = PIXEL_SUP(t240, (is_S|is_E)? PIXEL_MIN: in0SE);
    PIXEL t245 = PIXEL_INF(t240, in1);
    PIXEL t257 = PIXEL_MUL(t245, c0);

    // set output pixels
    p0[i] = t257;
  }
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   // hardware accelerator generated variable
   freia_data2d *w1_0_8 = 0;

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   w1_0_8 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = 0;                                                           /*0116*/
   
   // 1st step detect centers of halos
   
   
   main_opencl_helper_D8_511(w1_0, imIn);                               /*0089*/
   main_opencl_helper_D8_511(w1_0, w1_0);                               /*0091*/
   
   
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0098*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0099*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0100*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0101*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0102*/
   
   
   main_opencl_helper_0_0_0(w2_0, w1_0, &volcurrent_0);                 /*0108*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0109*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0110*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0111*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      main_opencl_helper_1_0_0(w1_0, imIn, w1_0, &volcurrent_0);        /*0121*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   freia_aipo_global_vol(w2_0, &volcurrent_1);                          /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      main_opencl_helper_3_0_0(w2_0, imIn, w2_0, &volcurrent_1);        /*0144*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/

   main_opencl_helper_4_0_0(w1_0_8, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1);       /*0162*/
   
   
   // 2nd detect halos
   main_opencl_helper_4_0_1(w3, imIn, 30, imIn->bpp==16?32767:255, 1);  /*0175*/
   
   
   
   main_opencl_helper_4_0_2(w1_0, w4, w1_0_8, w3);                      /*0178*/
   
   
   main_opencl_helper_D8_511(w4, w4);                                   /*0181*/
   
   
   main_opencl_helper_4_0_4(w1_1, w4, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);           /*0189*/
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      main_opencl_helper_5_0_0(w1_1, w3, w1_1, w3, &measure_vol);       /*0214*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   main_opencl_helper_D8_511(imOut, w4);                                /*0231*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0232*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0233*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0234*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0235*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0236*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0237*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0238*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0239*/
   main_opencl_helper_6_0_2(imOut, imOut, w1_0, 4);                     /*0240*/
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w1_0_8);
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   // hardware accelerator generated variable
   freia_data2d *w1_0_8 = 0;

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   w1_0_8 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 2;                                                             /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = 0;                                                           /*0116*/
   
   // 1st step detect centers of halos
   
   
   main_opencl_helper_D8_511(w1_0, imIn);                               /*0089*/
   main_opencl_helper_D8_511(w1_0, w1_0);                               /*0091*/
   
   
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0098*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0099*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0100*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0101*/
   main_opencl_helper_E8_511(w1_0, w1_0);                               /*0102*/
   
   
   main_opencl_helper_0_0_0(w2_0, w1_0, &volcurrent_0);                 /*0108*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0109*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0110*/
   main_opencl_helper_E8_511(w2_0, w2_0);                               /*0111*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      main_opencl_helper_1_0_0(w1_0, imIn, w1_0, &volcurrent_0);        /*0121*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   freia_aipo_global_vol(w2_0, &volcurrent_1);                          /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      main_opencl_helper_3_0_0(w2_0, imIn, w2_0, &volcurrent_1);        /*0144*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/

   main_opencl_helper_4_0_0(w1_0_8, w1_0, w2_0, 30, w1_0->bpp==16?32767:255, 1);       /*0162*/
   
   
   // 2nd detect halos
   main_opencl_helper_4_0_1(w3, imIn, 30, imIn->bpp==16?32767:255, 1);  /*0175*/
   
   
   
   main_opencl_helper_4_0_2(w1_0, w4, w1_0_8, w3);                      /*0178*/
   
   
   main_opencl_helper_D8_511(w4, w4);                                   /*0181*/
   
   
   main_opencl_helper_4_0_4(w1_1, w4, 1, w4->bpp==16?32767:255, 1, &measure_vol, w1_1->bpp==16?32766:254);           /*0189*/
   
   // binarize
   
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      main_opencl_helper_5_0_0(w1_1, w3, w1_1, w3, &measure_vol);       /*0214*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   main_opencl_helper_D8_511(imOut, w4);                                /*0231*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0232*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0233*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0234*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0235*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0236*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0237*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0238*/
   main_opencl_helper_D8_511(imOut, imOut);                             /*0239*/
   main_opencl_helper_6_0_2(imOut, imOut, w1_0, 4);                     /*0240*/
   
   // rearrange for display
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w1_0_8);
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}
#
# SIGMAC
#
#
# compile generated antibio
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   register int i, j;                                                   /*0010*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0, i_1, i_2;                                          /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1, *w2_1;                                           /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   register int i_9;                                                    /*0066*/

   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   
   // 1st step detect centers of halos
   
   
   freia_aipo_dilate_8c(w1_0, imIn, freia_morpho_kernel_8c);            /*0089*/
   i_0 = 1;                                                             /*0090*/
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0091*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0098*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0099*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0100*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0101*/
   freia_aipo_erode_8c(w1_0, w1_0, freia_morpho_kernel_8c);             /*0102*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   freia_aipo_erode_8c(w2_0, w1_0, freia_morpho_kernel_8c);             /*0108*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0109*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0110*/
   freia_aipo_erode_8c(w2_0, w2_0, freia_morpho_kernel_8c);             /*0111*/
   
   
   _return5 = 0;                                                        /*0114*/

   ret_0 = freia_aipo_global_vol(w1_0, &volcurrent_0);                  /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      
      
      freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);         /*0121*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      ret_1 |= freia_aipo_inf(w1_0, w1_0, imIn);                        /*0127*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
      ret_0 |= freia_aipo_global_vol(w1_0, &volcurrent_0);              /*0132*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_aipo_global_vol(w2_0, &volcurrent_1);                  /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      
      
      freia_aipo_dilate_8c(w2_0, w2_0, freia_morpho_kernel_8c);         /*0144*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      ret_3 |= freia_aipo_inf(w2_0, w2_0, imIn);                        /*0150*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
      ret_2 |= freia_aipo_global_vol(w2_0, &volcurrent_1);              /*0155*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/

   freia_aipo_sub(w1_0, w1_0, w2_0);                                    /*0162*/

   freia_aipo_threshold(w1_0, w1_0, 30, w1_0->bpp==16?32767:255, 1);    /*0164*/
   
   
   freia_aipo_dilate_8c(w1_0, w1_0, freia_morpho_kernel_8c);            /*0167*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   freia_aipo_copy(w2_0, w1_0);                                         /*0172*/
   
   // 2nd detect halos
   freia_aipo_threshold(w3, imIn, 30, imIn->bpp==16?32767:255, 1);      /*0175*/
   freia_aipo_not(w3, w3);                                              /*0176*/

   freia_aipo_sup(w4, w1_0, w3);                                        /*0178*/
   
   
   freia_aipo_dilate_8c(w4, w4, freia_morpho_kernel_8c);                /*0181*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   
   
   freia_aipo_erode_8c(w4, w4, freia_morpho_kernel_8c);                 /*0189*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   w2_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0199*/

   freia_aipo_threshold(w1_1, w4, 1, w4->bpp==16?32767:255, 1);         /*0201*/
   // binarize
   
   freia_aipo_global_vol(w1_1, &measure_vol);                           /*0204*/
   freia_aipo_set_constant(w2_1, w1_1->bpp==16?32767:255);              /*0205*/
   freia_aipo_subsat_const(w1_1, w1_1, w1_1->bpp==16?32766:254);        /*0206*/

   freia_aipo_copy(w3, w1_1);                                           /*0208*/
   measure_oldVol = 0;                                                  /*0209*/

   while (measure_vol!=measure_oldVol) {                                /*0211*/
      freia_aipo_erode_8c(w1_1, w1_1, freia_morpho_kernel_8c);          /*0214*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      freia_aipo_add(w3, w3, w1_1);                                     /*0219*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_aipo_global_vol(w1_1, &measure_vol);                        /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   freia_common_destruct_data(w2_1);                                    /*0226*/

   freia_aipo_inf(w4, w3, w1_0);                                        /*0228*/
   
   
   freia_aipo_dilate_8c(imOut, w4, freia_morpho_kernel_8c);             /*0231*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0232*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0233*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0234*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0235*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0236*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0237*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0238*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0239*/
   freia_aipo_dilate_8c(imOut, imOut, freia_morpho_kernel_8c);          /*0240*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   ret_5 |= freia_aipo_inf(imOut, imOut, w1_0);                         /*0245*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   
   // rearrange for display
   freia_aipo_mul_const(imOut, imOut, 4);                               /*0257*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_1" of module "main" in dot format
// DAG "dag_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_2" of module "main" in dot format
// DAG "dag_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_3" of module "main" in dot format
// DAG "dag_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_4" of module "main" in dot format
// DAG "dag_4": #i=3 #o=4 #c=12 #s=0 #I=2 #B=0 #A=0
digraph "dag_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w2_0'" [shape=circle];
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // computation vertices
  "208 =" [shape=circle];
  "208 =" -> "w3";
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "208 =" [label="w1_1"];
  "206 -s_" -> "w1_1";
  "205 C" [shape=trapezium,orientation=270];
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1"];
  "201 thr" -> "204 vol" [label="w1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3"];
  "imIn" -> "175 thr";
  "172 =" [shape=circle];
  "172 =" -> "w2_0'";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "172 =" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";
}
// graph for dag "dag_5" of module "main" in dot format
// DAG "dag_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_6" of module "main" in dot format
// DAG "dag_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=2 #c=12 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "imIn" [shape=circle];

  // outputs
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // computation vertices
  "116 vol" [shape=diamond];
  "111 E8" [shape=box];
  "111 E8" -> "w2_0";
  "110 E8" [shape=box];
  "110 E8" -> "111 E8" [label="w2_0_1"];
  "109 E8" [shape=box];
  "109 E8" -> "110 E8" [label="w2_0_2"];
  "108 E8" [shape=box];
  "108 E8" -> "109 E8" [label="w2_0_3"];
  "102 E8" [shape=box];
  "102 E8" -> "116 vol" [label="w1_0"];
  "102 E8" -> "108 E8" [label="w1_0"];
  "102 E8" -> "w1_0";
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="w1_0_1"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="w1_0_2"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="w1_0_3"];
  "98 E8" [shape=box];
  "98 E8" -> "99 E8" [label="w1_0_4"];
  "91 D8" [shape=box];
  "91 D8" -> "98 E8" [label="w1_0_5"];
  "89 D8" [shape=box];
  "89 D8" -> "91 D8" [label="w1_0_6"];
  "imIn" -> "89 D8";
}
// graph for dag "dag_cleaned_1" of module "main" in dot format
// DAG "dag_cleaned_1": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_1" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];

  // computation vertices
  "132 vol" [shape=diamond];
  "130 ?" [shape=none];
  "130 ?" -> "131 ?" [arrowhead=empty,label="_return12"];
  "127 <" [shape=trapezium,orientation=270];
  "127 <" -> "132 vol" [label="w1_0"];
  "127 <" -> "w1_0'";
  "imIn" -> "127 <";
  "121 D8" [shape=box];
  "121 D8" -> "127 <" [label="w1_0_7"];
  "w1_0" -> "121 D8";
}
// graph for dag "dag_cleaned_2" of module "main" in dot format
// DAG "dag_cleaned_2": #i=1 #o=0 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_2" {
  // inputs
  "w2_0" [shape=circle];

  // outputs

  // computation vertices
  "139 vol" [shape=diamond];
  "w2_0" -> "139 vol";
}
// graph for dag "dag_cleaned_3" of module "main" in dot format
// DAG "dag_cleaned_3": #i=2 #o=1 #c=3 #s=2 #I=0 #B=0 #A=0
digraph "dag_cleaned_3" {
  // inputs
  "imIn" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w2_0'" [shape=circle];

  // computation vertices
  "155 vol" [shape=diamond];
  "153 ?" [shape=none];
  "153 ?" -> "154 ?" [arrowhead=empty,label="_return13"];
  "150 <" [shape=trapezium,orientation=270];
  "150 <" -> "155 vol" [label="w2_0"];
  "150 <" -> "w2_0'";
  "imIn" -> "150 <";
  "144 D8" [shape=box];
  "144 D8" -> "150 <" [label="w2_0_4"];
  "w2_0" -> "144 D8";
}
// graph for dag "dag_cleaned_4" of module "main" in dot format
// DAG "dag_cleaned_4": #i=3 #o=2 #c=11 #s=0 #I=0 #B=0 #A=2
digraph "dag_cleaned_4" {
  // inputs
  "imIn" [shape=circle];
  "w1_0" [shape=circle];
  "w2_0" [shape=circle];

  // outputs
  "w1_0'" [shape=circle];
  "w1_1" [shape=circle];

  // computation vertices
  "206 -s_" [shape=trapezium,orientation=270];
  "206 -s_" -> "w1_1";
  "204 vol" [shape=diamond];
  "201 thr" [shape=parallelogram];
  "201 thr" -> "206 -s_" [label="w1_1_1"];
  "201 thr" -> "204 vol" [label="w1_1_1"];
  "189 E8" [shape=box];
  "189 E8" -> "201 thr" [label="w4"];
  "181 D8" [shape=box];
  "181 D8" -> "189 E8" [label="w4_1"];
  "178 >" [shape=trapezium,orientation=270];
  "178 >" -> "181 D8" [label="w4_2"];
  "176 !" [shape=trapezium,orientation=270];
  "176 !" -> "178 >" [label="w3_1"];
  "175 thr" [shape=parallelogram];
  "175 thr" -> "176 !" [label="w3_2"];
  "imIn" -> "175 thr";
  "167 D8" [shape=box];
  "167 D8" -> "178 >" [label="w1_0"];
  "167 D8" -> "w1_0'";
  "164 thr" [shape=parallelogram];
  "164 thr" -> "167 D8" [label="w1_0_8"];
  "162 -" [shape=trapezium,orientation=270];
  "162 -" -> "164 thr" [label="w1_0_9"];
  "w2_0" -> "162 -";
  "w1_0" -> "162 -";

  // external after copies: 2
  "w2_0'" [shape=circle];
  "w2_0 =" [shape=circle,label="=",style="dashed"]
  "w1_0'" -> "w2_0 =";
  "w2_0 =" -> "w2_0'";
  "w3" [shape=circle];
  "w3 =" [shape=circle,label="=",style="dashed"]
  "w1_1" -> "w3 =";
  "w3 =" -> "w3";
}
// graph for dag "dag_cleaned_5" of module "main" in dot format
// DAG "dag_cleaned_5": #i=2 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_5" {
  // inputs
  "w1_1" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "w1_1'" [shape=circle];
  "w3'" [shape=circle];

  // computation vertices
  "221 vol" [shape=diamond];
  "219 +" [shape=trapezium,orientation=270];
  "219 +" -> "w3'";
  "w3" -> "219 +";
  "214 E8" [shape=box];
  "214 E8" -> "221 vol" [label="w1_1"];
  "214 E8" -> "219 +" [label="w1_1"];
  "214 E8" -> "w1_1'";
  "w1_1" -> "214 E8";
}
// graph for dag "dag_cleaned_6" of module "main" in dot format
// DAG "dag_cleaned_6": #i=2 #o=1 #c=13 #s=1 #I=0 #B=0 #A=0
digraph "dag_cleaned_6" {
  // inputs
  "w1_0" [shape=circle];
  "w3" [shape=circle];

  // outputs
  "imOut" [shape=circle];

  // computation vertices
  "257 *_" [shape=trapezium,orientation=270];
  "257 *_" -> "imOut";
  "245 <" [shape=trapezium,orientation=270];
  "245 <" -> "257 *_" [label="imOut_1"];
  "240 D8" [shape=box];
  "240 D8" -> "245 <" [label="imOut_2"];
  "239 D8" [shape=box];
  "239 D8" -> "240 D8" [label="imOut_3"];
  "238 D8" [shape=box];
  "238 D8" -> "239 D8" [label="imOut_4"];
  "237 D8" [shape=box];
  "237 D8" -> "238 D8" [label="imOut_5"];
  "236 D8" [shape=box];
  "236 D8" -> "237 D8" [label="imOut_6"];
  "235 D8" [shape=box];
  "235 D8" -> "236 D8" [label="imOut_7"];
  "234 D8" [shape=box];
  "234 D8" -> "235 D8" [label="imOut_8"];
  "233 D8" [shape=box];
  "233 D8" -> "234 D8" [label="imOut_9"];
  "232 D8" [shape=box];
  "232 D8" -> "233 D8" [label="imOut_10"];
  "231 D8" [shape=box];
  "231 D8" -> "232 D8" [label="imOut_11"];
  "228 <" [shape=trapezium,orientation=270];
  "228 <" -> "231 D8" [label="w4"];
  "w1_0" -> "245 <";
  "w1_0" -> "228 <";
  "w3" -> "228 <";
}

! updated function for OPENCL

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0008*/
   freia_data2d *imIn, *imOut;                                          /*0009*/
   //PIPS generated variable
   register freia_status _return0;                                      /*0012*/
   //PIPS generated variable
   register freia_status _return1, _return2, _return3;                  /*0014*/
   //PIPS generated variable
   register freia_status _return4, _return5, _return6;                  /*0016*/
   //PIPS generated variable
   register freia_status _return7;                                      /*0018*/
   //PIPS generated variable
   register freia_status _return8, _return9;                            /*0020*/
   //PIPS generated variable
   register freia_status _return10;                                     /*0022*/
   //PIPS generated variable
   register freia_status _return11;                                     /*0024*/
   //PIPS generated variable
   register freia_status _return12, _return13, _return14, _return15;    /*0026*/
   //PIPS generated variable
   freia_data2d *w1_0, *w2_0, *w3, *w4;                                 /*0028*/
   //PIPS generated variable
   register int i_0;                                                    /*0030*/
   //PIPS generated variable
   register freia_status ret_0 = 0;                                     /*0032*/
   //PIPS generated variable
   int32_t volcurrent_0;                                                /*0034*/
   //PIPS generated variable
   register int32_t volprevious_0;                                      /*0036*/
   //PIPS generated variable
   register freia_status ret_1;                                         /*0038*/
   //PIPS generated variable
   register int i_3;                                                    /*0040*/
   //PIPS generated variable
   register freia_status ret_2 = 0;                                     /*0042*/
   //PIPS generated variable
   int32_t volcurrent_1;                                                /*0044*/
   //PIPS generated variable
   register int32_t volprevious_1;                                      /*0046*/
   //PIPS generated variable
   register freia_status ret_3;                                         /*0048*/
   //PIPS generated variable
   register int i_4, i_5;                                               /*0050*/
   //PIPS generated variable
   register freia_status ret_4;                                         /*0052*/
   //PIPS generated variable
   register int i_6, i_7;                                               /*0054*/
   //PIPS generated variable
   freia_data2d *w1_1;                                                  /*0056*/
   //PIPS generated variable
   register int32_t measure_oldVol;                                     /*0058*/
   //PIPS generated variable
   int32_t measure_vol;                                                 /*0060*/
   //PIPS generated variable
   register int i_8;                                                    /*0062*/
   //PIPS generated variable
   register freia_status ret_5;                                         /*0064*/
   //PIPS generated variable
   
   freia_initialize(argc, argv);                                        /*0068*/

   freia_common_open_input(&fdin, 0);                                   /*0070*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0071*/

   imIn = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);  /*0073*/
   imOut = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);                /*0074*/
   
   // input
   freia_common_rx_image(imIn, &fdin);                                  /*0077*/
   
   // do the computation
   
   w1_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0081*/
   w2_0 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);          /*0082*/
   w3 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0083*/
   w4 = freia_common_create_data(imIn->bpp, imIn->widthWa, imIn->heightWa);            /*0084*/
   i_0 = 1;                                                             /*0090*/
   i_0 = 1+1;                                                           /*0092*/
   
   
   _return1 = 0;                                                        /*0095*/
   
   
   _return4 = 0;                                                        /*0105*/
   
   
   _return5 = 0;                                                        /*0114*/
   
   // 1st step detect centers of halos
   
   
   
   
   
   
   
   ret_0 = freia_mppa_launch(0, 1, 2, 0, 1, imIn, w1_0, w2_0, &volcurrent_0);          /*0116*/
   do {                                                                 /*0134*/
      volprevious_0 = volcurrent_0;                                     /*0118*/
      i_3 = 1;                                                          /*0122*/
      
      
      _return14 = 0;                                                    /*0125*/
      ret_1 = 0;                                                        /*0126*/
      
      
      ret_0 |= freia_mppa_launch(1, 2, 1, 0, 1, imIn, w1_0, w1_0, &volcurrent_0);      /*0132*/
      
      
      _return12 = ret_1;                                                /*0130*/
      ret_0 |= _return12;                                               /*0131*/
   }
   while (volcurrent_0!=volprevious_0);                                 /*0134*/
   
   
   _return8 = ret_0;                                                    /*0137*/

   ret_2 = freia_mppa_launch(2, 1, 0, 0, 1, w2_0, &volcurrent_1);       /*0139*/
   do {                                                                 /*0157*/
      volprevious_1 = volcurrent_1;                                     /*0141*/
      i_4 = 1;                                                          /*0145*/
      
      
      _return15 = 0;                                                    /*0148*/
      ret_3 = 0;                                                        /*0149*/
      
      
      ret_2 |= freia_mppa_launch(3, 2, 1, 0, 1, imIn, w2_0, w2_0, &volcurrent_1);      /*0155*/
      
      
      _return13 = ret_3;                                                /*0153*/
      ret_2 |= _return13;                                               /*0154*/
   }
   while (volcurrent_1!=volprevious_1);                                 /*0157*/
   
   
   _return9 = ret_2;                                                    /*0160*/
   i_5 = 1;                                                             /*0168*/
   
   
   _return2 = 0;                                                        /*0171*/
   i_6 = 1;                                                             /*0182*/
   
   
   _return3 = 0;                                                        /*0185*/
   ret_4 = 0;                                                           /*0186*/
   i_7 = 1;                                                             /*0190*/
   
   
   _return6 = 0;                                                        /*0193*/
   
   
   _return0 = ret_4;                                                    /*0196*/
   measure_oldVol = 0;                                                  /*0209*/

   w1_1 = freia_common_create_data(w4->bpp, w4->widthWa, w4->heightWa);                /*0198*/
   
   
   
   
   
   // 2nd detect halos
   
   
   
   
   
   
   // binarize
   
   freia_mppa_launch(4, 3, 2, 10, 1, imIn, w1_0, w2_0, w1_0, w1_1, w1_1->bpp==16?32766:254, 1, w4->bpp==16?32767:255, 1, 30, imIn->bpp==16?32767:255, 1, 30, w1_0->bpp==16?32767:255, 1, &measure_vol);        /*0206*/
   freia_aipo_copy(w3, w1_1);
   
   
   while (measure_vol!=measure_oldVol) {                                /*0211*/
      i_8 = 1;                                                          /*0215*/
      
      
      _return11 = 0;                                                    /*0218*/
      measure_oldVol = measure_vol;                                     /*0220*/
      freia_mppa_launch(5, 2, 2, 0, 1, w1_1, w3, w1_1, w3, &measure_vol);              /*0221*/
   }
   
   
   freia_common_destruct_data(w1_1);                                    /*0225*/
   
   
   _return10 = 0;                                                       /*0243*/
   ret_5 = 0;                                                           /*0244*/
   
   
   
   
   // rearrange for display
   freia_mppa_launch(6, 2, 1, 0, 0, w1_0, w3, imOut);                   /*0257*/
   
   
   _return7 = ret_5;                                                    /*0248*/
   
   
   freia_common_destruct_data(w1_0);                                    /*0251*/
   freia_common_destruct_data(w2_0);                                    /*0252*/
   freia_common_destruct_data(w3);                                      /*0253*/
   freia_common_destruct_data(w4);                                      /*0254*/
   // For display
   
   // Write images
   freia_common_tx_image(imIn, &fdout);                                 /*0261*/
   freia_common_tx_image(imOut, &fdout);                                /*0262*/
   
   // cleanup
   freia_common_destruct_data(imIn);                                    /*0265*/

   freia_common_destruct_data(imOut);                                   /*0267*/
   freia_common_close_input(&fdin);                                     /*0268*/
   freia_common_close_output(&fdout);                                   /*0269*/
   freia_shutdown();                                                    /*0270*/

   return 0;                                                            /*0272*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_0 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_0_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)

subgraph
main_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dil1 = new dilate_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);
    agent ero8 = new erode_pi0_0(width, height);
    agent ero7 = new erode_pi0_0(width, height);
    agent ero6 = new erode_pi0_0(width, height);
    agent ero5 = new erode_pi0_0(width, height);
    agent dup0 = new rep(3, width);
    agent ero4 = new erode_pi0_0(width, height);
    agent ero3 = new erode_pi0_0(width, height);
    agent ero2 = new erode_pi0_0(width, height);
    agent ero1 = new erode_pi0_0(width, height);
    agent ero0 = new erode_pi0_0(width, height);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[0] /* imIn */, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, ero8.input);
    connect (ero8.output, ero7.input);
    connect (ero7.output, ero6.input);
    connect (ero6.output, ero5.input);
    connect (ero5.output, ero4.input);
    connect (ero4.output, dup0.input);
    connect (dup0.output[2], vol0.input);
    connect (dup0.output[1], ero3.input);
    connect (dup0.output[0], strout.input[0] /* w1_0 */);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, strout.input[1] /* w2_0 */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_1 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_1_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_1(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_1, int16_t)

subgraph
main_sigmac_helper_1_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dil0 = new dilate_pi0_1(width, height);
    agent dup0 = new rep(2, width);
    agent inf0 = new img_inf_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* w1_0 */, dil0.input);
    connect (dil0.output, inf0.input[0]);
    connect (strin.output[0] /* imIn */, inf0.input[1]);
    connect (inf0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* w1_0 */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_2 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_2_0 Subgraph ##################*/
/*#####################################################################*/

subgraph
main_sigmac_helper_2_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...

    // instantiations...
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[0] /* w2_0 */, vol0.input);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_3 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_3_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_3(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_3, int16_t)

subgraph
main_sigmac_helper_3_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dil0 = new dilate_pi0_3(width, height);
    agent dup0 = new rep(2, width);
    agent inf0 = new img_inf_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[1] /* w2_0 */, dil0.input);
    connect (dil0.output, inf0.input[0]);
    connect (strin.output[0] /* imIn */, inf0.input[1]);
    connect (inf0.output, dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* w2_0 */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_4 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_4_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_4_0, int16_t, 2, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t po0 = PIXEL_NOT(pi0);
  int16_t po1 = PIXEL_SUP(pi1, po0);
  outp[0][i] = po1;
);


#define pi4_4(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi4_4, int16_t)

subgraph
main_sigmac_helper_4_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 3, width, height);
    agent strin = new Streamer_In(width, height, 3);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 10);
    agent sp = new Split<int32_t>(10, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi4[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent sub0 = new img_sub_img_16(width);
    agent thr2 = new thresholder_dyn(width, height);
    agent dup1 = new rep(2, width);
    agent dil1 = new dilate_pi4_4(width, height);
    agent thr1 = new thresholder_dyn(width, height);
    agent cpd0 = new agent_compound_4_0(width);
    agent dil0 = new dilate_pi4_4(width, height);
    agent ero0 = new erode_pi4_4(width, height);
    agent dup0 = new rep(2, width);
    agent thr0 = new thresholder_dyn(width, height);
    agent vol0 = new img_global_vol(width, height);
    agent subsatc0 = new img_subsat_const_16_dyn(width, height);

    // connections...
    connect (strin.output[1] /* w1_0 */, sub0.input[0]);
    connect (strin.output[2] /* w2_0 */, sub0.input[1]);
    connect (sub0.output, thr2.input);
    connect (thr2.output, dil1.input);
    connect (sp.output[9], thr2.param[2]);
    connect (sp.output[8], thr2.param[1]);
    connect (sp.output[7], thr2.param[0]);
    connect (dil1.output, dup1.input);
    connect (dup1.output[1], cpd0.input[1]);
    connect (dup1.output[0], strout.input[0] /* w1_0 */);
    connect (strin.output[0] /* imIn */, thr1.input);
    connect (thr1.output, cpd0.input[0]);
    connect (sp.output[6], thr1.param[2]);
    connect (sp.output[5], thr1.param[1]);
    connect (sp.output[4], thr1.param[0]);
    connect (cpd0.output[0], dil0.input);
    connect (dil0.output, ero0.input);
    connect (ero0.output, thr0.input);
    connect (thr0.output, dup0.input);
    connect (dup0.output[1], subsatc0.input);
    connect (dup0.output[0], vol0.input);
    connect (sp.output[3], thr0.param[2]);
    connect (sp.output[2], thr0.param[1]);
    connect (sp.output[1], thr0.param[0]);
    connect (vol0.output, jo.input[0]);
    connect (subsatc0.output, strout.input[1] /* w1_1 */);
    connect (sp.output[0], subsatc0.param);
  }
}

// code module=main fname=main_sigmac_helper_5 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_5_0 Subgraph ##################*/
/*#####################################################################*/


#define pi0_5(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_5, int16_t)

subgraph
main_sigmac_helper_5_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup0 = new rep(3, width);
    agent ero0 = new erode_pi0_5(width, height);
    agent add0 = new img_add_img_16(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[0] /* w1_1 */, ero0.input);
    connect (ero0.output, dup0.input);
    connect (dup0.output[2], vol0.input);
    connect (dup0.output[1], add0.input[1]);
    connect (dup0.output[0], strout.input[0] /* w1_1 */);
    connect (strin.output[1] /* w3 */, add0.input[0]);
    connect (add0.output, strout.input[1] /* w3 */);
    connect (vol0.output, jo.input[0]);
  }
}

// code module=main fname=main_sigmac_helper_6 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_6_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_6_0, int16_t, 2, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t po0 = PIXEL_INF(pi1, pi0);
  int16_t po1 = PIXEL_MULCST(po0, 4);
  outp[0][i] = po1;
);


#define pi1_6(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi1_6, int16_t)

subgraph
main_sigmac_helper_6_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 2, width, height);
    agent strin = new Streamer_In(width, height, 2);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0 = 4;
    int16_t pi1[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup0 = new rep(2, width);
    agent inf1 = new img_inf_img_16(width);
    agent dil9 = new dilate_pi1_6(width, height);
    agent dil8 = new dilate_pi1_6(width, height);
    agent dil7 = new dilate_pi1_6(width, height);
    agent dil6 = new dilate_pi1_6(width, height);
    agent dil5 = new dilate_pi1_6(width, height);
    agent dil4 = new dilate_pi1_6(width, height);
    agent dil3 = new dilate_pi1_6(width, height);
    agent dil2 = new dilate_pi1_6(width, height);
    agent dil1 = new dilate_pi1_6(width, height);
    agent dil0 = new dilate_pi1_6(width, height);
    agent cpd0 = new agent_compound_6_0(width);

    // connections...
    connect (strin.output[1] /* w3 */, inf1.input[0]);
    connect (strin.output[0] /* w1_0 */, dup0.input);
    connect (dup0.output[1], cpd0.input[0]);
    connect (dup0.output[0], inf1.input[1]);
    connect (inf1.output, dil9.input);
    connect (dil9.output, dil8.input);
    connect (dil8.output, dil7.input);
    connect (dil7.output, dil6.input);
    connect (dil6.output, dil5.input);
    connect (dil5.output, dil4.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, cpd0.input[1]);
    connect (cpd0.output[0], strout.input[0] /* imOut */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 38;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

    new main_sigmac_helper_1_0
    (pipes[14], pipes[15],
     width, height, sizeMax,
     pipes[16], pipes[17]);

    new main_sigmac_helper_2_0
    (pipes[18], pipes[19],
     width, height, sizeMax,
     pipes[20], pipes[21]);

    new main_sigmac_helper_3_0
    (pipes[22], pipes[23],
     width, height, sizeMax,
     pipes[24], pipes[25]);

    new main_sigmac_helper_4_0
    (pipes[26], pipes[27],
     width, height, sizeMax,
     pipes[28], pipes[29]);

    new main_sigmac_helper_5_0
    (pipes[30], pipes[31],
     width, height, sizeMax,
     pipes[32], pipes[33]);

    new main_sigmac_helper_6_0
    (pipes[34], pipes[35],
     width, height, sizeMax,
     pipes[36], pipes[37]);

  }
}
#
# FREIA COMPILATION DONE
#


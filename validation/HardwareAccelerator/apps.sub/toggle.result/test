#
# AIPO
#
#
# compile generated toggle
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   register int i, j;                                                   /*0008*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1"];
  "36 -" -> "39 >" [label="work1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}

! updated function for AIPO

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}
#
# SPOC
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   register int i, j;                                                   /*0008*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1"];
  "36 -" -> "39 >" [label="work1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "main_spoc_helper_0_0" of module "main" in dot format
// DAG "main_spoc_helper_0_0": #i=1 #o=2 #c=6 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imWork1" [shape=circle];
  "imWork2" [shape=circle];

  // computation vertices
  "30 E8" [shape=box];
  "30 E8" -> "imWork2";
  "26 D8" [shape=box];
  "26 D8" -> "imWork1";
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "main_spoc_helper_0_1" of module "main" in dot format
// DAG "main_spoc_helper_0_1": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_1" {
  // inputs
  "imWork1" [shape=circle];
  "in" [shape=circle];

  // outputs
  "work1_1" [shape=circle];

  // computation vertices
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "work1_1";
  "in" -> "36 -";
  "imWork1" -> "36 -";
}
// graph for dag "main_spoc_helper_0_2" of module "main" in dot format
// DAG "main_spoc_helper_0_2": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_2" {
  // inputs
  "imWork2" [shape=circle];
  "in" [shape=circle];

  // outputs
  "work2_1" [shape=circle];

  // computation vertices
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "work2_1";
  "imWork2" -> "37 -";
  "in" -> "37 -";
}
// graph for dag "main_spoc_helper_0_3" of module "main" in dot format
// DAG "main_spoc_helper_0_3": #i=2 #o=1 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_3" {
  // inputs
  "work1_1" [shape=circle];
  "work2_1" [shape=circle];

  // outputs
  "mask" [shape=circle];

  // computation vertices
  "41 thr" [shape=parallelogram];
  "41 thr" -> "mask";
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "work2_1" -> "39 >";
  "work1_1" -> "40 -";
  "work1_1" -> "39 >";
}
// graph for dag "main_spoc_helper_0_4" of module "main" in dot format
// DAG "main_spoc_helper_0_4": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_4" {
  // inputs
  "imWork1" [shape=circle];
  "mask" [shape=circle];

  // outputs
  "work1" [shape=circle];

  // computation vertices
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "work1";
  "imWork1" -> "43 :";
  "mask" -> "43 :";
}
// graph for dag "main_spoc_helper_0_5" of module "main" in dot format
// DAG "main_spoc_helper_0_5": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_5" {
  // inputs
  "imWork2" [shape=circle];
  "mask" [shape=circle];

  // outputs
  "work2" [shape=circle];

  // computation vertices
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "work2";
  "imWork2" -> "44 :";
  "mask" -> "44 :";
}
// graph for dag "main_spoc_helper_0_6" of module "main" in dot format
// DAG "main_spoc_helper_0_6": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_spoc_helper_0_6" {
  // inputs
  "work1" [shape=circle];
  "work2" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "work2" -> "45 >";
  "work1" -> "45 >";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 15 ops and 0 copies, optimized to 15 ops and 0+0+0 copies
// split 0: 1 cut
// split 1: 1 cut
// split 2: 1 cut
// split 3: 1 cut
// split 4: 1 cut
// split 5: 1 cut
// split 6: 1 cut
// # SPOC calls: 7

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 24 dilate_8c
  // nope
  // poc 24 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork1_2 [0 poc 0] -> [1 poc 0] 25 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imWork1_2 [1 input 0] -> [1 poc 0] 25 dilate_8c
  // nope
  // poc 25 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 28 erode_8c
  // nope
  // poc 28 erode_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_ERODE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imWork2_2 [0 poc 1] -> [1 poc 1] 29 erode_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imWork2_2 [1 input 1] -> [1 poc 1] 29 erode_8c
  // nope
  // poc 29 erode_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_ERODE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imWork1_1 [1 poc 0] -> [2 poc 0] 26 dilate_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imWork1_1 [2 input 0] -> [2 poc 0] 26 dilate_8c
  // nope
  // poc 26 dilate_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_DILATE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];

  // 0`imWork2_1 [1 poc 1] -> [2 poc 1] 30 erode_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imWork2_1 [2 input 1] -> [2 poc 1] 30 erode_8c
  // nope
  // poc 30 erode_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_ERODE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // output image 0`imWork1 on 0 and image 0`imWork2 on 1
  // 0`imWork1 [2 poc 0] -> [2 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imWork1 [2 output 0] -> [7 output 0] 0 null
  // 0`imWork1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imWork1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  // 0`imWork2 [2 poc 1] -> [2 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // 0`imWork2 [2 output 1] -> [7 output 1] 0 null
  // 0`imWork2 [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imWork2 [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imWork2 [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imWork2 [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imWork2 [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1 [0 input 0] -> [0 alu] 36 sub
  // nope
  // 0`in [0 input 1] -> [0 alu] 36 sub
  // nope
  // alu 36 sub stage 0
  si.alu[0][0].op = SPOC_ALU_SUB_IN0_IN1;


  // output image 0`work1_1 on 0
  // 0`work1_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`work1_1 [0 output 0] -> [7 output 0] 0 null
  // 0`work1_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_2_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork2 [0 input 0] -> [0 alu] 37 sub
  // nope
  // 0`in [0 input 1] -> [0 alu] 37 sub
  // nope
  // alu 37 sub stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_SUB_IN1_IN0;


  // output image 0`work2_1 on 0
  // 0`work2_1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`work2_1 [0 output 0] -> [7 output 0] 0 null
  // 0`work2_1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`work2_1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_3_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`work1_1 [0 input 0] -> [0 alu] 39 sup
  // nope
  // 0`work2_1 [0 input 1] -> [0 alu] 39 sup
  // nope
  // alu 39 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;


  // STAGE 1
  // 0`work1_1 [0 input 0] -> [1 alu] 40 sub
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`work1_1 [1 input 0] -> [1 alu] 40 sub
  // nope
  // 0`mask_2 [0 alu] -> [1 alu] 40 sub
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // 0`mask_2 [1 input 1] -> [1 alu] 40 sub
  // nope
  // alu 40 sub stage 1
  si.alu[1][0].op = SPOC_ALU_SUB_IN0_IN1;

  // 0`mask_1 [1 alu] -> [1 threshold 0] 41 threshold
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // threshold 41 threshold stage 1 side 0
  si.th[1][0].op = pi2? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[1][0].boundmin = pi0;
  sp.th[1][0].boundmax = pi1;


  // output image 0`mask on 0
  // 0`mask [1 threshold 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`mask [1 output 0] -> [7 output 0] 0 null
  // 0`mask [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`mask [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`mask [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`mask [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`mask [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`mask [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_4_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork1 [0 input 0] -> [0 alu] 43 replace_const
  // nope
  // 0`mask [0 input 1] -> [0 alu] 43 replace_const
  // nope
  // alu 43 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // output image 0`work1 on 0
  // 0`work1 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`work1 [0 output 0] -> [7 output 0] 0 null
  // 0`work1 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`work1 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`work1 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`work1 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`work1 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`work1 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`work1 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_5_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imWork2 [0 input 0] -> [0 alu] 44 replace_const
  // nope
  // 0`mask [0 input 1] -> [0 alu] 44 replace_const
  // nope
  // alu 44 replace_const stage 0 flipped
  si.alu[0][0].op = SPOC_ALU_REPLACE_IN0_IN1_CONST;
  sp.alu[0][0].constant = pi0;


  // output image 0`work2 on 0
  // 0`work2 [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`work2 [0 output 0] -> [7 output 0] 0 null
  // 0`work2 [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`work2 [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`work2 [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`work2 [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`work2 [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`work2 [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`work2 [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module main
freia_status main_spoc_helper_0_6_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t * po0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  spoc_reduction reduc;
  freia_reduction_results redres;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`work1 [0 input 0] -> [0 alu] 45 sup
  // nope
  // 0`work2 [0 input 1] -> [0 alu] 45 sup
  // nope
  // alu 45 sup stage 0
  si.alu[0][0].op = SPOC_ALU_SUP_IN0_IN1;

  // 0`out [0 alu] -> [0 measure 0] 45 sup
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;


  // output image 0`out on 0
  // 0`out [0 measure 0] -> [0 output 0] 0 null
  // nope

  // fill in to the end...
  // 0`out [0 output 0] -> [7 output 0] 0 null
  // 0`out [1 input 0] -> [7 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  redres.raw = (freia_ptr) &reduc;
  redres.size = sizeof(spoc_reduction);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  // get reductions
  freia_cg_read_reduction_results(&redres);

  // measure 51 global_vol stage 0 side 0
  *po0 = (int32_t) reduc.measure[0][0].volume;

  return ret;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   main_spoc_helper_0_0_0(imWork1, imWork2, in, freia_morpho_kernel_8c);               /*0024*/
   
   
   main_spoc_helper_0_1_0(work1, imWork1, in);                          /*0036*/
   main_spoc_helper_0_2_0(work2, imWork2, in);                          /*0037*/

   main_spoc_helper_0_3_0(mask, work1, work2, 1, 255, 1);               /*0039*/

   main_spoc_helper_0_4_0(work1, imWork1, mask, 255);                   /*0043*/
   main_spoc_helper_0_5_0(work2, imWork2, mask, 0);                     /*0044*/
   main_spoc_helper_0_6_0(out, work1, work2, &measure_vol);             /*0045*/
   
   
   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   main_spoc_helper_0_0_0(imWork1, imWork2, in, freia_morpho_kernel_8c);               /*0024*/
   
   
   main_spoc_helper_0_1_0(work1, imWork1, in);                          /*0036*/
   main_spoc_helper_0_2_0(work2, imWork2, in);                          /*0037*/

   main_spoc_helper_0_3_0(mask, work1, work2, 1, 255, 1);               /*0039*/

   main_spoc_helper_0_4_0(work1, imWork1, mask, 255);                   /*0043*/
   main_spoc_helper_0_5_0(work2, imWork2, mask, 0);                     /*0044*/
   main_spoc_helper_0_6_0(out, work1, work2, &measure_vol);             /*0045*/
   
   
   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}
#
# TERAPIX
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   register int i, j;                                                   /*0008*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1"];
  "36 -" -> "39 >" [label="work1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "main_terapix_helper_0_0_0" of module "main" in dot format
// DAG "main_terapix_helper_0_0_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "main_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 15 ops and 0 copies, optimized to 15 ops and 0+0+0 copies

/* FREIA terapix helper function for module main
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 15 image operations in dag
 * dag length is 11, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 124
 * - communication: 48
 */
freia_status main_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t * po8)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 10 parameters
  int16_t p_10[3];
  const int32_t x_10 = 3;
  const int32_t y_10 = 0;
  // operation 11 parameters
  int16_t p_11[1];
  const int32_t x_11 = 6;
  const int32_t y_11 = 0;
  // operation 13 parameters
  int16_t p_13[1];
  const int32_t x_13 = 7;
  const int32_t y_13 = 0;
  // operation 16_val initialization
  int16_t p_16_val[1];
  const int32_t x_16_val = 8;
  const int32_t y_16_val = 0;
  // array for reduction 16 extraction
  int32_t red_16[1];
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][17];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 3;
  int image_height = i0->heightWa;
  int max_computed_size = 198;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // memory for reductions
  int reduction_16 = 1022;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: D8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 1: E8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 2: D8(2) -> 4
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_4;
  mcu_macro[1][2].xmin2 = imagelet_4;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 3: E8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 4: D8(4) -> 3
  mcu_macro[0][4].xmin1 = imagelet_4;
  mcu_macro[1][4].xmin1 = imagelet_4;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 5: E8(2) -> 4
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_4;
  mcu_macro[1][5].xmin2 = imagelet_4;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 6: -(3,1) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_io_1_0;
  mcu_macro[1][6].xmin2 = imagelet_io_1_1;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = imagelet_2;
  mcu_macro[1][6].xmin3 = imagelet_2;
  mcu_macro[0][6].ymin3 = 0;
  mcu_macro[1][6].ymin3 = 0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_SUB3;
  // 7: -(1,4) -> 1
  mcu_macro[0][7].xmin1 = imagelet_io_1_0;
  mcu_macro[1][7].xmin1 = imagelet_io_1_1;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_4;
  mcu_macro[1][7].xmin2 = imagelet_4;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = imagelet_io_1_0;
  mcu_macro[1][7].xmin3 = imagelet_io_1_1;
  mcu_macro[0][7].ymin3 = 0;
  mcu_macro[1][7].ymin3 = 0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_SUB3;
  // 8: >(2,1) -> 1
  mcu_macro[0][8].xmin1 = imagelet_2;
  mcu_macro[1][8].xmin1 = imagelet_2;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_io_1_0;
  mcu_macro[1][8].xmin2 = imagelet_io_1_1;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = imagelet_io_1_0;
  mcu_macro[1][8].xmin3 = imagelet_io_1_1;
  mcu_macro[0][8].ymin3 = 0;
  mcu_macro[1][8].ymin3 = 0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_SUP3;
  // 9: -(2,1) -> 2
  mcu_macro[0][9].xmin1 = imagelet_2;
  mcu_macro[1][9].xmin1 = imagelet_2;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_io_1_0;
  mcu_macro[1][9].xmin2 = imagelet_io_1_1;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = imagelet_2;
  mcu_macro[1][9].xmin3 = imagelet_2;
  mcu_macro[0][9].ymin3 = 0;
  mcu_macro[1][9].ymin3 = 0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_SUB3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_SUB3;
  // 10: thr(2) -> 2
  mcu_macro[0][10].xmin1 = imagelet_2;
  mcu_macro[1][10].xmin1 = imagelet_2;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_2;
  mcu_macro[1][10].xmin2 = imagelet_2;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  // copy of operation 10 parameters
  p_10[0] = pi3;
  p_10[1] = pi4;
  p_10[2] = pi5;
  gram.xoffset = x_10;
  gram.yoffset = y_10;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_10;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][10].xmin3 = x_10;
  mcu_macro[1][10].xmin3 = x_10;
  mcu_macro[0][10].ymin3 = y_10;
  mcu_macro[1][10].ymin3 = y_10;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 11: :(2,3) -> 3
  // *special* set parameter for replace_const
  mcu_macro[0][11].xmin1 = 0;
  mcu_macro[1][11].xmin1 = 0;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = 0;
  mcu_macro[1][11].xmin2 = 0;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  // copy of operation 11 parameters
  p_11[0] = pi6;
  gram.xoffset = x_11;
  gram.yoffset = y_11;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_11;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][11].xmin3 = x_11;
  mcu_macro[1][11].xmin3 = x_11;
  mcu_macro[0][11].ymin3 = y_11;
  mcu_macro[1][11].ymin3 = y_11;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = 0;
  mcu_macro[1][11].iter2 = 0;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_2;
  mcu_macro[1][12].xmin2 = imagelet_2;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = imagelet_3;
  mcu_macro[1][12].xmin3 = imagelet_3;
  mcu_macro[0][12].ymin3 = 0;
  mcu_macro[1][12].ymin3 = 0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 13: :(2,4) -> 4
  // *special* set parameter for replace_const
  mcu_macro[0][13].xmin1 = 0;
  mcu_macro[1][13].xmin1 = 0;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = 0;
  mcu_macro[1][13].xmin2 = 0;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  // copy of operation 13 parameters
  p_13[0] = pi7;
  gram.xoffset = x_13;
  gram.yoffset = y_13;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_13;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][13].xmin3 = x_13;
  mcu_macro[1][13].xmin3 = x_13;
  mcu_macro[0][13].ymin3 = y_13;
  mcu_macro[1][13].ymin3 = y_13;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = 0;
  mcu_macro[1][13].iter2 = 0;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_SET_CONST_RAMREG;
  // now take care of actual operation
  mcu_macro[0][14].xmin1 = imagelet_4;
  mcu_macro[1][14].xmin1 = imagelet_4;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_2;
  mcu_macro[1][14].xmin2 = imagelet_2;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = imagelet_4;
  mcu_macro[1][14].xmin3 = imagelet_4;
  mcu_macro[0][14].ymin3 = 0;
  mcu_macro[1][14].ymin3 = 0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_CONV_REPLACE_EQ_CONST;
  // 15: >(3,4) -> 1
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_4;
  mcu_macro[1][15].xmin2 = imagelet_4;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = imagelet_io_1_0;
  mcu_macro[1][15].xmin3 = imagelet_io_1_1;
  mcu_macro[0][15].ymin3 = 0;
  mcu_macro[1][15].ymin3 = 0;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_SUP3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_SUP3;
  // 16: vol(1)
  // initializing  16_val
  p_16_val[0] = 0;
  gram.xoffset = x_16_val;
  gram.yoffset = y_16_val;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_16_val;
  freia_mg_write_dynamic_param(&dyn_param);
  // initialize memory for operation 16_val
  mem_init.xmin1 = reduction_16;
  mem_init.ymin1 = 0;
  mem_init.xmin2 = 0;
  mem_init.ymin2 = 0;
  mem_init.xmin3 = 0;
  mem_init.ymin3 = 0;
  mem_init.iter1 = TERAPIX_PE_NUMBER;
  mem_init.iter2 = 2;
  mem_init.iter3 = 0;
  mem_init.iter4 = 0;
  mem_init.addrStart = TERAPIX_UCODE_SET_CONST;
  param.size = sizeof(terapix_mcu_macrocode); // not used?
  param.raw = (void*) (&mem_init);
  ret |= freia_mg_work(&param);
  ret |= freia_mg_end_work();
  // set measure vol at reduction_16
  mcu_macro[0][16].xmin2 = reduction_16;
  mcu_macro[1][16].xmin2 = reduction_16;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = 0;
  mcu_macro[1][16].xmin3 = 0;
  mcu_macro[0][16].ymin3 = 0;
  mcu_macro[1][16].ymin3 = 0;
  mcu_macro[0][16].xmin1 = imagelet_io_1_0;
  mcu_macro[1][16].xmin1 = imagelet_io_1_1;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_GLOBAL_VOL;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_GLOBAL_VOL;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 3;
  mcu_instr.borderBottom = 3;
  mcu_instr.borderLeft   = 3;
  mcu_instr.borderRight  = 3;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 17;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures
  // get measure vol result from reduction_16
  redter.xres = reduction_16;
  redter.yres = 0;
  redter.width = 1;
  redter.height = TERAPIX_PE_NUMBER;
  redter.result = (void*) red_16;
  redter.macroid = TERAPIX_UCODE_GLOBAL_VOL;
  redter.imgwidth = i0->width;
  redter.imgheight = i0->height;
  redter.subimgwidth = TERAPIX_PE_NUMBER;
  redter.subimgheight = imagelet_size;

  ret |= freia_cg_read_reduction_results(&redres);

  // assign reduction parameter
  *po8 = (int32_t) red_16[0];

  return ret;
}


! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t measure_vol;                                                 /*0009*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/
   
   
   main_terapix_helper_0_0_0(out, in, freia_morpho_kernel_8c, 1, 255, 1, 255, 0, &measure_vol);       /*0024*/
   
   
   
   
   
   
   
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t measure_vol;                                                 /*0009*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/
   
   
   main_terapix_helper_0_0_0(out, in, freia_morpho_kernel_8c, 1, 255, 1, 255, 0, &measure_vol);       /*0024*/
   
   
   
   
   
   
   
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}
#
# OPENCL
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   register int i, j;                                                   /*0008*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1"];
  "36 -" -> "39 >" [label="work1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "main_opencl_helper_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "28 E8";
  "in" -> "36 -";
  "in" -> "24 D8";
}
// graph for dag "main_opencl_helper_0_0_0" of module "main" in dot format
// DAG "main_opencl_helper_0_0_0": #i=1 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imWork1_2" [shape=circle];
  "imWork2_2" [shape=circle];

  // computation vertices
  "28 E8" [shape=box];
  "28 E8" -> "imWork2_2";
  "24 D8" [shape=box];
  "24 D8" -> "imWork1_2";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "main_opencl_helper_0_0_2" of module "main" in dot format
// DAG "main_opencl_helper_0_0_2": #i=3 #o=1 #c=11 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_0_0_2" {
  // inputs
  "imWork1_1" [shape=circle];
  "imWork2_1" [shape=circle];
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "imWork1_1" -> "26 D8";
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "imWork2_1" -> "30 E8";
}
// graph for dag "main_opencl_helper_D8_511" of module "main" in dot format
// DAG "main_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_D8_511" {
  // inputs
  "imWork1_2" [shape=circle];

  // outputs
  "imWork1_1" [shape=circle];

  // computation vertices
  "25 D8" [shape=box];
  "25 D8" -> "imWork1_1";
  "imWork1_2" -> "25 D8";
}
// graph for dag "main_opencl_helper_E8_511" of module "main" in dot format
// DAG "main_opencl_helper_E8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "main_opencl_helper_E8_511" {
  // inputs
  "imWork2_2" [shape=circle];

  // outputs
  "imWork2_1" [shape=circle];

  // computation vertices
  "29 E8" [shape=box];
  "29 E8" -> "imWork2_1";
  "imWork2_2" -> "29 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 15 ops and 0 copies, optimized to 15 ops and 0+0+0 copies

// hold kernels for main_opencl_helper_0_0_0
static cl_kernel main_opencl_helper_0_0_0_kernel[2];

// compile kernels for main_opencl_helper_0_0_0
static freia_status main_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_0
  const char * main_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_0\n"
    "KERNEL void main_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t24 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL t28 = PIXEL_MAX;\n"
    "\n"
    "    // pixel computations\n"
    "    t24 = PIXEL_SUP(t24, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t24 = PIXEL_SUP(t24, (is_N)? PIXEL_MIN: in0N);\n"
    "    t24 = PIXEL_SUP(t24, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t24 = PIXEL_SUP(t24, (is_W)? PIXEL_MIN: in0W);\n"
    "    t24 = PIXEL_SUP(t24, in0);\n"
    "    t24 = PIXEL_SUP(t24, (is_E)? PIXEL_MIN: in0E);\n"
    "    t24 = PIXEL_SUP(t24, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t24 = PIXEL_SUP(t24, (is_S)? PIXEL_MIN: in0S);\n"
    "    t24 = PIXEL_SUP(t24, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    t28 = PIXEL_INF(t28, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t28 = PIXEL_INF(t28, (is_N)? PIXEL_MAX: in0N);\n"
    "    t28 = PIXEL_INF(t28, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t28 = PIXEL_INF(t28, (is_W)? PIXEL_MAX: in0W);\n"
    "    t28 = PIXEL_INF(t28, in0);\n"
    "    t28 = PIXEL_INF(t28, (is_E)? PIXEL_MAX: in0E);\n"
    "    t28 = PIXEL_INF(t28, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t28 = PIXEL_INF(t28, (is_S)? PIXEL_MAX: in0S);\n"
    "    t28 = PIXEL_INF(t28, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t24;\n"
    "    p1[i] = t28;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL8", &main_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_0_source, "main_opencl_helper_0_0_0", "-DPIXEL16", &main_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_0
freia_status main_opencl_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_0_kernel[bpp];

  // call kernel main_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 2, 1, 0, 0, o0, o1, i0);

  return err;
}

// hold kernels for main_opencl_helper_D8_511
static cl_kernel main_opencl_helper_D8_511_kernel[2];

// compile kernels for main_opencl_helper_D8_511
static freia_status main_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_D8_511
  const char * main_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_D8_511\n"
    "KERNEL void main_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t25 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t25 = PIXEL_SUP(t25, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t25 = PIXEL_SUP(t25, (is_N)? PIXEL_MIN: in0N);\n"
    "    t25 = PIXEL_SUP(t25, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t25 = PIXEL_SUP(t25, (is_W)? PIXEL_MIN: in0W);\n"
    "    t25 = PIXEL_SUP(t25, in0);\n"
    "    t25 = PIXEL_SUP(t25, (is_E)? PIXEL_MIN: in0E);\n"
    "    t25 = PIXEL_SUP(t25, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t25 = PIXEL_SUP(t25, (is_S)? PIXEL_MIN: in0S);\n"
    "    t25 = PIXEL_SUP(t25, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t25;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL8", &main_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_D8_511_source, "main_opencl_helper_D8_511", "-DPIXEL16", &main_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_D8_511
freia_status main_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_D8_511_kernel[bpp];

  // call kernel main_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_E8_511
static cl_kernel main_opencl_helper_E8_511_kernel[2];

// compile kernels for main_opencl_helper_E8_511
static freia_status main_opencl_helper_E8_511_compile(void)
{
  // OpenCL source for main_opencl_helper_E8_511
  const char * main_opencl_helper_E8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_E8_511\n"
    "KERNEL void main_opencl_helper_E8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t29 = PIXEL_MAX;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t29 = PIXEL_INF(t29, (is_N|is_W)? PIXEL_MAX: in0NW);\n"
    "    t29 = PIXEL_INF(t29, (is_N)? PIXEL_MAX: in0N);\n"
    "    t29 = PIXEL_INF(t29, (is_N|is_E)? PIXEL_MAX: in0NE);\n"
    "    t29 = PIXEL_INF(t29, (is_W)? PIXEL_MAX: in0W);\n"
    "    t29 = PIXEL_INF(t29, in0);\n"
    "    t29 = PIXEL_INF(t29, (is_E)? PIXEL_MAX: in0E);\n"
    "    t29 = PIXEL_INF(t29, (is_S|is_W)? PIXEL_MAX: in0SW);\n"
    "    t29 = PIXEL_INF(t29, (is_S)? PIXEL_MAX: in0S);\n"
    "    t29 = PIXEL_INF(t29, (is_S|is_E)? PIXEL_MAX: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t29;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_E8_511_source, "main_opencl_helper_E8_511", "-DPIXEL8", &main_opencl_helper_E8_511_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_E8_511_source, "main_opencl_helper_E8_511", "-DPIXEL16", &main_opencl_helper_E8_511_kernel[1]);
  return err;
}

// helper function main_opencl_helper_E8_511
freia_status main_opencl_helper_E8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_E8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_E8_511_kernel[bpp];

  // call kernel main_opencl_helper_E8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for main_opencl_helper_0_0_2
static cl_kernel main_opencl_helper_0_0_2_kernel[2];

// compile kernels for main_opencl_helper_0_0_2
static freia_status main_opencl_helper_0_0_2_compile(void)
{
  // OpenCL source for main_opencl_helper_0_0_2
  const char * main_opencl_helper_0_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function main_opencl_helper_0_0_2\n"
    "KERNEL void main_opencl_helper_0_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  GLOBAL PIXEL * i2, // const?\n"
    "  int ofs_i2,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  GLOBAL TMeasure * redX)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // reduction stuff is currently hardcoded...\n"
    "  int vol = 0;\n"
    "  PIXEL minv = PIXEL_MAX;\n"
    "  int2 minpos = { 0, 0 };\n"
    "  PIXEL maxv = PIXEL_MIN;\n"
    "  int2 maxpos = { 0, 0 };\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t30 = PIXEL_MAX;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL t26 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "    PIXEL in2 = j2[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t30 = PIXEL_INF(t30, (is_N|is_W)? PIXEL_MAX: in1NW);\n"
    "    t30 = PIXEL_INF(t30, (is_N)? PIXEL_MAX: in1N);\n"
    "    t30 = PIXEL_INF(t30, (is_N|is_E)? PIXEL_MAX: in1NE);\n"
    "    t30 = PIXEL_INF(t30, (is_W)? PIXEL_MAX: in1W);\n"
    "    t30 = PIXEL_INF(t30, in1);\n"
    "    t30 = PIXEL_INF(t30, (is_E)? PIXEL_MAX: in1E);\n"
    "    t30 = PIXEL_INF(t30, (is_S|is_W)? PIXEL_MAX: in1SW);\n"
    "    t30 = PIXEL_INF(t30, (is_S)? PIXEL_MAX: in1S);\n"
    "    t30 = PIXEL_INF(t30, (is_S|is_E)? PIXEL_MAX: in1SE);\n"
    "    t26 = PIXEL_SUP(t26, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t26 = PIXEL_SUP(t26, (is_N)? PIXEL_MIN: in0N);\n"
    "    t26 = PIXEL_SUP(t26, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t26 = PIXEL_SUP(t26, (is_W)? PIXEL_MIN: in0W);\n"
    "    t26 = PIXEL_SUP(t26, in0);\n"
    "    t26 = PIXEL_SUP(t26, (is_E)? PIXEL_MIN: in0E);\n"
    "    t26 = PIXEL_SUP(t26, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t26 = PIXEL_SUP(t26, (is_S)? PIXEL_MIN: in0S);\n"
    "    t26 = PIXEL_SUP(t26, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "    PIXEL t36 = PIXEL_SUB(t26, in2);\n"
    "    PIXEL t37 = PIXEL_SUB(in2, t30);\n"
    "    PIXEL t39 = PIXEL_SUP(t36, t37);\n"
    "    PIXEL t40 = PIXEL_SUB(t36, t39);\n"
    "    PIXEL t41 = PIXEL_THRESHOLD(t40, c0, c1, c2);\n"
    "    PIXEL t43 = PIXEL_REPLACE_EC(t41, t26, c3);\n"
    "    PIXEL t44 = PIXEL_REPLACE_EC(t41, t30, c4);\n"
    "    PIXEL t45 = PIXEL_SUP(t43, t44);\n"
    "    PIXEL_VOLUME(red51, t45);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t45;\n"
    "  }\n"
    "\n"
    "  // reduction copy out\n"
    "  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);\n"
    "  redX[thrid].vol = vol;\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_2_source, "main_opencl_helper_0_0_2", "-DPIXEL8", &main_opencl_helper_0_0_2_kernel[0]);
  err |= freia_op_compile_kernel(main_opencl_helper_0_0_2_source, "main_opencl_helper_0_0_2", "-DPIXEL16", &main_opencl_helper_0_0_2_kernel[1]);
  return err;
}

// helper function main_opencl_helper_0_0_2
freia_status main_opencl_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const freia_data2d * i2,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t * po4)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= main_opencl_helper_0_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = main_opencl_helper_0_0_2_kernel[bpp];

  // currently only one reduction structure...
  freia_opencl_measure_status redres;

  // call kernel main_opencl_helper_0_0_2
  err |= freia_op_call_kernel(kernel, 1, 3, 5, 1, o0, i0, i1, i2, c0, c1, c2, c3, c4, &redres);

  // return reduction results
  *po4 = redres.volume;

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function main

// opencl for dag 0

// opencl function main_opencl_helper_0_0_0
KERNEL void main_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t24 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL t28 = PIXEL_MAX;

    // pixel computations
    t24 = PIXEL_SUP(t24, (is_N|is_W)? PIXEL_MIN: in0NW);
    t24 = PIXEL_SUP(t24, (is_N)? PIXEL_MIN: in0N);
    t24 = PIXEL_SUP(t24, (is_N|is_E)? PIXEL_MIN: in0NE);
    t24 = PIXEL_SUP(t24, (is_W)? PIXEL_MIN: in0W);
    t24 = PIXEL_SUP(t24, in0);
    t24 = PIXEL_SUP(t24, (is_E)? PIXEL_MIN: in0E);
    t24 = PIXEL_SUP(t24, (is_S|is_W)? PIXEL_MIN: in0SW);
    t24 = PIXEL_SUP(t24, (is_S)? PIXEL_MIN: in0S);
    t24 = PIXEL_SUP(t24, (is_S|is_E)? PIXEL_MIN: in0SE);
    t28 = PIXEL_INF(t28, (is_N|is_W)? PIXEL_MAX: in0NW);
    t28 = PIXEL_INF(t28, (is_N)? PIXEL_MAX: in0N);
    t28 = PIXEL_INF(t28, (is_N|is_E)? PIXEL_MAX: in0NE);
    t28 = PIXEL_INF(t28, (is_W)? PIXEL_MAX: in0W);
    t28 = PIXEL_INF(t28, in0);
    t28 = PIXEL_INF(t28, (is_E)? PIXEL_MAX: in0E);
    t28 = PIXEL_INF(t28, (is_S|is_W)? PIXEL_MAX: in0SW);
    t28 = PIXEL_INF(t28, (is_S)? PIXEL_MAX: in0S);
    t28 = PIXEL_INF(t28, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t24;
    p1[i] = t28;
  }
}

// opencl function main_opencl_helper_D8_511
KERNEL void main_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t25 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t25 = PIXEL_SUP(t25, (is_N|is_W)? PIXEL_MIN: in0NW);
    t25 = PIXEL_SUP(t25, (is_N)? PIXEL_MIN: in0N);
    t25 = PIXEL_SUP(t25, (is_N|is_E)? PIXEL_MIN: in0NE);
    t25 = PIXEL_SUP(t25, (is_W)? PIXEL_MIN: in0W);
    t25 = PIXEL_SUP(t25, in0);
    t25 = PIXEL_SUP(t25, (is_E)? PIXEL_MIN: in0E);
    t25 = PIXEL_SUP(t25, (is_S|is_W)? PIXEL_MIN: in0SW);
    t25 = PIXEL_SUP(t25, (is_S)? PIXEL_MIN: in0S);
    t25 = PIXEL_SUP(t25, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t25;
  }
}

// opencl function main_opencl_helper_E8_511
KERNEL void main_opencl_helper_E8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t29 = PIXEL_MAX;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t29 = PIXEL_INF(t29, (is_N|is_W)? PIXEL_MAX: in0NW);
    t29 = PIXEL_INF(t29, (is_N)? PIXEL_MAX: in0N);
    t29 = PIXEL_INF(t29, (is_N|is_E)? PIXEL_MAX: in0NE);
    t29 = PIXEL_INF(t29, (is_W)? PIXEL_MAX: in0W);
    t29 = PIXEL_INF(t29, in0);
    t29 = PIXEL_INF(t29, (is_E)? PIXEL_MAX: in0E);
    t29 = PIXEL_INF(t29, (is_S|is_W)? PIXEL_MAX: in0SW);
    t29 = PIXEL_INF(t29, (is_S)? PIXEL_MAX: in0S);
    t29 = PIXEL_INF(t29, (is_S|is_E)? PIXEL_MAX: in0SE);

    // set output pixels
    p0[i] = t29;
  }
}

// opencl function main_opencl_helper_0_0_2
KERNEL void main_opencl_helper_0_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  GLOBAL PIXEL * i2, // const?
  int ofs_i2,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  GLOBAL TMeasure * redX)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // reduction stuff is currently hardcoded...
  int vol = 0;
  PIXEL minv = PIXEL_MAX;
  int2 minpos = { 0, 0 };
  PIXEL maxv = PIXEL_MIN;
  int2 maxpos = { 0, 0 };

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;
  GLOBAL PIXEL * j2 = i2 + ofs_i2 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t30 = PIXEL_MAX;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL t26 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];
    PIXEL in2 = j2[i];

    // pixel computations
    t30 = PIXEL_INF(t30, (is_N|is_W)? PIXEL_MAX: in1NW);
    t30 = PIXEL_INF(t30, (is_N)? PIXEL_MAX: in1N);
    t30 = PIXEL_INF(t30, (is_N|is_E)? PIXEL_MAX: in1NE);
    t30 = PIXEL_INF(t30, (is_W)? PIXEL_MAX: in1W);
    t30 = PIXEL_INF(t30, in1);
    t30 = PIXEL_INF(t30, (is_E)? PIXEL_MAX: in1E);
    t30 = PIXEL_INF(t30, (is_S|is_W)? PIXEL_MAX: in1SW);
    t30 = PIXEL_INF(t30, (is_S)? PIXEL_MAX: in1S);
    t30 = PIXEL_INF(t30, (is_S|is_E)? PIXEL_MAX: in1SE);
    t26 = PIXEL_SUP(t26, (is_N|is_W)? PIXEL_MIN: in0NW);
    t26 = PIXEL_SUP(t26, (is_N)? PIXEL_MIN: in0N);
    t26 = PIXEL_SUP(t26, (is_N|is_E)? PIXEL_MIN: in0NE);
    t26 = PIXEL_SUP(t26, (is_W)? PIXEL_MIN: in0W);
    t26 = PIXEL_SUP(t26, in0);
    t26 = PIXEL_SUP(t26, (is_E)? PIXEL_MIN: in0E);
    t26 = PIXEL_SUP(t26, (is_S|is_W)? PIXEL_MIN: in0SW);
    t26 = PIXEL_SUP(t26, (is_S)? PIXEL_MIN: in0S);
    t26 = PIXEL_SUP(t26, (is_S|is_E)? PIXEL_MIN: in0SE);
    PIXEL t36 = PIXEL_SUB(t26, in2);
    PIXEL t37 = PIXEL_SUB(in2, t30);
    PIXEL t39 = PIXEL_SUP(t36, t37);
    PIXEL t40 = PIXEL_SUB(t36, t39);
    PIXEL t41 = PIXEL_THRESHOLD(t40, c0, c1, c2);
    PIXEL t43 = PIXEL_REPLACE_EC(t41, t26, c3);
    PIXEL t44 = PIXEL_REPLACE_EC(t41, t30, c4);
    PIXEL t45 = PIXEL_SUP(t43, t44);
    PIXEL_VOLUME(red51, t45);

    // set output pixels
    p0[i] = t45;
  }

  // reduction copy out
  int thrid = get_global_id(0)*get_global_size(1)+get_global_id(1);
  redX[thrid].vol = vol;
}

! updated function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   int32_t measure_vol;                                                 /*0009*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/
   
   
   main_opencl_helper_0_0_0(imWork1, imWork2, in);                      /*0024*/

   main_opencl_helper_D8_511(imWork1, imWork1);                         /*0025*/
   main_opencl_helper_E8_511(imWork2, imWork2);                         /*0029*/
   main_opencl_helper_0_0_2(out, imWork1, imWork2, in, 1, 255, 1, 255, 0, &measure_vol);              /*0030*/
   
   
   
   
   
   
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! cleaned up function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   int32_t measure_vol;                                                 /*0009*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/
   
   
   main_opencl_helper_0_0_0(imWork1, imWork2, in);                      /*0024*/

   main_opencl_helper_D8_511(imWork1, imWork1);                         /*0025*/
   main_opencl_helper_E8_511(imWork2, imWork2);                         /*0029*/
   main_opencl_helper_0_0_2(out, imWork1, imWork2, in, 1, 255, 1, 255, 0, &measure_vol);              /*0030*/
   
   
   
   
   
   
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}
#
# SIGMAC
#
#
# compile generated toggle
#

! initial function

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *imWork1, *imWork2, *out;                          /*0007*/
   register int i, j;                                                   /*0008*/
   int32_t measure_vol;                                                 /*0009*/
   freia_data2d *mask, *work2, *work1;                                  /*0010*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0018*/
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);              /*0019*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/

   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);           /*0024*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0025*/
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);      /*0026*/

   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);            /*0028*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0029*/
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);       /*0030*/

   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0032*/
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);               /*0033*/
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);                /*0034*/

   freia_aipo_sub(work1, imWork1, in);                                  /*0036*/
   freia_aipo_sub(work2, in, imWork2);                                  /*0037*/

   freia_aipo_sup(mask, work1, work2);                                  /*0039*/
   freia_aipo_sub(mask, work1, mask);                                   /*0040*/
   freia_aipo_threshold(mask, mask, 1, 255, 1);                         /*0041*/

   freia_aipo_replace_const(work1, mask, imWork1, 255);                 /*0043*/
   freia_aipo_replace_const(work2, mask, imWork2, 0);                   /*0044*/
   freia_aipo_sup(out, work1, work2);                                   /*0045*/

   freia_common_destruct_data(work1);                                   /*0047*/
   freia_common_destruct_data(work2);                                   /*0048*/
   freia_common_destruct_data(mask);                                    /*0049*/

   freia_aipo_global_vol(out, &measure_vol);                            /*0051*/

   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(imWork1);                                 /*0059*/
   freia_common_destruct_data(imWork2);                                 /*0060*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! graphs

// graph for dag "dag_0" of module "main" in dot format
// DAG "dag_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1"];
  "36 -" -> "39 >" [label="work1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}
// graph for dag "dag_cleaned_0" of module "main" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=15 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "51 vol" [shape=diamond];
  "45 >" [shape=trapezium,orientation=270];
  "45 >" -> "51 vol" [label="out"];
  "45 >" -> "out";
  "44 :" [shape=trapezium,orientation=270];
  "44 :" -> "45 >" [label="work2"];
  "43 :" [shape=trapezium,orientation=270];
  "43 :" -> "45 >" [label="work1"];
  "41 thr" [shape=parallelogram];
  "41 thr" -> "44 :" [label="mask"];
  "41 thr" -> "43 :" [label="mask"];
  "40 -" [shape=trapezium,orientation=270];
  "40 -" -> "41 thr" [label="mask_1"];
  "39 >" [shape=trapezium,orientation=270];
  "39 >" -> "40 -" [label="mask_2"];
  "37 -" [shape=trapezium,orientation=270];
  "37 -" -> "39 >" [label="work2_1"];
  "36 -" [shape=trapezium,orientation=270];
  "36 -" -> "40 -" [label="work1_1"];
  "36 -" -> "39 >" [label="work1_1"];
  "30 E8" [shape=box];
  "30 E8" -> "44 :" [label="imWork2"];
  "30 E8" -> "37 -" [label="imWork2"];
  "29 E8" [shape=box];
  "29 E8" -> "30 E8" [label="imWork2_1"];
  "28 E8" [shape=box];
  "28 E8" -> "29 E8" [label="imWork2_2"];
  "26 D8" [shape=box];
  "26 D8" -> "43 :" [label="imWork1"];
  "26 D8" -> "36 -" [label="imWork1"];
  "25 D8" [shape=box];
  "25 D8" -> "26 D8" [label="imWork1_1"];
  "24 D8" [shape=box];
  "24 D8" -> "25 D8" [label="imWork1_2"];
  "in" -> "37 -";
  "in" -> "36 -";
  "in" -> "28 E8";
  "in" -> "24 D8";
}

! updated function for OPENCL

int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;                                            /*0006*/
   freia_data2d *in, *out;                                              /*0007*/
   int32_t measure_vol;                                                 /*0009*/

   freia_initialize(argc, argv);                                        /*0012*/

   freia_common_open_input(&fdin, 0);                                   /*0014*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);             /*0015*/

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);    /*0017*/
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);   /*0020*/

   freia_common_rx_image(in, &fdin);                                    /*0022*/
   
   
   
   
   
   
   
   freia_mppa_launch(0, 1, 1, 0, 1, in, out, &measure_vol);             /*0051*/
   
   
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));    /*0054*/

   freia_common_tx_image(out, &fdout);                                  /*0056*/

   freia_common_destruct_data(in);                                      /*0058*/
   freia_common_destruct_data(out);                                     /*0061*/

   freia_common_close_input(&fdin);                                     /*0063*/
   freia_common_close_output(&fdout);                                   /*0064*/
   freia_shutdown();                                                    /*0065*/

   return 0;                                                            /*0067*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=main fname=main_sigmac_helper_0 split=0


/*#####################################################################*/
/*################## main_sigmac_helper_0_0 Subgraph ##################*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 3, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_SUB(pi0, pi2);
  int16_t po1 = PIXEL_SUB(pi2, pi1);
  int16_t po2 = PIXEL_SUP(po0, po1);
  int16_t po3 = PIXEL_SUB(po0, po2);
  outp[0][i] = po3;
);

AGENT_MERGE_ARITH(agent_compound_0_1, int16_t, 3, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t pi2 = inp[2][i];
  int16_t po0 = PIXEL_THR(pi0, 1, 255, 1);
  int16_t po1 = PIXEL_REPLC(po0, pi1, 255);
  int16_t po2 = PIXEL_REPLC(po0, pi2, 0);
  int16_t po3 = PIXEL_SUP(po1, po2);
  outp[0][i] = po3;
);


#define pi5_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi5_0, int16_t)

subgraph
main_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent mr = new Measures_Retriever(pipeparout, 1);
    agent jo = new Join<int32_t>(1, 1);
    SigmaC_agent_setUnitType(jo,"k1-I/O");
    connect (jo.output, mr.input);

    // parameters declaration...
    int16_t pi0 = 0;
    int16_t pi1 = 255;
    int16_t pi2 = 1;
    int16_t pi3 = 255;
    int16_t pi4 = 1;
    int16_t pi5[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    // instantiations...
    agent dup3 = new rep(3, width);
    agent dil2 = new dilate_pi5_0(width, height);
    agent dil1 = new dilate_pi5_0(width, height);
    agent dup2 = new rep(2, width);
    agent dil0 = new dilate_pi5_0(width, height);
    agent ero2 = new erode_pi5_0(width, height);
    agent ero1 = new erode_pi5_0(width, height);
    agent dup1 = new rep(2, width);
    agent ero0 = new erode_pi5_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);
    agent dup0 = new rep(2, width);
    agent cpd1 = new agent_compound_0_1(width);
    agent vol0 = new img_global_vol(width, height);

    // connections...
    connect (strin.output[0] /* in */, dup3.input);
    connect (dup3.output[2], cpd0.input[2]);
    connect (dup3.output[1], ero2.input);
    connect (dup3.output[0], dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, dup2.input);
    connect (dup2.output[1], cpd1.input[1]);
    connect (dup2.output[0], cpd0.input[0]);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, dup1.input);
    connect (dup1.output[1], cpd1.input[2]);
    connect (dup1.output[0], cpd0.input[1]);
    connect (cpd0.output[0], cpd1.input[0]);
    connect (cpd1.output[0], dup0.input);
    connect (dup0.output[1], vol0.input);
    connect (dup0.output[0], strout.input[0] /* out */);
    connect (vol0.output, jo.input[0]);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new main_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


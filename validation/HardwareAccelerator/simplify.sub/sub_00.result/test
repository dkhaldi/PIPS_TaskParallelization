#
# AIPO
#
#
# compile generated sub_00
#

! initial function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   freia_aipo_sub(i, i, i);                                             /*0007*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_xor_const(t, i, 111);                                     /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}

! graphs

// graph for dag "dag_0" of module "sub_00" in dot format
// DAG "dag_0": #i=1 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i'" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 ^_" [shape=trapezium,orientation=270];
  "9 ^_" -> "10 thr" [label="t"];
  "7 -" [shape=trapezium,orientation=270];
  "7 -" -> "9 ^_" [label="i"];
  "7 -" -> "i'";
  "i" -> "7 -";
  "i" -> "7 -";
}
// graph for dag "dag_cleaned_0" of module "sub_00" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}

! updated function for AIPO

void sub_00(freia_data2d *o, freia_data2d *i)
{
   freia_data2d *t;                                                     /*0006*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_set_constant(i, 0);                                       /*0007*/
   freia_aipo_set_constant(t, 0^111);                                   /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}
#
# SPOC
#

! initial function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   freia_aipo_sub(i, i, i);                                             /*0007*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_xor_const(t, i, 111);                                     /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}

! graphs

// graph for dag "dag_0" of module "sub_00" in dot format
// DAG "dag_0": #i=1 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i'" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 ^_" [shape=trapezium,orientation=270];
  "9 ^_" -> "10 thr" [label="t"];
  "7 -" [shape=trapezium,orientation=270];
  "7 -" -> "9 ^_" [label="i"];
  "7 -" -> "i'";
  "i" -> "7 -";
  "i" -> "7 -";
}
// graph for dag "dag_cleaned_0" of module "sub_00" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}
// graph for dag "sub_00_spoc_helper_0_0" of module "sub_00" in dot format
// DAG "sub_00_spoc_helper_0_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "sub_00_spoc_helper_0_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies
// split 0: 1 cut
// # SPOC calls: 1

// FREIA-SPoC helper function for module sub_00
freia_status sub_00_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  int32_t pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // alu 7 set_constant stage 0
  si.alu[0][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[0][0].constant = pi0;


  // STAGE 1
  // alu 9 set_constant stage 1
  si.alu[1][0].op = SPOC_ALU_COPY_CONST;
  sp.alu[1][0].constant = pi1;

  // 0`t [1 alu] -> [1 threshold 0] 10 threshold
  si.mux[1][0].op = SPOC_MUX_IN1;
  si.mux[1][2].op = SPOC_MUX_IN0;
  // threshold 10 threshold stage 1 side 0
  si.th[1][0].op = pi4? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[1][0].boundmin = pi2;
  sp.th[1][0].boundmax = pi3;


  // output image i on 1 and image o on 0
  // i [0 alu] -> [1 output 1] 0 null
  si.mux[0][1].op = SPOC_MUX_IN1;
  si.mux[0][3].op = SPOC_MUX_IN0;
  // i [1 input 1] -> [1 output 1] 0 null
  si.mux[1][3].op = SPOC_MUX_IN1;

  // fill in to the end...
  // i [1 output 1] -> [7 output 1] 0 null
  // i [2 input 1] -> [7 output 1] 0 null
  si.mux[2][3].op = SPOC_MUX_IN1;
  // i [3 input 1] -> [7 output 1] 0 null
  si.mux[3][3].op = SPOC_MUX_IN1;
  // i [4 input 1] -> [7 output 1] 0 null
  si.mux[4][3].op = SPOC_MUX_IN1;
  // i [5 input 1] -> [7 output 1] 0 null
  si.mux[5][3].op = SPOC_MUX_IN1;
  // i [6 input 1] -> [7 output 1] 0 null
  si.mux[6][3].op = SPOC_MUX_IN1;
  // i [7 input 1] -> [7 output 1] 0 null
  si.mux[7][3].op = SPOC_MUX_IN1;

  // o [1 threshold 0] -> [1 output 0] 0 null
  // nope

  // fill in to the end...
  // o [1 output 0] -> [7 output 0] 0 null
  // o [2 input 0] -> [7 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // o [3 input 0] -> [7 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // o [4 input 0] -> [7 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // o [5 input 0] -> [7 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // o [6 input 0] -> [7 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // o [7 input 0] -> [7 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o1, o0, NULL, NULL);

  return ret;
}

! updated function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   sub_00_spoc_helper_0_0_0(i, o, 0, 0^111, 8, 100, true);              /*0007*/
}

! cleaned up function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   sub_00_spoc_helper_0_0_0(i, o, 0, 0^111, 8, 100, 1);                 /*0007*/
}
#
# TERAPIX
#

! initial function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   freia_aipo_sub(i, i, i);                                             /*0007*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_xor_const(t, i, 111);                                     /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}

! graphs

// graph for dag "dag_0" of module "sub_00" in dot format
// DAG "dag_0": #i=1 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i'" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 ^_" [shape=trapezium,orientation=270];
  "9 ^_" -> "10 thr" [label="t"];
  "7 -" [shape=trapezium,orientation=270];
  "7 -" -> "9 ^_" [label="i"];
  "7 -" -> "i'";
  "i" -> "7 -";
  "i" -> "7 -";
}
// graph for dag "dag_cleaned_0" of module "sub_00" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}
// graph for dag "sub_00_terapix_helper_0_0_0" of module "sub_00" in dot format
// DAG "sub_00_terapix_helper_0_0_0": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "sub_00_terapix_helper_0_0_0" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
}
// graph for dag "sub_00_terapix_helper_0_1_0" of module "sub_00" in dot format
// DAG "sub_00_terapix_helper_0_1_0": #i=0 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "sub_00_terapix_helper_0_1_0" {
  // inputs

  // outputs
  "i" [shape=circle];

  // computation vertices
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

/* FREIA terapix helper function for module sub_00
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 0 input image, 1 output image
 * 2 image operations in dag
 * dag length is 2, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 7
 * - communication: 24
 */
freia_status sub_00_terapix_helper_0_0_0(
  freia_data2d * o0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  int32_t pi4)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 1 parameters
  int16_t p_1[3];
  const int32_t x_1 = 1;
  const int32_t y_1 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][2];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = o0->heightWa;
  int max_computed_size = 512;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: C() -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi1;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SET_CONST;
  // 1: thr(1) -> 1
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_io_1_0;
  mcu_macro[1][1].xmin2 = imagelet_io_1_1;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  // copy of operation 1 parameters
  p_1[0] = pi2;
  p_1[1] = pi3;
  p_1[2] = pi4;
  gram.xoffset = x_1;
  gram.yoffset = y_1;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_1;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][1].xmin3 = x_1;
  mcu_macro[1][1].xmin3 = x_1;
  mcu_macro[0][1].ymin3 = y_1;
  mcu_macro[1][1].ymin3 = y_1;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_THRESHOLD;


  // no input

  // outputs:
  // - imagelet 1 is o0 for o
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 0;
  mcu_instr.in0 = NULL;
  mcu_instr.in1 = NULL;

  // actual instructions
  mcu_instr.nbinstr = 2;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0);

  // extract measures

  return ret;
}


/* FREIA terapix helper function for module sub_00
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 24
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 0 input image, 1 output image
 * 1 image operations in dag
 * dag length is 1, dag width is 1
 * costs in cycles per imagelet row:
 * - computation: 2
 * - communication: 24
 */
freia_status sub_00_terapix_helper_0_1_0(
  freia_data2d * o0,
  int32_t pi1)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[1];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 1 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 0;
  int image_height = o0->heightWa;
  int max_computed_size = 512;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 512;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_2;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: C() -> 1
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  // copy of operation 0 parameters
  p_0[0] = pi1;
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 1;
  gram.height = 1;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_SET_CONST;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_SET_CONST;


  // no input

  // outputs:
  // - imagelet 1 is o0 for i
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 0;
  mcu_instr.borderBottom = 0;
  mcu_instr.borderLeft   = 0;
  mcu_instr.borderRight  = 0;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 0;
  mcu_instr.in0 = NULL;
  mcu_instr.in1 = NULL;

  // actual instructions
  mcu_instr.nbinstr = 1;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0);

  // extract measures

  return ret;
}


! updated function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   sub_00_terapix_helper_0_0_0(o, 0^111, 8, 100, true);                 /*0009*/
   sub_00_terapix_helper_0_1_0(i, 0);                                   /*0007*/
}

! cleaned up function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   sub_00_terapix_helper_0_0_0(o, 0^111, 8, 100, 1);                    /*0009*/
   sub_00_terapix_helper_0_1_0(i, 0);                                   /*0007*/
}
#
# OPENCL
#

! initial function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   freia_aipo_sub(i, i, i);                                             /*0007*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_xor_const(t, i, 111);                                     /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}

! graphs

// graph for dag "dag_0" of module "sub_00" in dot format
// DAG "dag_0": #i=1 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i'" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 ^_" [shape=trapezium,orientation=270];
  "9 ^_" -> "10 thr" [label="t"];
  "7 -" [shape=trapezium,orientation=270];
  "7 -" -> "9 ^_" [label="i"];
  "7 -" -> "i'";
  "i" -> "7 -";
  "i" -> "7 -";
}
// graph for dag "dag_cleaned_0" of module "sub_00" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}
// graph for dag "sub_00_opencl_helper_0_0" of module "sub_00" in dot format
// DAG "sub_00_opencl_helper_0_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "sub_00_opencl_helper_0_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}
// graph for dag "sub_00_opencl_helper_0_0_1" of module "sub_00" in dot format
// DAG "sub_00_opencl_helper_0_0_1": #i=0 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "sub_00_opencl_helper_0_0_1" {
  // inputs

  // outputs
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 3 ops and 0 copies, optimized to 3 ops and 0+0+0 copies

// hold kernels for sub_00_opencl_helper_0_0_1
static cl_kernel sub_00_opencl_helper_0_0_1_kernel[2];

// compile kernels for sub_00_opencl_helper_0_0_1
static freia_status sub_00_opencl_helper_0_0_1_compile(void)
{
  // OpenCL source for sub_00_opencl_helper_0_0_1
  const char * sub_00_opencl_helper_0_0_1_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function sub_00_opencl_helper_0_0_1\n"
    "KERNEL void sub_00_opencl_helper_0_0_1(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "\n"
    "    // pixel computations\n"
    "    PIXEL t9 = PIXEL_SET(c0);\n"
    "    PIXEL t10 = PIXEL_THRESHOLD(t9, c1, c2, c3);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t10;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(sub_00_opencl_helper_0_0_1_source, "sub_00_opencl_helper_0_0_1", "-DPIXEL8", &sub_00_opencl_helper_0_0_1_kernel[0]);
  err |= freia_op_compile_kernel(sub_00_opencl_helper_0_0_1_source, "sub_00_opencl_helper_0_0_1", "-DPIXEL16", &sub_00_opencl_helper_0_0_1_kernel[1]);
  return err;
}

// helper function sub_00_opencl_helper_0_0_1
freia_status sub_00_opencl_helper_0_0_1(
  freia_data2d * o0,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= sub_00_opencl_helper_0_0_1_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = o0->bpp>>4;
  cl_kernel kernel = sub_00_opencl_helper_0_0_1_kernel[bpp];

  // call kernel sub_00_opencl_helper_0_0_1
  err |= freia_op_call_kernel(kernel, 1, 0, 4, 0, o0, c0, c1, c2, c3);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function sub_00

// opencl for dag 0

// opencl function sub_00_opencl_helper_0_0_1
KERNEL void sub_00_opencl_helper_0_0_1(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {

    // pixel computations
    PIXEL t9 = PIXEL_SET(c0);
    PIXEL t10 = PIXEL_THRESHOLD(t9, c1, c2, c3);

    // set output pixels
    p0[i] = t10;
  }
}

! updated function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   freia_aipo_set_constant(i, 0);                                       /*0007*/
   sub_00_opencl_helper_0_0_1(o, 0^111, 8, 100, true);                  /*0009*/
}

! cleaned up function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   freia_aipo_set_constant(i, 0);                                       /*0007*/
   sub_00_opencl_helper_0_0_1(o, 0^111, 8, 100, 1);                     /*0009*/
}
#
# SIGMAC
#
#
# compile generated sub_00
#

! initial function

void sub_00(freia_data2d *o, freia_data2d *i)
{
   int32_t seuil;                                                       /*0005*/
   freia_data2d *t;                                                     /*0006*/
   freia_aipo_sub(i, i, i);                                             /*0007*/
   t = freia_common_create_data(16, 128, 128);                          /*0008*/
   freia_aipo_xor_const(t, i, 111);                                     /*0009*/
   freia_aipo_threshold(o, t, 8, 100, true);                            /*0010*/
   freia_common_destruct_data(t);                                       /*0011*/
}

! graphs

// graph for dag "dag_0" of module "sub_00" in dot format
// DAG "dag_0": #i=1 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "i" [shape=circle];

  // outputs
  "i'" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 ^_" [shape=trapezium,orientation=270];
  "9 ^_" -> "10 thr" [label="t"];
  "7 -" [shape=trapezium,orientation=270];
  "7 -" -> "9 ^_" [label="i"];
  "7 -" -> "i'";
  "i" -> "7 -";
  "i" -> "7 -";
}
// graph for dag "dag_cleaned_0" of module "sub_00" in dot format
// DAG "dag_cleaned_0": #i=0 #o=2 #c=3 #s=0 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs

  // outputs
  "i" [shape=circle];
  "o" [shape=circle];

  // computation vertices
  "10 thr" [shape=parallelogram];
  "10 thr" -> "o";
  "9 C" [shape=trapezium,orientation=270];
  "9 C" -> "10 thr" [label="t"];
  "7 C" [shape=trapezium,orientation=270];
  "7 C" -> "i";
}

! updated function for OPENCL

void sub_00(freia_data2d *o, freia_data2d *i)
{
   freia_mppa_launch(0, 0, 2, 3, 0, i, o, 8, 100, true);                /*0010*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=sub_00 fname=sub_00_sigmac_helper_0 split=0


/*#####################################################################*/
/*################# sub_00_sigmac_helper_0_0 Subgraph #################*/
/*#####################################################################*/

subgraph
sub_00_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhout = new Launcher_Out(pipeout, 2, width, height);
    agent strout = new Streamer_Out(width, height, 2);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    agent pp = new Params_Provider(pipeparin, 3);
    agent sp = new Split<int32_t>(3, 1);
    SigmaC_agent_setUnitType(sp,"k1-I/O");
    connect (pp.output, sp.input);

    // parameters declaration...
    int16_t pi3 = 0^111;
    int16_t pi4 = 0;

    // instantiations...
    agent setc1 = new img_set_constant_16(width, pi4);
    agent setc0 = new img_set_constant_16(width, pi3);
    agent thr0 = new thresholder_dyn(width, height);

    // connections...
    connect (setc1.output, strout.input[0] /* i */);
    connect (setc0.output, thr0.input);
    connect (thr0.output, strout.input[1] /* o */);
    connect (sp.output[2], thr0.param[2]);
    connect (sp.output[1], thr0.param[1]);
    connect (sp.output[0], thr0.param[0]);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new sub_00_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


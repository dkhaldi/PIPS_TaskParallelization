#
# AIPO
#
#
# compile generated license_plate_2
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}

! updated function for AIPO

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1 = 0;                                              /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2 = 0;                                              /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3 = 0;                                              /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_erode_8c(imopen, in, kernel1x3);                          /*0053*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0054*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0055*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0056*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0057*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0058*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0059*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0060*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0061*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0062*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0063*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0064*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0065*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0066*/
   freia_aipo_erode_8c(imopen, imopen, kernel1x3);                      /*0067*/

   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0070*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0071*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0072*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0073*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0074*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0075*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0076*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0077*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0078*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0079*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0080*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0081*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0082*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0083*/
   freia_aipo_dilate_8c(imopen, imopen, kernel1x3);                     /*0084*/

   _return1 = ret_0;                                                    /*0087*/

   freia_aipo_dilate_8c(imclose, in, kernel1x3);                        /*0089*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0090*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0091*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0092*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0093*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0094*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0095*/
   freia_aipo_dilate_8c(imclose, imclose, kernel1x3);                   /*0096*/

   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0099*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0100*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0101*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0102*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0103*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0104*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0105*/
   freia_aipo_erode_8c(imclose, imclose, kernel1x3);                    /*0106*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   freia_aipo_erode_8c(imfilt, imand, kernel3x1);                       /*0117*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0118*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0119*/
   freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);                      /*0120*/

   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0123*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0124*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0125*/
   freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);                     /*0126*/

   _return2 = ret_2;                                                    /*0129*/

   freia_aipo_erode_8c(imout, imfilt, kernel1x3);                       /*0131*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0132*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0133*/
   freia_aipo_erode_8c(imout, imout, kernel1x3);                        /*0134*/

   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0137*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0138*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0139*/
   freia_aipo_dilate_8c(imout, imout, kernel1x3);                       /*0140*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# SPOC
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_spoc_helper_0_0" of module "license_plate" in dot format
// DAG "license_plate_spoc_helper_0_0": #i=1 #o=1 #c=68 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_spoc_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out_1" [shape=circle];

  // computation vertices
  "147 D8" [shape=box];
  "147 D8" -> "out_1";
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_spoc_helper_0_1" of module "license_plate" in dot format
// DAG "license_plate_spoc_helper_0_1": #i=2 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_spoc_helper_0_1" {
  // inputs
  "in" [shape=circle];
  "out_1" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "in" -> "152 &";
  "out_1" -> "152 &";
}

! acceleration function

#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <spoc.h>

// dag 0: 69 ops and 0 copies, optimized to 69 ops and 0+0+0 copies
// split 0: 4 cuts
// split 1: 1 cut
// # SPOC calls: 5

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_spoc_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 poc 0] 53 erode_8c
  // nope
  // poc 53 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_29 [0 poc 0] -> [1 poc 0] 54 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imopen_29 [1 input 0] -> [1 poc 0] 54 erode_8c
  // nope
  // poc 54 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_28 [1 poc 0] -> [2 poc 0] 55 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imopen_28 [2 input 0] -> [2 poc 0] 55 erode_8c
  // nope
  // poc 55 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_27 [2 poc 0] -> [3 poc 0] 56 erode_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imopen_27 [3 input 0] -> [3 poc 0] 56 erode_8c
  // nope
  // poc 56 erode_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_ERODE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_26 [3 poc 0] -> [4 poc 0] 57 erode_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imopen_26 [4 input 0] -> [4 poc 0] 57 erode_8c
  // nope
  // poc 57 erode_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_ERODE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_25 [4 poc 0] -> [5 poc 0] 58 erode_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imopen_25 [5 input 0] -> [5 poc 0] 58 erode_8c
  // nope
  // poc 58 erode_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_ERODE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen_24 [5 poc 0] -> [6 poc 0] 59 erode_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imopen_24 [6 input 0] -> [6 poc 0] 59 erode_8c
  // nope
  // poc 59 erode_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_ERODE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen_23 [6 poc 0] -> [7 poc 0] 60 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imopen_23 [7 input 0] -> [7 poc 0] 60 erode_8c
  // nope
  // poc 60 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imopen_22 [7 poc 0] -> [8 poc 0] 61 erode_8c
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`imopen_22 [8 input 0] -> [8 poc 0] 61 erode_8c
  // nope
  // poc 61 erode_8c stage 8 side 0
  si.poc[8][0].op = SPOC_POC_ERODE;
  si.poc[8][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][0].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imopen_21 [8 poc 0] -> [9 poc 0] 62 erode_8c
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`imopen_21 [9 input 0] -> [9 poc 0] 62 erode_8c
  // nope
  // poc 62 erode_8c stage 9 side 0
  si.poc[9][0].op = SPOC_POC_ERODE;
  si.poc[9][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][0].kernel[i] = pi0[i];


  // STAGE 10
  // 0`imopen_20 [9 poc 0] -> [10 poc 0] 63 erode_8c
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`imopen_20 [10 input 0] -> [10 poc 0] 63 erode_8c
  // nope
  // poc 63 erode_8c stage 10 side 0
  si.poc[10][0].op = SPOC_POC_ERODE;
  si.poc[10][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][0].kernel[i] = pi0[i];


  // STAGE 11
  // 0`imopen_19 [10 poc 0] -> [11 poc 0] 64 erode_8c
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`imopen_19 [11 input 0] -> [11 poc 0] 64 erode_8c
  // nope
  // poc 64 erode_8c stage 11 side 0
  si.poc[11][0].op = SPOC_POC_ERODE;
  si.poc[11][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][0].kernel[i] = pi0[i];


  // STAGE 12
  // 0`imopen_18 [11 poc 0] -> [12 poc 0] 65 erode_8c
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`imopen_18 [12 input 0] -> [12 poc 0] 65 erode_8c
  // nope
  // poc 65 erode_8c stage 12 side 0
  si.poc[12][0].op = SPOC_POC_ERODE;
  si.poc[12][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][0].kernel[i] = pi0[i];


  // STAGE 13
  // 0`imopen_17 [12 poc 0] -> [13 poc 0] 66 erode_8c
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`imopen_17 [13 input 0] -> [13 poc 0] 66 erode_8c
  // nope
  // poc 66 erode_8c stage 13 side 0
  si.poc[13][0].op = SPOC_POC_ERODE;
  si.poc[13][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][0].kernel[i] = pi0[i];


  // STAGE 14
  // 0`imopen_16 [13 poc 0] -> [14 poc 0] 67 erode_8c
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`imopen_16 [14 input 0] -> [14 poc 0] 67 erode_8c
  // nope
  // poc 67 erode_8c stage 14 side 0
  si.poc[14][0].op = SPOC_POC_ERODE;
  si.poc[14][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][0].kernel[i] = pi0[i];


  // STAGE 15
  // 0`imopen_15 [14 poc 0] -> [15 poc 0] 70 dilate_8c
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`imopen_15 [15 input 0] -> [15 poc 0] 70 dilate_8c
  // nope
  // poc 70 dilate_8c stage 15 side 0
  si.poc[15][0].op = SPOC_POC_DILATE;
  si.poc[15][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][0].kernel[i] = pi0[i];


  // STAGE 0
  // 0`in [0 input 1] -> [0 poc 1] 89 dilate_8c
  // nope
  // poc 89 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imclose_15 [0 poc 1] -> [1 poc 1] 90 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imclose_15 [1 input 1] -> [1 poc 1] 90 dilate_8c
  // nope
  // poc 90 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imclose_14 [1 poc 1] -> [2 poc 1] 91 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imclose_14 [2 input 1] -> [2 poc 1] 91 dilate_8c
  // nope
  // poc 91 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imclose_13 [2 poc 1] -> [3 poc 1] 92 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imclose_13 [3 input 1] -> [3 poc 1] 92 dilate_8c
  // nope
  // poc 92 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imclose_12 [3 poc 1] -> [4 poc 1] 93 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imclose_12 [4 input 1] -> [4 poc 1] 93 dilate_8c
  // nope
  // poc 93 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imclose_11 [4 poc 1] -> [5 poc 1] 94 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imclose_11 [5 input 1] -> [5 poc 1] 94 dilate_8c
  // nope
  // poc 94 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imclose_10 [5 poc 1] -> [6 poc 1] 95 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imclose_10 [6 input 1] -> [6 poc 1] 95 dilate_8c
  // nope
  // poc 95 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imclose_9 [6 poc 1] -> [7 poc 1] 96 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imclose_9 [7 input 1] -> [7 poc 1] 96 dilate_8c
  // nope
  // poc 96 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imclose_8 [7 poc 1] -> [8 poc 1] 99 erode_8c
  si.mux[7][3].op = SPOC_MUX_IN1;
  // 0`imclose_8 [8 input 1] -> [8 poc 1] 99 erode_8c
  // nope
  // poc 99 erode_8c stage 8 side 1
  si.poc[8][1].op = SPOC_POC_ERODE;
  si.poc[8][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][1].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imclose_7 [8 poc 1] -> [9 poc 1] 100 erode_8c
  si.mux[8][3].op = SPOC_MUX_IN1;
  // 0`imclose_7 [9 input 1] -> [9 poc 1] 100 erode_8c
  // nope
  // poc 100 erode_8c stage 9 side 1
  si.poc[9][1].op = SPOC_POC_ERODE;
  si.poc[9][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][1].kernel[i] = pi0[i];


  // STAGE 10
  // 0`imclose_6 [9 poc 1] -> [10 poc 1] 101 erode_8c
  si.mux[9][3].op = SPOC_MUX_IN1;
  // 0`imclose_6 [10 input 1] -> [10 poc 1] 101 erode_8c
  // nope
  // poc 101 erode_8c stage 10 side 1
  si.poc[10][1].op = SPOC_POC_ERODE;
  si.poc[10][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][1].kernel[i] = pi0[i];


  // STAGE 11
  // 0`imclose_5 [10 poc 1] -> [11 poc 1] 102 erode_8c
  si.mux[10][3].op = SPOC_MUX_IN1;
  // 0`imclose_5 [11 input 1] -> [11 poc 1] 102 erode_8c
  // nope
  // poc 102 erode_8c stage 11 side 1
  si.poc[11][1].op = SPOC_POC_ERODE;
  si.poc[11][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][1].kernel[i] = pi0[i];


  // STAGE 12
  // 0`imclose_4 [11 poc 1] -> [12 poc 1] 103 erode_8c
  si.mux[11][3].op = SPOC_MUX_IN1;
  // 0`imclose_4 [12 input 1] -> [12 poc 1] 103 erode_8c
  // nope
  // poc 103 erode_8c stage 12 side 1
  si.poc[12][1].op = SPOC_POC_ERODE;
  si.poc[12][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][1].kernel[i] = pi0[i];


  // STAGE 13
  // 0`imclose_3 [12 poc 1] -> [13 poc 1] 104 erode_8c
  si.mux[12][3].op = SPOC_MUX_IN1;
  // 0`imclose_3 [13 input 1] -> [13 poc 1] 104 erode_8c
  // nope
  // poc 104 erode_8c stage 13 side 1
  si.poc[13][1].op = SPOC_POC_ERODE;
  si.poc[13][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][1].kernel[i] = pi0[i];


  // STAGE 14
  // 0`imclose_2 [13 poc 1] -> [14 poc 1] 105 erode_8c
  si.mux[13][3].op = SPOC_MUX_IN1;
  // 0`imclose_2 [14 input 1] -> [14 poc 1] 105 erode_8c
  // nope
  // poc 105 erode_8c stage 14 side 1
  si.poc[14][1].op = SPOC_POC_ERODE;
  si.poc[14][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][1].kernel[i] = pi0[i];


  // STAGE 15
  // 0`imclose_1 [14 poc 1] -> [15 poc 1] 106 erode_8c
  si.mux[14][3].op = SPOC_MUX_IN1;
  // 0`imclose_1 [15 input 1] -> [15 poc 1] 106 erode_8c
  // nope
  // poc 106 erode_8c stage 15 side 1
  si.poc[15][1].op = SPOC_POC_ERODE;
  si.poc[15][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][1].kernel[i] = pi0[i];

  // 0`imclose [15 poc 1] -> [15 threshold 1] 113 threshold
  si.mux[15][3].op = SPOC_MUX_IN1;
  // threshold 113 threshold stage 15 side 1
  si.th[15][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[15][1].boundmin = pi1;
  sp.th[15][1].boundmax = pi2;


  // output image 0`imopen_14 on 0 and image 0`imcloseth on 1
  // 0`imopen_14 [15 poc 0] -> [15 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imopen_14 [15 output 0] -> [15 output 0] 0 null
  // nope

  // 0`imcloseth [15 threshold 1] -> [15 output 1] 0 null
  // nope

  // fill in to the end...
  // 0`imcloseth [15 output 1] -> [15 output 1] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, o1, i0, i0);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_spoc_helper_0_0_1(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  const int32_t * pi0,
  int32_t pi1,
  int32_t pi2,
  int32_t pi3,
  const int32_t * pi4)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imopen_14 [0 input 1] -> [0 poc 1] 71 dilate_8c
  // nope
  // poc 71 dilate_8c stage 0 side 1
  si.poc[0][1].op = SPOC_POC_DILATE;
  si.poc[0][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][1].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imopen_13 [0 poc 1] -> [1 poc 1] 72 dilate_8c
  si.mux[0][3].op = SPOC_MUX_IN1;
  // 0`imopen_13 [1 input 1] -> [1 poc 1] 72 dilate_8c
  // nope
  // poc 72 dilate_8c stage 1 side 1
  si.poc[1][1].op = SPOC_POC_DILATE;
  si.poc[1][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][1].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imopen_12 [1 poc 1] -> [2 poc 1] 73 dilate_8c
  si.mux[1][3].op = SPOC_MUX_IN1;
  // 0`imopen_12 [2 input 1] -> [2 poc 1] 73 dilate_8c
  // nope
  // poc 73 dilate_8c stage 2 side 1
  si.poc[2][1].op = SPOC_POC_DILATE;
  si.poc[2][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][1].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imopen_11 [2 poc 1] -> [3 poc 1] 74 dilate_8c
  si.mux[2][3].op = SPOC_MUX_IN1;
  // 0`imopen_11 [3 input 1] -> [3 poc 1] 74 dilate_8c
  // nope
  // poc 74 dilate_8c stage 3 side 1
  si.poc[3][1].op = SPOC_POC_DILATE;
  si.poc[3][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][1].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imopen_10 [3 poc 1] -> [4 poc 1] 75 dilate_8c
  si.mux[3][3].op = SPOC_MUX_IN1;
  // 0`imopen_10 [4 input 1] -> [4 poc 1] 75 dilate_8c
  // nope
  // poc 75 dilate_8c stage 4 side 1
  si.poc[4][1].op = SPOC_POC_DILATE;
  si.poc[4][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][1].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imopen_9 [4 poc 1] -> [5 poc 1] 76 dilate_8c
  si.mux[4][3].op = SPOC_MUX_IN1;
  // 0`imopen_9 [5 input 1] -> [5 poc 1] 76 dilate_8c
  // nope
  // poc 76 dilate_8c stage 5 side 1
  si.poc[5][1].op = SPOC_POC_DILATE;
  si.poc[5][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][1].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imopen_8 [5 poc 1] -> [6 poc 1] 77 dilate_8c
  si.mux[5][3].op = SPOC_MUX_IN1;
  // 0`imopen_8 [6 input 1] -> [6 poc 1] 77 dilate_8c
  // nope
  // poc 77 dilate_8c stage 6 side 1
  si.poc[6][1].op = SPOC_POC_DILATE;
  si.poc[6][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][1].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imopen_7 [6 poc 1] -> [7 poc 1] 78 dilate_8c
  si.mux[6][3].op = SPOC_MUX_IN1;
  // 0`imopen_7 [7 input 1] -> [7 poc 1] 78 dilate_8c
  // nope
  // poc 78 dilate_8c stage 7 side 1
  si.poc[7][1].op = SPOC_POC_DILATE;
  si.poc[7][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][1].kernel[i] = pi0[i];


  // STAGE 8
  // 0`imopen_6 [7 poc 1] -> [8 poc 1] 79 dilate_8c
  si.mux[7][3].op = SPOC_MUX_IN1;
  // 0`imopen_6 [8 input 1] -> [8 poc 1] 79 dilate_8c
  // nope
  // poc 79 dilate_8c stage 8 side 1
  si.poc[8][1].op = SPOC_POC_DILATE;
  si.poc[8][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][1].kernel[i] = pi0[i];


  // STAGE 9
  // 0`imopen_5 [8 poc 1] -> [9 poc 1] 80 dilate_8c
  si.mux[8][3].op = SPOC_MUX_IN1;
  // 0`imopen_5 [9 input 1] -> [9 poc 1] 80 dilate_8c
  // nope
  // poc 80 dilate_8c stage 9 side 1
  si.poc[9][1].op = SPOC_POC_DILATE;
  si.poc[9][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][1].kernel[i] = pi0[i];


  // STAGE 10
  // 0`imopen_4 [9 poc 1] -> [10 poc 1] 81 dilate_8c
  si.mux[9][3].op = SPOC_MUX_IN1;
  // 0`imopen_4 [10 input 1] -> [10 poc 1] 81 dilate_8c
  // nope
  // poc 81 dilate_8c stage 10 side 1
  si.poc[10][1].op = SPOC_POC_DILATE;
  si.poc[10][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][1].kernel[i] = pi0[i];


  // STAGE 11
  // 0`imopen_3 [10 poc 1] -> [11 poc 1] 82 dilate_8c
  si.mux[10][3].op = SPOC_MUX_IN1;
  // 0`imopen_3 [11 input 1] -> [11 poc 1] 82 dilate_8c
  // nope
  // poc 82 dilate_8c stage 11 side 1
  si.poc[11][1].op = SPOC_POC_DILATE;
  si.poc[11][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][1].kernel[i] = pi0[i];


  // STAGE 12
  // 0`imopen_2 [11 poc 1] -> [12 poc 1] 83 dilate_8c
  si.mux[11][3].op = SPOC_MUX_IN1;
  // 0`imopen_2 [12 input 1] -> [12 poc 1] 83 dilate_8c
  // nope
  // poc 83 dilate_8c stage 12 side 1
  si.poc[12][1].op = SPOC_POC_DILATE;
  si.poc[12][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][1].kernel[i] = pi0[i];


  // STAGE 13
  // 0`imopen_1 [12 poc 1] -> [13 poc 1] 84 dilate_8c
  si.mux[12][3].op = SPOC_MUX_IN1;
  // 0`imopen_1 [13 input 1] -> [13 poc 1] 84 dilate_8c
  // nope
  // poc 84 dilate_8c stage 13 side 1
  si.poc[13][1].op = SPOC_POC_DILATE;
  si.poc[13][1].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][1].kernel[i] = pi0[i];

  // 0`imopen [13 poc 1] -> [13 threshold 1] 112 threshold
  si.mux[13][3].op = SPOC_MUX_IN1;
  // threshold 112 threshold stage 13 side 1
  si.th[13][1].op = pi3? SPOC_TH_BINARIZE : SPOC_TH_NO_BINARIZE;
  sp.th[13][1].boundmin = pi1;
  sp.th[13][1].boundmax = pi2;


  // STAGE 14
  // 0`imcloseth [0 input 0] -> [14 alu] 115 and
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [1 input 0] -> [14 alu] 115 and
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [2 input 0] -> [14 alu] 115 and
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [3 input 0] -> [14 alu] 115 and
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [4 input 0] -> [14 alu] 115 and
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [5 input 0] -> [14 alu] 115 and
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [6 input 0] -> [14 alu] 115 and
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [7 input 0] -> [14 alu] 115 and
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [8 input 0] -> [14 alu] 115 and
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [9 input 0] -> [14 alu] 115 and
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [10 input 0] -> [14 alu] 115 and
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [11 input 0] -> [14 alu] 115 and
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [12 input 0] -> [14 alu] 115 and
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [13 input 0] -> [14 alu] 115 and
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`imcloseth [14 input 0] -> [14 alu] 115 and
  // nope
  // 0`imopenth [13 threshold 1] -> [14 alu] 115 and
  // 0`imopenth [14 input 1] -> [14 alu] 115 and
  // nope
  // alu 115 and stage 14
  si.alu[14][0].op = SPOC_ALU_AND_IN0_IN1;


  // STAGE 15
  // 0`imand [14 alu] -> [15 poc 0] 117 erode_8c
  si.mux[14][0].op = SPOC_MUX_IN1;
  si.mux[14][2].op = SPOC_MUX_IN0;
  // 0`imand [15 input 0] -> [15 poc 0] 117 erode_8c
  // nope
  // poc 117 erode_8c stage 15 side 0
  si.poc[15][0].op = SPOC_POC_ERODE;
  si.poc[15][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][0].kernel[i] = pi4[i];


  // output image 0`imfilt_7 on 0
  // 0`imfilt_7 [15 poc 0] -> [15 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`imfilt_7 [15 output 0] -> [15 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_spoc_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0,
  const int32_t * pi1,
  const int32_t * pi2)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`imfilt_7 [0 input 0] -> [0 poc 0] 118 erode_8c
  // nope
  // poc 118 erode_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_ERODE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`imfilt_6 [0 poc 0] -> [1 poc 0] 119 erode_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`imfilt_6 [1 input 0] -> [1 poc 0] 119 erode_8c
  // nope
  // poc 119 erode_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_ERODE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // STAGE 2
  // 0`imfilt_5 [1 poc 0] -> [2 poc 0] 120 erode_8c
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`imfilt_5 [2 input 0] -> [2 poc 0] 120 erode_8c
  // nope
  // poc 120 erode_8c stage 2 side 0
  si.poc[2][0].op = SPOC_POC_ERODE;
  si.poc[2][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[2][0].kernel[i] = pi0[i];


  // STAGE 3
  // 0`imfilt_4 [2 poc 0] -> [3 poc 0] 123 dilate_8c
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`imfilt_4 [3 input 0] -> [3 poc 0] 123 dilate_8c
  // nope
  // poc 123 dilate_8c stage 3 side 0
  si.poc[3][0].op = SPOC_POC_DILATE;
  si.poc[3][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[3][0].kernel[i] = pi0[i];


  // STAGE 4
  // 0`imfilt_3 [3 poc 0] -> [4 poc 0] 124 dilate_8c
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`imfilt_3 [4 input 0] -> [4 poc 0] 124 dilate_8c
  // nope
  // poc 124 dilate_8c stage 4 side 0
  si.poc[4][0].op = SPOC_POC_DILATE;
  si.poc[4][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[4][0].kernel[i] = pi0[i];


  // STAGE 5
  // 0`imfilt_2 [4 poc 0] -> [5 poc 0] 125 dilate_8c
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`imfilt_2 [5 input 0] -> [5 poc 0] 125 dilate_8c
  // nope
  // poc 125 dilate_8c stage 5 side 0
  si.poc[5][0].op = SPOC_POC_DILATE;
  si.poc[5][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[5][0].kernel[i] = pi0[i];


  // STAGE 6
  // 0`imfilt_1 [5 poc 0] -> [6 poc 0] 126 dilate_8c
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`imfilt_1 [6 input 0] -> [6 poc 0] 126 dilate_8c
  // nope
  // poc 126 dilate_8c stage 6 side 0
  si.poc[6][0].op = SPOC_POC_DILATE;
  si.poc[6][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[6][0].kernel[i] = pi0[i];


  // STAGE 7
  // 0`imfilt [6 poc 0] -> [7 poc 0] 131 erode_8c
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`imfilt [7 input 0] -> [7 poc 0] 131 erode_8c
  // nope
  // poc 131 erode_8c stage 7 side 0
  si.poc[7][0].op = SPOC_POC_ERODE;
  si.poc[7][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[7][0].kernel[i] = pi1[i];


  // STAGE 8
  // 0`imout_7 [7 poc 0] -> [8 poc 0] 132 erode_8c
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`imout_7 [8 input 0] -> [8 poc 0] 132 erode_8c
  // nope
  // poc 132 erode_8c stage 8 side 0
  si.poc[8][0].op = SPOC_POC_ERODE;
  si.poc[8][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[8][0].kernel[i] = pi1[i];


  // STAGE 9
  // 0`imout_6 [8 poc 0] -> [9 poc 0] 133 erode_8c
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`imout_6 [9 input 0] -> [9 poc 0] 133 erode_8c
  // nope
  // poc 133 erode_8c stage 9 side 0
  si.poc[9][0].op = SPOC_POC_ERODE;
  si.poc[9][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[9][0].kernel[i] = pi1[i];


  // STAGE 10
  // 0`imout_5 [9 poc 0] -> [10 poc 0] 134 erode_8c
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`imout_5 [10 input 0] -> [10 poc 0] 134 erode_8c
  // nope
  // poc 134 erode_8c stage 10 side 0
  si.poc[10][0].op = SPOC_POC_ERODE;
  si.poc[10][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[10][0].kernel[i] = pi1[i];


  // STAGE 11
  // 0`imout_4 [10 poc 0] -> [11 poc 0] 137 dilate_8c
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`imout_4 [11 input 0] -> [11 poc 0] 137 dilate_8c
  // nope
  // poc 137 dilate_8c stage 11 side 0
  si.poc[11][0].op = SPOC_POC_DILATE;
  si.poc[11][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[11][0].kernel[i] = pi1[i];


  // STAGE 12
  // 0`imout_3 [11 poc 0] -> [12 poc 0] 138 dilate_8c
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`imout_3 [12 input 0] -> [12 poc 0] 138 dilate_8c
  // nope
  // poc 138 dilate_8c stage 12 side 0
  si.poc[12][0].op = SPOC_POC_DILATE;
  si.poc[12][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[12][0].kernel[i] = pi1[i];


  // STAGE 13
  // 0`imout_2 [12 poc 0] -> [13 poc 0] 139 dilate_8c
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`imout_2 [13 input 0] -> [13 poc 0] 139 dilate_8c
  // nope
  // poc 139 dilate_8c stage 13 side 0
  si.poc[13][0].op = SPOC_POC_DILATE;
  si.poc[13][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[13][0].kernel[i] = pi1[i];


  // STAGE 14
  // 0`imout_1 [13 poc 0] -> [14 poc 0] 140 dilate_8c
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`imout_1 [14 input 0] -> [14 poc 0] 140 dilate_8c
  // nope
  // poc 140 dilate_8c stage 14 side 0
  si.poc[14][0].op = SPOC_POC_DILATE;
  si.poc[14][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[14][0].kernel[i] = pi1[i];


  // STAGE 15
  // 0`imout [14 poc 0] -> [15 poc 0] 145 dilate_8c
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`imout [15 input 0] -> [15 poc 0] 145 dilate_8c
  // nope
  // poc 145 dilate_8c stage 15 side 0
  si.poc[15][0].op = SPOC_POC_DILATE;
  si.poc[15][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[15][0].kernel[i] = pi2[i];


  // output image 0`out_3 on 0
  // 0`out_3 [15 poc 0] -> [15 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_3 [15 output 0] -> [15 output 0] 0 null
  // nope

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_spoc_helper_0_0_3(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi0)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;
  int i;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`out_3 [0 input 0] -> [0 poc 0] 146 dilate_8c
  // nope
  // poc 146 dilate_8c stage 0 side 0
  si.poc[0][0].op = SPOC_POC_DILATE;
  si.poc[0][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[0][0].kernel[i] = pi0[i];


  // STAGE 1
  // 0`out_2 [0 poc 0] -> [1 poc 0] 147 dilate_8c
  si.mux[0][0].op = SPOC_MUX_IN0;
  // 0`out_2 [1 input 0] -> [1 poc 0] 147 dilate_8c
  // nope
  // poc 147 dilate_8c stage 1 side 0
  si.poc[1][0].op = SPOC_POC_DILATE;
  si.poc[1][0].grid = SPOC_POC_8_CONNEX;
  for(i=0 ; i<9 ; i++)
    sp.poc[1][0].kernel[i] = pi0[i];


  // output image 0`out_1 on 0
  // 0`out_1 [1 poc 0] -> [1 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out_1 [1 output 0] -> [15 output 0] 0 null
  // 0`out_1 [2 input 0] -> [15 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out_1 [3 input 0] -> [15 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out_1 [4 input 0] -> [15 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out_1 [5 input 0] -> [15 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out_1 [6 input 0] -> [15 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out_1 [7 input 0] -> [15 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`out_1 [8 input 0] -> [15 output 0] 0 null
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`out_1 [9 input 0] -> [15 output 0] 0 null
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`out_1 [10 input 0] -> [15 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`out_1 [11 input 0] -> [15 output 0] 0 null
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`out_1 [12 input 0] -> [15 output 0] 0 null
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`out_1 [13 input 0] -> [15 output 0] 0 null
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`out_1 [14 input 0] -> [15 output 0] 0 null
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`out_1 [15 input 0] -> [15 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, NULL);

  return ret;
}

// FREIA-SPoC helper function for module license_plate
freia_status license_plate_spoc_helper_0_1_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  spoc_instr si;
  spoc_param sp;
  freia_microcode mcode;
  freia_dynamic_param dynparam;
  freia_op_param param;
  freia_status ret;

  // init pipe to nop
  spoc_init_pipe(&si, &sp, 16);


  // STAGE 0
  // 0`in [0 input 0] -> [0 alu] 152 and
  // nope
  // 0`out_1 [0 input 1] -> [0 alu] 152 and
  // nope
  // alu 152 and stage 0
  si.alu[0][0].op = SPOC_ALU_AND_IN0_IN1;


  // output image 0`out on 0
  // 0`out [0 alu] -> [0 output 0] 0 null
  si.mux[0][0].op = SPOC_MUX_IN1;
  si.mux[0][2].op = SPOC_MUX_IN0;

  // fill in to the end...
  // 0`out [0 output 0] -> [15 output 0] 0 null
  // 0`out [1 input 0] -> [15 output 0] 0 null
  si.mux[1][0].op = SPOC_MUX_IN0;
  // 0`out [2 input 0] -> [15 output 0] 0 null
  si.mux[2][0].op = SPOC_MUX_IN0;
  // 0`out [3 input 0] -> [15 output 0] 0 null
  si.mux[3][0].op = SPOC_MUX_IN0;
  // 0`out [4 input 0] -> [15 output 0] 0 null
  si.mux[4][0].op = SPOC_MUX_IN0;
  // 0`out [5 input 0] -> [15 output 0] 0 null
  si.mux[5][0].op = SPOC_MUX_IN0;
  // 0`out [6 input 0] -> [15 output 0] 0 null
  si.mux[6][0].op = SPOC_MUX_IN0;
  // 0`out [7 input 0] -> [15 output 0] 0 null
  si.mux[7][0].op = SPOC_MUX_IN0;
  // 0`out [8 input 0] -> [15 output 0] 0 null
  si.mux[8][0].op = SPOC_MUX_IN0;
  // 0`out [9 input 0] -> [15 output 0] 0 null
  si.mux[9][0].op = SPOC_MUX_IN0;
  // 0`out [10 input 0] -> [15 output 0] 0 null
  si.mux[10][0].op = SPOC_MUX_IN0;
  // 0`out [11 input 0] -> [15 output 0] 0 null
  si.mux[11][0].op = SPOC_MUX_IN0;
  // 0`out [12 input 0] -> [15 output 0] 0 null
  si.mux[12][0].op = SPOC_MUX_IN0;
  // 0`out [13 input 0] -> [15 output 0] 0 null
  si.mux[13][0].op = SPOC_MUX_IN0;
  // 0`out [14 input 0] -> [15 output 0] 0 null
  si.mux[14][0].op = SPOC_MUX_IN0;
  // 0`out [15 input 0] -> [15 output 0] 0 null
  si.mux[15][0].op = SPOC_MUX_IN0;

  mcode.raw = (freia_ptr) &si;
  mcode.size = sizeof(spoc_instr);

  dynparam.raw = (freia_ptr) &sp;
  dynparam.size = sizeof(spoc_param);

  ret = freia_cg_write_microcode(&mcode);
  ret |= freia_cg_write_dynamic_param(&dynparam);

  // actual call of spoc hardware
  freia_cg_template_process_2i_2o(&param, o0, NULL, i0, i1);

  return ret;
}

! updated function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2 = 0;                                              /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_spoc_helper_0_0_0(imopen, imcloseth, in, kernel1x3, 150, 255, 1);     /*0053*/

   license_plate_spoc_helper_0_0_1(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);        /*0071*/

   ret_1 = 0;                                                           /*0089*/
   
   
   
   
   ret_2 = 0;                                                           /*0117*/
   license_plate_spoc_helper_0_0_2(out, imfilt, kernel3x1, kernel1x3, freia_morpho_kernel_8c);        /*0118*/
   
   
   ret_3 = 0;                                                           /*0131*/
   
   
   license_plate_spoc_helper_0_0_3(out, out, freia_morpho_kernel_8c);   /*0146*/

   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/

   license_plate_spoc_helper_0_1_0(out, in, out);                       /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! cleaned up function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2 = 0;                                              /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_spoc_helper_0_0_0(imopen, imcloseth, in, kernel1x3, 150, 255, 1);     /*0053*/

   license_plate_spoc_helper_0_0_1(imfilt, imcloseth, imopen, kernel1x3, 1, 50, 1, kernel3x1);        /*0071*/

   ret_1 = 0;                                                           /*0089*/
   
   
   
   
   ret_2 = 0;                                                           /*0117*/
   license_plate_spoc_helper_0_0_2(out, imfilt, kernel3x1, kernel1x3, freia_morpho_kernel_8c);        /*0118*/
   
   
   ret_3 = 0;                                                           /*0131*/
   
   
   license_plate_spoc_helper_0_0_3(out, out, freia_morpho_kernel_8c);   /*0146*/

   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/

   license_plate_spoc_helper_0_1_0(out, in, out);                       /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# TERAPIX
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_terapix_helper_0_0_0" of module "license_plate" in dot format
// DAG "license_plate_terapix_helper_0_0_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_terapix_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}

! acceleration function

// freia terapix includes
#include <freiaCommon.h>
#include <freiaMediumGrain.h>
#include <freiaCoarseGrain.h>
#include <terapix.h>
#include <terapix_ucode.h>

// dag 0: 69 ops and 0 copies, optimized to 69 ops and 0+0+0 copies

/* FREIA terapix helper function for module license_plate
 *
 * RAMPE    = 1024
 * NPE      = 128
 * DMA BW   = 256
 * GRAM W   = 64
 * GRAM H   = 32
 * DAG CUT  = compute
 * OVERLAP  = false
 * IMAGE H  = 0
 * MAX SIZE = 0
 *
 * 1 input image, 1 output image
 * 69 image operations in dag
 * dag length is 53, dag width is 2
 * costs in cycles per imagelet row:
 * - computation: 993
 * - communication: 512
 */
freia_status license_plate_terapix_helper_0_0_0(
  freia_data2d * o0,
  const freia_data2d * i0,
  const int32_t * pi2,
  int32_t pi3,
  int32_t pi4,
  int32_t pi5,
  int32_t pi6,
  int32_t pi7,
  int32_t pi8,
  const int32_t * pi9,
  const int32_t * pi10)
{
  // declarations:
  freia_microcode mcode;
  freia_op_param param;
  freia_dynamic_param dyn_param;
  terapix_gram gram;
  int i;
  freia_status ret = FREIA_OK;
  // data structures for reductions
  terapix_mcu_macrocode mem_init;
  freia_reduction_results redres;
  terapix_reduction redter;
  // overall structure which describes the computation
  terapix_mcu_instr mcu_instr;
  // operation 0 parameters
  int16_t p_0[9];
  const int32_t x_0 = 0;
  const int32_t y_0 = 0;
  // operation 46 parameters
  int16_t p_46[3];
  const int32_t x_46 = 3;
  const int32_t y_46 = 0;
  // operation 47 parameters
  int16_t p_47[3];
  const int32_t x_47 = 6;
  const int32_t y_47 = 0;
  // operation 49 parameters
  int16_t p_49[9];
  const int32_t x_49 = 9;
  const int32_t y_49 = 0;
  // operation 65 parameters
  int16_t p_65[9];
  const int32_t x_65 = 12;
  const int32_t y_65 = 0;
  // flip flop macro code and I/Os
  terapix_mcu_macrocode mcu_macro[2][69];
  terapix_tile_info tile_in[2][1];
  terapix_tile_info tile_out[2][1];
  // imagelets definitions:
  // - 4 computation imagelets
  // - 1 double buffer imagelets
  // dynamic optimal imagelet size computation
  // this formula must match what the scheduler does!
  int vertical_border = 11;
  int image_height = i0->heightWa;
  int max_computed_size = 182;
  int n_tiles = (image_height+max_computed_size-1)/max_computed_size;
  int imagelet_size = (n_tiles==1)? image_height:
        ((image_height+n_tiles-1)/n_tiles)+2*vertical_border;
  int imagelet_1 = 0;
  int imagelet_2 = 204;
  int imagelet_3 = 408;
  int imagelet_4 = 612;
  int imagelet_5 = 816;

  // double buffer assignment
  int imagelet_io_1_0 = imagelet_1;
  int imagelet_io_1_1 = imagelet_5;

  // body:
  // mcode param
  mcode.raw = (void*) terapix_ucode_array;
  mcode.size = TERAPIX_UCODE_SIZE_T;
  freia_mg_write_microcode(&mcode);

  // dyn_param contents
  dyn_param.raw = &gram;
  dyn_param.size = sizeof(terapix_gram);

  // redres contents
  redres.raw = (void*) &redter;
  redres.size = sizeof(terapix_reduction);

  // 0: E8(1) -> 2
  mcu_macro[0][0].xmin1 = imagelet_io_1_0;
  mcu_macro[1][0].xmin1 = imagelet_io_1_1;
  mcu_macro[0][0].ymin1 = 0;
  mcu_macro[1][0].ymin1 = 0;
  mcu_macro[0][0].xmin2 = imagelet_2;
  mcu_macro[1][0].xmin2 = imagelet_2;
  mcu_macro[0][0].ymin2 = 0;
  mcu_macro[1][0].ymin2 = 0;
  // copy of operation 0 parameters
  for(i=0; i<9; i++)
    p_0[i] = pi2[i];
  gram.xoffset = x_0;
  gram.yoffset = y_0;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_0;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][0].xmin3 = x_0;
  mcu_macro[1][0].xmin3 = x_0;
  mcu_macro[0][0].ymin3 = y_0;
  mcu_macro[1][0].ymin3 = y_0;
  mcu_macro[0][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][0].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][0].iter2 = imagelet_size;
  mcu_macro[1][0].iter2 = imagelet_size;
  mcu_macro[0][0].iter3 = 0;
  mcu_macro[1][0].iter3 = 0;
  mcu_macro[0][0].iter4 = 0;
  mcu_macro[1][0].iter4 = 0;
  mcu_macro[0][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][0].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 1: D8(1) -> 3
  mcu_macro[0][1].xmin1 = imagelet_io_1_0;
  mcu_macro[1][1].xmin1 = imagelet_io_1_1;
  mcu_macro[0][1].ymin1 = 0;
  mcu_macro[1][1].ymin1 = 0;
  mcu_macro[0][1].xmin2 = imagelet_3;
  mcu_macro[1][1].xmin2 = imagelet_3;
  mcu_macro[0][1].ymin2 = 0;
  mcu_macro[1][1].ymin2 = 0;
  mcu_macro[0][1].xmin3 = x_0;
  mcu_macro[1][1].xmin3 = x_0;
  mcu_macro[0][1].ymin3 = y_0;
  mcu_macro[1][1].ymin3 = y_0;
  mcu_macro[0][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][1].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][1].iter2 = imagelet_size;
  mcu_macro[1][1].iter2 = imagelet_size;
  mcu_macro[0][1].iter3 = 0;
  mcu_macro[1][1].iter3 = 0;
  mcu_macro[0][1].iter4 = 0;
  mcu_macro[1][1].iter4 = 0;
  mcu_macro[0][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][1].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 2: E8(2) -> 4
  mcu_macro[0][2].xmin1 = imagelet_2;
  mcu_macro[1][2].xmin1 = imagelet_2;
  mcu_macro[0][2].ymin1 = 0;
  mcu_macro[1][2].ymin1 = 0;
  mcu_macro[0][2].xmin2 = imagelet_4;
  mcu_macro[1][2].xmin2 = imagelet_4;
  mcu_macro[0][2].ymin2 = 0;
  mcu_macro[1][2].ymin2 = 0;
  mcu_macro[0][2].xmin3 = x_0;
  mcu_macro[1][2].xmin3 = x_0;
  mcu_macro[0][2].ymin3 = y_0;
  mcu_macro[1][2].ymin3 = y_0;
  mcu_macro[0][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][2].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][2].iter2 = imagelet_size;
  mcu_macro[1][2].iter2 = imagelet_size;
  mcu_macro[0][2].iter3 = 0;
  mcu_macro[1][2].iter3 = 0;
  mcu_macro[0][2].iter4 = 0;
  mcu_macro[1][2].iter4 = 0;
  mcu_macro[0][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][2].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 3: D8(3) -> 2
  mcu_macro[0][3].xmin1 = imagelet_3;
  mcu_macro[1][3].xmin1 = imagelet_3;
  mcu_macro[0][3].ymin1 = 0;
  mcu_macro[1][3].ymin1 = 0;
  mcu_macro[0][3].xmin2 = imagelet_2;
  mcu_macro[1][3].xmin2 = imagelet_2;
  mcu_macro[0][3].ymin2 = 0;
  mcu_macro[1][3].ymin2 = 0;
  mcu_macro[0][3].xmin3 = x_0;
  mcu_macro[1][3].xmin3 = x_0;
  mcu_macro[0][3].ymin3 = y_0;
  mcu_macro[1][3].ymin3 = y_0;
  mcu_macro[0][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][3].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][3].iter2 = imagelet_size;
  mcu_macro[1][3].iter2 = imagelet_size;
  mcu_macro[0][3].iter3 = 0;
  mcu_macro[1][3].iter3 = 0;
  mcu_macro[0][3].iter4 = 0;
  mcu_macro[1][3].iter4 = 0;
  mcu_macro[0][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][3].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 4: E8(4) -> 3
  mcu_macro[0][4].xmin1 = imagelet_4;
  mcu_macro[1][4].xmin1 = imagelet_4;
  mcu_macro[0][4].ymin1 = 0;
  mcu_macro[1][4].ymin1 = 0;
  mcu_macro[0][4].xmin2 = imagelet_3;
  mcu_macro[1][4].xmin2 = imagelet_3;
  mcu_macro[0][4].ymin2 = 0;
  mcu_macro[1][4].ymin2 = 0;
  mcu_macro[0][4].xmin3 = x_0;
  mcu_macro[1][4].xmin3 = x_0;
  mcu_macro[0][4].ymin3 = y_0;
  mcu_macro[1][4].ymin3 = y_0;
  mcu_macro[0][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][4].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][4].iter2 = imagelet_size;
  mcu_macro[1][4].iter2 = imagelet_size;
  mcu_macro[0][4].iter3 = 0;
  mcu_macro[1][4].iter3 = 0;
  mcu_macro[0][4].iter4 = 0;
  mcu_macro[1][4].iter4 = 0;
  mcu_macro[0][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][4].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 5: D8(2) -> 4
  mcu_macro[0][5].xmin1 = imagelet_2;
  mcu_macro[1][5].xmin1 = imagelet_2;
  mcu_macro[0][5].ymin1 = 0;
  mcu_macro[1][5].ymin1 = 0;
  mcu_macro[0][5].xmin2 = imagelet_4;
  mcu_macro[1][5].xmin2 = imagelet_4;
  mcu_macro[0][5].ymin2 = 0;
  mcu_macro[1][5].ymin2 = 0;
  mcu_macro[0][5].xmin3 = x_0;
  mcu_macro[1][5].xmin3 = x_0;
  mcu_macro[0][5].ymin3 = y_0;
  mcu_macro[1][5].ymin3 = y_0;
  mcu_macro[0][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][5].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][5].iter2 = imagelet_size;
  mcu_macro[1][5].iter2 = imagelet_size;
  mcu_macro[0][5].iter3 = 0;
  mcu_macro[1][5].iter3 = 0;
  mcu_macro[0][5].iter4 = 0;
  mcu_macro[1][5].iter4 = 0;
  mcu_macro[0][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][5].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 6: E8(3) -> 2
  mcu_macro[0][6].xmin1 = imagelet_3;
  mcu_macro[1][6].xmin1 = imagelet_3;
  mcu_macro[0][6].ymin1 = 0;
  mcu_macro[1][6].ymin1 = 0;
  mcu_macro[0][6].xmin2 = imagelet_2;
  mcu_macro[1][6].xmin2 = imagelet_2;
  mcu_macro[0][6].ymin2 = 0;
  mcu_macro[1][6].ymin2 = 0;
  mcu_macro[0][6].xmin3 = x_0;
  mcu_macro[1][6].xmin3 = x_0;
  mcu_macro[0][6].ymin3 = y_0;
  mcu_macro[1][6].ymin3 = y_0;
  mcu_macro[0][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][6].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][6].iter2 = imagelet_size;
  mcu_macro[1][6].iter2 = imagelet_size;
  mcu_macro[0][6].iter3 = 0;
  mcu_macro[1][6].iter3 = 0;
  mcu_macro[0][6].iter4 = 0;
  mcu_macro[1][6].iter4 = 0;
  mcu_macro[0][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][6].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 7: D8(4) -> 3
  mcu_macro[0][7].xmin1 = imagelet_4;
  mcu_macro[1][7].xmin1 = imagelet_4;
  mcu_macro[0][7].ymin1 = 0;
  mcu_macro[1][7].ymin1 = 0;
  mcu_macro[0][7].xmin2 = imagelet_3;
  mcu_macro[1][7].xmin2 = imagelet_3;
  mcu_macro[0][7].ymin2 = 0;
  mcu_macro[1][7].ymin2 = 0;
  mcu_macro[0][7].xmin3 = x_0;
  mcu_macro[1][7].xmin3 = x_0;
  mcu_macro[0][7].ymin3 = y_0;
  mcu_macro[1][7].ymin3 = y_0;
  mcu_macro[0][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][7].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][7].iter2 = imagelet_size;
  mcu_macro[1][7].iter2 = imagelet_size;
  mcu_macro[0][7].iter3 = 0;
  mcu_macro[1][7].iter3 = 0;
  mcu_macro[0][7].iter4 = 0;
  mcu_macro[1][7].iter4 = 0;
  mcu_macro[0][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][7].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 8: E8(2) -> 4
  mcu_macro[0][8].xmin1 = imagelet_2;
  mcu_macro[1][8].xmin1 = imagelet_2;
  mcu_macro[0][8].ymin1 = 0;
  mcu_macro[1][8].ymin1 = 0;
  mcu_macro[0][8].xmin2 = imagelet_4;
  mcu_macro[1][8].xmin2 = imagelet_4;
  mcu_macro[0][8].ymin2 = 0;
  mcu_macro[1][8].ymin2 = 0;
  mcu_macro[0][8].xmin3 = x_0;
  mcu_macro[1][8].xmin3 = x_0;
  mcu_macro[0][8].ymin3 = y_0;
  mcu_macro[1][8].ymin3 = y_0;
  mcu_macro[0][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][8].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][8].iter2 = imagelet_size;
  mcu_macro[1][8].iter2 = imagelet_size;
  mcu_macro[0][8].iter3 = 0;
  mcu_macro[1][8].iter3 = 0;
  mcu_macro[0][8].iter4 = 0;
  mcu_macro[1][8].iter4 = 0;
  mcu_macro[0][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][8].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 9: D8(3) -> 2
  mcu_macro[0][9].xmin1 = imagelet_3;
  mcu_macro[1][9].xmin1 = imagelet_3;
  mcu_macro[0][9].ymin1 = 0;
  mcu_macro[1][9].ymin1 = 0;
  mcu_macro[0][9].xmin2 = imagelet_2;
  mcu_macro[1][9].xmin2 = imagelet_2;
  mcu_macro[0][9].ymin2 = 0;
  mcu_macro[1][9].ymin2 = 0;
  mcu_macro[0][9].xmin3 = x_0;
  mcu_macro[1][9].xmin3 = x_0;
  mcu_macro[0][9].ymin3 = y_0;
  mcu_macro[1][9].ymin3 = y_0;
  mcu_macro[0][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][9].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][9].iter2 = imagelet_size;
  mcu_macro[1][9].iter2 = imagelet_size;
  mcu_macro[0][9].iter3 = 0;
  mcu_macro[1][9].iter3 = 0;
  mcu_macro[0][9].iter4 = 0;
  mcu_macro[1][9].iter4 = 0;
  mcu_macro[0][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][9].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 10: E8(4) -> 3
  mcu_macro[0][10].xmin1 = imagelet_4;
  mcu_macro[1][10].xmin1 = imagelet_4;
  mcu_macro[0][10].ymin1 = 0;
  mcu_macro[1][10].ymin1 = 0;
  mcu_macro[0][10].xmin2 = imagelet_3;
  mcu_macro[1][10].xmin2 = imagelet_3;
  mcu_macro[0][10].ymin2 = 0;
  mcu_macro[1][10].ymin2 = 0;
  mcu_macro[0][10].xmin3 = x_0;
  mcu_macro[1][10].xmin3 = x_0;
  mcu_macro[0][10].ymin3 = y_0;
  mcu_macro[1][10].ymin3 = y_0;
  mcu_macro[0][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][10].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][10].iter2 = imagelet_size;
  mcu_macro[1][10].iter2 = imagelet_size;
  mcu_macro[0][10].iter3 = 0;
  mcu_macro[1][10].iter3 = 0;
  mcu_macro[0][10].iter4 = 0;
  mcu_macro[1][10].iter4 = 0;
  mcu_macro[0][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][10].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 11: D8(2) -> 4
  mcu_macro[0][11].xmin1 = imagelet_2;
  mcu_macro[1][11].xmin1 = imagelet_2;
  mcu_macro[0][11].ymin1 = 0;
  mcu_macro[1][11].ymin1 = 0;
  mcu_macro[0][11].xmin2 = imagelet_4;
  mcu_macro[1][11].xmin2 = imagelet_4;
  mcu_macro[0][11].ymin2 = 0;
  mcu_macro[1][11].ymin2 = 0;
  mcu_macro[0][11].xmin3 = x_0;
  mcu_macro[1][11].xmin3 = x_0;
  mcu_macro[0][11].ymin3 = y_0;
  mcu_macro[1][11].ymin3 = y_0;
  mcu_macro[0][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][11].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][11].iter2 = imagelet_size;
  mcu_macro[1][11].iter2 = imagelet_size;
  mcu_macro[0][11].iter3 = 0;
  mcu_macro[1][11].iter3 = 0;
  mcu_macro[0][11].iter4 = 0;
  mcu_macro[1][11].iter4 = 0;
  mcu_macro[0][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][11].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 12: E8(3) -> 2
  mcu_macro[0][12].xmin1 = imagelet_3;
  mcu_macro[1][12].xmin1 = imagelet_3;
  mcu_macro[0][12].ymin1 = 0;
  mcu_macro[1][12].ymin1 = 0;
  mcu_macro[0][12].xmin2 = imagelet_2;
  mcu_macro[1][12].xmin2 = imagelet_2;
  mcu_macro[0][12].ymin2 = 0;
  mcu_macro[1][12].ymin2 = 0;
  mcu_macro[0][12].xmin3 = x_0;
  mcu_macro[1][12].xmin3 = x_0;
  mcu_macro[0][12].ymin3 = y_0;
  mcu_macro[1][12].ymin3 = y_0;
  mcu_macro[0][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][12].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][12].iter2 = imagelet_size;
  mcu_macro[1][12].iter2 = imagelet_size;
  mcu_macro[0][12].iter3 = 0;
  mcu_macro[1][12].iter3 = 0;
  mcu_macro[0][12].iter4 = 0;
  mcu_macro[1][12].iter4 = 0;
  mcu_macro[0][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][12].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 13: D8(4) -> 3
  mcu_macro[0][13].xmin1 = imagelet_4;
  mcu_macro[1][13].xmin1 = imagelet_4;
  mcu_macro[0][13].ymin1 = 0;
  mcu_macro[1][13].ymin1 = 0;
  mcu_macro[0][13].xmin2 = imagelet_3;
  mcu_macro[1][13].xmin2 = imagelet_3;
  mcu_macro[0][13].ymin2 = 0;
  mcu_macro[1][13].ymin2 = 0;
  mcu_macro[0][13].xmin3 = x_0;
  mcu_macro[1][13].xmin3 = x_0;
  mcu_macro[0][13].ymin3 = y_0;
  mcu_macro[1][13].ymin3 = y_0;
  mcu_macro[0][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][13].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][13].iter2 = imagelet_size;
  mcu_macro[1][13].iter2 = imagelet_size;
  mcu_macro[0][13].iter3 = 0;
  mcu_macro[1][13].iter3 = 0;
  mcu_macro[0][13].iter4 = 0;
  mcu_macro[1][13].iter4 = 0;
  mcu_macro[0][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][13].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 14: E8(2) -> 4
  mcu_macro[0][14].xmin1 = imagelet_2;
  mcu_macro[1][14].xmin1 = imagelet_2;
  mcu_macro[0][14].ymin1 = 0;
  mcu_macro[1][14].ymin1 = 0;
  mcu_macro[0][14].xmin2 = imagelet_4;
  mcu_macro[1][14].xmin2 = imagelet_4;
  mcu_macro[0][14].ymin2 = 0;
  mcu_macro[1][14].ymin2 = 0;
  mcu_macro[0][14].xmin3 = x_0;
  mcu_macro[1][14].xmin3 = x_0;
  mcu_macro[0][14].ymin3 = y_0;
  mcu_macro[1][14].ymin3 = y_0;
  mcu_macro[0][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][14].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][14].iter2 = imagelet_size;
  mcu_macro[1][14].iter2 = imagelet_size;
  mcu_macro[0][14].iter3 = 0;
  mcu_macro[1][14].iter3 = 0;
  mcu_macro[0][14].iter4 = 0;
  mcu_macro[1][14].iter4 = 0;
  mcu_macro[0][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][14].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 15: D8(3) -> 2
  mcu_macro[0][15].xmin1 = imagelet_3;
  mcu_macro[1][15].xmin1 = imagelet_3;
  mcu_macro[0][15].ymin1 = 0;
  mcu_macro[1][15].ymin1 = 0;
  mcu_macro[0][15].xmin2 = imagelet_2;
  mcu_macro[1][15].xmin2 = imagelet_2;
  mcu_macro[0][15].ymin2 = 0;
  mcu_macro[1][15].ymin2 = 0;
  mcu_macro[0][15].xmin3 = x_0;
  mcu_macro[1][15].xmin3 = x_0;
  mcu_macro[0][15].ymin3 = y_0;
  mcu_macro[1][15].ymin3 = y_0;
  mcu_macro[0][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][15].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][15].iter2 = imagelet_size;
  mcu_macro[1][15].iter2 = imagelet_size;
  mcu_macro[0][15].iter3 = 0;
  mcu_macro[1][15].iter3 = 0;
  mcu_macro[0][15].iter4 = 0;
  mcu_macro[1][15].iter4 = 0;
  mcu_macro[0][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][15].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 16: E8(4) -> 3
  mcu_macro[0][16].xmin1 = imagelet_4;
  mcu_macro[1][16].xmin1 = imagelet_4;
  mcu_macro[0][16].ymin1 = 0;
  mcu_macro[1][16].ymin1 = 0;
  mcu_macro[0][16].xmin2 = imagelet_3;
  mcu_macro[1][16].xmin2 = imagelet_3;
  mcu_macro[0][16].ymin2 = 0;
  mcu_macro[1][16].ymin2 = 0;
  mcu_macro[0][16].xmin3 = x_0;
  mcu_macro[1][16].xmin3 = x_0;
  mcu_macro[0][16].ymin3 = y_0;
  mcu_macro[1][16].ymin3 = y_0;
  mcu_macro[0][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][16].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][16].iter2 = imagelet_size;
  mcu_macro[1][16].iter2 = imagelet_size;
  mcu_macro[0][16].iter3 = 0;
  mcu_macro[1][16].iter3 = 0;
  mcu_macro[0][16].iter4 = 0;
  mcu_macro[1][16].iter4 = 0;
  mcu_macro[0][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][16].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 17: E8(2) -> 4
  mcu_macro[0][17].xmin1 = imagelet_2;
  mcu_macro[1][17].xmin1 = imagelet_2;
  mcu_macro[0][17].ymin1 = 0;
  mcu_macro[1][17].ymin1 = 0;
  mcu_macro[0][17].xmin2 = imagelet_4;
  mcu_macro[1][17].xmin2 = imagelet_4;
  mcu_macro[0][17].ymin2 = 0;
  mcu_macro[1][17].ymin2 = 0;
  mcu_macro[0][17].xmin3 = x_0;
  mcu_macro[1][17].xmin3 = x_0;
  mcu_macro[0][17].ymin3 = y_0;
  mcu_macro[1][17].ymin3 = y_0;
  mcu_macro[0][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][17].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][17].iter2 = imagelet_size;
  mcu_macro[1][17].iter2 = imagelet_size;
  mcu_macro[0][17].iter3 = 0;
  mcu_macro[1][17].iter3 = 0;
  mcu_macro[0][17].iter4 = 0;
  mcu_macro[1][17].iter4 = 0;
  mcu_macro[0][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][17].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 18: E8(3) -> 2
  mcu_macro[0][18].xmin1 = imagelet_3;
  mcu_macro[1][18].xmin1 = imagelet_3;
  mcu_macro[0][18].ymin1 = 0;
  mcu_macro[1][18].ymin1 = 0;
  mcu_macro[0][18].xmin2 = imagelet_2;
  mcu_macro[1][18].xmin2 = imagelet_2;
  mcu_macro[0][18].ymin2 = 0;
  mcu_macro[1][18].ymin2 = 0;
  mcu_macro[0][18].xmin3 = x_0;
  mcu_macro[1][18].xmin3 = x_0;
  mcu_macro[0][18].ymin3 = y_0;
  mcu_macro[1][18].ymin3 = y_0;
  mcu_macro[0][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][18].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][18].iter2 = imagelet_size;
  mcu_macro[1][18].iter2 = imagelet_size;
  mcu_macro[0][18].iter3 = 0;
  mcu_macro[1][18].iter3 = 0;
  mcu_macro[0][18].iter4 = 0;
  mcu_macro[1][18].iter4 = 0;
  mcu_macro[0][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][18].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 19: E8(4) -> 3
  mcu_macro[0][19].xmin1 = imagelet_4;
  mcu_macro[1][19].xmin1 = imagelet_4;
  mcu_macro[0][19].ymin1 = 0;
  mcu_macro[1][19].ymin1 = 0;
  mcu_macro[0][19].xmin2 = imagelet_3;
  mcu_macro[1][19].xmin2 = imagelet_3;
  mcu_macro[0][19].ymin2 = 0;
  mcu_macro[1][19].ymin2 = 0;
  mcu_macro[0][19].xmin3 = x_0;
  mcu_macro[1][19].xmin3 = x_0;
  mcu_macro[0][19].ymin3 = y_0;
  mcu_macro[1][19].ymin3 = y_0;
  mcu_macro[0][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][19].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][19].iter2 = imagelet_size;
  mcu_macro[1][19].iter2 = imagelet_size;
  mcu_macro[0][19].iter3 = 0;
  mcu_macro[1][19].iter3 = 0;
  mcu_macro[0][19].iter4 = 0;
  mcu_macro[1][19].iter4 = 0;
  mcu_macro[0][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][19].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 20: E8(2) -> 4
  mcu_macro[0][20].xmin1 = imagelet_2;
  mcu_macro[1][20].xmin1 = imagelet_2;
  mcu_macro[0][20].ymin1 = 0;
  mcu_macro[1][20].ymin1 = 0;
  mcu_macro[0][20].xmin2 = imagelet_4;
  mcu_macro[1][20].xmin2 = imagelet_4;
  mcu_macro[0][20].ymin2 = 0;
  mcu_macro[1][20].ymin2 = 0;
  mcu_macro[0][20].xmin3 = x_0;
  mcu_macro[1][20].xmin3 = x_0;
  mcu_macro[0][20].ymin3 = y_0;
  mcu_macro[1][20].ymin3 = y_0;
  mcu_macro[0][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][20].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][20].iter2 = imagelet_size;
  mcu_macro[1][20].iter2 = imagelet_size;
  mcu_macro[0][20].iter3 = 0;
  mcu_macro[1][20].iter3 = 0;
  mcu_macro[0][20].iter4 = 0;
  mcu_macro[1][20].iter4 = 0;
  mcu_macro[0][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][20].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 21: E8(3) -> 2
  mcu_macro[0][21].xmin1 = imagelet_3;
  mcu_macro[1][21].xmin1 = imagelet_3;
  mcu_macro[0][21].ymin1 = 0;
  mcu_macro[1][21].ymin1 = 0;
  mcu_macro[0][21].xmin2 = imagelet_2;
  mcu_macro[1][21].xmin2 = imagelet_2;
  mcu_macro[0][21].ymin2 = 0;
  mcu_macro[1][21].ymin2 = 0;
  mcu_macro[0][21].xmin3 = x_0;
  mcu_macro[1][21].xmin3 = x_0;
  mcu_macro[0][21].ymin3 = y_0;
  mcu_macro[1][21].ymin3 = y_0;
  mcu_macro[0][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][21].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][21].iter2 = imagelet_size;
  mcu_macro[1][21].iter2 = imagelet_size;
  mcu_macro[0][21].iter3 = 0;
  mcu_macro[1][21].iter3 = 0;
  mcu_macro[0][21].iter4 = 0;
  mcu_macro[1][21].iter4 = 0;
  mcu_macro[0][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][21].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 22: E8(4) -> 3
  mcu_macro[0][22].xmin1 = imagelet_4;
  mcu_macro[1][22].xmin1 = imagelet_4;
  mcu_macro[0][22].ymin1 = 0;
  mcu_macro[1][22].ymin1 = 0;
  mcu_macro[0][22].xmin2 = imagelet_3;
  mcu_macro[1][22].xmin2 = imagelet_3;
  mcu_macro[0][22].ymin2 = 0;
  mcu_macro[1][22].ymin2 = 0;
  mcu_macro[0][22].xmin3 = x_0;
  mcu_macro[1][22].xmin3 = x_0;
  mcu_macro[0][22].ymin3 = y_0;
  mcu_macro[1][22].ymin3 = y_0;
  mcu_macro[0][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][22].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][22].iter2 = imagelet_size;
  mcu_macro[1][22].iter2 = imagelet_size;
  mcu_macro[0][22].iter3 = 0;
  mcu_macro[1][22].iter3 = 0;
  mcu_macro[0][22].iter4 = 0;
  mcu_macro[1][22].iter4 = 0;
  mcu_macro[0][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][22].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 23: E8(2) -> 4
  mcu_macro[0][23].xmin1 = imagelet_2;
  mcu_macro[1][23].xmin1 = imagelet_2;
  mcu_macro[0][23].ymin1 = 0;
  mcu_macro[1][23].ymin1 = 0;
  mcu_macro[0][23].xmin2 = imagelet_4;
  mcu_macro[1][23].xmin2 = imagelet_4;
  mcu_macro[0][23].ymin2 = 0;
  mcu_macro[1][23].ymin2 = 0;
  mcu_macro[0][23].xmin3 = x_0;
  mcu_macro[1][23].xmin3 = x_0;
  mcu_macro[0][23].ymin3 = y_0;
  mcu_macro[1][23].ymin3 = y_0;
  mcu_macro[0][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][23].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][23].iter2 = imagelet_size;
  mcu_macro[1][23].iter2 = imagelet_size;
  mcu_macro[0][23].iter3 = 0;
  mcu_macro[1][23].iter3 = 0;
  mcu_macro[0][23].iter4 = 0;
  mcu_macro[1][23].iter4 = 0;
  mcu_macro[0][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][23].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 24: E8(3) -> 2
  mcu_macro[0][24].xmin1 = imagelet_3;
  mcu_macro[1][24].xmin1 = imagelet_3;
  mcu_macro[0][24].ymin1 = 0;
  mcu_macro[1][24].ymin1 = 0;
  mcu_macro[0][24].xmin2 = imagelet_2;
  mcu_macro[1][24].xmin2 = imagelet_2;
  mcu_macro[0][24].ymin2 = 0;
  mcu_macro[1][24].ymin2 = 0;
  mcu_macro[0][24].xmin3 = x_0;
  mcu_macro[1][24].xmin3 = x_0;
  mcu_macro[0][24].ymin3 = y_0;
  mcu_macro[1][24].ymin3 = y_0;
  mcu_macro[0][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][24].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][24].iter2 = imagelet_size;
  mcu_macro[1][24].iter2 = imagelet_size;
  mcu_macro[0][24].iter3 = 0;
  mcu_macro[1][24].iter3 = 0;
  mcu_macro[0][24].iter4 = 0;
  mcu_macro[1][24].iter4 = 0;
  mcu_macro[0][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][24].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 25: E8(4) -> 3
  mcu_macro[0][25].xmin1 = imagelet_4;
  mcu_macro[1][25].xmin1 = imagelet_4;
  mcu_macro[0][25].ymin1 = 0;
  mcu_macro[1][25].ymin1 = 0;
  mcu_macro[0][25].xmin2 = imagelet_3;
  mcu_macro[1][25].xmin2 = imagelet_3;
  mcu_macro[0][25].ymin2 = 0;
  mcu_macro[1][25].ymin2 = 0;
  mcu_macro[0][25].xmin3 = x_0;
  mcu_macro[1][25].xmin3 = x_0;
  mcu_macro[0][25].ymin3 = y_0;
  mcu_macro[1][25].ymin3 = y_0;
  mcu_macro[0][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][25].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][25].iter2 = imagelet_size;
  mcu_macro[1][25].iter2 = imagelet_size;
  mcu_macro[0][25].iter3 = 0;
  mcu_macro[1][25].iter3 = 0;
  mcu_macro[0][25].iter4 = 0;
  mcu_macro[1][25].iter4 = 0;
  mcu_macro[0][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][25].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 26: E8(2) -> 4
  mcu_macro[0][26].xmin1 = imagelet_2;
  mcu_macro[1][26].xmin1 = imagelet_2;
  mcu_macro[0][26].ymin1 = 0;
  mcu_macro[1][26].ymin1 = 0;
  mcu_macro[0][26].xmin2 = imagelet_4;
  mcu_macro[1][26].xmin2 = imagelet_4;
  mcu_macro[0][26].ymin2 = 0;
  mcu_macro[1][26].ymin2 = 0;
  mcu_macro[0][26].xmin3 = x_0;
  mcu_macro[1][26].xmin3 = x_0;
  mcu_macro[0][26].ymin3 = y_0;
  mcu_macro[1][26].ymin3 = y_0;
  mcu_macro[0][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][26].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][26].iter2 = imagelet_size;
  mcu_macro[1][26].iter2 = imagelet_size;
  mcu_macro[0][26].iter3 = 0;
  mcu_macro[1][26].iter3 = 0;
  mcu_macro[0][26].iter4 = 0;
  mcu_macro[1][26].iter4 = 0;
  mcu_macro[0][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][26].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 27: E8(3) -> 2
  mcu_macro[0][27].xmin1 = imagelet_3;
  mcu_macro[1][27].xmin1 = imagelet_3;
  mcu_macro[0][27].ymin1 = 0;
  mcu_macro[1][27].ymin1 = 0;
  mcu_macro[0][27].xmin2 = imagelet_2;
  mcu_macro[1][27].xmin2 = imagelet_2;
  mcu_macro[0][27].ymin2 = 0;
  mcu_macro[1][27].ymin2 = 0;
  mcu_macro[0][27].xmin3 = x_0;
  mcu_macro[1][27].xmin3 = x_0;
  mcu_macro[0][27].ymin3 = y_0;
  mcu_macro[1][27].ymin3 = y_0;
  mcu_macro[0][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][27].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][27].iter2 = imagelet_size;
  mcu_macro[1][27].iter2 = imagelet_size;
  mcu_macro[0][27].iter3 = 0;
  mcu_macro[1][27].iter3 = 0;
  mcu_macro[0][27].iter4 = 0;
  mcu_macro[1][27].iter4 = 0;
  mcu_macro[0][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][27].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 28: E8(4) -> 3
  mcu_macro[0][28].xmin1 = imagelet_4;
  mcu_macro[1][28].xmin1 = imagelet_4;
  mcu_macro[0][28].ymin1 = 0;
  mcu_macro[1][28].ymin1 = 0;
  mcu_macro[0][28].xmin2 = imagelet_3;
  mcu_macro[1][28].xmin2 = imagelet_3;
  mcu_macro[0][28].ymin2 = 0;
  mcu_macro[1][28].ymin2 = 0;
  mcu_macro[0][28].xmin3 = x_0;
  mcu_macro[1][28].xmin3 = x_0;
  mcu_macro[0][28].ymin3 = y_0;
  mcu_macro[1][28].ymin3 = y_0;
  mcu_macro[0][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][28].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][28].iter2 = imagelet_size;
  mcu_macro[1][28].iter2 = imagelet_size;
  mcu_macro[0][28].iter3 = 0;
  mcu_macro[1][28].iter3 = 0;
  mcu_macro[0][28].iter4 = 0;
  mcu_macro[1][28].iter4 = 0;
  mcu_macro[0][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][28].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 29: E8(2) -> 4
  mcu_macro[0][29].xmin1 = imagelet_2;
  mcu_macro[1][29].xmin1 = imagelet_2;
  mcu_macro[0][29].ymin1 = 0;
  mcu_macro[1][29].ymin1 = 0;
  mcu_macro[0][29].xmin2 = imagelet_4;
  mcu_macro[1][29].xmin2 = imagelet_4;
  mcu_macro[0][29].ymin2 = 0;
  mcu_macro[1][29].ymin2 = 0;
  mcu_macro[0][29].xmin3 = x_0;
  mcu_macro[1][29].xmin3 = x_0;
  mcu_macro[0][29].ymin3 = y_0;
  mcu_macro[1][29].ymin3 = y_0;
  mcu_macro[0][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][29].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][29].iter2 = imagelet_size;
  mcu_macro[1][29].iter2 = imagelet_size;
  mcu_macro[0][29].iter3 = 0;
  mcu_macro[1][29].iter3 = 0;
  mcu_macro[0][29].iter4 = 0;
  mcu_macro[1][29].iter4 = 0;
  mcu_macro[0][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][29].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 30: D8(3) -> 2
  mcu_macro[0][30].xmin1 = imagelet_3;
  mcu_macro[1][30].xmin1 = imagelet_3;
  mcu_macro[0][30].ymin1 = 0;
  mcu_macro[1][30].ymin1 = 0;
  mcu_macro[0][30].xmin2 = imagelet_2;
  mcu_macro[1][30].xmin2 = imagelet_2;
  mcu_macro[0][30].ymin2 = 0;
  mcu_macro[1][30].ymin2 = 0;
  mcu_macro[0][30].xmin3 = x_0;
  mcu_macro[1][30].xmin3 = x_0;
  mcu_macro[0][30].ymin3 = y_0;
  mcu_macro[1][30].ymin3 = y_0;
  mcu_macro[0][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][30].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][30].iter2 = imagelet_size;
  mcu_macro[1][30].iter2 = imagelet_size;
  mcu_macro[0][30].iter3 = 0;
  mcu_macro[1][30].iter3 = 0;
  mcu_macro[0][30].iter4 = 0;
  mcu_macro[1][30].iter4 = 0;
  mcu_macro[0][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][30].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 31: E8(4) -> 3
  mcu_macro[0][31].xmin1 = imagelet_4;
  mcu_macro[1][31].xmin1 = imagelet_4;
  mcu_macro[0][31].ymin1 = 0;
  mcu_macro[1][31].ymin1 = 0;
  mcu_macro[0][31].xmin2 = imagelet_3;
  mcu_macro[1][31].xmin2 = imagelet_3;
  mcu_macro[0][31].ymin2 = 0;
  mcu_macro[1][31].ymin2 = 0;
  mcu_macro[0][31].xmin3 = x_0;
  mcu_macro[1][31].xmin3 = x_0;
  mcu_macro[0][31].ymin3 = y_0;
  mcu_macro[1][31].ymin3 = y_0;
  mcu_macro[0][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][31].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][31].iter2 = imagelet_size;
  mcu_macro[1][31].iter2 = imagelet_size;
  mcu_macro[0][31].iter3 = 0;
  mcu_macro[1][31].iter3 = 0;
  mcu_macro[0][31].iter4 = 0;
  mcu_macro[1][31].iter4 = 0;
  mcu_macro[0][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][31].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 32: D8(2) -> 4
  mcu_macro[0][32].xmin1 = imagelet_2;
  mcu_macro[1][32].xmin1 = imagelet_2;
  mcu_macro[0][32].ymin1 = 0;
  mcu_macro[1][32].ymin1 = 0;
  mcu_macro[0][32].xmin2 = imagelet_4;
  mcu_macro[1][32].xmin2 = imagelet_4;
  mcu_macro[0][32].ymin2 = 0;
  mcu_macro[1][32].ymin2 = 0;
  mcu_macro[0][32].xmin3 = x_0;
  mcu_macro[1][32].xmin3 = x_0;
  mcu_macro[0][32].ymin3 = y_0;
  mcu_macro[1][32].ymin3 = y_0;
  mcu_macro[0][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][32].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][32].iter2 = imagelet_size;
  mcu_macro[1][32].iter2 = imagelet_size;
  mcu_macro[0][32].iter3 = 0;
  mcu_macro[1][32].iter3 = 0;
  mcu_macro[0][32].iter4 = 0;
  mcu_macro[1][32].iter4 = 0;
  mcu_macro[0][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][32].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 33: D8(4) -> 2
  mcu_macro[0][33].xmin1 = imagelet_4;
  mcu_macro[1][33].xmin1 = imagelet_4;
  mcu_macro[0][33].ymin1 = 0;
  mcu_macro[1][33].ymin1 = 0;
  mcu_macro[0][33].xmin2 = imagelet_2;
  mcu_macro[1][33].xmin2 = imagelet_2;
  mcu_macro[0][33].ymin2 = 0;
  mcu_macro[1][33].ymin2 = 0;
  mcu_macro[0][33].xmin3 = x_0;
  mcu_macro[1][33].xmin3 = x_0;
  mcu_macro[0][33].ymin3 = y_0;
  mcu_macro[1][33].ymin3 = y_0;
  mcu_macro[0][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][33].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][33].iter2 = imagelet_size;
  mcu_macro[1][33].iter2 = imagelet_size;
  mcu_macro[0][33].iter3 = 0;
  mcu_macro[1][33].iter3 = 0;
  mcu_macro[0][33].iter4 = 0;
  mcu_macro[1][33].iter4 = 0;
  mcu_macro[0][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][33].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 34: D8(2) -> 4
  mcu_macro[0][34].xmin1 = imagelet_2;
  mcu_macro[1][34].xmin1 = imagelet_2;
  mcu_macro[0][34].ymin1 = 0;
  mcu_macro[1][34].ymin1 = 0;
  mcu_macro[0][34].xmin2 = imagelet_4;
  mcu_macro[1][34].xmin2 = imagelet_4;
  mcu_macro[0][34].ymin2 = 0;
  mcu_macro[1][34].ymin2 = 0;
  mcu_macro[0][34].xmin3 = x_0;
  mcu_macro[1][34].xmin3 = x_0;
  mcu_macro[0][34].ymin3 = y_0;
  mcu_macro[1][34].ymin3 = y_0;
  mcu_macro[0][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][34].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][34].iter2 = imagelet_size;
  mcu_macro[1][34].iter2 = imagelet_size;
  mcu_macro[0][34].iter3 = 0;
  mcu_macro[1][34].iter3 = 0;
  mcu_macro[0][34].iter4 = 0;
  mcu_macro[1][34].iter4 = 0;
  mcu_macro[0][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][34].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 35: D8(4) -> 2
  mcu_macro[0][35].xmin1 = imagelet_4;
  mcu_macro[1][35].xmin1 = imagelet_4;
  mcu_macro[0][35].ymin1 = 0;
  mcu_macro[1][35].ymin1 = 0;
  mcu_macro[0][35].xmin2 = imagelet_2;
  mcu_macro[1][35].xmin2 = imagelet_2;
  mcu_macro[0][35].ymin2 = 0;
  mcu_macro[1][35].ymin2 = 0;
  mcu_macro[0][35].xmin3 = x_0;
  mcu_macro[1][35].xmin3 = x_0;
  mcu_macro[0][35].ymin3 = y_0;
  mcu_macro[1][35].ymin3 = y_0;
  mcu_macro[0][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][35].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][35].iter2 = imagelet_size;
  mcu_macro[1][35].iter2 = imagelet_size;
  mcu_macro[0][35].iter3 = 0;
  mcu_macro[1][35].iter3 = 0;
  mcu_macro[0][35].iter4 = 0;
  mcu_macro[1][35].iter4 = 0;
  mcu_macro[0][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][35].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 36: D8(2) -> 4
  mcu_macro[0][36].xmin1 = imagelet_2;
  mcu_macro[1][36].xmin1 = imagelet_2;
  mcu_macro[0][36].ymin1 = 0;
  mcu_macro[1][36].ymin1 = 0;
  mcu_macro[0][36].xmin2 = imagelet_4;
  mcu_macro[1][36].xmin2 = imagelet_4;
  mcu_macro[0][36].ymin2 = 0;
  mcu_macro[1][36].ymin2 = 0;
  mcu_macro[0][36].xmin3 = x_0;
  mcu_macro[1][36].xmin3 = x_0;
  mcu_macro[0][36].ymin3 = y_0;
  mcu_macro[1][36].ymin3 = y_0;
  mcu_macro[0][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][36].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][36].iter2 = imagelet_size;
  mcu_macro[1][36].iter2 = imagelet_size;
  mcu_macro[0][36].iter3 = 0;
  mcu_macro[1][36].iter3 = 0;
  mcu_macro[0][36].iter4 = 0;
  mcu_macro[1][36].iter4 = 0;
  mcu_macro[0][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][36].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 37: D8(4) -> 2
  mcu_macro[0][37].xmin1 = imagelet_4;
  mcu_macro[1][37].xmin1 = imagelet_4;
  mcu_macro[0][37].ymin1 = 0;
  mcu_macro[1][37].ymin1 = 0;
  mcu_macro[0][37].xmin2 = imagelet_2;
  mcu_macro[1][37].xmin2 = imagelet_2;
  mcu_macro[0][37].ymin2 = 0;
  mcu_macro[1][37].ymin2 = 0;
  mcu_macro[0][37].xmin3 = x_0;
  mcu_macro[1][37].xmin3 = x_0;
  mcu_macro[0][37].ymin3 = y_0;
  mcu_macro[1][37].ymin3 = y_0;
  mcu_macro[0][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][37].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][37].iter2 = imagelet_size;
  mcu_macro[1][37].iter2 = imagelet_size;
  mcu_macro[0][37].iter3 = 0;
  mcu_macro[1][37].iter3 = 0;
  mcu_macro[0][37].iter4 = 0;
  mcu_macro[1][37].iter4 = 0;
  mcu_macro[0][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][37].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 38: D8(2) -> 4
  mcu_macro[0][38].xmin1 = imagelet_2;
  mcu_macro[1][38].xmin1 = imagelet_2;
  mcu_macro[0][38].ymin1 = 0;
  mcu_macro[1][38].ymin1 = 0;
  mcu_macro[0][38].xmin2 = imagelet_4;
  mcu_macro[1][38].xmin2 = imagelet_4;
  mcu_macro[0][38].ymin2 = 0;
  mcu_macro[1][38].ymin2 = 0;
  mcu_macro[0][38].xmin3 = x_0;
  mcu_macro[1][38].xmin3 = x_0;
  mcu_macro[0][38].ymin3 = y_0;
  mcu_macro[1][38].ymin3 = y_0;
  mcu_macro[0][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][38].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][38].iter2 = imagelet_size;
  mcu_macro[1][38].iter2 = imagelet_size;
  mcu_macro[0][38].iter3 = 0;
  mcu_macro[1][38].iter3 = 0;
  mcu_macro[0][38].iter4 = 0;
  mcu_macro[1][38].iter4 = 0;
  mcu_macro[0][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][38].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 39: D8(4) -> 2
  mcu_macro[0][39].xmin1 = imagelet_4;
  mcu_macro[1][39].xmin1 = imagelet_4;
  mcu_macro[0][39].ymin1 = 0;
  mcu_macro[1][39].ymin1 = 0;
  mcu_macro[0][39].xmin2 = imagelet_2;
  mcu_macro[1][39].xmin2 = imagelet_2;
  mcu_macro[0][39].ymin2 = 0;
  mcu_macro[1][39].ymin2 = 0;
  mcu_macro[0][39].xmin3 = x_0;
  mcu_macro[1][39].xmin3 = x_0;
  mcu_macro[0][39].ymin3 = y_0;
  mcu_macro[1][39].ymin3 = y_0;
  mcu_macro[0][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][39].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][39].iter2 = imagelet_size;
  mcu_macro[1][39].iter2 = imagelet_size;
  mcu_macro[0][39].iter3 = 0;
  mcu_macro[1][39].iter3 = 0;
  mcu_macro[0][39].iter4 = 0;
  mcu_macro[1][39].iter4 = 0;
  mcu_macro[0][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][39].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 40: D8(2) -> 4
  mcu_macro[0][40].xmin1 = imagelet_2;
  mcu_macro[1][40].xmin1 = imagelet_2;
  mcu_macro[0][40].ymin1 = 0;
  mcu_macro[1][40].ymin1 = 0;
  mcu_macro[0][40].xmin2 = imagelet_4;
  mcu_macro[1][40].xmin2 = imagelet_4;
  mcu_macro[0][40].ymin2 = 0;
  mcu_macro[1][40].ymin2 = 0;
  mcu_macro[0][40].xmin3 = x_0;
  mcu_macro[1][40].xmin3 = x_0;
  mcu_macro[0][40].ymin3 = y_0;
  mcu_macro[1][40].ymin3 = y_0;
  mcu_macro[0][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][40].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][40].iter2 = imagelet_size;
  mcu_macro[1][40].iter2 = imagelet_size;
  mcu_macro[0][40].iter3 = 0;
  mcu_macro[1][40].iter3 = 0;
  mcu_macro[0][40].iter4 = 0;
  mcu_macro[1][40].iter4 = 0;
  mcu_macro[0][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][40].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 41: D8(4) -> 2
  mcu_macro[0][41].xmin1 = imagelet_4;
  mcu_macro[1][41].xmin1 = imagelet_4;
  mcu_macro[0][41].ymin1 = 0;
  mcu_macro[1][41].ymin1 = 0;
  mcu_macro[0][41].xmin2 = imagelet_2;
  mcu_macro[1][41].xmin2 = imagelet_2;
  mcu_macro[0][41].ymin2 = 0;
  mcu_macro[1][41].ymin2 = 0;
  mcu_macro[0][41].xmin3 = x_0;
  mcu_macro[1][41].xmin3 = x_0;
  mcu_macro[0][41].ymin3 = y_0;
  mcu_macro[1][41].ymin3 = y_0;
  mcu_macro[0][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][41].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][41].iter2 = imagelet_size;
  mcu_macro[1][41].iter2 = imagelet_size;
  mcu_macro[0][41].iter3 = 0;
  mcu_macro[1][41].iter3 = 0;
  mcu_macro[0][41].iter4 = 0;
  mcu_macro[1][41].iter4 = 0;
  mcu_macro[0][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][41].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 42: D8(2) -> 4
  mcu_macro[0][42].xmin1 = imagelet_2;
  mcu_macro[1][42].xmin1 = imagelet_2;
  mcu_macro[0][42].ymin1 = 0;
  mcu_macro[1][42].ymin1 = 0;
  mcu_macro[0][42].xmin2 = imagelet_4;
  mcu_macro[1][42].xmin2 = imagelet_4;
  mcu_macro[0][42].ymin2 = 0;
  mcu_macro[1][42].ymin2 = 0;
  mcu_macro[0][42].xmin3 = x_0;
  mcu_macro[1][42].xmin3 = x_0;
  mcu_macro[0][42].ymin3 = y_0;
  mcu_macro[1][42].ymin3 = y_0;
  mcu_macro[0][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][42].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][42].iter2 = imagelet_size;
  mcu_macro[1][42].iter2 = imagelet_size;
  mcu_macro[0][42].iter3 = 0;
  mcu_macro[1][42].iter3 = 0;
  mcu_macro[0][42].iter4 = 0;
  mcu_macro[1][42].iter4 = 0;
  mcu_macro[0][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][42].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 43: D8(4) -> 2
  mcu_macro[0][43].xmin1 = imagelet_4;
  mcu_macro[1][43].xmin1 = imagelet_4;
  mcu_macro[0][43].ymin1 = 0;
  mcu_macro[1][43].ymin1 = 0;
  mcu_macro[0][43].xmin2 = imagelet_2;
  mcu_macro[1][43].xmin2 = imagelet_2;
  mcu_macro[0][43].ymin2 = 0;
  mcu_macro[1][43].ymin2 = 0;
  mcu_macro[0][43].xmin3 = x_0;
  mcu_macro[1][43].xmin3 = x_0;
  mcu_macro[0][43].ymin3 = y_0;
  mcu_macro[1][43].ymin3 = y_0;
  mcu_macro[0][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][43].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][43].iter2 = imagelet_size;
  mcu_macro[1][43].iter2 = imagelet_size;
  mcu_macro[0][43].iter3 = 0;
  mcu_macro[1][43].iter3 = 0;
  mcu_macro[0][43].iter4 = 0;
  mcu_macro[1][43].iter4 = 0;
  mcu_macro[0][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][43].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 44: D8(2) -> 4
  mcu_macro[0][44].xmin1 = imagelet_2;
  mcu_macro[1][44].xmin1 = imagelet_2;
  mcu_macro[0][44].ymin1 = 0;
  mcu_macro[1][44].ymin1 = 0;
  mcu_macro[0][44].xmin2 = imagelet_4;
  mcu_macro[1][44].xmin2 = imagelet_4;
  mcu_macro[0][44].ymin2 = 0;
  mcu_macro[1][44].ymin2 = 0;
  mcu_macro[0][44].xmin3 = x_0;
  mcu_macro[1][44].xmin3 = x_0;
  mcu_macro[0][44].ymin3 = y_0;
  mcu_macro[1][44].ymin3 = y_0;
  mcu_macro[0][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][44].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][44].iter2 = imagelet_size;
  mcu_macro[1][44].iter2 = imagelet_size;
  mcu_macro[0][44].iter3 = 0;
  mcu_macro[1][44].iter3 = 0;
  mcu_macro[0][44].iter4 = 0;
  mcu_macro[1][44].iter4 = 0;
  mcu_macro[0][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][44].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 45: D8(4) -> 2
  mcu_macro[0][45].xmin1 = imagelet_4;
  mcu_macro[1][45].xmin1 = imagelet_4;
  mcu_macro[0][45].ymin1 = 0;
  mcu_macro[1][45].ymin1 = 0;
  mcu_macro[0][45].xmin2 = imagelet_2;
  mcu_macro[1][45].xmin2 = imagelet_2;
  mcu_macro[0][45].ymin2 = 0;
  mcu_macro[1][45].ymin2 = 0;
  mcu_macro[0][45].xmin3 = x_0;
  mcu_macro[1][45].xmin3 = x_0;
  mcu_macro[0][45].ymin3 = y_0;
  mcu_macro[1][45].ymin3 = y_0;
  mcu_macro[0][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][45].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][45].iter2 = imagelet_size;
  mcu_macro[1][45].iter2 = imagelet_size;
  mcu_macro[0][45].iter3 = 0;
  mcu_macro[1][45].iter3 = 0;
  mcu_macro[0][45].iter4 = 0;
  mcu_macro[1][45].iter4 = 0;
  mcu_macro[0][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][45].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 46: thr(3) -> 4
  mcu_macro[0][46].xmin1 = imagelet_3;
  mcu_macro[1][46].xmin1 = imagelet_3;
  mcu_macro[0][46].ymin1 = 0;
  mcu_macro[1][46].ymin1 = 0;
  mcu_macro[0][46].xmin2 = imagelet_4;
  mcu_macro[1][46].xmin2 = imagelet_4;
  mcu_macro[0][46].ymin2 = 0;
  mcu_macro[1][46].ymin2 = 0;
  // copy of operation 46 parameters
  p_46[0] = pi3;
  p_46[1] = pi4;
  p_46[2] = pi5;
  gram.xoffset = x_46;
  gram.yoffset = y_46;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_46;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][46].xmin3 = x_46;
  mcu_macro[1][46].xmin3 = x_46;
  mcu_macro[0][46].ymin3 = y_46;
  mcu_macro[1][46].ymin3 = y_46;
  mcu_macro[0][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][46].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][46].iter2 = imagelet_size;
  mcu_macro[1][46].iter2 = imagelet_size;
  mcu_macro[0][46].iter3 = 0;
  mcu_macro[1][46].iter3 = 0;
  mcu_macro[0][46].iter4 = 0;
  mcu_macro[1][46].iter4 = 0;
  mcu_macro[0][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][46].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 47: thr(2) -> 3
  mcu_macro[0][47].xmin1 = imagelet_2;
  mcu_macro[1][47].xmin1 = imagelet_2;
  mcu_macro[0][47].ymin1 = 0;
  mcu_macro[1][47].ymin1 = 0;
  mcu_macro[0][47].xmin2 = imagelet_3;
  mcu_macro[1][47].xmin2 = imagelet_3;
  mcu_macro[0][47].ymin2 = 0;
  mcu_macro[1][47].ymin2 = 0;
  // copy of operation 47 parameters
  p_47[0] = pi6;
  p_47[1] = pi7;
  p_47[2] = pi8;
  gram.xoffset = x_47;
  gram.yoffset = y_47;
  gram.width = 3;
  gram.height = 1;
  gram.params = p_47;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][47].xmin3 = x_47;
  mcu_macro[1][47].xmin3 = x_47;
  mcu_macro[0][47].ymin3 = y_47;
  mcu_macro[1][47].ymin3 = y_47;
  mcu_macro[0][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][47].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][47].iter2 = imagelet_size;
  mcu_macro[1][47].iter2 = imagelet_size;
  mcu_macro[0][47].iter3 = 0;
  mcu_macro[1][47].iter3 = 0;
  mcu_macro[0][47].iter4 = 0;
  mcu_macro[1][47].iter4 = 0;
  mcu_macro[0][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  mcu_macro[1][47].addrStart = TERAPIX_UCODE_THRESHOLD;
  // 48: &(3,4) -> 4
  mcu_macro[0][48].xmin1 = imagelet_3;
  mcu_macro[1][48].xmin1 = imagelet_3;
  mcu_macro[0][48].ymin1 = 0;
  mcu_macro[1][48].ymin1 = 0;
  mcu_macro[0][48].xmin2 = imagelet_4;
  mcu_macro[1][48].xmin2 = imagelet_4;
  mcu_macro[0][48].ymin2 = 0;
  mcu_macro[1][48].ymin2 = 0;
  mcu_macro[0][48].xmin3 = imagelet_4;
  mcu_macro[1][48].xmin3 = imagelet_4;
  mcu_macro[0][48].ymin3 = 0;
  mcu_macro[1][48].ymin3 = 0;
  mcu_macro[0][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][48].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][48].iter2 = imagelet_size;
  mcu_macro[1][48].iter2 = imagelet_size;
  mcu_macro[0][48].iter3 = 0;
  mcu_macro[1][48].iter3 = 0;
  mcu_macro[0][48].iter4 = 0;
  mcu_macro[1][48].iter4 = 0;
  mcu_macro[0][48].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][48].addrStart = TERAPIX_UCODE_AND3;
  // 49: E8(4) -> 3
  mcu_macro[0][49].xmin1 = imagelet_4;
  mcu_macro[1][49].xmin1 = imagelet_4;
  mcu_macro[0][49].ymin1 = 0;
  mcu_macro[1][49].ymin1 = 0;
  mcu_macro[0][49].xmin2 = imagelet_3;
  mcu_macro[1][49].xmin2 = imagelet_3;
  mcu_macro[0][49].ymin2 = 0;
  mcu_macro[1][49].ymin2 = 0;
  // copy of operation 49 parameters
  for(i=0; i<9; i++)
    p_49[i] = pi9[i];
  gram.xoffset = x_49;
  gram.yoffset = y_49;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_49;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][49].xmin3 = x_49;
  mcu_macro[1][49].xmin3 = x_49;
  mcu_macro[0][49].ymin3 = y_49;
  mcu_macro[1][49].ymin3 = y_49;
  mcu_macro[0][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][49].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][49].iter2 = imagelet_size;
  mcu_macro[1][49].iter2 = imagelet_size;
  mcu_macro[0][49].iter3 = 0;
  mcu_macro[1][49].iter3 = 0;
  mcu_macro[0][49].iter4 = 0;
  mcu_macro[1][49].iter4 = 0;
  mcu_macro[0][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][49].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 50: E8(3) -> 4
  mcu_macro[0][50].xmin1 = imagelet_3;
  mcu_macro[1][50].xmin1 = imagelet_3;
  mcu_macro[0][50].ymin1 = 0;
  mcu_macro[1][50].ymin1 = 0;
  mcu_macro[0][50].xmin2 = imagelet_4;
  mcu_macro[1][50].xmin2 = imagelet_4;
  mcu_macro[0][50].ymin2 = 0;
  mcu_macro[1][50].ymin2 = 0;
  mcu_macro[0][50].xmin3 = x_49;
  mcu_macro[1][50].xmin3 = x_49;
  mcu_macro[0][50].ymin3 = y_49;
  mcu_macro[1][50].ymin3 = y_49;
  mcu_macro[0][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][50].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][50].iter2 = imagelet_size;
  mcu_macro[1][50].iter2 = imagelet_size;
  mcu_macro[0][50].iter3 = 0;
  mcu_macro[1][50].iter3 = 0;
  mcu_macro[0][50].iter4 = 0;
  mcu_macro[1][50].iter4 = 0;
  mcu_macro[0][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][50].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 51: E8(4) -> 3
  mcu_macro[0][51].xmin1 = imagelet_4;
  mcu_macro[1][51].xmin1 = imagelet_4;
  mcu_macro[0][51].ymin1 = 0;
  mcu_macro[1][51].ymin1 = 0;
  mcu_macro[0][51].xmin2 = imagelet_3;
  mcu_macro[1][51].xmin2 = imagelet_3;
  mcu_macro[0][51].ymin2 = 0;
  mcu_macro[1][51].ymin2 = 0;
  mcu_macro[0][51].xmin3 = x_49;
  mcu_macro[1][51].xmin3 = x_49;
  mcu_macro[0][51].ymin3 = y_49;
  mcu_macro[1][51].ymin3 = y_49;
  mcu_macro[0][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][51].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][51].iter2 = imagelet_size;
  mcu_macro[1][51].iter2 = imagelet_size;
  mcu_macro[0][51].iter3 = 0;
  mcu_macro[1][51].iter3 = 0;
  mcu_macro[0][51].iter4 = 0;
  mcu_macro[1][51].iter4 = 0;
  mcu_macro[0][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][51].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 52: E8(3) -> 4
  mcu_macro[0][52].xmin1 = imagelet_3;
  mcu_macro[1][52].xmin1 = imagelet_3;
  mcu_macro[0][52].ymin1 = 0;
  mcu_macro[1][52].ymin1 = 0;
  mcu_macro[0][52].xmin2 = imagelet_4;
  mcu_macro[1][52].xmin2 = imagelet_4;
  mcu_macro[0][52].ymin2 = 0;
  mcu_macro[1][52].ymin2 = 0;
  mcu_macro[0][52].xmin3 = x_49;
  mcu_macro[1][52].xmin3 = x_49;
  mcu_macro[0][52].ymin3 = y_49;
  mcu_macro[1][52].ymin3 = y_49;
  mcu_macro[0][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][52].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][52].iter2 = imagelet_size;
  mcu_macro[1][52].iter2 = imagelet_size;
  mcu_macro[0][52].iter3 = 0;
  mcu_macro[1][52].iter3 = 0;
  mcu_macro[0][52].iter4 = 0;
  mcu_macro[1][52].iter4 = 0;
  mcu_macro[0][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][52].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 53: D8(4) -> 3
  mcu_macro[0][53].xmin1 = imagelet_4;
  mcu_macro[1][53].xmin1 = imagelet_4;
  mcu_macro[0][53].ymin1 = 0;
  mcu_macro[1][53].ymin1 = 0;
  mcu_macro[0][53].xmin2 = imagelet_3;
  mcu_macro[1][53].xmin2 = imagelet_3;
  mcu_macro[0][53].ymin2 = 0;
  mcu_macro[1][53].ymin2 = 0;
  mcu_macro[0][53].xmin3 = x_49;
  mcu_macro[1][53].xmin3 = x_49;
  mcu_macro[0][53].ymin3 = y_49;
  mcu_macro[1][53].ymin3 = y_49;
  mcu_macro[0][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][53].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][53].iter2 = imagelet_size;
  mcu_macro[1][53].iter2 = imagelet_size;
  mcu_macro[0][53].iter3 = 0;
  mcu_macro[1][53].iter3 = 0;
  mcu_macro[0][53].iter4 = 0;
  mcu_macro[1][53].iter4 = 0;
  mcu_macro[0][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][53].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 54: D8(3) -> 4
  mcu_macro[0][54].xmin1 = imagelet_3;
  mcu_macro[1][54].xmin1 = imagelet_3;
  mcu_macro[0][54].ymin1 = 0;
  mcu_macro[1][54].ymin1 = 0;
  mcu_macro[0][54].xmin2 = imagelet_4;
  mcu_macro[1][54].xmin2 = imagelet_4;
  mcu_macro[0][54].ymin2 = 0;
  mcu_macro[1][54].ymin2 = 0;
  mcu_macro[0][54].xmin3 = x_49;
  mcu_macro[1][54].xmin3 = x_49;
  mcu_macro[0][54].ymin3 = y_49;
  mcu_macro[1][54].ymin3 = y_49;
  mcu_macro[0][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][54].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][54].iter2 = imagelet_size;
  mcu_macro[1][54].iter2 = imagelet_size;
  mcu_macro[0][54].iter3 = 0;
  mcu_macro[1][54].iter3 = 0;
  mcu_macro[0][54].iter4 = 0;
  mcu_macro[1][54].iter4 = 0;
  mcu_macro[0][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][54].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 55: D8(4) -> 3
  mcu_macro[0][55].xmin1 = imagelet_4;
  mcu_macro[1][55].xmin1 = imagelet_4;
  mcu_macro[0][55].ymin1 = 0;
  mcu_macro[1][55].ymin1 = 0;
  mcu_macro[0][55].xmin2 = imagelet_3;
  mcu_macro[1][55].xmin2 = imagelet_3;
  mcu_macro[0][55].ymin2 = 0;
  mcu_macro[1][55].ymin2 = 0;
  mcu_macro[0][55].xmin3 = x_49;
  mcu_macro[1][55].xmin3 = x_49;
  mcu_macro[0][55].ymin3 = y_49;
  mcu_macro[1][55].ymin3 = y_49;
  mcu_macro[0][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][55].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][55].iter2 = imagelet_size;
  mcu_macro[1][55].iter2 = imagelet_size;
  mcu_macro[0][55].iter3 = 0;
  mcu_macro[1][55].iter3 = 0;
  mcu_macro[0][55].iter4 = 0;
  mcu_macro[1][55].iter4 = 0;
  mcu_macro[0][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][55].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 56: D8(3) -> 4
  mcu_macro[0][56].xmin1 = imagelet_3;
  mcu_macro[1][56].xmin1 = imagelet_3;
  mcu_macro[0][56].ymin1 = 0;
  mcu_macro[1][56].ymin1 = 0;
  mcu_macro[0][56].xmin2 = imagelet_4;
  mcu_macro[1][56].xmin2 = imagelet_4;
  mcu_macro[0][56].ymin2 = 0;
  mcu_macro[1][56].ymin2 = 0;
  mcu_macro[0][56].xmin3 = x_49;
  mcu_macro[1][56].xmin3 = x_49;
  mcu_macro[0][56].ymin3 = y_49;
  mcu_macro[1][56].ymin3 = y_49;
  mcu_macro[0][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][56].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][56].iter2 = imagelet_size;
  mcu_macro[1][56].iter2 = imagelet_size;
  mcu_macro[0][56].iter3 = 0;
  mcu_macro[1][56].iter3 = 0;
  mcu_macro[0][56].iter4 = 0;
  mcu_macro[1][56].iter4 = 0;
  mcu_macro[0][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][56].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 57: E8(4) -> 3
  mcu_macro[0][57].xmin1 = imagelet_4;
  mcu_macro[1][57].xmin1 = imagelet_4;
  mcu_macro[0][57].ymin1 = 0;
  mcu_macro[1][57].ymin1 = 0;
  mcu_macro[0][57].xmin2 = imagelet_3;
  mcu_macro[1][57].xmin2 = imagelet_3;
  mcu_macro[0][57].ymin2 = 0;
  mcu_macro[1][57].ymin2 = 0;
  mcu_macro[0][57].xmin3 = x_0;
  mcu_macro[1][57].xmin3 = x_0;
  mcu_macro[0][57].ymin3 = y_0;
  mcu_macro[1][57].ymin3 = y_0;
  mcu_macro[0][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][57].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][57].iter2 = imagelet_size;
  mcu_macro[1][57].iter2 = imagelet_size;
  mcu_macro[0][57].iter3 = 0;
  mcu_macro[1][57].iter3 = 0;
  mcu_macro[0][57].iter4 = 0;
  mcu_macro[1][57].iter4 = 0;
  mcu_macro[0][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][57].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 58: E8(3) -> 4
  mcu_macro[0][58].xmin1 = imagelet_3;
  mcu_macro[1][58].xmin1 = imagelet_3;
  mcu_macro[0][58].ymin1 = 0;
  mcu_macro[1][58].ymin1 = 0;
  mcu_macro[0][58].xmin2 = imagelet_4;
  mcu_macro[1][58].xmin2 = imagelet_4;
  mcu_macro[0][58].ymin2 = 0;
  mcu_macro[1][58].ymin2 = 0;
  mcu_macro[0][58].xmin3 = x_0;
  mcu_macro[1][58].xmin3 = x_0;
  mcu_macro[0][58].ymin3 = y_0;
  mcu_macro[1][58].ymin3 = y_0;
  mcu_macro[0][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][58].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][58].iter2 = imagelet_size;
  mcu_macro[1][58].iter2 = imagelet_size;
  mcu_macro[0][58].iter3 = 0;
  mcu_macro[1][58].iter3 = 0;
  mcu_macro[0][58].iter4 = 0;
  mcu_macro[1][58].iter4 = 0;
  mcu_macro[0][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][58].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 59: E8(4) -> 3
  mcu_macro[0][59].xmin1 = imagelet_4;
  mcu_macro[1][59].xmin1 = imagelet_4;
  mcu_macro[0][59].ymin1 = 0;
  mcu_macro[1][59].ymin1 = 0;
  mcu_macro[0][59].xmin2 = imagelet_3;
  mcu_macro[1][59].xmin2 = imagelet_3;
  mcu_macro[0][59].ymin2 = 0;
  mcu_macro[1][59].ymin2 = 0;
  mcu_macro[0][59].xmin3 = x_0;
  mcu_macro[1][59].xmin3 = x_0;
  mcu_macro[0][59].ymin3 = y_0;
  mcu_macro[1][59].ymin3 = y_0;
  mcu_macro[0][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][59].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][59].iter2 = imagelet_size;
  mcu_macro[1][59].iter2 = imagelet_size;
  mcu_macro[0][59].iter3 = 0;
  mcu_macro[1][59].iter3 = 0;
  mcu_macro[0][59].iter4 = 0;
  mcu_macro[1][59].iter4 = 0;
  mcu_macro[0][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][59].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 60: E8(3) -> 4
  mcu_macro[0][60].xmin1 = imagelet_3;
  mcu_macro[1][60].xmin1 = imagelet_3;
  mcu_macro[0][60].ymin1 = 0;
  mcu_macro[1][60].ymin1 = 0;
  mcu_macro[0][60].xmin2 = imagelet_4;
  mcu_macro[1][60].xmin2 = imagelet_4;
  mcu_macro[0][60].ymin2 = 0;
  mcu_macro[1][60].ymin2 = 0;
  mcu_macro[0][60].xmin3 = x_0;
  mcu_macro[1][60].xmin3 = x_0;
  mcu_macro[0][60].ymin3 = y_0;
  mcu_macro[1][60].ymin3 = y_0;
  mcu_macro[0][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][60].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][60].iter2 = imagelet_size;
  mcu_macro[1][60].iter2 = imagelet_size;
  mcu_macro[0][60].iter3 = 0;
  mcu_macro[1][60].iter3 = 0;
  mcu_macro[0][60].iter4 = 0;
  mcu_macro[1][60].iter4 = 0;
  mcu_macro[0][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  mcu_macro[1][60].addrStart = TERAPIX_UCODE_ERODE_3_3;
  // 61: D8(4) -> 3
  mcu_macro[0][61].xmin1 = imagelet_4;
  mcu_macro[1][61].xmin1 = imagelet_4;
  mcu_macro[0][61].ymin1 = 0;
  mcu_macro[1][61].ymin1 = 0;
  mcu_macro[0][61].xmin2 = imagelet_3;
  mcu_macro[1][61].xmin2 = imagelet_3;
  mcu_macro[0][61].ymin2 = 0;
  mcu_macro[1][61].ymin2 = 0;
  mcu_macro[0][61].xmin3 = x_0;
  mcu_macro[1][61].xmin3 = x_0;
  mcu_macro[0][61].ymin3 = y_0;
  mcu_macro[1][61].ymin3 = y_0;
  mcu_macro[0][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][61].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][61].iter2 = imagelet_size;
  mcu_macro[1][61].iter2 = imagelet_size;
  mcu_macro[0][61].iter3 = 0;
  mcu_macro[1][61].iter3 = 0;
  mcu_macro[0][61].iter4 = 0;
  mcu_macro[1][61].iter4 = 0;
  mcu_macro[0][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][61].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 62: D8(3) -> 4
  mcu_macro[0][62].xmin1 = imagelet_3;
  mcu_macro[1][62].xmin1 = imagelet_3;
  mcu_macro[0][62].ymin1 = 0;
  mcu_macro[1][62].ymin1 = 0;
  mcu_macro[0][62].xmin2 = imagelet_4;
  mcu_macro[1][62].xmin2 = imagelet_4;
  mcu_macro[0][62].ymin2 = 0;
  mcu_macro[1][62].ymin2 = 0;
  mcu_macro[0][62].xmin3 = x_0;
  mcu_macro[1][62].xmin3 = x_0;
  mcu_macro[0][62].ymin3 = y_0;
  mcu_macro[1][62].ymin3 = y_0;
  mcu_macro[0][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][62].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][62].iter2 = imagelet_size;
  mcu_macro[1][62].iter2 = imagelet_size;
  mcu_macro[0][62].iter3 = 0;
  mcu_macro[1][62].iter3 = 0;
  mcu_macro[0][62].iter4 = 0;
  mcu_macro[1][62].iter4 = 0;
  mcu_macro[0][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][62].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 63: D8(4) -> 3
  mcu_macro[0][63].xmin1 = imagelet_4;
  mcu_macro[1][63].xmin1 = imagelet_4;
  mcu_macro[0][63].ymin1 = 0;
  mcu_macro[1][63].ymin1 = 0;
  mcu_macro[0][63].xmin2 = imagelet_3;
  mcu_macro[1][63].xmin2 = imagelet_3;
  mcu_macro[0][63].ymin2 = 0;
  mcu_macro[1][63].ymin2 = 0;
  mcu_macro[0][63].xmin3 = x_0;
  mcu_macro[1][63].xmin3 = x_0;
  mcu_macro[0][63].ymin3 = y_0;
  mcu_macro[1][63].ymin3 = y_0;
  mcu_macro[0][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][63].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][63].iter2 = imagelet_size;
  mcu_macro[1][63].iter2 = imagelet_size;
  mcu_macro[0][63].iter3 = 0;
  mcu_macro[1][63].iter3 = 0;
  mcu_macro[0][63].iter4 = 0;
  mcu_macro[1][63].iter4 = 0;
  mcu_macro[0][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][63].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 64: D8(3) -> 4
  mcu_macro[0][64].xmin1 = imagelet_3;
  mcu_macro[1][64].xmin1 = imagelet_3;
  mcu_macro[0][64].ymin1 = 0;
  mcu_macro[1][64].ymin1 = 0;
  mcu_macro[0][64].xmin2 = imagelet_4;
  mcu_macro[1][64].xmin2 = imagelet_4;
  mcu_macro[0][64].ymin2 = 0;
  mcu_macro[1][64].ymin2 = 0;
  mcu_macro[0][64].xmin3 = x_0;
  mcu_macro[1][64].xmin3 = x_0;
  mcu_macro[0][64].ymin3 = y_0;
  mcu_macro[1][64].ymin3 = y_0;
  mcu_macro[0][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][64].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][64].iter2 = imagelet_size;
  mcu_macro[1][64].iter2 = imagelet_size;
  mcu_macro[0][64].iter3 = 0;
  mcu_macro[1][64].iter3 = 0;
  mcu_macro[0][64].iter4 = 0;
  mcu_macro[1][64].iter4 = 0;
  mcu_macro[0][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][64].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 65: D8(4) -> 3
  mcu_macro[0][65].xmin1 = imagelet_4;
  mcu_macro[1][65].xmin1 = imagelet_4;
  mcu_macro[0][65].ymin1 = 0;
  mcu_macro[1][65].ymin1 = 0;
  mcu_macro[0][65].xmin2 = imagelet_3;
  mcu_macro[1][65].xmin2 = imagelet_3;
  mcu_macro[0][65].ymin2 = 0;
  mcu_macro[1][65].ymin2 = 0;
  // copy of operation 65 parameters
  for(i=0; i<9; i++)
    p_65[i] = pi10[i];
  gram.xoffset = x_65;
  gram.yoffset = y_65;
  gram.width = 3;
  gram.height = 3;
  gram.params = p_65;
  freia_mg_write_dynamic_param(&dyn_param);
  mcu_macro[0][65].xmin3 = x_65;
  mcu_macro[1][65].xmin3 = x_65;
  mcu_macro[0][65].ymin3 = y_65;
  mcu_macro[1][65].ymin3 = y_65;
  mcu_macro[0][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][65].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][65].iter2 = imagelet_size;
  mcu_macro[1][65].iter2 = imagelet_size;
  mcu_macro[0][65].iter3 = 0;
  mcu_macro[1][65].iter3 = 0;
  mcu_macro[0][65].iter4 = 0;
  mcu_macro[1][65].iter4 = 0;
  mcu_macro[0][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][65].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 66: D8(3) -> 4
  mcu_macro[0][66].xmin1 = imagelet_3;
  mcu_macro[1][66].xmin1 = imagelet_3;
  mcu_macro[0][66].ymin1 = 0;
  mcu_macro[1][66].ymin1 = 0;
  mcu_macro[0][66].xmin2 = imagelet_4;
  mcu_macro[1][66].xmin2 = imagelet_4;
  mcu_macro[0][66].ymin2 = 0;
  mcu_macro[1][66].ymin2 = 0;
  mcu_macro[0][66].xmin3 = x_65;
  mcu_macro[1][66].xmin3 = x_65;
  mcu_macro[0][66].ymin3 = y_65;
  mcu_macro[1][66].ymin3 = y_65;
  mcu_macro[0][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][66].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][66].iter2 = imagelet_size;
  mcu_macro[1][66].iter2 = imagelet_size;
  mcu_macro[0][66].iter3 = 0;
  mcu_macro[1][66].iter3 = 0;
  mcu_macro[0][66].iter4 = 0;
  mcu_macro[1][66].iter4 = 0;
  mcu_macro[0][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][66].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 67: D8(4) -> 3
  mcu_macro[0][67].xmin1 = imagelet_4;
  mcu_macro[1][67].xmin1 = imagelet_4;
  mcu_macro[0][67].ymin1 = 0;
  mcu_macro[1][67].ymin1 = 0;
  mcu_macro[0][67].xmin2 = imagelet_3;
  mcu_macro[1][67].xmin2 = imagelet_3;
  mcu_macro[0][67].ymin2 = 0;
  mcu_macro[1][67].ymin2 = 0;
  mcu_macro[0][67].xmin3 = x_65;
  mcu_macro[1][67].xmin3 = x_65;
  mcu_macro[0][67].ymin3 = y_65;
  mcu_macro[1][67].ymin3 = y_65;
  mcu_macro[0][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][67].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][67].iter2 = imagelet_size;
  mcu_macro[1][67].iter2 = imagelet_size;
  mcu_macro[0][67].iter3 = 0;
  mcu_macro[1][67].iter3 = 0;
  mcu_macro[0][67].iter4 = 0;
  mcu_macro[1][67].iter4 = 0;
  mcu_macro[0][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  mcu_macro[1][67].addrStart = TERAPIX_UCODE_DILATE_3_3;
  // 68: &(3,1) -> 1
  mcu_macro[0][68].xmin1 = imagelet_3;
  mcu_macro[1][68].xmin1 = imagelet_3;
  mcu_macro[0][68].ymin1 = 0;
  mcu_macro[1][68].ymin1 = 0;
  mcu_macro[0][68].xmin2 = imagelet_io_1_0;
  mcu_macro[1][68].xmin2 = imagelet_io_1_1;
  mcu_macro[0][68].ymin2 = 0;
  mcu_macro[1][68].ymin2 = 0;
  mcu_macro[0][68].xmin3 = imagelet_io_1_0;
  mcu_macro[1][68].xmin3 = imagelet_io_1_1;
  mcu_macro[0][68].ymin3 = 0;
  mcu_macro[1][68].ymin3 = 0;
  mcu_macro[0][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[1][68].iter1 = TERAPIX_PE_NUMBER;
  mcu_macro[0][68].iter2 = imagelet_size;
  mcu_macro[1][68].iter2 = imagelet_size;
  mcu_macro[0][68].iter3 = 0;
  mcu_macro[1][68].iter3 = 0;
  mcu_macro[0][68].iter4 = 0;
  mcu_macro[1][68].iter4 = 0;
  mcu_macro[0][68].addrStart = TERAPIX_UCODE_AND3;
  mcu_macro[1][68].addrStart = TERAPIX_UCODE_AND3;


  // inputs:
  // - imagelet 1 is i0 for in
  tile_in[0][0].x = imagelet_io_1_0;
  tile_in[0][0].y = 0;
  tile_in[1][0].x = imagelet_io_1_1;
  tile_in[1][0].y = 0;

  // outputs:
  // - imagelet 1 is o0 for out
  tile_out[0][0].x = imagelet_io_1_0;
  tile_out[0][0].y = 0;
  tile_out[1][0].x = imagelet_io_1_1;
  tile_out[1][0].y = 0;

  // imagelet erosion for the computation
  mcu_instr.borderTop    = 11;
  mcu_instr.borderBottom = 11;
  mcu_instr.borderLeft   = 41;
  mcu_instr.borderRight  = 41;
  mcu_instr.imagelet_height = imagelet_size;
  mcu_instr.imagelet_width  = TERAPIX_PE_NUMBER;

  // outputs
  mcu_instr.nbout = 1;
  mcu_instr.out0 = tile_out[0];
  mcu_instr.out1 = tile_out[1];

  // inputs
  mcu_instr.nbin = 1;
  mcu_instr.in0 = tile_in[0];
  mcu_instr.in1 = tile_in[1];

  // actual instructions
  mcu_instr.nbinstr = 69;
  mcu_instr.instr0   = mcu_macro[0];
  mcu_instr.instr1   = mcu_macro[1];

  // call terapix runtime
  param.size = -1; // not used
  param.raw = (void*) &mcu_instr;
  ret |= freia_cg_template_process(&param, o0, i0);

  // extract measures

  return ret;
}


! updated function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_terapix_helper_0_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);                /*0053*/
   
   
   ret_1 = 0;                                                           /*0089*/
   
   
   
   
   ret_2 = 0;                                                           /*0117*/
   
   
   ret_3 = 0;                                                           /*0131*/
   
   
   
   
   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! cleaned up function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_terapix_helper_0_0_0(out, in, kernel1x3, 150, 255, 1, 1, 50, 1, kernel3x1, freia_morpho_kernel_8c);                /*0053*/
   
   
   ret_1 = 0;                                                           /*0089*/
   
   
   
   
   ret_2 = 0;                                                           /*0117*/
   
   
   ret_3 = 0;                                                           /*0131*/
   
   
   
   
   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# OPENCL
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_opencl_helper_0_0" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_0_0": #i=1 #o=1 #c=69 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_opencl_helper_0_0_0" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_0_0_0": #i=1 #o=2 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_0_0_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "imopen_29" [shape=circle];
  "imclose_15" [shape=circle];

  // computation vertices
  "89 D8" [shape=box];
  "89 D8" -> "imclose_15";
  "53 E8" [shape=box];
  "53 E8" -> "imopen_29";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "license_plate_opencl_helper_0_0_2" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_0_0_2": #i=2 #o=1 #c=5 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_0_0_2" {
  // inputs
  "imclose_1" [shape=circle];
  "imopen_1" [shape=circle];

  // outputs
  "imand" [shape=circle];

  // computation vertices
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "imand";
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "imopen_1" -> "84 D8";
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "imclose_1" -> "106 E8";
}
// graph for dag "license_plate_opencl_helper_0_0_4" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_0_0_4": #i=2 #o=1 #c=2 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_0_0_4" {
  // inputs
  "in" [shape=circle];
  "out_2" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "in" -> "152 &";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "out_2" -> "147 D8";
}
// graph for dag "license_plate_opencl_helper_D8_146" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_D8_146": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_D8_146" {
  // inputs
  "imfilt_1" [shape=circle];

  // outputs
  "imfilt" [shape=circle];

  // computation vertices
  "126 D8" [shape=box];
  "126 D8" -> "imfilt";
  "imfilt_1" -> "126 D8";
}
// graph for dag "license_plate_opencl_helper_D8_511" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_D8_511": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_D8_511" {
  // inputs
  "out_3" [shape=circle];

  // outputs
  "out_2" [shape=circle];

  // computation vertices
  "146 D8" [shape=box];
  "146 D8" -> "out_2";
  "out_3" -> "146 D8";
}
// graph for dag "license_plate_opencl_helper_D8_56" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_D8_56": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_D8_56" {
  // inputs
  "imopen_2" [shape=circle];

  // outputs
  "imopen_1" [shape=circle];

  // computation vertices
  "83 D8" [shape=box];
  "83 D8" -> "imopen_1";
  "imopen_2" -> "83 D8";
}
// graph for dag "license_plate_opencl_helper_E8_146" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_E8_146": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_E8_146" {
  // inputs
  "imfilt_5" [shape=circle];

  // outputs
  "imfilt_4" [shape=circle];

  // computation vertices
  "120 E8" [shape=box];
  "120 E8" -> "imfilt_4";
  "imfilt_5" -> "120 E8";
}
// graph for dag "license_plate_opencl_helper_E8_56" of module "license_plate" in dot format
// DAG "license_plate_opencl_helper_E8_56": #i=1 #o=1 #c=1 #s=0 #I=0 #B=0 #A=0
digraph "license_plate_opencl_helper_E8_56" {
  // inputs
  "imopen_16" [shape=circle];

  // outputs
  "imopen_15" [shape=circle];

  // computation vertices
  "67 E8" [shape=box];
  "67 E8" -> "imopen_15";
  "imopen_16" -> "67 E8";
}

! acceleration function

// FREIA OpenCL includes
#include <CL/opencl.h>
#include "freia.h"
#include "private/freia_opencl_runtime.h"


// dag 0: 69 ops and 0 copies, optimized to 69 ops and 0+0+0 copies

// hold kernels for license_plate_opencl_helper_0_0_0
static cl_kernel license_plate_opencl_helper_0_0_0_kernel[2];

// compile kernels for license_plate_opencl_helper_0_0_0
static freia_status license_plate_opencl_helper_0_0_0_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_0_0_0
  const char * license_plate_opencl_helper_0_0_0_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_0_0_0\n"
    "KERNEL void license_plate_opencl_helper_0_0_0(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * o1,\n"
    "  int ofs_o1,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t53 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t89 = PIXEL_MIN;\n"
    "\n"
    "    // pixel computations\n"
    "    t53 = PIXEL_INF(t53, (is_W)? PIXEL_MAX: in0W);\n"
    "    t53 = PIXEL_INF(t53, in0);\n"
    "    t53 = PIXEL_INF(t53, (is_E)? PIXEL_MAX: in0E);\n"
    "    t89 = PIXEL_SUP(t89, (is_W)? PIXEL_MIN: in0W);\n"
    "    t89 = PIXEL_SUP(t89, in0);\n"
    "    t89 = PIXEL_SUP(t89, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t53;\n"
    "    p1[i] = t89;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_0_source, "license_plate_opencl_helper_0_0_0", "-DPIXEL8", &license_plate_opencl_helper_0_0_0_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_0_source, "license_plate_opencl_helper_0_0_0", "-DPIXEL16", &license_plate_opencl_helper_0_0_0_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_0_0_0
freia_status license_plate_opencl_helper_0_0_0(
  freia_data2d * o0,
  freia_data2d * o1,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_0_0_0_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_0_0_0_kernel[bpp];

  // call kernel license_plate_opencl_helper_0_0_0
  err |= freia_op_call_kernel(kernel, 2, 1, 0, 0, o0, o1, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_D8_56
static cl_kernel license_plate_opencl_helper_D8_56_kernel[2];

// compile kernels for license_plate_opencl_helper_D8_56
static freia_status license_plate_opencl_helper_D8_56_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_D8_56
  const char * license_plate_opencl_helper_D8_56_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_D8_56\n"
    "KERNEL void license_plate_opencl_helper_D8_56(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t83 = PIXEL_MIN;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t83 = PIXEL_SUP(t83, (is_W)? PIXEL_MIN: in0W);\n"
    "    t83 = PIXEL_SUP(t83, in0);\n"
    "    t83 = PIXEL_SUP(t83, (is_E)? PIXEL_MIN: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t83;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_56_source, "license_plate_opencl_helper_D8_56", "-DPIXEL8", &license_plate_opencl_helper_D8_56_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_56_source, "license_plate_opencl_helper_D8_56", "-DPIXEL16", &license_plate_opencl_helper_D8_56_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_D8_56
freia_status license_plate_opencl_helper_D8_56(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_D8_56_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_D8_56_kernel[bpp];

  // call kernel license_plate_opencl_helper_D8_56
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_E8_56
static cl_kernel license_plate_opencl_helper_E8_56_kernel[2];

// compile kernels for license_plate_opencl_helper_E8_56
static freia_status license_plate_opencl_helper_E8_56_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_E8_56
  const char * license_plate_opencl_helper_E8_56_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_E8_56\n"
    "KERNEL void license_plate_opencl_helper_E8_56(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t67 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t67 = PIXEL_INF(t67, (is_W)? PIXEL_MAX: in0W);\n"
    "    t67 = PIXEL_INF(t67, in0);\n"
    "    t67 = PIXEL_INF(t67, (is_E)? PIXEL_MAX: in0E);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t67;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_E8_56_source, "license_plate_opencl_helper_E8_56", "-DPIXEL8", &license_plate_opencl_helper_E8_56_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_E8_56_source, "license_plate_opencl_helper_E8_56", "-DPIXEL16", &license_plate_opencl_helper_E8_56_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_E8_56
freia_status license_plate_opencl_helper_E8_56(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_E8_56_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_E8_56_kernel[bpp];

  // call kernel license_plate_opencl_helper_E8_56
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_0_0_2
static cl_kernel license_plate_opencl_helper_0_0_2_kernel[2];

// compile kernels for license_plate_opencl_helper_0_0_2
static freia_status license_plate_opencl_helper_0_0_2_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_0_0_2
  const char * license_plate_opencl_helper_0_0_2_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_0_0_2\n"
    "KERNEL void license_plate_opencl_helper_0_0_2(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch,\n"
    "  int c0,\n"
    "  int c1,\n"
    "  int c2,\n"
    "  int c3,\n"
    "  int c4,\n"
    "  int c5)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  // N not needed\n"
    "  // S not needed\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t106 = PIXEL_MAX;\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL t84 = PIXEL_MIN;\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t106 = PIXEL_INF(t106, (is_W)? PIXEL_MAX: in0W);\n"
    "    t106 = PIXEL_INF(t106, in0);\n"
    "    t106 = PIXEL_INF(t106, (is_E)? PIXEL_MAX: in0E);\n"
    "    t84 = PIXEL_SUP(t84, (is_W)? PIXEL_MIN: in1W);\n"
    "    t84 = PIXEL_SUP(t84, in1);\n"
    "    t84 = PIXEL_SUP(t84, (is_E)? PIXEL_MIN: in1E);\n"
    "    PIXEL t112 = PIXEL_THRESHOLD(t84, c0, c1, c2);\n"
    "    PIXEL t113 = PIXEL_THRESHOLD(t106, c3, c4, c5);\n"
    "    PIXEL t115 = PIXEL_AND(t112, t113);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t115;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_2_source, "license_plate_opencl_helper_0_0_2", "-DPIXEL8", &license_plate_opencl_helper_0_0_2_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_2_source, "license_plate_opencl_helper_0_0_2", "-DPIXEL16", &license_plate_opencl_helper_0_0_2_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_0_0_2
freia_status license_plate_opencl_helper_0_0_2(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1,
  int32_t c0,
  int32_t c1,
  int32_t c2,
  int32_t c3,
  int32_t c4,
  int32_t c5)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_0_0_2_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_0_0_2_kernel[bpp];

  // call kernel license_plate_opencl_helper_0_0_2
  err |= freia_op_call_kernel(kernel, 1, 2, 6, 0, o0, i0, i1, c0, c1, c2, c3, c4, c5);

  return err;
}

// hold kernels for license_plate_opencl_helper_D8_511
static cl_kernel license_plate_opencl_helper_D8_511_kernel[2];

// compile kernels for license_plate_opencl_helper_D8_511
static freia_status license_plate_opencl_helper_D8_511_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_D8_511
  const char * license_plate_opencl_helper_D8_511_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_D8_511\n"
    "KERNEL void license_plate_opencl_helper_D8_511(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t146 = PIXEL_MIN;\n"
    "    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];\n"
    "    PIXEL in0W = (is_W)? 0: j0[i-1];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0E = (is_E)? 0: j0[i+1];\n"
    "    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];\n"
    "\n"
    "    // pixel computations\n"
    "    t146 = PIXEL_SUP(t146, (is_N|is_W)? PIXEL_MIN: in0NW);\n"
    "    t146 = PIXEL_SUP(t146, (is_N)? PIXEL_MIN: in0N);\n"
    "    t146 = PIXEL_SUP(t146, (is_N|is_E)? PIXEL_MIN: in0NE);\n"
    "    t146 = PIXEL_SUP(t146, (is_W)? PIXEL_MIN: in0W);\n"
    "    t146 = PIXEL_SUP(t146, in0);\n"
    "    t146 = PIXEL_SUP(t146, (is_E)? PIXEL_MIN: in0E);\n"
    "    t146 = PIXEL_SUP(t146, (is_S|is_W)? PIXEL_MIN: in0SW);\n"
    "    t146 = PIXEL_SUP(t146, (is_S)? PIXEL_MIN: in0S);\n"
    "    t146 = PIXEL_SUP(t146, (is_S|is_E)? PIXEL_MIN: in0SE);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t146;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_511_source, "license_plate_opencl_helper_D8_511", "-DPIXEL8", &license_plate_opencl_helper_D8_511_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_511_source, "license_plate_opencl_helper_D8_511", "-DPIXEL16", &license_plate_opencl_helper_D8_511_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_D8_511
freia_status license_plate_opencl_helper_D8_511(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_D8_511_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_D8_511_kernel[bpp];

  // call kernel license_plate_opencl_helper_D8_511
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_D8_146
static cl_kernel license_plate_opencl_helper_D8_146_kernel[2];

// compile kernels for license_plate_opencl_helper_D8_146
static freia_status license_plate_opencl_helper_D8_146_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_D8_146
  const char * license_plate_opencl_helper_D8_146_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_D8_146\n"
    "KERNEL void license_plate_opencl_helper_D8_146(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t126 = PIXEL_MIN;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t126 = PIXEL_SUP(t126, (is_N)? PIXEL_MIN: in0N);\n"
    "    t126 = PIXEL_SUP(t126, in0);\n"
    "    t126 = PIXEL_SUP(t126, (is_S)? PIXEL_MIN: in0S);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t126;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_146_source, "license_plate_opencl_helper_D8_146", "-DPIXEL8", &license_plate_opencl_helper_D8_146_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_D8_146_source, "license_plate_opencl_helper_D8_146", "-DPIXEL16", &license_plate_opencl_helper_D8_146_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_D8_146
freia_status license_plate_opencl_helper_D8_146(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_D8_146_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_D8_146_kernel[bpp];

  // call kernel license_plate_opencl_helper_D8_146
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_E8_146
static cl_kernel license_plate_opencl_helper_E8_146_kernel[2];

// compile kernels for license_plate_opencl_helper_E8_146
static freia_status license_plate_opencl_helper_E8_146_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_E8_146
  const char * license_plate_opencl_helper_E8_146_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_E8_146\n"
    "KERNEL void license_plate_opencl_helper_E8_146(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    // W not needed\n"
    "    // E not needed\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t120 = PIXEL_MAX;\n"
    "    PIXEL in0N = (is_N)? 0: j0[i-pitch];\n"
    "    PIXEL in0 = j0[i];\n"
    "    PIXEL in0S = (is_S)? 0: j0[i+pitch];\n"
    "\n"
    "    // pixel computations\n"
    "    t120 = PIXEL_INF(t120, (is_N)? PIXEL_MAX: in0N);\n"
    "    t120 = PIXEL_INF(t120, in0);\n"
    "    t120 = PIXEL_INF(t120, (is_S)? PIXEL_MAX: in0S);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t120;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_E8_146_source, "license_plate_opencl_helper_E8_146", "-DPIXEL8", &license_plate_opencl_helper_E8_146_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_E8_146_source, "license_plate_opencl_helper_E8_146", "-DPIXEL16", &license_plate_opencl_helper_E8_146_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_E8_146
freia_status license_plate_opencl_helper_E8_146(
  freia_data2d * o0,
  const freia_data2d * i0)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_E8_146_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_E8_146_kernel[bpp];

  // call kernel license_plate_opencl_helper_E8_146
  err |= freia_op_call_kernel(kernel, 1, 1, 0, 0, o0, i0);

  return err;
}

// hold kernels for license_plate_opencl_helper_0_0_4
static cl_kernel license_plate_opencl_helper_0_0_4_kernel[2];

// compile kernels for license_plate_opencl_helper_0_0_4
static freia_status license_plate_opencl_helper_0_0_4_compile(void)
{
  // OpenCL source for license_plate_opencl_helper_0_0_4
  const char * license_plate_opencl_helper_0_0_4_source =
    "#include <freia_opencl_runtime.hcl>\n"
    "\n"
    "// opencl function license_plate_opencl_helper_0_0_4\n"
    "KERNEL void license_plate_opencl_helper_0_0_4(\n"
    "  GLOBAL PIXEL * o0,\n"
    "  int ofs_o0,\n"
    "  GLOBAL PIXEL * i0, // const?\n"
    "  int ofs_i0,\n"
    "  GLOBAL PIXEL * i1, // const?\n"
    "  int ofs_i1,\n"
    "  int width, // of the working area, vs image pitch below\n"
    "  int height, // of the working area\n"
    "  int pitch)\n"
    "{\n"
    "  // no tiling on height dimension\n"
    "  // assert(height==get_global_size(0));\n"
    "  int j = get_global_id(0);\n"
    "\n"
    "  // loop i upper bound\n"
    "  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);\n"
    "  int Wlast = Wtile*(get_global_id(1)+1);\n"
    "  if (Wlast>width) Wlast = width;\n"
    "\n"
    "  // N & S boundaries, one thread on first dimension per row\n"
    "  int is_N = (get_global_id(0)==0);\n"
    "  int is_S = (get_global_id(0)==(height-1));\n"
    "\n"
    "  // get input & output image pointers\n"
    "  int shift = pitch*j;\n"
    "  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;\n"
    "  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;\n"
    "  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;\n"
    "\n"
    "  int i;\n"
    "  for (i=Wtile*get_global_id(1); i<Wlast; i++)\n"
    "  {\n"
    "    // W & E boundaries, assuming i global index\n"
    "    int is_W = (i==0);\n"
    "    int is_E = (i==(width-1));\n"
    "\n"
    "    // get input pixels\n"
    "    PIXEL t147 = PIXEL_MIN;\n"
    "    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];\n"
    "    PIXEL in1N = (is_N)? 0: j1[i-pitch];\n"
    "    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];\n"
    "    PIXEL in1W = (is_W)? 0: j1[i-1];\n"
    "    PIXEL in1 = j1[i];\n"
    "    PIXEL in1E = (is_E)? 0: j1[i+1];\n"
    "    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];\n"
    "    PIXEL in1S = (is_S)? 0: j1[i+pitch];\n"
    "    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];\n"
    "    PIXEL in0 = j0[i];\n"
    "\n"
    "    // pixel computations\n"
    "    t147 = PIXEL_SUP(t147, (is_N|is_W)? PIXEL_MIN: in1NW);\n"
    "    t147 = PIXEL_SUP(t147, (is_N)? PIXEL_MIN: in1N);\n"
    "    t147 = PIXEL_SUP(t147, (is_N|is_E)? PIXEL_MIN: in1NE);\n"
    "    t147 = PIXEL_SUP(t147, (is_W)? PIXEL_MIN: in1W);\n"
    "    t147 = PIXEL_SUP(t147, in1);\n"
    "    t147 = PIXEL_SUP(t147, (is_E)? PIXEL_MIN: in1E);\n"
    "    t147 = PIXEL_SUP(t147, (is_S|is_W)? PIXEL_MIN: in1SW);\n"
    "    t147 = PIXEL_SUP(t147, (is_S)? PIXEL_MIN: in1S);\n"
    "    t147 = PIXEL_SUP(t147, (is_S|is_E)? PIXEL_MIN: in1SE);\n"
    "    PIXEL t152 = PIXEL_AND(t147, in0);\n"
    "\n"
    "    // set output pixels\n"
    "    p0[i] = t152;\n"
    "  }\n"
    "}\n";
  freia_status err = FREIA_OK;
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_4_source, "license_plate_opencl_helper_0_0_4", "-DPIXEL8", &license_plate_opencl_helper_0_0_4_kernel[0]);
  err |= freia_op_compile_kernel(license_plate_opencl_helper_0_0_4_source, "license_plate_opencl_helper_0_0_4", "-DPIXEL16", &license_plate_opencl_helper_0_0_4_kernel[1]);
  return err;
}

// helper function license_plate_opencl_helper_0_0_4
freia_status license_plate_opencl_helper_0_0_4(
  freia_data2d * o0,
  const freia_data2d * i0,
  const freia_data2d * i1)
{
  freia_status err = FREIA_OK;

  // handle on the fly compilation...
  static int to_compile = 1;
  if (to_compile) {
    err |= license_plate_opencl_helper_0_0_4_compile();
    // compilation may have failed
    if (err) return err;
    to_compile = 0;
  }

  // now get kernel, which must be have be compiled
  uint32_t bpp = i0->bpp>>4;
  cl_kernel kernel = license_plate_opencl_helper_0_0_4_kernel[bpp];

  // call kernel license_plate_opencl_helper_0_0_4
  err |= freia_op_call_kernel(kernel, 1, 2, 0, 0, o0, i0, i1);

  return err;
}
#include <freia_opencl_runtime.hcl>
// generated OpenCL kernels for function license_plate

// opencl for dag 0

// opencl function license_plate_opencl_helper_0_0_0
KERNEL void license_plate_opencl_helper_0_0_0(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * o1,
  int ofs_o1,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * p1 = o1 + ofs_o1 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t53 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t89 = PIXEL_MIN;

    // pixel computations
    t53 = PIXEL_INF(t53, (is_W)? PIXEL_MAX: in0W);
    t53 = PIXEL_INF(t53, in0);
    t53 = PIXEL_INF(t53, (is_E)? PIXEL_MAX: in0E);
    t89 = PIXEL_SUP(t89, (is_W)? PIXEL_MIN: in0W);
    t89 = PIXEL_SUP(t89, in0);
    t89 = PIXEL_SUP(t89, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t53;
    p1[i] = t89;
  }
}

// opencl function license_plate_opencl_helper_D8_56
KERNEL void license_plate_opencl_helper_D8_56(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t83 = PIXEL_MIN;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t83 = PIXEL_SUP(t83, (is_W)? PIXEL_MIN: in0W);
    t83 = PIXEL_SUP(t83, in0);
    t83 = PIXEL_SUP(t83, (is_E)? PIXEL_MIN: in0E);

    // set output pixels
    p0[i] = t83;
  }
}

// opencl function license_plate_opencl_helper_E8_56
KERNEL void license_plate_opencl_helper_E8_56(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t67 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];

    // pixel computations
    t67 = PIXEL_INF(t67, (is_W)? PIXEL_MAX: in0W);
    t67 = PIXEL_INF(t67, in0);
    t67 = PIXEL_INF(t67, (is_E)? PIXEL_MAX: in0E);

    // set output pixels
    p0[i] = t67;
  }
}

// opencl function license_plate_opencl_helper_0_0_2
KERNEL void license_plate_opencl_helper_0_0_2(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch,
  int c0,
  int c1,
  int c2,
  int c3,
  int c4,
  int c5)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  // N not needed
  // S not needed

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t106 = PIXEL_MAX;
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL t84 = PIXEL_MIN;
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];

    // pixel computations
    t106 = PIXEL_INF(t106, (is_W)? PIXEL_MAX: in0W);
    t106 = PIXEL_INF(t106, in0);
    t106 = PIXEL_INF(t106, (is_E)? PIXEL_MAX: in0E);
    t84 = PIXEL_SUP(t84, (is_W)? PIXEL_MIN: in1W);
    t84 = PIXEL_SUP(t84, in1);
    t84 = PIXEL_SUP(t84, (is_E)? PIXEL_MIN: in1E);
    PIXEL t112 = PIXEL_THRESHOLD(t84, c0, c1, c2);
    PIXEL t113 = PIXEL_THRESHOLD(t106, c3, c4, c5);
    PIXEL t115 = PIXEL_AND(t112, t113);

    // set output pixels
    p0[i] = t115;
  }
}

// opencl function license_plate_opencl_helper_D8_511
KERNEL void license_plate_opencl_helper_D8_511(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t146 = PIXEL_MIN;
    PIXEL in0NW = (is_N|is_W)? 0: j0[i-pitch-1];
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0NE = (is_N|is_E)? 0: j0[i-pitch+1];
    PIXEL in0W = (is_W)? 0: j0[i-1];
    PIXEL in0 = j0[i];
    PIXEL in0E = (is_E)? 0: j0[i+1];
    PIXEL in0SW = (is_S|is_W)? 0: j0[i+pitch-1];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];
    PIXEL in0SE = (is_S|is_E)? 0: j0[i+pitch+1];

    // pixel computations
    t146 = PIXEL_SUP(t146, (is_N|is_W)? PIXEL_MIN: in0NW);
    t146 = PIXEL_SUP(t146, (is_N)? PIXEL_MIN: in0N);
    t146 = PIXEL_SUP(t146, (is_N|is_E)? PIXEL_MIN: in0NE);
    t146 = PIXEL_SUP(t146, (is_W)? PIXEL_MIN: in0W);
    t146 = PIXEL_SUP(t146, in0);
    t146 = PIXEL_SUP(t146, (is_E)? PIXEL_MIN: in0E);
    t146 = PIXEL_SUP(t146, (is_S|is_W)? PIXEL_MIN: in0SW);
    t146 = PIXEL_SUP(t146, (is_S)? PIXEL_MIN: in0S);
    t146 = PIXEL_SUP(t146, (is_S|is_E)? PIXEL_MIN: in0SE);

    // set output pixels
    p0[i] = t146;
  }
}

// opencl function license_plate_opencl_helper_D8_146
KERNEL void license_plate_opencl_helper_D8_146(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t126 = PIXEL_MIN;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];

    // pixel computations
    t126 = PIXEL_SUP(t126, (is_N)? PIXEL_MIN: in0N);
    t126 = PIXEL_SUP(t126, in0);
    t126 = PIXEL_SUP(t126, (is_S)? PIXEL_MIN: in0S);

    // set output pixels
    p0[i] = t126;
  }
}

// opencl function license_plate_opencl_helper_E8_146
KERNEL void license_plate_opencl_helper_E8_146(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    // W not needed
    // E not needed

    // get input pixels
    PIXEL t120 = PIXEL_MAX;
    PIXEL in0N = (is_N)? 0: j0[i-pitch];
    PIXEL in0 = j0[i];
    PIXEL in0S = (is_S)? 0: j0[i+pitch];

    // pixel computations
    t120 = PIXEL_INF(t120, (is_N)? PIXEL_MAX: in0N);
    t120 = PIXEL_INF(t120, in0);
    t120 = PIXEL_INF(t120, (is_S)? PIXEL_MAX: in0S);

    // set output pixels
    p0[i] = t120;
  }
}

// opencl function license_plate_opencl_helper_0_0_4
KERNEL void license_plate_opencl_helper_0_0_4(
  GLOBAL PIXEL * o0,
  int ofs_o0,
  GLOBAL PIXEL * i0, // const?
  int ofs_i0,
  GLOBAL PIXEL * i1, // const?
  int ofs_i1,
  int width, // of the working area, vs image pitch below
  int height, // of the working area
  int pitch)
{
  // no tiling on height dimension
  // assert(height==get_global_size(0));
  int j = get_global_id(0);

  // loop i upper bound
  int Wtile = (width+get_global_size(1)-1)/get_global_size(1);
  int Wlast = Wtile*(get_global_id(1)+1);
  if (Wlast>width) Wlast = width;

  // N & S boundaries, one thread on first dimension per row
  int is_N = (get_global_id(0)==0);
  int is_S = (get_global_id(0)==(height-1));

  // get input & output image pointers
  int shift = pitch*j;
  GLOBAL PIXEL * p0 = o0 + ofs_o0 + shift;
  GLOBAL PIXEL * j0 = i0 + ofs_i0 + shift;
  GLOBAL PIXEL * j1 = i1 + ofs_i1 + shift;

  int i;
  for (i=Wtile*get_global_id(1); i<Wlast; i++)
  {
    // W & E boundaries, assuming i global index
    int is_W = (i==0);
    int is_E = (i==(width-1));

    // get input pixels
    PIXEL t147 = PIXEL_MIN;
    PIXEL in1NW = (is_N|is_W)? 0: j1[i-pitch-1];
    PIXEL in1N = (is_N)? 0: j1[i-pitch];
    PIXEL in1NE = (is_N|is_E)? 0: j1[i-pitch+1];
    PIXEL in1W = (is_W)? 0: j1[i-1];
    PIXEL in1 = j1[i];
    PIXEL in1E = (is_E)? 0: j1[i+1];
    PIXEL in1SW = (is_S|is_W)? 0: j1[i+pitch-1];
    PIXEL in1S = (is_S)? 0: j1[i+pitch];
    PIXEL in1SE = (is_S|is_E)? 0: j1[i+pitch+1];
    PIXEL in0 = j0[i];

    // pixel computations
    t147 = PIXEL_SUP(t147, (is_N|is_W)? PIXEL_MIN: in1NW);
    t147 = PIXEL_SUP(t147, (is_N)? PIXEL_MIN: in1N);
    t147 = PIXEL_SUP(t147, (is_N|is_E)? PIXEL_MIN: in1NE);
    t147 = PIXEL_SUP(t147, (is_W)? PIXEL_MIN: in1W);
    t147 = PIXEL_SUP(t147, in1);
    t147 = PIXEL_SUP(t147, (is_E)? PIXEL_MIN: in1E);
    t147 = PIXEL_SUP(t147, (is_S|is_W)? PIXEL_MIN: in1SW);
    t147 = PIXEL_SUP(t147, (is_S)? PIXEL_MIN: in1S);
    t147 = PIXEL_SUP(t147, (is_S|is_E)? PIXEL_MIN: in1SE);
    PIXEL t152 = PIXEL_AND(t147, in0);

    // set output pixels
    p0[i] = t152;
  }
}

! updated function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/
   
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1 = 0;                                              /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2 = 0;                                              /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3 = 0;                                              /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_opencl_helper_0_0_0(imopen, imclose, in);              /*0053*/

   ret_1 = 0;                                                           /*0089*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0054*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0055*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0056*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0057*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0058*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0059*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0060*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0061*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0062*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0063*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0064*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0065*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0066*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0067*/

   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0070*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0071*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0072*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0073*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0074*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0075*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0076*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0077*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0078*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0079*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0080*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0081*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0082*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0083*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0090*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0091*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0092*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0093*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0094*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0095*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0096*/

   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0099*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0100*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0101*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0102*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0103*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0104*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0105*/
   license_plate_opencl_helper_0_0_2(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);   /*0106*/
   
   
   
   license_plate_opencl_helper_E8_146(imfilt, imand);                   /*0117*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0118*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0119*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0120*/

   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0123*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0124*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0125*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0126*/

   license_plate_opencl_helper_E8_56(imout, imfilt);                    /*0131*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0132*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0133*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0134*/

   license_plate_opencl_helper_D8_56(imout, imout);                     /*0137*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0138*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0139*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0140*/

   license_plate_opencl_helper_D8_511(out, imout);                      /*0145*/
   license_plate_opencl_helper_D8_511(out, out);                        /*0146*/
   license_plate_opencl_helper_0_0_4(out, in, out);                     /*0147*/
   
   
   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! cleaned up function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/
   
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0 = 0;                                              /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1 = 0;                                              /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2 = 0;                                              /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3 = 0;                                              /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   license_plate_opencl_helper_0_0_0(imopen, imclose, in);              /*0053*/

   ret_1 = 0;                                                           /*0089*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0054*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0055*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0056*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0057*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0058*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0059*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0060*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0061*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0062*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0063*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0064*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0065*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0066*/
   license_plate_opencl_helper_E8_56(imopen, imopen);                   /*0067*/

   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0070*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0071*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0072*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0073*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0074*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0075*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0076*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0077*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0078*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0079*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0080*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0081*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0082*/
   license_plate_opencl_helper_D8_56(imopen, imopen);                   /*0083*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0090*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0091*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0092*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0093*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0094*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0095*/
   license_plate_opencl_helper_D8_56(imclose, imclose);                 /*0096*/

   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0099*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0100*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0101*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0102*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0103*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0104*/
   license_plate_opencl_helper_E8_56(imclose, imclose);                 /*0105*/
   license_plate_opencl_helper_0_0_2(imand, imclose, imopen, 1, 50, 1, 150, 255, 1);   /*0106*/
   
   
   
   license_plate_opencl_helper_E8_146(imfilt, imand);                   /*0117*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0118*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0119*/
   license_plate_opencl_helper_E8_146(imfilt, imfilt);                  /*0120*/

   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0123*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0124*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0125*/
   license_plate_opencl_helper_D8_146(imfilt, imfilt);                  /*0126*/

   license_plate_opencl_helper_E8_56(imout, imfilt);                    /*0131*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0132*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0133*/
   license_plate_opencl_helper_E8_56(imout, imout);                     /*0134*/

   license_plate_opencl_helper_D8_56(imout, imout);                     /*0137*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0138*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0139*/
   license_plate_opencl_helper_D8_56(imout, imout);                     /*0140*/

   license_plate_opencl_helper_D8_511(out, imout);                      /*0145*/
   license_plate_opencl_helper_D8_511(out, out);                        /*0146*/
   license_plate_opencl_helper_0_0_4(out, in, out);                     /*0147*/
   
   
   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}
#
# SIGMAC
#
#
# compile generated license_plate_2
#

! initial function

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *immir;                                                 /*0010*/
   freia_data2d *imopen;                                                /*0011*/
   freia_data2d *imclose;                                               /*0012*/
   freia_data2d *imopenth;                                              /*0013*/
   freia_data2d *imcloseth;                                             /*0014*/
   freia_data2d *imand;                                                 /*0015*/
   freia_data2d *imfilt;                                                /*0016*/
   freia_data2d *imout;                                                 /*0017*/
   freia_data2d *out;                                                   /*0018*/

   const int32_t kernel1x3[9] = {0, 0, 0, 1, 1, 1, 0, 0, 0};            /*0020*/
   const int32_t kernel3x1[9] = {0, 1, 0, 0, 1, 0, 0, 1, 0};            /*0021*/
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   immir = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0040*/
   imopen = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0041*/
   imclose = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);          /*0042*/
   imopenth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);         /*0043*/
   imcloseth = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);        /*0044*/
   imand = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0045*/
   imfilt = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);           /*0046*/
   imout = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);            /*0047*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/

   ret_0 = freia_aipo_erode_8c(imopen, in, kernel1x3);                  /*0053*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0054*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0055*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0056*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0057*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0058*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0059*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0060*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0061*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0062*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0063*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0064*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0065*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0066*/
   ret_0 |= freia_aipo_erode_8c(imopen, imopen, kernel1x3);             /*0067*/
   i_0 = 15;                                                            /*0068*/

   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0070*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0071*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0072*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0073*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0074*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0075*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0076*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0077*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0078*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0079*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0080*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0081*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0082*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0083*/
   ret_0 |= freia_aipo_dilate_8c(imopen, imopen, kernel1x3);            /*0084*/
   i_0 = 15;                                                            /*0085*/

   _return1 = ret_0;                                                    /*0087*/

   ret_1 = freia_aipo_dilate_8c(imclose, in, kernel1x3);                /*0089*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0090*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0091*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0092*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0093*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0094*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0095*/
   ret_1 |= freia_aipo_dilate_8c(imclose, imclose, kernel1x3);          /*0096*/
   i_1 = 8;                                                             /*0097*/

   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0099*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0100*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0101*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0102*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0103*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0104*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0105*/
   ret_1 |= freia_aipo_erode_8c(imclose, imclose, kernel1x3);           /*0106*/
   i_1 = 8;                                                             /*0107*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   freia_aipo_threshold(imopenth, imopen, 1, 50, 1);                    /*0112*/
   freia_aipo_threshold(imcloseth, imclose, 150, 255, 1);               /*0113*/

   freia_aipo_and(imand, imopenth, imcloseth);                          /*0115*/

   ret_2 = freia_aipo_erode_8c(imfilt, imand, kernel3x1);               /*0117*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0118*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0119*/
   ret_2 |= freia_aipo_erode_8c(imfilt, imfilt, kernel3x1);             /*0120*/
   i_2 = 4;                                                             /*0121*/

   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0123*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0124*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0125*/
   ret_2 |= freia_aipo_dilate_8c(imfilt, imfilt, kernel3x1);            /*0126*/
   i_2 = 4;                                                             /*0127*/

   _return2 = ret_2;                                                    /*0129*/

   ret_3 = freia_aipo_erode_8c(imout, imfilt, kernel1x3);               /*0131*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0132*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0133*/
   ret_3 |= freia_aipo_erode_8c(imout, imout, kernel1x3);               /*0134*/
   i_3 = 4;                                                             /*0135*/

   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0137*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0138*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0139*/
   ret_3 |= freia_aipo_dilate_8c(imout, imout, kernel1x3);              /*0140*/
   i_3 = 4;                                                             /*0141*/

   _return3 = ret_3;                                                    /*0143*/

   freia_aipo_dilate_8c(out, imout, freia_morpho_kernel_8c);            /*0145*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0146*/
   freia_aipo_dilate_8c(out, out, freia_morpho_kernel_8c);              /*0147*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   freia_aipo_and(out, out, in);                                        /*0152*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(immir);                                   /*0157*/
   freia_common_destruct_data(imopen);                                  /*0158*/
   freia_common_destruct_data(imclose);                                 /*0159*/
   freia_common_destruct_data(imopenth);                                /*0160*/
   freia_common_destruct_data(imcloseth);                               /*0161*/
   freia_common_destruct_data(imand);                                   /*0162*/
   freia_common_destruct_data(imfilt);                                  /*0163*/
   freia_common_destruct_data(imout);                                   /*0164*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! graphs

// graph for dag "dag_0" of module "license_plate" in dot format
// DAG "dag_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}
// graph for dag "dag_cleaned_0" of module "license_plate" in dot format
// DAG "dag_cleaned_0": #i=1 #o=1 #c=69 #s=4 #I=0 #B=0 #A=0
digraph "dag_cleaned_0" {
  // inputs
  "in" [shape=circle];

  // outputs
  "out" [shape=circle];

  // computation vertices
  "152 &" [shape=trapezium,orientation=270];
  "152 &" -> "out";
  "147 D8" [shape=box];
  "147 D8" -> "152 &" [label="out_1"];
  "146 D8" [shape=box];
  "146 D8" -> "147 D8" [label="out_2"];
  "145 D8" [shape=box];
  "145 D8" -> "146 D8" [label="out_3"];
  "140 D8" [shape=box];
  "140 D8" -> "145 D8" [label="imout"];
  "139 D8" [shape=box];
  "139 D8" -> "140 D8" [label="imout_1"];
  "138 D8" [shape=box];
  "138 D8" -> "139 D8" [label="imout_2"];
  "137 D8" [shape=box];
  "137 D8" -> "138 D8" [label="imout_3"];
  "134 E8" [shape=box];
  "134 E8" -> "137 D8" [label="imout_4"];
  "133 E8" [shape=box];
  "133 E8" -> "134 E8" [label="imout_5"];
  "132 E8" [shape=box];
  "132 E8" -> "133 E8" [label="imout_6"];
  "131 E8" [shape=box];
  "131 E8" -> "132 E8" [label="imout_7"];
  "126 D8" [shape=box];
  "126 D8" -> "131 E8" [label="imfilt"];
  "125 D8" [shape=box];
  "125 D8" -> "126 D8" [label="imfilt_1"];
  "124 D8" [shape=box];
  "124 D8" -> "125 D8" [label="imfilt_2"];
  "123 D8" [shape=box];
  "123 D8" -> "124 D8" [label="imfilt_3"];
  "120 E8" [shape=box];
  "120 E8" -> "123 D8" [label="imfilt_4"];
  "119 E8" [shape=box];
  "119 E8" -> "120 E8" [label="imfilt_5"];
  "118 E8" [shape=box];
  "118 E8" -> "119 E8" [label="imfilt_6"];
  "117 E8" [shape=box];
  "117 E8" -> "118 E8" [label="imfilt_7"];
  "115 &" [shape=trapezium,orientation=270];
  "115 &" -> "117 E8" [label="imand"];
  "113 thr" [shape=parallelogram];
  "113 thr" -> "115 &" [label="imcloseth"];
  "112 thr" [shape=parallelogram];
  "112 thr" -> "115 &" [label="imopenth"];
  "106 E8" [shape=box];
  "106 E8" -> "113 thr" [label="imclose"];
  "105 E8" [shape=box];
  "105 E8" -> "106 E8" [label="imclose_1"];
  "104 E8" [shape=box];
  "104 E8" -> "105 E8" [label="imclose_2"];
  "103 E8" [shape=box];
  "103 E8" -> "104 E8" [label="imclose_3"];
  "102 E8" [shape=box];
  "102 E8" -> "103 E8" [label="imclose_4"];
  "101 E8" [shape=box];
  "101 E8" -> "102 E8" [label="imclose_5"];
  "100 E8" [shape=box];
  "100 E8" -> "101 E8" [label="imclose_6"];
  "99 E8" [shape=box];
  "99 E8" -> "100 E8" [label="imclose_7"];
  "96 D8" [shape=box];
  "96 D8" -> "99 E8" [label="imclose_8"];
  "95 D8" [shape=box];
  "95 D8" -> "96 D8" [label="imclose_9"];
  "94 D8" [shape=box];
  "94 D8" -> "95 D8" [label="imclose_10"];
  "93 D8" [shape=box];
  "93 D8" -> "94 D8" [label="imclose_11"];
  "92 D8" [shape=box];
  "92 D8" -> "93 D8" [label="imclose_12"];
  "91 D8" [shape=box];
  "91 D8" -> "92 D8" [label="imclose_13"];
  "90 D8" [shape=box];
  "90 D8" -> "91 D8" [label="imclose_14"];
  "89 D8" [shape=box];
  "89 D8" -> "90 D8" [label="imclose_15"];
  "84 D8" [shape=box];
  "84 D8" -> "112 thr" [label="imopen"];
  "83 D8" [shape=box];
  "83 D8" -> "84 D8" [label="imopen_1"];
  "82 D8" [shape=box];
  "82 D8" -> "83 D8" [label="imopen_2"];
  "81 D8" [shape=box];
  "81 D8" -> "82 D8" [label="imopen_3"];
  "80 D8" [shape=box];
  "80 D8" -> "81 D8" [label="imopen_4"];
  "79 D8" [shape=box];
  "79 D8" -> "80 D8" [label="imopen_5"];
  "78 D8" [shape=box];
  "78 D8" -> "79 D8" [label="imopen_6"];
  "77 D8" [shape=box];
  "77 D8" -> "78 D8" [label="imopen_7"];
  "76 D8" [shape=box];
  "76 D8" -> "77 D8" [label="imopen_8"];
  "75 D8" [shape=box];
  "75 D8" -> "76 D8" [label="imopen_9"];
  "74 D8" [shape=box];
  "74 D8" -> "75 D8" [label="imopen_10"];
  "73 D8" [shape=box];
  "73 D8" -> "74 D8" [label="imopen_11"];
  "72 D8" [shape=box];
  "72 D8" -> "73 D8" [label="imopen_12"];
  "71 D8" [shape=box];
  "71 D8" -> "72 D8" [label="imopen_13"];
  "70 D8" [shape=box];
  "70 D8" -> "71 D8" [label="imopen_14"];
  "67 E8" [shape=box];
  "67 E8" -> "70 D8" [label="imopen_15"];
  "66 E8" [shape=box];
  "66 E8" -> "67 E8" [label="imopen_16"];
  "65 E8" [shape=box];
  "65 E8" -> "66 E8" [label="imopen_17"];
  "64 E8" [shape=box];
  "64 E8" -> "65 E8" [label="imopen_18"];
  "63 E8" [shape=box];
  "63 E8" -> "64 E8" [label="imopen_19"];
  "62 E8" [shape=box];
  "62 E8" -> "63 E8" [label="imopen_20"];
  "61 E8" [shape=box];
  "61 E8" -> "62 E8" [label="imopen_21"];
  "60 E8" [shape=box];
  "60 E8" -> "61 E8" [label="imopen_22"];
  "59 E8" [shape=box];
  "59 E8" -> "60 E8" [label="imopen_23"];
  "58 E8" [shape=box];
  "58 E8" -> "59 E8" [label="imopen_24"];
  "57 E8" [shape=box];
  "57 E8" -> "58 E8" [label="imopen_25"];
  "56 E8" [shape=box];
  "56 E8" -> "57 E8" [label="imopen_26"];
  "55 E8" [shape=box];
  "55 E8" -> "56 E8" [label="imopen_27"];
  "54 E8" [shape=box];
  "54 E8" -> "55 E8" [label="imopen_28"];
  "53 E8" [shape=box];
  "53 E8" -> "54 E8" [label="imopen_29"];
  "in" -> "152 &";
  "in" -> "89 D8";
  "in" -> "53 E8";
}

! updated function for OPENCL

int license_plate(void)
{
   freia_dataio fdin;                                                   /*0006*/
   freia_dataio fdout;                                                  /*0007*/

   freia_data2d *in;                                                    /*0009*/
   freia_data2d *out;                                                   /*0018*/
   
   
   // PIPS generated variable
   int _return0, _return1, _return2, _return3, _return4;                /*0024*/
   freia_status ret_0;                                                  /*0025*/
   int i_0;                                                             /*0026*/
   freia_status ret_1;                                                  /*0027*/
   int i_1;                                                             /*0028*/
   freia_status ret_2;                                                  /*0029*/
   int i_2;                                                             /*0030*/
   freia_status ret_3;                                                  /*0031*/
   int i_3, i_4;                                                        /*0032*/
   
   /* open videos flow */
   freia_common_open_input(&fdin, 0);                                   /*0035*/
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, 8);          /*0036*/
   
   /* images creation */
   in = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);               /*0039*/
   out = freia_common_create_data(16, fdin.framewidth, fdin.frameheight);              /*0048*/
   
   /* processing */
   freia_common_rx_image(in, &fdin);                                    /*0051*/
   i_0 = 15;                                                            /*0068*/
   i_0 = 15;                                                            /*0085*/
   i_1 = 8;                                                             /*0097*/
   i_1 = 8;                                                             /*0107*/
   i_2 = 4;                                                             /*0121*/
   i_2 = 4;                                                             /*0127*/
   i_3 = 4;                                                             /*0135*/
   i_3 = 4;                                                             /*0141*/
   i_4 = 3;                                                             /*0148*/

   _return4 = 0;                                                        /*0150*/

   ret_0 = 0;                                                           /*0053*/
   
   
   ret_1 = 0;                                                           /*0089*/
   
   
   
   
   ret_2 = 0;                                                           /*0117*/
   
   
   ret_3 = 0;                                                           /*0131*/
   
   
   
   freia_mppa_launch(0, 1, 1, 0, 0, in, out);                           /*0152*/

   _return1 = ret_0;                                                    /*0087*/
   
   
   _return0 = ret_1;                                                    /*0110*/

   _return2 = ret_2;                                                    /*0129*/

   _return3 = ret_3;                                                    /*0143*/
   freia_common_tx_image(out, &fdout);                                  /*0153*/
   
   /* images destruction */
   freia_common_destruct_data(in);                                      /*0156*/
   freia_common_destruct_data(out);                                     /*0165*/
   
   /* close videos flow */
   freia_common_close_input(&fdin);                                     /*0168*/
   freia_common_close_output(&fdout);                                   /*0169*/

   return 0;                                                            /*0171*/
}

! Sigma-C subgraphs for OPENCL

/* C INCLUDES */
#include <stdio.h>

/* SIGMA-C INCLUDES */
#include "sigmacAgents.h"


// code module=license_plate fname=license_plate_sigmac_helper_0 split=0


/*#####################################################################*/
/*############# license_plate_sigmac_helper_0_0 Subgraph ##############*/
/*#####################################################################*/

AGENT_MERGE_ARITH(agent_compound_0_0, int16_t, 2, 1, 
  int16_t pi0 = inp[0][i];
  int16_t pi1 = inp[1][i];
  int16_t po0 = PIXEL_THR(pi0, 1, 50, 1);
  int16_t po1 = PIXEL_THR(pi1, 150, 255, 1);
  int16_t po2 = PIXEL_AND(po0, po1);
  outp[0][i] = po2;
);


#define pi0_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi0_0, int16_t)


#define pi1_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+0]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+2]);	\

CUSTOM_MORPHO_AGENT(pi1_0, int16_t)


#define pi2_0(OPR)				\
ret = PIXEL_ ## OPR(ret, buffer[olid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[clid][i+1]);	\
ret = PIXEL_ ## OPR(ret, buffer[ilid][i+1]);	\

CUSTOM_MORPHO_AGENT(pi2_0, int16_t)

subgraph
license_plate_sigmac_helper_0_0
(char pipein[255],
 char pipeout[255],
 int width,
 int height,
 size_t sizeMax,
 char pipeparin[255],
 char pipeparout[255])
{

  map {
    agent lhin = new Launcher_In(pipein, 1, width, height);
    agent strin = new Streamer_In(width, height, 1);
    connect (lhin.param, strin.input);
    SigmaC_agent_setUnitType(strin,"k1-I/O");
    agent lhout = new Launcher_Out(pipeout, 1, width, height);
    agent strout = new Streamer_Out(width, height, 1);
    connect (strout.output, lhout.result);
    SigmaC_agent_setUnitType(strout,"k1-I/O");

    // parameters declaration...
    int16_t pi0[9] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int16_t pi1[9] = { 0, 0, 0, 1, 1, 1, 0, 0, 0 };
    int16_t pi2[9] = { 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    int16_t pi3 = 150;
    int16_t pi4 = 255;
    int16_t pi5 = 1;
    int16_t pi6 = 1;
    int16_t pi7 = 50;
    int16_t pi8 = 1;

    // instantiations...
    agent dup0 = new rep(3, width);
    agent ero30 = new erode_pi1_0(width, height);
    agent ero29 = new erode_pi1_0(width, height);
    agent ero28 = new erode_pi1_0(width, height);
    agent ero27 = new erode_pi1_0(width, height);
    agent ero26 = new erode_pi1_0(width, height);
    agent ero25 = new erode_pi1_0(width, height);
    agent ero24 = new erode_pi1_0(width, height);
    agent ero23 = new erode_pi1_0(width, height);
    agent ero22 = new erode_pi1_0(width, height);
    agent ero21 = new erode_pi1_0(width, height);
    agent ero20 = new erode_pi1_0(width, height);
    agent ero19 = new erode_pi1_0(width, height);
    agent ero18 = new erode_pi1_0(width, height);
    agent ero17 = new erode_pi1_0(width, height);
    agent ero16 = new erode_pi1_0(width, height);
    agent dil33 = new dilate_pi1_0(width, height);
    agent dil32 = new dilate_pi1_0(width, height);
    agent dil31 = new dilate_pi1_0(width, height);
    agent dil30 = new dilate_pi1_0(width, height);
    agent dil29 = new dilate_pi1_0(width, height);
    agent dil28 = new dilate_pi1_0(width, height);
    agent dil27 = new dilate_pi1_0(width, height);
    agent dil26 = new dilate_pi1_0(width, height);
    agent dil25 = new dilate_pi1_0(width, height);
    agent dil24 = new dilate_pi1_0(width, height);
    agent dil23 = new dilate_pi1_0(width, height);
    agent dil22 = new dilate_pi1_0(width, height);
    agent dil21 = new dilate_pi1_0(width, height);
    agent dil20 = new dilate_pi1_0(width, height);
    agent dil19 = new dilate_pi1_0(width, height);
    agent dil18 = new dilate_pi1_0(width, height);
    agent dil17 = new dilate_pi1_0(width, height);
    agent dil16 = new dilate_pi1_0(width, height);
    agent dil15 = new dilate_pi1_0(width, height);
    agent dil14 = new dilate_pi1_0(width, height);
    agent dil13 = new dilate_pi1_0(width, height);
    agent dil12 = new dilate_pi1_0(width, height);
    agent dil11 = new dilate_pi1_0(width, height);
    agent ero15 = new erode_pi1_0(width, height);
    agent ero14 = new erode_pi1_0(width, height);
    agent ero13 = new erode_pi1_0(width, height);
    agent ero12 = new erode_pi1_0(width, height);
    agent ero11 = new erode_pi1_0(width, height);
    agent ero10 = new erode_pi1_0(width, height);
    agent ero9 = new erode_pi1_0(width, height);
    agent ero8 = new erode_pi1_0(width, height);
    agent cpd0 = new agent_compound_0_0(width);
    agent ero7 = new erode_pi2_0(width, height);
    agent ero6 = new erode_pi2_0(width, height);
    agent ero5 = new erode_pi2_0(width, height);
    agent ero4 = new erode_pi2_0(width, height);
    agent dil10 = new dilate_pi2_0(width, height);
    agent dil9 = new dilate_pi2_0(width, height);
    agent dil8 = new dilate_pi2_0(width, height);
    agent dil7 = new dilate_pi2_0(width, height);
    agent ero3 = new erode_pi1_0(width, height);
    agent ero2 = new erode_pi1_0(width, height);
    agent ero1 = new erode_pi1_0(width, height);
    agent ero0 = new erode_pi1_0(width, height);
    agent dil6 = new dilate_pi1_0(width, height);
    agent dil5 = new dilate_pi1_0(width, height);
    agent dil4 = new dilate_pi1_0(width, height);
    agent dil3 = new dilate_pi1_0(width, height);
    agent dil2 = new dilate_pi0_0(width, height);
    agent dil1 = new dilate_pi0_0(width, height);
    agent dil0 = new dilate_pi0_0(width, height);
    agent and0 = new img_and_img_16(width);

    // connections...
    connect (strin.output[0] /* in */, dup0.input);
    connect (dup0.output[2], and0.input[1]);
    connect (dup0.output[1], dil18.input);
    connect (dup0.output[0], ero30.input);
    connect (ero30.output, ero29.input);
    connect (ero29.output, ero28.input);
    connect (ero28.output, ero27.input);
    connect (ero27.output, ero26.input);
    connect (ero26.output, ero25.input);
    connect (ero25.output, ero24.input);
    connect (ero24.output, ero23.input);
    connect (ero23.output, ero22.input);
    connect (ero22.output, ero21.input);
    connect (ero21.output, ero20.input);
    connect (ero20.output, ero19.input);
    connect (ero19.output, ero18.input);
    connect (ero18.output, ero17.input);
    connect (ero17.output, ero16.input);
    connect (ero16.output, dil33.input);
    connect (dil33.output, dil32.input);
    connect (dil32.output, dil31.input);
    connect (dil31.output, dil30.input);
    connect (dil30.output, dil29.input);
    connect (dil29.output, dil28.input);
    connect (dil28.output, dil27.input);
    connect (dil27.output, dil26.input);
    connect (dil26.output, dil25.input);
    connect (dil25.output, dil24.input);
    connect (dil24.output, dil23.input);
    connect (dil23.output, dil22.input);
    connect (dil22.output, dil21.input);
    connect (dil21.output, dil20.input);
    connect (dil20.output, dil19.input);
    connect (dil19.output, cpd0.input[0]);
    connect (dil18.output, dil17.input);
    connect (dil17.output, dil16.input);
    connect (dil16.output, dil15.input);
    connect (dil15.output, dil14.input);
    connect (dil14.output, dil13.input);
    connect (dil13.output, dil12.input);
    connect (dil12.output, dil11.input);
    connect (dil11.output, ero15.input);
    connect (ero15.output, ero14.input);
    connect (ero14.output, ero13.input);
    connect (ero13.output, ero12.input);
    connect (ero12.output, ero11.input);
    connect (ero11.output, ero10.input);
    connect (ero10.output, ero9.input);
    connect (ero9.output, ero8.input);
    connect (ero8.output, cpd0.input[1]);
    connect (cpd0.output[0], ero7.input);
    connect (ero7.output, ero6.input);
    connect (ero6.output, ero5.input);
    connect (ero5.output, ero4.input);
    connect (ero4.output, dil10.input);
    connect (dil10.output, dil9.input);
    connect (dil9.output, dil8.input);
    connect (dil8.output, dil7.input);
    connect (dil7.output, ero3.input);
    connect (ero3.output, ero2.input);
    connect (ero2.output, ero1.input);
    connect (ero1.output, ero0.input);
    connect (ero0.output, dil6.input);
    connect (dil6.output, dil5.input);
    connect (dil5.output, dil4.input);
    connect (dil4.output, dil3.input);
    connect (dil3.output, dil2.input);
    connect (dil2.output, dil1.input);
    connect (dil1.output, dil0.input);
    connect (dil0.output, and0.input[0]);
    connect (and0.output, strout.input[0] /* out */);
  }
}



/*#####################################################################*/
/*########################### Subgraph Root ###########################*/
/*#####################################################################*/

subgraph root () {
  map {
    int width = 256, height = 256;
    size_t sizeMax = width * height * sizeof(int16_t);

    char cmd[255] = "cd .. && ./main";
    int i, n_pipes = 14;
    char pipes[n_pipes][255];
    for (i=0; i<n_pipes; i++)
      tmpnam(pipes[i]);

    agent pp = new Pipes(cmd, n_pipes, pipes);
    agent sk = new Sink<char>(1);
    SigmaC_agent_setUnitType(sk, "native");
    connect(pp.output, sk.input);

    new Malloc(pipes[0], pipes[1]);
    new Free(pipes[2], pipes[3]);
    new MCopy(pipes[4], pipes[5]);
    new SendDataToMPPA(pipes[6], pipes[7], sizeMax);
    new SendDataToHost(pipes[8], pipes[9], sizeMax);

    new license_plate_sigmac_helper_0_0
    (pipes[10], pipes[11],
     width, height, sizeMax,
     pipes[12], pipes[13]);

  }
}
#
# FREIA COMPILATION DONE
#


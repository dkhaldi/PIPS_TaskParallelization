delete empty_for

setproperty ABORT_ON_USER_ERROR TRUE
setproperty CHECK_C_SYNTAX_BEFORE_RUNNING_PIPS FALSE

create empty_for empty_for.c

module main

echo Select some options to deal with th C Language:

echo Parse as C:

activate C_PARSER

echo Prettyprint the source as C, of course

setproperty PRETTYPRINT_LANGUAGE "C"

echo Do not display original number lines as comment:

setproperty PRETTYPRINT_STATEMENT_NUMBER FALSE

echo If possible, transform simple for-loops into do-loop a  la Fortran, simpler to analyze:
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER   TRUE
echo Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:

setproperty FOR_TO_WHILE_LOOP_IN_CONTROLIZER   TRUE

display PRINTED_FILE[empty_for!]
display PRINTED_FILE[main]
quit

echo Select the most precise analysis:

activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL
activate REGION_CHAINS

echo Compute the intraprocedural preconditions at the same time as
echo   transformers and use them to improve the accuracy of expression
echo   and statement transformers:

setproperty SEMANTICS_COMPUTE_TRANSFORMERS_IN_CONTEXT TRUE
setproperty SEMANTICS_FIX_POINT_OPERATOR "derivative"

echo Try to restructure the code for more precision:

setproperty UNSPAGHETTIFY_TEST_RESTRUCTURING=TRUE
setproperty UNSPAGHETTIFY_RECURSIVE_DECOMPOSITION=TRUE

echo Privatize scalar variables on all the modules of the program:
apply PRIVATIZE_MODULE[empty_for!]
apply PRIVATIZE_MODULE[main]
echo Ask for some statistics about the job to be done:
setproperty PARALLELIZATION_STATISTICS=TRUE
echo Ask for the parallelization of all the modules of the program with OpenMP output:
activate PRINT_PARALLELIZEDOMP_CODE
module empty_for!
display PARALLELPRINTED_FILE[empty_for!]
module main
display PARALLELPRINTED_FILE[main]
close
delete empty_for
quit
# EOF

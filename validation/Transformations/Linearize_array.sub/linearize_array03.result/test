
Initial code

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
int main(int argc, char **argv)
{
   unsigned int n;
   float *src1, *src2, *result;
   float alpha;
   n = atoi(argv[1]);
   printf(">>>> %d <<<<\n", n);
   alpha = 0.7;
   do {
      if (posix_memalign((void **) &src1, 32, n*sizeof(float)))
         return 3;
   }
   while (0);
   do {
      if (posix_memalign((void **) &src2, 32, n*sizeof(float)))
         return 3;
   }
   while (0);
   do {
      if (posix_memalign((void **) &result, 32, n*sizeof(float)))
         return 3;
   }
   while (0);

   alphablending(n, src1, src2, result, alpha);

   return (int) (result[0]+result[n-1]);
}

Code after array conversion

void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1-alpha)*src2[i];
}
int main(int argc, char **argv)
{
   unsigned int n;
   float *src1 = 0, *src2 = 0, *result = 0;
   float alpha;
   n = atoi(argv[1]);
   printf(">>>> %d <<<<\n", n);
   alpha = 0.7;
   do {
      if (posix_memalign((void **) &src1, 32, n*sizeof(float)))
         return 3;
   }
   while (0);
   do {
      if (posix_memalign((void **) &src2, 32, n*sizeof(float)))
         return 3;
   }
   while (0);
   do {
      if (posix_memalign((void **) &result, 32, n*sizeof(float)))
         return 3;
   }
   while (0);

   alphablending(n, src1, src2, result, alpha);

   return (int) (result[0]+result[n-1]);
}

Unsplit resulting code


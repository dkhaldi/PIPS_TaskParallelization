
Initial code

void access_counter(unsigned int *hi, unsigned int *lo)
{
   /*
   asm ("rdtsc; movl %%edx,%0; movl %%eax,%1"
   : "=r" (*hi), "=r" (*lo)
   :
   : "%edx", "%eax");
     */
   ;
}
void copy(int w, int h, unsigned char *bytes, unsigned char *dest)
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1)
         dest[j*w+i] = bytes[j*w+i];
}
void curve(int w, int h, unsigned char *bytes, unsigned char *lut)
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         unsigned char current = bytes[j*w+i];
         bytes[j*w+i] = lut[current];
      }
}
double get_counter()
{
   unsigned int ncyc_hi, ncyc_lo;
   unsigned int hi, lo, borrow;

   access_counter(&ncyc_hi, &ncyc_lo);

   lo = ncyc_lo-cyc_lo;
   borrow = lo>ncyc_lo;
   hi = ncyc_hi-cyc_hi-borrow;
   return (double) hi*(1<<30)*4+lo;
}
void light(int w, int h, unsigned char *bytes, unsigned char val)
{
   int i, j;

   for(i = 0; i <= w-1; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         unsigned char current = bytes[j*w+i];
         bytes[j*w+i] = (int) current+val>255?255:current+val;
      }
}
int main(int ac, char *av[])
{
   FILE *in;
   FILE *map;
   FILE *out;
   unsigned char *bytes;
   unsigned char *dest;
   unsigned char *lut;
   int height;
   int width;
   int maxval;
   char c1;
   char c2;
   double t;
   long int i, size;

   if (ac!=4) {
      printf("Usage: light infile.pgm mapfile.amp outfile.pgm\n");
      exit(1);
   }

   in = fopen(av[1], "r");
   if (in==(void *) 0) {
      perror("fopen");
      exit(1);
   }

   map = fopen(av[2], "r");
   if (map==(void *) 0) {
      perror("fopen");
      exit(1);
   }

   fscanf(in, "%c", &c1);
   fscanf(in, "%c", &c2);
   if (c1!='P'||c2!='5') {
      fprintf(stderr, "Error, input file is not PGM\n");
      exit(1);
   }

   fscanf(in, "%d %d", &height, &width);
   fscanf(in, "%d", &maxval);

   printf("w=%d, h=%d, max=%d\n", width, height, maxval);

   size = width*height;

   bytes = (unsigned char *) malloc(sizeof(unsigned char)*size);
   if (bytes==(void *) 0) {
      perror("malloc");
      exit(1);
   }

   dest = (unsigned char *) malloc(sizeof(unsigned char)*size);
   if (dest==(void *) 0) {
      perror("malloc");
      exit(1);
   }

   lut = (unsigned char *) malloc(sizeof(unsigned char)*256);
   if (lut==(void *) 0) {
      perror("malloc");
      exit(1);
   }
   {
      int n = 0;
      unsigned char val;
      while (fread(&val, 1, 1, map)!=0) {
         lut[n] = val;
         n++;
      }
   }

   fseek(in, 1, 1);
   for(i = 0; i <= size-1; i += 1)
      if (fread(bytes+i, 1, 1, in)==0) {
         perror("fread");
         exit(1);
      }
   fclose(in);

   start_counter();
   transfo(width, height, bytes, dest, lut, 5);
   t = get_counter();
   printf("%f clock cycles.\n", t);
   
   
   out = fopen(av[3], "w");
   if (out==(void *) 0) {
      perror("fopen");
      exit(1);
   }
   fprintf(out, "P5\n");
   fprintf(out, "%d %d\n", height, width);
   fprintf(out, "%d\n", maxval);
   for(i = 0; i <= size-1; i += 1)
      if (fwrite(dest+i, 1, 1, out)==-1) {
         perror("fwrite");
         exit(1);
      }
   fclose(out);
}
void start_counter()
{
   access_counter(&cyc_hi, &cyc_lo);
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   copy(w, h, bytes, dest);
   curve(w, h, dest, lut);
   light(w, h, dest, val);
}

Code after transformations to come...

void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1)
            dest[j*w+i] = bytes[j*w+i];
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= w-1; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            current = dest[j*w+i];
            dest[j*w+i] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   //PIPS generated variable
   unsigned char I_4;
   //PIPS generated variable
   int I_5, I_6, I_7;
   //PIPS generated variable
   unsigned char I_8, I_9;
   //PIPS generated variable
   int I_10, I_11, I_12;
   //PIPS generated variable
   unsigned char I_13;
   //PIPS generated variable
   int I_14, I_15, I_16;
   //PIPS generated variable
   char I_17;
   //PIPS generated variable
   int I_18;
   I_0 = w-1;
   int i, j;

   for(i = 0; i <= I_0; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         I_3 = j*w+i;
         dest[I_3] = bytes[I_3];
      }
   {
      int i, j;

      for(i = 0; i <= I_0; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            I_7 = j*w+i;
            current = dest[I_7];
            dest[I_7] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= I_0; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            I_12 = j*w+i;
            current = dest[I_12];
            dest[I_12] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   //PIPS generated variable
   unsigned char I_4;
   //PIPS generated variable
   int I_5, I_6, I_7;
   //PIPS generated variable
   unsigned char I_8, I_9;
   //PIPS generated variable
   int I_10, I_11, I_12;
   //PIPS generated variable
   unsigned char I_13;
   //PIPS generated variable
   int I_14, I_15, I_16;
   //PIPS generated variable
   char I_17;
   //PIPS generated variable
   int I_18;
   I_0 = w-1;
   int i, j;

   for(i = 0; i <= I_0; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         I_3 = j*w+i;
         dest[I_3] = bytes[I_3];
      }
   {
      int i, j;

      for(i = 0; i <= I_0; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            I_7 = j*w+i;
            current = dest[I_7];
            dest[I_7] = lut[current];
         }
   }
   {
      int i, j;

      for(i = 0; i <= I_0; i += 1)
         for(j = 0; j <= h-1; j += 1) {
            unsigned char current;
            I_12 = j*w+i;
            current = dest[I_12];
            dest[I_12] = (int) current+val>255?255:current+val;
         }
   }
}
void transfo(int w, int h, unsigned char *bytes, unsigned char *dest, unsigned char *lut, unsigned char val)
{
   //PIPS generated variable
   int I_0, I_1, I_2, I_3;
   //PIPS generated variable
   unsigned char I_4;
   //PIPS generated variable
   int I_5, I_6, I_7;
   //PIPS generated variable
   unsigned char I_8, I_9;
   //PIPS generated variable
   int I_10, I_11, I_12;
   //PIPS generated variable
   unsigned char I_13;
   //PIPS generated variable
   int I_14, I_15, I_16;
   //PIPS generated variable
   char I_17;
   //PIPS generated variable
   int I_18, i_0, j_0;
   //PIPS generated variable
   unsigned char current_0;
   //PIPS generated variable
   int i_1, j_1;
   //PIPS generated variable
   unsigned char current_1;
   I_0 = w-1;
   int i, j;

   for(i = 0; i <= I_0; i += 1)
      for(j = 0; j <= h-1; j += 1) {
         I_3 = j*w+i;
         dest[I_3] = bytes[I_3];
      }

   for(i_0 = 0; i_0 <= I_0; i_0 += 1)
      for(j_0 = 0; j_0 <= h-1; j_0 += 1) {
         I_7 = j_0*w+i_0;
         current_0 = dest[I_7];
         dest[I_7] = lut[current_0];
      }

   for(i_1 = 0; i_1 <= I_0; i_1 += 1)
      for(j_1 = 0; j_1 <= h-1; j_1 += 1) {
         I_12 = j_1*w+i_1;
         current_1 = dest[I_12];
         dest[I_12] = (int) current_1+val>255?255:current_1+val;
      }
}

Unsplit resulting code


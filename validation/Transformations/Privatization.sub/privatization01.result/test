#
# Code after privatize_module for module PRIVATIZATION01
#
C     Check that j is not privatized in the first loop, but privatized
C     in the second one... However, j is not initialized before its use
C     in the first loop, the value of j does not matter and hence j can
C     be privatized in both loops

C     See also privatization07, 08, 09 and 10

      SUBROUTINE PRIVATIZATION01
      INTEGER A(10)


!$OMP DO PRIVATE(I,J)
      DO I = 1, 10                                                      0011
         J = J+1                                                        0012
         A(I) = J                                                       0013
      ENDDO


!$OMP DO PRIVATE(I,J)
      DO I = 1, 10                                                      0016
         J = 1                                                          0017
         A(I) = J                                                       0018
      ENDDO
      END

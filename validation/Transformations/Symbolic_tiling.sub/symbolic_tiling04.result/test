short alphablend(int n, int m, short alpha, short a[n][m], short b[n][m], short c[n][m])
{
   short i, j;
here:
   for(i = 0; i <= n-1; i += 1)
      for(j = 0; j <= m-1; j += 1)
         a[i][j] = b[i][j]*alpha+c[i][j]*(100-alpha);
}
short alphablend(int n, int m, short alpha, short a[n][m], short b[n][m], short c[n][m])
{
   short i, j;
   //PIPS generated variable
   int I_0, I_1;
#pragma omp parallel for private(i,j)
here:
   for(I_0 = 0; I_0 <= (n-1)/N; I_0 += 1)
#pragma omp parallel for private(j)
      for(I_1 = 0; I_1 <= (m-1)/N; I_1 += 1)
#pragma omp parallel for 
         for(i = I_0*N; i <= pips_min(2, n-1, I_0*N+(N-1)); i += 1)
#pragma omp parallel for 
            for(j = I_1*N; j <= pips_min(2, m-1, I_1*N+(N-1)); j += 1)
               a[i][j] = b[i][j]*alpha+c[i][j]*(100-alpha);
}

//  <a[PHI1][PHI2]-W-MAY-{PHI1+1<=n, PHI2+1<=m}>
//  <b[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m}>
//  <c[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m}>

short alphablend(int n, int m, short alpha, short a[n][m], short b[n][m], short c[n][m])
{
   short i, j;
   //PIPS generated variable
   int I_0, I_1;

//  <a[PHI1][PHI2]-W-MAY-{PHI1+1<=n, PHI2+1<=m}>
//  <b[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m}>
//  <c[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m}>

#pragma omp parallel for private(i,j)
here:
   for(I_0 = 0; I_0 <= (n-1)/N; I_0 += 1)

//  <a[PHI1][PHI2]-W-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0}>
//  <b[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0}>
//  <c[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0}>

#pragma omp parallel for private(j)
      for(I_1 = 0; I_1 <= (m-1)/N; I_1 += 1)

//  <a[PHI1][PHI2]-W-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0, 0<=I_1}>
//  <b[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0, 0<=I_1}>
//  <c[PHI1][PHI2]-R-MAY-{PHI1+1<=n, PHI2+1<=m, 0<=I_0, 0<=I_1}>

#pragma omp parallel for 
         for(i = I_0*N; i <= pips_min(2, n-1, I_0*N+(N-1)); i += 1)

//  <a[PHI1][PHI2]-W-MAY-{PHI1==i, PHI2+1<=m, 0<=I_0, 0<=I_1, i+1<=n}>
//  <b[PHI1][PHI2]-R-MAY-{PHI1==i, PHI2+1<=m, 0<=I_0, 0<=I_1, i+1<=n}>
//  <c[PHI1][PHI2]-R-MAY-{PHI1==i, PHI2+1<=m, 0<=I_0, 0<=I_1, i+1<=n}>

#pragma omp parallel for 
            for(j = I_1*N; j <= pips_min(2, m-1, I_1*N+(N-1)); j += 1)

//  <a[PHI1][PHI2]-W-EXACT-{PHI1==i, PHI2==j, 0<=I_0, 0<=I_1, i+1<=n,
//    j+1<=m}>
//  <b[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=I_0, 0<=I_1, i+1<=n,
//    j+1<=m}>
//  <c[PHI1][PHI2]-R-EXACT-{PHI1==i, PHI2==j, 0<=I_0, 0<=I_1, i+1<=n,
//    j+1<=m}>

               a[i][j] = b[i][j]*alpha+c[i][j]*(100-alpha);
}


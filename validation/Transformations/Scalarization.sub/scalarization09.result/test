
IN regions


//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE, 0<=PHI2,
//    PHI2+1<=SIZE}>

void scalarization09(double A[SIZE], double B[SIZE][SIZE])
{

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE, 0<=PHI2,
//    PHI2+1<=SIZE}>

   // BEGIN BLOCK
   int i, j;

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1+1<=SIZE, 0<=PHI2,
//    PHI2+1<=SIZE}>

   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, i+1<=SIZE, 0<=i}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI2==i, 0<=PHI1, PHI1+1<=SIZE,
//    i+1<=SIZE, 0<=i}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, i+1<=SIZE, j+1<=SIZE, 0<=i, 0<=j}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==j, PHI2==i, i+1<=SIZE, j+1<=SIZE,
//    0<=i, 0<=j}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

OUT regions

void scalarization09(double A[SIZE], double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i, j;
   for(i = 0; i <= SIZE-1; i += 1)
      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==i, i+1<=SIZE, j+2<=SIZE, 0<=i, 0<=j}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

Code after scalarization

void scalarization09(double A[SIZE], double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i, j;
   for(i = 0; i <= SIZE-1; i += 1) {
      // BEGIN BLOCK
      //PIPS generated variable
      register double __scalar__0 = A[i];

      for(j = 0; j <= SIZE-1; j += 1)
         __scalar__0 = B[j][i]+__scalar__0;
      // END BLOCK
   }
   // END BLOCK
}

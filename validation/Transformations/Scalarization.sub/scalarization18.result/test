
IN regions


//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9, SIZE==10}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>

void scalarization18(double A[SIZE], double B[SIZE][SIZE])
{

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9, SIZE==10}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>

   // BEGIN BLOCK
   int i, j;

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9, SIZE==10}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>


   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI2==i, 0<=PHI1, PHI1<=9, SIZE==10,
//    0<=i, i<=9}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9, 0<=j, j<=9}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==j, PHI2==i, SIZE==10, 0<=i, i<=9,
//    0<=j, j<=9}>

         A[i] = B[j][i]+A[i];

//  <A[PHI1]-IN-EXACT-{0<=PHI1, PHI1<=9, SIZE==10}>
//  <B[PHI1][PHI2]-IN-EXACT-{0<=PHI1, PHI1<=9, 0<=PHI2, PHI2<=9,
//    SIZE==10}>


   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI2==i, 0<=PHI1, PHI1<=9, SIZE==10,
//    0<=i, i<=9}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-IN-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9, 0<=j, j<=9}>
//  <B[PHI1][PHI2]-IN-EXACT-{PHI1==j, PHI2==i, SIZE==10, 0<=i, i<=9,
//    0<=j, j<=9}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

OUT regions


//  <A[PHI1]-OUT-EXACT-{PHI1==0, SIZE==10}>

void scalarization18(double A[SIZE], double B[SIZE][SIZE])
{

//  <A[PHI1]-OUT-EXACT-{PHI1==0, SIZE==10}>

   // BEGIN BLOCK
   int i, j;

//  <A[PHI1]-OUT-EXACT-{0<=PHI1, PHI1<=9, SIZE==10}>


   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==i, PHI1<=9, SIZE==10, 0<=i}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9, 0<=j, j<=9}>

         A[i] = B[j][i]+A[i];

//  <A[PHI1]-OUT-EXACT-{PHI1==0, SIZE==10}>


   for(i = 0; i <= SIZE-1; i += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==0, SIZE==10, i==0}>

      for(j = 0; j <= SIZE-1; j += 1)

//  <A[PHI1]-OUT-EXACT-{PHI1==i, SIZE==10, 0<=i, i<=9, i+9j<=81,
//    0<=j}>

         A[i] = B[j][i]+A[i];
   // END BLOCK
}

Code after scalarization

void scalarization18(double A[SIZE], double B[SIZE][SIZE])
{
   // BEGIN BLOCK
   int i, j;

   for(i = 0; i <= SIZE-1; i += 1) {
      // BEGIN BLOCK
      //PIPS generated variable
      register double __scalar__0 = A[i];

      for(j = 0; j <= SIZE-1; j += 1)
         __scalar__0 = B[j][i]+__scalar__0;
      A[i] = __scalar__0;
      // END BLOCK
   }

   for(i = 0; i <= SIZE-1; i += 1) {
      // BEGIN BLOCK
      //PIPS generated variable
      register double __scalar__1 = A[i];

      for(j = 0; j <= SIZE-1; j += 1)
         __scalar__1 = B[j][i]+__scalar__1;
      A[i] = __scalar__1;
      // END BLOCK
   }
   // END BLOCK
}

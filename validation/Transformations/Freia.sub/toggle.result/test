#
# initial main
#
int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;
   freia_data2d *in, *imWork1, *imWork2, *out;
   int i, j;
   int32_t measure_vol;
   
   //time_t nowtime;
   //struct tm *nowtm;
   char tmbuf[64], buf[64];

   freia_initialize(argc, argv);

   freia_common_open_input(&fdin, 0);
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   
   
   
   // input
   freia_common_rx_image(in, &fdin);
   // make a border
   
   
   
   freia_cipo_dilate(imWork1, in, 8, 3);
   freia_cipo_erode(imWork2, in, 8, 3);
   
   
   
   toggleMapping(out, in, imWork1, imWork2);
   
   
   freia_aipo_global_vol(out, &measure_vol);
   
   /* print volume for verification purpose */
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));

   freia_common_tx_image(out, &fdout);
   
   
   // cleanup
   freia_common_destruct_data(in);

   freia_common_destruct_data(imWork1);
   freia_common_destruct_data(imWork2);
   freia_common_destruct_data(out);

   freia_common_close_input(&fdin);
   freia_common_close_output(&fdout);
   freia_shutdown();

   return 0;
}
#
# processed main
#
int main(int argc, char *argv[])
{
   freia_dataio fdin, fdout;
   freia_data2d *in, *imWork1, *imWork2, *out;
   register int i, j;
   int32_t measure_vol;
   
   //time_t nowtime;
   //struct tm *nowtm;
   char tmbuf[64], buf[64];
   //PIPS generated variable
   register freia_status _return0, _return1;
   //PIPS generated variable
   register int i_0, i_1;
   //PIPS generated variable
   freia_data2d *work1, *work2, *mask;
   //PIPS generated variable
   register uint32_t sx, sy, nx, ny;

   freia_initialize(argc, argv);

   freia_common_open_input(&fdin, 0);
   freia_common_open_output(&fdout, 0, fdin.framewidth, fdin.frameheight, fdin.framebpp);

   in = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   imWork1 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   imWork2 = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   out = freia_common_create_data(fdin.framebpp, fdin.framewidth, fdin.frameheight);
   
   
   
   // input
   freia_common_rx_image(in, &fdin);
   // make a border
   
   
   
   
   
   
   
   freia_aipo_dilate_8c(imWork1, in, freia_morpho_kernel_8c);
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);
   freia_aipo_dilate_8c(imWork1, imWork1, freia_morpho_kernel_8c);
   
   
   _return0 = 0;
   
   
   
   
   freia_aipo_erode_8c(imWork2, in, freia_morpho_kernel_8c);
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);
   freia_aipo_erode_8c(imWork2, imWork2, freia_morpho_kernel_8c);
   
   
   _return1 = 0;
   
   
   
   
   work1 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);
   work2 = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);
   mask = freia_common_create_data(in->bpp, in->widthWa, in->heightWa);
   
   
   freia_aipo_sub(work1, imWork1, in);
   freia_aipo_sub(work2, in, imWork2);
   
   /*  take the biggest difference  and create a mask*/
   freia_aipo_sup(mask, work1, work2);
   freia_aipo_sub(mask, work1, mask);
   /*  mask pixels at 0 have biggest difference between imIn and imCompareOver */
   
   
   freia_aipo_threshold(mask, mask, 1, 255, 1);
   /*  binarize */
   /* now select image pixels according to the mask */
   freia_aipo_replace_const(work1, mask, imWork1, 255);

   freia_aipo_replace_const(work2, mask, imWork2, 0);
   freia_aipo_sup(out, work1, work2);

   freia_common_destruct_data(work1);
   freia_common_destruct_data(work2);
   freia_common_destruct_data(mask);
   
   
   freia_aipo_global_vol(out, &measure_vol);
   
   /* print volume for verification purpose */
   printf("volume %d area %g\n", measure_vol, measure_vol/(fdin.framewidth*fdin.frameheight*1.0));

   freia_common_tx_image(out, &fdout);
   
   
   // cleanup
   freia_common_destruct_data(in);

   freia_common_destruct_data(imWork1);
   freia_common_destruct_data(imWork2);
   freia_common_destruct_data(out);

   freia_common_close_input(&fdin);
   freia_common_close_output(&fdout);
   freia_shutdown();

   return 0;
}
#
# compile generated toggle
#

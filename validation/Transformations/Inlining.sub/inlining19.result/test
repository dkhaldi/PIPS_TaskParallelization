
Initial code

void foo(void)
{
   int i;                                                               /*0004*/
   int s = 0;                                                           /*0005*/
   for (i = 0;i<3;i++)                                                  /*0006*/
      s += kernel[i];                                                   /*0007*/
}
void inlining19(void)
{
   foo();                                                               /*0004*/
   foo();                                                               /*0005*/
}

Code after inlining

void foo(void)
{
   int i;                                                               /*0004*/
   int s;                                                               /*0005*/
   s = 0;
   for (i = 0;i<3;i++)                                                  /*0006*/
      s += kernel[i];                                                   /*0007*/
}
void inlining19(void)
{
   {
      int i;                                                            /*0004*/
      /*0004*/
      int s;                                                            /*0005*/
      /*0005*/
      s = 0;                                                            /*0006*/
      for (i = 0;i<3;i++)                                               /*0007*/
         /*0006*/
         s += kernel[i];                                                /*0008*/
      /*0007*/
      ;
   }
   {
      int i;                                                            /*0012*/
      /*0004*/
      int s;                                                            /*0013*/
      /*0005*/
      s = 0;                                                            /*0014*/
      for (i = 0;i<3;i++)                                               /*0015*/
         /*0006*/
         s += kernel[i];                                                /*0016*/
      /*0007*/
      ;
   }
}
extern void foo(void);                                                  /*0001*/
extern void inlining19(void);                                           /*0002*/
//PIPS generated variable
const int kernel[3] = {1, 2, 3};
static const int kernel[3] = {1, 2, 3};                                 /*0001*/
extern void foo(void);                                                  /*0002*/

Code after flattening

void foo(void)
{
   int i;                                                               /*0004*/
   int s;                                                               /*0005*/
   s = 0;
   for (i = 0;i<3;i++)                                                  /*0006*/
      s += kernel[i];                                                   /*0007*/
}
void inlining19(void)
{
   //PIPS generated variable
   int i_0, s_0, i_1, s_1;
   /*0004*/
   /*0005*/
   s_0 = 0;                                                             /*0006*/
   for (i_0 = 0;i_0<3;i_0++)                                            /*0007*/
      /*0006*/
      s_0 += kernel[i_0];                                               /*0008*/
   /*0007*/
   /*0004*/
   /*0005*/
   s_1 = 0;                                                             /*0014*/
   for (i_1 = 0;i_1<3;i_1++)                                            /*0015*/
      /*0006*/
      s_1 += kernel[i_1];                                               /*0016*/
   /*0007*/
   ;
}
extern void foo(void);                                                  /*0001*/
extern void inlining19(void);                                           /*0002*/
//PIPS generated variable
const int kernel[3] = {1, 2, 3};
static const int kernel[3] = {1, 2, 3};                                 /*0001*/
extern void foo(void);                                                  /*0002*/

Unsplit resulting code


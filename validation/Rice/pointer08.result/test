
POINTS TO


// Points To IN: none


// Points To OUT:
// *HEAP*_l_10.tree_list[*] -> *HEAP*_l_12 , MAY
// *HEAP*_l_10.tree_list[*] -> undefined , MAY
// *HEAP*_l_12.tree_list[*] -> undefined , MAY

void pointer08()
{

// Points To: none

   struct tree {
      struct tree *tree_list[10];
   };

// Points To: none

   int i;

// Points To: none

   struct tree *t = (struct tree *) malloc(sizeof(struct tree ));

// Points To:
// *HEAP*_l_10.tree_list[*] -> undefined , EXACT
// t -> *HEAP*_l_10 , MAY

   for(i = 0; i <= 9; i += 1)

// Points To:
// *HEAP*_l_10.tree_list[*] -> *HEAP*_l_12 , MAY
// *HEAP*_l_10.tree_list[*] -> undefined , MAY
// *HEAP*_l_12.tree_list[*] -> undefined , MAY
// t -> *HEAP*_l_10 , MAY

      (t->tree_list)[i] = (struct tree *) malloc(sizeof(struct tree ));

// Points To:
// *HEAP*_l_10.tree_list[*] -> *HEAP*_l_12 , MAY
// *HEAP*_l_10.tree_list[*] -> undefined , MAY
// *HEAP*_l_12.tree_list[*] -> undefined , MAY
// t -> *HEAP*_l_10 , MAY

   // FI: without this statement, we do not get points-to information
   // for "return"....
   i++;

// Points To:
// *HEAP*_l_10.tree_list[*] -> *HEAP*_l_12 , MAY
// *HEAP*_l_10.tree_list[*] -> undefined , MAY
// *HEAP*_l_12.tree_list[*] -> undefined , MAY
// t -> *HEAP*_l_10 , MAY

   return;
}

Proper effects with points-to

void pointer08()
{
//             <    is declared>: tree
   struct tree {
      struct tree *tree_list[10];
   };
//             <    is declared>: i
   int i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: t _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: t
//             <    is declared>: t
   struct tree *t = (struct tree *) malloc(sizeof(struct tree ));
//             <    is written>: i
//             <    is referenced>: i
   for(i = 0; i <= 9; i += 1)
//             <may be written>: *HEAP*_l_10.tree_list[i]
//             <    is read   >: i t _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
//             <    is referenced>: i t
      (t->tree_list)[i] = (struct tree *) malloc(sizeof(struct tree ));
//             <    is read   >: i
//             <    is written>: i
//             <    is referenced>: i
   // FI: without this statement, we do not get points-to information
   // for "return"....
   i++;
   return;
}

 *********************** Use-Def Chains *********************

	09 --> 11 with conflicts
		from <i-WE-EXACT> to <i-RE-EXACT>
	09 --> 12 with conflicts
		from <i-WE-EXACT> to <i-RE-EXACT>
	09 --> 16 with conflicts
		from <i-WE-EXACT> to <i-RE-EXACT>
	10 --> 12 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <t-W-EXACT> to <t-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <t-WE-EXACT> to <t-RE-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	11 --> 16 with conflicts
		from <i-W-EXACT> to <i-W-EXACT>
		from <i-W-EXACT> to <i-R-EXACT>
	12 --> 12 with conflicts
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
		from <*HEAP*_l_10.tree_list[i]-W-MAY> to <*HEAP*_l_10.tree_list[i]-W-MAY>
		from <_MALLOC_EFFECTS:_MALLOC_-W-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-R-EXACT>
		from <_MALLOC_EFFECTS:_MALLOC_-R-EXACT> to <_MALLOC_EFFECTS:_MALLOC_-W-EXACT>
	12 --> 16 with conflicts
		from <i-R-EXACT> to <i-W-EXACT>

****************** End of Dependence Graph ******************

Parallel code

void pointer08()
{
   struct tree {
      struct tree *tree_list[10];
   };
   int i;
   struct tree *t = (struct tree *) malloc(sizeof(struct tree ));
   for(i = 0; i <= 9; i += 1)
      (t->tree_list)[i] = (struct tree *) malloc(sizeof(struct tree ));
   // FI: without this statement, we do not get points-to information
   // for "return"....
   i++;
   return;
}

// DG Before privatization

 **************** Effective Dependence Graph ****************

	39 --> 38 with conflicts
		from <n-R-EXACT> to <n-W-EXACT> at levels  1
	38 --> 39 with conflicts
		from <n-W-EXACT> to <n-R-EXACT> at levels  1 2
	38 --> 38 with conflicts
		from <n-W-EXACT> to <n-W-EXACT> at levels  1
	33 --> 32 with conflicts
		from <m-R-EXACT> to <m-W-EXACT> at levels  1
	32 --> 33 with conflicts
		from <m-W-EXACT> to <m-R-EXACT> at levels  1 2
	32 --> 32 with conflicts
		from <m-W-EXACT> to <m-W-EXACT> at levels  1
	26 --> 25 with conflicts
		from <l-R-EXACT> to <l-W-EXACT> at levels  1
	25 --> 26 with conflicts
		from <l-W-EXACT> to <l-R-EXACT> at levels  1 2
	25 --> 25 with conflicts
		from <l-W-EXACT> to <l-W-EXACT> at levels  1
	19 --> 18 with conflicts
		from <k-R-EXACT> to <k-W-EXACT> at levels  1
	18 --> 19 with conflicts
		from <k-W-EXACT> to <k-R-EXACT> at levels  1 2
	18 --> 18 with conflicts
		from <k-W-EXACT> to <k-W-EXACT> at levels  1

****************** End of Dependence Graph ******************
// DG after privatization

 **************** Effective Dependence Graph ****************

	38 --> 39 with conflicts
		from <n-W-EXACT> to <n-R-EXACT> at levels  2
	32 --> 33 with conflicts
		from <m-W-EXACT> to <m-R-EXACT> at levels  2
	25 --> 26 with conflicts
		from <l-W-EXACT> to <l-R-EXACT> at levels  2
	18 --> 19 with conflicts
		from <k-W-EXACT> to <k-R-EXACT> at levels  2

****************** End of Dependence Graph ******************
//  COARSE_GRAIN_PARALLELIZATION
void for04()
{
   /* Bad use-def chains computation */
   int i, k, l, m = 0, n = 0;
   /* Correct use-def chains computation: no more than one write
        effect per statement */
   //int i,k,l;
   //int m=0;
   //int n=0;
   float x[100];
   
   /* k is not initialized before the loop */
#pragma omp parallel for private(k)
   for(i = 0; i <= 99; i += 1) {
      k = i;
      x[k] = 0.;
   }
   
   /* same loop but l is initialized before the loop */
   l = 0;
#pragma omp parallel for private(l)
   for(i = 0; i <= 99; i += 1) {
      l = i;
      x[l] = 0.;
   }
   
   /* same loop but m is initialized before the loop and was intialized at the declaration */
   m = 0;
#pragma omp parallel for private(m)
   for(i = 0; i <= 99; i += 1) {
      m = i;
      x[m] = 0.;
   }
   
   /* same loop but n is initialized only at the declaration */
#pragma omp parallel for private(n)
   for(i = 0; i <= 99; i += 1) {
      n = i;
      x[n] = 0.;
   }
}

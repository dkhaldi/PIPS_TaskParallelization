#
# file generated by logfile_to_tpips for workspace pips_f2openmp30157
#
delete NS_extract
create NS_extract NS_extract.f
module NS
echo Select the most precise analysis:
activate MUST_REGIONS
activate TRANSFORMERS_INTER_FULL
activate INTERPROCEDURAL_SUMMARY_PRECONDITION
activate PRECONDITIONS_INTER_FULL
activate REGION_CHAINS
activate RICE_FAST_DEPENDENCE_GRAPH

echo Compute the intraprocedural preconditions at the same time as
echo   transformers and use them to improve the accuracy of expression
echo   and statement transformers:
setproperty SEMANTICS_COMPUTE_TRANSFORMERS_IN_CONTEXT TRUE
setproperty SEMANTICS_FIX_POINT_OPERATOR "derivative"
echo Try to restructure the code for more precision:
setproperty UNSPAGHETTIFY_TEST_RESTRUCTURING=TRUE
setproperty UNSPAGHETTIFY_RECURSIVE_DECOMPOSITION=TRUE
echo Privatize scalar variables on all the modules of the program:
apply PRIVATIZE_MODULE[NS]
echo Ask for some statistics about the job to be done:
setproperty PARALLELIZATION_STATISTICS=TRUE
echo Ask for the parallelization of all the modules of the program with OpenMP output:
# Do not use RICE_DATA_DEPENDENCE since it was a hack before the
# PRIVATIZE_MODULE epoch and it generate crazy parallel code:
#activate RICE_DATA_DEPENDENCE
activate PRINT_PARALLELIZEDOMP_CODE
display PARALLELPRINTED_FILE[NS]
echo Consider the generated parallel as the sequential code now:
capply INTERNALIZE_PARALLEL_CODE[NS]
setproperty PRETTYPRINT_SEQUENTIAL_STYLE    "omp"
echo Regenerate the sources from the PIPS transformed code:
apply UNSPLIT
close
delete NS_extract
quit
# EOF

Select some options to deal with the C Language:
Parse as C:
Prettyprint the source as C, of course
Do not display original number lines as comment:
If possible, transform simple for-loops into do-loop à la Fortran, simpler to analyze:
Desugaring other for-loops into plain while-loops fot the time we improve semantics ameliorations in PIPS:
Select the most precise analyses:
Compute the intraprocedural preconditions at the same time as
transformers and use them to improve the accuracy of expression
and statement transformers:
Try to restructure the code for more precision:

Check the proper effects, especially for variable fp and call to fgetc()

void getimage(void)
{
//             <    is declared>: i j
   int i, j;
//             <    is declared>: c
   unsigned char c;
//             <    is referenced>: size_t
//             <    is declared>: fp
   FILE *fp;
//             <    is written>: fp
//             <    is referenced>: fp size_t
   
   /* To try to avoid fp privatization */
   fp = (void *) 0;
//             <    is written>: i
//             <    is referenced>: i
   
   /* This loops should not be distributed.  On 2009/05/26, if the main()
        is removed, this bug too... */
   for(i = 0; i <= 63; i += 1)
//             <    is written>: j
//             <    is referenced>: j
      for(j = 0; j <= 63; j += 1) {
//             <may be read   >: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <may be written>: *ANY_MODULE*:*ANYWHERE* 
//                               __IO_EFFECTS:LUNS[*]
//             <    is referenced>: c fp __IO_EFFECTS:LUNS size_t
         c = fgetc(fp);
//             <    is read   >: c i j
//             <    is written>: imagein_re[i][j]
//             <    is referenced>: c i imagein_re j
         imagein_re[i][j] = c==0?0.0:1.0;
//             <    is read   >: i j
//             <    is written>: imagein_im[i][j]
//             <    is referenced>: i imagein_im j
         imagein_im[i][j] = 0.0;
      }
}

Check the preconditions for function "getimage" which is never called


//  P() {0==-1}

void getimage(void)
{

//  P() {0==-1}

   int i, j;

//  P() {0==-1}

   unsigned char c;

//  P() {0==-1}

   FILE *fp;

//  P() {0==-1}

   
   /* To try to avoid fp privatization */
   fp = (void *) 0;

//  P() {0==-1}

   
   /* This loops should not be distributed.  On 2009/05/26, if the main()
        is removed, this bug too... */
   for(i = 0; i <= 63; i += 1)

//  P() {0==-1}

      for(j = 0; j <= 63; j += 1) {

//  P() {0==-1}

         c = fgetc(fp);

//  P() {0==-1}

         imagein_re[i][j] = c==0?0.0:1.0;

//  P() {0==-1}

         imagein_im[i][j] = 0.0;
      }
}

Clean-up the mess with dead code elimination

void getimage(void)
{
}
Privatize scalar variables on all the modules of the program:
Ask for some statistics about the job to be done:
Ask for the parallelization of all the modules of the program with OpenMP output:
void getimage(void)
{
}
Consider the generated parallel as the sequential code now:

Regenerate the sources from the PIPS transformed code:


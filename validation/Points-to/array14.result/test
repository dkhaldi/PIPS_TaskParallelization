
Points-to for "array14"


// Points To IN: none


// Points To OUT: none

int array14(float b[5][3])
{

// Points To: none

   float c;

// Points To: none

   (*b)[3] = 2.0;

// Points To: none

   c = (*b)[3];

// Points To: none

   b[1][3] = 2.0;

// Points To: none

   c = b[1][3];

// Points To: none


   (*b)[3]++;

// Points To: none

   (*b)[3] += 5.0;

// Points To: none

   b[1][3]++;

// Points To: none

   b[1][3] += 5.0;

// Points To: none


   return 1;
}

Cumulated effects with points-to for "array14"

//             <may be read   >: b[*][3]
//             <may be written>: b[*][3]
int array14(float b[5][3])
{
   float c;
//             <    is written>: b[0][3]
   (*b)[3] = 2.0;
//             <    is read   >: b[0][3]
//             <    is written>: c
   c = (*b)[3];
//             <    is written>: b[1][3]
   b[1][3] = 2.0;
//             <    is read   >: b[1][3]
//             <    is written>: c
   c = b[1][3];
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]

   (*b)[3]++;
//             <    is read   >: b[0][3]
//             <    is written>: b[0][3]
   (*b)[3] += 5.0;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3]++;
//             <    is read   >: b[1][3]
//             <    is written>: b[1][3]
   b[1][3] += 5.0;

   return 1;
}

Points-to for \"main\"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   float a[5][3], ret;

// Points To: none


   ret = array14(a);

// Points To: none


   return (int) ret;
}

Cumulated effects with points-to for \"main\"

int main()
{
   float a[5][3], ret;
//             <may be read   >: a[*][3]
//             <may be written>: a[*][3]
//             <    is written>: ret

   ret = array14(a);
//             <    is read   >: ret

   return (int) ret;
}

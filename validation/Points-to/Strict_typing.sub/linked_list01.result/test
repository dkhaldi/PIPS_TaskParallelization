
Proper effects for "count"

int count(list *p)
{
//             <    is read   >: p
//             <    is written>: q
   list *q = p;
//             <    is written>: i
   int i = 0;
//             <    is read   >: p
   while (p!=(void *) 0)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: i p
//             <    is written>: i p
      p = p->next, i++;
//             <    is read   >: i

   return i;
}

POINTS TO for "count"


// Points To IN:
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1_2__1 , MAY
// _p_1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1.next -> _p_1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1.next -> _p_1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1.next -> _p_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// p -> *NULL* , EXACT

int count(list *p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   list *q = p;

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   int i = 0;

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

   while (p!=(void *) 0)

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// _p_1.next -> *NULL* , MAY
// _p_1.next -> _p_1_2__1 , MAY
// _p_1_2__1.next -> *NULL* , MAY
// _p_1_2__1.next -> _p_1_2__1_2__1 , MAY
// _p_1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1.next -> _p_1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1.next -> _p_1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1.next -> _p_1_2__1_2__1_2__1_2__1_2__1
//     , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1.next -> *NULL* , MAY
// _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1.next -> 
//    _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *ANY_MODULE*:*ANYWHERE*_b1 , MAY
// p -> _p_1 , MAY
// p -> _p_1_2__1 , MAY
// p -> _p_1_2__1_2__1 , MAY
// p -> _p_1_2__1_2__1_2__1 , MAY
// p -> _p_1_2__1_2__1_2__1_2__1 , MAY
// p -> _p_1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> _p_1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// p -> _p_1_2__1_2__1_2__1_2__1_2__1_2__1_2__1 , MAY
// q -> *ANY_MODULE*:*ANYWHERE*_b1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY

      p = p->next, i++;

// Points To:
// *ANY_MODULE*:*ANYWHERE*_b2 -> *ANY_MODULE*:*ANYWHERE*_b0 , MAY
// p -> *NULL* , EXACT
// q -> *ANY_MODULE*:*ANYWHERE*_b1 , MAY
// q -> *NULL* , MAY
// q -> _p_1 , MAY


   return i;
}



Proper effects

void call05(int r, int m, int *x)
{
   int j;
//             <    is read   >: m
//             <    is written>: j

   for(j = 0; j <= m-1; j += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: j m r x
      x[j] = 10*r+j;
}

Cumulated effects

//             <may be read   >: r x
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: m
void call05(int r, int m, int *x)
{
   int j;
//             <may be read   >: j r x
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: m

   for(j = 0; j <= m-1; j += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: j m r x
      x[j] = 10*r+j;
}

Proper effects

int main()
{
//             <    is written>: d1
   int d1 = 4;
//             <    is written>: d2
   int d2 = 4;
//             <    is read   >: d1 d2
   int y[d1][d2];
   int i, j;
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1)
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: d1 d2 i
      call05(i, d2, y[i]);
//             <    is read   >: d1
//             <    is written>: i

   for(i = 0; i <= d1-1; i += 1) {
//             <    is read   >: d1 d2
//             <    is written>: j
      for(j = 0; j <= d2-1; j += 1)
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 d2 i j stdout y[i][j] 
//                               __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
         printf("y[%d][%d] = %d\t", i, j, y[i][j]);
//             <may be read   >: stdout[0]
//             <may be written>: stdout[0]
//             <    is read   >: d1 stdout __IO_EFFECTS:LUNS[1]
//             <    is written>: __IO_EFFECTS:LUNS[1]
      printf("\n");
   }
   return 0;
}

Points-to


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int d1 = 4;

// Points To: none

   int d2 = 4;

// Points To: none

   int y[d1][d2];

// Points To: none

   int i, j;

// Points To: none


   for(i = 0; i <= d1-1; i += 1)

// Points To:
// y[i] -> y[i][0] , EXACT

      call05(i, d2, y[i]);

// Points To:
// y[*] -> y[*][0] , EXACT


   for(i = 0; i <= d1-1; i += 1) {

// Points To:
// y[*] -> y[*][0] , EXACT

      for(j = 0; j <= d2-1; j += 1)

// Points To:
// y[*] -> y[*][0] , EXACT

         printf("y[%d][%d] = %d\t", i, j, y[i][j]);

// Points To:
// y[*] -> y[*][0] , EXACT

      printf("\n");
   }

// Points To:
// y[*] -> y[*][0] , EXACT

   return 0;
}

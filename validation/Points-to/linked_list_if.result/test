
Proper effects for "initialize"

list * initialize()
{
   int *pi, i;
//             <    is written>: l
   list *l = (void *) 0, *nl, al;
//             <    is written>: l
   l = &al;
//             <may be read   >: stdin[0]
//             <may be written>: stdin[0]
//             <    is read   >: stdin __IO_EFFECTS:LUNS[0]
//             <    is written>: __IO_EFFECTS:LUNS[0]
   if (!feof(stdin)) {
//             <may be read   >: stdin[0]
//             <may be written>: i stdin[0]
//             <    is read   >: stdin __IO_EFFECTS:LUNS[0]
//             <    is written>: __IO_EFFECTS:LUNS[0]
      scanf("%d", &i);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: pi _MALLOC_EFFECTS:_MALLOC_
      pi = malloc(sizeof(int));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i pi
      *pi = i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: nl _MALLOC_EFFECTS:_MALLOC_
      nl = malloc(sizeof(list *));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: nl pi
      nl->val = pi;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l nl
      nl->next = l;
//             <    is read   >: nl
//             <    is written>: l
      l = nl;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: nl
      nl = nl->next;
//             <may be read   >: stdin[0]
//             <may be written>: stdin[0]
//             <    is read   >: stdin __IO_EFFECTS:LUNS[0]
//             <    is written>: __IO_EFFECTS:LUNS[0]
      if (!feof(stdin)) {
//             <may be read   >: stdin[0]
//             <may be written>: i stdin[0]
//             <    is read   >: stdin __IO_EFFECTS:LUNS[0]
//             <    is written>: __IO_EFFECTS:LUNS[0]
         scanf("%d", &i);
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: pi _MALLOC_EFFECTS:_MALLOC_
         pi = malloc(sizeof(int));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: i pi
         *pi = i;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: nl _MALLOC_EFFECTS:_MALLOC_
         nl = malloc(sizeof(list *));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: nl pi
         nl->val = pi;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*
//             <    is read   >: l nl
         nl->next = l;
//             <    is read   >: nl
//             <    is written>: l
         l = nl;
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*
//             <    is written>: nl
         nl = nl->next;
      }
   }
//             <    is read   >: l

   return l;
}

POINTS TO for "initialize"


// Points To: none

list * initialize()
{

// Points To: none

   int *pi, i;

// Points To:
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   list *l = (void *) 0, *nl, al;

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *NULL_POINTER* , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   l = &al;

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   if (!feof(stdin)) {

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      scanf("%d", &i);

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

      pi = malloc(sizeof(int));

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      *pi = i;

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      nl = malloc(sizeof(list *));

// Points To:
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *HEAP*_l_19 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      nl->val = pi;

// Points To:
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *HEAP*_l_19 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      nl->next = l;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> al , EXACT
// nl -> *HEAP*_l_19 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      l = nl;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> *HEAP*_l_19 , EXACT
// pi -> *HEAP*_l_17 , EXACT

      nl = nl->next;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> al , EXACT
// pi -> *HEAP*_l_17 , EXACT

      if (!feof(stdin)) {

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> al , EXACT
// pi -> *HEAP*_l_17 , EXACT

         scanf("%d", &i);

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> al , EXACT
// pi -> *HEAP*_l_17 , EXACT

         pi = malloc(sizeof(int));

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> al , EXACT
// pi -> *HEAP*_l_27 , EXACT

         *pi = i;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> al , EXACT
// pi -> *HEAP*_l_27 , EXACT

         nl = malloc(sizeof(list *));

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> *HEAP*_l_29 , EXACT
// pi -> *HEAP*_l_27 , EXACT

         nl->val = pi;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// *HEAP*_l_29.val -> *HEAP*_l_27 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> *HEAP*_l_29 , EXACT
// pi -> *HEAP*_l_27 , EXACT

         nl->next = l;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// *HEAP*_l_29.next -> *HEAP*_l_19 , EXACT
// *HEAP*_l_29.val -> *HEAP*_l_27 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_19 , EXACT
// nl -> *HEAP*_l_29 , EXACT
// pi -> *HEAP*_l_27 , EXACT

         l = nl;

// Points To:
// *HEAP*_l_19.next -> al , EXACT
// *HEAP*_l_19.val -> *HEAP*_l_17 , EXACT
// *HEAP*_l_29.next -> *HEAP*_l_19 , EXACT
// *HEAP*_l_29.val -> *HEAP*_l_27 , EXACT
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_29 , EXACT
// nl -> *HEAP*_l_29 , EXACT
// pi -> *HEAP*_l_27 , EXACT

         nl = nl->next;
      }
   }

// Points To:
// *HEAP*_l_19.next -> al , MAY
// *HEAP*_l_19.val -> *HEAP*_l_17 , MAY
// *HEAP*_l_29.next -> *HEAP*_l_19 , MAY
// *HEAP*_l_29.val -> *HEAP*_l_27 , MAY
// al.next -> *ANY_MODULE*:*NOWHERE*_b1 , EXACT
// al.val -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// l -> *HEAP*_l_29 , MAY
// l -> al , MAY
// l -> *HEAP*_l_19 , MAY
// nl -> al , MAY
// nl -> *HEAP*_l_19 , MAY
// nl -> *ANY_MODULE*:*NOWHERE*_b1 , MAY
// pi -> *HEAP*_l_17 , MAY
// pi -> *HEAP*_l_27 , MAY
// pi -> *ANY_MODULE*:*NOWHERE*_b0 , MAY


   return l;
}


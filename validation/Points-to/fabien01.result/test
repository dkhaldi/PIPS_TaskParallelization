
POINTS-TO


// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   recursive p, q;

// Points To:
// p -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p = (void *) 0;

// Points To:
// p -> *NULL_POINTER* , EXACT
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p = cons(1, p);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p = cons(2, p);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   p = cons(3, p);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   
   
   
   
   
   
   fprintf(stdout, "# p 3 items\n""p->i: %d\n""p->n->i: %d\n""p->n->n->i: %d\n""p->n->n->n: %p\n", p->i, p->n->i, p->n->n->i, p->n->n->n);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*NOWHERE*_b0 , EXACT

   
   // copie inverse de la liste
   q = revcopy(p);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

   
   
   
   
   
   
   
   fprintf(stdout, "# q=revcopy(p)\n""q->i: %d\n""q->n->i: %d\n""q->n->n->i: %d\n""q->n->n->n: %p\n", q->i, q->n->i, q->n->n->i, q->n->n->n);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

   
   // inverse de la liste
   q = reverse(q);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY

   
   
   
   
   
   
   
   fprintf(stdout, "# q=reverse(q)\n""q->i: %d\n""q->n->i: %d\n""q->n->n->i: %d\n""q->n->n->n: %p\n", q->i, q->n->i, q->n->n->i, q->n->n->n);

// Points To:
// p -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY
// q -> *ANY_MODULE*:*ANYWHERE*_b2 , MAY


   return 0;
}

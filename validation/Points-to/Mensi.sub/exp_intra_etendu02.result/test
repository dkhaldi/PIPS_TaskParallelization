
PROPER  EFFECTS 

int main()
{
   MyStruct *root;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: root _MALLOC_EFFECTS:_MALLOC_
   root = malloc(sizeof(MyStruct));
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: root _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   root->next = malloc(sizeof(MyStruct));
//             <    is read   >: root _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(root);
   return 0;
}

POINTS-TO


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   MyStruct *root;

// Points To:
// root -> undefined , EXACT

   root = malloc(sizeof(MyStruct));

// Points To:
// *HEAP*_l_11.next -> undefined , EXACT
// root -> *HEAP*_l_11 , MAY

   root->next = malloc(sizeof(MyStruct));

// Points To:
// *HEAP*_l_11.next -> *HEAP*_l_12 , MAY
// *HEAP*_l_12.next -> undefined , EXACT
// root -> *HEAP*_l_11 , MAY

   free(root);

// Points To:
// root -> undefined , EXACT

   return 0;
}

PROPER EFFECTS WITH POINTS TO

int main()
{
   MyStruct *root;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: root _MALLOC_EFFECTS:_MALLOC_
   root = malloc(sizeof(MyStruct));
//             <may be written>: *HEAP*_l_11.next
//             <    is read   >: root _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   root->next = malloc(sizeof(MyStruct));
//             <    is read   >: root _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(root);
   return 0;
}

Warnings and errors: two memory leaks

INTERPROCEDURAL_POINTS_TO_ANALYSIS[main] (freed_list_to_points_to) Memory leak for bucket "main:*HEAP*_l_12".

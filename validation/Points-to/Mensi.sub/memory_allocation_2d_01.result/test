
PROPER  EFFECTS 

float * * f32matrix(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m
   if (!m)
//             <may be read   >: __func__
      "allocation failure 1 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 1 in f32matrix()\"", "./memory_allocation_2d_01.c", 17, __func__);
//             <    is read   >: m nrl
//             <    is written>: m
   m -= nrl;
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: m ncol nrl nrow 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: m nrl
   if (!m[nrl])
//             <may be read   >: __func__
      "allocation failure 2 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 2 in f32matrix()\"", "./memory_allocation_2d_01.c", 22, __func__);
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b0
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: m ncl nrl
   m[nrl] -= ncl;
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl+1; i <= nrh; i += 1)
//             <may be read   >: *ANY_MODULE*:*ANYWHERE*_b0
//             <may be written>: *ANY_MODULE*:*ANYWHERE*_b0
//             <    is read   >: i m ncol nrh nrl
      m[i] = m[i-1]+ncol;
//             <    is read   >: m
   
   /* return pointer to array of pointers to rows */
   return m;
}

POINTS-TO


// Points To IN: none


// Points To OUT:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// f32matrix -> *HEAP*_l_16[*] , MAY

float * * f32matrix(long int nrl, long int nrh, long int ncl, long int nch)
{

// Points To: none

   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;

// Points To: none

   float **m;

// Points To:
// m -> undefined , EXACT

   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));

// Points To:
// *HEAP*_l_16[*] -> undefined , EXACT
// m -> *HEAP*_l_16[0] , MAY

   if (!m)

// Points To: unreachable

      "allocation failure 1 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 1 in f32matrix()\"", "./memory_allocation_2d_01.c", 17, __func__);

// Points To:
// *HEAP*_l_16[*] -> undefined , EXACT
// m -> *HEAP*_l_16[0] , MAY

   m -= nrl;

// Points To:
// *HEAP*_l_16[*] -> undefined , EXACT
// m -> *HEAP*_l_16[*] , MAY

   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[0] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// m -> *HEAP*_l_16[*] , MAY

   if (!m[nrl])

// Points To: unreachable

      "allocation failure 2 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 2 in f32matrix()\"", "./memory_allocation_2d_01.c", 22, __func__);

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[0] , MAY
// *HEAP*_l_16[*] -> undefined , MAY
// m -> *HEAP*_l_16[*] , MAY

   m[nrl] -= ncl;

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// m -> *HEAP*_l_16[*] , MAY


   for(i = nrl+1; i <= nrh; i += 1)

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// m -> *HEAP*_l_16[*] , MAY

      m[i] = m[i-1]+ncol;

// Points To:
// *HEAP*_l_16[*] -> *HEAP*_l_21[*] , MAY
// m -> *HEAP*_l_16[*] , MAY

   
   /* return pointer to array of pointers to rows */
   return m;
}

PROPER EFFECTS WITH POINTS-TO

float * * f32matrix(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m
   if (!m)
      "allocation failure 1 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 1 in f32matrix()\"", "./memory_allocation_2d_01.c", 17, __func__);
//             <    is read   >: m nrl
//             <    is written>: m
   m -= nrl;
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: m ncol nrl nrow 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
//             <may be read   >: *HEAP*_l_16[*]
//             <    is read   >: m nrl
   if (!m[nrl])
      "allocation failure 2 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 2 in f32matrix()\"", "./memory_allocation_2d_01.c", 22, __func__);
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: m ncl nrl
   m[nrl] -= ncl;
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl+1; i <= nrh; i += 1)
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncol nrh nrl
      m[i] = m[i-1]+ncol;
//             <    is read   >: m
   
   /* return pointer to array of pointers to rows */
   return m;
}

CUMULATED EFFECTS WITH POINTS-TO

//             <    is read   >: nch ncl nrh nrl 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
float * * f32matrix(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m
   if (!m)
      "allocation failure 1 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 1 in f32matrix()\"", "./memory_allocation_2d_01.c", 17, __func__);
//             <    is read   >: m nrl
//             <    is written>: m
   m -= nrl;
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: m ncol nrl nrow 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
//             <may be read   >: *HEAP*_l_16[*]
//             <    is read   >: m nrl
   if (!m[nrl])
      "allocation failure 2 in f32matrix()"?(void) 0:__assert_fail("\"allocation failure 2 in f32matrix()\"", "./memory_allocation_2d_01.c", 22, __func__);
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: m ncl nrl
   m[nrl] -= ncl;
//             <may be read   >: *HEAP*_l_16[*] i m ncol
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl+1; i <= nrh; i += 1)
//             <may be read   >: *HEAP*_l_16[*]
//             <may be written>: *HEAP*_l_16[*]
//             <    is read   >: i m ncol nrh nrl
      m[i] = m[i-1]+ncol;
//             <    is read   >: m
   
   /* return pointer to array of pointers to rows */
   return m;
}

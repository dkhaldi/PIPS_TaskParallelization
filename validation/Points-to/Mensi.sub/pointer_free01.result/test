
INLINING "pointer_free"

int main(void)
{
   pointer p1, p2;
   p1 = malloc(sizeof(int));
   p2 = p1;
   free(p1);

   return 0;
}

POINTS TO for pointer_free01


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// p -> undefined , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   free(p);

// Points To:
// p -> undefined , EXACT

   return;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   pointer p1, p2;

// Points To:
// p1 -> undefined , EXACT
// p2 -> undefined , EXACT

   p1 = malloc(sizeof(int));

// Points To:
// p1 -> *HEAP*_l_4 , MAY
// p2 -> undefined , EXACT

   p2 = p1;

// Points To:
// p1 -> *HEAP*_l_4 , MAY
// p2 -> *HEAP*_l_4 , MAY

   free(p1);

// Points To:
// p1 -> undefined , EXACT
// p2 -> *HEAP*_l_4 , MAY
// p2 -> undefined , MAY


   return 0;
}

PROPER EFFECTS WITH POINTS TO

int main(void)
{
   pointer p1, p2;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   p1 = malloc(sizeof(int));
//             <    is read   >: p1
//             <    is written>: p2
   p2 = p1;
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p1);

   return 0;
}

CUMULATED EFFECTS WITH POINTS TO

//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
int main(void)
{
   pointer p1, p2;
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p1 _MALLOC_EFFECTS:_MALLOC_
   p1 = malloc(sizeof(int));
//             <    is read   >: p1
//             <    is written>: p2
   p2 = p1;
//             <    is read   >: p1 _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   free(p1);

   return 0;
}

Warnings and errors


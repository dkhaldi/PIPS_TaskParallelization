
INLINING "swap"

int main()
{
   int i = 1, j = 2, *pi = &i, *pj = &j;
   {
      //PIPS generated variable
      int **P_0, **P_1;
      P_0 = &pi;
      P_1 = &pj;
      {
         int *pt;
         pt = *P_0;
         *P_0 = *P_1;
         *P_1 = pt;
      }
   }

   return 0;
}

POINTS TO for swap02


// Points To IN:
// _p_1 -> *NULL* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// q -> *NULL* , MAY
// q -> _q_2 , MAY


// Points To OUT:
// _p_1 -> *NULL* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// q -> _q_2 , EXACT

void swap(int **p, int **q)
{

// Points To: none

   int *pt;

// Points To:
// _p_1 -> *NULL* , MAY
// _p_1 -> _p_1_1 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY
// pt -> undefined , EXACT

   pt = *p;

// Points To:
// _p_1 -> *NULL* , MAY
// _p_1 -> _p_1_1 , MAY
// _q_2 -> *NULL* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL* , MAY
// pt -> _p_1_1 , MAY
// q -> *NULL* , MAY
// q -> _q_2 , MAY

   *p = *q;

// Points To:
// _p_1 -> *NULL* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL* , MAY
// _q_2 -> _q_2_2 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   *q = pt;

// Points To:
// _p_1 -> *NULL* , MAY
// _p_1 -> _q_2_2 , MAY
// _q_2 -> *NULL* , MAY
// _q_2 -> _p_1_1 , MAY
// p -> _p_1 , EXACT
// pt -> *NULL* , MAY
// pt -> _p_1_1 , MAY
// q -> _q_2 , EXACT

   return;
}

PROPER EFFECTS WITH POINTS TO

void swap(int **p, int **q)
{
   int *pt;
//             <    is read   >: _p_1 p
//             <    is written>: pt
   pt = *p;
//             <    is read   >: _q_2 p q
//             <    is written>: _p_1
   *p = *q;
//             <    is read   >: pt q
//             <    is written>: _q_2
   *q = pt;
   return;
}

CUMULATED EFFECTS WITH POINTS TO

//             <    is read   >: _p_1 _q_2 p q
//             <    is written>: _p_1 _q_2
void swap(int **p, int **q)
{
   int *pt;
//             <    is read   >: _p_1 p
//             <    is written>: pt
   pt = *p;
//             <    is read   >: _q_2 p q
//             <    is written>: _p_1
   *p = *q;
//             <    is read   >: pt q
//             <    is written>: _q_2
   *q = pt;
   return;
}

POINTS TO for "main"


// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int i = 1, j = 2, *pi = &i, *pj = &j;
   {
      //PIPS generated variable

// Points To:
// pi -> i , EXACT
// pj -> j , EXACT

      int **P_0, **P_1;

// Points To:
// P_0 -> undefined , EXACT
// P_1 -> undefined , EXACT
// pi -> i , EXACT
// pj -> j , EXACT

      P_0 = &pi;

// Points To:
// P_0 -> pi , EXACT
// P_1 -> undefined , EXACT
// pi -> i , EXACT
// pj -> j , EXACT

      P_1 = &pj;
      {

// Points To:
// P_0 -> pi , EXACT
// P_1 -> pj , EXACT
// pi -> i , EXACT
// pj -> j , EXACT

         int *pt;

// Points To:
// P_0 -> pi , EXACT
// P_1 -> pj , EXACT
// pi -> i , EXACT
// pj -> j , EXACT
// pt -> undefined , EXACT

         pt = *P_0;

// Points To:
// P_0 -> pi , EXACT
// P_1 -> pj , EXACT
// pi -> i , EXACT
// pj -> j , EXACT
// pt -> i , EXACT

         *P_0 = *P_1;

// Points To:
// P_0 -> pi , EXACT
// P_1 -> pj , EXACT
// pi -> j , EXACT
// pj -> j , EXACT
// pt -> i , EXACT

         *P_1 = pt;
      }
   }

// Points To:
// pi -> j , EXACT
// pj -> i , EXACT


   return 0;
}
C_PARSER[main] (simplify_C_expression) Variable "i" is probably used before it is defined
C_PARSER[main] (simplify_C_expression) Variable "j" is probably used before it is defined
C_PARSER[main] (simplify_C_expression) Variable "i" is probably used before it is defined
C_PARSER[main] (simplify_C_expression) Variable "j" is probably used before it is defined
(activate_phase) Rule `PRINT_CODE' already active


POINTS TO for conditional_free


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1 , MAY


// Points To OUT:
// p -> *HEAP*_l_10 , MAY
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

void conditional_free(int *p, _Bool c1, _Bool c2, _Bool c3)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   if (c1)

// Points To: none

      p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   if (c2)

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

      free(p);

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   if (c3)

// Points To:
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

      p = (int *) malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_10 , MAY
// p -> *HEAP*_l_8 , MAY
// p -> undefined , MAY
// p -> *NULL* , MAY
// p -> _p_1 , MAY

   return;
}

proper effects with points-to

void conditional_free(int *p, _Bool c1, _Bool c2, _Bool c3)
{
//             <    is read   >: c1
   if (c1)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <    is read   >: c2
   if (c2)
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <    is read   >: c3
   if (c3)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
   return;
}

cumulated  effects with points-to

//             <may be read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c1 c2 c3
void conditional_free(int *p, _Bool c1, _Bool c2, _Bool c3)
{
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: p _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c1
   if (c1)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
//             <may be read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c2
   if (c2)
//             <    is read   >: p _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
      free(p);
//             <may be read   >: _MALLOC_EFFECTS:_MALLOC_
//             <may be written>: p _MALLOC_EFFECTS:_MALLOC_
//             <    is read   >: c3
   if (c3)
//             <    is read   >: _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: p _MALLOC_EFFECTS:_MALLOC_
      p = (int *) malloc(sizeof(int));
   return;
}

Warnigns and errors:

1. Two memory leaks should be indicated;

2. But the current implementation of points_to_function_projection
does not allow it.

INTERPROCEDURAL_POINTS_TO_ANALYSIS[conditional_free] (list_assignment_to_points_to) Heap bucket "*HEAP*_l_8" possibly leaked at line 10.

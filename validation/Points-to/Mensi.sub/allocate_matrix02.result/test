
Points-to for "matrix"


// Points To IN: none


// Points To OUT:
// *HEAP*_l_21[*] -> *HEAP*_l_26[*] , MAY
// matrix_nrc -> *HEAP*_l_21[*] , MAY

float * * matrix_nrc(long int nrl, long int nrh, long int ncl, long int nch)
{

// Points To: none

   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;

// Points To: none

   float **m;

// Points To:
// m -> undefined , EXACT

   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));

// Points To:
// *HEAP*_l_21[*] -> undefined , EXACT
// m -> *HEAP*_l_21[0] , MAY

   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;

// Points To:
// *HEAP*_l_21[*] -> undefined , EXACT
// m -> *HEAP*_l_21[*] , MAY

   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));

// Points To:
// *HEAP*_l_21[*] -> *HEAP*_l_26[0] , MAY
// *HEAP*_l_21[*] -> undefined , MAY
// m -> *HEAP*_l_21[*] , MAY

   //if (!m[nrl]) nrerror("allocation failure 2 in matrix()");
   m[nrl] -= ncl;

// Points To:
// *HEAP*_l_21[*] -> *HEAP*_l_26[*] , MAY
// m -> *HEAP*_l_21[*] , MAY


   for(i = nrl+1; i <= nrh; i += 1)

// Points To:
// *HEAP*_l_21[*] -> *HEAP*_l_26[*] , MAY
// m -> *HEAP*_l_21[*] , MAY

      m[i] = m[i-1]+ncol;

// Points To:
// *HEAP*_l_21[*] -> *HEAP*_l_26[*] , MAY
// m -> *HEAP*_l_21[*] , MAY

   
   /* return pointer to array of pointers to rows */
   return m;
}

Proper effects with points-to for "matrix_nrc"

float * * matrix_nrc(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m nrl
//             <    is written>: m
   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: m ncol nrl nrow 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
//             <may be read   >: *HEAP*_l_21[*]
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: m ncl nrl
   //if (!m[nrl]) nrerror("allocation failure 2 in matrix()");
   m[nrl] -= ncl;
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl+1; i <= nrh; i += 1)
//             <may be read   >: *HEAP*_l_21[*]
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: i m ncol nrh nrl
      m[i] = m[i-1]+ncol;
//             <    is read   >: m
   
   /* return pointer to array of pointers to rows */
   return m;
}

Cumulated effects with points-to for "matrix_nrc"

//             <    is read   >: nch ncl nrh nrl 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
float * * matrix_nrc(long int nrl, long int nrh, long int ncl, long int nch)
{
//             <    is read   >: nch ncl nrh nrl
//             <    is written>: ncol nrow
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
//             <    is read   >: nrow _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: m _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
//             <    is read   >: m nrl
//             <    is written>: m
   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: m ncol nrl nrow 
//                               _MALLOC_EFFECTS:_MALLOC_
//             <    is written>: _MALLOC_EFFECTS:_MALLOC_
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
//             <may be read   >: *HEAP*_l_21[*]
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: m ncl nrl
   //if (!m[nrl]) nrerror("allocation failure 2 in matrix()");
   m[nrl] -= ncl;
//             <may be read   >: *HEAP*_l_21[*] i m ncol
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: nrh nrl
//             <    is written>: i

   for(i = nrl+1; i <= nrh; i += 1)
//             <may be read   >: *HEAP*_l_21[*]
//             <may be written>: *HEAP*_l_21[*]
//             <    is read   >: i m ncol nrh nrl
      m[i] = m[i-1]+ncol;
//             <    is read   >: m
   
   /* return pointer to array of pointers to rows */
   return m;
}

 **** Loop Carried Dependence Graph with Dependence Cones ***

	30 --> 30 with conflicts
		from <*HEAP*_l_21[*]-W-MAY> to <*HEAP*_l_21[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	30 --> 30 with conflicts
		from <*HEAP*_l_21[*]-W-MAY> to <*HEAP*_l_21[*]-R-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****

	30 --> 30 with conflicts
		from <*HEAP*_l_21[*]-R-MAY> to <*HEAP*_l_21[*]-W-MAY> at levels  1
Generating system:
1 Vertex 
(1)
1 Ray 
(1)
End of generating system ****


****************** End of Dependence Graph ******************

Parallel code

float * * matrix_nrc(long int nrl, long int nrh, long int ncl, long int nch)
{
   long int i, nrow = nrh-nrl+1, ncol = nch-ncl+1;
   float **m;
   
   /* allocate pointers to rows */
   m = (float **) malloc((size_t) (nrow*sizeof(float *)));
   //if (!m) nrerror("allocation failure 1 in matrix()");
   m -= nrl;
   
   /* allocate rows and set pointers to them */
   m[nrl] = (float *) malloc((size_t) (nrow*ncol*sizeof(float)));
   //if (!m[nrl]) nrerror("allocation failure 2 in matrix()");
   m[nrl] -= ncl;

   for(i = nrl+1; i <= nrh; i += 1)
      m[i] = m[i-1]+ncol;
   
   /* return pointer to array of pointers to rows */
   return m;
}
(activate_phase) Rule `INTERPROCEDURAL_POINTS_TO_ANALYSIS' already active
(tp_parse) Properties should not be updated during tpips processing. Move the setproperty statement at the beginning of your tpips script.
(tp_parse) Properties should not be updated during tpips processing. Move the setproperty statement at the beginning of your tpips script.


Points-to for "pointer_free"


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY


// Points To OUT:
// p -> undefined , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY

   free(p);

// Points To:
// p -> undefined , EXACT

   return;
}

Points-to for "alloc_pointer"


// Points To IN: none


// Points To OUT:
// alloc_pointer -> *HEAP*_l_8 , MAY

pointer alloc_pointer(int v)
{

// Points To: none

   pointer p = malloc(sizeof(int));

// Points To:
// p -> *HEAP*_l_8 , MAY

   *p = v;

// Points To:
// p -> *HEAP*_l_8 , MAY

   return p;
}

Points-to for "pointer_free"


// Points To IN:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY


// Points To OUT:
// p -> undefined , EXACT

void pointer_free(pointer p)
{

// Points To:
// p -> *NULL* , MAY
// p -> _p_1[0] , MAY

   free(p);

// Points To:
// p -> undefined , EXACT

   return;
}

Points-to for "main"


// Points To IN: none


// Points To OUT: none

int main(void)
{

// Points To: none

   pointer p1, p2;

// Points To:
// p1 -> undefined , EXACT
// p2 -> undefined , EXACT

   
   // could differentiate allocs based on call path?
   p1 = alloc_pointer(13);

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_8 , MAY
// p2 -> undefined , EXACT

   p2 = p1;

// Points To:
// p1 -> alloc_pointer:*HEAP*_l_8 , MAY
// p2 -> alloc_pointer:*HEAP*_l_8 , MAY

   pointer_free(p1);

// Points To:
// p1 -> undefined , EXACT
// p2 -> alloc_pointer:*HEAP*_l_8 , MAY


   return 0;
}

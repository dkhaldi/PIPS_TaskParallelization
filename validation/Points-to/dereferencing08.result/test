
POINTS-TO


// Points To IN: none


// Points To OUT: none

int duck1(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{
   // Here the array "fifi" is cast into an int *, and then an offset is computed
   // zaza points towards fifi[0][3]

// Points To: none

   int *zaza = (int *) fifi+(3-1-0+1)*1;
   // zizi points to fifi[3][0]

// Points To:
// zaza -> fifi[0][3] , EXACT

   int *zizi = (fifi+(3-1-0+1)*1)[0];

// Points To:
// zaza -> fifi[0][3] , EXACT
// zizi -> fifi[3][0] , EXACT

   //foo(fifi+(3-1-0+1)*1);
   /* proper effects are not precise here for loulou because 
        of the internal representation of the expression */
   return *((int *) riri+2) = *(zaza+1)+*((int *) loulou+3+(6-1-0+1)*(0+(size-1-0+1)*0));
}

// Points To IN: none


// Points To OUT: none

int duck2(int riri[10], int fifi[2][3], int size, int loulou[1][size][6])
{

// Points To: none

   int *zaza = (int *) fifi+(3-1-0+1)*1;

// Points To:
// zaza -> fifi[0][3] , EXACT

   return *((int *) riri+2) = *(zaza+1)+*((int *) loulou+(3+(6-1-0+1)*(0+(size-1-0+1)*0)));
}

// Points To IN: none


// Points To OUT: none

int main()
{

// Points To: none

   int riri[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// Points To: none

   int fifi[2][3] = {{10, 11, 12}, {13, 14, 15}};

// Points To: none

   int size = 2;

// Points To: none

   int loulou[1][size][6];

// Points To: none

   int i;

// Points To: none

   int j;

// Points To: none

   int k = 16;

// Points To: none

   for(i = 0; i <= size-1; i += 1)

// Points To: none

      for(j = 0; j <= 5; j += 1)

// Points To: none

         loulou[0][i][j] = k++;

// Points To: none

   printf("%d\n", duck1(riri, fifi, size, loulou));

// Points To: none

   printf("%d\n", duck2(riri, fifi, size, loulou));

// Points To: none

   return 0;
}

int matmul(int a[100][100], int b[100][100], int c[100][100])
{
   int i, j, k;

#pragma omp parallel for private(k, j)
   for(i = 0; i <= 100; i += 1)
      for(j = 0; j <= 100; j += 1)
         for(k = 0; k <= 100; k += 1)
            a[i][j] = a[i][j]+b[i][k]*c[k][j];

   return 0;
}
#include "pipsdef.h"

/*
 * file for paws_openmp.c
 */
int matmul(int a[100][100], int b[100][100], int c[100][100]);

int main(int argc, char *args);
int matmul(int a[100][100], int b[100][100], int c[100][100])
{
   int i, j, k;

#pragma omp parallel for private(k, j)
   for(i = 0; i <= 100; i += 1)
      for(j = 0; j <= 100; j += 1)
         for(k = 0; k <= 100; k += 1)
            a[i][j] = a[i][j]+b[i][k]*c[k][j];

   return 0;
}
int main(int argc, char *args)
{
   int a[100][100], b[100][100], c[100][100];

   matmul(a, b, c);
   
   
   
   return 0;
}

int main(int argc, char *args)
{
   int a[100][100], b[100][100], c[100][100];

   matmul(a, b, c);
   
   
   
   return 0;
}
#include "pipsdef.h"

/*
 * file for paws_openmp.c
 */
int matmul(int a[100][100], int b[100][100], int c[100][100]);

int main(int argc, char *args);
int matmul(int a[100][100], int b[100][100], int c[100][100])
{
   int i, j, k;

#pragma omp parallel for private(k, j)
   for(i = 0; i <= 100; i += 1)
      for(j = 0; j <= 100; j += 1)
         for(k = 0; k <= 100; k += 1)
            a[i][j] = a[i][j]+b[i][k]*c[k][j];

   return 0;
}
int main(int argc, char *args)
{
   int a[100][100], b[100][100], c[100][100];

   matmul(a, b, c);
   
   
   
   return 0;
}


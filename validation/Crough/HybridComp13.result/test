
Initial code

      PROGRAM HYBRIDCOMP13
      INTEGER I
      INTEGER J
      REAL*8 A(5, 5)
      REAL*8 CST(5)
      CST(1) = 1.0
      CST(2) = 2.0
      CST(3) = 3.0
      CST(4) = 4.0
      CST(5) = 5.0
      DO 10 I = 1, 5
         DO J = 1, 5
            A(I,J) = CST(I)*2.4E38
         ENDDO
10       CONTINUE
      DO I = 1, 5
         DO J = 1, 5
            WRITE (*, 100) A(I,J)
100         FORMAT(D19.12)
         ENDDO
      ENDDO
      END

Code after outlining

      PROGRAM HYBRIDCOMP13
      INTEGER I
      INTEGER J
      REAL*8 A(5, 5)
      REAL*8 CST(5)
      CST(1) = 1.0
      CST(2) = 2.0
      CST(3) = 3.0
      CST(4) = 4.0
      CST(5) = 5.0
      CALL TOTO(A, CST)
      DO I = 1, 5
         DO J = 1, 5
            WRITE (*, 100) A(I,J)
100         FORMAT(D19.12)
         ENDDO
      ENDDO
      END
/* C pretty print for module TOTO. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
toto_ (double a[5][5], double cst[5])
{
  int j;
  int i;

  for (i = 1; i <= 5; i++)
    {
      for (j = 1; j <= 5; j++)
	{
	  a[j - 1][i - 1] = (cst[i - 1] * 2.4e38);
	}
      continue;
    }
  return;
}

unsplit


compiles pgm from fortran files and executes

 0.240000008553D+39
 0.240000008553D+39
 0.240000008553D+39
 0.240000008553D+39
 0.240000008553D+39
 0.480000017106D+39
 0.480000017106D+39
 0.480000017106D+39
 0.480000017106D+39
 0.480000017106D+39
 0.720000025658D+39
 0.720000025658D+39
 0.720000025658D+39
 0.720000025658D+39
 0.720000025658D+39
 0.960000034211D+39
 0.960000034211D+39
 0.960000034211D+39
 0.960000034211D+39
 0.960000034211D+39
 0.120000004276D+40
 0.120000004276D+40
 0.120000004276D+40
 0.120000004276D+40
 0.120000004276D+40

compiles pgm from fortran and C files and executes

 0.240000000000D+39
 0.240000000000D+39
 0.240000000000D+39
 0.240000000000D+39
 0.240000000000D+39
 0.480000000000D+39
 0.480000000000D+39
 0.480000000000D+39
 0.480000000000D+39
 0.480000000000D+39
 0.720000000000D+39
 0.720000000000D+39
 0.720000000000D+39
 0.720000000000D+39
 0.720000000000D+39
 0.960000000000D+39
 0.960000000000D+39
 0.960000000000D+39
 0.960000000000D+39
 0.960000000000D+39
 0.120000000000D+40
 0.120000000000D+40
 0.120000000000D+40
 0.120000000000D+40
 0.120000000000D+40

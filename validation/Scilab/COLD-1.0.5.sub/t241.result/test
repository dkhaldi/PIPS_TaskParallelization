int main(int argc, char *argv[])
{
   scilab_rt_init(argc, argv, 0);
   
   /*  t241.sce - from mcgill/nb3d_function.sce */
   scilab_rt_tic__();
   double _u_V[30][3];
   double _u_R[30][3];
   nb3d__d2d2(30, 3, _u_V, 30, 3, _u_R);
   double _u_elapsedTime = scilab_rt_toc__();
   /* disp("Elapsed Time: "); */
   /* disp(elapsedTime); */
   scilab_rt_disp_s0_("Mean value of matrix V: ");
   double _tmpxx0;
   scilab_rt_mean_d2_d0(30, 3, _u_V, &_tmpxx0);
   scilab_rt_disp_d0_(_tmpxx0);
   scilab_rt_disp_s0_("Mean value of matrix R: ");
   double _tmpxx1;
   scilab_rt_mean_d2_d0(30, 3, _u_R, &_tmpxx1);
   scilab_rt_disp_d0_(_tmpxx1);

   scilab_rt_terminate();
}
void nb3d__d2d2(int _u_V_n0, int _u_V_n1, double _u_V[_u_V_n0][_u_V_n1], int _u_R_n0, int _u_R_n1, double _u_R[_u_R_n0][_u_R_n1])
{
   int _u_scale = 1;
   double _tmpxx2 = pow(_u_scale, 0.4);
   int _u_n = round(_tmpxx2*30);
   //PIPS generated variable
   int _u_i_0;
   //PIPS generated variable
   int _u_i_1;
   //PIPS generated variable
   int __tri0, _u_i_2, _u_i_3, __tri2;
   //PIPS generated variable
   double _u_t, _u_r[30][30][3], _u_rt[30][30], _tmpxx27[1][30], _u_MM[30][30], _u_f[30][30], _u_mn[1][30][3], _tmpxx41[30][3], _tmpxx43[30][3];
   //PIPS generated variable
   int _u_z;
   //PIPS generated variable
   int _u_i_5;
   //PIPS generated variable
   int _u_i_6, _u_i_7, _u_i_8;
   //PIPS generated variable
   int _u_i_9;
   //PIPS generated variable
   int _u_i_10;
   //PIPS generated variable
   int _u_i_14;
   //PIPS generated variable
   int _u_i_15;
   //PIPS generated variable
   int _u_i_16;
   //PIPS generated variable
   int _u_i_17;
   _u_n = 30;
   double _u_dT = 0.5*0.0833;
   double _tmpxx3 = 0.5*32.4362;
   double _tmpxx4 = sqrt(_u_scale);
   double _u_T = _tmpxx3*_tmpxx4;
   double _u_seed = 0.1;
   int _tmpxx5 = _u_n*3;
   _u_seed = _u_seed+_tmpxx5;
   (int) _u_n==_u_R_n0&&(int) 3==_u_R_n1?(void) 0:__assert_fail("(int)_u_n == _u_R_n0 && (int)3 == _u_R_n1", ".t241.tmp/t241.c", 32, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= _u_R_n0-1; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= _u_R_n1-1; __lv2 += 1)
         _u_R[__lv1][__lv2] = (double) 0.0;
   }
   for(_u_i_0 = 1; _u_i_0 <= _u_n; _u_i_0 += 1) {
      //PIPS generated variable
      double _tmpxx10, _tmpxx11, _tmpxx6, _tmpxx7, _tmpxx8, _tmpxx9;
      //PIPS generated variable
      int _u_j_0;
      for(_u_j_0 = 1; _u_j_0 <= 3; _u_j_0 += 1) {
         _tmpxx6 = fmod(_u_seed, 1);
         _u_R[_u_i_0-1][_u_j_0-1] = _tmpxx6;
         _tmpxx7 = _u_R[_u_i_0-1][_u_j_0-1];
         _tmpxx8 = sqrt(100);
         _tmpxx9 = _tmpxx7*_tmpxx8;
         _tmpxx10 = _u_seed+_tmpxx9;
         _tmpxx11 = sqrt(2);
         _u_seed = _tmpxx10+_tmpxx11;
      }
   }
   double _tmpxx12[30][3];
   _u_R_n0==30&&_u_R_n1==3?(void) 0:__assert_fail("_u_R_n0 == 30 && _u_R_n1 == 3", ".t241.tmp/t241.c", 46, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 2; __lv2 += 1)
         _tmpxx12[__lv1][__lv2] = _u_R[__lv1][__lv2]*1000.23;
   }
   30==_u_R_n0&&3==_u_R_n1?(void) 0:__assert_fail("30 == _u_R_n0 && 3 == _u_R_n1", ".t241.tmp/t241.c", 48, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= _u_R_n0-1; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= _u_R_n1-1; __lv2 += 1)
         _u_R[__lv1][__lv2] = _tmpxx12[__lv1][__lv2];
   }
   _u_seed = 0.9;
   int _tmpxx13 = _u_n*1;
   _u_seed = _u_seed+_tmpxx13;
   double _u_m[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t241.tmp/t241.c", 53, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_m[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(_u_i_1 = 1; _u_i_1 <= _u_n; _u_i_1 += 1) {
      //PIPS generated variable
      double _tmpxx14, _tmpxx15, _tmpxx16, _tmpxx17, _tmpxx18, _tmpxx19;
      _tmpxx14 = fmod(_u_seed, 1);
      _u_m[_u_i_1-1][1-1] = _tmpxx14;
      _tmpxx15 = _u_m[_u_i_1-1][1-1];
      _tmpxx16 = sqrt(100);
      _tmpxx17 = _tmpxx15*_tmpxx16;
      _tmpxx18 = _u_seed+_tmpxx17;
      _tmpxx19 = sqrt(2);
      _u_seed = _tmpxx18+_tmpxx19;
   }
#pragma omp parallel for
   for(_u_i_1 = 1; _u_i_1 <= _u_n; _u_i_1 += 1)
      1+1;
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      register double _tmpxx20_0;
      _tmpxx20_0 = _u_m[__lv1][0]*(double) 345;
      _u_m[__lv1][0] = _tmpxx20_0;
   }
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_F[30][3];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)3 == 3", ".t241.tmp/t241.c", 71, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 2; __lv2 += 1)
         _u_F[__lv1][__lv2] = (double) 0.0;
   }
   (int) _u_n==_u_V_n0&&(int) 3==_u_V_n1?(void) 0:__assert_fail("(int)_u_n == _u_V_n0 && (int)3 == _u_V_n1", ".t241.tmp/t241.c", 73, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= _u_V_n0-1; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= _u_V_n1-1; __lv2 += 1)
         _u_V[__lv1][__lv2] = (double) 0.0;
   }
   double _u_G = 1E-11;
#pragma omp parallel for
   for(__tri0 = 0; __tri0 <= 29; __tri0 += 1) {
      //PIPS generated variable
      register int _u_vno_0;
      _u_vno_0 = 1+__tri0*1;
      _u_vno_0;
   }
   for(__lv2 = 0; __lv2 <= 29; __lv2 += 1)
      __lv1 = 0+1;
   int _u_ii[30][30];
   int _u_jj[30][30];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 29; __lv2 += 1) {
         //PIPS generated variable
         register double _tmpxx22_0, _tmpxx21_0;
         _tmpxx21_0 = (double) 1.0;
         round(_tmpxx21_0);
         _tmpxx22_0 = (double) 1.0;
         round(_tmpxx22_0);
      }
   }
#pragma omp parallel for
   for(_u_i_2 = 1; _u_i_2 <= 30; _u_i_2 += 1) {
      //PIPS generated variable
      int _u_j_2;
      for(_u_j_2 = 1; _u_j_2 <= 30; _u_j_2 += 1)
         _u_ii[_u_i_2-1][_u_j_2-1] = _u_j_2;
   }
#pragma omp parallel for
   for(_u_i_3 = 1; _u_i_3 <= 30; _u_i_3 += 1) {
      //PIPS generated variable
      int _u_j_3;
      for(_u_j_3 = 1; _u_j_3 <= 30; _u_j_3 += 1)
         _u_jj[_u_i_3-1][_u_j_3-1] = _u_i_3;
   }
   int _u_kk[1][30];
#pragma omp parallel for
   for(__tri2 = 0; __tri2 <= 29; __tri2 += 1) {
      //PIPS generated variable
      register int _tmpxx24_0, _tmpxx23_0;
      _tmpxx24_0 = 0+__tri2*1;
      _tmpxx23_0 = 1+__tri2*30;
      _u_kk[0][__tri2] = _tmpxx23_0+_tmpxx24_0;
   }
   __lv1 = 0+1;
   double _u_dr[30][30][3];
   (int) _u_n==30&&(int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)_u_n == 30 && (int)3 == 3", ".t241.tmp/t241.c", 110, __func__);
   double _u_fr[30][30][3];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 29; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1) {
            _u_dr[__lv1][__lv2][__lv3] = (double) 0.0;
            _u_fr[__lv1][__lv2][__lv3] = (double) 0.0;
         }
      }
   }
   (int) _u_n==30&&(int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)_u_n == 30 && (int)3 == 3", ".t241.tmp/t241.c", 112, __func__);
   double _u_a[30][3];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)3 == 3", ".t241.tmp/t241.c", 114, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 2; __lv2 += 1)
         _u_a[__lv1][__lv2] = (double) 0.0;
   }
   _u_t = 1;
   while (_u_t<=_u_T) {
#pragma omp parallel for
      for(_u_z = 1; _u_z <= 3; _u_z += 1) {
         //PIPS generated variable
         int _u_i_4;
         for(_u_i_4 = 1; _u_i_4 <= 30; _u_i_4 += 1) {
            //PIPS generated variable
            int _u_j_4;
            for(_u_j_4 = 1; _u_j_4 <= 30; _u_j_4 += 1) {
               //PIPS generated variable
               double _tmpxx25;
               _tmpxx25 = _u_R[_u_jj[_u_i_4-1][_u_j_4-1]-1][_u_z-1]-_u_R[_u_ii[_u_i_4-1][_u_j_4-1]-1][_u_z-1];
               _u_dr[_u_i_4-1][_u_j_4-1][_u_z-1] = _tmpxx25;
            }
         }
      }
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= 29; __lv2 += 1) {
            //PIPS generated variable
            int __lv3;
            for(__lv3 = 0; __lv3 <= 2; __lv3 += 1) {
               //PIPS generated variable
               register double _u_dr_0 = _u_dr[__lv1][__lv2][__lv3];
               _u_r[__lv1][__lv2][__lv3] = _u_dr_0*_u_dr_0;
            }
         }
      }
      (int) _u_n==30&&(int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)_u_n == 30", ".t241.tmp/t241.c", 127, __func__);
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= 29; __lv2 += 1)
            _u_rt[__lv1][__lv2] = (double) 1.0;
      }
#pragma omp parallel for
      for(_u_i_5 = 1; _u_i_5 <= 30; _u_i_5 += 1) {
         //PIPS generated variable
         int _u_j_5;
         for(_u_j_5 = 1; _u_j_5 <= 30; _u_j_5 += 1) {
            //PIPS generated variable
            double _tmpxx26;
            _tmpxx26 = _u_r[_u_i_5-1][_u_j_5-1][0]+_u_r[_u_i_5-1][_u_j_5-1][1]+_u_r[_u_i_5-1][_u_j_5-1][2];
            _u_rt[_u_i_5-1][_u_j_5-1] = _tmpxx26;
         }
      }
      for(_u_i_6 = 1; _u_i_6 <= 30; _u_i_6 += 1) {
         //PIPS generated variable
         register int _u_kk_0 = _u_kk[0][_u_i_6-1];
         _u_rt[(_u_kk_0-1)%30][(_u_kk_0-1)/30] = 1.0;
      }
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         _tmpxx27[0][__lv1] = _u_m[__lv1][0];
      __lv2 = 0+1;
      scilab_rt_mul_d2d2_d2(30, 1, _u_m, 1, 30, _tmpxx27, 30, 30, _u_MM);
      for(_u_i_7 = 1; _u_i_7 <= 30; _u_i_7 += 1) {
         //PIPS generated variable
         register int _u_kk_1 = _u_kk[0][_u_i_7-1];
         _u_MM[(_u_kk_1-1)%30][(_u_kk_1-1)/30] = 0.0;
      }
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= 29; __lv2 += 1) {
            //PIPS generated variable
            register double _u_rt_0 = _u_rt[__lv1][__lv2], _tmpxx29_0, _tmpxx28_0;
            _tmpxx28_0 = _u_MM[__lv1][__lv2]/_u_rt_0;
            _u_f[__lv1][__lv2] = _u_G*_tmpxx28_0;
            _tmpxx29_0 = sqrt(_u_rt_0);
            _u_rt_0 = _tmpxx29_0;
            _u_rt[__lv1][__lv2] = _u_rt_0;
         }
      }
#pragma omp parallel for
      for(_u_i_8 = 1; _u_i_8 <= 30; _u_i_8 += 1) {
         //PIPS generated variable
         int _u_j_6;
         for(_u_j_6 = 1; _u_j_6 <= 30; _u_j_6 += 1) {
            //PIPS generated variable
            register double _u_dr_1 = _u_dr[_u_i_8-1][_u_j_6-1][0];
            //PIPS generated variable
            double _tmpxx30, _tmpxx33;
            _tmpxx30 = _u_dr_1/_u_rt[_u_i_8-1][_u_j_6-1];
            _u_dr_1 = _tmpxx30;
            _tmpxx33 = _u_f[_u_i_8-1][_u_j_6-1]*_u_dr_1;
            _u_fr[_u_i_8-1][_u_j_6-1][0] = _tmpxx33;
            _u_dr[_u_i_8-1][_u_j_6-1][0] = _u_dr_1;
         }
      }
#pragma omp parallel for
      for(_u_i_9 = 1; _u_i_9 <= 30; _u_i_9 += 1) {
         //PIPS generated variable
         int _u_j_7;
         for(_u_j_7 = 1; _u_j_7 <= 30; _u_j_7 += 1) {
            //PIPS generated variable
            register double _u_dr_2 = _u_dr[_u_i_9-1][_u_j_7-1][1];
            //PIPS generated variable
            double _tmpxx31, _tmpxx34;
            _tmpxx31 = _u_dr_2/_u_rt[_u_i_9-1][_u_j_7-1];
            _u_dr_2 = _tmpxx31;
            _tmpxx34 = _u_f[_u_i_9-1][_u_j_7-1]*_u_dr_2;
            _u_fr[_u_i_9-1][_u_j_7-1][1] = _tmpxx34;
            _u_dr[_u_i_9-1][_u_j_7-1][1] = _u_dr_2;
         }
      }
      /* dr(:, :, 3) = dr(:, :, 3) ./ r; */
#pragma omp parallel for
      for(_u_i_10 = 1; _u_i_10 <= 30; _u_i_10 += 1) {
         //PIPS generated variable
         int _u_j_8;
         for(_u_j_8 = 1; _u_j_8 <= 30; _u_j_8 += 1) {
            //PIPS generated variable
            register double _u_dr_3 = _u_dr[_u_i_10-1][_u_j_8-1][2];
            //PIPS generated variable
            double _tmpxx32, _tmpxx35;
            _tmpxx32 = _u_dr_3/_u_rt[_u_i_10-1][_u_j_8-1];
            _u_dr_3 = _tmpxx32;
            _tmpxx35 = _u_f[_u_i_10-1][_u_j_8-1]*_u_dr_3;
            _u_fr[_u_i_10-1][_u_j_8-1][2] = _tmpxx35;
            _u_dr[_u_i_10-1][_u_j_8-1][2] = _u_dr_3;
         }
      }
      (int) _u_n==30?(void) 0:__assert_fail("(int)1 == 1 && (int)_u_n == 30 && (int)3 == 3", ".t241.tmp/t241.c", 190, __func__);
#pragma omp parallel for
      for(__lv2 = 0; __lv2 <= 29; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1)
            _u_mn[0][__lv2][__lv3] = (double) 0.0;
      }
      __lv1 = 0+1;

      scilab_rt_mean_d3s0_d3(30, 30, 3, _u_fr, "m", 1, 30, 3, _u_mn);
#pragma omp parallel for
      for(_u_i_14 = 1; _u_i_14 <= 30; _u_i_14 += 1) {
         //PIPS generated variable
         int _u_j_12;
         for(_u_j_12 = 1; _u_j_12 <= 3; _u_j_12 += 1) {
            //PIPS generated variable
            double _tmpxx36;
            _tmpxx36 = _u_mn[0][_u_i_14-1][_u_j_12-1]*_u_n;
            _u_F[_u_i_14-1][_u_j_12-1] = _tmpxx36;
         }
      }
#pragma omp parallel for
      for(_u_i_15 = 1; _u_i_15 <= 30; _u_i_15 += 1) {
         //PIPS generated variable
         double _tmpxx37;
         _tmpxx37 = _u_F[_u_i_15-1][0]/_u_m[_u_i_15-1][0];
         _u_a[_u_i_15-1][0] = _tmpxx37;
      }
      /*      a(:, 2) = F(:, 2) ./ m; */
#pragma omp parallel for
      for(_u_i_16 = 1; _u_i_16 <= 30; _u_i_16 += 1) {
         //PIPS generated variable
         double _tmpxx38;
         _tmpxx38 = _u_F[_u_i_16-1][1]/_u_m[_u_i_16-1][0];
         _u_a[_u_i_16-1][1] = _tmpxx38;
      }
#pragma omp parallel for
      for(_u_i_17 = 1; _u_i_17 <= 30; _u_i_17 += 1) {
         //PIPS generated variable
         double _tmpxx39;
         _tmpxx39 = _u_F[_u_i_17-1][2]/_u_m[_u_i_17-1][0];
         _u_a[_u_i_17-1][2] = _tmpxx39;
      }
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= 2; __lv2 += 1) {
            //PIPS generated variable
            register double _tmpxx40_0;
            _tmpxx40_0 = _u_a[__lv1][__lv2]*_u_dT;
            _tmpxx41[__lv1][__lv2] = _u_V[__lv1][__lv2]+_tmpxx40_0;
         }
      }
      _u_V_n0==30&&_u_V_n1==3?(void) 0:__assert_fail("_u_V_n0 == 30 && 30 == 30 && _u_V_n1 == 3 && 3 == 3", ".t241.tmp/t241.c", 215, __func__);
      30==_u_V_n0&&3==_u_V_n1?(void) 0:__assert_fail("30 == _u_V_n0 && 3 == _u_V_n1", ".t241.tmp/t241.c", 217, __func__);
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= _u_V_n0-1; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= _u_V_n1-1; __lv2 += 1)
            _u_V[__lv1][__lv2] = _tmpxx41[__lv1][__lv2];
      }
      _u_V_n0==30&&_u_V_n1==3?(void) 0:__assert_fail("_u_V_n0 == 30 && _u_V_n1 == 3", ".t241.tmp/t241.c", 219, __func__);
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= 2; __lv2 += 1) {
            //PIPS generated variable
            register double _tmpxx42_0;
            _tmpxx42_0 = _u_V[__lv1][__lv2]*_u_dT;
            _tmpxx43[__lv1][__lv2] = _u_R[__lv1][__lv2]+_tmpxx42_0;
         }
      }
      _u_R_n0==30&&_u_R_n1==3?(void) 0:__assert_fail("_u_R_n0 == 30 && 30 == 30 && _u_R_n1 == 3 && 3 == 3", ".t241.tmp/t241.c", 221, __func__);
      30==_u_R_n0&&3==_u_R_n1?(void) 0:__assert_fail("30 == _u_R_n0 && 3 == _u_R_n1", ".t241.tmp/t241.c", 223, __func__);
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= _u_R_n0-1; __lv1 += 1) {
         //PIPS generated variable
         int __lv2;
         for(__lv2 = 0; __lv2 <= _u_R_n1-1; __lv2 += 1)
            _u_R[__lv1][__lv2] = _tmpxx43[__lv1][__lv2];
      }
      _u_t += _u_dT;
   }
}

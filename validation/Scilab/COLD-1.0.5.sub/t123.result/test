int main(int argc, char *argv[])
{
   //PIPS generated variable
   int j, i_0, i_1;
   scilab_rt_init(argc, argv, 0);
   
   /*  t123.sce: Test 3D matrices multiplication, division and elementwise multiplication and division */
   double _u_a[3][2][3];
   double _u_b[3][2][3];
   int _u_c = 2;
   double _u_d = 1.;
   scilab_rt_disp_s0_("multiplication by a scalar");
   double _tmp0[3][2][3];
   double _tmp1[3][2][3];
   double _tmp2[3][2][3];
   double _tmp3[3][2][3];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 2; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 1; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1) {
            //PIPS generated variable
            register double _u_a_0;
            _u_a_0 = (double) 1.0;
            _u_b[__lv1][__lv2][__lv3] = (double) 1.0;
            _tmp0[__lv1][__lv2][__lv3] = _u_a_0*(double) _u_c;
            _tmp1[__lv1][__lv2][__lv3] = (double) _u_c*_u_a_0;
            _tmp2[__lv1][__lv2][__lv3] = _u_a_0*_u_d;
            _tmp3[__lv1][__lv2][__lv3] = _u_d*_u_a_0;
            _u_a[__lv1][__lv2][__lv3] = _u_a_0;
         }
      }
   }

#pragma omp parallel for
   for(j = 0; j <= 1; j += 1) {
      //PIPS generated variable
      int k_0;
      for(k_0 = 0; k_0 <= 2; k_0 += 1)
         _u_b[1][j][k_0] = 10;
   }

#pragma omp parallel for
   for(i_0 = 0; i_0 <= 2; i_0 += 1) {
      //PIPS generated variable
      int k_1;
      for(k_1 = 0; k_1 <= 2; k_1 += 1)
         _u_b[i_0][1][k_1] = 20;
   }

#pragma omp parallel for
   for(i_1 = 0; i_1 <= 2; i_1 += 1)
      _u_b[i_1][1][2] = 30;
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp0);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp1);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp2);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp3);
   double _tmp4[3][2][3];
   double _tmp5[3][2][3];
   double _tmp6[3][2][3];
   double _tmp7[3][2][3];
   double _tmp8[3][2][3];
   double _tmp9[3][2][3];
   double _tmp10[3][2][3];
   double _tmp11[3][2][3];
   double _tmp12[3][2][3];
   double _tmp13[3][2][3];
   double _tmp14[3][2][3];
   double _tmp15[3][2][3];
   double _tmp16[3][2][3];
   double _tmp17[3][2][3];
   double _tmp18[3][2][3];
   double _tmp19[3][2][3];
   double _tmp20[3][2][3];
   double _tmp21[3][2][3];
   double _tmp22[3][2][3];
   double _tmp23[3][2][3];
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 2; __lv1 += 1) {
      //PIPS generated variable
      int __lv2;
      for(__lv2 = 0; __lv2 <= 1; __lv2 += 1) {
         //PIPS generated variable
         int __lv3;
         for(__lv3 = 0; __lv3 <= 2; __lv3 += 1) {
            //PIPS generated variable
            register double _u_a_1 = _u_a[__lv1][__lv2][__lv3], _u_b_0 = _u_b[__lv1][__lv2][__lv3];
            _tmp4[__lv1][__lv2][__lv3] = _u_b_0*(double) _u_c;
            _tmp5[__lv1][__lv2][__lv3] = (double) _u_c*_u_b_0;
            _tmp6[__lv1][__lv2][__lv3] = _u_b_0*_u_d;
            _tmp7[__lv1][__lv2][__lv3] = _u_d*_u_b_0;
            _tmp8[__lv1][__lv2][__lv3] = _u_a_1/((double) _u_c);
            _tmp9[__lv1][__lv2][__lv3] = _u_a_1/_u_d;
            _tmp10[__lv1][__lv2][__lv3] = _u_b_0/((double) _u_c);
            _tmp11[__lv1][__lv2][__lv3] = _u_b_0/_u_d;
            _tmp12[__lv1][__lv2][__lv3] = _u_a_1*(double) _u_c;
            _tmp13[__lv1][__lv2][__lv3] = (double) _u_c*_u_a_1;
            _tmp14[__lv1][__lv2][__lv3] = _u_a_1*_u_d;
            _tmp15[__lv1][__lv2][__lv3] = _u_d*_u_a_1;
            _tmp16[__lv1][__lv2][__lv3] = _u_b_0*(double) _u_c;
            _tmp17[__lv1][__lv2][__lv3] = (double) _u_c*_u_b_0;
            _tmp18[__lv1][__lv2][__lv3] = _u_b_0*_u_d;
            _tmp19[__lv1][__lv2][__lv3] = _u_d*_u_b_0;
            _tmp20[__lv1][__lv2][__lv3] = _u_a_1/((double) _u_c);
            _tmp21[__lv1][__lv2][__lv3] = _u_a_1/_u_d;
            _tmp22[__lv1][__lv2][__lv3] = _u_b_0/((double) _u_c);
            _tmp23[__lv1][__lv2][__lv3] = _u_b_0/_u_d;
         }
      }
   }
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp4);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp5);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp6);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp7);
   scilab_rt_disp_s0_("division by a scalar");
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp8);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp9);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp10);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp11);
   scilab_rt_disp_s0_("elementwise multiplication by a scalar");
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp12);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp13);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp14);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp15);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp16);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp17);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp18);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp19);
   scilab_rt_disp_s0_("elementwise division by a scalar");
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp20);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp21);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp22);
   scilab_rt_display_s0d3_("ans", 3, 2, 3, _tmp23);

   scilab_rt_terminate();
}

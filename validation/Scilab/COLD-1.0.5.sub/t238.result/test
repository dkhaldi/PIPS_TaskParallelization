int main(int argc, char *argv[])
{
   //PIPS generated variable
   int _u_i_0;
   //PIPS generated variable
   int _u_i_1;
   //PIPS generated variable
   int _u_i_2;
   //PIPS generated variable
   int _u_i_3;
   //PIPS generated variable
   double _u_t;
   //PIPS generated variable
   int _u_k;
   //PIPS generated variable
   double _u_drx[30][1], _u_dry[30][1], _u_drz[30][1], _u_r[30][1], _u_M[30][1], _u_frx[30][1], _u_fry[30][1], _u_frz[30][1];
   scilab_rt_init(argc, argv, 0);
   
   /*  t238.sce - from mcgill/nb1d.sce */
   /* This function M-file simulates the gravitational movement */
   /* of a set of objects */
   scilab_rt_tic__();
   double _u_seed = 1;
   int _u_scale = 1;
   double _tmpxx0 = pow(_u_scale, 0.4);
   int _u_n = round(_tmpxx0*30);
   _u_n = 30;
   double _u_dT = 0.5*0.0833;
   double _tmpxx1 = 0.5*32.4362;
   double _tmpxx2 = sqrt(_u_scale);
   double _u_T = _tmpxx1*_tmpxx2;
   /* m = n   n = 1  seed = 0.1  M = Rx */
   _u_seed = 0.1;
   int _tmpxx3 = _u_n*1;
   _u_seed = _u_seed+_tmpxx3;
   double _u_Rx[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 43, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Rx[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(_u_i_0 = 1; _u_i_0 <= _u_n; _u_i_0 += 1) {
      //PIPS generated variable
      double _tmpxx4, _tmpxx5, _tmpxx6, _tmpxx7, _tmpxx8, _tmpxx9;
      _tmpxx4 = fmod(_u_seed, 1);
      _u_Rx[_u_i_0-1][1-1] = _tmpxx4;
      _tmpxx5 = _u_Rx[_u_i_0-1][1-1];
      _tmpxx6 = sqrt(100);
      _tmpxx7 = _tmpxx5*_tmpxx6;
      _tmpxx8 = _u_seed+_tmpxx7;
      _tmpxx9 = sqrt(2);
      _u_seed = _tmpxx8+_tmpxx9;
   }
#pragma omp parallel for
   for(_u_i_0 = 1; _u_i_0 <= _u_n; _u_i_0 += 1)
      1+1;
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      register double _tmpxx10_0;
      _tmpxx10_0 = _u_Rx[__lv1][0]*1000.23;
      _u_Rx[__lv1][0] = _tmpxx10_0;
   }
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   /* m = n   n = 1  seed = 0.4  M = Ry */
   _u_seed = 0.4;
   int _tmpxx11 = _u_n*1;
   _u_seed = _u_seed+_tmpxx11;
   double _u_Ry[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 65, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Ry[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(_u_i_1 = 1; _u_i_1 <= _u_n; _u_i_1 += 1) {
      //PIPS generated variable
      double _tmpxx12, _tmpxx13, _tmpxx14, _tmpxx15, _tmpxx16, _tmpxx17;
      _tmpxx12 = fmod(_u_seed, 1);
      _u_Ry[_u_i_1-1][1-1] = _tmpxx12;
      _tmpxx13 = _u_Ry[_u_i_1-1][1-1];
      _tmpxx14 = sqrt(100);
      _tmpxx15 = _tmpxx13*_tmpxx14;
      _tmpxx16 = _u_seed+_tmpxx15;
      _tmpxx17 = sqrt(2);
      _u_seed = _tmpxx16+_tmpxx17;
   }
#pragma omp parallel for
   for(_u_i_1 = 1; _u_i_1 <= _u_n; _u_i_1 += 1)
      1+1;
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      register double _tmpxx18_0;
      _tmpxx18_0 = _u_Ry[__lv1][0]*1000.23;
      _u_Ry[__lv1][0] = _tmpxx18_0;
   }
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   /* m = n   n = 1  seed = 0.9  M = Rz */
   _u_seed = 0.9;
   int _tmpxx19 = _u_n*1;
   _u_seed = _u_seed+_tmpxx19;
   double _u_Rz[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 87, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Rz[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(_u_i_2 = 1; _u_i_2 <= _u_n; _u_i_2 += 1) {
      //PIPS generated variable
      double _tmpxx20, _tmpxx21, _tmpxx22, _tmpxx23, _tmpxx24, _tmpxx25;
      _tmpxx20 = fmod(_u_seed, 1);
      _u_Rz[_u_i_2-1][1-1] = _tmpxx20;
      _tmpxx21 = _u_Rz[_u_i_2-1][1-1];
      _tmpxx22 = sqrt(100);
      _tmpxx23 = _tmpxx21*_tmpxx22;
      _tmpxx24 = _u_seed+_tmpxx23;
      _tmpxx25 = sqrt(2);
      _u_seed = _tmpxx24+_tmpxx25;
   }
#pragma omp parallel for
   for(_u_i_2 = 1; _u_i_2 <= _u_n; _u_i_2 += 1)
      1+1;
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      register double _tmpxx26_0;
      _tmpxx26_0 = _u_Rz[__lv1][0]*1000.23;
      _u_Rz[__lv1][0] = _tmpxx26_0;
   }
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   /* m = n   n = 1  seed = -0.4  M = m */
   _u_seed = -0.4;
   int _tmpxx27 = _u_n*1;
   _u_seed = _u_seed+_tmpxx27;
   double _u_m[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 109, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_m[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(_u_i_3 = 1; _u_i_3 <= _u_n; _u_i_3 += 1) {
      //PIPS generated variable
      double _tmpxx28, _tmpxx29, _tmpxx30, _tmpxx31, _tmpxx32, _tmpxx33;
      _tmpxx28 = fmod(_u_seed, 1);
      _u_m[_u_i_3-1][1-1] = _tmpxx28;
      _tmpxx29 = _u_m[_u_i_3-1][1-1];
      _tmpxx30 = sqrt(100);
      _tmpxx31 = _tmpxx29*_tmpxx30;
      _tmpxx32 = _u_seed+_tmpxx31;
      _tmpxx33 = sqrt(2);
      _u_seed = _tmpxx32+_tmpxx33;
   }
#pragma omp parallel for
   for(_u_i_3 = 1; _u_i_3 <= _u_n; _u_i_3 += 1)
      1+1;
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
      //PIPS generated variable
      register double _tmpxx34_0;
      _tmpxx34_0 = _u_m[__lv1][0]*(double) 345;
      _u_m[__lv1][0] = _tmpxx34_0;
   }
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Fx[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 127, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Fx[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Fy[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 129, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Fy[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Fz[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 131, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Fz[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Vx[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 133, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Vx[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Vy[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 135, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Vy[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_Vz[30][1];
   (int) _u_n==30?(void) 0:__assert_fail("(int)_u_n == 30 && (int)1 == 1", ".t238.tmp/t238.c", 137, __func__);
#pragma omp parallel for
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      _u_Vz[__lv1][0] = (double) 0.0;
   for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
      __lv2 = 0+1;
   double _u_G = 1E-11;
   _u_t = 1;
   while (_u_t<=_u_T) {
      for(_u_k = 1; _u_k <= _u_n; _u_k += 1) {
         //PIPS generated variable
         int __lv1;
         //PIPS generated variable
         double _tmpxx35, _tmpxx36, _tmpxx37, _tmpxx42, _tmpxx48, _tmpxx49, _tmpxx50;
         _tmpxx35 = _u_Rx[_u_k-1][0];
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         _tmpxx36 = _u_Ry[_u_k-1][0];
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         _tmpxx37 = _u_Rz[_u_k-1][0];
#pragma omp parallel for
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
            //PIPS generated variable
            register double _u_drz_0, _u_dry_0, _u_drx_0, _tmpxx41_0, _tmpxx40_0, _tmpxx39_0, _tmpxx38_0;
            _u_drz_0 = _u_Rz[__lv1][0]-_tmpxx37;
            _tmpxx41_0 = _u_drz_0*_u_drz_0;
            _u_dry_0 = _u_Ry[__lv1][0]-_tmpxx36;
            _tmpxx39_0 = _u_dry_0*_u_dry_0;
            _u_drx_0 = _u_Rx[__lv1][0]-_tmpxx35;
            _tmpxx38_0 = _u_drx_0*_u_drx_0;
            _tmpxx40_0 = _tmpxx38_0+_tmpxx39_0;
            _u_r[__lv1][0] = _tmpxx40_0+_tmpxx41_0;
            _u_drx[__lv1][0] = _u_drx_0;
            _u_dry[__lv1][0] = _u_dry_0;
            _u_drz[__lv1][0] = _u_drz_0;
         }
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         _u_r[_u_k-1][0] = 1.0;
         _tmpxx42 = _u_m[_u_k-1][0];
#pragma omp parallel for
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            _u_M[__lv1][0] = _u_m[__lv1][0]*_tmpxx42;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         _u_M[_u_k-1][0] = 0.0;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
#pragma omp parallel for
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
            //PIPS generated variable
            register double _u_r_0 = _u_r[__lv1][0], _u_drx_1 = _u_drx[__lv1][0], _u_dry_1 = _u_dry[__lv1][0], _u_drz_1 = _u_drz[__lv1][0], _u_f_0, _tmpxx47_0, _tmpxx46_0, _tmpxx45_0, _tmpxx44_0, _tmpxx43_0;
            _tmpxx44_0 = sqrt(_u_r_0);
            _tmpxx43_0 = _u_M[__lv1][0]/_u_r_0;
            _u_f_0 = _u_G*_tmpxx43_0;
            _u_r_0 = _tmpxx44_0;
            _tmpxx45_0 = _u_drx_1/_u_r_0;
            _u_drx_1 = _tmpxx45_0;
            _tmpxx46_0 = _u_dry_1/_u_r_0;
            _u_dry_1 = _tmpxx46_0;
            _tmpxx47_0 = _u_drz_1/_u_r_0;
            _u_drz_1 = _tmpxx47_0;
            _u_frx[__lv1][0] = _u_f_0*_u_drx_1;
            _u_fry[__lv1][0] = _u_f_0*_u_dry_1;
            _u_frz[__lv1][0] = _u_f_0*_u_drz_1;
            _u_drz[__lv1][0] = _u_drz_1;
            _u_dry[__lv1][0] = _u_dry_1;
            _u_drx[__lv1][0] = _u_drx_1;
            _u_r[__lv1][0] = _u_r_0;
         }
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
            __lv2 = 0+1;
         _tmpxx48 = scilab_rt_mean_d2_(30, 1, _u_frx)*_u_n;
         _u_Fx[_u_k-1][0] = _tmpxx48;
         _tmpxx49 = scilab_rt_mean_d2_(30, 1, _u_fry)*_u_n;
         _u_Fy[_u_k-1][0] = _tmpxx49;
         _tmpxx50 = scilab_rt_mean_d2_(30, 1, _u_frz)*_u_n;
         _u_Fz[_u_k-1][0] = _tmpxx50;
      }
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         register double _u_Vx_0 = _u_Vx[__lv1][0], _u_ax_0, _tmpxx58_0, _tmpxx57_0, _tmpxx52_0, _tmpxx51_0;
         _u_ax_0 = _u_Fx[__lv1][0]/_u_m[__lv1][0];
         _tmpxx51_0 = _u_ax_0*_u_dT;
         _tmpxx52_0 = _u_Vx_0+_tmpxx51_0;
         _u_Vx_0 = _tmpxx52_0;
         _tmpxx57_0 = _u_Vx_0*_u_dT;
         _tmpxx58_0 = _u_Rx[__lv1][0]+_tmpxx57_0;
         _u_Rx[__lv1][0] = _tmpxx58_0;
         _u_Vx[__lv1][0] = _u_Vx_0;
      }
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         register double _u_Vy_0 = _u_Vy[__lv1][0], _u_ay_0, _tmpxx60_0, _tmpxx59_0, _tmpxx54_0, _tmpxx53_0;
         _u_ay_0 = _u_Fy[__lv1][0]/_u_m[__lv1][0];
         _tmpxx53_0 = _u_ay_0*_u_dT;
         _tmpxx54_0 = _u_Vy_0+_tmpxx53_0;
         _u_Vy_0 = _tmpxx54_0;
         _tmpxx59_0 = _u_Vy_0*_u_dT;
         _tmpxx60_0 = _u_Ry[__lv1][0]+_tmpxx59_0;
         _u_Ry[__lv1][0] = _tmpxx60_0;
         _u_Vy[__lv1][0] = _u_Vy_0;
      }
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
#pragma omp parallel for
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1) {
         //PIPS generated variable
         register double _u_Vz_0 = _u_Vz[__lv1][0], _u_az_0, _tmpxx62_0, _tmpxx61_0, _tmpxx56_0, _tmpxx55_0;
         _u_az_0 = _u_Fz[__lv1][0]/_u_m[__lv1][0];
         _tmpxx55_0 = _u_az_0*_u_dT;
         _tmpxx56_0 = _u_Vz_0+_tmpxx55_0;
         _u_Vz_0 = _tmpxx56_0;
         _tmpxx61_0 = _u_Vz_0*_u_dT;
         _tmpxx62_0 = _u_Rz[__lv1][0]+_tmpxx61_0;
         _u_Rz[__lv1][0] = _tmpxx62_0;
         _u_Vz[__lv1][0] = _u_Vz_0;
      }
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      for(__lv1 = 0; __lv1 <= 29; __lv1 += 1)
         __lv2 = 0+1;
      _u_t += _u_dT;
   }
   double _u_elapsedTime = scilab_rt_toc__();
   /* disp("Elapsed Time: "); */
   /* disp(elapsedTime); */
   scilab_rt_disp_s0_("Mean value of matrix Vx");
   double _tmpxx63;
   scilab_rt_mean_d2_d0(30, 1, _u_Vx, &_tmpxx63);
   scilab_rt_disp_d0_(_tmpxx63);
   scilab_rt_disp_s0_("Mean value of matrix Vy");
   double _tmpxx64;
   scilab_rt_mean_d2_d0(30, 1, _u_Vy, &_tmpxx64);
   scilab_rt_disp_d0_(_tmpxx64);
   scilab_rt_disp_s0_("Mean value of matrix Vz");
   double _tmpxx65;
   scilab_rt_mean_d2_d0(30, 1, _u_Vz, &_tmpxx65);
   scilab_rt_disp_d0_(_tmpxx65);
   scilab_rt_disp_s0_("Mean value of matrix Rx");
   double _tmpxx66;
   scilab_rt_mean_d2_d0(30, 1, _u_Rx, &_tmpxx66);
   scilab_rt_disp_d0_(_tmpxx66);
   scilab_rt_disp_s0_("Mean value of matrix Ry");
   double _tmpxx67;
   scilab_rt_mean_d2_d0(30, 1, _u_Ry, &_tmpxx67);
   scilab_rt_disp_d0_(_tmpxx67);
   scilab_rt_disp_s0_("Mean value of matrix Rz");
   double _tmpxx68;
   scilab_rt_mean_d2_d0(30, 1, _u_Rz, &_tmpxx68);
   scilab_rt_disp_d0_(_tmpxx68);

   scilab_rt_terminate();
}

!
! File REPLICATED_SOURCE_A_2_1_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(2).EQ.2) THEN
         IF (.NOT.LIVE MAPPING(1)) THEN
! send part
! remapping A[2]: A[2] -> A_1[1]
            PSI1 = MY POS(1,2)
            PSI2 = MY POS(2,2)
            PSI3 = MY POS(3,2)
            IF (MY LID.LE.8) THEN
               DO TMP3 = 0, 1
                  DO PSIp1 = PSI1+2*PSI3+4*TMP3-2, MIN(5, PSI1+2*PSI3
     &            +4*TMP3-2)
                     T LID = 2*PSIp1-1
! - lazy broadcasting
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     GAMMAp1 = PSI2-1
                     DO LALPHA1 = 10*GAMMAp1-10*PSI2+2*PSIp1+9, 10*
     &               GAMMAp1-10*PSI2+2*PSIp1+10
                        LALPHAp1 = -8*GAMMAp1+LALPHA1+10*PSI2-2*PSIp1
     &                  -8
                        BUF INDEX = BUF INDEX+1
                        HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1)
                        IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE) THEN
                           CALL HPFC REAL4 BUFPCK
                           CALL HPFC REMAPBRD 1(2, T LID, 2, 1)
                           BUF INDEX = 0
                           SEND NOT INITIALIZED = .TRUE.
                        ENDIF
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL4 BUFPCK
                        CALL HPFC REMAPBRD 1(2, T LID, 2, 1)
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.10) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = 1, 2
                     DO PSI3 = 1, 2
                        DO TMP3 = (-PSI1-2*PSI3+PSIp1+5)/4, 
     &                  HPFC DIVIDE(-PSI1-2*PSI3+PSIp1+2, 4)
                           T LID = 4*PSI1+2*PSI2+PSI3-6
                           IF (MY LID.NE.T LID.AND..NOT.HPFC TWIN P(2
     &                     , T LID)) THEN
! - lazy receiving
                              BUF INDEX = 0
                              RECEIVED NOT PERFORMED = .TRUE.
                              SIZE OF RECEIVED BUFFER = 0
                              GAMMAp1 = PSI2-1
                              DO LALPHA1 = 10*GAMMAp1-10*PSI2+2*PSIp1
     &                        +9, 10*GAMMAp1-10*PSI2+2*PSIp1+10
                                 LALPHAp1 = -8*GAMMAp1+LALPHA1+10*
     &                           PSI2-2*PSIp1-8
                                 IF (BUF INDEX.EQ.
     &                           SIZE OF RECEIVED BUFFER) THEN
                                    RECEIVED NOT PERFORMED = .TRUE.
                                    CALL HPFC REAL4 BUFUPK(T LID)
                                    BUF INDEX = 0
                                 ENDIF
                                 BUF INDEX = BUF INDEX+1
                                 A_1(LALPHAp1) = HPFC REAL4 BUFF(
     &                           BUF INDEX)
                              ENDDO
                           ELSE
! - lazy copying
                              GAMMAp1 = PSI2-1
                              DO LALPHA1 = 10*GAMMAp1-10*PSI2+2*PSIp1
     &                        +9, 10*GAMMAp1-10*PSI2+2*PSIp1+10
                                 LALPHAp1 = -8*GAMMAp1+LALPHA1+10*
     &                           PSI2-2*PSIp1-8
                                 A_1(LALPHAp1) = A(LALPHA1)
                              ENDDO
                           ENDIF
                        ENDDO
                     ENDDO
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(1) = .TRUE.
         MSTATUS(2) = 1
      ENDIF
!
! That is all for REPLICATED_SOURCE_A_2_1_node.h
!
!
! File REPLICATED_SOURCE_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "REPLICATED_SOURCE_parameters.h"
      CALL HPFC INIT HOST
      CALL HPFC HOST END
      END
!
! That is all for REPLICATED_SOURCE_host.f
!
!
! File REPLICATED_SOURCE_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for REPLICATED_SOURCE
!
!
! initializing array A, number 2
!
      NODIMA(2) = 1
      ATOT(2) = 2

      MSTATUS(2) = 2
      LIVEMAPPING(2) = .TRUE.

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 20
      RANGEA(2, 1, 3) = 20
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 10
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      ALIGN(2, 1, 1) = INTFLAG
      ALIGN(2, 2, 1) = 1
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
      ALIGN(2, 3, 1) = INTFLAG
!
! initializing array A_1, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 20
      RANGEA(1, 1, 3) = 20
!
      RANGEA(1, 1, 4) = 3
      RANGEA(1, 1, 5) = 2
      RANGEA(1, 1, 6) = 10
      RANGEA(1, 1, 7) = 0
      RANGEA(1, 1, 8) = -1

      ALIGN(1, 1, 1) = INTFLAG
      ALIGN(1, 2, 1) = 1
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
      ALIGN(1, 3, 1) = INTFLAG
!
! That is all for REPLICATED_SOURCE_init.h
!
!
! File REPLICATED_SOURCE_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "REPLICATED_SOURCE_parameters.h"
      INTEGER I_1, I_2, I_3, I_4, I_5, I_6, PSIp2, LALPHA1, LALPHAp1
     &, GAMMAp1, PSIp1, T LID, TMP3, PSI3, PSI2, PSI1
      REAL*4 F_0, A(1:10), A_1(1:6)
      CALL HPFC INIT NODE
! all livenesss for A
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! direct remapping for A
      LIVE MAPPING(2) = .TRUE.
      MSTATUS(2) = 2
      CALL HPFC CMPCOMPUTER(2, 5, 0, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         I_1 = MOD(5-1, 10)+1
         A(I_1) = 5.0
         CALL HPFC CMPOWNERS(2, 5, 0, 0, 0, 0, 0, 0)
         CALL HPFC SNDTO OOS(HPFC REAL4, A(I_1))
      ELSE
         CALL HPFC CMPOWNERS(2, 5, 0, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_2 = MOD(5-1, 10)+1
            CALL HPFC RCVFR C(HPFC REAL4, A(I_2))
         ENDIF
      ENDIF
! begin remappings
      include 'REPLICATED_SOURCE_A_2_1_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(2) = .FALSE.
! end of liveness management
! end remappings
      CALL HPFC CMPCOMPUTER(1, 5, 0, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         CALL HPFC CMPOWNERS(1, 5, 0, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_3 = HPFC LOCALINDGAMMA(1, 1, 5)
            F_0 = A_1(I_3)
         ELSE
            CALL HPFC RCVFR S(HPFC REAL4, F_0)
         ENDIF
         I_5 = HPFC LOCALINDGAMMA(1, 1, 5)
         A_1(I_5) = F_0+3.1
         CALL HPFC CMPOWNERS(1, 5, 0, 0, 0, 0, 0, 0)
         CALL HPFC SNDTO OOS(HPFC REAL4, A_1(I_5))
      ELSE
         CALL HPFC CMPOWNERS(1, 5, 0, 0, 0, 0, 0, 0)
         IF (HPFC SENDERP().AND..NOT.HPFC COMPUTERINOWNERSP()) THEN
            I_4 = HPFC LOCALINDGAMMA(1, 1, 5)
            CALL HPFC SNDTO C(HPFC REAL4, A_1(I_4))
         ENDIF
         CALL HPFC CMPOWNERS(1, 5, 0, 0, 0, 0, 0, 0)
         IF (HPFC OWNERP()) THEN
            I_6 = HPFC LOCALINDGAMMA(1, 1, 5)
            CALL HPFC RCVFR C(HPFC REAL4, A_1(I_6))
         ENDIF
      ENDIF
      CALL HPFC NODE END
      END
!
! That is all for REPLICATED_SOURCE_node.f
!
!
! File REPLICATED_SOURCE_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for REPLICATED_SOURCE
!
      integer 
     $    REPLICATED_SOURCE A LO1,
     $    REPLICATED_SOURCE A UP1
      parameter(REPLICATED_SOURCE A LO1 = 1)
      parameter(REPLICATED_SOURCE A UP1 = 10)
      integer 
     $    REPLICATED_SOURCE A_1 LO1,
     $    REPLICATED_SOURCE A_1 UP1
      parameter(REPLICATED_SOURCE A_1 LO1 = 1)
      parameter(REPLICATED_SOURCE A_1 UP1 = 6)
!
! That is all for REPLICATED_SOURCE_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T_1, number 1
!
      NODIMT(1) = 3
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 20
      RANGET(1, 1, 3) = 20

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 20
      RANGET(1, 2, 3) = 20

      RANGET(1, 3, 1) = 1
      RANGET(1, 3, 2) = 20
      RANGET(1, 3, 3) = 20

      DIST(1, 1, 1) = 2
      DIST(1, 1, 2) = -2
      DIST(1, 2, 1) = 3
      DIST(1, 2, 2) = 10
!
! initializing template T, number 2
!
      NODIMT(2) = 3
      TTOP(2) = 2

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 20
      RANGET(2, 1, 3) = 20

      RANGET(2, 2, 1) = 1
      RANGET(2, 2, 2) = 20
      RANGET(2, 2, 3) = 20

      RANGET(2, 3, 1) = 1
      RANGET(2, 3, 2) = 20
      RANGET(2, 3, 3) = 20

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 10
      DIST(2, 2, 1) = 2
      DIST(2, 2, 2) = 10
      DIST(2, 3, 1) = 3
      DIST(2, 3, 2) = 10
!
! Processors Initializations
!
!
! initializing processors PT, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 5
      RANGEP(1, 1, 3) = 5

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! initializing processors PS, number 2
!
      NODIMP(2) = 3

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 2
      RANGEP(2, 1, 3) = 2

      RANGEP(2, 2, 1) = 1
      RANGEP(2, 2, 2) = 2
      RANGEP(2, 2, 3) = 2

      RANGEP(2, 3, 1) = 1
      RANGEP(2, 3, 2) = 2
      RANGEP(2, 3, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 2)
      parameter(REALNBOFPROCESSORS = 2)
      parameter(REALMAXSIZEOFPROCS = 10)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

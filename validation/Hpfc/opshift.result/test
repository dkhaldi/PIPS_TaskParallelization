!
! File FOO_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "FOO_parameters.h"
      INTEGER M
      CALL HPFC INIT HOST

      READ *, M
! updating shared variable M
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = M
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update


      CALL HPFC HOST END
      END
!
! That is all for FOO_host.f
!
!
! File FOO_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for FOO
!
!
! initializing array A, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 100
      RANGEA(1, 1, 3) = 100
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 50
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 100
      RANGEA(1, 2, 3) = 100
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 50
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for FOO_init.h
!
!
! File FOO_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "FOO_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER I_2, I_3, I_4, I_5, I_6, I_7, I_8, I_9, M
      REAL*4 A(1:50, 0:50)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_7, I_8, I_9, 1, N, 1, 1)

! updating shared variable M
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      M = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update

! P(1:2, 1:2) send A(1:50, 50) to (+1)
      CALL HPFC CMPNEIGHBOUR(1)
      CALL HPFC REAL4 PACK 2(A, FOO A LO1, FOO A UP1, FOO A LO2, 
     &FOO A UP2, 1, 50, 1, 50, 50, 1)
      CALL HPFC SNDTO N
! P(1:2, 2:3) receive A(1:50, 0) from (-1)
      IF (MY POS(2,1).GE.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, FOO A LO1, FOO A UP1, FOO A LO2
     &   , FOO A UP2, 1, 50, 1, 0, 0, 1)
      ENDIF
      CALL HPFC LOOP BOUNDS(I_3, I_4, I_5, M, M, 1, 2)
      DO I_2 = I_3, I_4
         DO I_6 = I_7, I_8
            A(I_6,I_2) = -A(I_6,I_2-1)
         ENDDO
      ENDDO

      CALL HPFC NODE END
      END
!
! That is all for FOO_node.f
!
!
! File FOO_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for FOO
!
      integer 
     $    FOO A LO1,
     $    FOO A UP1
      parameter(FOO A LO1 = 1)
      parameter(FOO A UP1 = 50)
      integer 
     $    FOO A LO2,
     $    FOO A UP2
      parameter(FOO A LO2 = 0)
      parameter(FOO A UP2 = 50)
!
! That is all for FOO_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template A, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 100
      RANGET(1, 1, 3) = 100

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 100
      RANGET(1, 2, 3) = 100

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 50
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 50
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 1)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

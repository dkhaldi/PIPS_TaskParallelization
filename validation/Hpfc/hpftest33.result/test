!
! File HPFTEST33_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST33_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
      REAL*4 B(1:10, 1:10)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest33 running'
! collecting distributed variable B
      DO PSI1 = 1, 2
         PSI2 = 1
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = 2*PSI1+PSI2-2
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC REAL4 BUFUPK
         DO ALPHA1 = MAX(2, 5*PSI1-4), MIN(9, 5*PSI1)
            ALPHA2 = 3
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = 3
            BUF INDEX = BUF INDEX+1
            B(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      DO I = 2, 9
         PRINT *, 'b(', I, ',3)=', B(I,3)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      PRINT *, 'hpftest33 ended'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST33_host.f
!
!
! File HPFTEST33_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST33
!
!
! initializing array A, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 5
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 5
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array B, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 5
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 10
      RANGEA(1, 2, 3) = 10
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 5
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for HPFTEST33_init.h
!
!
! File HPFTEST33_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST33_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_4, I_5
     &, I_6, I_7, I_8, I_9, I, J
      REAL*4 A(0:6, 0:6), B(1:5, 1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_17, I_18, I_19, 2, 9, 1, 2)
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 2, 9, 1, 1)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, 10, 2, 2)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, 10, 2, 1)
      I = I_7
      DO I_4 = I_5, I_6
         I = I+1
         J = I_11
         DO I_8 = I_9, I_10
            J = J+1
            A(I_4,I_8) = 10*I+J-11
         ENDDO
      ENDDO
! P(2, 2) send A(1, 1) to (-3)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-3)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 1, 1, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1:2, 2) send A(2:5, 1) to (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 2, 5, 1, 1, 1, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(2, 1:2) send A(1, 2:5) to (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 1, 1, 1, 2, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1, 1) send A(5, 5) to (+3)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(3)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 5, 5, 1, 5, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1:2, 1) send A(1:4, 5) to (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 1, 4, 1, 5, 5, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1, 1:2) send A(5, 1:4) to (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC REAL4 PACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1, 
     &   HPFTEST33 A LO2, HPFTEST33 A UP2, 5, 5, 1, 1, 4, 1)
         CALL HPFC SNDTO N
      ENDIF
! P(1, 1) receive A(6, 6) from (+3)
      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(3)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 6, 6, 1, 6, 6, 1)
      ENDIF
! P(1:2, 1) receive A(2:5, 6) from (+1)
      IF (MY POS(2,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 2, 5, 1, 6, 6, 1)
      ENDIF
! P(1, 1:2) receive A(6, 2:5) from (+2)
      IF (MY POS(1,1).EQ.1) THEN
         CALL HPFC CMPNEIGHBOUR(2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 6, 6, 1, 2, 5, 1)
      ENDIF
! P(2, 2) receive A(0, 0) from (-3)
      IF (MY POS(1,1).EQ.2.AND.MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-3)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 0, 0, 1, 0, 0, 1)
      ENDIF
! P(1:2, 2) receive A(1:4, 0) from (-1)
      IF (MY POS(2,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-1)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 1, 4, 1, 0, 0, 1)
      ENDIF
! P(2, 1:2) receive A(0, 1:4) from (-2)
      IF (MY POS(1,1).EQ.2) THEN
         CALL HPFC CMPNEIGHBOUR(-2)
         CALL HPFC RCVFR N
         CALL HPFC REAL4 UNPACK 2(A, HPFTEST33 A LO1, HPFTEST33 A UP1
     &   , HPFTEST33 A LO2, HPFTEST33 A UP2, 0, 0, 1, 1, 4, 1)
      ENDIF
      DO I_12 = I_13, I_14
         DO I_16 = I_17, I_18
            B(I_12,I_16) = A(I_12-1,I_16-1)+A(I_12,I_16)+A(I_12+1,
     &      I_16+1)
         ENDDO
      ENDDO
! collecting distributed variable B
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA1 = MAX(2, 5*PSI1-4), MIN(9, 5*PSI1)
            ALPHA2 = 3
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = 3
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = B(LALPHA1,LALPHA2)
         ENDDO
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST33_node.f
!
!
! File HPFTEST33_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST33
!
      integer 
     $    HPFTEST33 A LO1,
     $    HPFTEST33 A UP1
      parameter(HPFTEST33 A LO1 = 0)
      parameter(HPFTEST33 A UP1 = 6)
      integer 
     $    HPFTEST33 A LO2,
     $    HPFTEST33 A UP2
      parameter(HPFTEST33 A LO2 = 0)
      parameter(HPFTEST33 A UP2 = 6)
      integer 
     $    HPFTEST33 B LO1,
     $    HPFTEST33 B UP1
      parameter(HPFTEST33 B LO1 = 1)
      parameter(HPFTEST33 B UP1 = 5)
      integer 
     $    HPFTEST33 B LO2,
     $    HPFTEST33 B UP2
      parameter(HPFTEST33 B LO2 = 1)
      parameter(HPFTEST33 B UP2 = 5)
!
! That is all for HPFTEST33_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

      real function cube(x)
cfcd$ pure
      real x
      cube=x*x*x
      end
!
! File PURE_1_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "PURE_1_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, T LID
      REAL*4 A(1:100)
      CALL HPFC INIT HOST
! collecting distributed variable A
      PSI1 = 3
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = PSI1
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL4 BUFUPK
      ALPHA1 = 51
      LALPHA1 = 1
      BUF INDEX = BUF INDEX+1
      A(ALPHA1) = HPFC REAL4 BUFF(BUF INDEX)
! end of collect
      PRINT *, A(51)
      CALL HPFC HOST END
      END
!
! That is all for PURE_1_host.f
!
!
! File PURE_1_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for PURE_1
!
!
! initializing array A, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 100
      RANGEA(1, 1, 3) = 100
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 25
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for PURE_1_init.h
!
!
! File PURE_1_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "PURE_1_parameters.h"
      REAL*4 CUBE
      EXTERNAL CUBE
      INTEGER ALPHA1, LALPHA1, PSI1, I_0, I_1, I_2, I_3, I_4, I_5, 
     &I_6, I_7, I
      REAL*4 A(1:25)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, 100, 1, 1)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, 100, 1, 1)
      I = I_3
      DO I_0 = I_1, I_2
         I = I+1
         A(I_0) = 1.0/REAL(I)
      ENDDO
      DO I_4 = I_5, I_6
         A(I_4) = CUBE(A(I_4))
      ENDDO
! collecting distributed variable A
      PSI1 = MY POS(1,1)
      IF (PSI1.EQ.3) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         ALPHA1 = 51
         LALPHA1 = 1
         BUF INDEX = BUF INDEX+1
         HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1)
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
      CALL HPFC NODE END
      END
!
! That is all for PURE_1_node.f
!
!
! File PURE_1_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for PURE_1
!
      integer 
     $    PURE_1 A LO1,
     $    PURE_1 A UP1
      parameter(PURE_1 A LO1 = 1)
      parameter(PURE_1 A UP1 = 25)
!
! That is all for PURE_1_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 100
      RANGET(1, 1, 3) = 100

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 25
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 4
      RANGEP(1, 1, 3) = 4
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 1)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

!
! File ADI2D_B_1_4_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.1) THEN
         IF (.NOT.LIVE MAPPING(4)) THEN
! send part
! remapping B[4]: B_1[1] -> B[4]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = B_1(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           B(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           B(LALPHAp1,LALPHAp2) = B_1(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(4) = .TRUE.
         MSTATUS(4) = 4
      ENDIF
!
! That is all for ADI2D_B_1_4_node.h
!
!
! File ADI2D_B_4_1_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.4) THEN
         IF (.NOT.LIVE MAPPING(1)) THEN
! send part
! remapping B[4]: B[4] -> B_1[1]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = B(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           B_1(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           B_1(LALPHAp1,LALPHAp2) = B(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(1) = .TRUE.
         MSTATUS(4) = 1
      ENDIF
!
! That is all for ADI2D_B_4_1_node.h
!
!
! File ADI2D_UH_2_5_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(5).EQ.2) THEN
         IF (.NOT.LIVE MAPPING(5)) THEN
! send part
! remapping UH[5]: UH_1[2] -> UH[5]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = UH_1(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           UH(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           UH(LALPHAp1,LALPHAp2) = UH_1(LALPHA1,
     &                     LALPHA2)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(5) = .TRUE.
         MSTATUS(5) = 5
      ENDIF
!
! That is all for ADI2D_UH_2_5_node.h
!
!
! File ADI2D_UH_5_2_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(5).EQ.5) THEN
         IF (.NOT.LIVE MAPPING(2)) THEN
! send part
! remapping UH[5]: UH[5] -> UH_1[2]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = UH(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           UH_1(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           UH_1(LALPHAp1,LALPHAp2) = UH(LALPHA1,
     &                     LALPHA2)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(2) = .TRUE.
         MSTATUS(5) = 2
      ENDIF
!
! That is all for ADI2D_UH_5_2_node.h
!
!
! File ADI2D_U_3_6_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(6).EQ.3) THEN
         IF (.NOT.LIVE MAPPING(6)) THEN
! send part
! remapping U[6]: U_1[3] -> U[6]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = U_1(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           U(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 1, 128
                        DO LALPHA1 = 128*PSIp1-127, 128*PSIp1
                           LALPHAp2 = LALPHA2+128*PSI1-128
                           LALPHAp1 = LALPHA1-128*PSIp1+128
                           U(LALPHAp1,LALPHAp2) = U_1(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(6) = .TRUE.
         MSTATUS(6) = 6
      ENDIF
!
! That is all for ADI2D_U_3_6_node.h
!
!
! File ADI2D_U_6_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(6).EQ.6) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping U[6]: U[6] -> U_1[3]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSIp1 = 1, 8
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL8 BUFF(BUF INDEX) = U(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL8 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL8 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL8 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.8) THEN
               DO PSI1 = 1, 8
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL8 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           U_1(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 128*PSIp1-127, 128*PSIp1
                        DO LALPHA1 = 1, 128
                           LALPHAp2 = LALPHA2-128*PSIp1+128
                           LALPHAp1 = LALPHA1+128*PSI1-128
                           U_1(LALPHAp1,LALPHAp2) = U(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(6) = 3
      ENDIF
!
! That is all for ADI2D_U_6_3_node.h
!
!
! File ADI2D_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "ADI2D_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 1024)
      INTEGER*4 N
      PARAMETER (N = 1024)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, T LID, K
      REAL*8 U(1:N, 1:N), ALPHA, AP2, AM2, S
      CALL HPFC INIT HOST


      PRINT *, '2D ADI running'

! init U
!
! with this mapping, it results in useless communication when
! initializing Uh from U as from the outside loop...
! some code replication and guard could avoid this one?



      ALPHA = 8.0D0/DBLE(N)
      AP2 = ALPHA+2.0D0
      AM2 = ALPHA-2.0D0

      CALL HPFC HTIMEON

! ITERATIVE LOOP on k:

      DO K = 1, 10

         PRINT *, 'k = ', K


! U -> Uh






! Initialize B



! forward sweep along columns



! backward sweep along columns



! Uh -> U






! Initialize B



      ENDDO

      CALL HPFC HTIMEOFF('full computation')

      PRINT *, '2D ADI done'

!
! some output to check the result...
!

      CALL HPRE SUM HPFC REAL8(S, 1)
      CALL HPOST SUM HPFC REAL8(S, 1)
! collecting distributed variable U
      PSI1 = 1
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = PSI1
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL8 BUFUPK
      DO ALPHA2 = 10, 11
         DO ALPHA1 = MAX(10, 128*PSI1-127), -ALPHA2+21
            LALPHA1 = ALPHA1-128*PSI1+128
            LALPHA2 = ALPHA2
            BUF INDEX = BUF INDEX+1
            U(ALPHA1,ALPHA2) = HPFC REAL8 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect

      PRINT *, 'U(:,:) = ', U(10,10), U(11,10), U(10,11)
      PRINT *, 'SUM(U) = ', S

      CALL HPFC HOST END
      END
!
! That is all for ADI2D_host.f
!
!
! File ADI2D_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for ADI2D
!
!
! initializing array U, number 6
!
      NODIMA(6) = 2
      ATOT(6) = 1

      MSTATUS(6) = 6
      LIVEMAPPING(6) = .TRUE.

      RANGEA(6, 1, 1) = 1
      RANGEA(6, 1, 2) = 1024
      RANGEA(6, 1, 3) = 1024
!
      RANGEA(6, 1, 4) = 2
      RANGEA(6, 1, 5) = 128
      RANGEA(6, 1, 6) = 1
      RANGEA(6, 1, 7) = -1

      RANGEA(6, 2, 1) = 1
      RANGEA(6, 2, 2) = 1024
      RANGEA(6, 2, 3) = 1024
!
      RANGEA(6, 2, 4) = 0

      ALIGN(6, 1, 1) = 1
      ALIGN(6, 1, 2) = 1
      ALIGN(6, 1, 3) = 0
!
! initializing array UH, number 5
!
      NODIMA(5) = 2
      ATOT(5) = 1

      MSTATUS(5) = 5
      LIVEMAPPING(5) = .TRUE.

      RANGEA(5, 1, 1) = 1
      RANGEA(5, 1, 2) = 1024
      RANGEA(5, 1, 3) = 1024
!
      RANGEA(5, 1, 4) = 2
      RANGEA(5, 1, 5) = 128
      RANGEA(5, 1, 6) = 1
      RANGEA(5, 1, 7) = -1

      RANGEA(5, 2, 1) = 1
      RANGEA(5, 2, 2) = 1024
      RANGEA(5, 2, 3) = 1024
!
      RANGEA(5, 2, 4) = 0

      ALIGN(5, 1, 1) = 1
      ALIGN(5, 1, 2) = 1
      ALIGN(5, 1, 3) = 0
!
! initializing array B, number 4
!
      NODIMA(4) = 2
      ATOT(4) = 1

      MSTATUS(4) = 4
      LIVEMAPPING(4) = .TRUE.

      RANGEA(4, 1, 1) = 1
      RANGEA(4, 1, 2) = 1024
      RANGEA(4, 1, 3) = 1024
!
      RANGEA(4, 1, 4) = 2
      RANGEA(4, 1, 5) = 128
      RANGEA(4, 1, 6) = 1
      RANGEA(4, 1, 7) = -1

      RANGEA(4, 2, 1) = 1
      RANGEA(4, 2, 2) = 1024
      RANGEA(4, 2, 3) = 1024
!
      RANGEA(4, 2, 4) = 0

      ALIGN(4, 1, 1) = 1
      ALIGN(4, 1, 2) = 1
      ALIGN(4, 1, 3) = 0
!
! initializing array U_1, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 1024
      RANGEA(3, 1, 3) = 1024
!
      RANGEA(3, 1, 4) = 0

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 1024
      RANGEA(3, 2, 3) = 1024
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 128
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 2
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
!
! initializing array UH_1, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 1024
      RANGEA(2, 1, 3) = 1024
!
      RANGEA(2, 1, 4) = 0

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 1024
      RANGEA(2, 2, 3) = 1024
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 128
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 2
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
!
! initializing array B_1, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 1024
      RANGEA(1, 1, 3) = 1024
!
      RANGEA(1, 1, 4) = 0

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 1024
      RANGEA(1, 2, 3) = 1024
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 128
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 2
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for ADI2D_init.h
!
!
! File ADI2D_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "ADI2D_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 1024)
      INTEGER*4 N
      PARAMETER (N = 1024)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, I_22, I_23, 
     &I_24, I_25, I_26, I_27, I_28, I_29, I_30, I_31, I_32, I_33, 
     &I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, I_43, 
     &I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, I_53, 
     &I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, I_63, 
     &I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, I_73, 
     &I_74, I_75, I_76, I_77, I, J, K, I_LOCAL, I_12, I_13, I_14, 
     &I_15, I_16, I_17, I_18, I_19, I_20, I_21, LALPHAp1, LALPHAp2, 
     &PSIp1, T LID
      REAL*8 U(1:128, 1:N), UH(1:128, 1:N), B(1:128, 1:N), ALPHA, AP2
     &, AM2, INV, S, U_1(1:N, 1:128), UH_1(1:N, 1:128), B_1(1:N, 1:
     &128)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_75, I_76, I_77, 1, N, 6, 1)
      CALL HPFC LOOP BOUNDS(I_71, I_72, I_73, 2, N-1, 6, 1)
      CALL HPFC LOOP BOUNDS(I_67, I_68, I_69, 2, N-1, 6, 1)
      CALL HPFC LOOP BOUNDS(I_63, I_64, I_65, 2, N-1, 4, 1)
      CALL HPFC LOOP BOUNDS(I_59, I_60, I_61, 2, N-1, 4, 1)
      CALL HPFC LOOP BOUNDS(I_55, I_56, I_57, 2, N-1, 3, 1)
      CALL HPFC LOOP BOUNDS(I_51, I_52, I_53, 2, N-1, 2, 1)
      CALL HPFC LOOP BOUNDS(I_47, I_48, I_49, 2, N-1, 2, 1)
      CALL HPFC LOOP BOUNDS(I_43, I_44, I_45, 2, N-1, 1, 1)
      CALL HPFC LOOP BOUNDS(I_39, I_40, I_41, 2, N-1, 1, 1)
      CALL HPFC LOOP BOUNDS(I_35, I_36, I_37, 1, N, 5, 1)
      CALL HPFC LOOP BOUNDS(I_31, I_32, I_33, 2, N-1, 5, 1)
      CALL HPFC LOOP BOUNDS(I_27, I_28, I_29, 1, N, 5, 1)
      CALL HPFC LOOP BOUNDS(I_23, I_24, I_25, 2, N-1, 6, 1)
! all livenesss for B
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! all livenesss for UH
      LIVE MAPPING(5) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
! all livenesss for U
      LIVE MAPPING(6) = .FALSE.
      LIVE MAPPING(3) = .FALSE.
! direct remapping for B
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for UH
      LIVE MAPPING(5) = .TRUE.
      MSTATUS(5) = 5
! direct remapping for U
      LIVE MAPPING(6) = .TRUE.
      MSTATUS(6) = 6



! init U
!
! with this mapping, it results in useless communication when
! initializing Uh from U as from the outside loop...
! some code replication and guard could avoid this one?

      DO J = 1, N
         IF (MY POS(1,1).EQ.1) THEN
            I_LOCAL = 0
            U(1,J) = 30.0D0
         ENDIF
         DO I_22 = I_23, I_24
            U(I_22,J) = 0.0D0
         ENDDO
         IF (MY POS(1,1).EQ.8) THEN
            I_LOCAL = 0
            U(128,J) = 30.0D0
         ENDIF
      ENDDO


      ALPHA = 8.0D0/DBLE(N)
      AP2 = ALPHA+2.0D0
      AM2 = ALPHA-2.0D0

      CALL HPFC NTIMEON

! ITERATIVE LOOP on k:

      DO K = 1, 10


! U -> Uh

         DO I_26 = I_27, I_28
            UH(I_26,1) = U(I_26,1)
         ENDDO

         DO J = 2, N-1
            IF (MY POS(1,1).EQ.1) THEN
               I_LOCAL = 0
               UH(1,J) = U(1,J)
            ENDIF
            DO I_30 = I_31, I_32
               I_12 = J+1
               I_13 = J-1
               UH(I_30,J) = AM2*U(I_30,J)+U(I_30,I_12)+U(I_30,I_13)
            ENDDO
            IF (MY POS(1,1).EQ.8) THEN
               I_LOCAL = 0
               UH(128,J) = U(128,J)
            ENDIF
         ENDDO

         DO I_34 = I_35, I_36
            UH(I_34,N) = U(I_34,N)
         ENDDO

         IF (MY POS(1,1).EQ.1) THEN
            DO J = 2, N-1
               UH(2,J) = UH(2,J)+U(1,J)
            ENDDO
         ENDIF

         IF (MY POS(1,1).EQ.8) THEN
            DO J = 2, N-1
               UH(127,J) = UH(127,J)+U(128,J)
            ENDDO
         ENDIF
! all livenesss for B
         LIVE MAPPING(4) = .TRUE.
         LIVE MAPPING(1) = .TRUE.
! all livenesss for U
         LIVE MAPPING(6) = .TRUE.
         LIVE MAPPING(3) = .TRUE.
! begin remappings
      include 'ADI2D_U_6_3_node.h'
      include 'ADI2D_UH_5_2_node.h'
      include 'ADI2D_B_4_1_node.h'
! liveness management
! clean live set for B
         LIVE MAPPING(4) = .FALSE.
! clean live set for UH
         LIVE MAPPING(5) = .FALSE.
! clean live set for U
         LIVE MAPPING(6) = .FALSE.
! end of liveness management
! end remappings

! Initialize B

         DO I_38 = I_39, I_40
            DO I = 2, N-1
               B_1(I,I_38) = AP2
            ENDDO
         ENDDO


! forward sweep along columns

         DO I_42 = I_43, I_44
            DO I = 3, N-1
               I_14 = I-1
               INV = 1.0D0/B_1(I_14,I_42)
               B_1(I,I_42) = B_1(I,I_42)-INV
               I_15 = I-1
               UH_1(I,I_42) = UH_1(I,I_42)+UH_1(I_15,I_42)*INV
            ENDDO
         ENDDO

         DO I_46 = I_47, I_48
            UH_1(N-1,I_46) = UH_1(N-1,I_46)/B_1(N-1,I_46)
         ENDDO

! backward sweep along columns

         DO I_50 = I_51, I_52
            DO I = N-2, 2, -1
               I_16 = I+1
               UH_1(I,I_50) = (UH_1(I,I_50)+UH_1(I_16,I_50))/B_1(I,
     &         I_50)
            ENDDO
         ENDDO


! Uh -> U

         IF (MY POS(1,1).EQ.1) THEN
            DO I = 1, N
               U_1(I,1) = UH_1(I,1)
            ENDDO
         ENDIF

         DO I_54 = I_55, I_56
            U_1(1,I_54) = UH_1(1,I_54)
            DO I = 2, N-1
               I_17 = I+1
               I_18 = I-1
               U_1(I,I_54) = AM2*UH_1(I,I_54)+UH_1(I_17,I_54)+UH_1(
     &         I_18,I_54)
            ENDDO
            U_1(N,I_54) = UH_1(N,I_54)
         ENDDO

         IF (MY POS(1,1).EQ.8) THEN
            DO I = 1, N
               U_1(I,128) = UH_1(I,128)
            ENDDO
         ENDIF

         IF (MY POS(1,1).EQ.1) THEN
            DO I = 2, N-1
               U_1(I,2) = U_1(I,2)+UH_1(I,1)
            ENDDO
         ENDIF

         IF (MY POS(1,1).EQ.8) THEN
            DO I = 2, N-1
               U_1(I,127) = U_1(I,127)+UH_1(I,128)
            ENDDO
         ENDIF
! all livenesss for B
         LIVE MAPPING(4) = .TRUE.
         LIVE MAPPING(1) = .TRUE.
! all livenesss for UH
         LIVE MAPPING(5) = .TRUE.
         LIVE MAPPING(2) = .TRUE.
! begin remappings
      include 'ADI2D_U_3_6_node.h'
      include 'ADI2D_UH_2_5_node.h'
      include 'ADI2D_B_1_4_node.h'
! liveness management
! clean live set for B
         LIVE MAPPING(1) = .FALSE.
! clean live set for UH
         LIVE MAPPING(2) = .FALSE.
! clean live set for U
         LIVE MAPPING(3) = .FALSE.
! end of liveness management
! end remappings

! Initialize B

         DO J = 2, N-1
            DO I_58 = I_59, I_60
               B(I_58,J) = AP2
            ENDDO
         ENDDO


! forward sweep along rows 

         DO J = 3, N-1
            DO I_62 = I_63, I_64
               I_19 = J-1
               INV = 1.0D0/B(I_62,I_19)
               B(I_62,J) = B(I_62,J)-INV
               I_20 = J-1
               U(I_62,J) = U(I_62,J)+U(I_62,I_20)*INV
            ENDDO
         ENDDO

         DO I_66 = I_67, I_68
            U(I_66,N-1) = U(I_66,N-1)/B(I_66,N-1)
         ENDDO

! backward sweep along rows

         DO J = N-2, 2, -1
            DO I_70 = I_71, I_72
               I_21 = J+1
               U(I_70,J) = (U(I_70,J)+U(I_70,I_21))/B(I_70,J)
            ENDDO
         ENDDO

      ENDDO

      CALL HPFC NTIMEOFF('full computation')

!
! some output to check the result...
!

      CALL NPRE SUM HPFC REAL8(S, 1)
      DO J = 1, N
         DO I_74 = I_75, I_76
            S = S+U(I_74,J)
         ENDDO
      ENDDO
      CALL NPOST SUM HPFC REAL8(S, 1)
! collecting distributed variable U
      PSI1 = MY POS(1,1)
      IF (PSI1.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA2 = 10, 11
            DO ALPHA1 = MAX(10, 128*PSI1-127), -ALPHA2+21
               LALPHA1 = ALPHA1-128*PSI1+128
               LALPHA2 = ALPHA2
               BUF INDEX = BUF INDEX+1
               HPFC REAL8 BUFF(BUF INDEX) = U(LALPHA1,LALPHA2)
            ENDDO
         ENDDO
         CALL HPFC REAL8 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect

      CALL HPFC NODE END
      END
!
! That is all for ADI2D_node.f
!
!
! File ADI2D_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for ADI2D
!
      integer 
     $    ADI2D U LO1,
     $    ADI2D U UP1
      parameter(ADI2D U LO1 = 1)
      parameter(ADI2D U UP1 = 128)
      integer 
     $    ADI2D U LO2,
     $    ADI2D U UP2
      parameter(ADI2D U LO2 = 1)
      parameter(ADI2D U UP2 = 1024)
      integer 
     $    ADI2D UH LO1,
     $    ADI2D UH UP1
      parameter(ADI2D UH LO1 = 1)
      parameter(ADI2D UH UP1 = 128)
      integer 
     $    ADI2D UH LO2,
     $    ADI2D UH UP2
      parameter(ADI2D UH LO2 = 1)
      parameter(ADI2D UH UP2 = 1024)
      integer 
     $    ADI2D B LO1,
     $    ADI2D B UP1
      parameter(ADI2D B LO1 = 1)
      parameter(ADI2D B UP1 = 128)
      integer 
     $    ADI2D B LO2,
     $    ADI2D B UP2
      parameter(ADI2D B LO2 = 1)
      parameter(ADI2D B UP2 = 1024)
      integer 
     $    ADI2D U_1 LO1,
     $    ADI2D U_1 UP1
      parameter(ADI2D U_1 LO1 = 1)
      parameter(ADI2D U_1 UP1 = 1024)
      integer 
     $    ADI2D U_1 LO2,
     $    ADI2D U_1 UP2
      parameter(ADI2D U_1 LO2 = 1)
      parameter(ADI2D U_1 UP2 = 128)
      integer 
     $    ADI2D UH_1 LO1,
     $    ADI2D UH_1 UP1
      parameter(ADI2D UH_1 LO1 = 1)
      parameter(ADI2D UH_1 UP1 = 1024)
      integer 
     $    ADI2D UH_1 LO2,
     $    ADI2D UH_1 UP2
      parameter(ADI2D UH_1 LO2 = 1)
      parameter(ADI2D UH_1 UP2 = 128)
      integer 
     $    ADI2D B_1 LO1,
     $    ADI2D B_1 UP1
      parameter(ADI2D B_1 LO1 = 1)
      parameter(ADI2D B_1 UP1 = 1024)
      integer 
     $    ADI2D B_1 LO2,
     $    ADI2D B_1 UP2
      parameter(ADI2D B_1 LO2 = 1)
      parameter(ADI2D B_1 UP2 = 128)
!
! That is all for ADI2D_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 1024
      RANGET(1, 1, 3) = 1024

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 128
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 8
      RANGEP(1, 1, 3) = 8
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 6)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 8)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

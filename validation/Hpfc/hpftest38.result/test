!
! File HPFTEST38_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST38_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
      REAL*4 TC(1:500, 1:500)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest38 running'
      PRINT *, 'thermo'
c
c initialization
      PRINT *, 'initializing'
c
c iterations... should be a test, but reductions are not accepted
      PRINT *, 'running'
c
c print results
      PRINT *, 'results:'
10    FORMAT(F8.2,F8.2,F8.2,F8.2,F8.2,F8.2,F8.2,F8.2)
! collecting distributed variable TC
      PSI2 = 1
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 2*PSI1+PSI2-2
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL4 BUFUPK
      DO ALPHA2 = 40, 250
         DO ALPHA1 = 250*PSI1-249, 30
            LALPHA1 = ALPHA1-250*PSI1+250
            LALPHA2 = ALPHA2
            BUF INDEX = BUF INDEX+1
            TC(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      DO I = 1, 30, 3
         WRITE (6, 10) TC(I,40), TC(I,70), TC(I,100), TC(I,130), TC(I
     &   ,160), TC(I,190), TC(I,220), TC(I,250)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      PRINT *, 'hpftest38 ended'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST38_host.f
!
!
! File HPFTEST38_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST38
!
!
! initializing array TC, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 500
      RANGEA(3, 1, 3) = 500
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 250
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 500
      RANGEA(3, 2, 3) = 500
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 250
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array TS, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 500
      RANGEA(2, 1, 3) = 500
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 250
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 500
      RANGEA(2, 2, 3) = 500
!
      RANGEA(2, 2, 4) = 2
      RANGEA(2, 2, 5) = 250
      RANGEA(2, 2, 6) = 1
      RANGEA(2, 2, 7) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array NORTH, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 500
      RANGEA(1, 1, 3) = 500
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 250
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 0
      ALIGN(1, 1, 2) = 0
      ALIGN(1, 1, 3) = 1
      ALIGN(1, 2, 1) = 1
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for HPFTEST38_init.h
!
!
! File HPFTEST38_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST38_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, 
     &I_21, I_22, I_23, I_24, I_25, I_26, I_27, I_28, I_29, I_30, 
     &I_31, I_32, I_33, I_34, I_35, I_4, I_5, I_6, I_7, I_8, I_9, I, 
     &K
      REAL*4 TC(0:251, 0:251), TS(1:250, 1:250), NORTH(1:250)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_33, I_34, I_35, 2, 499, 3, 2)
      CALL HPFC LOOP BOUNDS(I_29, I_30, I_31, 2, 499, 3, 1)
      CALL HPFC LOOP BOUNDS(I_25, I_26, I_27, 2, 499, 2, 2)
      CALL HPFC LOOP BOUNDS(I_21, I_22, I_23, 2, 499, 2, 1)
      CALL HPFC LOOP BOUNDS(I_17, I_18, I_19, 1, 500, 3, 2)
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 2, 500, 3, 1)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, 500, 3, 2)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, 500, 1, 2)
      IF (MY POS(1,1).EQ.1) THEN
         DO I_4 = I_5, I_6
            NORTH(I_4) = 250.0
         ENDDO
      ENDIF
      IF (MY POS(1,1).EQ.1) THEN
         DO I_8 = I_9, I_10
            TC(1,I_8) = NORTH(I_8)
            TS(1,I_8) = NORTH(I_8)
         ENDDO
      ENDIF
      DO I_12 = I_13, I_14
         DO I_16 = I_17, I_18
            TC(I_12,I_16) = 10.0
            TS(I_12,I_16) = 10.0
         ENDDO
      ENDDO
      DO K = 1, 100
c
c computation and copy back (dataparallel semantic)
! P(1:2, 2) send TC(1:250, 1) to (-1)
         IF (MY POS(2,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 1, 
     &      250, 1, 1, 1, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 1) send TC(1:250, 250) to (+1)
         IF (MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 1, 
     &      250, 1, 250, 250, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(2, 1:2) send TC(1, 1:250) to (-2)
         IF (MY POS(1,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 1, 
     &      1, 1, 1, 250, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1, 1:2) send TC(250, 1:250) to (+2)
         IF (MY POS(1,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC REAL4 PACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 250
     &      , 250, 1, 1, 250, 1)
            CALL HPFC SNDTO N
         ENDIF
! P(1:2, 1) receive TC(1:250, 251) from (+1)
         IF (MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 1, 
     &      250, 1, 251, 251, 1)
         ENDIF
! P(1:2, 2) receive TC(1:250, 0) from (-1)
         IF (MY POS(2,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 1, 
     &      250, 1, 0, 0, 1)
         ENDIF
! P(1, 1:2) receive TC(251, 1:250) from (+2)
         IF (MY POS(1,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(2)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 251
     &      , 251, 1, 1, 250, 1)
         ENDIF
! P(2, 1:2) receive TC(0, 1:250) from (-2)
         IF (MY POS(1,1).EQ.2) THEN
            CALL HPFC CMPNEIGHBOUR(-2)
            CALL HPFC RCVFR N
            CALL HPFC REAL4 UNPACK 2(TC, HPFTEST38 TC LO1, 
     &      HPFTEST38 TC UP1, HPFTEST38 TC LO2, HPFTEST38 TC UP2, 0, 
     &      0, 1, 1, 250, 1)
         ENDIF
         DO I_20 = I_21, I_22
            DO I_24 = I_25, I_26
               TS(I_20,I_24) = 0.25*(TC(I_20-1,I_24)+TC(I_20+1,I_24)+
     &         TC(I_20,I_24-1)+TC(I_20,I_24+1))
            ENDDO
         ENDDO
         DO I_28 = I_29, I_30
            DO I_32 = I_33, I_34
               TC(I_28,I_32) = TS(I_28,I_32)
            ENDDO
         ENDDO
      ENDDO
! collecting distributed variable TC
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.1) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA2 = 40, 250
            DO ALPHA1 = 250*PSI1-249, 30
               LALPHA1 = ALPHA1-250*PSI1+250
               LALPHA2 = ALPHA2
               BUF INDEX = BUF INDEX+1
               HPFC REAL4 BUFF(BUF INDEX) = TC(LALPHA1,LALPHA2)
            ENDDO
         ENDDO
         CALL HPFC REAL4 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST38_node.f
!
!
! File HPFTEST38_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST38
!
      integer 
     $    HPFTEST38 TC LO1,
     $    HPFTEST38 TC UP1
      parameter(HPFTEST38 TC LO1 = 0)
      parameter(HPFTEST38 TC UP1 = 251)
      integer 
     $    HPFTEST38 TC LO2,
     $    HPFTEST38 TC UP2
      parameter(HPFTEST38 TC LO2 = 0)
      parameter(HPFTEST38 TC UP2 = 251)
      integer 
     $    HPFTEST38 TS LO1,
     $    HPFTEST38 TS UP1
      parameter(HPFTEST38 TS LO1 = 1)
      parameter(HPFTEST38 TS UP1 = 250)
      integer 
     $    HPFTEST38 TS LO2,
     $    HPFTEST38 TS UP2
      parameter(HPFTEST38 TS LO2 = 1)
      parameter(HPFTEST38 TS UP2 = 250)
      integer 
     $    HPFTEST38 NORTH LO1,
     $    HPFTEST38 NORTH UP1
      parameter(HPFTEST38 NORTH LO1 = 1)
      parameter(HPFTEST38 NORTH UP1 = 250)
!
! That is all for HPFTEST38_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 500
      RANGET(1, 1, 3) = 500

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 500
      RANGET(1, 2, 3) = 500

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 250
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 250
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 3)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

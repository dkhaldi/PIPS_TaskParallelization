!
! File MATMUL_A_5_2_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(5).EQ.5) THEN
         IF (.NOT.LIVE MAPPING(2)) THEN
! send part
! remapping A[5]: A[5] -> A_1[2]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSIp1 = PSI1
               T LID = 2*PSIp1+PSIp2-2
! - broadcasting
               CALL pvmfinitsend(PvmDataRaw, HPFC BUFID)
               DO LALPHA2 = 1, 5
                  DO LALPHA1 = 1, 5
                     LALPHAp2 = LALPHA2+5*PSI2-5
                     LALPHAp1 = LALPHA1
                     BUF INDEX = BUF INDEX+1
                     HPFC REAL8 BUFF(BUF INDEX) = A(LALPHA1,LALPHA2)
                  ENDDO
               ENDDO
               DO PSIp2 = 1, 2
                  T LID = 2*PSIp1+PSIp2-2
                  IF (MY LID.NE.T LID) THEN
                     CALL pvmfsend(NODE TIDS(T LID), SEND CHANNELS(
     &               T LID), HPFC INFO)
                     SEND CHANNELS(T LID) = SEND CHANNELS(T LID)+2
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSI1 = PSIp1
               DO PSI2 = 1, 2
                  T LID = 2*PSI1+PSI2-2
                  IF (MY LID.NE.T LID) THEN
! - receiving
                     CALL pvmfrecv(NODE TIDS(T LID), RECV CHANNELS(
     &               T LID), HPFC BUFID)
                     RECV CHANNELS(T LID) = RECV CHANNELS(T LID)+2
                     DO LALPHA2 = 1, 5
                        DO LALPHA1 = 1, 5
                           LALPHAp2 = LALPHA2+5*PSI2-5
                           LALPHAp1 = LALPHA1
                           BUF INDEX = BUF INDEX+1
                           A_1(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - copying
                     DO LALPHA2 = 1, 5
                        DO LALPHA1 = 1, 5
                           LALPHAp2 = LALPHA2+5*PSI2-5
                           LALPHAp1 = LALPHA1
                           A_1(LALPHAp1,LALPHAp2) = A(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(2) = .TRUE.
         MSTATUS(5) = 2
      ENDIF
!
! That is all for MATMUL_A_5_2_node.h
!
!
! File MATMUL_B_4_1_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(4).EQ.4) THEN
         IF (.NOT.LIVE MAPPING(1)) THEN
! send part
! remapping B[4]: B[4] -> B_1[1]
            PSI1 = MY POS(1,1)
            PSI2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               PSIp2 = PSI2
               T LID = 2*PSIp1+PSIp2-2
! - broadcasting
               CALL pvmfinitsend(PvmDataRaw, HPFC BUFID)
               DO LALPHA2 = 1, 5
                  DO LALPHA1 = 1, 5
                     LALPHAp2 = LALPHA2
                     LALPHAp1 = LALPHA1+5*PSI1-5
                     BUF INDEX = BUF INDEX+1
                     HPFC REAL8 BUFF(BUF INDEX) = B(LALPHA1,LALPHA2)
                  ENDDO
               ENDDO
               DO PSIp1 = 1, 2
                  T LID = 2*PSIp1+PSIp2-2
                  IF (MY LID.NE.T LID) THEN
                     CALL pvmfsend(NODE TIDS(T LID), SEND CHANNELS(
     &               T LID), HPFC INFO)
                     SEND CHANNELS(T LID) = SEND CHANNELS(T LID)+2
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            PSIp2 = MY POS(2,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  PSI2 = PSIp2
                  T LID = 2*PSI1+PSI2-2
                  IF (MY LID.NE.T LID) THEN
! - receiving
                     CALL pvmfrecv(NODE TIDS(T LID), RECV CHANNELS(
     &               T LID), HPFC BUFID)
                     RECV CHANNELS(T LID) = RECV CHANNELS(T LID)+2
                     DO LALPHA2 = 1, 5
                        DO LALPHA1 = 1, 5
                           LALPHAp2 = LALPHA2
                           LALPHAp1 = LALPHA1+5*PSI1-5
                           BUF INDEX = BUF INDEX+1
                           B_1(LALPHAp1,LALPHAp2) = HPFC REAL8 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - copying
                     DO LALPHA2 = 1, 5
                        DO LALPHA1 = 1, 5
                           LALPHAp2 = LALPHA2
                           LALPHAp1 = LALPHA1+5*PSI1-5
                           B_1(LALPHAp1,LALPHAp2) = B(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(1) = .TRUE.
         MSTATUS(4) = 1
      ENDIF
!
! That is all for MATMUL_B_4_1_node.h
!
!
! File MATMUL_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "MATMUL_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
     &, J
      REAL*8 C(1:N, 1:N)
      CALL HPFC INIT HOST
c
c initialization of array A and B
c
c
c matrix multiply: C=A*B
c a remapping is needed to ensure data locality
c
      CALL HPFC HTIMEON
      CALL HPFC HTIMEOFF('matrix multiplication')
! collecting distributed variable C
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL8 BUFUPK
            DO ALPHA2 = 5*PSI2-4, MIN(10, 5*PSI2)
               DO ALPHA1 = 5*PSI1-4, MIN(10, 5*PSI1)
                  LALPHA1 = ALPHA1-5*PSI1+5
                  LALPHA2 = ALPHA2-5*PSI2+5
                  BUF INDEX = BUF INDEX+1
                  C(ALPHA1,ALPHA2) = HPFC REAL8 BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect
c
c output of the result
c
      PRINT *, ((C(I,J), I = 1, N), J = 1, N)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      CALL HPFC HOST END
      END
!
! That is all for MATMUL_host.f
!
!
! File MATMUL_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for MATMUL
!
!
! initializing array A, number 5
!
      NODIMA(5) = 2
      ATOT(5) = 1

      MSTATUS(5) = 5
      LIVEMAPPING(5) = .TRUE.

      RANGEA(5, 1, 1) = 1
      RANGEA(5, 1, 2) = 10
      RANGEA(5, 1, 3) = 10
!
      RANGEA(5, 1, 4) = 2
      RANGEA(5, 1, 5) = 5
      RANGEA(5, 1, 6) = 1
      RANGEA(5, 1, 7) = -1

      RANGEA(5, 2, 1) = 1
      RANGEA(5, 2, 2) = 10
      RANGEA(5, 2, 3) = 10
!
      RANGEA(5, 2, 4) = 2
      RANGEA(5, 2, 5) = 5
      RANGEA(5, 2, 6) = 1
      RANGEA(5, 2, 7) = -1

      ALIGN(5, 1, 1) = 1
      ALIGN(5, 1, 2) = 1
      ALIGN(5, 1, 3) = 0
      ALIGN(5, 2, 1) = 2
      ALIGN(5, 2, 2) = 1
      ALIGN(5, 2, 3) = 0
!
! initializing array B, number 4
!
      NODIMA(4) = 2
      ATOT(4) = 1

      MSTATUS(4) = 4
      LIVEMAPPING(4) = .TRUE.

      RANGEA(4, 1, 1) = 1
      RANGEA(4, 1, 2) = 10
      RANGEA(4, 1, 3) = 10
!
      RANGEA(4, 1, 4) = 2
      RANGEA(4, 1, 5) = 5
      RANGEA(4, 1, 6) = 1
      RANGEA(4, 1, 7) = -1

      RANGEA(4, 2, 1) = 1
      RANGEA(4, 2, 2) = 10
      RANGEA(4, 2, 3) = 10
!
      RANGEA(4, 2, 4) = 2
      RANGEA(4, 2, 5) = 5
      RANGEA(4, 2, 6) = 1
      RANGEA(4, 2, 7) = -1

      ALIGN(4, 1, 1) = 1
      ALIGN(4, 1, 2) = 1
      ALIGN(4, 1, 3) = 0
      ALIGN(4, 2, 1) = 2
      ALIGN(4, 2, 2) = 1
      ALIGN(4, 2, 3) = 0
!
! initializing array C, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 1

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 10
      RANGEA(3, 1, 3) = 10
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 5
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 10
      RANGEA(3, 2, 3) = 10
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 5
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array A_1, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 5
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 0

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = INTFLAG
!
! initializing array B_1, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 0

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 10
      RANGEA(1, 2, 3) = 10
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 5
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = INTFLAG
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for MATMUL_init.h
!
!
! File MATMUL_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "MATMUL_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_4, I_5
     &, I_6, I_7, I_8, I_9, I, J, K, HPFC INFO, LALPHAp1, LALPHAp2, 
     &HPFC BUFID, PSIp2, T LID, PSIp1
      REAL*8 A(1:5, 1:5), B(1:5, 1:5), C(1:5, 1:5), A_1(1:5, 1:N), 
     &B_1(1:N, 1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_17, I_18, I_19, 1, N, 3, 1)
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 1, N, 3, 2)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, N, 5, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 5, 2)
! all livenesss for B
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! all livenesss for A
      LIVE MAPPING(5) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
! direct remapping for B
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for A
      LIVE MAPPING(5) = .TRUE.
      MSTATUS(5) = 5
c
c initialization of array A and B
c
      J = I_7
      DO I_4 = I_5, I_6
         J = J+1
         I = I_11
         DO I_8 = I_9, I_10
            I = I+1
            A(I_8,I_4) = REAL(I-N/2)/REAL(J)
            B(I_8,I_4) = REAL(J-3)/REAL(I)
         ENDDO
      ENDDO
c
c matrix multiply: C=A*B
c a remapping is needed to ensure data locality
c
      CALL HPFC NTIMEON
! begin remappings
      include 'MATMUL_A_5_2_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(5) = .FALSE.
! end of liveness management
! end remappings
! begin remappings
      include 'MATMUL_B_4_1_node.h'
! liveness management
! clean live set for B
      LIVE MAPPING(4) = .FALSE.
! end of liveness management
! end remappings
      DO I_12 = I_13, I_14
         DO I_16 = I_17, I_18
            C(I_16,I_12) = 0.
            DO K = 1, N
               C(I_16,I_12) = C(I_16,I_12)+A_1(I_16,K)*B_1(K,I_12)
            ENDDO
         ENDDO
      ENDDO
      CALL HPFC NTIMEOFF('matrix multiplication')
! collecting distributed variable C
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = 5*PSI2-4, MIN(10, 5*PSI2)
         DO ALPHA1 = 5*PSI1-4, MIN(10, 5*PSI1)
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = ALPHA2-5*PSI2+5
            BUF INDEX = BUF INDEX+1
            HPFC REAL8 BUFF(BUF INDEX) = C(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC REAL8 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for MATMUL_node.f
!
!
! File MATMUL_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for MATMUL
!
      integer 
     $    MATMUL A LO1,
     $    MATMUL A UP1
      parameter(MATMUL A LO1 = 1)
      parameter(MATMUL A UP1 = 5)
      integer 
     $    MATMUL A LO2,
     $    MATMUL A UP2
      parameter(MATMUL A LO2 = 1)
      parameter(MATMUL A UP2 = 5)
      integer 
     $    MATMUL B LO1,
     $    MATMUL B UP1
      parameter(MATMUL B LO1 = 1)
      parameter(MATMUL B UP1 = 5)
      integer 
     $    MATMUL B LO2,
     $    MATMUL B UP2
      parameter(MATMUL B LO2 = 1)
      parameter(MATMUL B UP2 = 5)
      integer 
     $    MATMUL C LO1,
     $    MATMUL C UP1
      parameter(MATMUL C LO1 = 1)
      parameter(MATMUL C UP1 = 5)
      integer 
     $    MATMUL C LO2,
     $    MATMUL C UP2
      parameter(MATMUL C LO2 = 1)
      parameter(MATMUL C UP2 = 5)
      integer 
     $    MATMUL A_1 LO1,
     $    MATMUL A_1 UP1
      parameter(MATMUL A_1 LO1 = 1)
      parameter(MATMUL A_1 UP1 = 5)
      integer 
     $    MATMUL A_1 LO2,
     $    MATMUL A_1 UP2
      parameter(MATMUL A_1 LO2 = 1)
      parameter(MATMUL A_1 UP2 = 10)
      integer 
     $    MATMUL B_1 LO1,
     $    MATMUL B_1 UP1
      parameter(MATMUL B_1 LO1 = 1)
      parameter(MATMUL B_1 UP1 = 10)
      integer 
     $    MATMUL B_1 LO2,
     $    MATMUL B_1 UP2
      parameter(MATMUL B_1 LO2 = 1)
      parameter(MATMUL B_1 UP2 = 5)
!
! That is all for MATMUL_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 5)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

!
! File HPFTEST06_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST06_parameters.h"
      INTEGER I_8, J
      LOGICAL L_0
      CALL HPFC INIT HOST
      J = 2
      CALL HPFC CMPOWNERS(1, 1, 0, 0, 0, 0, 0, 0)
      CALL HPFC RCVFR HNBCAST S(HPFC INTEGER4, I_8)
      L_0 = I_8.EQ.1
      IF (L_0) THEN
      ENDIF
      IF (J.EQ.1) J = 1000
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST06_host.f
!
!
! File HPFTEST06_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST06
!
!
! initializing array G, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 5
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for HPFTEST06_init.h
!
!
! File HPFTEST06_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST06_parameters.h"
      INTEGER I_10, I_2, I_4, I_5, I_7, I_9, I_8, I_6, I_3, J, I, I_0
     &, I_1
      INTEGER G(1:5)
      LOGICAL L_0
      CALL HPFC INIT NODE
      J = 2
      CALL HPFC CMPCOMPUTER(1, 1, 0, 0, 0, 0, 0, 0)
      IF (HPFC COMPUTERP()) THEN
         I_2 = MOD(1-1, 5)+1
         G(I_2) = 1
      ENDIF
      DO I = J, 10
         I_1 = I_3
         I_0 = I-1
         CALL HPFC CMPCOMPUTER(1, I_1, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            CALL HPFC CMPOWNERS(1, I_0, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_4 = MOD(I_0-1, 5)+1
               I_3 = G(I_4)
            ELSE
               CALL HPFC RCVFR S(HPFC INTEGER4, I_3)
            ENDIF
            I_6 = I
            I_7 = MOD(I_1-1, 5)+1
            G(I_7) = I_6
         ELSE
            CALL HPFC CMPOWNERS(1, I_0, 0, 0, 0, 0, 0, 0)
            IF (HPFC SENDERP()) THEN
               I_5 = MOD(I_0-1, 5)+1
               CALL HPFC SNDTO C(HPFC INTEGER4, G(I_5))
            ENDIF
         ENDIF
      ENDDO
      CALL HPFC CMPOWNERS(1, 1, 0, 0, 0, 0, 0, 0)
      IF (HPFC OWNERP()) THEN
         I_9 = MOD(1-1, 5)+1
         I_8 = G(I_9)
         CALL HPFC NSNDTO HA(HPFC INTEGER4, I_8)
      ELSE
         CALL HPFC RCVFR HNBCAST S(HPFC INTEGER4, I_8)
      ENDIF
      L_0 = I_8.EQ.1
      IF (L_0) THEN
         CALL HPFC CMPCOMPUTER(1, 1, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            I_10 = MOD(1-1, 5)+1
            G(I_10) = 1000
         ENDIF
      ENDIF
      IF (J.EQ.1) J = 1000
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST06_node.f
!
!
! File HPFTEST06_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST06
!
      integer 
     $    HPFTEST06 G LO1,
     $    HPFTEST06 G UP1
      parameter(HPFTEST06 G LO1 = 1)
      parameter(HPFTEST06 G UP1 = 5)
!
! That is all for HPFTEST06_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 1)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 2)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

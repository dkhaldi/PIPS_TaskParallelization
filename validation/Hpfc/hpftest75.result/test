!
! File DLA_A_1_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.1) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping A[3]: A_2[1] -> A[3]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = 1, 2
                  DO PSIp2 = (PSI1+1)/2, MIN(2, 1+PSI1/2)
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - lazy sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA2 = MAX(1, -3*PSI1+5*PSIp2-1), MIN(3
     &                  , -3*PSI1+5*PSIp2+3)
                           DO LALPHA1 = 5*PSIp1-4, 5*PSIp1
                              LALPHAp2 = LALPHA2+3*PSI1-5*PSIp2+2
                              LALPHAp1 = LALPHA1-5*PSIp1+5
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = A_2(
     &                        LALPHA1,LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 CALL HPFC BROADCAST 0(T LID)
                                 BUF INDEX = 0
                                 SEND NOT INITIALIZED = .TRUE.
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,2)
            PSIp2 = MY POS(2,2)
            IF (MY LID.LE.4) THEN
               DO PSI1 = PSIp2, 2*PSIp2
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = MAX(1, -3*PSI1+5*PSIp2-1), MIN(3, 
     &               -3*PSI1+5*PSIp2+3)
                        DO LALPHA1 = 5*PSIp1-4, 5*PSIp1
                           LALPHAp2 = LALPHA2+3*PSI1-5*PSIp2+2
                           LALPHAp1 = LALPHA1-5*PSIp1+5
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL4 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           A(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = MAX(1, -3*PSI1+5*PSIp2-1), MIN(3, 
     &               -3*PSI1+5*PSIp2+3)
                        DO LALPHA1 = 5*PSIp1-4, 5*PSIp1
                           LALPHAp2 = LALPHA2+3*PSI1-5*PSIp2+2
                           LALPHAp1 = LALPHA1-5*PSIp1+5
                           A(LALPHAp1,LALPHAp2) = A_2(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(3) = 3
      ENDIF
!
! That is all for DLA_A_1_3_node.h
!
!
! File DLA_A_2_3_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.2) THEN
         IF (.NOT.LIVE MAPPING(3)) THEN
! send part
! remapping A[3]: A_1[2] -> A[3]
            PSI1 = MY POS(1,1)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = (PSI1+1)/2, MIN(2, PSI1)
                  DO PSIp2 = 1, 2
                     T LID = 2*PSIp1+PSIp2-2
                     IF (MY LID.NE.T LID) THEN
! - lazy sending
                        BUF INDEX = 0
                        SEND NOT INITIALIZED = .TRUE.
                        DO LALPHA2 = 5*PSIp2-4, 5*PSIp2
                           DO LALPHA1 = MAX(1, -3*PSI1+5*PSIp1-1), 
     &                     MIN(-3*PSI1+5*PSIp1+3, 3)
                              LALPHAp2 = LALPHA2-5*PSIp2+5
                              LALPHAp1 = LALPHA1+3*PSI1-5*PSIp1+2
                              BUF INDEX = BUF INDEX+1
                              HPFC REAL4 BUFF(BUF INDEX) = A_1(
     &                        LALPHA1,LALPHA2)
                              IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                        ) THEN
                                 CALL HPFC REAL4 BUFPCK
                                 CALL HPFC BROADCAST 0(T LID)
                                 BUF INDEX = 0
                                 SEND NOT INITIALIZED = .TRUE.
                              ENDIF
                           ENDDO
                        ENDDO
                        IF (BUF INDEX.NE.0) THEN
                           CALL HPFC REAL4 BUFPCK
                           CALL HPFC BROADCAST 0(T LID)
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,2)
            PSIp2 = MY POS(2,2)
            IF (MY LID.LE.4) THEN
               DO PSI1 = PSIp1, 2*PSIp1
                  T LID = PSI1
                  IF (MY LID.NE.T LID) THEN
! - lazy receiving
                     BUF INDEX = 0
                     RECEIVED NOT PERFORMED = .TRUE.
                     SIZE OF RECEIVED BUFFER = 0
                     DO LALPHA2 = 5*PSIp2-4, 5*PSIp2
                        DO LALPHA1 = MAX(1, -3*PSI1+5*PSIp1-1), MIN(
     &                  -3*PSI1+5*PSIp1+3, 3)
                           LALPHAp2 = LALPHA2-5*PSIp2+5
                           LALPHAp1 = LALPHA1+3*PSI1-5*PSIp1+2
                           IF (BUF INDEX.EQ.SIZE OF RECEIVED BUFFER
     &                     ) THEN
                              RECEIVED NOT PERFORMED = .TRUE.
                              CALL HPFC REAL4 BUFUPK(T LID)
                              BUF INDEX = 0
                           ENDIF
                           BUF INDEX = BUF INDEX+1
                           A(LALPHAp1,LALPHAp2) = HPFC REAL4 BUFF(
     &                     BUF INDEX)
                        ENDDO
                     ENDDO
                  ELSE
! - lazy copying
                     DO LALPHA2 = 5*PSIp2-4, 5*PSIp2
                        DO LALPHA1 = MAX(1, -3*PSI1+5*PSIp1-1), MIN(
     &                  -3*PSI1+5*PSIp1+3, 3)
                           LALPHAp2 = LALPHA2-5*PSIp2+5
                           LALPHAp1 = LALPHA1+3*PSI1-5*PSIp1+2
                           A(LALPHAp1,LALPHAp2) = A_1(LALPHA1,LALPHA2
     &                     )
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(3) = .TRUE.
         MSTATUS(3) = 3
      ENDIF
!
! That is all for DLA_A_2_3_node.h
!
!
! File DLA_A_3_1_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.3) THEN
         IF (.NOT.LIVE MAPPING(1)) THEN
! send part
! remapping A[3]: A[3] -> A_2[1]
            PSI1 = MY POS(1,2)
            PSI2 = MY POS(2,2)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = PSI2, 2*PSI2
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = MAX(1, -5*PSI2+3*PSIp1+3), MIN(5, 
     &               -5*PSI2+PSIp1+11, -5*PSI2+3*PSIp1+5)
                        DO LALPHA1 = 1, 5
                           LALPHAp2 = LALPHA2+5*PSI2-3*PSIp1-2
                           LALPHAp1 = LALPHA1+5*PSI1-5
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL4 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL4 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = 1, 2
                  DO PSI2 = (PSIp1+1)/2, MIN(2, PSIp1)
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - lazy receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA2 = MAX(1, -5*PSI2+3*PSIp1+3), MIN(5
     &                  , -5*PSI2+PSIp1+11, -5*PSI2+3*PSIp1+5)
                           DO LALPHA1 = 1, 5
                              LALPHAp2 = LALPHA2+5*PSI2-3*PSIp1-2
                              LALPHAp1 = LALPHA1+5*PSI1-5
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 RECEIVED NOT PERFORMED = .TRUE.
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              A_2(LALPHAp1,LALPHAp2) = 
     &                        HPFC REAL4 BUFF(BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - lazy copying
                        DO LALPHA2 = MAX(1, -5*PSI2+3*PSIp1+3), MIN(5
     &                  , -5*PSI2+PSIp1+11, -5*PSI2+3*PSIp1+5)
                           DO LALPHA1 = 1, 5
                              LALPHAp2 = LALPHA2+5*PSI2-3*PSIp1-2
                              LALPHAp1 = LALPHA1+5*PSI1-5
                              A_2(LALPHAp1,LALPHAp2) = A(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(1) = .TRUE.
         MSTATUS(3) = 1
      ENDIF
!
! That is all for DLA_A_3_1_node.h
!
!
! File DLA_A_3_2_node.h
! This file has been automatically generated by the HPF compiler
!
      IF (MSTATUS(3).EQ.3) THEN
         IF (.NOT.LIVE MAPPING(2)) THEN
! send part
! remapping A[3]: A[3] -> A_1[2]
            PSI1 = MY POS(1,2)
            PSI2 = MY POS(2,2)
            IF (MY LID.LE.4) THEN
               DO PSIp1 = PSI1, 2*PSI1
                  T LID = PSIp1
                  IF (MY LID.NE.T LID) THEN
! - lazy sending
                     BUF INDEX = 0
                     SEND NOT INITIALIZED = .TRUE.
                     DO LALPHA2 = 1, 5
                        DO LALPHA1 = MAX(1, -5*PSI1+3*PSIp1+3), MIN(
     &                  -5*PSI1+PSIp1+11, -5*PSI1+3*PSIp1+5, 5)
                           LALPHAp2 = LALPHA2+5*PSI2-5
                           LALPHAp1 = LALPHA1+5*PSI1-3*PSIp1-2
                           BUF INDEX = BUF INDEX+1
                           HPFC REAL4 BUFF(BUF INDEX) = A(LALPHA1,
     &                     LALPHA2)
                           IF (BUF INDEX.EQ.HPFC REAL4 BUFF SIZE
     &                     ) THEN
                              CALL HPFC REAL4 BUFPCK
                              CALL HPFC BROADCAST 0(T LID)
                              BUF INDEX = 0
                              SEND NOT INITIALIZED = .TRUE.
                           ENDIF
                        ENDDO
                     ENDDO
                     IF (BUF INDEX.NE.0) THEN
                        CALL HPFC REAL4 BUFPCK
                        CALL HPFC BROADCAST 0(T LID)
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
! receive part
            PSIp1 = MY POS(1,1)
            IF (MY LID.LE.4) THEN
               DO PSI1 = (PSIp1+1)/2, MIN(2, PSIp1)
                  DO PSI2 = 1, 2
                     T LID = 2*PSI1+PSI2-2
                     IF (MY LID.NE.T LID) THEN
! - lazy receiving
                        BUF INDEX = 0
                        RECEIVED NOT PERFORMED = .TRUE.
                        SIZE OF RECEIVED BUFFER = 0
                        DO LALPHA2 = 1, 5
                           DO LALPHA1 = MAX(1, -5*PSI1+3*PSIp1+3), 
     &                     MIN(-5*PSI1+PSIp1+11, -5*PSI1+3*PSIp1+5, 5
     &                     )
                              LALPHAp2 = LALPHA2+5*PSI2-5
                              LALPHAp1 = LALPHA1+5*PSI1-3*PSIp1-2
                              IF (BUF INDEX.EQ.
     &                        SIZE OF RECEIVED BUFFER) THEN
                                 RECEIVED NOT PERFORMED = .TRUE.
                                 CALL HPFC REAL4 BUFUPK(T LID)
                                 BUF INDEX = 0
                              ENDIF
                              BUF INDEX = BUF INDEX+1
                              A_1(LALPHAp1,LALPHAp2) = 
     &                        HPFC REAL4 BUFF(BUF INDEX)
                           ENDDO
                        ENDDO
                     ELSE
! - lazy copying
                        DO LALPHA2 = 1, 5
                           DO LALPHA1 = MAX(1, -5*PSI1+3*PSIp1+3), 
     &                     MIN(-5*PSI1+PSIp1+11, -5*PSI1+3*PSIp1+5, 5
     &                     )
                              LALPHAp2 = LALPHA2+5*PSI2-5
                              LALPHAp1 = LALPHA1+5*PSI1-3*PSIp1-2
                              A_1(LALPHAp1,LALPHAp2) = A(LALPHA1,
     &                        LALPHA2)
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
! end of remapping
         ENDIF
         LIVE MAPPING(2) = .TRUE.
         MSTATUS(3) = 2
      ENDIF
!
! That is all for DLA_A_3_2_node.h
!
!
! File DLA_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DLA_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, T LID, ANSWER
      REAL*4 A(1:10, 1:10)
      LOGICAL L_0
      CALL HPFC INIT HOST
      PRINT *, '1 or 0'
      READ *, ANSWER
! updating shared variable ANSWER
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = ANSWER
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      L_0 = ANSWER.EQ.1
      IF (L_0) THEN
      ELSE
! collecting distributed variable A_2
         PSI1 = 2
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC REAL4 BUFUPK
         ALPHA2 = 5
         ALPHA1 = 5
         LALPHA1 = 5
         LALPHA2 = 2
         BUF INDEX = BUF INDEX+1
         A(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
! end of collect
         PRINT *, A(5,5)
      ENDIF
      CALL HPFC HOST END
      END
!
! That is all for DLA_host.f
!
!
! File DLA_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for DLA
!
!
! initializing array A, number 3
!
      NODIMA(3) = 2
      ATOT(3) = 3

      MSTATUS(3) = 3
      LIVEMAPPING(3) = .TRUE.

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 10
      RANGEA(3, 1, 3) = 10
!
      RANGEA(3, 1, 4) = 2
      RANGEA(3, 1, 5) = 5
      RANGEA(3, 1, 6) = 1
      RANGEA(3, 1, 7) = -1

      RANGEA(3, 2, 1) = 1
      RANGEA(3, 2, 2) = 10
      RANGEA(3, 2, 3) = 10
!
      RANGEA(3, 2, 4) = 2
      RANGEA(3, 2, 5) = 5
      RANGEA(3, 2, 6) = 1
      RANGEA(3, 2, 7) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
      ALIGN(3, 2, 1) = 2
      ALIGN(3, 2, 2) = 1
      ALIGN(3, 2, 3) = 0
!
! initializing array A_1, number 2
!
      NODIMA(2) = 2
      ATOT(2) = 2

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 2
      RANGEA(2, 1, 5) = 3
      RANGEA(2, 1, 6) = 1
      RANGEA(2, 1, 7) = -1

      RANGEA(2, 2, 1) = 1
      RANGEA(2, 2, 2) = 10
      RANGEA(2, 2, 3) = 10
!
      RANGEA(2, 2, 4) = 0

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
      ALIGN(2, 2, 1) = 2
      ALIGN(2, 2, 2) = 1
      ALIGN(2, 2, 3) = 0
!
! initializing array A_2, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 0

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 10
      RANGEA(1, 2, 3) = 10
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 3
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for DLA_init.h
!
!
! File DLA_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "DLA_parameters.h"
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, I_10, I_11, 
     &I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_20, I_21, 
     &I_22, I_23, I_24, I_25, I_26, I_27, I_28, I_9, I, J, ANSWER, 
     &I_8, LALPHAp1, LALPHAp2, PSIp1, T LID, PSI2, PSIp2
      REAL*4 A(1:5, 1:5), A_1(1:3, 1:10), A_2(1:10, 1:3)
      LOGICAL L_0
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_26, I_27, I_28, 1, 10, 3, 1)
      CALL HPFC LOOP BOUNDS(I_22, I_23, I_24, 1, 10, 3, 2)
      CALL HPFC LOOP BOUNDS(I_18, I_19, I_20, 1, 10, 2, 1)
      CALL HPFC LOOP BOUNDS(I_14, I_15, I_16, 1, 10, 3, 1)
      CALL HPFC LOOP BOUNDS(I_10, I_11, I_12, 1, 10, 3, 2)
! all livenesss for A
      LIVE MAPPING(3) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! direct remapping for A
      LIVE MAPPING(3) = .TRUE.
      MSTATUS(3) = 3
      J = I_12
      DO I_9 = I_10, I_11
         J = J+1
         I = I_16
         DO I_13 = I_14, I_15
            I = I+1
            A(I_13,I_9) = I+J
         ENDDO
      ENDDO
! updating shared variable ANSWER
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      ANSWER = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      L_0 = ANSWER.EQ.1
      IF (L_0) THEN
! begin remappings
      include 'DLA_A_3_2_node.h'
! liveness management
! clean live set for A
         LIVE MAPPING(3) = .FALSE.
         LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
         DO J = 1, 9
            DO I_17 = I_18, I_19
               I_8 = J+1
               A_1(I_17,J) = A_1(I_17,J)+A_1(I_17,I_8)
            ENDDO
         ENDDO
      ELSE
! begin remappings
      include 'DLA_A_3_1_node.h'
! liveness management
! clean live set for A
         LIVE MAPPING(2) = .FALSE.
! end of liveness management
! end remappings
! collecting distributed variable A_2
         PSI1 = MY POS(1,1)
         IF (PSI1.EQ.2) THEN
            BUF INDEX = 0
            SEND NOT INITIALIZED = .TRUE.
            ALPHA2 = 5
            ALPHA1 = 5
            LALPHA1 = 5
            LALPHA2 = 2
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = A_2(LALPHA1,LALPHA2)
            CALL HPFC REAL4 BUFPCK
            CALL HPFC SND TO HOST
         ENDIF
! end of collect
      ENDIF
! begin remappings
      include 'DLA_A_2_3_node.h'
      include 'DLA_A_1_3_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(2) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! end of liveness management
! end remappings
      DO I_21 = I_22, I_23
         DO I_25 = I_26, I_27
            A(I_25,I_21) = A(I_25,I_21)+1
         ENDDO
      ENDDO
      CALL HPFC NODE END
      END
!
! That is all for DLA_node.f
!
!
! File DLA_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for DLA
!
      integer 
     $    DLA A LO1,
     $    DLA A UP1
      parameter(DLA A LO1 = 1)
      parameter(DLA A UP1 = 5)
      integer 
     $    DLA A LO2,
     $    DLA A UP2
      parameter(DLA A LO2 = 1)
      parameter(DLA A UP2 = 5)
      integer 
     $    DLA A_1 LO1,
     $    DLA A_1 UP1
      parameter(DLA A_1 LO1 = 1)
      parameter(DLA A_1 UP1 = 3)
      integer 
     $    DLA A_1 LO2,
     $    DLA A_1 UP2
      parameter(DLA A_1 LO2 = 1)
      parameter(DLA A_1 UP2 = 10)
      integer 
     $    DLA A_2 LO1,
     $    DLA A_2 UP1
      parameter(DLA A_2 LO1 = 1)
      parameter(DLA A_2 UP1 = 10)
      integer 
     $    DLA A_2 LO2,
     $    DLA A_2 UP2
      parameter(DLA A_2 LO2 = 1)
      parameter(DLA A_2 UP2 = 3)
!
! That is all for DLA_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T_2, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 10
      RANGET(1, 2, 3) = 10

      DIST(1, 1, 1) = 2
      DIST(1, 1, 2) = 3
!
! initializing template T_1, number 2
!
      NODIMT(2) = 2
      TTOP(2) = 1

      RANGET(2, 1, 1) = 1
      RANGET(2, 1, 2) = 10
      RANGET(2, 1, 3) = 10

      RANGET(2, 2, 1) = 1
      RANGET(2, 2, 2) = 10
      RANGET(2, 2, 3) = 10

      DIST(2, 1, 1) = 1
      DIST(2, 1, 2) = 3
!
! initializing template T, number 3
!
      NODIMT(3) = 2
      TTOP(3) = 2

      RANGET(3, 1, 1) = 1
      RANGET(3, 1, 2) = 10
      RANGET(3, 1, 3) = 10

      RANGET(3, 2, 1) = 1
      RANGET(3, 2, 2) = 10
      RANGET(3, 2, 3) = 10

      DIST(3, 1, 1) = 1
      DIST(3, 1, 2) = 5
      DIST(3, 2, 1) = 2
      DIST(3, 2, 2) = 5
!
! Processors Initializations
!
!
! initializing processors Q, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 4
      RANGEP(1, 1, 3) = 4
!
! initializing processors P, number 2
!
      NODIMP(2) = 2

      RANGEP(2, 1, 1) = 1
      RANGEP(2, 1, 2) = 2
      RANGEP(2, 1, 3) = 2

      RANGEP(2, 2, 1) = 1
      RANGEP(2, 2, 2) = 2
      RANGEP(2, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 3)
      parameter(REALNBOFTEMPLATES = 3)
      parameter(REALNBOFPROCESSORS = 2)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

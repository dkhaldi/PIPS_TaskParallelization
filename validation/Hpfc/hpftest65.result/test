!
! File HPFTEST65_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST65_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
     &, J
      REAL*4 B(1:N, 1:N), A(1:N)
      CALL HPFC INIT HOST
      PRINT *, 'hpftest65 running'
      DO I = 1, N
         A(I) = 111.0/I
      ENDDO
! collecting distributed variable B
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL4 BUFUPK
            DO ALPHA2 = 6*PSI2+39, 5*PSI2+45
               DO ALPHA1 = 6*PSI1+39, 5*PSI1+45
                  LALPHA1 = ALPHA1-50*PSI1+50
                  LALPHA2 = ALPHA2-50*PSI2+50
                  BUF INDEX = BUF INDEX+1
                  B(ALPHA1,ALPHA2) = HPFC REAL4 BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect
      PRINT *, ((B(I,J), I = 45, 55), J = 45, 55)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST65_host.f
!
!
! File HPFTEST65_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST65
!
!
! initializing array B, number 1
!
      NODIMA(1) = 2
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 100
      RANGEA(1, 1, 3) = 100
!
      RANGEA(1, 1, 4) = 2
      RANGEA(1, 1, 5) = 50
      RANGEA(1, 1, 6) = 1
      RANGEA(1, 1, 7) = -1

      RANGEA(1, 2, 1) = 1
      RANGEA(1, 2, 2) = 100
      RANGEA(1, 2, 3) = 100
!
      RANGEA(1, 2, 4) = 2
      RANGEA(1, 2, 5) = 50
      RANGEA(1, 2, 6) = 1
      RANGEA(1, 2, 7) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
      ALIGN(1, 2, 1) = 2
      ALIGN(1, 2, 2) = 1
      ALIGN(1, 2, 3) = 0
!
! That is all for HPFTEST65_init.h
!
!
! File HPFTEST65_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST65_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER*4 N
      PARAMETER (N = 100)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_0, I_1
     &, I_2, I_3, I_4, I_5, I_6, I_7, I, J
      REAL*4 A(1:N), B(1:50, 1:50), TMP
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 1, 1)
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, N, 1, 2)
      DO I = 1, N
         A(I) = 111.0/I
      ENDDO
      I = I_3
      DO I_0 = I_1, I_2
         I = I+1
         TMP = A(I)+7.5*I
         J = I_7
         DO I_4 = I_5, I_6
            J = J+1
            B(I_4,I_0) = TMP+17.3*J
         ENDDO
      ENDDO
! collecting distributed variable B
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = 6*PSI2+39, 5*PSI2+45
         DO ALPHA1 = 6*PSI1+39, 5*PSI1+45
            LALPHA1 = ALPHA1-50*PSI1+50
            LALPHA2 = ALPHA2-50*PSI2+50
            BUF INDEX = BUF INDEX+1
            HPFC REAL4 BUFF(BUF INDEX) = B(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC REAL4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST65_node.f
!
!
! File HPFTEST65_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST65
!
      integer 
     $    HPFTEST65 B LO1,
     $    HPFTEST65 B UP1
      parameter(HPFTEST65 B LO1 = 1)
      parameter(HPFTEST65 B UP1 = 50)
      integer 
     $    HPFTEST65 B LO2,
     $    HPFTEST65 B UP2
      parameter(HPFTEST65 B LO2 = 1)
      parameter(HPFTEST65 B UP2 = 50)
!
! That is all for HPFTEST65_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 2
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 100
      RANGET(1, 1, 3) = 100

      RANGET(1, 2, 1) = 1
      RANGET(1, 2, 2) = 100
      RANGET(1, 2, 3) = 100

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = 50
      DIST(1, 2, 1) = 2
      DIST(1, 2, 2) = 50
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 2

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2

      RANGEP(1, 2, 1) = 1
      RANGEP(1, 2, 2) = 2
      RANGEP(1, 2, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 1)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 4)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

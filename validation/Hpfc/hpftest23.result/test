!
! File HPFTEST23_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST23_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, T LID, I, I_0, I_1, I_2
      INTEGER J(1:10), K(1:10)
      LOGICAL L_0
      CALL HPFC INIT HOST
      PRINT *, 'hpftest23 running'
! collecting distributed variable J
      DO PSI1 = 1, 3
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 1, (-PSI1+9)/2
            ALPHA1 = 3*LALPHA1+PSI1-3
            BUF INDEX = BUF INDEX+1
            J(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
! collecting distributed variable K
      DO PSI1 = 1, 3
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 1, (-PSI1+9)/2
            ALPHA1 = 3*LALPHA1+PSI1-3
            BUF INDEX = BUF INDEX+1
            K(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      DO I = 1, 10
         I_0 = K(I)
         PRINT *, 'j(k(i)) = ', J(I_0)
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! collecting distributed variable J
      DO PSI1 = 1, 3
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 1, (-PSI1+9)/2
            ALPHA1 = 3*LALPHA1+PSI1-3
            BUF INDEX = BUF INDEX+1
            J(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
! collecting distributed variable K
      DO PSI1 = 1, 3
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 3+HPFC DIVIDE(-PSI1, 2), (-PSI1+7)/2
            ALPHA1 = 3*LALPHA1+PSI1-3
            BUF INDEX = BUF INDEX+1
            K(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      I_1 = K(3)
      I_2 = K(7)
      L_0 = J(I_1).LT.J(I_2)
      IF (L_0) PRINT *, 'quite interesting a property...'
      PRINT *, 'hpftest23 end'
      CALL HPFC HOST END
      END
!
! That is all for HPFTEST23_host.f
!
!
! File HPFTEST23_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for HPFTEST23
!
!
! initializing array J, number 2
!
      NODIMA(2) = 1
      ATOT(2) = 1

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 3
      RANGEA(2, 1, 5) = 1
      RANGEA(2, 1, 6) = 3
      RANGEA(2, 1, 7) = 0
      RANGEA(2, 1, 8) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
!
! initializing array K, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 1

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 3
      RANGEA(1, 1, 5) = 1
      RANGEA(1, 1, 6) = 3
      RANGEA(1, 1, 7) = 0
      RANGEA(1, 1, 8) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for HPFTEST23_init.h
!
!
! File HPFTEST23_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "HPFTEST23_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, I_4, I_6, I_7, I_5, I_3, I
      INTEGER J(1:4), K(1:4)
      CALL HPFC INIT NODE
      DO I = 1, 10
         CALL HPFC CMPCOMPUTER(2, I, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            I_5 = MOD(I+6, 10)+1
            I_3 = 11-I
            I_4 = HPFC LOCALINDGAMMA(2, 1, I)
            J(I_4) = I_3
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_6 = HPFC LOCALINDGAMMA(1, 1, I)
               K(I_6) = I_5
            ELSE
               CALL HPFC SNDTO O(HPFC INTEGER4, I_5)
            ENDIF
         ELSE
            CALL HPFC CMPOWNERS(1, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_7 = HPFC LOCALINDGAMMA(1, 1, I)
               CALL HPFC RCVFR C(HPFC INTEGER4, K(I_7))
            ENDIF
         ENDIF
      ENDDO
! collecting distributed variable J
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 1, (-PSI1+9)/2
         ALPHA1 = 3*LALPHA1+PSI1-3
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = J(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! collecting distributed variable K
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 1, (-PSI1+9)/2
         ALPHA1 = 3*LALPHA1+PSI1-3
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = K(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! collecting distributed variable J
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 1, (-PSI1+9)/2
         ALPHA1 = 3*LALPHA1+PSI1-3
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = J(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! collecting distributed variable K
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 3+HPFC DIVIDE(-PSI1, 2), (-PSI1+7)/2
         ALPHA1 = 3*LALPHA1+PSI1-3
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = K(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
      CALL HPFC NODE END
      END
!
! That is all for HPFTEST23_node.f
!
!
! File HPFTEST23_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for HPFTEST23
!
      integer 
     $    HPFTEST23 J LO1,
     $    HPFTEST23 J UP1
      parameter(HPFTEST23 J LO1 = 1)
      parameter(HPFTEST23 J UP1 = 4)
      integer 
     $    HPFTEST23 K LO1,
     $    HPFTEST23 K UP1
      parameter(HPFTEST23 K LO1 = 1)
      parameter(HPFTEST23 K UP1 = 4)
!
! That is all for HPFTEST23_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template T, number 1
!
      NODIMT(1) = 1
      TTOP(1) = 1

      RANGET(1, 1, 1) = 1
      RANGET(1, 1, 2) = 10
      RANGET(1, 1, 3) = 10

      DIST(1, 1, 1) = 1
      DIST(1, 1, 2) = -1
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 3
      RANGEP(1, 1, 3) = 3
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 2)
      parameter(REALNBOFTEMPLATES = 1)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 3)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

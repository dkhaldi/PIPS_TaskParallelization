!
! File KILLS_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "KILLS_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, T LID
      INTEGER C(1:10), B(1:10), A(1:10)
      CALL HPFC INIT HOST


! collecting distributed variable C_1
      DO PSI1 = 1, 2
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = (-PSI1+11)/2, 4
            ALPHA1 = 8
            BUF INDEX = BUF INDEX+1
            C(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
! collecting distributed variable B_1
      DO PSI1 = 1, 2
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 3, (-PSI1+7)/2
            ALPHA1 = 5
            BUF INDEX = BUF INDEX+1
            B(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
! collecting distributed variable A_1
      DO PSI1 = 1, 2
         BUF INDEX = 0
         RECEIVED NOT PERFORMED = .FALSE.
         SIZE OF RECEIVED BUFFER = 0
         T LID = PSI1
         CALL HPFC RCV FROM NODE(T LID)
         CALL HPFC INTEGER4 BUFUPK
         DO LALPHA1 = 2, (-PSI1+5)/2
            ALPHA1 = 3
            BUF INDEX = BUF INDEX+1
            A(ALPHA1) = HPFC INTEGER4 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect

      PRINT *, A(3), B(5), C(8)

      CALL HPFC HOST END
      END
!
! That is all for KILLS_host.f
!
!
! File KILLS_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Arrays Initializations for KILLS
!
!
! initializing array A, number 6
!
      NODIMA(6) = 1
      ATOT(6) = 6

      MSTATUS(6) = 6
      LIVEMAPPING(6) = .TRUE.

      RANGEA(6, 1, 1) = 1
      RANGEA(6, 1, 2) = 10
      RANGEA(6, 1, 3) = 10
!
      RANGEA(6, 1, 4) = 2
      RANGEA(6, 1, 5) = 5
      RANGEA(6, 1, 6) = 1
      RANGEA(6, 1, 7) = -1

      ALIGN(6, 1, 1) = 1
      ALIGN(6, 1, 2) = 1
      ALIGN(6, 1, 3) = 0
!
! initializing array B, number 5
!
      NODIMA(5) = 1
      ATOT(5) = 6

      MSTATUS(5) = 5
      LIVEMAPPING(5) = .TRUE.

      RANGEA(5, 1, 1) = 1
      RANGEA(5, 1, 2) = 10
      RANGEA(5, 1, 3) = 10
!
      RANGEA(5, 1, 4) = 2
      RANGEA(5, 1, 5) = 5
      RANGEA(5, 1, 6) = 1
      RANGEA(5, 1, 7) = -1

      ALIGN(5, 1, 1) = 1
      ALIGN(5, 1, 2) = 1
      ALIGN(5, 1, 3) = 0
!
! initializing array C, number 4
!
      NODIMA(4) = 1
      ATOT(4) = 6

      MSTATUS(4) = 4
      LIVEMAPPING(4) = .TRUE.

      RANGEA(4, 1, 1) = 1
      RANGEA(4, 1, 2) = 10
      RANGEA(4, 1, 3) = 10
!
      RANGEA(4, 1, 4) = 2
      RANGEA(4, 1, 5) = 5
      RANGEA(4, 1, 6) = 1
      RANGEA(4, 1, 7) = -1

      ALIGN(4, 1, 1) = 1
      ALIGN(4, 1, 2) = 1
      ALIGN(4, 1, 3) = 0
!
! initializing array A_1, number 3
!
      NODIMA(3) = 1
      ATOT(3) = 3

      RANGEA(3, 1, 1) = 1
      RANGEA(3, 1, 2) = 10
      RANGEA(3, 1, 3) = 10
!
      RANGEA(3, 1, 4) = 3
      RANGEA(3, 1, 5) = 1
      RANGEA(3, 1, 6) = 2
      RANGEA(3, 1, 7) = 0
      RANGEA(3, 1, 8) = -1

      ALIGN(3, 1, 1) = 1
      ALIGN(3, 1, 2) = 1
      ALIGN(3, 1, 3) = 0
!
! initializing array B_1, number 2
!
      NODIMA(2) = 1
      ATOT(2) = 3

      RANGEA(2, 1, 1) = 1
      RANGEA(2, 1, 2) = 10
      RANGEA(2, 1, 3) = 10
!
      RANGEA(2, 1, 4) = 3
      RANGEA(2, 1, 5) = 1
      RANGEA(2, 1, 6) = 2
      RANGEA(2, 1, 7) = 0
      RANGEA(2, 1, 8) = -1

      ALIGN(2, 1, 1) = 1
      ALIGN(2, 1, 2) = 1
      ALIGN(2, 1, 3) = 0
!
! initializing array C_1, number 1
!
      NODIMA(1) = 1
      ATOT(1) = 3

      RANGEA(1, 1, 1) = 1
      RANGEA(1, 1, 2) = 10
      RANGEA(1, 1, 3) = 10
!
      RANGEA(1, 1, 4) = 3
      RANGEA(1, 1, 5) = 1
      RANGEA(1, 1, 6) = 2
      RANGEA(1, 1, 7) = 0
      RANGEA(1, 1, 8) = -1

      ALIGN(1, 1, 1) = 1
      ALIGN(1, 1, 2) = 1
      ALIGN(1, 1, 3) = 0
!
! That is all for KILLS_init.h
!
!
! File KILLS_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "KILLS_parameters.h"
      INTEGER ALPHA1, LALPHA1, PSI1, I_0, I_1, I_10, I_11, I_2, I_3, 
     &I_5, I_7, I_8, I_9, I_6, I_4, I
      INTEGER A(1:5), B(1:5), C(1:5), A_1(1:5), B_1(1:5), C_1(1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_1, I_2, I_3, 1, 10, 6, 1)
! all livenesss for C
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! all livenesss for B
      LIVE MAPPING(5) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
! all livenesss for A
      LIVE MAPPING(6) = .FALSE.
      LIVE MAPPING(3) = .FALSE.
! direct remapping for C
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for B
      LIVE MAPPING(5) = .TRUE.
      MSTATUS(5) = 5
! direct remapping for A
      LIVE MAPPING(6) = .TRUE.
      MSTATUS(6) = 6

      I = I_3
      DO I_0 = I_1, I_2
         I = I+1
         A(I_0) = 100+I
         B(I_0) = 200+I
         C(I_0) = 300+I
      ENDDO
! all livenesss for C
      LIVE MAPPING(4) = .TRUE.
      LIVE MAPPING(1) = .TRUE.
! all livenesss for B
      LIVE MAPPING(5) = .TRUE.
      LIVE MAPPING(2) = .TRUE.
! all livenesss for A
      LIVE MAPPING(6) = .TRUE.
      LIVE MAPPING(3) = .TRUE.
! begin remappings
      MSTATUS(6) = 3
      MSTATUS(5) = 2
      MSTATUS(4) = 1
! liveness management
! clean live set for C
      LIVE MAPPING(4) = .FALSE.
! clean live set for B
      LIVE MAPPING(5) = .FALSE.
! clean live set for A
      LIVE MAPPING(6) = .FALSE.
! end of liveness management
! end remappings

      DO I = 1, 10
         CALL HPFC CMPCOMPUTER(1, I, 0, 0, 0, 0, 0, 0)
         IF (HPFC COMPUTERP()) THEN
            I_9 = 100+I
            I_6 = 200+I
            I_4 = 300+I
            I_5 = HPFC LOCALINDGAMMA(1, 1, I)
            C_1(I_5) = I_4
            CALL HPFC CMPOWNERS(2, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_7 = HPFC LOCALINDGAMMA(2, 1, I)
               B_1(I_7) = I_6
            ELSE
               CALL HPFC SNDTO O(HPFC INTEGER4, I_6)
            ENDIF
            CALL HPFC CMPOWNERS(3, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_10 = HPFC LOCALINDGAMMA(3, 1, I)
               A_1(I_10) = I_9
            ELSE
               CALL HPFC SNDTO O(HPFC INTEGER4, I_9)
            ENDIF
         ELSE
            CALL HPFC CMPOWNERS(2, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_8 = HPFC LOCALINDGAMMA(2, 1, I)
               CALL HPFC RCVFR C(HPFC INTEGER4, B_1(I_8))
            ENDIF
            CALL HPFC CMPOWNERS(3, I, 0, 0, 0, 0, 0, 0)
            IF (HPFC OWNERP()) THEN
               I_11 = HPFC LOCALINDGAMMA(3, 1, I)
               CALL HPFC RCVFR C(HPFC INTEGER4, A_1(I_11))
            ENDIF
         ENDIF
      ENDDO
! collecting distributed variable C_1
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = (-PSI1+11)/2, 4
         ALPHA1 = 8
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = C_1(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! collecting distributed variable B_1
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 3, (-PSI1+7)/2
         ALPHA1 = 5
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = B_1(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! collecting distributed variable A_1
      PSI1 = MY POS(1,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO LALPHA1 = 2, (-PSI1+5)/2
         ALPHA1 = 3
         BUF INDEX = BUF INDEX+1
         HPFC INTEGER4 BUFF(BUF INDEX) = A_1(LALPHA1)
      ENDDO
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC SND TO HOST
! end of collect

      CALL HPFC NODE END
      END
!
! That is all for KILLS_node.f
!
!
! File KILLS_parameters.h
! This file has been automatically generated by the HPF compiler
!
!
! parameters generated for KILLS
!
      integer 
     $    KILLS A LO1,
     $    KILLS A UP1
      parameter(KILLS A LO1 = 1)
      parameter(KILLS A UP1 = 5)
      integer 
     $    KILLS B LO1,
     $    KILLS B UP1
      parameter(KILLS B LO1 = 1)
      parameter(KILLS B UP1 = 5)
      integer 
     $    KILLS C LO1,
     $    KILLS C UP1
      parameter(KILLS C LO1 = 1)
      parameter(KILLS C UP1 = 5)
      integer 
     $    KILLS A_1 LO1,
     $    KILLS A_1 UP1
      parameter(KILLS A_1 LO1 = 1)
      parameter(KILLS A_1 UP1 = 5)
      integer 
     $    KILLS B_1 LO1,
     $    KILLS B_1 UP1
      parameter(KILLS B_1 LO1 = 1)
      parameter(KILLS B_1 UP1 = 5)
      integer 
     $    KILLS C_1 LO1,
     $    KILLS C_1 UP1
      parameter(KILLS C_1 LO1 = 1)
      parameter(KILLS C_1 UP1 = 5)
!
! That is all for KILLS_parameters.h
!
!
! File global_init.h
! This file has been automatically generated by the HPF compiler
!
!
! Templates Initializations
!
!
! initializing template A_1, number 3
!
      NODIMT(3) = 1
      TTOP(3) = 1

      RANGET(3, 1, 1) = 1
      RANGET(3, 1, 2) = 10
      RANGET(3, 1, 3) = 10

      DIST(3, 1, 1) = 1
      DIST(3, 1, 2) = -1
!
! initializing template A, number 6
!
      NODIMT(6) = 1
      TTOP(6) = 1

      RANGET(6, 1, 1) = 1
      RANGET(6, 1, 2) = 10
      RANGET(6, 1, 3) = 10

      DIST(6, 1, 1) = 1
      DIST(6, 1, 2) = 5
!
! Processors Initializations
!
!
! initializing processors P, number 1
!
      NODIMP(1) = 1

      RANGEP(1, 1, 1) = 1
      RANGEP(1, 1, 2) = 2
      RANGEP(1, 1, 3) = 2
!
! That is all for global_init.h
!
!
! File global_parameters.h
! This file has been automatically generated by the HPF compiler
!
      integer
     $     REALNBOFARRAYS,
     $     REALNBOFTEMPLATES,
     $     REALNBOFPROCESSORS,
     $     REALMAXSIZEOFPROCS,
     $     REALMAXSIZEOFBUFFER

!
! parameters
!
      parameter(REALNBOFARRAYS = 6)
      parameter(REALNBOFTEMPLATES = 2)
      parameter(REALNBOFPROCESSORS = 1)
      parameter(REALMAXSIZEOFPROCS = 2)
      parameter(REALMAXSIZEOFBUFFER = 1000000)
!
! That is all for global_parameters.h
!

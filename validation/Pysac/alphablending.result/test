void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1.f-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
   for(i = 0; i < n; i += 1)
      result[i] = alpha*src1[i]+(1.f-alpha)*src2[i];
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}
void alphablending_l99999(unsigned int n, float alpha, float result[n], float src1[n], float src2[n])
{
   // Declared by Pass Outlining
   unsigned int i;
l99999:
   for(i = 0; i < 4*(n/4)-1+1; i += 4) {
      result[i] = alpha*src1[i]+(1.f-alpha)*src2[i];
      result[1+i] = alpha*src1[1+i]+(1.f-alpha)*src2[1+i];
      result[2+i] = alpha*src1[2+i]+(1.f-alpha)*src2[2+i];
      result[3+i] = alpha*src1[3+i]+(1.f-alpha)*src2[3+i];
   }
   for(i = 4*(n/4); i < n; i += 1)
      result[i] = alpha*src1[i]+(1.f-alpha)*src2[i];
}
void alphablending_l99999(unsigned int n, float alpha, float result[n], float src1[n], float src2[n])
{
   // Declared by Pass Outlining
   unsigned int i;
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9;
l99999:
   for(i = 0; i < 4*(n/4)-1+1; i += 4) {
      F_0 = alpha*src1[i];
      F_1 = 1.f-alpha;
      result[i] = __PIPS_SAC_MULADD(F_0, F_1, src2[i]);
      F_2 = alpha*src1[1+i];
      F_3 = 1.f-alpha;
      result[1+i] = __PIPS_SAC_MULADD(F_2, F_3, src2[1+i]);
      F_4 = alpha*src1[2+i];
      F_5 = 1.f-alpha;
      result[2+i] = __PIPS_SAC_MULADD(F_4, F_5, src2[2+i]);
      F_6 = alpha*src1[3+i];
      F_7 = 1.f-alpha;
      result[3+i] = __PIPS_SAC_MULADD(F_6, F_7, src2[3+i]);
   }
   for(i = 4*(n/4); i < n; i += 1) {
      F_8 = alpha*src1[i];
      F_9 = 1.f-alpha;
      result[i] = __PIPS_SAC_MULADD(F_8, F_9, src2[i]);
   }
}
void alphablending_l99999(unsigned int n, float alpha, float result[n], float src1[n], float src2[n])
{
   //PIPS generated variable
   float F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0}, pdata1 = {1.f, 1.f, 1.f, 1.f}, pdata2 = {0, 0, 0, 0};
   //PIPS generated variable
   unsigned int i0, i1;
l99999:
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20, vec30, vec40, vec50, vec60, vec70, vec80, vec90;
      SIMD_LOAD_V4SF(vec20, &src1[i0]);
      SIMD_LOAD_BROADCAST_V4SF(vec10, alpha);
      SIMD_MULPS(vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &pdata0[0]);
      SIMD_LOAD_V4SF(vec40, &pdata1[0]);
      SIMD_SUBPS(vec30, vec40, vec10);
      SIMD_STORE_V4SF(vec30, &pdata2[0]);
      SIMD_LOAD_V4SF(vec90, &src2[i0]);
      SIMD_MULADDPS(vec60, vec00, vec30, vec90);
      SIMD_STORE_V4SF(vec60, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_8 = alpha*src1[i1];
      F_9 = 1.f-alpha;
      result[i1] = __PIPS_SAC_MULADD(F_8, F_9, src2[i1]);
   }
}
void alphablending_l99999(unsigned int n, float alpha, float result[n], float src1[n], float src2[n])
{
   //PIPS generated variable
   float F_8, F_9;
   //SAC generated temporary array
   a4sf pdata1 = {1.f, 1.f, 1.f, 1.f};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0, vec30_0, vec40_0, vec60_0, vec90_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, alpha);
   SIMD_LOAD_V4SF(vec40_0, &pdata1[0]);
   //PIPS generated variable
   unsigned int i0, i1;
l99999:
   for(i0 = 0; i0 < 4*(n/4)-1+1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec90_0, &src2[i0]);
      SIMD_LOAD_V4SF(vec20_0, &src1[i0]);
      SIMD_MULPS(vec00_0, vec10_0, vec20_0);
      SIMD_SUBPS(vec30_0, vec40_0, vec10_0);
      SIMD_MULADDPS(vec60_0, vec00_0, vec30_0, vec90_0);
      SIMD_STORE_V4SF(vec60_0, &result[i0]);
   }
   for(i1 = 4*(n/4); i1 < n; i1 += 1) {
      F_8 = alpha*src1[i1];
      F_9 = 1.f-alpha;
      result[i1] = __PIPS_SAC_MULADD(F_8, F_9, src2[i1]);
   }
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
   unsigned int i;
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}
void alphablending(unsigned int n, float src1[n], float src2[n], float result[n], float alpha)
{
l99999:   alphablending_l99999(n, alpha, result, src1, src2);
}

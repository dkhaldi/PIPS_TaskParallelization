void daxpy_r(int n, float da, float dx[n], float dy[n])
{
   int i;
   /* code for both increments equal to 1 */
   
   for(i = 0; i <= n-1; i += 1)
      dy[i] = dy[i]+da*dx[i];
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
   int i;
   /* code for both increments equal to 1 */
   
   for(i = 0; i <= n-1; i += 1)
      dy[i] = dy[i]+da*dx[i];
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
   int i;
l99999:   daxpy_r_l99999(n, da, dx, dy);
}
void daxpy_r_l99999(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
   /* code for both increments equal to 1 */
   
l99999:
   for(i = 0; i <= 4*(n/4)-1; i += 4) {
      dy[i] = dy[i]+da*dx[i];
      dy[1+i] = dy[1+i]+da*dx[1+i];
      dy[2+i] = dy[2+i]+da*dx[2+i];
      dy[3+i] = dy[3+i]+da*dx[3+i];
   }
   for(i = 4*(n/4); i <= n-1; i += 1)
      dy[i] = dy[i]+da*dx[i];
}
void daxpy_r_l99999(int n, float da, float dx[n], float dy[n])
{
   // Declared by Pass Outlining
   int i;
   /* code for both increments equal to 1 */
   
l99999:
   for(i = 0; i <= 4*(n/4)-1; i += 4) {
      dy[i] = __PIPS_SAC_MULADD(dy[i], da, dx[i]);
      dy[1+i] = __PIPS_SAC_MULADD(dy[1+i], da, dx[1+i]);
      dy[2+i] = __PIPS_SAC_MULADD(dy[2+i], da, dx[2+i]);
      dy[3+i] = __PIPS_SAC_MULADD(dy[3+i], da, dx[3+i]);
   }
   for(i = 4*(n/4); i <= n-1; i += 1)
      dy[i] = __PIPS_SAC_MULADD(dy[i], da, dx[i]);
}
void daxpy_r_l99999(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int i0, i1;
   /* code for both increments equal to 1 */
   
l99999:
   for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      v4sf vec00, vec10, vec20;
      SIMD_LOAD_V4SF(vec20, &dx[i0]);
      SIMD_LOAD_BROADCAST_V4SF(vec10, da);
      SIMD_LOAD_V4SF(vec00, &dy[i0]);
      SIMD_MULADDPS(vec00, vec00, vec10, vec20);
      SIMD_STORE_V4SF(vec00, &dy[i0]);
   }
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1)
      dy[i1] = __PIPS_SAC_MULADD(dy[i1], da, dx[i1]);
}
void daxpy_r_l99999(int n, float da, float dx[n], float dy[n])
{
   //PIPS generated variable
   int i0, i1;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
   SIMD_LOAD_BROADCAST_V4SF(vec10_0, da);
   /* code for both increments equal to 1 */
   
l99999:
   for(i0 = 0; i0 <= 4*(n/4)-1; i0 += 4) {
      //PIPS:SAC generated v4sf vector(s)
      SIMD_LOAD_V4SF(vec00_0, &dy[i0]);
      SIMD_LOAD_V4SF(vec20_0, &dx[i0]);
      SIMD_MULADDPS(vec00_0, vec00_0, vec10_0, vec20_0);
      SIMD_STORE_V4SF(vec00_0, &dy[i0]);
   }
   for(i1 = 4*(n/4); i1 <= n-1; i1 += 1)
      dy[i1] = __PIPS_SAC_MULADD(dy[i1], da, dx[i1]);
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
   int i;
l99999:   daxpy_r_l99999(n, da, dx, dy);
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
   int i;
l99999:   daxpy_r_l99999(n, da, dx, dy);
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
l99999:   daxpy_r_l99999(n, da, dx, dy);
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
l99999:   daxpy_r_l99999(n, da, dx, dy);
}
void daxpy_r(int n, float da, float dx[n], float dy[n])
{
l99999:   daxpy_r_l99999(n, da, dx, dy);
}

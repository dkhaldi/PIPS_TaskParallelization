void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   size_t i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   size_t i, j;
   for(i = 0; i <= N-1; i += 1)
      for(j = 0; j <= N-1; j += 1)
         C[i][j] = A[i][j]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   size_t i;
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int j0, j1;
l99998:
   for(i = 0; i <= N-1; i += 1)
l99997:
      for(I_0 = 0; I_0 <= (N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0+3)
l99995:
            for(j1 = 4*I_0; j1 <= MIN(N0-1, 4*I_0+3); j1 += 1)
               C[i][j1] = A[i][j1]*val;
         else
l99996:
            for(j0 = 4*I_0; j0 <= MIN(N0-1, 4*I_0+3); j0 += 1)
               C[i][j0] = A[i][j0]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   size_t i;
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int j0, j1;
l99998:
   for(i = 0; i <= N-1; i += 1)
l99997:
      for(I_0 = 0; I_0 <= (N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0+3)
l99995:
            for(j1 = 4*I_0; j1 <= MIN(N0-1, 4*I_0+3); j1 += 1)
               C[i][j1] = A[i][j1]*val;
         else
l99996:
            for(j0 = 4*I_0; j0 <= MIN(N0-1, 4*I_0+3); j0 += 1)
               C[i][j0] = A[i][j0]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   size_t i;
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int j0, j1;
l99998:
   for(i = 1; i <= N; i += 1)
l99997:
      for(I_0 = 1; I_0 <= (N1-1)/4+1; I_0 += 1)
         if (N0-1>4*I_0-1) {
l99995:            ;
            C[i-1][4*I_0+1-5] = A[i-1][4*I_0+1-5]*val;
            C[i-1][4*I_0+2-5] = A[i-1][4*I_0+2-5]*val;
            C[i-1][4*I_0+3-5] = A[i-1][4*I_0+3-5]*val;
            C[i-1][4*I_0+4-5] = A[i-1][4*I_0+4-5]*val;
         }
         else
l99996:
            for(j0 = 1; j0 <= N0-4*I_0+4; j0 += 1)
               C[i-1][4*I_0+j0-5] = A[i-1][4*I_0+j0-5]*val;
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   size_t i, j;
   //PIPS generated variable
   int I_0, N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   size_t i;
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int j0, j1;
l99998:
   for(i = 1; i <= N; i += 1)
l99997:
      for(I_0 = 1; I_0 <= 1+(N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0-1) {
l99995:            ;
            C[i-1][1+4*I_0-5] = A[i-1][1+4*I_0-5]*val;
            C[i-1][2+4*I_0-5] = A[i-1][2+4*I_0-5]*val;
            C[i-1][3+4*I_0-5] = A[i-1][3+4*I_0-5]*val;
            C[i-1][4+4*I_0-5] = A[i-1][4+4*I_0-5]*val;
         }
         else
l99996:
            for(j0 = 1; j0 <= 4+N0-4*I_0; j0 += 1)
               C[i-1][j0+4*I_0-5] = A[i-1][j0+4*I_0-5]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   size_t i;
   //PIPS generated variable
   int j;
   //PIPS generated variable
   int j0, j1;
l99998:
   for(i = 1; i <= N; i += 1)
l99997:
      for(I_0 = 1; I_0 <= 1+(N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0-1) {
l99995:            ;
            C[i-1][1+4*I_0-5] = A[i-1][1+4*I_0-5]*val;
            C[i-1][2+4*I_0-5] = A[i-1][2+4*I_0-5]*val;
            C[i-1][3+4*I_0-5] = A[i-1][3+4*I_0-5]*val;
            C[i-1][4+4*I_0-5] = A[i-1][4+4*I_0-5]*val;
         }
         else
l99996:
            for(j0 = 1; j0 <= 4+N0-4*I_0; j0 += 1)
               C[i-1][j0+4*I_0-5] = A[i-1][j0+4*I_0-5]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   int j0;
   //PIPS generated variable
   size_t i0;
l99998:
   for(i0 = 1; i0 <= N; i0 += 1)
l99997:
      for(I_0 = 1; I_0 <= 1+(N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0-1) {
            //PIPS:SAC generated v4sf vector(s)
            v4sf vec00, vec10, vec20;
l99995:            ;
            SIMD_LOAD_BROADCAST_V4SF(vec20, val);
            SIMD_LOAD_V4SF(vec10, &A[i0-1][1+4*I_0-5]);
            SIMD_MULPS(vec00, vec10, vec20);
            SIMD_STORE_V4SF(vec00, &C[i0-1][1+4*I_0-5]);
         }
         else
l99996:
            for(j0 = 1; j0 <= 4+N0-4*I_0; j0 += 1)
               C[i0-1][j0+4*I_0-5] = A[i0-1][j0+4*I_0-5]*val;
}
void matrix_mul_const_l99998(size_t N, int N0, int N1, float A[N][N], float C[N][N], float val)
{
   //PIPS generated variable
   int I_0;
   //PIPS generated variable
   int j0;
   //PIPS generated variable
   size_t i0;
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;
l99998:
   for(i0 = 1; i0 <= N; i0 += 1)
l99997:
      for(I_0 = 1; I_0 <= 1+(N1-1)/4; I_0 += 1)
         if (N0-1>4*I_0-1) {
            //PIPS:SAC generated v4sf vector(s)
            SIMD_LOAD_V4SF(vec10_0, &A[i0-1][1+4*I_0-5]);
            SIMD_LOAD_BROADCAST_V4SF(vec20_0, val);
l99995:            ;
            SIMD_MULPS(vec00_0, vec10_0, vec20_0);
            SIMD_STORE_V4SF(vec00_0, &C[i0-1][1+4*I_0-5]);
         }
         else
l99996:
            for(j0 = 1; j0 <= 4+N0-4*I_0; j0 += 1)
               C[i0-1][j0+4*I_0-5] = A[i0-1][j0+4*I_0-5]*val;
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   size_t i, j;
   //PIPS generated variable
   int I_0, N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   size_t i, j;
   //PIPS generated variable
   int I_0, N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   //PIPS generated variable
   int N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   //PIPS generated variable
   int N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}
void matrix_mul_const(size_t N, float C[N][N], float A[N][N], float val)
{
   //PIPS generated variable
   int N0 = N, N1 = N;
l99998:   matrix_mul_const_l99998(N, N0, N1, A, C, val);
}

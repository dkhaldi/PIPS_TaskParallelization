C     INITIALLY FROM RENAULT.F. THE BUG WAS SQRT(SQRT(X)) IN AN EXPRESSION.
C     MODIFIED TO GET RID OF SUBROUTINES AND FUNCTIONS

      SUBROUTINE RINPUT
C
C
C - MODIFICATION CONCERNANT LA LECTURE DE LA VARIABLE ENTIERE MSHEXT
C   DANS LE FICHIER 5 APRES LA LECTURE DE NZ.
C - APRES LA LECTURE DE CYL, SI MSHEXT=1, ON FORCE CYL EGAL A ZERO
C - ON CONTOURNE LE CALCUL DE CERTAINES QUANTITES GEO. (SKIPCO ETC...)
C
C ======================================================================
C
C      RINPUT READS THE INPUT DATA FILE AND COMPUTES DERIVED QUANTITIES,
C      SCALARS, PLOT DATA, AND THE SPECIES AND REACTION TABULAR DATA.
C
C      RINPUT IS CALLED BY:  KIVA
C
C      RINPUT CALLS THE FOLLOWING SUBROUTINES AND FUNCTIONS:  FUEL AND
C             TRAN3D, AND THE SYSTEM ROUTINES SAMPLE AND SAMPON, WHICH
C             ARE DESCRIBED IN THE EPILOG.
C
C ======================================================================
C
C      INCLUDE '../INCLUDE/COMD.H'
C
C ======================================================================
C
C           VERSION MODIFIEE ET CORRIGEE DE KIVA2 (KIVA2.UPD)
C
C                VERSION RECUE PAR RENAULT LE 5 NOV
C
C ======================================================================
C
C SIGNIFICATION DES VARIABLES :
C ---------------------------
C
C  NV     = MAXIMUM NO. OF VERTICES, =(NX+1)*(NY+1)*(NZ+1)
C  LNXPYP = MAXIMUM NO. OF VERTICES IN A PLANE, =(NX+1)*(NY+1)
C  LNSP   = MAXIMUM NO. OF SPECIES, MUST BE .GE. 3 WHEN CHOPPER IS USED
C  LNRK   = MAXIMUM NO. OF KINETIC CHEMICAL REACTIONS
C  LNRE   = MAXIMUM NO. OF EQUILIBRIUM CHEMICAL REACTIONS
C  NPAR   = MAXIMUM NO. OF PARTICLES PRESENT AT ANY ONE TIME
C  LP     = MAXIMUM NO. OF POINTS USED TO DEFINE PISTON SILHOUETTE
C           OR HEAD SILHOUETTE
C  LV     = MAX. NO. OF VIEWS OF EACH 3-D PLOT TYPE (ZONE,VECTOR,CONTOUR)
C  LVAP   = MAX. NO. OF ENTRIES IN LIQUID VAPOR PRES. TABLES IN FUELIB
C  LNZP   = MAXIMUM NO. OF PLANES, =(NZ+1)
C  LVEL   = MAX. NO. OF ENTRIES IN THE INJECTION VELOCITY TABLE
C  LNOZ   = MAX. NO. OF FUEL INJECTION NOZZLES (=1 IF NY=1)
C  LNPT1  = MAX. NO. DE POINTS DEFINISSANT LA LOI DE LEVEE: ZXL=F(ANGLE)
C  LNPT2  = MAX. NO. DE POINTS A L'ENTREE DE LA PIPE D'ADMISSION
C
C ===============PARAMETRE POUR OPTIMISATION DE LA CLASSE ==============
C
C MOYENC
C
      PARAMETER (NV=24000,LNXPYP=1700,LNSP=12,LNRK=4,LNRE=6,
C
C MOYEND
C
C      PARAMETER (NV=127500,LNXPYP=2500,LNSP=12,LNRK=4,LNRE=6,
C
C MOYENE
C
C      PARAMETER (NV=240000,LNXPYP=3500,LNSP=12,LNRK=4,LNRE=6,
C
C NUIT
C
C      PARAMETER (NV=340000,LNXPYP=6500,LNSP=12,LNRK=4,LNRE=6,
C
C ======================================================================
C

     &           NPAR=2000,LP=35,LV=5,LVAP=74,LNZP=NV/LNXPYP,LPLUS=60)

      PARAMETER (LVEL=100,LNOZ=12)
      PARAMETER (LNPT1=200,LNPT2=200,LNPDB=600)
      PARAMETER (NVXPYP = NV + LNXPYP + LPLUS )

C      INCLUDE 'COMMON.H'
      LOGICAL   CROPEN,VOPEN
C
C +++ NOTE: ON SHORT WORD-LENGTH MACHINES, REAL NUMBERS MUST BE DECLARED
C +++       DOUBLE PRECISION (60-64 BITS REQUIRED); HOWEVER, 32 BITS
C +++       WILL SUFFICE FOR INTEGERS; THIS IS WHY THEY ARE SEPARATED
C +++       FROM THE REAL NUMBERS IN THE COMMON BLOCKS BELOW.
C
C +++ NOTE: THE COMMON BLOCKS ARE WRITTEN WITH THE IMPLICIT ASSUMPTION
C +++       THAT THEY WILL BE LOADED EXACTLY AS THEY APPEAR BELOW.
C +++       BECAUSE AA- AND ZZ- NAMES OFTEN SPAN MORE THAN ONE COMMON,
C +++       PROBLEMS WILL RESULT IF THE LOADER SCATTERS THE COMMONS.
C +++       IN THIS CASE, THE LOADER MUST BE INSTRUCTED TO LOAD THE
C +++       COMMONS AS A SINGLE MODULE.  IF THIS IS NOT AN OPTION,
C +++       THE USER MUST RESTRUCTURE THE COMMONS AND MAKE APPROPRIATE
C +++       CHANGES IN SUBROUTINES BEGIN, TAPERD, AND TAPEWR.
C
      COMMON /LC1/ AAA1(1),X(-LNXPYP:NVXPYP),Y(-LNXPYP:NVXPYP),
     1 Z(-LNXPYP:NVXPYP),U(-LNXPYP:NVXPYP),V(-LNXPYP:NVXPYP),
     2 W(-LNXPYP:NVXPYP),RO(-LNXPYP:NVXPYP),VOL(-LNXPYP:NVXPYP),
     3 P(-LNXPYP:NVXPYP),AMU(-LNXPYP:NVXPYP),F(-LNXPYP:NVXPYP),
     4 FV(-LNXPYP:NVXPYP),TEMP(-LNXPYP:NVXPYP),SIE(-LNXPYP:NVXPYP),
     5 ZZZ
C
      COMMON /LC1I/ IAAA1(1),
     & ITAB(-LNXPYP:NVXPYP),JTAB(-LNXPYP:NVXPYP),KTAB(-LNXPYP:NVXPYP),
     1 NZZZ
C
CCC      COMMON /LC1Z/ ZZZ
C
      COMMON /LC2/ AAA2(1),TKE(-LNXPYP:NVXPYP),PIT(-LNXPYP:NVXPYP),
     1 PIT1(-LNXPYP:NVXPYP),UN(-LNXPYP:NVXPYP),VN(-LNXPYP:NVXPYP),
     2 WN(-LNXPYP:NVXPYP),SUVW(-LNXPYP:NVXPYP),ZZZ
C
      COMMON /LC3/ AAA3(1),E1(-LNXPYP:NVXPYP),E2(-LNXPYP:NVXPYP),
     1 E3(-LNXPYP:NVXPYP),E4(-LNXPYP:NVXPYP),E5(-LNXPYP:NVXPYP),
     2 E6(-LNXPYP:NVXPYP),E7(-LNXPYP:NVXPYP),E8(-LNXPYP:NVXPYP),
     3 E9(-LNXPYP:NVXPYP),E10(-LNXPYP:NVXPYP),E11(-LNXPYP:NVXPYP),
     4 E12(-LNXPYP:NVXPYP),E13(-LNXPYP:NVXPYP),E14(-LNXPYP:NVXPYP),
     5 E15(-LNXPYP:NVXPYP),E16(-LNXPYP:NVXPYP),E17(-LNXPYP:NVXPYP),
     6 E18(-LNXPYP:NVXPYP),E19(-LNXPYP:NVXPYP),E20(-LNXPYP:NVXPYP),ZZZ
C
      COMMON /LC4/ AAA4(1),E21(-LNXPYP:NVXPYP),E22(-LNXPYP:NVXPYP),
     1 E23(-LNXPYP:NVXPYP),E24(-LNXPYP:NVXPYP),E25(-LNXPYP:NVXPYP),
     2 E26(-LNXPYP:NVXPYP),E27(-LNXPYP:NVXPYP),E28(-LNXPYP:NVXPYP),
     3 E29(-LNXPYP:NVXPYP),E30(-LNXPYP:NVXPYP),E31(-LNXPYP:NVXPYP),
     4 E32(-LNXPYP:NVXPYP),E33(-LNXPYP:NVXPYP),E34(-LNXPYP:NVXPYP),
     5 E35(-LNXPYP:NVXPYP),E36(-LNXPYP:NVXPYP),E37(-LNXPYP:NVXPYP),
     6 E38(-LNXPYP:NVXPYP),E39(-LNXPYP:NVXPYP),E40(-LNXPYP:NVXPYP),ZZZ
C
      COMMON /LC5/ AAA5(1),E41(-LNXPYP:NVXPYP),E42(-LNXPYP:NVXPYP),
     1 E43(-LNXPYP:NVXPYP),E44(-LNXPYP:NVXPYP),E45(-LNXPYP:NVXPYP),
     2 E46(-LNXPYP:NVXPYP),E47(-LNXPYP:NVXPYP),E48(-LNXPYP:NVXPYP),
     3 E49(-LNXPYP:NVXPYP),E50(-LNXPYP:NVXPYP),E51(-LNXPYP:NVXPYP),
     4 E52(-LNXPYP:NVXPYP),E53(-LNXPYP:NVXPYP),E54(-LNXPYP:NVXPYP),
     5 E55(-LNXPYP:NVXPYP),E56(-LNXPYP:NVXPYP),E57(-LNXPYP:NVXPYP),
     6 E58(-LNXPYP:NVXPYP),E59(-LNXPYP:NVXPYP),E60(-LNXPYP:NVXPYP),
     7 E61(-LNXPYP:NVXPYP),E62(-LNXPYP:NVXPYP),E63(-LNXPYP:NVXPYP),
     8 E64(-LNXPYP:NVXPYP),ZZZ
C
      COMMON /LC6R/ AAA6(1),SPD(-LNXPYP:NVXPYP,LNSP),HTFORM(LNSP),
     1 MW(LNSP),RHOI(LNSP),RMW(LNSP),CB(LNRK),CF(LNRK),EB(LNRK),
     2 EF(LNRK),NELEM(LNRK),QR(LNRK),ZETAB(LNRK),ZETAF(LNRK),
     3 AE(LNSP,LNRK),BE(LNSP,LNRK),AS(LNRE),BS(LNRE),CS(LNRE),DS(LNRE),
     4 ES(LNRE),QEQ(LNRE),TSPM(LNSP),FAM(LNSP,LNRK),FBM(LNSP,LNRK),
     5 FBMAM(LNSP,LNRK),FBNAN(LNSP,LNRE),WDD(LNZP,LNSP),
     8 SPDIN0(LNSP),ROIN(LNXPYP),SPDIN(LNXPYP,LNSP),
     9 SPDAMB(LNSP),ROSIEIN(LNXPYP),ZDMAX(LNXPYP),ZZZ
C
      COMMON /LC6I/ AAA6I(1),
     1 AM(LNSP,LNRK),BM(LNSP,LNRK),CM(LNSP,LNRK),
     2 AN(LNSP,LNRE),BN(LNSP,LNRE),CN(LNSP,LNRE),NLM(LNRE),ZZZ6I
C
C      COMMON /LC6Z/ ZZZ
C
C
      EQUIVALENCE (E1,MV,RMV),(E2,GAMMA,RGAMMA),(E3,EPS,SCL),
     1 (E4,ALX),(E5,ALY),(E6,ALZ),(E7,AFX),(E8,AFY),(E9,AFZ),
     2 (E10,ABX),(E11,ABY),(E12,ABZ),(E13,CLI),(E14,CLJ),(E15,CLK),
     3 (E16,CFI),(E17,CFJ),(E18,CFK),(E19,CBI),(E20,CBJ),(E21,CBK)
      EQUIVALENCE (E22,FSUM14,RFSUM14,XO),
     1 (E23,FSUM34,RFSUM34,YO),
     2 (E24,FSUM84,RFSUM84,ZO),
     3 (E25,SUM3,YSPM,DUDX,UAL),
     4 (E26,SUM2,YSPD,DUDY,CV,UAF),
     5 (E27,CONQ,DUDZ,R,UAB),
     6 (E28,VAPM,XCEN,DVDX,SIETIL,RPA),
     7 (E29,ENTH0,YCEN,DVDY,PTEM),
     8 (E30,ZCEN,DVDZ,ML,RMLDT),
     9 (E31,XL,DWDX,CVTERM,MF,RMFDT),
     X (E32,YL,DWDY,MB,RMBDT),
     1 (E33,ZL,DWDZ),
     2 (E34,PHID,FXL),
     3 (E35,ENTHDF,DISPTIL,FXF),
     4 (E36,SPD14,DYP14,TEM14,RESU,UALA,FXB),
     5 (E37,AUGMV,SPD34,DYP34,TEM34,RESV,UAFA,VOLL,TOTIE),
     6 (E38,RU,SPD84,DYP84,TEM84,RESW,UABA,ROSIE,UMOM),
     7 (E39,RV,HISP,UTIL,ROTKE,VMOM),
     8 (E40,RW,SPMTIL,VTIL,ROSCL,WMOM)
      EQUIVALENCE (E41,ENTHTIL,WTIL,ROSIEV,SMOM,TTKE),
     1 (E42,DDY,RMVSU,RDRDE,ROTKEV,FXV,TEPS),
     2 (E43,RES,RESUO,ROSCLV,FXVM,ZCHOP),
     3 (E44,RESOLD,RESVO,MVP,ZNWCHP),
     4 (E45,DRES,RESWO,MP),
     5 (E46,RDRDY,DRESU,RDRDT,RDRDP,RDRDK,FXLM,WORK1),
     6 (E47,DELTAY,DRESV,DTEMP,DP,DELTKE,DEPS,FXFM,WORK2),
     7 (E48,TKE14,DRESW,FXBM,WORK3),
     8 (E49,TKE34,PN,DRDS,DUDS),
     9 (E50,TKE84,PHIP,DTDS,DVDS),
     X (E51,EPS14,UB,DWDS),
     1 (E52,EPS34,VB,DSDS),
     2 (E53,EPS84,WB,DVOL),
     3 (E54,TOTCM,DISSIP,FXI),
     4 (E55,DMTOT,DUHAT,HTC,RTERMK,FXJ),
     5 (E56,TOTH,DVHAT,VOLB,RTERME,FXK),
     6 (E57,DSIEP,DWHAT,RROVOLL,S),
     7 (E58,DTKEP,CPC),
     8 (E59,RON,HTCTIL)
      EQUIVALENCE (E60,SIEN,TTIL),(E61,TKETIL),(E62,EPSTIL),(E63,TKEN),
     1            (E64,EPSN)
      EQUIVALENCE (SPD,SPM)
C
      DIMENSION MV(-LNXPYP:NVXPYP),RMV(-LNXPYP:NVXPYP),
     1 GAMMA(-LNXPYP:NVXPYP),RGAMMA(-LNXPYP:NVXPYP),
     2 EPS(-LNXPYP:NVXPYP),SCL(-LNXPYP:NVXPYP),
     3 ALX(-LNXPYP:NVXPYP),ALY(-LNXPYP:NVXPYP),ALZ(-LNXPYP:NVXPYP),
     4 AFX(-LNXPYP:NVXPYP),AFY(-LNXPYP:NVXPYP),AFZ(-LNXPYP:NVXPYP),
     5 ABX(-LNXPYP:NVXPYP),ABY(-LNXPYP:NVXPYP),ABZ(-LNXPYP:NVXPYP),
     6 CLI(-LNXPYP:NVXPYP),CLJ(-LNXPYP:NVXPYP),CLK(-LNXPYP:NVXPYP),
     7 CFI(-LNXPYP:NVXPYP),CFJ(-LNXPYP:NVXPYP),CFK(-LNXPYP:NVXPYP),
     8 CBI(-LNXPYP:NVXPYP),CBJ(-LNXPYP:NVXPYP),CBK(-LNXPYP:NVXPYP)
      DIMENSION FSUM14(-LNXPYP:NVXPYP),RFSUM14(-LNXPYP:NVXPYP),
     1 XO(-LNXPYP:NVXPYP),FSUM34(-LNXPYP:NVXPYP),
     2 RFSUM34(-LNXPYP:NVXPYP),YO(-LNXPYP:NVXPYP),
     3 FSUM84(-LNXPYP:NVXPYP),RFSUM84(-LNXPYP:NVXPYP),
     4 ZO(-LNXPYP:NVXPYP),SUM3(-LNXPYP:NVXPYP),YSPM(-LNXPYP:NVXPYP),
     5 DUDX(-LNXPYP:NVXPYP),UAL(-LNXPYP:NVXPYP),SUM2(-LNXPYP:NVXPYP),
     6 YSPD(-LNXPYP:NVXPYP),DUDY(-LNXPYP:NVXPYP),CV(-LNXPYP:NVXPYP),
     7 UAF(-LNXPYP:NVXPYP),CONQ(-LNXPYP:NVXPYP),DUDZ(-LNXPYP:NVXPYP),
     8 R(-LNXPYP:NVXPYP),UAB(-LNXPYP:NVXPYP),VAPM(-LNXPYP:NVXPYP),
     9 XCEN(-LNXPYP:NVXPYP),DVDX(-LNXPYP:NVXPYP),SIETIL(-LNXPYP:NVXPYP),
     X RPA(-LNXPYP:NVXPYP),ENTH0(-LNXPYP:NVXPYP),YCEN(-LNXPYP:NVXPYP),
     1 DVDY(-LNXPYP:NVXPYP),PTEM(-LNXPYP:NVXPYP),ZCEN(-LNXPYP:NVXPYP),
     2 DVDZ(-LNXPYP:NVXPYP),ML(-LNXPYP:NVXPYP),RMLDT(-LNXPYP:NVXPYP),
     3 XL(-LNXPYP:NVXPYP),DWDX(-LNXPYP:NVXPYP),CVTERM(-LNXPYP:NVXPYP),
     4 MF(-LNXPYP:NVXPYP),RMFDT(-LNXPYP:NVXPYP),YL(-LNXPYP:NVXPYP),
     5 DWDY(-LNXPYP:NVXPYP),MB(-LNXPYP:NVXPYP),RMBDT(-LNXPYP:NVXPYP),
     6 ZL(-LNXPYP:NVXPYP),DWDZ(-LNXPYP:NVXPYP),PHID(-LNXPYP:NVXPYP),
     7 FXL(-LNXPYP:NVXPYP),ENTHDF(-LNXPYP:NVXPYP),
     8 DISPTIL(-LNXPYP:NVXPYP),FXF(-LNXPYP:NVXPYP),
     9 SPD14(-LNXPYP:NVXPYP),DYP14(-LNXPYP:NVXPYP)
       DIMENSION TEM14(-LNXPYP:NVXPYP),RESU(-LNXPYP:NVXPYP),
     1 UALA(-LNXPYP:NVXPYP),FXB(-LNXPYP:NVXPYP),AUGMV(-LNXPYP:NVXPYP),
     2 SPD34(-LNXPYP:NVXPYP),DYP34(-LNXPYP:NVXPYP),
     3 TEM34(-LNXPYP:NVXPYP),RESV(-LNXPYP:NVXPYP),UAFA(-LNXPYP:NVXPYP),
     4 VOLL(-LNXPYP:NVXPYP),TOTIE(-LNXPYP:NVXPYP),RU(-LNXPYP:NVXPYP),
     5 SPD84(-LNXPYP:NVXPYP),DYP84(-LNXPYP:NVXPYP),
     6 TEM84(-LNXPYP:NVXPYP),RESW(-LNXPYP:NVXPYP),UABA(-LNXPYP:NVXPYP),
     7 ROSIE(-LNXPYP:NVXPYP),UMOM(-LNXPYP:NVXPYP)
      DIMENSION RV(-LNXPYP:NVXPYP),HISP(-LNXPYP:NVXPYP),
     1 UTIL(-LNXPYP:NVXPYP),ROTKE(-LNXPYP:NVXPYP),VMOM(-LNXPYP:NVXPYP),
     2 RW(-LNXPYP:NVXPYP),SPMTIL(-LNXPYP:NVXPYP),VTIL(-LNXPYP:NVXPYP),
     3 ROSCL(-LNXPYP:NVXPYP),WMOM(-LNXPYP:NVXPYP)
      DIMENSION ENTHTIL(-LNXPYP:NVXPYP),WTIL(-LNXPYP:NVXPYP),
     1 ROSIEV(-LNXPYP:NVXPYP),SMOM(-LNXPYP:NVXPYP),TTKE(-LNXPYP:NVXPYP),
     2 DDY(-LNXPYP:NVXPYP),RMVSU(-LNXPYP:NVXPYP),RDRDE(-LNXPYP:NVXPYP),
     3 ROTKEV(-LNXPYP:NVXPYP),FXV(-LNXPYP:NVXPYP),TEPS(-LNXPYP:NVXPYP),
     4 RES(-LNXPYP:NVXPYP),RESUO(-LNXPYP:NVXPYP),ROSCLV(-LNXPYP:NVXPYP),
     5 FXVM(-LNXPYP:NVXPYP),ZCHOP(-LNXPYP:NVXPYP),
     6 RESOLD(-LNXPYP:NVXPYP),RESVO(-LNXPYP:NVXPYP),MVP(-LNXPYP:NVXPYP),
     7 ZNWCHP(-LNXPYP:NVXPYP),DRES(-LNXPYP:NVXPYP),
     8 RESWO(-LNXPYP:NVXPYP),MP(-LNXPYP:NVXPYP),RDRDY(-LNXPYP:NVXPYP),
     9 DRESU(-LNXPYP:NVXPYP),RDRDT(-LNXPYP:NVXPYP),
     X RDRDP(-LNXPYP:NVXPYP),RDRDK(-LNXPYP:NVXPYP),FXLM(-LNXPYP:NVXPYP),
     1 WORK1(-LNXPYP:NVXPYP),DELTAY(-LNXPYP:NVXPYP),
     2 DRESV(-LNXPYP:NVXPYP),DTEMP(-LNXPYP:NVXPYP),DP(-LNXPYP:NVXPYP),
     3 DELTKE(-LNXPYP:NVXPYP),DEPS(-LNXPYP:NVXPYP),FXFM(-LNXPYP:NVXPYP),
     4 WORK2(-LNXPYP:NVXPYP),TKE14(-LNXPYP:NVXPYP),
     5 DRESW(-LNXPYP:NVXPYP),FXBM(-LNXPYP:NVXPYP),WORK3(-LNXPYP:NVXPYP),
     6 TKE34(-LNXPYP:NVXPYP),PN(-LNXPYP:NVXPYP),DRDS(-LNXPYP:NVXPYP),
     7 DUDS(-LNXPYP:NVXPYP),TKE84(-LNXPYP:NVXPYP),PHIP(-LNXPYP:NVXPYP),
     8 DTDS(-LNXPYP:NVXPYP),DVDS(-LNXPYP:NVXPYP),EPS14(-LNXPYP:NVXPYP),
     9 UB(-LNXPYP:NVXPYP),DWDS(-LNXPYP:NVXPYP),EPS34(-LNXPYP:NVXPYP)
       DIMENSION VB(-LNXPYP:NVXPYP),DSDS(-LNXPYP:NVXPYP),
     1 EPS84(-LNXPYP:NVXPYP),WB(-LNXPYP:NVXPYP),DVOL(-LNXPYP:NVXPYP),
     2 TOTCM(-LNXPYP:NVXPYP),DISSIP(-LNXPYP:NVXPYP),FXI(-LNXPYP:NVXPYP),
     3 DMTOT(-LNXPYP:NVXPYP),DUHAT(-LNXPYP:NVXPYP),HTC(-LNXPYP:NVXPYP),
     4 RTERMK(-LNXPYP:NVXPYP),FXJ(-LNXPYP:NVXPYP),TOTH(-LNXPYP:NVXPYP),
     5 DVHAT(-LNXPYP:NVXPYP),VOLB(-LNXPYP:NVXPYP),
     6 RTERME(-LNXPYP:NVXPYP),FXK(-LNXPYP:NVXPYP),DSIEP(-LNXPYP:NVXPYP),
     7 DWHAT(-LNXPYP:NVXPYP),RROVOLL(-LNXPYP:NVXPYP),S(-LNXPYP:NVXPYP),
     8 DTKEP(-LNXPYP:NVXPYP),CPC(-LNXPYP:NVXPYP),RON(-LNXPYP:NVXPYP),
     9 HTCTIL(-LNXPYP:NVXPYP)
      DIMENSION SIEN(-LNXPYP:NVXPYP),TTIL(-LNXPYP:NVXPYP),
     1 TKETIL(-LNXPYP:NVXPYP),EPSTIL(-LNXPYP:NVXPYP),
     2 TKEN(-LNXPYP:NVXPYP),EPSN(-LNXPYP:NVXPYP)
C
      DIMENSION SPM(-LNXPYP:NVXPYP,LNSP)
C
C
      COMMON /LEKDATA/ EK(51,LNSP),ELIQ(51),PVAP(LVAP),VISLIQ(LVAP)
C
C
      EQUIVALENCE (EK,HK),(ELIQ,HLAT0)
      DIMENSION HK(51,LNSP),HLAT0(51)
C
      COMMON /SC1/ AASC1(1),
     & ADIA,AIRDIF,AIRLA1,AIRLA2,AIRMU1,AIRMU2,ANC4O2,
     1 ANGMOM,ANU0,ARROW,ATDC,A0ME,A0MOM,BOTCYL,BOTFAC,BOTIN,B0,
     2 CAFILM,CAFIN,CART3D,CDUMP,CES,CE1,CE13,CE2,CE3,CFILM,
     3 CFOCBCK,CMU,CMUEPS,CONROD,COSECT,CPS,
     4 CRANK,CSUBK,CSUBMU,CYL,CYLNY,C1,DCADMP,DISTAMB,DPREFIN,DT,DTACC,
     5 DTCAD,DTCON,DTCYC0,DTFA,DTFC,DTFST,DTGROF,DTMAX,DTMIN,
     6 DTMXCA,DTNM1,DTO4,DTPGS,DTWP,DY,DZCHOP,D1,EPSCHM,EPSE,EPSK,
     7 EPSM,EPSP,EPST,EPSV,EPSY,EXPDIF,FACSEC,FCHSP,
     8 FLBOWL,FLDOME,FLFACE,FLHEAD,FLSQSH,FNFLUXS,FORTHD,FRESLP,
     9 GRFAC,GRIND,GX,GY,GZ,
     & ZZSC
C
      COMMON /SC1I/ IAASC1(1),
     & IBIGIT,ICART3,ICONT(26),ICYL,
     1 IEMAX(LP),IHO(LP),IIGNL(2),IIGNR(2),IJKALL,IJKVEC,
     2 IPO(LP),IPOST,IREC,IREST,IREZ,JIGND(2),JIGNF(2),JSECTR,JTERM,
     3 JTEST,KHO(LP),KHT,KIGNB(2),KIGNT(2),KPO(LP),KPTOP,
     4 KWIKEQ,LPR,LWALL,NAME(10),NCFILM,NCHOP,NCLAST,NCORR(LP),
     5 NCTAP8,NCYC,NDUMP,NEO,NFLUXS,NHO,NP,NPN,NPO,NRE,NRK,NSP,NSTRT,
     6 NUMCIT,NUMEIT,NUMKIT,NUMPIT,NUMVIT,NUMYIT,NUNIF,NX,NXP,
     7 NXPNY,NXPNYM,NXPNYP,NY,NYEQ1,NYNEW,NYP,NZ,NZP,
     8 NZZSC
C
      COMMON /SC1R/ AASC1R(1),
     & OFFSET,OMCYL,OMGCHM,OMJSEC,OMNYQ1,PAMB,PARDON,
     1 PERR,PGS,PGSRAT,PGSSW,PHIDMX,PHIMAX,PI,PIO180,PIO2,PI2,PI4O3R,
     2 PM,PRL,Q0,RANB,RANS,RC,
     X RCORNR,RDT,RERF(21),RFNY,RGAMAMB,RGAMIN,RGAS,RHO(LP),
     1 RNFLUXS,ROAMB,ROIN0,RPGS2,RPM,RPO(LP),RPR,RPRE,RPRQ,RPS,RSC,
     2 RSCLMX,RTFAC,RTNOSLP,RTOUT,SAMPL,SCLAMB,SCLMX,SEMIMJ(LP),
     3 SEMIMN(LP),SGSL,SIXTH,SKIHCO(LP),SKIPCO(LP),SNSECT,SQUARE,
     4 ZZSC1R
C
      COMMON /SC1B/ AASC1B(1),
     & STB,STM,STROKE,SWIPRO,SWIRL,T,TCHEM,TCRIT,TCUT,
     1 TCUTE,TCYLWL,TEMPI,TEVAP,TFILM,THEAD,THIRD,THSECT,TIMLMT,
     2 TKEAMB,TKEI,TKELOW,TKESW,TLIMD,TOPFAC,TOPOUT,
     3 TPISTN,TVALVE,TWFILM,TWFIN,TWLVTH,TWOTHD,T1IGN,
     4 T2IGN,UNISCAL,U0,U1,VISRAT,WIN,WPISTN,XIGNIT,
     5 X0,Y0,ZHBOT,ZHEAD,ZHO(LP),ZPISTN,ZPO(LP),
     6 ZZSC1B
C
      COMMON /INJREAL/ AAINJ(1),
     & AMP0(LNOZ),ANOZ(LNOZ),BREAKUP,CONE(LNOZ),
     1 COSTXY(LNOZ),COSTXZ(LNOZ),DCONE(LNOZ),DRNOZ(LNOZ),
     2 DTHNOZ(LNOZ),DTINJ,DZNOZ(LNOZ),EAVEC(LNOZ,3),ENVEC(LNOZ,3),
     3 EOVEC(LNOZ,3),EVAPP,OSCIL0(LNOZ),PMINJ,PULSE,RDINJ(100),
     4 RHOP,SINTXY(LNOZ),SINTXZ(LNOZ),SMR(LNOZ),TDINJ,TFMASS(LVEL),
     5 TILTXY(LNOZ),TILTXZ(LNOZ),TM2INJ,TNPARC,TPI,TSPMAS,TURB,
     6 T1INJ,T2INJ,VELINJ(LVEL),XINJ(LNOZ),YINJ(LNOZ),ZINJ(LNOZ),
     7 ZZINJ
C
      COMMON /INJINTG/ IAAINJ(1),
     1 INJDIST,KOLIDE,NUMNOZ,NUMVEL,
     2 NZZINJ
C
      COMMON /CHARS/ IDCON,IDDT,IDSP,JNM
C
C
C +++ IL NE FAUT SURTOUT PAS INITIALISER DANS BEGIN LES VALEURS EN DATA  !
C +++ NE PAS DUMPER LES DATA  (VALEUR INITIALISEE A LA COMPILATION =>
C +++                           PROBLEME SI IL Y A EQUIVALENCE )
C
C
      COMMON /MEXT1/ AAA10(1),
     &               ZXL(LNPT1),BETA1(LNPT1),BETA2(LNPT2),PPOL(LNPT2),
     1               ROPOL(LNPT2),UPOL(LNPT2),SPDINL(LNSP),
     2               XLM1(NV),YLM1(NV),ZLM1(NV),
     4               XLM2(NV),YLM2(NV),ZLM2(NV),
     6               FVLU1(NV),FVLU2(NV),SKICO1(NV),
     7               UCRKIN(LNPDB),QFR(NV),
     8               ZZZ
C
      COMMON /MEXT2/ III1(1),
     1               IUPCO(NV),IDNCO(NV),JUPCO(NV),JDNCO(NV),IEDGE(NV),
     3               NNN
C
      COMMON /INDATA/ FLSOUP,FLDEB
C
      COMMON /MEXT3/ AAA11(1),
     &               RAYON,SQUISH,AOA,RFA,USOUP,VSOUP,WSOUP,ZXS,
     1               ZXJEU,ZXLMAX,ZXLMIN,RICH,REMP,XMW,XAIR,XCAR,RHO0,
     2               FO2,FN2,SCALIN,UXKIVA,UYKIVA,UZKIVA,ZPTOP1,ROKIVA,
     3               PKIVA,TKIVA,TKEIN,EPSIN,SIEIN,DEQ1,DEQ2,XLPIP,
     4               XCP,YCP,ZCP,TUMBLE,CEBU,TMCAR0,TMO20,TMN20,
     5               TGENE,ROGENE,PGENE,ROSIN,HISPGE,
     +               UMOY,UIN,VIN,UVWIN,BOLH,SIGMA0,
     6               ZZZ
C
      COMMON /MEXT4/ III2(1),
     &               MSHEXT,NKB,NKC,NKSQSH,NKS,KPTOP2,NSOUP,NPT1,NPT2,
     1               NKDEB,JSEP,NPDB1,NPDB2,KIGNB1,KIGNT1,KIGNB2,KIGNT2,
     2               JSEP2,
     3               NNN
C
      COMMON /LOGIC/ CROPEN,VOPEN
C
      REAL MB,MC,MF,ML,MP,MV,MVP,MW
      INTEGER AM,AN,BM,BN,CM,CN
      CHARACTER *8 IDCON(26),IDSP(15),JNM
      CHARACTER *4 IDDT



C      INCLUDE '../INCLUDE/COMPLT.H'
      COMMON /PLTINTG/ IAAPLT(1),
     & IEDG(LV),IFACE(LV*6),ISLC(LV),ISLV(LV),JSLC(LV),
     1 JSLV(LV),KSLC(LV),KSLV(LV),MIRROR,NVCONT,NVPVEC,NVVVEC,NVZONE,
     2 NZZPLT
C
      COMMON /PLTREAL/ AAPLT(1),
     & COSAL,COSPHC(LV),COSPHV(LV),COSPHZ(LV),
     1 COSTHC(LV),COSTHV(LV),COSTHZ(LV),SINAL,SINPHC(LV),SINPHV(LV),
     2 SINPHZ(LV),SINTHC(LV),SINTHV(LV),SINTHZ(LV),XBEC(LV),XBEV(LV),
     3 XBEZ(LV),XCPLOT,XEZ(LV),YBEC(LV),YBEV(LV),YBEZ(LV),YCPLOT,
     4 YEZ(LV),ZBEC(LV),ZBEV(LV),ZBEZ(LV),ZCPLOT,ZEZ(LV),ZZ

      DIMENSION KHOSAV(LP)
      CHARACTER *8 ID(4)
      CHARACTER *4 MESS
C
C +++
C +++ HK ARRAYS ARE THE ENTHALPIES OF THE SPECIES, TAKEN FROM THE
C +++ JANAF THERMOCHEMICAL TABLES.  INTERVALS ARE T=100(N-1), AND UNITS
C +++ ARE KCAL/MOLE (LATER GET CONVERTED TO SIE IN ERGS/GM).
C +++ SPECIES #1 IS ASSUMED TO BE THE FUEL, AND ITS HK IS LOADED BY
C +++ SUBROUTINE FUEL.  SPECIES #2-12 BELOW ARE AS FOLLOWS:
C +++ 2=O2, 3=N2, 4=CO2, 5=H20, 6=H, 7=H2, 8=O, 9=N, 10=OH,
C +++ 11=CO, 12=NO
C +++
C +++ -----------------------------------------------------
C +++
      DATA (HK(N,2),N=1,51) /-2.075,-1.381,-.685,.013,.724,1.455,2.21,2.
     1 988,3.786,4.6,5.427,6.266,7.114,7.971,8.835,9.706,10.583,11.465,
     2 2.354,13.249,14.149,15.054,15.966,16.882,17.804,18.732,19.664,20.
     3 602,21.545,22.493,23.446,24.403,25.365,26.331,27.302,28.276,29.
     4 4,30.236,31.221,32.209,33.201,34.196,35.193,36.193,37.196,38.201,
     5 39.208,40.218,41.229,42.242,43.257/
      DATA (HK(N,3),N=1,51) /-2.072,-1.379,-.683,.013,.71,1.413,2.125,2.
     1 853,3.596,4.355,5.129,5.917,6.718,7.529,8.35,9.179,10.015,10.858,
     2 11.707,12.56,13.418,14.28,15.146,16.015,16.886,17.761,18.638,19.
     3 17,20.398,21.28,22.165,23.051,23.939,24.829,25.719,26.611,27.505,
     4 28.399,29.295,30.191,31.089,31.988,32.888,33.788,34.690,35.593,
     5 .496,37.4,38.306,39.212,40.119/
      DATA (HK(N,4),N=1,51) /-2.238,-1.543,-.816,.016,.958,1.987,3.087,
     1 .245,5.453,6.702,7.984,9.296,10.632,11.988,13.362,14.75,16.152,
     2 .565,18.987,20.418,21.857,23.303,24.755,26.212,27.674,29.141,30.
     3 13,32.088,33.567,35.049,36.535,38.024,39.515,41.01,42.507,44.006,
     4 45.508,47.012,48.518,50.027,51.538,53.051,54.566,56.082,57.601,
     5 .122,60.644,62.169,63.695,65.223,66.753/
      DATA (HK(N,5),N=1,51) /-2.367,-1.581,-.784,.015,.825,1.654,2.509,
     1 .39,4.3,5.24,6.209,7.21,8.24,9.298,10.384,11.495,12.63,13.787,14.
     2 964,16.16,17.373,18.602,19.846,21.103,22.372,23.653,24.945,26.
     3 ,27.556,28.875,30.201,31.535,32.876,34.223,35.577,36.936,38.3,39.
     4 669,41.043,42.422,43.805,45.192,46.583,47.977,49.375,50.777,52.
     5 1,53.589,55.,56.413,57.829/
      DATA (HK(N,6),N=1,51) /-1.481,-.984,-.488,.009,.506,1.003,1.5,1.
     1 6,2.493,2.99,3.487,3.984,4.481,4.977,5.474,5.971,6.468,6.965,7.
     2 1,7.958,8.455,8.952,9.449,9.945,10.442,10.939,11.436,11.933,12.
     3 ,12.926,13.423,13.92,14.417,14.914,15.41,15.907,16.404,16.901,17.
     4 398,17.895,18.391,18.888,19.385,19.882,20.379,20.875,21.372,21.
     5 9,22.366,22.863,23.359/
      DATA (HK(N,7),N=1,51) /-2.024,-1.265,-.662,.013,.707,1.406,2.106,
     1 .808,3.514,4.226,4.944,5.67,6.404,7.148,7.902,8.668,9.446,10.233,
     2 11.03,11.836,12.651,13.475,14.307,15.146,15.993,16.848,17.708,18.
     3 575,19.448,20.326,21.21,22.098,22.992,23.891,24.794,25.703,26.
     4 ,27.535,28.457,29.385,30.317,31.253,32.194,33.139,34.088,35.042,
     5 5.999,36.961,37.926,38.895,39.868/
      DATA (HK(N,8),N=1,51) /-1.608,-1.08,-.523,.01,.528,1.038,1.544,2.
     1 48,2.55,3.052,3.552,4.051,4.551,5.049,5.548,6.046,6.544,7.042,7.
     2 40,8.038,8.536,9.034,9.532,10.029,10.527,11.026,11.524,12.023,12.
     3 522,13.022,13.522,14.023,14.524,15.026,15.529,16.033,16.537,17.
     4 3,17.549,18.057,18.565,19.075,19.586,20.098,20.611,21.126,21.641,
     5 22.158,22.676,23.195,23.715/
      DATA (HK(N,9),N=1,51) /-1.481,-.984,-.488,.009,.506,1.003,1.5,1.
     1 6,2.493,2.99,3.487,3.984,4.481,4.977,5.474,5.971,6.468,6.965,7.
     2 1,7.958,8.455,8.952,9.449,9.946,10.444,10.941,11.439,11.938,12.
     3 7,12.936,13.437,13.939,14.441,14.946,15.451,15.959,16.469,16.98,
     4 7.495,18.012,18.531,19.054,19.58,20.11,20.643,21.18,21.721,22.
     5 ,22.816,23.37,23.928/
      DATA (HK(N,10),N=1,51) /-2.192,-1.467,-.711,.013,.725,1.432,2.137,
     1 2.845,3.556,4.275,5.003,5.742,6.491,7.252,8.023,8.805,9.596,10.
     2 7,11.207,12.024,12.849,13.681,14.52,15.364,16.214,17.069,17.929,
     3 8.794,19.662,20.535,21.411,22.291,23.174,24.06,24.949,25.841,26.
     4 35,27.632,28.532,29.434,30.338,31.245,32.153,33.064,33.976,34.89,
     5 35.807,36.725,37.644,38.566,39.489/
      DATA (HK(N,11),N=1,51) /-2.072,-1.379,-.683,.013,.711,1.417,2.137,
     1 2.873,3.627,4.397,5.183,5.983,6.794,7.616,8.446,9.285,10.13,10.
     2 ,11.836,12.697,13.561,14.43,15.301,16.175,17.052,17.931,18.813,
     3 .696,20.582,21.469,22.357,23.248,24.139,25.032,25.927,26.822,27.
     4 19,28.617,29.516,30.416,31.316,32.218,33.121,34.025,34.93,35.835,
     5 36.741,37.649,38.557,39.465,40.375/
      DATA (HK(N,12),N=1,51) /-2.197,-1.451,-.705,.013,.727,1.448,2.186,
     1 2.942,3.716,4.507,5.313,6.131,6.96,7.798,8.644,9.496,10.354,11.
     2 7,12.084,12.955,13.829,14.706,15.587,16.469,17.534,18.241,19.129,
     3 20.02,20.911,21.805,22.7,23.596,24.493,25.392,26.291,27.192,28.
     4 4,28.997,29.9,30.805,31.71,32.616,33.523,34.431,35.34,36.249,37.
     5 59,38.07,38.982,39.894,40.807/
C +++
C +++ -----------------------------------------------------
C +++
      DATA PI /3.14159 26535 89793 23846/
      DATA RGAS /8.3143E+7/
      DATA RC /122.0/
C
      DATA T,DTGROF,GRIND,TCHEM,TEVAP /0.0,1.02,0.0,1.0E-10,1.0E-10/
C
      DATA PGSRAT /0.04/
      DATA DTFC,DTFA,DTFST /0.2,0.5,0.5/
      DATA FLFACE,FLBOWL,FLSQSH,FLDOME,FLHEAD /1.0,2.0,3.0,4.0,5.0/
C
      DATA FLSOUP,FLDEB /6.0,7.0/
C
      DATA CE1,CE2,CE3,CES,CMU,CPS /1.44,1.92,-1.0,1.50,.09,.16432/
      DATA TKELOW / 1.0E-08 /
      DATA CSUBMU,CSUBK,CFOCB / 10.0,8.0,0.666666666666667 /
      DATA TM2INJ,TCRIT /2*0.0/
      DATA NCYC,NDUMP,NP /0,0,0/
      DATA RANB,RANS /2396745.,2396745./
C
C <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
C
C +++ READ DATA DECK, COMPUTE DERIVED AND SCALAR QUANTITIES
C +++
C +++
C +++ IF CHOPPER IS IN USE, CURRENT NZ HAS BEEN READ IN FROM
C +++ DUMP, AND SUPERSEDES THE VALUE ON ITAPE; THIS IS DONE
C +++ AFTER THIS MAIN BLOCK OF READS.
C +++
      IF (IREST.GT.0) THEN
         NYOLD = NY
         NZSAVE = NZ
      ENDIF
C +++
C +++ READ FLAG FOR OPTIONAL POST-PROCESSOR DUMPS, WHERE:
C +++ 0 = NO POST-PROCESSOR DUMP FILE DESIRED,
C +++ 1 = START POST-PROCESSOR FILE TAPE9 WITH THIS RUN, AND
C +++ 2 = CONTINUE DUMPING ON PREVIOUS TAPE9, WHICH MUST EXIST IN
C +++     LOCAL FILE SPACE:
C +++
      READ (UNIT=5,FMT=600) ID(1),IPOST
      IF (IREST.EQ.0) IPOST = MIN0(IPOST, 1)
      WRITE (UNIT=12,FMT=600) ID(1),IPOST
      IF (IPOST.EQ.2) THEN
C        CALL INSIST('TAPE9',IREP9)
C        IF(IREP9.NE.(-1)) CALL EXI
      ENDIF
      READ (UNIT=5,FMT=600) ID(1),NX,ID(2),NY,ID(3),NZ
      WRITE (UNIT=12,FMT=600) ID(1),NX,ID(2),NY,ID(3),NZ
C
      NZLU = NZ
CMODIF
      READ (UNIT=5,FMT=600) ID(1),MSHEXT
      WRITE (UNIT=12,FMT=600) ID(1),MSHEXT
      IF (MSHEXT.EQ.1) THEN
         WRITE (UNIT=59,FMT=*) 'ON LIRA DONC UN MAILLAGE EXTERIEUR'
         WRITE (UNIT=12,FMT=*) 'ON LIRA DONC UN MAILLAGE EXTERIEUR'
      ENDIF
CMODIF
      READ (UNIT=5,FMT=600) ID(1),LWALL,ID(2),NCHOP,ID(3),LPR,ID(4),
     &JSECTR
      WRITE (UNIT=12,FMT=600) ID(1),LWALL,ID(2),NCHOP,ID(3),LPR,ID(4)
     &,JSECTR
      READ (UNIT=5,FMT=600) ID(1),IREZ,ID(2),NCFILM,ID(3),NCTAP8,ID(4
     &),NCLAST
      WRITE (UNIT=12,FMT=600) ID(1),IREZ,ID(2),NCFILM,ID(3),NCTAP8,ID
     &(4),NCLAST
      READ (UNIT=5,FMT=610) ID(1),CAFILM,ID(2),CAFIN,ID(3),CADUMP,ID(
     &4),DCADMP
      WRITE (UNIT=12,FMT=620) ID(1),CAFILM,ID(2),CAFIN,ID(3),CADUMP,
     &ID(4),DCADMP
      READ (UNIT=5,FMT=610) ID(1),ANGMOM,ID(2),CYL,ID(3),DY,ID(4),
     &PGSSW
CMODIF
      IF (MSHEXT.EQ.1) CYL = 0.
CMODIF
      WRITE (UNIT=12,FMT=620) ID(1),ANGMOM,ID(2),CYL,ID(3),DY,ID(4),
     &PGSSW
      READ (UNIT=5,FMT=610) ID(1),SAMPL,ID(2),DTI,ID(3),DTMXCA
      WRITE (UNIT=12,FMT=620) ID(1),SAMPL,ID(2),DTI,ID(3),DTMXCA
      READ (UNIT=5,FMT=610) ID(1),DTMAX,ID(2),TLIMD,ID(3),TWFILM,ID(4
     &),TWFIN
      WRITE (UNIT=12,FMT=620) ID(1),DTMAX,ID(2),TLIMD,ID(3),TWFILM,ID
     &(4),TWFIN
      READ (UNIT=5,FMT=610) ID(1),FCHSP,ID(2),STROKE,ID(3),SQUISH,ID(
     &4),RPM
      WRITE (UNIT=12,FMT=620) ID(1),FCHSP,ID(2),STROKE,ID(3),SQUISH,
     &ID(4),RPM
      READ (UNIT=5,FMT=610) ID(1),ATDC,ID(2),CONROD,ID(3),OFFSET,ID(4
     &),SWIRL
      WRITE (UNIT=12,FMT=620) ID(1),ATDC,ID(2),CONROD,ID(3),OFFSET,ID
     &(4),SWIRL
      READ (UNIT=5,FMT=610) ID(1),SWIPRO,ID(2),THSECT,ID(3),EPSY
      WRITE (UNIT=12,FMT=620) ID(1),SWIPRO,ID(2),THSECT,ID(3),EPSY
      READ (UNIT=5,FMT=610) ID(1),EPSV,ID(2),EPSP,ID(3),EPST,ID(4),
     &EPSK
      WRITE (UNIT=12,FMT=620) ID(1),EPSV,ID(2),EPSP,ID(3),EPST,ID(4),
     &EPSK
      READ (UNIT=5,FMT=610) ID(1),EPSE,ID(2),GX,ID(3),GY,ID(4),GZ
      WRITE (UNIT=12,FMT=620) ID(1),EPSE,ID(2),GX,ID(3),GY,ID(4),GZ
      READ (UNIT=5,FMT=610) ID(1),TCYLWL,ID(2),THEAD,ID(3),TPISTN,ID(
     &4),TVALVE
      WRITE (UNIT=12,FMT=620) ID(1),TCYLWL,ID(2),THEAD,ID(3),TPISTN,
     &ID(4),TVALVE
      READ (UNIT=5,FMT=610) ID(1),TEMPI,ID(2),PARDON,ID(3),A0,ID(4),
     &B0
      WRITE (UNIT=12,FMT=620) ID(1),TEMPI,ID(2),PARDON,ID(3),A0,ID(4)
     &,B0
      READ (UNIT=5,FMT=610) ID(1),ANC4,ID(2),ADIA
      WRITE (UNIT=12,FMT=620) ID(1),ANC4,ID(2),ADIA
      READ (UNIT=5,FMT=610) ID(1),ANU0,ID(2),VISRAT,ID(3),TCUT
      WRITE (UNIT=12,FMT=620) ID(1),ANU0,ID(2),VISRAT,ID(3),TCUT
      READ (UNIT=5,FMT=610) ID(1),TCUTE,ID(2),EPSCHM,ID(3),OMGCHM,ID(
     &4),TKEI
      WRITE (UNIT=12,FMT=620) ID(1),TCUTE,ID(2),EPSCHM,ID(3),OMGCHM,
     &ID(4),TKEI
      READ (UNIT=5,FMT=610) ID(1),TKESW,ID(2),SGSL,ID(3),UNISCAL
      WRITE (UNIT=12,FMT=620) ID(1),TKESW,ID(2),SGSL,ID(3),UNISCAL
      READ (UNIT=5,FMT=610) ID(1),AIRMU1,ID(2),AIRMU2,ID(3),AIRLA1,ID
     &(4),AIRLA2
      WRITE (UNIT=12,FMT=620) ID(1),AIRMU1,ID(2),AIRMU2,ID(3),AIRLA1,
     &ID(4),AIRLA2
      READ (UNIT=5,FMT=610) ID(1),EXPDIF,ID(2),PRL,ID(3),RPR,ID(4),
     &RPRQ
      WRITE (UNIT=12,FMT=620) ID(1),EXPDIF,ID(2),PRL,ID(3),RPR,ID(4),
     &RPRQ
      READ (UNIT=5,FMT=610) ID(1),RPRE,ID(2),RSC,ID(3),XIGNIT
      WRITE (UNIT=12,FMT=620) ID(1),RPRE,ID(2),RSC,ID(3),XIGNIT
C
      READ (UNIT=5,FMT=610) ID(1),CEBU
      WRITE (UNIT=12,FMT=620) ID(1),CEBU
C
      READ (UNIT=5,FMT=610) ID(1),T1IGN,ID(2),TDIGN,ID(3),CA1IGN,ID(4
     &),CADIGN
      WRITE (UNIT=12,FMT=620) ID(1),T1IGN,ID(2),TDIGN,ID(3),CA1IGN,ID
     &(4),CADIGN
      READ (UNIT=5,FMT=600) ID(1),IIGNL(1),ID(2),IIGNR(1),ID(3),JIGNF
     &(1)
      WRITE (UNIT=12,FMT=600) ID(1),IIGNL(1),ID(2),IIGNR(1),ID(3),
     &JIGNF(1)
      READ (UNIT=5,FMT=600) ID(1),JIGND(1),ID(2),KIGNB(1),ID(3),KIGNT
     &(1)
      WRITE (UNIT=12,FMT=600) ID(1),JIGND(1),ID(2),KIGNB(1),ID(3),
     &KIGNT(1)
      READ (UNIT=5,FMT=600) ID(1),IIGNL(2),ID(2),IIGNR(2),ID(3),JIGNF
     &(2)
      WRITE (UNIT=12,FMT=600) ID(1),IIGNL(2),ID(2),IIGNR(2),ID(3),
     &JIGNF(2)
      READ (UNIT=5,FMT=600) ID(1),JIGND(2),ID(2),KIGNB(2),ID(3),KIGNT
     &(2)
      WRITE (UNIT=12,FMT=600) ID(1),JIGND(2),ID(2),KIGNB(2),ID(3),
     &KIGNT(2)
      READ (UNIT=5,FMT=600) ID(1),KWIKEQ
      WRITE (UNIT=12,FMT=600) ID(1),KWIKEQ
C      IF(SAMPL.EQ.1.0) CALL SAMPLE('TFILE',4)
C      IF(SAMPL.EQ.1.0) CALL SAMPON
C +++
C +++ IF NY DIFFERS ON INPUT FILE, CONVERT 2-D CYLINDRICAL MESH
C +++ TO 3-D SECTOR OR FULL CIRCLE MESH
C +++
      IF (IREST.GT.0) THEN
         NZ = NZSAVE
         IF (NY.NE.NYOLD) THEN
            NYNEW = NY
            NY = NYOLD
C          CALL TRAN3D
         ENDIF
      ENDIF
      THIRD = 1./3.
      TWOTHD = 2.*THIRD
      FORTHD = 4.*THIRD
      SIXTH = 0.5*THIRD
      TWLVTH = 0.5*SIXTH
      PI2 = PI*2.0
      PIO2 = PI*0.5
      PIO180 = PI/180.
      ARROW = TAN(30.0*PIO180)
      ANGMOM = ANGMOM*CYL
C      ICART3=ICVMGT(1,0,CYL.EQ.0.0 .AND. NY.GT.1)
      CART3D = FLOAT(ICART3)
C      ICYL=ICVMGZ(0,1,CYL)
C      CYLNY=CVMGT(1.0,0.0,CYL.EQ.1.0 .AND. NY.GT.1)
      OMCYL = 1.0-CYL
C      NYEQ1=ICVMGT(1,0,NY.EQ.1)
      OMNYQ1 = 1.-FLOAT(NYEQ1)
      IF (JSECTR.EQ.1.AND.NY.GT.1.AND.AMOD(360.0, THSECT).NE.0.0
     &) THEN
         WRITE (UNIT=59,FMT='(A)')
     &   ' THSECT IS NOT AN EVEN FRACTION OF 360 DEGREES'
C        CALL EXITA(5)
      ENDIF
      THREAD = THSECT
      IF (CYL.EQ.0.) JSECTR = 0
      IF (CYL.EQ.1.0.AND.NY.EQ.1) JSECTR = 1
C      THSECT=CVMGZI(360.,THSECT,JSECTR)
C      THSECT=CVMGZI(THSECT,0.500,NYEQ1)*PIO
      COSECT = COS(THSECT)
      SNSECT = SIN(THSECT)
      OMJSEC = 1.-FLOAT(JSECTR)
      JTEST = MAX0(JSECTR, NYEQ1)
      OFFSET = OFFSET*OMNYQ1*OMJSEC
C      DEN=CVMGZ(1.0,THSECT,THSECT)
C      FACSEC=CVMGZ(1.0,PI2/DEN,CYL)
      NXP = NX+1
      NYP = NY+1
      NZP = NZ+1
      NXPNY = NXP*NY
      NXPNYP = NXP*NYP
      IJKALL = NXPNYP*NZP
      IF (IJKALL.GT.NV.OR.NXPNYP.GT.LNXPYP.OR.NZP.GT.LNZP) THEN
         WRITE (UNIT=59,FMT='(A)')
     &   ' PARAMETER ERROR: CHECK NV, LNXPYP, AND LNZP'
C        CALL EXITA(5)
      ENDIF
      JTERM = NXP*(1-NYEQ1)
      NXPNYM = NXP*(NY-1)
      KHT = NZ*NXPNYP
      IJKVEC = KHT-NXP-1
      RPS = RPM/60.
      IF (TKESW.EQ.1.0.AND.LWALL.NE.1) THEN
         WRITE (UNIT=59,FMT='(A)')
     &   ' RESETTING LWALL=+1, BECAUSE TKE SWITCH IS ON'
         LWALL = 1
      ENDIF
C      FRESLP=CVMGPI(1.0,0.0,LWALL)
      IF (TKESW.EQ.1.0) VISRAT = -TWOTHD
C      TKEI=CVMGZ(TKEI,TKEI*2.0*(STROKE*RPS)**2,RPM)
      TKEI = TKEI*TKESW
      PHIMAX = AMAX1(RPR, RSC, 2.+VISRAT, TKESW*RPRQ, TKESW*RPRE)
      CMUEPS = SQRT(CMU*RPRE/(CE2-CE1))
      CE13 = TWOTHD*CE1-CE3
      U0 = 0.875/SQRT(SQRT(CMU)*(CE2-CE1)/RPRE)
      U1 = SQRT(RC)-U0*ALOG(RC)
      Q0 = (PRL*RPR-1.0)*SQRT(RC)
      A0ME = A0
      A0MOM = A0
      ANC4O2 = ANC4*0.5
      IF (T.EQ.0.0.OR.PGSSW.EQ.0.0) PGS = 1.0
      RPGS2 = 1./(PGS**2)
      GRFAC = 1000./FLOAT(NX*NY*NZ)
      CFOCBCK = CFOCB/CSUBK
      X0 = OFFSET
      Y0 = 0.
      DTCAD = 0.0
C      DTMXCA=CVMGZ(9.9E+9,DTMXCA,RPM)
      IF (RPS.GT.0.0) THEN
         RRPS36 = 1./(RPS*360.)
         DTCAD = RRPS36
         DTMXCA = DTMXCA*DTCAD
      ENDIF
      IF (T1IGN.LT.0.0.AND.RPM.GT.0.0) THEN
         T1IGN = ABS(ATDC-CA1IGN)*RRPS36
         TDIGN = ABS(CADIGN)*RRPS36
      ENDIF
      T2IGN = T1IGN+TDIGN
      IF (T.EQ.0.0) THEN
         DT = DTI
         CDUMP = CADUMP
         CFILM = ATDC+CAFILM
         TFILM = TWFILM
      ENDIF
C +++
C +++ READ INJECTOR DATA
C +++
      READ (UNIT=5,FMT=600) ID(1),NUMNOZ,ID(2),NUMVEL,ID(3),INJDIST,
     &ID(4),KOLIDE
      WRITE (UNIT=12,FMT=600) ID(1),NUMNOZ,ID(2),NUMVEL,ID(3),INJDIST
     &,ID(4),KOLIDE
      READ (UNIT=5,FMT=610) ID(1),T1INJ,ID(2),TDINJ,ID(3),CA1INJ,ID(4
     &),CADINJ
      WRITE (UNIT=12,FMT=620) ID(1),T1INJ,ID(2),TDINJ,ID(3),CA1INJ,ID
     &(4),CADINJ
      READ (UNIT=5,FMT=610) ID(1),TSPMAS,ID(2),PULSE,ID(3),TNPARC,ID(
     &4),RHOP
      WRITE (UNIT=12,FMT=620) ID(1),TSPMAS,ID(2),PULSE,ID(3),TNPARC,
     &ID(4),RHOP
      READ (UNIT=5,FMT=610) ID(1),TPI,ID(2),TURB,ID(3),BREAKUP,ID(4),
     &EVAPP
      WRITE (UNIT=12,FMT=620) ID(1),TPI,ID(2),TURB,ID(3),BREAKUP,ID(4
     &),EVAPP
      PI4O3R = PI*FORTHD*RHOP
      IF (NUMNOZ.EQ.0) THEN
         GOTO
      ENDIF
      IF (NUMNOZ.GT.LNOZ) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NUMNOZ > LNOZ'
C        CALL EXITA(5)
      ENDIF
      IF (NUMVEL.GT.LVEL) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NUMVEL > LVEL'
C        CALL EXITA(5)
      ENDIF
      IF (TNPARC.GT.NPAR.AND.PULSE.GT.0.0) WRITE (UNIT=59,FMT='(A)')
     &' WARNING:  TNPARC > NPAR FOR PULSED SPRAY'
      ATOTAL = 0.0
      DO 5 I = 1, NUMNOZ
         READ (UNIT=5,FMT=610) ID(1),DRNOZ(I),ID(2),DZNOZ(I),ID(3),
     &   DTHNOZ(I)
         WRITE (UNIT=12,FMT=620) ID(1),DRNOZ(I),ID(2),DZNOZ(I),ID(3),
     &   DTHNOZ(I)
         READ (UNIT=5,FMT=610) ID(1),TILTXY(I),ID(2),TILTXZ(I),ID(3),
     &   CONE(I),ID(4),DCONE(I)
         WRITE (UNIT=12,FMT=620) ID(1),TILTXY(I),ID(2),TILTXZ(I),ID(3
     &   ),CONE(I),ID(4),DCONE(I)
         READ (UNIT=5,FMT=610) ID(1),ANOZ(I),ID(2),SMR(I),ID(3),AMP0(
     &   I)
         WRITE (UNIT=12,FMT=620) ID(1),ANOZ(I),ID(2),SMR(I),ID(3),
     &   AMP0(I)
         DTHNOZ(I) = DTHNOZ(I)*PIO180
         TILTXY(I) = TILTXY(I)*PIO180
         TILTXZ(I) = TILTXZ(I)*PIO180
         CONE(I) = CONE(I)*PIO180
         DCONE(I) = DCONE(I)*PIO180
         ATOTAL = ATOTAL+ANOZ(I)
5        CONTINUE
      IF (NY.EQ.1) THEN
         NUMNOZ = 1
         DTHNOZ(1) = 0.5*THSECT
         TILTXY(1) = 0.5*THSECT
         IF (CONE(1).NE.DCONE(1)) THEN
            TILTXZ(1) = 0.5*CONE(1)
            CONE(1) = DCONE(1)
         ENDIF
         ANOZ(1) = ANOZ(1)/FACSEC
         ATOTAL = ANOZ(1)
      ENDIF
      READ (UNIT=5,FMT=*) (VELINJ(I), I = 1, NUMVEL)
      IF (T1INJ.LT.0.0.AND.RPM.GT.0.0) THEN
         T1INJ = ABS(ATDC-CA1INJ)*RRPS36
         TDINJ = ABS(CADINJ)*RRPS36
      ENDIF
      T2INJ = T1INJ+TDINJ
      IF (PULSE.LT.3.0) THEN
         TSPMAS = TSPMAS*ANOZ(1)/(ATOTAL*FACSEC)
C        PMINJ=CVMGZ(1.0,TNPARC,TNPARC)
         PMINJ = TSPMAS/PMINJ
      ELSE
C +++
C +++ CALCULATE TOTAL FUEL MASS PREDICTED BY THE VELOCITY TABLE,
C +++ AND CORRECT THE VELOCITIES BY THE RATIO OF MASS DESIRED TO
C +++ MASS PREDICTED:
C +++
         DTINJ = TDINJ/FLOAT(NUMVEL-1)
         ARODT = ATOTAL*RHOP*DTINJ*FACSEC
         FMPRED = 0.0
         DO 10 I = 2, NUMVEL
            FMPRED = FMPRED+ARODT*0.5*(VELINJ(I)+VELINJ(I-1))
10          CONTINUE
         CORECT = TSPMAS/FMPRED
         VELINJ(1) = VELINJ(1)*CORECT
         TFMASS(1) = 0.0
         ARODT = ANOZ(1)*RHOP*DTINJ
         DO 15 I = 2, NUMVEL
            VELINJ(I) = VELINJ(I)*CORECT
            TFMASS(I) = TFMASS(I-1)+ARODT*0.5*(VELINJ(I)+VELINJ(I-1))
15          CONTINUE
         PMINJ = TFMASS(NUMVEL)/TNPARC
      ENDIF
      WRITE (UNIT=12,FMT=880) (VELINJ(I),I, I = 1, NUMVEL)
C +++
C +++ COMPUTE 3 UNIT VECTORS (A, N, & O) FOR EACH NOZZLE, FOR USE
C +++ IN SETTING VELOCITIES IN SUBROUTINE INJECT, WHERE A IS
C +++ ALONG THE AXIS OF INJECTION, N IS THE NORMAL TO A, AND O IS
C +++ OTHER, GIVEN BY THE CROSS PRODUCT OF A AND N:
C +++
      DO 20 I = 1, NUMNOZ
         COSTXY(I) = COS(TILTXY(I))
         SINTXY(I) = SIN(TILTXY(I))
         COSTXZ(I) = COS(TILTXZ(I))
         SINTXZ(I) = SIN(TILTXZ(I))
         EAVEC(I,1) = SINTXZ(I)*COSTXY(I)
         EAVEC(I,2) = SINTXZ(I)*SINTXY(I)
         EAVEC(I,3) = -COSTXZ(I)
         ENVEC(I,1) = SIN(TILTXZ(I)+PIO2)*COSTXY(I)
         ENVEC(I,2) = SIN(TILTXZ(I)+PIO2)*SINTXY(I)
         ENVEC(I,3) = -COS(TILTXZ(I)+PIO2)
         EOVEC(I,1) = EAVEC(I,2)*ENVEC(I,3)-EAVEC(I,3)*ENVEC(I,2)
         EOVEC(I,2) = EAVEC(I,3)*ENVEC(I,1)-EAVEC(I,1)*ENVEC(I,3)
         EOVEC(I,3) = EAVEC(I,1)*ENVEC(I,2)-EAVEC(I,2)*ENVEC(I,1)
20       CONTINUE
25    CONTINUE
C +++
C +++ READ DATA DEFINING PISTON OUTLINE
C +++
      READ (UNIT=5,FMT=600) ID(1),NPO,ID(2),NUNIF
      WRITE (UNIT=12,FMT=630) NPO,NUNIF
CMODIF
      IF (NPO.GT.LP.AND.MSHEXT.EQ.0) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR: NPO > LP'
C        CALL EXITA(5)
      ELSE
         IF (NPO.EQ.0.AND.MSHEXT.EQ.0) THEN
CMODIF
            WRITE (UNIT=59,FMT='(A)') ' CANNOT HAVE NPO = 0'
C        CALL EXITA(5)
         ENDIF
      ENDIF
      DO 30 N = 1, NPO
         READ (UNIT=5,FMT=640) IPO(N),KPO(N),RPO(N),ZPO(N)
30       WRITE (UNIT=12,FMT=640) IPO(N),KPO(N),RPO(N),ZPO(N)
C
C      IF(SGSL.EQ.0.0) SGSL=RPO(NPO)
C      SCLMX=SGSL/CMUEPS
C      RSCLMX=1.0/SCLMX
C
C +++
C +++ SKIPCO TABLE INDICATES SHARP CORNERS, WHICH WE DEFINE AS A CORNER
C +++ WITH LESS THAN A 125 DEGREE INCLUDED ANGLE MEASURED THROUGH THE
C +++ OBSTACLE.  THESE  POINTS ARE SKIPPED (LEFT UNCHANGED) IN THE
C +++ GENERAL FREESLIP VELOCITY TREATMENT IN SUBROUTINE BC, AND ARE
C +++ FLAGGED BY SETTING SKIPCO(N) = 0.0 IN THE TEST BELOW.  ON THE
C +++ OTHER HAND, IF THE CORNER IS ACUTE (INCLUDED ANGLE MEASURED
C +++ THROUGH THE OBSTACLE IS > 235 DEGREES), SKIPCO(N) = -1.0 TO
C +++ INDICATE A SEPARATE CORNER TREATMENT IN SUBROUTINE BC.
C +++
C +++
C +++ LES DEFINITIONS DE SKIPCO ET DE SKIHCO DANS LE CAS D'UN
C +++ MAILLAGE LU EST DIFFERE JUSQU'A L'EXECUTION DE SETUP
C +++
C +++ LA MEME CHOSE POUR LA DEFINITION DE KPTOP, ZHEAD, ZBOT ETC....
C +++ ET TOUTE AUTRE QUANTITE GEOMETRIQUE RELATIVE AU BOL ET CAVITE.
C +++
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) THEN
         GOTO
      ENDIF
99996 CONTINUE
CMODIF
50    READ (UNIT=5,FMT=600) ID(1),NHO
      WRITE (UNIT=12,FMT=600) ID(1),NHO
CMODIF
      IF (NHO.GT.LP.AND.MSHEXT.EQ.0) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NHO > LP'
C        CALL EXITA(5)
      ENDIF
      IF (MSHEXT.EQ.1) THEN
         GOTO
      ENDIF
      IF (NHO.EQ.0.AND.MSHEXT.EQ.0) THEN
         GOTO
      ENDIF
CMODIF2
      ZMAX = -1.0E+10
      DO 60 N = 1, NHO
         IF (IREST.GT.0) KHOSAV(N) = KHO(N)
         READ (UNIT=5,FMT=640) IHO(N),KHO(N),RHO(N),ZHO(N)
         WRITE (UNIT=12,FMT=640) IHO(N),KHO(N),RHO(N),ZHO(N)
         IF (IREST.GT.0) KHO(N) = KHOSAV(N)
         ZMAX = AMAX1(ZMAX, ZHO(N))
60       CONTINUE
CMODIF
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) THEN
CMODIF
         ZHEAD = ZHEAD+ZMAX
         SKIHCO(1) = 1.0
         SKIHCO(NHO) = 1.0
         DO 70 N = 2, NHO-1
            NF = N+1
            NB = N-1
            DRF = RHO(NF)-RHO(N)
            DZF = ZHO(NF)-ZHO(N)
            DRB = RHO(NB)-RHO(N)
            DZB = ZHO(NB)-ZHO(N)
            DFDB = SQRT((DRF**2+DZF**2)*(DRB**2+DZB**2))
            COSINE = (DRF*DRB+DZF*DZB)/DFDB
            SINE = DRF*DZB-DRB*DZF
C      SKIHCO(N)=CVMGT(0.0,1.0,COSINE.GT.-0.573576 .AND. SINE.GT.0.0)
C      SKIHCO(N)=CVMGT(-1.0,SKIHCO(N),
C     &                COSINE.GT.-0.573576 .AND. SINE.LT.0.0)
70          CONTINUE
CMODIF
      ENDIF
CMODIF
      READ (UNIT=5,FMT=600) ID(1),NEO
      WRITE (UNIT=12,FMT=600) ID(1),NEO
      IF (NEO.EQ.0) THEN
         GOTO
      ENDIF
      DO 80 N = 1, NEO
         READ (UNIT=5,FMT=640) NCORR(N),IEMAX(N),SEMIMJ(N),SEMIMN(N)
         WRITE (UNIT=12,FMT=640) NCORR(N),IEMAX(N),SEMIMJ(N),SEMIMN(N
     &   )
80       CONTINUE
C +++
C +++ READ AND CHECK DATA FOR THE SQUARE BOWL OPTION
C +++
90    READ (UNIT=5,FMT=610) ID(1),SQUARE,ID(2),RCORNR
      WRITE (UNIT=12,FMT=620) ID(1),SQUARE,ID(2),RCORNR
      READ (UNIT=5,FMT=600) ID(1),NSTRT
      WRITE (UNIT=12,FMT=600) ID(1),NSTRT
CMODIF
C +++
C +++ SKIP IF EXTERNAL MESH
C +++
      IF (MSHEXT.EQ.0) THEN
CMODIF
         IF (SQUARE.EQ.1.0) THEN
            IF (OFFSET.NE.0.0) THEN
               WRITE (UNIT=59,FMT='(A)')
     &         ' OFFSET SQUARE BOWLS NOT ALLOWED'
C          CALL EXITA(5)
            ELSE
               IF (RCORNR.LE.0.0) THEN
                  WRITE (UNIT=59,FMT='(A)')
     &            ' RCORNR MUST BE > 0.0 FOR SQUARE BOWL'
C          CALL EXITA(5)
               ELSE
                  IF (NHO.GT.0) THEN
                     WRITE (UNIT=59,FMT='(A)')
     &               ' NHO MUST BE 0 FOR SQUARE BOWLS'
C          CALL EXITA(5)
                  ELSE
                     IF (CYL.EQ.0.0) THEN
                        WRITE (UNIT=59,FMT='(A)')
     &                  ' CYL MUST BE 1.0 FOR SQUARE BOWLS'
C          CALL EXITA(5)
                     ELSE
                        IF (NY-2*NSTRT.LT.1) THEN
                           WRITE (UNIT=59,FMT='(A)') ' NY INCOMPATIBLE W
     &ITH NSTRT FOR SQUARE BOWL'
C          CALL EXITA(5)
                        ELSE
                           IF (THREAD.NE.90.0.OR.JSECTR.EQ.0) THEN
                              WRITE (UNIT=59,FMT='(A)') ' SQUARE BOWL RE
     &QUIRES 90-DEGREE SECTOR MESH'
C          CALL EXITA(5)
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
CMODIF
      ENDIF
CMODIF
C +++
C +++ READ CONTOUR PLOT BINARY FLAGS AND
C +++ SETUP ZONE, VELOCITY VECTOR, AND CONTOUR PLOTS
C +++ ENSURE KSLV & KSLC CHOICES WITHIN MESH, AS CHOPPER CAN AFFECT THEM
C +++ (X-,Y-,ZCPLOT SPECIALIZE PLOT CENTER TO ENGINE GEOMETRY)
C +++
      READ (UNIT=5,FMT='(A8,26I1)') ID(1),(ICONT(N), N = 1, 26)
      WRITE (UNIT=12,FMT='(A8,26I1)') ID(1),(ICONT(N), N = 1, 26)
      XCPLOT = 0.0
      YCPLOT = 0.0
      ZCPLOT = ZHEAD-0.5*STROKE
      READ (UNIT=5,FMT=600) ID(1),MIRROR
C      MIRROR=CVMGT(MIRROR,0,NY.EQ.1 .AND. CYL.EQ.1.0)
      WRITE (UNIT=12,FMT=600) ID(1),MIRROR
      RFNY = 1.0/FLOAT(NY)
      THONY = THSECT*RFNY
      COSAL = COS(THONY)
      SINAL = SIN(THONY)
      OMEPS = 1.-1.E-10
      READ (UNIT=5,FMT=600) ID(1),NVZONE
      WRITE (UNIT=12,FMT=650) NVZONE
      IF (NVZONE.GT.LV) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NVZONE > LV'
C        CALL EXITA(5)
      ENDIF
      IF (NVZONE.EQ.0) THEN
         GOTO
      ENDIF
      DO 100 N = 1, NVZONE
         IF1 = (N-1)*6+1
         IF6 = IF1+5
         READ (UNIT=5,FMT=660) XEZ(N),YEZ(N),ZEZ(N),(IFACE(I), I =
     &   IF1, IF6),IEDG(N)
         WRITE (UNIT=12,FMT=670) XEZ(N),YEZ(N),ZEZ(N),(IFACE(I), I =
     &   IF1, IF6),IEDG(N)
         IF (XEZ(N).EQ.XCPLOT) XEZ(N) = XEZ(N)+1.E-6
         IF (YEZ(N).EQ.YCPLOT) YEZ(N) = YEZ(N)+1.E-6
         IF (ZEZ(N).EQ.ZCPLOT) ZEZ(N) = ZEZ(N)+1.E-6
         XDIST = XEZ(N)-XCPLOT
         YDIST = YEZ(N)-YCPLOT
         ZDIST = ZEZ(N)-ZCPLOT
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)
         RADEYE = SQRT(ZDIST**2+GROUND**2)
         XOG = XDIST/GROUND
C +++
C +++ AVOID ASIN OF 1.0 + LOW-ORDER BIT, WHICH CAN OCCUR ON CRAY
C +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)
         THETA = ASIN(XOG)
         YOG = YDIST/GROUND
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)
         Q1 = ASIN(YOG)+PIO2
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1
         ZOR = ZDIST/RADEYE
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)
         PHI = ASIN(ZOR)
         SINTHZ(N) = SIN(THETA)
         COSTHZ(N) = COS(THETA)
         SINPHZ(N) = SIN(PHI)
         COSPHZ(N) = COS(PHI)
         XBEZ(N) = XDIST*COSTHZ(N)+YDIST*SINTHZ(N)
         YZTERM = YDIST*COSTHZ(N)-XDIST*SINTHZ(N)
         YBEZ(N) = COSPHZ(N)*YZTERM-ZDIST*SINPHZ(N)
         ZBEZ(N) = SINPHZ(N)*YZTERM+ZDIST*COSPHZ(N)
C +++
C +++ ENSURE LEFT, FRONT, DERRIERE FACES NOT PLOTTED IN 3-D CYL.
C +++
C      INOP=CVMGT(0,1,CYL.EQ.1.0 .AND. NY.GT.1 .AND. JSECTR.EQ.0)
         IFX = (N-1)*6
         IFACE(IFX+1) = IFACE(IFX+1)*INOP
         IFACE(IFX+3) = IFACE(IFX+3)*INOP
         IFACE(IFX+4) = IFACE(IFX+4)*INOP
100      CONTINUE
110   IF (NY.EQ.1) NVZONE = 1
      READ (UNIT=5,FMT=600) ID(1),NVVVEC,ID(2),NVPVEC
      WRITE (UNIT=12,FMT=680) NVVVEC,NVPVEC
      IF (NVVVEC.GT.LV) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NVVVEC > LV'
C        CALL EXITA(5)
      ENDIF
      IF (NVVVEC.EQ.0.AND.NY.GT.1) THEN
         GOTO
      ENDIF
C      NVVV=ICVMGT(1,NVVVEC,NVVVEC.EQ.0 .AND. NY.EQ.1)
      DO 140 N = 1, NVVV
         IF (NVVVEC.EQ.0.AND.NY.EQ.1) THEN
            GOTO
         ENDIF
         READ (UNIT=5,FMT=690) XEV,YEV,ZEV,ISLV(N),JSLV(N),KSLV(N)
         KSLV(N) = MIN0(KSLV(N), NZ)
         WRITE (UNIT=12,FMT=695) XEV,YEV,ZEV,ISLV(N),JSLV(N),KSLV(N)
         IF (NY.GT.1) THEN
            GOTO
         ENDIF
120      XEV = 0.
         YEV = -1.0E10
         ZEV = ZCPLOT
         ISLV(N) = 0
         JSLV(N) = 1
         KSLV(N) = 0
130      CONTINUE
         IF (XEV.EQ.XCPLOT) XEV = XEV+1.E-6
         IF (YEV.EQ.YCPLOT) YEV = YEV+1.E-6
         IF (ZEV.EQ.ZCPLOT) ZEV = ZEV+1.E-6
         XDIST = XEV-XCPLOT
         YDIST = YEV-YCPLOT
         ZDIST = ZEV-ZCPLOT
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)
         RADEYE = SQRT(ZDIST**2+GROUND**2)
         XOG = XDIST/GROUND
C +++
C +++ AVOID ASIN OF 1.0 + LOW-ORDER BIT, WHICH CAN OCCUR ON CRAY
C +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)
         THETA = ASIN(XOG)
         YOG = YDIST/GROUND
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)
         Q1 = ASIN(YOG)+PIO2
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1
         ZOR = ZDIST/RADEYE
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)
         PHI = ASIN(ZOR)
         SINTHV(N) = SIN(THETA)
         COSTHV(N) = COS(THETA)
         SINPHV(N) = SIN(PHI)
         COSPHV(N) = COS(PHI)
         XBEV(N) = XDIST*COSTHV(N)+YDIST*SINTHV(N)
         YZTERM = YDIST*COSTHV(N)-XDIST*SINTHV(N)
         YBEV(N) = COSPHV(N)*YZTERM-ZDIST*SINPHV(N)
         ZBEV(N) = SINPHV(N)*YZTERM+ZDIST*COSPHV(N)
140      CONTINUE
      IF (NY.EQ.1) NVVVEC = 1
150   READ (UNIT=5,FMT=600) ID(1),NVCONT
      WRITE (UNIT=12,FMT=700) NVCONT
      IF (NVCONT.GT.LV) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NVCONT > LV'
C        CALL EXITA(5)
      ENDIF
      IF (NVCONT.EQ.0.AND.NY.GT.1) THEN
         GOTO
      ENDIF
C      NVCO=ICVMGT(1,NVCONT,NVCONT.EQ.0 .AND. NY.EQ.1)
      DO 180 N = 1, NVCO
         IF (NVCONT.EQ.0.AND.NY.EQ.1) THEN
            GOTO
         ENDIF
         READ (UNIT=5,FMT=690) XEC,YEC,ZEC,ISLC(N),JSLC(N),KSLC(N)
         KSLC(N) = MIN0(KSLC(N), NZ)
         WRITE (UNIT=12,FMT=695) XEC,YEC,ZEC,ISLC(N),JSLC(N),KSLC(N)
         IF (NY.GT.1) THEN
            GOTO
         ENDIF
160      XEC = 0.
         YEC = -1.0E10
         ZEC = ZCPLOT
         ISLC(N) = 0
         JSLC(N) = 1
         KSLC(N) = 0
170      CONTINUE
         IF (XEC.EQ.XCPLOT) XEC = XEC+1.E-6
         IF (YEC.EQ.YCPLOT) YEC = YEC+1.E-6
         IF (ZEC.EQ.ZCPLOT) ZEC = ZEC+1.E-6
         XDIST = XEC-XCPLOT
         YDIST = YEC-YCPLOT
         ZDIST = ZEC-ZCPLOT
         GROUND = AMAX1(SQRT(XDIST**2+YDIST**2), 1.E-6)
         RADEYE = SQRT(ZDIST**2+GROUND**2)
         XOG = XDIST/GROUND
C +++
C +++ AVOID ASIN OF 1.0 + LOW-ORDER BIT, WHICH CAN OCCUR ON CRAY
C +++
         IF (ABS(XOG).GT.OMEPS) XOG = SIGN(1., XOG)
         THETA = ASIN(XOG)
         YOG = YDIST/GROUND
         IF (ABS(YOG).GT.OMEPS) YOG = SIGN(1., YOG)
         Q1 = ASIN(YOG)+PIO2
         IF (YDIST.GT.0..AND.XDIST.GT.0.) THETA = Q1
         IF (YDIST.GT.0..AND.XDIST.LT.0.) THETA = -Q1
         ZOR = ZDIST/RADEYE
         IF (ABS(ZOR).GT.OMEPS) ZOR = SIGN(1., ZOR)
         PHI = ASIN(ZOR)
         SINTHC(N) = SIN(THETA)
         COSTHC(N) = COS(THETA)
         SINPHC(N) = SIN(PHI)
         COSPHC(N) = COS(PHI)
         XBEC(N) = XDIST*COSTHC(N)+YDIST*SINTHC(N)
         YZTERM = YDIST*COSTHC(N)-XDIST*SINTHC(N)
         YBEC(N) = COSPHC(N)*YZTERM-ZDIST*SINPHC(N)
         ZBEC(N) = SINPHC(N)*YZTERM+ZDIST*COSPHC(N)
180      CONTINUE
      IF (NY.EQ.1) NVCONT = 1
C +++
C +++ SPECIES DATA INPUT:
C +++ SPECIES #1 IS ASSUMED TO BE THE FUEL, AND SUBROUTINE
C +++ FUEL IS CALLED TO IDENTIFY IT FROM THE FORMULA
C +++ SUPPLIED BELOW, AND TO ASSIGN ALL REQUIRED DATA BEYOND
C +++ THE INITIAL DENSITY.  FOR THE REMAINING SPECIES, THE
C +++ FORMULA, INITIAL DENSITY, MOLECULAR WEIGHT, AND HEA
C +++ OF FORMATION ARE READ IN BELOW.  HTFORM IS CONVERTED
C +++ FROM KCAL/MOLE TO CGS UNITS FOR ALL THE SPECIES.
C +++ COPY SPECIES FORMULAE TO IDCON TABLE, FOR CONTOUR PLOT LABELS
C +++
190   READ (UNIT=5,FMT=600) ID(1),NSP
      WRITE (UNIT=12,FMT=710) ID(1),NSP
      IF (NSP.GT.LNSP.OR.LNSP.LT.3.AND.NCHOP.GT.0) THEN
         WRITE (UNIT=59,FMT='(A)')
     &   ' NSP > LNSP, OR LNSP < 3 AND CHOPPER ON'
C        CALL EXITA(5)
      ENDIF
      DO 200 ISP = 1, NSP
         IF (ISP.EQ.1) THEN
            READ (UNIT=5,FMT=720) IDSP(1),ID(1),RHOI(1)
C        CALL FUEL
            ID(2) = ' MW1  '
            ID(3) = ' HTF1 '
         ELSE
            READ (UNIT=5,FMT=730) IDSP(ISP),ID(1),RHOI(ISP),ID(2),MW(
     &      ISP),ID(3),HTFORM(ISP)
         ENDIF
         RMW(ISP) = 1./MW(ISP)
         HTFORM(ISP) = HTFORM(ISP)*4.184E+10
         WRITE (UNIT=12,FMT=740) IDSP(ISP),ID(1),RHOI(ISP),ID(2),MW(
     &   ISP),ID(3),HTFORM(ISP)
         IDCON(ISP+11) = IDSP(ISP)
200      CONTINUE
C +++
C +++ CALCULATE INITIAL DROPLET OSCILLATION FREQUENCY AT INJECTOR.
C +++ STINJ IS SURFACE TENSION OF INJECTED FUEL, VISINJ IS ITS VISCOSITY
C +++
      IF (TPI.GT.TCRIT.OR.BREAKUP.EQ.0.0.OR.NUMNOZ.EQ.0) THEN
         GOTO
      ENDIF
      STINJ = AMAX1(STM*TPI+STB, 1.E-6)
      TB = TPI*0.1
      ITB = INT(TB)
      FR = TB-FLOAT(ITB)
      VISINJ = FR*VISLIQ(ITB+2)+(1.0-FR)*VISLIQ(ITB+1)
      VISINJ = AMAX1(VISINJ, 1.E-10)
      DO 205 I = 1, NUMNOZ
         OSCIL0(I) = SQRT(CSUBK*STINJ/(RHOP*SMR(I)**3)-(CSUBMU*VISINJ
     &   /(2.0*RHOP*SMR(I)**2))**2)
205      CONTINUE
C +++
C +++ READ IN BOUNDARY CONDITION DATA FOR RIGHT, TOP, BOTTOM
C +++
210   READ (UNIT=5,FMT=610) ID(1),RTOUT,ID(2),TOPOUT,ID(3),BOTIN
      WRITE (UNIT=12,FMT=620) ID(1),RTOUT,ID(2),TOPOUT,ID(3),BOTIN
      BOTFAC = FRESLP*(1.-BOTIN)
      RTFAC = FRESLP*(1.-RTOUT)
      TOPFAC = FRESLP*(1.-TOPOUT)
      BOTCYL = BOTIN*CYL
C      RTNOSLP=CVMGT(1.0,0.0,RTOUT.EQ.0.0 .AND. FRESLP.EQ.0.0)
C
CAS STATIONNAIRE
      IF (MSHEXT.EQ.1.AND.RPM.EQ.0..AND.BOTIN+TOPOUT.GT.0.0) THEN
         GOTO
      ENDIF
C
      IF (RTOUT+TOPOUT+BOTIN.GT.0.0) THEN
         READ (UNIT=5,FMT=610) ID(1),DISTAMB,ID(2),PAMB,ID(3),TKEAMB,
     &   ID(4),SCLAMB
         WRITE (UNIT=12,FMT=620) ID(1),DISTAMB,ID(2),PAMB,ID(3),
     &   TKEAMB,ID(4),SCLAMB
         SCLAMB = SCLAMB/CMUEPS
         DO 215 ISP = 1, NSP
            READ (UNIT=5,FMT=610) ID(1),SPDAMB(ISP)
            WRITE (UNIT=12,FMT=620) ID(1),SPDAMB(ISP)
215         CONTINUE
      ENDIF
      IF (BOTIN.EQ.1.0) THEN
         READ (UNIT=5,FMT=610) ID(1),WIN
         WRITE (UNIT=12,FMT=620) ID(1),WIN
         DO 220 ISP = 1, NSP
            READ (UNIT=5,FMT=610) ID(1),SPDIN0(ISP)
            WRITE (UNIT=12,FMT=620) ID(1),SPDIN0(ISP)
220         CONTINUE
      ENDIF
C +++
C +++ READ IN KINETIC REACTION DATA
C +++
224   CONTINUE
C
      READ (UNIT=5,FMT=600) ID(1),NRK
      WRITE (UNIT=12,FMT=600) ID(1),NRK
      IF (NRK.EQ.0) THEN
         GOTO
      ENDIF
      IF (NRK.GT.LNRK) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NRK > LNRK'
C        CALL EXITA(5)
      ENDIF
      DO 240 IR = 1, NRK
         READ (UNIT=5,FMT=750) CF(IR),EF(IR),ZETAF(IR)
         READ (UNIT=5,FMT=750) CB(IR),EB(IR),ZETAB(IR)
         READ (UNIT=5,FMT=780) (AM(ISP,IR), ISP = 1, NSP)
         READ (UNIT=5,FMT=780) (BM(ISP,IR), ISP = 1, NSP)
         READ (UNIT=5,FMT=790) (AE(ISP,IR), ISP = 1, NSP)
         READ (UNIT=5,FMT=790) (BE(ISP,IR), ISP = 1, NSP)
C +++
C +++ SET REACTION-SPECIES INDEX ARRAYS
C +++
         NK = 0
         QR(IR) = 0.
         DO 230 ISP = 1, NSP
            IF (AM(ISP,IR).EQ.0.AND.BM(ISP,IR).EQ.0) THEN
               GOTO
            ENDIF
            NK = NK+1
            CM(NK,IR) = ISP
            FAM(ISP,IR) = FLOAT(AM(ISP,IR))
            FBM(ISP,IR) = FLOAT(BM(ISP,IR))
            FBMAM(ISP,IR) = FBM(ISP,IR)-FAM(ISP,IR)
            QR(IR) = QR(IR)-FBMAM(ISP,IR)*HTFORM(ISP)
230         CONTINUE
         NELEM(IR) = NK
         WRITE (UNIT=12,FMT=800) IR,QR(IR)
         WRITE (UNIT=12,FMT=810) CF(IR),EF(IR),ZETAF(IR)
         WRITE (UNIT=12,FMT=820) CB(IR),EB(IR),ZETAB(IR)
         MESS = ' LHS'
         WRITE (UNIT=12,FMT=830) MESS,(AM(ISP,IR), ISP = 1, NSP)
         MESS = ' RHS'
         WRITE (UNIT=12,FMT=830) MESS,(BM(ISP,IR), ISP = 1, NSP)
         MESS = ' FOR'
         WRITE (UNIT=12,FMT=840) MESS,(AE(ISP,IR), ISP = 1, NSP)
         MESS = 'BACK'
         WRITE (UNIT=12,FMT=840) MESS,(BE(ISP,IR), ISP = 1, NSP)
240      CONTINUE
C +++
C +++ READ IN EQUILIBRIUM REACTION DATA ONLY WHEN THE GENERAL
C +++ EQUILIBRIUM SOLVER IS SPECIFIED (KWIKEQ=0):
C +++
250   IF (KWIKEQ.EQ.1) THEN
         GOTO
      ENDIF
      READ (UNIT=5,FMT=600) ID(1),NRE
      WRITE (UNIT=12,FMT=600) ID(1),NRE
      IF (NRE.EQ.0) THEN
         GOTO
      ENDIF
      IF (NRE.GT.LNRE) THEN
         WRITE (UNIT=59,FMT='(A)') ' PARAMETER ERROR:  NRE > LNRE'
C        CALL EXITA(5)
      ENDIF
      DO 270 IRE = 1, NRE
         READ (UNIT=5,FMT=760) AS(IRE),BS(IRE),CS(IRE),DS(IRE),ES(IRE
     &   )
         READ (UNIT=5,FMT=780) (AN(ISP,IRE), ISP = 1, NSP)
         READ (UNIT=5,FMT=780) (BN(ISP,IRE), ISP = 1, NSP)
         NK = 0
         QEQ(IRE) = 0.
         DO 260 ISP = 1, NSP
            IF (AN(ISP,IRE).EQ.0.AND.BN(ISP,IRE).EQ.0) THEN
               GOTO
            ENDIF
            NK = NK+1
            CN(NK,IRE) = ISP
            FBNAN(ISP,IRE) = FLOAT(BN(ISP,IRE))-FLOAT(AN(ISP,IRE))
            QEQ(IRE) = QEQ(IRE)-FBNAN(ISP,IRE)*HTFORM(ISP)
260         CONTINUE
         NLM(IRE) = NK
         WRITE (UNIT=12,FMT=850) IRE,AS(IRE),BS(IRE),CS(IRE),DS(IRE),
     &   ES(IRE)
         WRITE (UNIT=12,FMT=860) QEQ(IRE),NLM(IRE)
         MESS = 'AN'
         WRITE (UNIT=12,FMT=870) MESS,(AN(ISP,IRE), ISP = 1, NSP)
         MESS = 'BN'
         WRITE (UNIT=12,FMT=870) MESS,(BN(ISP,IRE), ISP = 1, NSP)
         MESS = 'CN'
         WRITE (UNIT=12,FMT=870) MESS,(CN(ISP,IRE), ISP = 1, NSP)
270      CONTINUE
C +++
C +++ CONVERT HK ARRAYS OF ENTHALPY (IN KCAL/MOLE) TO EK ARRAYS
C +++ OF SIE (IN ERGS/GM).  1.987E-03 IS UNIVERSAL GAS CONSTAN
C +++ IN KCAL/MOLE DEGREE KELVIN; 4.184E+10 IS ERGS/KCAL.  TERMS
C +++ IN () REPRESENT SIE IN KCAL/MOLE, WITH REFERENCE TO ZERO
C +++ AT ABSOLUTE ZERO:
C +++
280   DO 290 ISP = 1, LNSP
         HKZERO = HK(1,ISP)
         DO 290 N = 1, 51
            TEMPE = 100.*FLOAT(N-1)
            EK(N,ISP) = 4.184E+10*RMW(ISP)*(HK(N,ISP)-HKZERO-
     &      1.987E-03*TEMPE)
290         CONTINUE
CMODIF
C       DO 291 ISP=13,
C       DO 291 N=1,
C       EK(N,ISP)=EK(N,1)
C  291 CONTINUE
CMODIF
C +++
C +++ CONVERT LATENT HEAT OF THE LIQUID USING THESE EK(N,1) VALUES
C +++
      DO 310 N = 1, 51
         TEMPE = 100.*FLOAT(N-1)
         IF (TEMPE.GE.TCRIT) THEN
            GOTO
         ENDIF
         ELIQ(N) = EK(N,1)+RGAS*TEMPE*RMW(1)-PVAP(10*N-9)/RHOP-HLAT0(
     &   N)
         GOTO
300      ELIQ(N) = EK(N,1)
310      CONTINUE
C +++
C +++ CREATE INVERSE ERROR FUNCTION TABLE, USED IN SUBROUTINE
C +++ PMOVTV FOR COMPUTING TURBULENT VELOCITY COMPONENTS
C +++
      RERF(1) = 0.
      RERF(21) = 2.
      DO 330 K = 2, 20
         ERR = 0.05*FLOAT(K-1)
         XG = ERR*(1.+ERR)
320      CONTINUE
C     FN=ERF(XG)-ERR
         DFN = 0.8862269255*EXP(XG*XG)
         DIFF = -FN*DFN
         XG = XG+DIFF
         IF (ABS(DIFF).LT.1.E-07) THEN
         ELSE
            GOTO
         ENDIF
330      CONTINUE
         RERF(K) = XG
C +++
C +++ CREATE SPRAY MASS FRACTION TABLE, USED TO CALC. RADP IN INJEC
C +++
      XX = 12.0
      RRD100 = 1.0/(1.0-EXP(-XX)*(1.+XX+.5*XX**2+SIXTH*XX**3))
      DO 340 N = 1, 100
         XX = 0.12*FLOAT(N)
         RDINJ(N) = (1.0-EXP(-XX)*(1.+XX+.5*XX**2+SIXTH*XX**3))*
     &   RRD100
340      CONTINUE
C
C
C       MODIF POUR RESTART:
C
      IF (MSHEXT.EQ.1.AND.IREST.NE.0) THEN
         NPO = 1
         NHO = 0
         IF (NKC.NE.0) NHO = 1
         RPO(NPO) = RAYON
         KPO(NPO) = KPTOP
         KHO(NHO) = KPTOP2
         IF (SGSL.EQ.0.0) SGSL = RPO(NPO)
         SCLMX = SGSL/CMUEPS
         RSCLMX = 1.0/SCLMX
C
         IF (NZLU.NE.NZSAVE) THEN
            KIGNB(1) = KIGNB1
            KIGNB(2) = KIGNB2
            KIGNT(1) = KIGNT1
            KIGNT(2) = KIGNT2
         ENDIF
C
         IF (CRANK.LT.CADUMP) CDUMP = CADUMP
C
         RHOI(1) = XCAR*RHO0
         RHOI(2) = XAIR*RHO0*FO2
         RHOI(3) = XAIR*RHO0*FN2
         RHOI(4) = 0.0
         RHOI(5) = 0.0
         OPEN (UNIT=13,FILE='SWIRL.EVOL',FORM='FORMATTED')
         OPEN (UNIT=14,FILE='TUMBL.EVOL',FORM='FORMATTED')
         OPEN (UNIT=10,FILE='BRULE.EBU',FORM='FORMATTED')
         OPEN (UNIT=15,FILE='DEBIT.NCYC',FORM='FORMATTED')
         WRITE (UNIT=13,FMT=8007)
         WRITE (UNIT=14,FMT=8006)
         WRITE (UNIT=10,FMT=8012)
         WRITE (UNIT=15,FMT=8015)
      ENDIF
C
C
      RETURN
99997 CONTINUE
      READ (UNIT=5,FMT=610) ID(1),DISTAMB,ID(2),PAMB,ID(3),SCLAMB
      WRITE (UNIT=12,FMT=620) ID(1),DISTAMB,ID(2),PAMB,ID(3),SCLAMB
      SCLAMB = SCLAMB/CMUEPS
C +++     LES AUTRES VALEURS SONT DEFINIES DANS SETUP.
      GOTO
99998 CONTINUE
C
      IF (SGSL.EQ.0.0) SGSL = RPO(NPO)
      SCLMX = SGSL/CMUEPS
      RSCLMX = 1.0/SCLMX
C
      SKIPCO(1) = 1.0
      SKIPCO(NPO) = 1.0
      FLAT = 1.0
      DO 40 N = 2, NPO-1
C      FLAT=CVMGT(0.0,FLAT,ZPO(N).NE.ZPO(1))
         NF = N+1
         NB = N-1
         DRF = RPO(NF)-RPO(N)
         DZF = ZPO(NF)-ZPO(N)
         DRB = RPO(NB)-RPO(N)
         DZB = ZPO(NB)-ZPO(N)
         DFDB = SQRT((DRF**2+DZF**2)*(DRB**2+DZB**2))
         COSINE = (DRF*DRB+DZF*DZB)/DFDB
         SINE = DRB*DZF-DRF*DZB
C      SKIPCO(N)=CVMGT(0.0,1.0,COSINE.GT.-0.573576 .AND. SINE.GT.0.0)
C      SKIPCO(N)=CVMGT(-1.0,SKIPCO(N),
C     &                COSINE.GT.-0.573576 .AND. SINE.LT.0.0)
40       CONTINUE
      ZHEAD = STROKE+ZPO(NPO)+SQUISH
      ZHBOT = ZHEAD
      KPTOP = KPO(NPO)
C      NCHOP=ICVMGZ(0,NCHOP,RPM)
C      NCHOP=CVMGT(0,NCHOP,NCHOP.GE.NZ)
C      NCHOP=CVMGT(2,NCHOP,NCHOP.EQ.1)
      IF (NCHOP.EQ.0) THEN
         GOTO
      ENDIF
C +++
C +++ ALTERNATIVELY, TO DELAY CHOPPING IN BOWL GEOMETRY, SE
C +++ DZCHOP = 0.999*SQUISH / FLOAT(NCHOP)
C +++
C      DZCHOP=CVMGZ(FLOAT(NCHOP+1),0.999,FLAT) * SQUISH/FLOAT(NCHOP)
      WRITE (UNIT=12,FMT=770) DZCHOP
      WRITE (UNIT=59,FMT=770) DZCHOP
C +++
C +++ READ DATA DEFINING HEAD OUTLINE
C +++
CMODIF
      GOTO
C
      END

float main()
{
   static float A[2];
   static float B[2];
   static float C[2];
   static float D[2];

   pin_down(D, A, B, C);
   {
      ticks start, stop;
      start = clock();

      D[0] = C[0]+A[0]*B[0];
      D[0] -= A[1]*B[1];

      D[1] = C[1]+A[1]*B[0];
      D[1] += A[0]*B[1];

      stop = clock();
      printf("%llu\n", (unsigned long long int) (stop-start));
   }

   pin_down(D, A, B, C);
   return 0;
}
float main()
{
   static float A[2];
   static float B[2];
   static float C[2];
   static float D[2];
   //PIPS generated variable
   ticks stop0;
   //PIPS generated variable
   ticks start0;
   //SAC generated temporary array
   a4sf pdata0 = {0, 0, 0, 0};
   //PIPS generated variable
   v4sf vec00_0, vec10_0, vec20_0;

   pin_down(D, A, B, C);
   //PIPS:SAC generated v4sf vector(s)
   start0 = clock();
   SIMD_LOAD_GENERIC_V4SF(vec20_0, B[0], B[0], B[1], B[1]);
   SIMD_LOAD_GENERIC_V4SF(vec10_0, A[0], A[1], A[0], A[1]);
   SIMD_MULPS(vec00_0, vec10_0, vec20_0);
   SIMD_STORE_V4SF(vec00_0, &pdata0[0]);

   stop0 = clock();

   D[0] = C[0]+pdata0[0];
   D[0] = D[0]-pdata0[3];

   D[1] = C[1]+pdata0[1];
   D[1] = D[1]+pdata0[2];
   printf("%llu\n", (unsigned long long int) (stop0-start0));

   return 0;
}
['d.out/SIMD.c', 'd.out/complex_update.c']

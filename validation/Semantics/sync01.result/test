
Symbol table for "main" (check the type of boolean variables)

main

Declarations for module "main" with type "void -> int"

Variable list:

	Declared entity "TOP-LEVEL:*STATIC*" with type "area" with size 0
	Declared entity "main:*DYNAMIC*" with type "area" with size 26
	Declared entity "main:*HEAP*" with type "area" with size 0
	Declared entity "main:*STACK*" with type "area" with size 0
	Declared entity "main:*STATIC*" with type "area" with size 0
	Declared entity "main:0`__FUNCTION__" with type "variable" "char *"
	Declared entity "main:0`__func__" with type "variable" "char *"
	Declared entity "main:0`b" with type "variable" "_Bool"
	Declared entity "main:0`ok" with type "variable" "_Bool"
	Declared entity "main:0`x" with type "variable" "int"
	Declared entity "main:0`y" with type "variable" "int"
	Declared entity "main:main" with type "variable" "int"
	Declared entity "sync01!:*STATIC*" with type "area" with size 0

* empty extern declaration list *


Layout for return variable:

	Variable "main:main"	size = 4

Layouts for memory areas:

Layout for memory area "TOP-LEVEL:*STATIC*" of size 0:
	External Variable "TOP-LEVEL:_IO_2_1_stdin_"	offset = UNKNOWN,	size = unknown
	External Variable "TOP-LEVEL:_IO_2_1_stdout_"	offset = UNKNOWN,	size = unknown
	External Variable "TOP-LEVEL:_IO_2_1_stderr_"	offset = UNKNOWN,	size = unknown
	External Variable "TOP-LEVEL:stdin"	offset = UNKNOWN,	size = 8
	External Variable "TOP-LEVEL:stdout"	offset = UNKNOWN,	size = 8
	External Variable "TOP-LEVEL:stderr"	offset = UNKNOWN,	size = 8


Layout for memory area "main:*DYNAMIC*" of size 26:
	Variable "main:0`b"	offset = 10	size = 4
	Variable "main:0`ok"	offset = 14	size = 4
	Variable "main:0`x"	offset = 18	size = 4
	Variable "main:0`y"	offset = 22	size = 4
	Variable "main:0`__func__"	offset = 0	size = 5
	Variable "main:0`__FUNCTION__"	offset = 5	size = 5


Layout for memory area "main:*HEAP*" of size 0:
	* empty area *


Layout for memory area "main:*STACK*" of size 0:
	* empty area *


Layout for memory area "main:*STATIC*" of size 0:
	* empty area *


Layout for memory area "sync01!:*STATIC*" of size 0:
	* empty area *

End of declarations for module main


Transformers for "main"


//  T() {0==-1}

int main(void)
{
   //bool b = false, ok = true;
   //int x=0, y=0;

//  T() {}

   _Bool b, ok;

//  T() {}

   int x, y;

//  T() {b==0, ok==1, x==0, y==0}


   if (!(!b&&ok&&x==0&&y==0))

//  T() {0==-1}

      exit(1);

//  T(b,ok,x,y) {b+x#init+y==b#init+x+y#init,
//    b#init+ok#init+2y#init<=b+ok+2y, b#init+y#init<=b+y,
//    ok<=ok#init, y#init<=y}

   while (1) {

//  T(x,y) {b+y#init==y, x+y==x#init+y#init+1, y#init<=y, y<=y#init+1}

      if (b)

//  T(y) {y==y#init+1}

         y = y+1;
      else

//  T(x) {x==x#init+1}

         x = x+1;

//  T(b) {b+b#init==1, 0<=b, b<=1}

      // flip-flop
      b = !b;

//  T(ok) {0<=ok, ok<=1, ok<=ok#init, 0<=ok#init, ok#init<=1}

      ok = ok&&x>=y;

//  T() {}

      // If the previous boolean assignment is changed into
      //if(x<y)
      //  ok = false;
      // the condition is found.
      
      // assert(ok);
      // we want ok==1
      fprintf(stdout, "b=%d ok=%d x=%d y=%d\n", b, ok, x, y);
   }
}

Preconditions for "main"


//  P() {}

int main(void)
{
   //bool b = false, ok = true;
   //int x=0, y=0;

//  P() {}

   _Bool b, ok;

//  P() {}

   int x, y;

//  P() {}


   if (!(!b&&ok&&x==0&&y==0))

//  P() {}

      exit(1);

//  P() {b==0, ok==1, x==0, y==0}

   while (1) {

//  P(b,ok,x,y) {b+y==x, 0<=b, b<=1, b<=x, 0<=ok, ok<=1, 1<=ok+x}

      if (b)

//  P(b,ok,x,y) {b==1, x==y+1, 0<=ok, ok<=1, 1<=x}

         y = y+1;
      else

//  P(b,ok,x,y) {b==0, x==y, 0<=ok, ok<=1, 1<=ok+x, 0<=x}

         x = x+1;

//  P(b,ok,x,y) {b+x==y+1, 0<=ok, ok<=1, 1<=ok+y, 1<=x, y<=x, x<=y+1}

      // flip-flop
      b = !b;

//  P(b,ok,x,y) {b+y==x, 0<=b, b<=1, 0<=ok, ok<=1, 1<=ok+y, 1<=x}

      ok = ok&&x>=y;

//  P(b,ok,x,y) {b+y==x, 0<=b, b<=1, 0<=ok, ok<=1, 1<=x, 0<=y}

      // If the previous boolean assignment is changed into
      //if(x<y)
      //  ok = false;
      // the condition is found.
      
      // assert(ok);
      // we want ok==1
      fprintf(stdout, "b=%d ok=%d x=%d y=%d\n", b, ok, x, y);
   }
}

Transformers for "main" after transformer refinement


//  T() {0==-1}

int main(void)
{
   //bool b = false, ok = true;
   //int x=0, y=0;

//  T() {}

   _Bool b, ok;

//  T() {}

   int x, y;

//  T() {b==0, ok==1, x==0, y==0}


   if (!(!b&&ok&&x==0&&y==0))

//  T() {0==-1}

      exit(1);

//  T(b,ok,x,y) {b+y==x, b#init==0, ok==1, ok#init==1, x#init==0,
//    y#init==0, 0<=b, b<=1, b<=x, 0<=x}

   while (1) {

//  T(x,y) {b+x==x#init+1, x==y#init+1, x#init==y, 0<=ok, ok<=1,
//    1<=ok+x#init, 1<=x, x#init<=x, x<=x#init+1}

      if (b)

//  T(y) {b==1, x==y, x==y#init+1, 0<=ok, ok<=1, 1<=x}

         y = y+1;
      else

//  T(x) {b==0, x==x#init+1, x==y+1, 0<=ok, ok<=1, 2<=ok+x, 1<=x}

         x = x+1;

//  T(b) {b+b#init==1, b+y==x, 0<=b, b<=1, b+1<=ok+x, 0<=ok, ok<=1,
//    1<=x}

      // flip-flop
      b = !b;

//  T(ok) {b+y==x, ok==ok#init, 0<=b, b<=1, b+1<=ok+x, 0<=ok, ok<=1,
//    1<=x}

      ok = ok&&x>=y;

//  T() {b+y==x, 0<=b, b<=1, b+1<=ok+x, 0<=ok, ok<=1, 1<=x, 0<=y}

      // If the previous boolean assignment is changed into
      //if(x<y)
      //  ok = false;
      // the condition is found.
      
      // assert(ok);
      // we want ok==1
      fprintf(stdout, "b=%d ok=%d x=%d y=%d\n", b, ok, x, y);
   }
}

Preconditions for "main" after transformer refinement


//  P() {}

int main(void)
{
   //bool b = false, ok = true;
   //int x=0, y=0;

//  P() {}

   _Bool b, ok;

//  P() {}

   int x, y;

//  P() {}


   if (!(!b&&ok&&x==0&&y==0))

//  P() {}

      exit(1);

//  P() {b==0, ok==1, x==0, y==0}

   while (1) {

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, b<=x}

      if (b)

//  P(b,ok,x,y) {b==1, ok==1, x==y+1, 1<=x}

         y = y+1;
      else

//  P(b,ok,x,y) {b==0, ok==1, x==y, 0<=x}

         x = x+1;

//  P(b,ok,x,y) {b+x==y+1, ok==1, 1<=x, y<=x, x<=y+1}

      // flip-flop
      b = !b;

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, 1<=x}

      ok = ok&&x>=y;

//  P(b,ok,x,y) {b+y==x, ok==1, 0<=b, b<=1, 1<=x}

      // If the previous boolean assignment is changed into
      //if(x<y)
      //  ok = false;
      // the condition is found.
      
      // assert(ok);
      // we want ok==1
      fprintf(stdout, "b=%d ok=%d x=%d y=%d\n", b, ok, x, y);
   }
}

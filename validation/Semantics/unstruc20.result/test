void unstruc20(int n)
{
// (0,1)
   // BEGIN BLOCK
   // Like unstruc01, but does not show bug on non-exiting unstructured
   // by Nga Nguyen because the unreachable code, the second printf,
   // seems to be eliminated by the controlizer.
   
// (0,2)
   int i = 0;
// (0,3)
//:   BEGIN UNSTRUCTURED
// (1,1)
   // BEGIN BLOCK
// (1,2)

l100:   if (alea())
// (1,3)
      i++;
   else
// (1,4)
      // BEGIN BLOCK
      // END BLOCK
// (1,5)
   if (i>=n)
// (1,6)
      exit(0);
   else
// (1,7)
      // BEGIN BLOCK
      // END BLOCK
// (1,8)
   printf("%d\n", i);
   // END BLOCK
   goto l100;
//:   END UNSTRUCTURED
   // END BLOCK
}

//  T() {0==-1}

void unstruc20(int n)
{

//  T() {0==-1}

// (0,1)
   // BEGIN BLOCK
   // Like unstruc01, but does not show bug on non-exiting unstructured
   // by Nga Nguyen because the unreachable code, the second printf,
   // seems to be eliminated by the controlizer.
   

//  T(i) {i==0}

// (0,2)
   int i = 0;

//  T() {0==-1}

// (0,3)
//:   BEGIN UNSTRUCTURED

//  T(i) {i#init<=i, i<=i#init+1, i+1<=n}

// (1,1)
   // BEGIN BLOCK

//  T(i) {i#init<=i, i<=i#init+1}

// (1,2)

l100:   if (alea())

//  T(i) {i==i#init+1}

// (1,3)
      i++;
   else

//  T() {}

// (1,4)
      // BEGIN BLOCK
      // END BLOCK

//  T() {i+1<=n}

// (1,5)
   if (i>=n)

//  T() {0==-1}

// (1,6)
      exit(0);
   else

//  T() {}

// (1,7)
      // BEGIN BLOCK
      // END BLOCK

//  T() {}

// (1,8)
   printf("%d\n", i);
   // END BLOCK
   goto l100;
//:   END UNSTRUCTURED
   // END BLOCK
}

//  P() {}

void unstruc20(int n)
{

//  P() {}

// (0,1)
   // BEGIN BLOCK
   // Like unstruc01, but does not show bug on non-exiting unstructured
   // by Nga Nguyen because the unreachable code, the second printf,
   // seems to be eliminated by the controlizer.
   

//  P() {}

// (0,2)
   int i = 0;

//  P(i) {i==0}

// (0,3)
//:   BEGIN UNSTRUCTURED

//  P(i) {0<=i}

// (1,1)
   // BEGIN BLOCK

//  P(i) {0<=i}

// (1,2)

l100:   if (alea())

//  P(i) {0<=i}

// (1,3)
      i++;
   else

//  P(i) {0<=i}

// (1,4)
      // BEGIN BLOCK
      // END BLOCK

//  P(i) {0<=i}

// (1,5)
   if (i>=n)

//  P(i) {0<=i, n<=i}

// (1,6)
      exit(0);
   else

//  P(i) {0<=i, i+1<=n}

// (1,7)
      // BEGIN BLOCK
      // END BLOCK

//  P(i) {0<=i, i+1<=n}

// (1,8)
   printf("%d\n", i);
   // END BLOCK
   goto l100;
//:   END UNSTRUCTURED
   // END BLOCK
}

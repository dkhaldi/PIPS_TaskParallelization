
Source code with proper effects

int call08(int i)
{
//             <    is read   >: i
//             <    is written>: i
   i += 10;                                                             /*0007*/
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0008*/
//             <    is read   >: i

   return i;                                                            /*0010*/
}

Source code with cumulated effects

//             <    is read   >: i j
//             <    is written>: j
int call08(int i)
{
//             <    is read   >: i
//             <    is written>: i
   i += 10;                                                             /*0007*/
//             <    is read   >: j
//             <    is written>: j
   j++;                                                                 /*0008*/
//             <    is read   >: i

   return i;                                                            /*0010*/
}

Source code with transformers for "call08"


//  T(call08,j) {call08==i+10, j==j#init+1}

int call08(int i)
{

//  T(i) {i==i#init+10}

   i += 10;                                                             /*0007*/

//  T(j) {j==j#init+1}

   j++;                                                                 /*0008*/

//  T(call08) {call08==i}


   return i;                                                            /*0010*/
}

Source code with transformers for "main"


//  T(j) {j==j#init+1}

int main()
{

//  T(ai) {ai==3}

   int ai = 3;                                                          /*0015*/

//  T(ai,j) {ai==ai#init+11, j==j#init+1}


   ai = call08(++ai);                                                   /*0017*/

//  T(ai) {ai==0}


   ai = 0;                                                              /*0019*/
}

Source code with preconditions for "call08"


//  P() {i==4, j==0}

int call08(int i)
{

//  P() {i==4, j==0}

   i += 10;                                                             /*0007*/

//  P(i) {i==14, j==0}

   j++;                                                                 /*0008*/

//  P(i,j) {i==14, j==1, j#init==0}


   return i;                                                            /*0010*/
}

Source code with preconditions for "main"


//  P() {j==0}

int main()
{

//  P() {j==0}

   int ai = 3;                                                          /*0015*/

//  P(ai) {ai==3, j==0}


   ai = call08(++ai);                                                   /*0017*/

//  P(ai,j) {ai==14, j==1, j#init==0}


   ai = 0;                                                              /*0019*/
}

Warnings

(activate_phase) Rule `C_PARSER' already active
(activate_phase) Rule `PRINT_CODE_TRANSFORMERS' already active
TRANSFORMERS_INTER_FULL[main] (any_scalar_assign_to_transformer_without_effect) line 17 
at statement:

	ai = call08(++ai);


Variable "ai" in lhs is uselessly or illegally updated by rhs 'call08(++ai)'
(activate_phase) Rule `PRINT_CODE_PRECONDITIONS' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[call08!] (ordinary_summary_precondition) empty precondition to call08! because not in call tree from main.


Source code with proper effects

int main()
{
   int i, j, k;                                                         /*0003*/
   int a[500];                                                          /*0004*/
//             <    is written>: j
   j = 1;
//             <    is written>: i

   for(i = 0; i <= 499; i += 1) {                                       /*0006*/
//             <    is read   >: i
//             <    is written>: a[i]
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0008*/
//             <    is read   >: j
//             <    is written>: j
      j++;
   }
//             <    is written>: k
   // We have j==501 in the preconditions here... since we use
   // the proper activate and properties
   k = 2;                                                               /*0012*/
//             <    is read   >: k
   return k;                                                            /*0013*/
}

Source code with cumulated effects

int main()
{
   int i, j, k;                                                         /*0003*/
   int a[500];                                                          /*0004*/
//             <    is written>: j
   j = 1;
//             <may be written>: a[*]
//             <    is read   >: i j
//             <    is written>: i j

   for(i = 0; i <= 499; i += 1) {                                       /*0006*/
//             <may be written>: a[*]
//             <    is read   >: i
      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0008*/
//             <    is read   >: j
//             <    is written>: j
      j++;
   }
//             <    is written>: k
   // We have j==501 in the preconditions here... since we use
   // the proper activate and properties
   k = 2;                                                               /*0012*/
//             <    is read   >: k
   return k;                                                            /*0013*/
}

Dependence graph


 ******** Whole Dependence Graph with Dependence Cones ******

	-1 --> -1 with conflicts
		from <j-W-EXACT> to <j-W-EXACT> at levels  1

		from <j-W-EXACT> to <j-R-EXACT> at levels  1

		from <j-R-EXACT> to <j-W-EXACT> at levels  1

	-1 --> -1 with conflicts
		from <j-W-EXACT> to <j-W-EXACT>
		from <j-W-EXACT> to <j-R-EXACT>
	12 --> 13 with conflicts
		from <k-W-EXACT> to <k-R-EXACT>

****************** End of Dependence Graph ******************

Source code with transformers


//  T(main) {main==2}

int main()
{

//  T() {}

   int i, j, k;                                                         /*0003*/

//  T() {}

   int a[500];                                                          /*0004*/

//  T(j) {j==1}

   j = 1;

//  T(i,j) {i+j#init==j, 0<=i, i<=499}


   for(i = 0; i <= 499; i += 1) {                                       /*0006*/

//  T() {}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0008*/

//  T(j) {j==j#init+1}

      j++;
   }

//  T(k) {k==2}

   // We have j==501 in the preconditions here... since we use
   // the proper activate and properties
   k = 2;                                                               /*0012*/

//  T(main) {k==main}

   return k;                                                            /*0013*/
}

Source code with preconditions


//  P() {}

int main()
{

//  P() {}

   int i, j, k;                                                         /*0003*/

//  P() {}

   int a[500];                                                          /*0004*/

//  P() {}

   j = 1;

//  P(j) {j==1}


   for(i = 0; i <= 499; i += 1) {                                       /*0006*/

//  P(i,j) {i==j-1, 0<=i, i<=499}

      // Cumulated effects should be a[i] here and not a[*]
      a[i] = i;                                                         /*0008*/

//  P(i,j) {i==j-1, 0<=i, i<=499}

      j++;
   }

//  P(i,j) {i==500, j==501}

   // We have j==501 in the preconditions here... since we use
   // the proper activate and properties
   k = 2;                                                               /*0012*/

//  P(i,j,k) {i==500, j==501, k==2}

   return k;                                                            /*0013*/
}

Warnings

(activate_phase) Rule `C_PARSER' already active
INTERPROCEDURAL_SUMMARY_PRECONDITION[for02!] (ordinary_summary_precondition) empty precondition to for02! because not in call tree from main.

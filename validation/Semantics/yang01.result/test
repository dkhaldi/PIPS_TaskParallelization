
Transformers for "foo"


//  T(foo) {s<=foo+1, foo<=s+1}

int foo(int s)
{

//  T(t) {s==t-2}

   int t = s+2;

//  T(t) {t#init<=t+3, t+1<=t#init}


   if (t>6)

//  T(t) {t==t#init-3}

      t -= 3;
   else

//  T(t) {t==t#init-1}

      t--;

//  T(foo) {foo==t}


   return t;
}

Transformers for "bar"


//  T(bar) {1<=bar}

int bar()
{

//  T(x) {x==3}

   int x = 3;

//  T(y) {x==y+3}

   int y = x-3;

//  T(x,y) {x<=4, x#init+y#init<=x+y, x+y#init<=x#init+y, x#init<=4}


   while (x<=4) {

//  T(y) {y==y#init+1}

      y++;

//  T(x) {x#init<=x+1, x<=x#init+1}

      x = foo(x);

//  T() {}

      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }

//  T(y) {y#init<=y+1, y<=y#init+1}

   y = foo(y);

//  T() {}

   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);

//  T(bar) {bar==y}

   return y;
}

Preconditions for "bar"


//  P() {}

int bar()
{

//  P() {}

   int x = 3;

//  P(x) {x==3}

   int y = x-3;

//  P(x,y) {x==3, y==0}


   while (x<=4) {

//  P(x,y) {x<=4, 3<=x+y, x<=y+3}

      y++;

//  P(x,y) {x<=4, 4<=x+y, x<=y+2}

      x = foo(x);

//  P(x,y) {x<=5, 3<=x+y, x<=y+3, 1<=y}

      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }

//  P(x,y) {x==5, 2<=y}

   y = foo(y);

//  P(x,y) {x==5, 1<=y}

   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);

//  P(x,y) {x==5, 1<=y}

   return y;
}

Preconditions for "foo"


//  P() {}

int foo(int s)
{

//  P() {}

   int t = s+2;

//  P(t) {s==t-2}


   if (t>6)

//  P(t) {s==t-2, 5<=s}

      t -= 3;
   else

//  P(t) {s==t-2, s<=4}

      t--;

//  P(t) {t<=s+1, s<=t+1}


   return t;
}

After inlining/unfolding of "bar"

int bar()
{
   int x = 3;
   int y = x-3;
   //PIPS generated variable
   int _return0, _return1;

   while (x<=4) {
      y++;
      {
         int t = x+2;

         if (t>6)
            t -= 3;
         else
            t--;
         
         
         _return0 = t;
      }
      x = _return0;
      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }
   {
      int t = y+2;

      if (t>6)
         t -= 3;
      else
         t--;
      
      
      _return1 = t;
   }
   y = _return1;
   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);
   return y;
}

After unspahettify of "bar"

int bar()
{
   int x = 3;
   int y = x-3;
   //PIPS generated variable
   int _return0, _return1;

   while (x<=4) {
      y++;
      {
         int t = x+2;

         if (t>6)
            t -= 3;
         else
            t--;
         
         
         _return0 = t;
      }
      x = _return0;
      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }
   {
      int t = y+2;

      if (t>6)
         t -= 3;
      else
         t--;
      
      
      _return1 = t;
   }
   y = _return1;
   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);
   return y;
}

Preconditions for "bar" after unfolding and unspahettify


//  P() {}

int bar()
{

//  P() {}

   int x = 3;

//  P(x) {x==3}

   int y = x-3;
   //PIPS generated variable

//  P(x,y) {x==3, y==0}

   int _return0, _return1;

//  P(x,y) {x==3, y==0}


   while (x<=4) {

//  P(_return0,x,y) {x<=4, 3<=x+y, x<=y+3}

      y++;
      {

//  P(_return0,x,y) {x<=4, 4<=x+y, x<=y+2}

         int t = x+2;

//  P(0`1`2`t,_return0,x,y) {0`1`2`t==x+2, 0`1`2`t<=6, 6<=0`1`2`t+y,
//    0`1`2`t<=y+4}


         if (t>6)

//  P() {0==-1}

            t -= 3;
         else

//  P(0`1`2`t,_return0,x,y) {0`1`2`t==x+2, 0`1`2`t<=6, 6<=0`1`2`t+y,
//    0`1`2`t<=y+4}

            t--;

//  P(0`1`2`t,_return0,x,y) {0`1`2`t==x+1, 0`1`2`t<=5, 5<=0`1`2`t+y,
//    0`1`2`t<=y+3}

         
         
         _return0 = t;
      }

//  P(_return0,x,y) {_return0==x+1, _return0<=5, 5<=_return0+y,
//    _return0<=y+3}

      x = _return0;

//  P(_return0,x,y) {_return0==x, _return0<=5, 5<=_return0+y,
//    _return0<=y+3}

      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }
   {

//  P(_return0,x,y) {_return0==5, x==5, 2<=y}

      int t = y+2;

//  P(0`3`t,_return0,x,y) {0`3`t==y+2, _return0==5, x==5, 4<=0`3`t}


      if (t>6)

//  P(0`3`t,_return0,x,y) {0`3`t==y+2, _return0==5, x==5, 7<=0`3`t}

         t -= 3;
      else

//  P(0`3`t,_return0,x,y) {0`3`t==y+2, _return0==5, x==5, 4<=0`3`t,
//    0`3`t<=6}

         t--;

//  P(0`3`t,_return0,x,y) {_return0==5, x==5, y+7<=30`3`t, y<=0`3`t+1,
//    0`3`t<=y+1}

      
      
      _return1 = t;
   }

//  P(_return0,_return1,x,y) {_return0==5, x==5, y+7<=3_return1,
//    y<=_return1+1, _return1<=y+1}

   y = _return1;

//  P(_return0,_return1,x,y) {_return0==5, _return1==y, x==5,
//    3<=_return1}

   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);

//  P(_return0,_return1,x,y) {_return0==5, _return1==y, x==5,
//    3<=_return1}

   return y;
}

After dead code elimination of "bar"


//  P() {}

int bar()
{

//  P() {}

   int x = 3;

//  P(x) {x==3}

   int y = x-3;
   //PIPS generated variable

//  P(x,y) {x==3, y==0}

   int _return0, _return1;

//  P(x,y) {x==3, y==0}


   while (x<=4) {

//  P(_return0,x,y) {x==y+3, 3<=x, x<=4}

      y++;
      {

//  P(_return0,x,y) {x==y+2, 3<=x, x<=4}

         int t = x+2;

//  P(0`1`2`t,_return0,x,y) {0`1`2`t==x+2, 0`1`2`t==y+4, 5<=0`1`2`t,
//    0`1`2`t<=6}


         t--;

//  P(0`1`2`t,_return0,x,y) {0`1`2`t==x+1, 0`1`2`t==y+3, 4<=0`1`2`t,
//    0`1`2`t<=5}

         
         
         _return0 = t;
      }

//  P(_return0,x,y) {_return0==x+1, _return0==y+3, 4<=_return0,
//    _return0<=5}

      x = _return0;

//  P(_return0,x,y) {_return0==x, _return0==y+3, 4<=_return0,
//    _return0<=5}

      // Execution: (x,y) = (4,1) and then (5,2) and the loop is exited
      printf("In loop: x=%d, y=%d\n", x, y);
   }
   {

//  P(_return0,x,y) {_return0==5, x==5, y==2}

      int t = y+2;

//  P(0`3`t,_return0,x,y) {0`3`t==4, _return0==5, x==5, y==2}


      if (t>6)

//  P() {0==-1}

         t -= 3;
      else

//  P(0`3`t,_return0,x,y) {0`3`t==4, _return0==5, x==5, y==2}

         t--;

//  P(0`3`t,_return0,x,y) {0`3`t==3, _return0==5, x==5, y==2}

      
      
      _return1 = t;
   }

//  P(_return0,_return1,x,y) {_return0==5, _return1==3, x==5, y==2}

   y = _return1;

//  P(_return0,_return1,x,y) {_return0==5, _return1==3, x==5, y==3}

   
   // Execution: (x,y) = (5,3)
   printf("At the end: x=%d, y=%d\n", x, y);

//  P(_return0,_return1,x,y) {_return0==5, _return1==3, x==5, y==3}

   return y;
}

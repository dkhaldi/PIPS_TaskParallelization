
Transformers


//  T(main) {main==0}

int main()
{

//  T() {}

   int i;


//  T(N) {N==11}

   int N = 11;

//  T() {}

   double A[N][N];

//  T(0`i) {0<=0`i, 0`i+2<=N}


   for(i = 0; i <= N-1-1; i += 1) {

//  T() {0<=0`i, 0`i+1<=N, 1<=N}

      A[0][i] = 1.0;

//  T() {0<=0`i+1, 0`i+2<=N, 11<=N}

      A[i+1][10] = 1.0;

//  T() {11<=N}

      A[10][0] = 1.0;
   }
   {

//  T() {}

      int i;

//  T(0`2`i) {0<=0`2`i, 0`2`i+1<=N}


      for(i = 0; i <= N-1; i += 1) {

//  T() {}

         int j;

//  T(j) {j+1<=N, 0<=j}

         for(j = 0; j <= N-1; j += 1)

//  T() {0<=0`2`i, 0`2`i+1<=N, j+1<=N, 0<=j}

            printf("%f\n", A[i][j]);
      }
   }

//  T(main) {main==0}


   return 0;
}

Preconditions


//  P() {}

int main()
{

//  P() {0<=N}

   int i;


//  P() {0<=N}

   int N = 11;

//  P(N) {N==11}

   double A[N][N];

//  P(N) {N==11}


   for(i = 0; i <= N-1-1; i += 1) {

//  P(0`i,N) {N==11, 0<=0`i, 0`i<=9}

      A[0][i] = 1.0;

//  P(0`i,N) {N==11, 0<=0`i, 0`i<=9}

      A[i+1][10] = 1.0;

//  P(0`i,N) {N==11, 0<=0`i, 0`i<=9}

      A[10][0] = 1.0;
   }
   {

//  P(0`i,N) {0`i==10, N==11}

      int i;

//  P(0`i,N) {0`i==10, N==11}


      for(i = 0; i <= N-1; i += 1) {

//  P(0`2`i,0`i,N) {0`i==10, N==11, 0<=0`2`i, 0`2`i<=10}

         int j;

//  P(0`2`i,0`i,N) {0`i==10, N==11, 0<=0`2`i, 0`2`i<=10}

         for(j = 0; j <= N-1; j += 1)

//  P(0`2`i,0`i,N,j) {0`i==10, N==11, 0<=0`2`i, 0`2`i<=10, 0<=j,
//    j<=10}

            printf("%f\n", A[i][j]);
      }
   }

//  P(0`i,N) {0`i==10, N==11}


   return 0;
}

Regions


//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

int main()
{
   int i;

   int N = 11;
   double A[N][N];

//  <A[PHI1][PHI2]-W-MAY-{0<=PHI1, PHI1<=10, PHI2<=10PHI1+9, 0<=PHI2,
//    PHI2<=10, N==11}>


   for(i = 0; i <= N-1-1; i += 1) {

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==0, PHI2==0`i, N==11, 0<=0`i,
//    0`i<=9}>

      A[0][i] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==0`i+1, PHI2==10, N==11, 0<=0`i,
//    0`i<=9}>

      A[i+1][10] = 1.0;

//  <A[PHI1][PHI2]-W-EXACT-{PHI1==10, PHI2==0, N==11, 0<=0`i, 0`i<=9}>

      A[10][0] = 1.0;
   }
   {
      int i;

//  <A[PHI1][PHI2]-R-EXACT-{0<=PHI1, PHI1<=10, 0<=PHI2, PHI2<=10,
//    N==11, 0`i==10}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==11, 0`i==10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==11, 0`i==10}>


      for(i = 0; i <= N-1; i += 1) {
         int j;

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==0`2`i, 0<=PHI2, PHI2<=10, N==11,
//    0`i==10, 0<=0`2`i, 0`2`i<=10}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==11, 0`i==10,
//    0<=0`2`i, 0`2`i<=10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==11, 0`i==10,
//    0<=0`2`i, 0`2`i<=10}>

         for(j = 0; j <= N-1; j += 1)

//  <A[PHI1][PHI2]-R-EXACT-{PHI1==0`2`i, PHI2==j, N==11, 0`i==10,
//    0<=j, j<=10, 0<=0`2`i, 0`2`i<=10}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1, N==11, 0`i==10, 0<=j,
//    j<=10, 0<=0`2`i, 0`2`i<=10}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1, N==11, 0`i==10, 0<=j,
//    j<=10, 0<=0`2`i, 0`2`i<=10}>

            printf("%f\n", A[i][j]);
      }
   }

//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>


   return 0;
}

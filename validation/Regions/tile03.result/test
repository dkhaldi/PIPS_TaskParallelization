
Transformers for "min"


//  T(min) {min<=a, min<=b}

int min(int a, int b)
{

//  T(min) {min<=a, min<=b}

   if (a<b)

//  T(min) {a==min}

      return a;
   else

//  T(min) {b==min}

      return b;
}

Transformers for tile03


//  T() {}

void tile03(int n, int ts, int a[n])
{

//  T(i,ti) {}

   int ti, i;

//  T(ti) {ti==0}

   ti = 0;

//  T(i,ti) {ti+1<=n, ti#init+1<=n}

   while (ti<n) {

//  T(i) {i+1<=n, ti<=i, i+1<=ti+ts}

      for(i = ti; i <= min(ti+ts, n)-1; i += 1)

//  T() {}

         a[i] = 0;

//  T(ti) {ti#init+ts==ti}

      ti += ts;
   }
}

Preconditions for tile03


//  P() {}

void tile03(int n, int ts, int a[n])
{

//  P() {}

   int ti, i;

//  P(i,ti) {}

   ti = 0;

//  P(i,ti) {ti==0}

   while (ti<n) {

//  P(i,ti) {1<=n, ti+1<=n}

      for(i = ti; i <= min(ti+ts, n)-1; i += 1)

//  P(i,ti) {i+1<=n, ti<=i, i+1<=ti+ts, 1<=n, ti+1<=n}

         a[i] = 0;

//  P(i,ti) {i<=n, ti<=i, 1<=n, ti+1<=n}

      ti += ts;
   }
}

Regions for tile03


//  <a[PHI1]-W-MAY-{PHI1+1<=n, 1<=n, 1<=ts}>

void tile03(int n, int ts, int a[n])
{
   int ti, i;
   ti = 0;

//  <a[PHI1]-W-MAY-{PHI1+1<=n, ti+1<=n, 1<=n, 1<=ts}>

   while (ti<n) {

//  <a[PHI1]-W-MAY-{ti<=PHI1, PHI1+1<=ti+ts, PHI1+1<=n, ti+1<=n,
//    1<=n}>

      for(i = ti; i <= min(ti+ts, n)-1; i += 1)

//  <a[PHI1]-W-EXACT-{PHI1==i, ti<=i, i+1<=ti+ts, i+1<=n, ti+1<=n,
//    1<=n}>

         a[i] = 0;
      ti += ts;
   }
}

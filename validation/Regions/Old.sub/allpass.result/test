double allpass(int D, double w[], double *p[], double a, double x)
{
   double y, s0, sD;
//             <may be read   >: w[*]
//             <    is read   >: D p[0]
//             <    is written>: sD

   sD = tap(D, w, *p, D);
//             <    is read   >: a sD x
//             <    is written>: s0
   /* \(D\)th tap delay output */
   s0 = x+a*sD;
//             <    is read   >: a s0 sD
//             <    is written>: y
   y = -a*s0+sD;
//             <    is read   >: p[0] s0
//             <    is written>: p[0][0]
   /* filter output */
   **p = s0;
//             <    is read   >: D p[0]
//             <    is written>: p[0]
   /* delay input */
   cdelay(D, w, p);
//             <    is read   >: y
   /* update delay line */
   
   return y;
}
double allpass(int D, double w[], double *p[], double a, double x)
{
   double y, s0, sD;

//  <p[PHI1]-R-EXACT-{PHI1==0}>
//  <w[PHI1]-R-MAY-{}>


   sD = tap(D, w, *p, D);
   /* \(D\)th tap delay output */
   s0 = x+a*sD;
   y = -a*s0+sD;

//  <p[PHI1]-R-EXACT-{PHI1==0}>
//  <p[PHI1][PHI2]-W-EXACT-{PHI1==0, PHI2==0}>

   /* filter output */
   **p = s0;

//  <p[PHI1]-R-EXACT-{PHI1==0}>
//  <p[PHI1]-W-EXACT-{PHI1==0}>

   /* delay input */
   cdelay(D, w, p);
   /* update delay line */
   
   return y;
}

//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>
//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <tools!:_f_data_file-W-EXACT-{}>
//  <tools!:_f_data_file[PHI1]-W-MAY-{PHI1==0}>

int main(int argc, char **argv)
{

//  <argv-R-MAY-{}>
//  <argv[PHI1]-R-MAY-{PHI1==1}>
//  <argv[PHI1][PHI2]-R-MAY-{PHI1==1}>

   int n = argc>1?atoi(argv[1]):1000;
   double r;

//  <in-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   double (*in)[n] = (double (*)[n]) malloc(sizeof(double)*n);

//  <in2-W-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-R-EXACT-{}>
//  <_MALLOC_EFFECTS:_MALLOC_-W-EXACT-{}>

   double (*in2)[n] = (double (*)[n]) malloc(sizeof(double)*n);

//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <tools!:_f_data_file-W-EXACT-{}>

   init_args(argc, argv);

//  <in[PHI1][PHI2]-W-MAY-{PHI1==0}>
//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <tools!:_f_data_file[PHI1]-W-MAY-{PHI1==0}>

   init_data_double(*in, n);

//  <in[PHI1][PHI2]-W-MAY-{PHI1==0}>
//  <stderr-R-MAY-{}>
//  <stderr[PHI1]-R-MAY-{PHI1==0}>
//  <stderr[PHI1]-W-MAY-{PHI1==0}>
//  <*ANY_MODULE*:*ANYWHERE*-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-MAY-{}>
//  <tools!:_f_data_file[PHI1]-W-MAY-{PHI1==0}>

   init_data_double(*in, n);

//  <in-R-EXACT-{}>
//  <in[PHI1][PHI2]-R-MAY-{PHI1==0}>
//  <in2-R-EXACT-{}>
//  <in2[PHI1]-R-EXACT-{PHI1==0}>
//  <in2[PHI1]-W-EXACT-{PHI1==0}>
//  <in2[PHI1][PHI2]-W-EXACT-{PHI1==0, PHI2==0}>

   r = allpass(4, *in, in2, 0.4f, 0.9f);

//  <stdout-R-EXACT-{}>
//  <stdout[PHI1]-R-MAY-{PHI1==0}>
//  <stdout[PHI1]-W-MAY-{PHI1==0}>
//  <__IO_EFFECTS:LUNS[PHI1]-R-EXACT-{PHI1==1}>
//  <__IO_EFFECTS:LUNS[PHI1]-W-EXACT-{PHI1==1}>

   printf("%ld\n", r);

//  <__IO_EFFECTS:LUNS[PHI1]-R-MAY-{}>

   return 0;
}

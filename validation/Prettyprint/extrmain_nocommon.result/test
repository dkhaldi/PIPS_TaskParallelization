/* C pretty print for module D. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

float
d (int *j_p4a_copy, int *k_p4a_copy, int *jp_p4a_copy, int *kp_p4a_copy,
   float t[60][21][52], int *l_p4a_copy)
{
  float result;
  int j = *j_p4a_copy;
  int k = *k_p4a_copy;
  int jp = *jp_p4a_copy;
  int kp = *kp_p4a_copy;
  int l = *l_p4a_copy;

  result =
    sqrt ((powf (t[l - 1][k - 1][j - 1] - t[l - 1][kp - 1][jp - 1], 2) +
	   powf (t[(l + 1) - 1][k - 1][j - 1] -
		 t[(l + 1) - 1][kp - 1][jp - 1],
		 2)) + powf (t[(l + 2) - 1][k - 1][j - 1] - t[(l + 2) -
							      1][kp - 1][jp -
									 1],
			     2));
  return result;
}
/* C pretty print for module EXTR. */
//needed include to compile the C output
#include "math.h"
#include "stdlib.h"
#include "complex.h"

// The macros to support some fortran intrinsics
// and complex declaration
#define crough_max(a,b) (((a)>(b))?(a):(b))
#define crough_min(a,b) (((a)<(b))?(a):(b))
#define crough_powi(a,b) ((a)^(b))
#define init_complex(a,b) (a + b*I)

void
extr (int *ni_p4a_copy, int *nc_p4a_copy, float t[60][21][52],
      int *j1_p4a_copy, int *ja_p4a_copy, int *k1_p4a_copy)
{
  int l;
  int k;
  int j;
  float s1;
  float s2;
  float s3;
  int jh;
  int j2;
  int ni = *ni_p4a_copy;
  int nc = *nc_p4a_copy;
  int j1 = *j1_p4a_copy;
  int ja = *ja_p4a_copy;
  int k1 = *k1_p4a_copy;

  l = ni;
  k = k1;
  for (j = j1; j <= ja; j++)
    {
      s1 = d (&j, &k, &j, k + 1, t, 0);
      s2 = (d (&j, k + 1, &j, k + 2, t, 0) + s1);
      s3 = (d (&j, k + 2, &j, k + 3, t, 0) + s2);
      t[(nc + 3) - 1][0][j - 1] = ((s2 * s3) / ((s1 - s2) * (s1 - s3)));
      t[(nc + 4) - 1][0][j - 1] = ((s3 * s1) / ((s2 - s3) * (s2 - s1)));
      t[(nc + 5) - 1][0][j - 1] = ((s1 * s2) / ((s3 - s1) * (s3 - s2)));
      jh = ((j1 + j2) - j);
      t[(nc + 3) - 1][0][jh - 1] = t[(nc + 3) - 1][0][j - 1];
      t[(nc + 4) - 1][0][jh - 1] = t[(nc + 4) - 1][0][j - 1];
      t[(nc + 5) - 1][0][jh - 1] = t[(nc + 5) - 1][0][j - 1];
      continue;
    }
  return;
}


Inital code

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= isi-1; i += 1)
      for(j = 0; j <= isj-1; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = ksi/2; i <= isi-ksi/2-1; i += 1)
l300:
      for(j = ksj/2; j <= isj-ksj/2-1; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= ksi-1; ki += 1)
l100:
            for(kj = 0; kj <= ksj-1; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-ksi/2][j+kj-ksj/2]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/(ksi*ksj);
      }
}

After partial eval

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= 510; i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

After privatization and index set splitting

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i = 1; i <= pips_min(2, 384, 510); i += 1)
l300:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l200:
         for(ki = 0; ki <= 2; ki += 1)
l100:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
l99999:
   for(i = pips_min(2, 384, 510)+1; i <= 510; i += 1)
l99998:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l99997:
         for(ki = 0; ki <= 2; ki += 1)
l99996:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

After strip-minig, loop normalization, partial evaluation, dead code suppression

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;
   //PIPS generated variable
   int i_1;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

l400:
   for(i_1 = 1; i_1 <= 3; i_1 += 1)
      for(i = 128*i_1-127; i <= 128*i_1; i += 1)
l300:
         for(j = 1; j <= 510; j += 1) {
            new_image[i][j] = 0.;
l200:
            for(ki = 0; ki <= 2; ki += 1)
l100:
               for(kj = 0; kj <= 2; kj += 1)
                  new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
            new_image[i][j] = new_image[i][j]/9;
         }
   i_1 = 385;
l99999:
   for(i = 385; i <= 510; i += 1)
l99998:
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
l99997:
         for(ki = 0; ki <= 2; ki += 1)
l99996:
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

After double unrolling and partial evaluation

void convol(int isi, int isj, float new_image[isi][isj], float image[isi][isj], int ksi, int ksj, float kernel[ksi][ksj])
{
   //     The convolution kernel is not applied on the outer part
   //     of the image
   
   int i, j, ki, kj;
   //PIPS generated variable
   int i_1;

   for(i = 0; i <= 511; i += 1)
      for(j = 0; j <= 511; j += 1)
         new_image[i][j] = image[i][j];

   for(i_1 = 1; i_1 <= 3; i_1 += 1)
      for(i = 128*i_1-127; i <= 128*i_1; i += 1)
         for(j = 1; j <= 510; j += 1) {
            new_image[i][j] = 0.;
            new_image[i][j] = new_image[i][j]+image[i-1][j-1]*kernel[0][0];
            new_image[i][j] = new_image[i][j]+image[i-1][j]*kernel[0][1];
            new_image[i][j] = new_image[i][j]+image[i-1][j+1]*kernel[0][2];
            kj = 3;
            new_image[i][j] = new_image[i][j]+image[i][j-1]*kernel[1][0];
            new_image[i][j] = new_image[i][j]+image[i][j]*kernel[1][1];
            new_image[i][j] = new_image[i][j]+image[i][j+1]*kernel[1][2];
            kj = 3;
            new_image[i][j] = new_image[i][j]+image[i+1][j-1]*kernel[2][0];
            new_image[i][j] = new_image[i][j]+image[i+1][j]*kernel[2][1];
            new_image[i][j] = new_image[i][j]+image[i+1][j+1]*kernel[2][2];
            kj = 3;
            ki = 3;
            new_image[i][j] = new_image[i][j]/9;
         }
   i_1 = 385;
   for(i = 385; i <= 510; i += 1)
      for(j = 1; j <= 510; j += 1) {
         new_image[i][j] = 0.;
         for(ki = 0; ki <= 2; ki += 1)
            for(kj = 0; kj <= 2; kj += 1)
               new_image[i][j] = new_image[i][j]+image[i+ki-1][j+kj-1]*kernel[ki][kj];
         new_image[i][j] = new_image[i][j]/9;
      }
}

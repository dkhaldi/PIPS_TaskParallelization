!
! File ONDE24_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "ONDE24_parameters.h"
      INTEGER*4 NBTRAC
      PARAMETER (NBTRAC = 50)
      INTEGER*4 NP
      PARAMETER (NP = 800)
      INTEGER*4 NT
      PARAMETER (NT = 4000)
      INTEGER*4 NBTRAC
      PARAMETER (NBTRAC = 50)
      INTEGER*4 TMAX
      PARAMETER (TMAX = 1.0)
      REAL*8 PI
      PARAMETER (PI = 3.141592653589)
      INTEGER*4 NP
      PARAMETER (NP = 800)
      INTEGER*4 NT
      PARAMETER (NT = 4000)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, IS
     &, JS, KM, KP, I, J, K, N, NPTMP, NTTMP
      REAL*8 SISMO(1:NBTRAC, 1:NT), V(1:NP, 1:NP), DELTAT, H, F, W, 
     &G0, UMIN, UMAX, VMIN, VMAX, SISMIN, SISMAX
      LOGICAL L_0
      CALL HPFC INIT HOST
C
C             CORPS DU PROGRAMME
C             ------------------

      CALL OPENFILE_HOST

C
C ACQUISITION DES PARAMETRES DE LA MODELISATION
C -----------------------------------------

C WRITE (6,'('' ENTRER LE NB DE POINTS DU MAILLAGE CARRE (NP) ? '',$)')
      READ (4, *) NPTMP
! updating shared variable NPTMP
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = NPTMP
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
C WRITE (6,'('' ENTRER LE NB DE PAS DE TEMPS TOTAL (NT) ? '',$)')
      READ (4, *) NTTMP
! updating shared variable NTTMP
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = NTTMP
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (NTTMP.NE.NT) CALL HPFC STOP
C WRITE (6,'('' ENTRER LE PAS DE DISCR. EN ESPACE (H) ? '',$)')
      READ (4, *) H
! updating shared variable H
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC REAL8 BUFF(BUF INDEX) = H
      CALL HPFC REAL8 BUFPCK
      CALL HPFC HCAST
! end of update
C WRITE (6,'('' ENTRER LE PAS DE DISCR. EN TEMPS (DELTAT) ? '',$)')
      READ (4, *) DELTAT
! updating shared variable DELTAT
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC REAL8 BUFF(BUF INDEX) = DELTAT
      CALL HPFC REAL8 BUFPCK
      CALL HPFC HCAST
! end of update
C WRITE (6,'('' ENTRER LA POSITION EN X DE LA SOURCE (JS) ? '',$)')
      READ (4, *) JS
! updating shared variable JS
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = JS
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
C WRITE (6,'('' ENTRER LA POSITION EN Z DE LA SOURCE (IS) ? '',$)')
      READ (4, *) IS
! updating shared variable IS
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = IS
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
C WRITE (6,'('' ENTRER LA FREQUENCE DE LA SOURCE (F) ? '',$)')
      READ (4, *) F
! updating shared variable F
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC REAL8 BUFF(BUF INDEX) = F
      CALL HPFC REAL8 BUFPCK
      CALL HPFC HCAST
! end of update

      WRITE (1, 1100) 
      WRITE (1, 1110) 
      WRITE (1, 1120) 
      WRITE (1, 1130) NP, NP
      WRITE (1, 1135) NT
      WRITE (1, 1140) IS, JS
      WRITE (1, 1171) H
      WRITE (1, 1170) DELTAT
      WRITE (1, 1180) F

C
C INITIALISATION DES VARIABLES SCALAIRES
C ---------------------------------
      KM = 1
      KP = 2
      G0 = 0


C INITIALISATION DU CHAMP VITESSE
C V(I,J)     = READ (Vi) (CAS DUN MILIEU HETEROGENE)
C ----------------------------------------------

      READ (3, *) NPTMP
! updating shared variable NPTMP
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = NPTMP
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
      READ (3, *) NPTMP
! updating shared variable NPTMP
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = NPTMP
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
      DO I = 1, NP
         DO J = 1, NP
            READ (3, *) V(I,J)
         ENDDO
      ENDDO
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating distributed variable V
      DO PSI1 = 1, 4
         DO PSI2 = 1, 4
            BUF INDEX = 0
            SEND NOT INITIALIZED = .TRUE.
            DO ALPHA2 = 200*PSI2-199, MIN(800, 200*PSI2)
               DO ALPHA1 = 200*PSI1-199, MIN(800, 200*PSI1)
                  LALPHA1 = ALPHA1-200*PSI1+200
                  LALPHA2 = ALPHA2-200*PSI2+200
                  BUF INDEX = BUF INDEX+1
                  HPFC REAL8 BUFF(BUF INDEX) = V(ALPHA1,ALPHA2)
               ENDDO
            ENDDO
            T LID = 4*PSI1+PSI2-4
            CALL HPFC REAL8 BUFPCK
            CALL HPFC SND TO NODE(T LID)
         ENDDO
      ENDDO
! end of update
      VMIN = HRED 2 HPFC REAL8 MIN()
      VMAX = HRED 2 HPFC REAL8 MAX()

      WRITE (1, 1051) VMIN, VMAX

C     INITIALISATION DE LA SOLUTION U
C     U(.,.,t=0) = U(.,.,t=1) = 0
C     ET DES ENREGISTREMENTS 
C     SISMO (T=1) = 0.0
C     ------------------------------






C     INITIALISATION DES CONSTANTES LIEES AUX COINS INFERIEURS
C            V(I,J)  <--  moyenne harmonique sur 4 points
C            B(I,.,.)<--  cf declarations
C     ET AUX BORDS E-S-W
C            V(I,J)  <--  moyenne harmonique sur 2 points
C            B(I,.,.)<--  cf declarations
C     -------------------------------------------


C     CAS DES TROIS POINTS DU COIN E-S
C     --------------------------------

c
c how to help the compiler...
c



C     CAS DES 3 POINTS DU COIN W-S
C     ----------------------------




C     CAS DES BORDS   E - S - W
C     -------------------------

c     
c     les variables reparties ecrites sont bien alignees
c     




C
C     INITIALISATION DES CONSTANTES LIEES AUX BORDS INTERNES
C     ------------------------------------------------------





C     INITIALISATION DES CONSTANTES LIEES AU DOMAINE INTERIEUR
C            V(I,J) <--  1/12*((V(I,J)*DELTAT/H)**2)
C     -------------------------------------------


C     -----------------------------------------
C     !     MODELISATION DE LA PROPAGATION DES ONDES
C     !               PAR EQUATION DONDE.
C     !        RESOLUTION PAR DIFFERENCES FINIES.
C     -------------------------------------------


C     ----------------------------
C     !     BOUCLE EN TEMPS      !
C     ----------------------------

      DO N = 2, NT

C PRISE EN COMPTE DE LA FONCTION SOURCE PENDANT UN TEMPS DE TMAX SEC.
C Un = Un + SOURCE
C ---------------------------------------------------
         W = F*(N*DELTAT-1.0/F)
         L_0 = W**2.LT.TMAX
         IF (L_0) THEN
            W = (W*PI)**2
            G0 = (1.0-2.0*W)*EXP(-W)
         ENDIF



C     --------------------------------------------------------
C     SAUVEGARDE DE LA FRANGE CONNEXE AUX BORDS POUR LE CALCUL
C     ULTERIEUR DE LA SOLUTION AUX BORDS
C     --------------------------------------------------------
C     boucle 71




C
C     ------------------------------------------------
C     SOLUTION SUR LE DOMAINE INTERIEUR
C     SCHEMA DORDRE 2 EN TEMPS ET DORDRE 4 EN ESPACE
C     ------------------------------------------------


C
C     ------------------------------------------------
C     SOLUTION SUR LES BORDS INTERIEURS
C     SCHEMA DORDRE 2 EN TEMPS ET DORDRE 2 EN ESPACE
C     ------------------------------------------------




C
C     --------------------------------------------------------
C     SOLUTION AU BORD EAST. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------



C
C     --------------------------------------------------------
C     SOLUTION AU BORD SOUTH. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------



C
C     --------------------------------------------------------
C     SOLUTION AU BORD WEST. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------



C     -----------------------------------------------
C     CALCUL DU BORD DU COIN 
C     U(NP-1,NP,KP) ,  U(NP,NP-1,KP) ET U(NP-1,NP,KP)
C     -----------------------------------------------




C     -----------------------------------------------
C     CALCUL DU BORD DU COIN 
C     U(NP,2,KP) ,  U(NP-1,1,KP) ET U(NP,1,KP)
C     -----------------------------------------------




C
C     ENREGISTREMENT DU SISMOGRAMME
C     -----------------------------



C     PERMUTATION A CHAQUE ITERATION DES PLANS ESPACE
C     -----------------------------------------------
C
         KM = KP
         KP = 3-KP

      ENDDO

C     
C     SORTIE FICHIER DU SISMOGRAMME
C     -----------------------------

      WRITE (2, *) NBTRAC
      WRITE (2, *) NT
! collecting distributed variable SISMO
      PSI2 = 4
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      T LID = 4*PSI1+PSI2-4
      CALL HPFC RCV FROM NODE(T LID)
      CALL HPFC REAL8 BUFUPK
      DO ALPHA2 = 1, 4000
         DO ALPHA1 = 1, 50
            LALPHA1 = ALPHA1
            LALPHA2 = ALPHA2
            BUF INDEX = BUF INDEX+1
            SISMO(ALPHA1,ALPHA2) = HPFC REAL8 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of collect
      DO K = 1, NBTRAC
         DO J = 1, NT
            WRITE (2, *) SISMO(K,J)
         ENDDO
      ENDDO
! updating shared variable K
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = K
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      UMIN = HRED 3 HPFC REAL8 MIN()
      UMAX = HRED 3 HPFC REAL8 MAX()

      WRITE (1, 1050) UMIN, UMAX
      SISMIN = HRED 2 HPFC REAL8 MIN()
      SISMAX = HRED 2 HPFC REAL8 MAX()

      WRITE (1, 1055) SISMIN, SISMAX

      WRITE (1, 1200) 

      CLOSE (1) 
      CLOSE (2) 
      CLOSE (3) 
      CLOSE (4) 

      CALL HPFC STOP


C     DECLARATIONS DE FORMATS DE SORTIE
C     ---------------------------------

1100  FORMAT(1X,'DEBUT DU PROGRAMME'//)

1120  FORMAT(1X,'MODELISATION PAR EQUATION D"ONDES',/,1X,'SCHEMA D"ORDRE
     & 4 EN ESPACE ET 2 EN TEMPS'//)
1130  FORMAT(1X,'TAILLE DU MAILLAGE NPXNP       : ',I4,'  X',I4)
1135  FORMAT(1X,'NOMBRE DE PAS DE TEMPS         : ',I4)
1140  FORMAT(1X,'POSITION DE LA SOURCE          : (',I3,',',I3,')')
1171  FORMAT(1X,'PAS DE DISCR. EN ESPACE (H)    : ',E12.5)
1170  FORMAT(1X,'PAS DE DISCR. EN TEMPS (DELTAT): ',E12.5)
1180  FORMAT(1X,'FREQUENCE DE LA SOURCE (F)     : ',E12.5)
1051  FORMAT(1X,'MIN DE V:',E11.5,3X,'MAX DE V:  ',E11.5//)
1200  FORMAT(1X,/,1X,'FIN DU PROGRAMME')

1000  FORMAT(1X,'TEMPS CPU DE LA RESOLUTION     (RESOL) : ',E15.5)
1010  FORMAT(1X,'TEMPS CPU DES INITIALISATIONS   (INIT) : ',E15.5)
1020  FORMAT(1X,'TEMPS CPU DES ENTREES/SORTIES    (E/S) : ',E15.5)
1030  FORMAT(1X,'TEMPS CPU TOTAL       (RESOL+INIT+E/S) : ',E15.5//)
1015  FORMAT(1X,'TEMPS CPU DE L"APPEL AU TIMER          : ',E15.5)
1050  FORMAT(1X,'MIN DE U     :',E15.5,3X,'MAX DE U     : ',E15.5)
1055  FORMAT(1X,'MIN DE SISMO :',E15.5,3X,'MAX DE SISMO : ',E15.5//)
1060  FORMAT(1X,'MFLOPS CPU PARTIE VECTORIELLE  (RESOL) : ',E15.5)
1065  FORMAT(1X,'MFLOPS CPU RESOLUTION     (RESOL+INIT) : ',E15.5)
1070  FORMAT(1X,'MFLOPS CPU GLOBAL     (RESOL+INIT+E/S) : ',E15.5//)

C/////////////////////////////////////////////////////////////////////
C
C   PARTIE SPECIFIQUE A CHAQUE MACHINE ET A CHAQUE MODELISATION
C 
C            - FORMATS DES COMMENTAIRES
C            - OUVERTURE DE FICHIERS
C            - FONCTIONS DE GESTION DES TIMERS
C
C/////////////////////////////////////////////////////////////////////


1110  FORMAT(1X,'*********************************************',/,1X,'  
     &     RESOLUTION SUR SUN 4                  ',/,1X,'     DOUBLE PRE
     &CISION (64 bits)              ',/,1X,'         VERSION STANDART   
     &                 ',/,1X,'                                         
     &    ',/,1X,'*********************************************'//)

      CALL HPFC HOST END
      END
!
! That is all for ONDE24_host.f
!
!
! File ONDE24_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "ONDE24_parameters.h"
      INTEGER*4 NT
      PARAMETER (NT = 4000)
      INTEGER*4 NBTRAC
      PARAMETER (NBTRAC = 50)
      INTEGER*4 TMAX
      PARAMETER (TMAX = 1.0)
      REAL*8 PI
      PARAMETER (PI = 3.141592653589)
      INTEGER*4 NP
      PARAMETER (NP = 800)
      INTEGER*4 NT
      PARAMETER (NT = 4000)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_100, 
     &I_101, I_102, I_103, I_104, I_105, I_106, I_107, I_108, I_109, 
     &I_110, I_111, I_112, I_113, I_114, I_115, I_116, I_117, I_118, 
     &I_119, I_120, I_121, I_122, I_123, I_124, I_125, I_126, I_127, 
     &I_128, I_129, I_130, I_131, I_132, I_133, I_134, I_135, I_136, 
     &I_137, I_138, I_139, I_140, I_27, I_28, I_29, I_30, I_31, I_32
     &, I_33, I_34, I_35, I_36, I_37, I_38, I_39, I_40, I_41, I_42, 
     &I_43, I_44, I_45, I_46, I_47, I_48, I_49, I_50, I_51, I_52, 
     &I_53, I_54, I_55, I_56, I_57, I_58, I_59, I_60, I_61, I_62, 
     &I_63, I_64, I_65, I_66, I_67, I_68, I_69, I_70, I_71, I_72, 
     &I_73, I_74, I_75, I_76, I_77, I_78, I_79, I_80, I_81, I_82, 
     &I_83, I_84, I_85, I_86, I_87, I_88, I_89, I_90, I_91, I_92, 
     &I_93, I_94, I_95, I_96, I_97, I_98, I_99, IS, JS, KM, KP, I, J
     &, K, N, NPTMP, NTTMP, I_LOCAL, I_26
      REAL*8 F_3, F_2, F_1, F_0, U(-1:202, -1:202, 1:2), V(1:200, 1:
     &200), BE(1:200, 1:3), BS(1:200, 1:3), BW(1:200, 1:3), UBE(1:200
     &), UBS(1:200), UBW(1:200), UINTE(1:200), UINTS(1:200), UINTW(1:
     &200), SISMO(1:50, 1:NT), DELTAT, H, F, W, C1, C2, C3, G0, UMIN
     &, UMAX, VMIN, VMAX, SISMIN, SISMAX
      LOGICAL L_0
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_134, I_135, I_136, 3, NP-2, 11, 1)
      CALL HPFC LOOP BOUNDS(I_130, I_131, I_132, 3, NP-2, 2, 1)
      CALL HPFC LOOP BOUNDS(I_126, I_127, I_128, 3, NP-2, 11, 2)
      CALL HPFC LOOP BOUNDS(I_122, I_123, I_124, 3, NP-2, 4, 2)
      CALL HPFC LOOP BOUNDS(I_118, I_119, I_120, 3, NP-2, 11, 1)
      CALL HPFC LOOP BOUNDS(I_114, I_115, I_116, 3, NP-2, 6, 1)
      CALL HPFC LOOP BOUNDS(I_110, I_111, I_112, 3, NP-2, 11, 2)
      CALL HPFC LOOP BOUNDS(I_106, I_107, I_108, 3, NP-1, 11, 1)
      CALL HPFC LOOP BOUNDS(I_102, I_103, I_104, 3, NP-1, 11, 1)
      CALL HPFC LOOP BOUNDS(I_98, I_99, I_100, 3, NP-2, 11, 1)
      CALL HPFC LOOP BOUNDS(I_94, I_95, I_96, 3, NP-2, 11, 2)
      CALL HPFC LOOP BOUNDS(I_90, I_91, I_92, 2, NP-1, 8, 1)
      CALL HPFC LOOP BOUNDS(I_86, I_87, I_88, 2, NP-1, 9, 2)
      CALL HPFC LOOP BOUNDS(I_82, I_83, I_84, 2, NP-1, 10, 1)
      CALL HPFC LOOP BOUNDS(I_68, I_69, I_70, 3, NP-2, 12, 1)
      CALL HPFC LOOP BOUNDS(I_64, I_65, I_66, 3, NP-2, 12, 2)
      CALL HPFC LOOP BOUNDS(I_60, I_61, I_62, 3, NP-2, 12, 2)
      CALL HPFC LOOP BOUNDS(I_56, I_57, I_58, 3, NP-1, 12, 1)
      CALL HPFC LOOP BOUNDS(I_52, I_53, I_54, 3, NP-1, 12, 1)
      CALL HPFC LOOP BOUNDS(I_48, I_49, I_50, 2, NP-2, 12, 1)
      CALL HPFC LOOP BOUNDS(I_44, I_45, I_46, 3, NP-2, 12, 2)
      CALL HPFC LOOP BOUNDS(I_40, I_41, I_42, 2, NP-2, 12, 1)
      CALL HPFC LOOP BOUNDS(I_36, I_37, I_38, 1, NBTRAC, 1, 2)
      CALL HPFC LOOP BOUNDS(I_32, I_33, I_34, 1, NP, 11, 1)
      CALL HPFC LOOP BOUNDS(I_28, I_29, I_30, 1, NP, 11, 2)
C
C             CORPS DU PROGRAMME
C             ------------------

      CALL OPENFILE_NODE
! updating shared variable NPTMP
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      NPTMP = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
! updating shared variable NTTMP
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      NTTMP = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (NTTMP.NE.NT) CALL HPFC STOP
! updating shared variable H
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC REAL8 BUFUPK
      BUF INDEX = BUF INDEX+1
      H = HPFC REAL8 BUFF(BUF INDEX)
! end of update
! updating shared variable DELTAT
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC REAL8 BUFUPK
      BUF INDEX = BUF INDEX+1
      DELTAT = HPFC REAL8 BUFF(BUF INDEX)
! end of update
! updating shared variable JS
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      JS = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable IS
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      IS = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable F
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC REAL8 BUFUPK
      BUF INDEX = BUF INDEX+1
      F = HPFC REAL8 BUFF(BUF INDEX)
! end of update

C
C INITIALISATION DES VARIABLES SCALAIRES
C ---------------------------------
      KM = 1
      KP = 2
      G0 = 0
! updating shared variable NPTMP
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      NPTMP = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
! updating shared variable NPTMP
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      NPTMP = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      IF (NPTMP.NE.NP) CALL HPFC STOP
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating distributed variable V
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC RCV FROM HOST
      CALL HPFC REAL8 BUFUPK
      DO ALPHA2 = 200*PSI2-199, MIN(800, 200*PSI2)
         DO ALPHA1 = 200*PSI1-199, MIN(800, 200*PSI1)
            LALPHA1 = ALPHA1-200*PSI1+200
            LALPHA2 = ALPHA2-200*PSI2+200
            BUF INDEX = BUF INDEX+1
            V(LALPHA1,LALPHA2) = HPFC REAL8 BUFF(BUF INDEX)
         ENDDO
      ENDDO
! end of update
      VMIN = NRED 2 HPFC REAL8 MIN(V, 12, ONDE24 V LO1, ONDE24 V UP1
     &, ONDE24 V LO2, ONDE24 V UP2, 1, NP, 1, NP)
      VMAX = NRED 2 HPFC REAL8 MAX(V, 12, ONDE24 V LO1, ONDE24 V UP1
     &, ONDE24 V LO2, ONDE24 V UP2, 1, NP, 1, NP)

C     INITIALISATION DE LA SOLUTION U
C     U(.,.,t=0) = U(.,.,t=1) = 0
C     ET DES ENREGISTREMENTS 
C     SISMO (T=1) = 0.0
C     ------------------------------

      DO K = 1, 2
         DO I_27 = I_28, I_29
            DO I_31 = I_32, I_33
               U(I_31,I_27,K) = 0.0
            ENDDO
         ENDDO
      ENDDO

      IF (MY POS(1,1).EQ.1.AND.MY POS(2,1).EQ.4) THEN
         DO I_35 = I_36, I_37
            SISMO(I_35,1) = 0.0
         ENDDO
      ENDIF




C     INITIALISATION DES CONSTANTES LIEES AUX COINS INFERIEURS
C            V(I,J)  <--  moyenne harmonique sur 4 points
C            B(I,.,.)<--  cf declarations
C     ET AUX BORDS E-S-W
C            V(I,J)  <--  moyenne harmonique sur 2 points
C            B(I,.,.)<--  cf declarations
C     -------------------------------------------


C     CAS DES TROIS POINTS DU COIN E-S
C     --------------------------------

c
c how to help the compiler...
c
      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
         I_LOCAL = 0
         C1 = 4/(1/V(199,200)+1/V(199,199)+1/V(198,200)+1/V(198,199))
         W = C1*DELTAT
         BE(199,1) = 2*W/(4*W+3*H)
         BE(199,2) = 3*H/(4*W+3*H)
         V(199,200) = C1
      ENDIF

      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
         I_LOCAL = 0
         C2 = 4/(1/V(200,200)+1/V(200,199)+1/V(199,200)+1/V(199,199))
         W = C2*DELTAT
         BS(200,1) = 2*W/(4*W+3*H)
         BS(200,2) = 3*H/(4*W+3*H)
         V(200,200) = C2
      ENDIF

      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
         I_LOCAL = 0
         C3 = 4/(1/V(200,200)+1/V(200,199)+1/V(199,200)+1/V(199,199))
         W = C3*DELTAT
         BS(199,1) = 2*W/(4*W+3*H)
         BS(199,2) = 3*H/(4*W+3*H)
         V(200,199) = C3
      ENDIF

C     CAS DES 3 POINTS DU COIN W-S
C     ----------------------------

      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
         I_LOCAL = 0
         C1 = 4/(1/V(200,2)+1/V(200,3)+1/V(199,2)+1/V(199,3))
         W = C1*DELTAT
         BS(2,1) = 2*W/(4*W+3*H)
         BS(2,2) = 3*H/(4*W+3*H)
         V(200,2) = C1
      ENDIF

      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
         I_LOCAL = 0
         C2 = 4/(1/V(200,1)+1/V(200,2)+1/V(199,1)+1/V(199,2))
         W = C2*DELTAT
         BS(1,1) = 2*W/(4*W+3*H)
         BS(1,2) = 3*H/(4*W+3*H)
         V(200,1) = C2
      ENDIF

      IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
         I_LOCAL = 0
         C3 = 4/(1/V(199,1)+1/V(199,2)+1/V(198,1)+1/V(198,2))
         W = C3*DELTAT
         BW(199,1) = 2*W/(4*W+3*H)
         BW(199,2) = 3*H/(4*W+3*H)
         V(199,1) = C3
      ENDIF

C     CAS DES BORDS   E - S - W
C     -------------------------

c     
c     les variables reparties ecrites sont bien alignees
c     

      IF (MY POS(2,1).EQ.4) THEN
         DO I_39 = I_40, I_41
            V(I_39,200) = 2/(1/V(I_39,200)+1/V(I_39,199))
            W = V(I_39,200)*DELTAT
            BE(I_39,1) = 1-1/(W+H)*(2*H+W*W/H)
            BE(I_39,2) = 2*H/(W+H)
            BE(I_39,3) = W*W/(2*H*(W+H))
         ENDDO
      ENDIF

      IF (MY POS(1,1).EQ.4) THEN
         DO I_43 = I_44, I_45
            V(200,I_43) = 2/(1/V(200,I_43)+1/V(199,I_43))
            W = V(200,I_43)*DELTAT
            BS(I_43,1) = 1-1/(W+H)*(2*H+W*W/H)
            BS(I_43,2) = 2*H/(W+H)
            BS(I_43,3) = W*W/(2*H*(W+H))
         ENDDO
      ENDIF

      IF (MY POS(2,1).EQ.1) THEN
         DO I_47 = I_48, I_49
            V(I_47,1) = 2/(1/V(I_47,1)+1/V(I_47,2))
            W = V(I_47,1)*DELTAT
            BW(I_47,1) = 1-1/(W+H)*(2*H+W*W/H)
            BW(I_47,2) = 2*H/(W+H)
            BW(I_47,3) = W*W/(2*H*(W+H))
         ENDDO
      ENDIF

C
C     INITIALISATION DES CONSTANTES LIEES AUX BORDS INTERNES
C     ------------------------------------------------------

      IF (MY POS(2,1).EQ.1) THEN
         DO I_51 = I_52, I_53
            V(I_51,2) = (V(I_51,2)*DELTAT/H)**2
         ENDDO
      ENDIF

      IF (MY POS(2,1).EQ.4) THEN
         DO I_55 = I_56, I_57
            V(I_55,199) = (V(I_55,199)*DELTAT/H)**2
         ENDDO
      ENDIF

      IF (MY POS(1,1).EQ.4) THEN
         DO I_59 = I_60, I_61
            V(199,I_59) = (V(199,I_59)*DELTAT/H)**2
         ENDDO
      ENDIF


C     INITIALISATION DES CONSTANTES LIEES AU DOMAINE INTERIEUR
C            V(I,J) <--  1/12*((V(I,J)*DELTAT/H)**2)
C     -------------------------------------------

      DO I_63 = I_64, I_65
         DO I_67 = I_68, I_69
            V(I_67,I_63) = (V(I_67,I_63)*DELTAT/H)**2/12
         ENDDO
      ENDDO

C     -----------------------------------------
C     !     MODELISATION DE LA PROPAGATION DES ONDES
C     !               PAR EQUATION DONDE.
C     !        RESOLUTION PAR DIFFERENCES FINIES.
C     -------------------------------------------


C     ----------------------------
C     !     BOUCLE EN TEMPS      !
C     ----------------------------

      DO N = 2, NT

C PRISE EN COMPTE DE LA FONCTION SOURCE PENDANT UN TEMPS DE TMAX SEC.
C Un = Un + SOURCE
C ---------------------------------------------------
         W = F*(N*DELTAT-1.0/F)
         L_0 = W**2.LT.TMAX
         IF (L_0) THEN
            W = (W*PI)**2
            G0 = (1.0-2.0*W)*EXP(-W)
            CALL HPFC CMPCOMPUTER(11, IS, JS, KM, 0, 0, 0, 0)
            IF (HPFC COMPUTERP()) THEN
               CALL HPFC CMPOWNERS(12, IS, JS, 0, 0, 0, 0, 0)
               IF (HPFC OWNERP()) THEN
                  I_71 = MOD(IS-1, 200)+1
                  I_72 = MOD(JS-1, 200)+1
                  F_0 = V(I_71,I_72)
               ELSE
                  CALL HPFC RCVFR S(HPFC REAL8, F_0)
               ENDIF
               CALL HPFC CMPOWNERS(11, IS, JS, KM, 0, 0, 0, 0)
               IF (HPFC OWNERP()) THEN
                  I_75 = MOD(IS-1, 200)+1
                  I_76 = MOD(JS-1, 200)+1
                  F_1 = U(I_75,I_76,KM)
               ELSE
                  CALL HPFC RCVFR S(HPFC REAL8, F_1)
               ENDIF
               I_79 = MOD(IS-1, 200)+1
               I_80 = MOD(JS-1, 200)+1
               U(I_79,I_80,KM) = F_1+G0*12*F_0*H**2
            ELSE
               CALL HPFC CMPOWNERS(12, IS, JS, 0, 0, 0, 0, 0)
               IF (HPFC SENDERP()) THEN
                  I_73 = MOD(IS-1, 200)+1
                  I_74 = MOD(JS-1, 200)+1
                  CALL HPFC SNDTO C(HPFC REAL8, V(I_73,I_74))
               ENDIF
               CALL HPFC CMPOWNERS(11, IS, JS, KM, 0, 0, 0, 0)
               IF (HPFC SENDERP()) THEN
                  I_77 = MOD(IS-1, 200)+1
                  I_78 = MOD(JS-1, 200)+1
                  CALL HPFC SNDTO C(HPFC REAL8, U(I_77,I_78,KM))
               ENDIF
            ENDIF
         ENDIF



C     --------------------------------------------------------
C     SAUVEGARDE DE LA FRANGE CONNEXE AUX BORDS POUR LE CALCUL
C     ULTERIEUR DE LA SOLUTION AUX BORDS
C     --------------------------------------------------------
C     boucle 71

         IF (MY POS(2,1).EQ.4) THEN
            DO I_81 = I_82, I_83
               UBE(I_81) = U(I_81,199,KP)
            ENDDO
         ENDIF

         IF (MY POS(1,1).EQ.4) THEN
            DO I_85 = I_86, I_87
               UBS(I_85) = U(199,I_85,KP)
            ENDDO
         ENDIF

         IF (MY POS(2,1).EQ.1) THEN
            DO I_89 = I_90, I_91
               UBW(I_89) = U(I_89,2,KP)
            ENDDO
         ENDIF

C
C     ------------------------------------------------
C     SOLUTION SUR LE DOMAINE INTERIEUR
C     SCHEMA DORDRE 2 EN TEMPS ET DORDRE 4 EN ESPACE
C     ------------------------------------------------

! PE(1:4, 2:4) send U(1:200, 1:2, X) to (-1)
         IF (MY POS(2,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 200, 1, 1, 2, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(1:4, 1:3) send U(1:200, 199:200, X) to (+1)
         IF (MY POS(2,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 200, 1, 199, 200, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(1:3, 1:4) send U(199:200, 1:200, X) to (+4)
         IF (MY POS(1,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      199, 200, 1, 1, 200, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(2:4, 1:4) send U(1:2, 1:200, X) to (-4)
         IF (MY POS(1,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 2, 1, 1, 200, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(1:4, 1:3) receive U(1:200, 201:202, X) from (+1)
         IF (MY POS(2,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 200, 1, 201, 202, 1, KM, KM, 1)
         ENDIF
! PE(1:4, 2:4) receive U(1:200, -1:0, X) from (-1)
         IF (MY POS(2,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 200, 1, -1, 0, 1, KM, KM, 1)
         ENDIF
! PE(2:4, 1:4) receive U(-1:0, 1:200, X) from (-4)
         IF (MY POS(1,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      -1, 0, 1, 1, 200, 1, KM, KM, 1)
         ENDIF
! PE(1:3, 1:4) receive U(201:202, 1:200, X) from (+4)
         IF (MY POS(1,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      201, 202, 1, 1, 200, 1, KM, KM, 1)
         ENDIF
         DO I_93 = I_94, I_95
            DO I_97 = I_98, I_99

               U(I_97,I_93,KP) = 2*U(I_97,I_93,KM)-U(I_97,I_93,KP)-V(
     &         I_97,I_93)*(60*U(I_97,I_93,KM)-16*(U(I_97+1,I_93,KM)+U
     &         (I_97-1,I_93,KM)+U(I_97,I_93-1,KM)+U(I_97,I_93+1,KM))+
     &         U(I_97+2,I_93,KM)+U(I_97-2,I_93,KM)+U(I_97,I_93-2,KM)+
     &         U(I_97,I_93+2,KM))

            ENDDO
         ENDDO

C
C     ------------------------------------------------
C     SOLUTION SUR LES BORDS INTERIEURS
C     SCHEMA DORDRE 2 EN TEMPS ET DORDRE 2 EN ESPACE
C     ------------------------------------------------

! PE(1:3, 1) send U(200, 2, X) to (+4)
         IF (MY POS(1,1).LE.3.AND.MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      200, 200, 1, 2, 2, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(2:4, 1) send U(1, 2, X) to (-4)
         IF (MY POS(1,1).GE.2.AND.MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 1, 1, 2, 2, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(2:4, 1) receive U(0, 2, X) from (-4)
         IF (MY POS(1,1).GE.2.AND.MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 0
     &      , 0, 1, 2, 2, 1, KM, KM, 1)
         ENDIF
! PE(1:3, 1) receive U(201, 2, X) from (+4)
         IF (MY POS(1,1).LE.3.AND.MY POS(2,1).EQ.1) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      201, 201, 1, 2, 2, 1, KM, KM, 1)
         ENDIF
         IF (MY POS(2,1).EQ.1) THEN
            DO I_101 = I_102, I_103
               U(I_101,2,KP) = 2*U(I_101,2,KM)-U(I_101,2,KP)-V(I_101,
     &         2)*(4*U(I_101,2,KM)-(U(I_101+1,2,KM)+U(I_101-1,2,KM)+U
     &         (I_101,1,KM)+U(I_101,3,KM)))
            ENDDO
         ENDIF

! PE(1:3, 4) send U(200, 199, X) to (+4)
         IF (MY POS(1,1).LE.3.AND.MY POS(2,1).EQ.4) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      200, 200, 1, 199, 199, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(2:4, 4) send U(1, 199, X) to (-4)
         IF (MY POS(1,1).GE.2.AND.MY POS(2,1).EQ.4) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1
     &      , 1, 1, 199, 199, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(2:4, 4) receive U(0, 199, X) from (-4)
         IF (MY POS(1,1).GE.2.AND.MY POS(2,1).EQ.4) THEN
            CALL HPFC CMPNEIGHBOUR(-4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 0
     &      , 0, 1, 199, 199, 1, KM, KM, 1)
         ENDIF
! PE(1:3, 4) receive U(201, 199, X) from (+4)
         IF (MY POS(1,1).LE.3.AND.MY POS(2,1).EQ.4) THEN
            CALL HPFC CMPNEIGHBOUR(4)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      201, 201, 1, 199, 199, 1, KM, KM, 1)
         ENDIF
         IF (MY POS(2,1).EQ.4) THEN
            DO I_105 = I_106, I_107
               U(I_105,199,KP) = 2*U(I_105,199,KM)-U(I_105,199,KP)-V(
     &         I_105,199)*(4*U(I_105,199,KM)-(U(I_105+1,199,KM)+U(
     &         I_105-1,199,KM)+U(I_105,198,KM)+U(I_105,200,KM)))
            ENDDO
         ENDIF

! PE(4, 2:4) send U(199, 1, X) to (-1)
         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      199, 199, 1, 1, 1, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(4, 1:3) send U(199, 200, X) to (+1)
         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC REAL8 PACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      199, 199, 1, 200, 200, 1, KM, KM, 1)
            CALL HPFC SNDTO N
         ENDIF
! PE(4, 1:3) receive U(199, 201, X) from (+1)
         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).LE.3) THEN
            CALL HPFC CMPNEIGHBOUR(1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      199, 199, 1, 201, 201, 1, KM, KM, 1)
         ENDIF
! PE(4, 2:4) receive U(199, 0, X) from (-1)
         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).GE.2) THEN
            CALL HPFC CMPNEIGHBOUR(-1)
            CALL HPFC RCVFR N
            CALL HPFC REAL8 UNPACK 3(U, ONDE24 U LO1, ONDE24 U UP1, 
     &      ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 
     &      199, 199, 1, 0, 0, 1, KM, KM, 1)
         ENDIF
         IF (MY POS(1,1).EQ.4) THEN
            DO I_109 = I_110, I_111
               U(199,I_109,KP) = 2*U(199,I_109,KM)-U(199,I_109,KP)-V(
     &         199,I_109)*(4*U(199,I_109,KM)-(U(200,I_109,KM)+U(198,
     &         I_109,KM)+U(199,I_109-1,KM)+U(199,I_109+1,KM)))
            ENDDO
         ENDIF

C
C     --------------------------------------------------------
C     SOLUTION AU BORD EAST. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------

         IF (MY POS(2,1).EQ.4) THEN
            DO I_113 = I_114, I_115
               UINTE(I_113) = BE(I_113,1)*(U(I_113,200,KP)+U(I_113,
     &         199,KP))-UBE(I_113)+BE(I_113,2)*(U(I_113,200,KM)+U(
     &         I_113,199,KM))+BE(I_113,3)*(U(I_113+1,199,KP)+U(I_113+
     &         1,200,KP)+U(I_113-1,199,KP)+U(I_113-1,200,KP))
            ENDDO
         ENDIF

         IF (MY POS(2,1).EQ.4) THEN
            DO I_117 = I_118, I_119
               U(I_117,200,KP) = UINTE(I_117)
            ENDDO
         ENDIF

C
C     --------------------------------------------------------
C     SOLUTION AU BORD SOUTH. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------

         IF (MY POS(1,1).EQ.4) THEN
            DO I_121 = I_122, I_123
               UINTS(I_121) = BS(I_121,1)*(U(200,I_121,KP)+U(199,
     &         I_121,KP))-UBS(I_121)+BS(I_121,2)*(U(200,I_121,KM)+U(
     &         199,I_121,KM))+BS(I_121,3)*(U(199,I_121+1,KP)+U(200,
     &         I_121+1,KP)+U(199,I_121-1,KP)+U(200,I_121-1,KP))
            ENDDO
         ENDIF

         IF (MY POS(1,1).EQ.4) THEN
            DO I_125 = I_126, I_127
               U(200,I_125,KP) = UINTS(I_125)
            ENDDO
         ENDIF

C
C     --------------------------------------------------------
C     SOLUTION AU BORD WEST. CONDITIONS ABSORBANTES DORDRE 2.
C     --------------------------------------------------------

         IF (MY POS(2,1).EQ.1) THEN
            DO I_129 = I_130, I_131
               UINTW(I_129) = BW(I_129,1)*(U(I_129,1,KP)+U(I_129,2,KP
     &         ))-UBW(I_129)+BW(I_129,2)*(U(I_129,1,KM)+U(I_129,2,KM)
     &         )+BW(I_129,3)*(U(I_129+1,2,KP)+U(I_129+1,1,KP)+U(I_129
     &         -1,2,KP)+U(I_129-1,1,KP))
            ENDDO
         ENDIF

         IF (MY POS(2,1).EQ.1) THEN
            DO I_133 = I_134, I_135
               U(I_133,1,KP) = UINTW(I_133)
            ENDDO
         ENDIF

C     -----------------------------------------------
C     CALCUL DU BORD DU COIN 
C     U(NP-1,NP,KP) ,  U(NP,NP-1,KP) ET U(NP-1,NP,KP)
C     -----------------------------------------------

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
            I_LOCAL = 0
            U(199,200,KP) = BE(199,1)*(U(199,199,KP)+U(198,200,KP))+
     &      BE(199,2)*U(199,200,KM)
         ENDIF

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
            I_LOCAL = 0
            U(200,199,KP) = BS(199,1)*(U(200,198,KP)+U(199,199,KP))+
     &      BS(199,2)*U(200,199,KM)
         ENDIF

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.4) THEN
            I_LOCAL = 0
            U(200,200,KP) = BS(200,1)*(U(200,199,KP)+U(199,200,KP))+
     &      BS(200,2)*U(200,200,KM)
         ENDIF

C     -----------------------------------------------
C     CALCUL DU BORD DU COIN 
C     U(NP,2,KP) ,  U(NP-1,1,KP) ET U(NP,1,KP)
C     -----------------------------------------------

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
            I_LOCAL = 0
            U(199,1,KP) = BW(199,1)*(U(199,2,KP)+U(198,1,KP))+BW(199,
     &      2)*U(199,1,KM)
         ENDIF

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
            I_LOCAL = 0
            U(200,2,KP) = BS(2,1)*(U(200,3,KP)+U(199,2,KP))+BS(2,2)*U
     &      (200,2,KM)
         ENDIF

         IF (MY POS(1,1).EQ.4.AND.MY POS(2,1).EQ.1) THEN
            I_LOCAL = 0
            U(200,1,KP) = BS(1,1)*(U(199,1,KP)+U(200,2,KP))+BS(1,2)*U
     &      (200,1,KM)
         ENDIF

C
C     ENREGISTREMENT DU SISMOGRAMME
C     -----------------------------

         DO I = 1, NBTRAC
            I_26 = NP-NBTRAC+I
            CALL HPFC CMPCOMPUTER(1, I, N, 0, 0, 0, 0, 0)
            IF (HPFC COMPUTERP()) THEN
               CALL HPFC CMPOWNERS(11, IS, I_26, KP, 0, 0, 0, 0)
               IF (HPFC OWNERP()) THEN
                  I_137 = MOD(IS-1, 200)+1
                  I_138 = MOD(I_26-1, 200)+1
                  F_2 = U(I_137,I_138,KP)
               ELSE
                  CALL HPFC RCVFR S(HPFC REAL8, F_2)
               ENDIF
               F_3 = F_2
               SISMO(I,N) = F_3
            ELSE
               CALL HPFC CMPOWNERS(11, IS, I_26, KP, 0, 0, 0, 0)
               IF (HPFC SENDERP()) THEN
                  I_139 = MOD(IS-1, 200)+1
                  I_140 = MOD(I_26-1, 200)+1
                  CALL HPFC SNDTO C(HPFC REAL8, U(I_139,I_140,KP))
               ENDIF
            ENDIF
         ENDDO


C     PERMUTATION A CHAQUE ITERATION DES PLANS ESPACE
C     -----------------------------------------------
C
         KM = KP
         KP = 3-KP

      ENDDO
! collecting distributed variable SISMO
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      IF (PSI2.EQ.4) THEN
         BUF INDEX = 0
         SEND NOT INITIALIZED = .TRUE.
         DO ALPHA2 = 1, 4000
            DO ALPHA1 = 1, 50
               LALPHA1 = ALPHA1
               LALPHA2 = ALPHA2
               BUF INDEX = BUF INDEX+1
               HPFC REAL8 BUFF(BUF INDEX) = SISMO(LALPHA1,LALPHA2)
            ENDDO
         ENDDO
         CALL HPFC REAL8 BUFPCK
         CALL HPFC SND TO HOST
      ENDIF
! end of collect
! updating shared variable K
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      K = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      UMIN = NRED 3 HPFC REAL8 MIN(U, 11, ONDE24 U LO1, ONDE24 U UP1
     &, ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1, NP
     &, 1, NP)
      UMAX = NRED 3 HPFC REAL8 MAX(U, 11, ONDE24 U LO1, ONDE24 U UP1
     &, ONDE24 U LO2, ONDE24 U UP2, ONDE24 U LO3, ONDE24 U UP3, 1, NP
     &, 1, NP)
      SISMIN = NRED 2 HPFC REAL8 MIN(SISMO, 1, ONDE24 SISMO LO1, 
     &ONDE24 SISMO UP1, ONDE24 SISMO LO2, ONDE24 SISMO UP2, 1, NBTRAC
     &, 1, NT)
      SISMAX = NRED 2 HPFC REAL8 MAX(SISMO, 1, ONDE24 SISMO LO1, 
     &ONDE24 SISMO UP1, ONDE24 SISMO LO2, ONDE24 SISMO UP2, 1, NBTRAC
     &, 1, NT)

      CALL HPFC STOP

      CALL HPFC NODE END
      END
!
! That is all for ONDE24_node.f
!
!
! File OPENFILE_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OPENFILE_HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OPENFILE_parameters.h"
c
c     ouverture des fichiers
c

      OPEN (UNIT=4,FILE='MODELES/param2.dat') 
      OPEN (UNIT=3,FILE='MODELES/modele2.dat') 
      OPEN (UNIT=1,FILE='SORTIES/stat2') 
      OPEN (UNIT=2,FILE='SORTIES/sismo2') 


      END
!
! That is all for OPENFILE_host.f
!
!
! File OPENFILE_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE OPENFILE_NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "OPENFILE_parameters.h"


      END
!
! That is all for OPENFILE_node.f
!

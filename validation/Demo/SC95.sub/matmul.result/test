!
! File MATMUL_host.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE HOST
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "MATMUL_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, T LID, I
     &, J
      REAL*8 C(1:N, 1:N)
      CALL HPFC INIT HOST
c
c initialization of array A and B
c
c
c matrix multiply: C=A*B
c a remapping is needed to ensure data locality
c
! collecting distributed variable C
      DO PSI1 = 1, 2
         DO PSI2 = 1, 2
            BUF INDEX = 0
            RECEIVED NOT PERFORMED = .FALSE.
            SIZE OF RECEIVED BUFFER = 0
            T LID = 2*PSI1+PSI2-2
            CALL HPFC RCV FROM NODE(T LID)
            CALL HPFC REAL8 BUFUPK
            DO ALPHA2 = 5*PSI2-4, MIN(10, 5*PSI2)
               DO ALPHA1 = 5*PSI1-4, MIN(10, 5*PSI1)
                  LALPHA1 = ALPHA1-5*PSI1+5
                  LALPHA2 = ALPHA2-5*PSI2+5
                  BUF INDEX = BUF INDEX+1
                  C(ALPHA1,ALPHA2) = HPFC REAL8 BUFF(BUF INDEX)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
! end of collect
c
c output of the result
c
      PRINT *, ((C(I,J), I = 1, N), J = 1, N)
! updating shared variable I
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = I
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
! updating shared variable J
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      BUF INDEX = BUF INDEX+1
      HPFC INTEGER4 BUFF(BUF INDEX) = J
      CALL HPFC INTEGER4 BUFPCK
      CALL HPFC HCAST
! end of update
      CALL HPFC HOST END
      END
!
! That is all for MATMUL_host.f
!
!
! File MATMUL_node.f
! This file has been automatically generated by the HPF compiler
!
      SUBROUTINE NODE
      implicit none
      include "global_parameters.h"
      include "hpfc_commons.h"
      include "hpfc_includes.h"
      include "MATMUL_parameters.h"
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER*4 N
      PARAMETER (N = 10)
      INTEGER ALPHA1, ALPHA2, LALPHA1, LALPHA2, PSI1, PSI2, I_10, 
     &I_11, I_12, I_13, I_14, I_15, I_16, I_17, I_18, I_19, I_4, I_5
     &, I_6, I_7, I_8, I_9, I, J, K, PSIp2, LALPHAp1, LALPHAp2, T LID
     &, PSIp1
      REAL*8 A(1:5, 1:5), B(1:5, 1:5), C(1:5, 1:5), A_1(1:5, 1:N), 
     &B_1(1:N, 1:5)
      CALL HPFC INIT NODE
      CALL HPFC LOOP BOUNDS(I_17, I_18, I_19, 1, N, 3, 1)
      CALL HPFC LOOP BOUNDS(I_13, I_14, I_15, 1, N, 3, 2)
      CALL HPFC LOOP BOUNDS(I_9, I_10, I_11, 1, N, 5, 1)
      CALL HPFC LOOP BOUNDS(I_5, I_6, I_7, 1, N, 5, 2)
! all livenesss for B
      LIVE MAPPING(4) = .FALSE.
      LIVE MAPPING(1) = .FALSE.
! all livenesss for A
      LIVE MAPPING(5) = .FALSE.
      LIVE MAPPING(2) = .FALSE.
! direct remapping for B
      LIVE MAPPING(4) = .TRUE.
      MSTATUS(4) = 4
! direct remapping for A
      LIVE MAPPING(5) = .TRUE.
      MSTATUS(5) = 5
c
c initialization of array A and B
c
      J = I_7
      DO I_4 = I_5, I_6
         J = J+1
         I = I_11
         DO I_8 = I_9, I_10
            I = I+1
            A(I_8,I_4) = REAL(I-N/2)/REAL(J)
            B(I_8,I_4) = REAL(J-3)/REAL(I)
         ENDDO
      ENDDO
c
c matrix multiply: C=A*B
c a remapping is needed to ensure data locality
c
! begin remappings
      include 'MATMUL_A_5_2_node.h'
! liveness management
! clean live set for A
      LIVE MAPPING(5) = .FALSE.
! end of liveness management
! end remappings
! begin remappings
      include 'MATMUL_B_4_1_node.h'
! liveness management
! clean live set for B
      LIVE MAPPING(4) = .FALSE.
! end of liveness management
! end remappings
      DO I_12 = I_13, I_14
         DO I_16 = I_17, I_18
            C(I_16,I_12) = 0.
            DO K = 1, N
               C(I_16,I_12) = C(I_16,I_12)+A_1(I_16,K)*B_1(K,I_12)
            ENDDO
         ENDDO
      ENDDO
! collecting distributed variable C
      PSI1 = MY POS(1,1)
      PSI2 = MY POS(2,1)
      BUF INDEX = 0
      SEND NOT INITIALIZED = .TRUE.
      DO ALPHA2 = 5*PSI2-4, MIN(10, 5*PSI2)
         DO ALPHA1 = 5*PSI1-4, MIN(10, 5*PSI1)
            LALPHA1 = ALPHA1-5*PSI1+5
            LALPHA2 = ALPHA2-5*PSI2+5
            BUF INDEX = BUF INDEX+1
            HPFC REAL8 BUFF(BUF INDEX) = C(LALPHA1,LALPHA2)
         ENDDO
      ENDDO
      CALL HPFC REAL8 BUFPCK
      CALL HPFC SND TO HOST
! end of collect
! updating shared variable I
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      I = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
! updating shared variable J
      BUF INDEX = 0
      RECEIVED NOT PERFORMED = .FALSE.
      SIZE OF RECEIVED BUFFER = 0
      CALL HPFC NCAST
      CALL HPFC INTEGER4 BUFUPK
      BUF INDEX = BUF INDEX+1
      J = HPFC INTEGER4 BUFF(BUF INDEX)
! end of update
      CALL HPFC NODE END
      END
!
! That is all for MATMUL_node.f
!

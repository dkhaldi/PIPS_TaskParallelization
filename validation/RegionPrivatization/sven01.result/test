sven01 privatized regions
void sven01(int n, double x[n])
{
   // BEGIN BLOCK
   int i, j, k;
   double y[n];
#pragma omp for private(i,j,k,y[n])
   for(i = 0; i <= n-1; i += 1)

//  <j-PRIVATE-EXACT-{}>
//  <k-PRIVATE-EXACT-{}>
//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n}>

#pragma omp for private(j,k,y[n])
      for(j = 0; j <= n-1; j += 1)

//  <k-PRIVATE-EXACT-{}>
//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n, 0<=j, j+1<=n}>

#pragma omp for private(k,y[n])
         for(k = 0; k <= n-1; k += 1) {

//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n, 0<=j, j+1<=n, 0<=k,
//    k+1<=n}>

            // BEGIN BLOCK
            y[n] = f(i, j, k);
            x[i] = g(x[i], y[n]);
            // END BLOCK
         }
   return;
   // END BLOCK
}
sven01 privatized array sections
void sven01(int n, double x[n])
{
   // BEGIN BLOCK
   int i, j, k;
   double y[n];
#pragma omp for private(i,j,k,y[n])
   for(i = 0; i <= n-1; i += 1)

//  <j-PRIVATE-EXACT-{}>
//  <k-PRIVATE-EXACT-{}>
//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n}>

#pragma omp for private(j,k,y[n])
      for(j = 0; j <= n-1; j += 1)

//  <k-PRIVATE-EXACT-{}>
//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n, 0<=j, j+1<=n}>

#pragma omp for private(k,y[n])
         for(k = 0; k <= n-1; k += 1) {

//  <y[PHI1]-PRIVATE-EXACT-{PHI1==n, 0<=i, i+1<=n, 0<=j, j+1<=n, 0<=k,
//    k+1<=n}>

            // BEGIN BLOCK
            y[n] = f(i, j, k);
            x[i] = g(x[i], y[n]);
            // END BLOCK
         }
   return;
   // END BLOCK
}

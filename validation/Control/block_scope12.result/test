
Symbol table for block_scope

block_scope12!

Declarations for module "block_scope12!" with type "() -> unknown"

Variable list:

	Declared entity "TOP-LEVEL:*STATIC*" with type "area" with size 0
	Declared entity "TOP-LEVEL:block_scope" with type "functional" "() -> int"
	Declared entity "block_scope12!:*DYNAMIC*" with type "area" with size 0
	Declared entity "block_scope12!:*HEAP*" with type "area" with size 0
	Declared entity "block_scope12!:*STACK*" with type "area" with size 0
	Declared entity "block_scope12!:*STATIC*" with type "area" with size 0

* empty extern declaration list *


Layouts for memory areas:

Layout for memory area "TOP-LEVEL:*STATIC*" of size 0:
	* empty area *


Layout for memory area "block_scope12!:*DYNAMIC*" of size 0:
	* empty area *


Layout for memory area "block_scope12!:*HEAP*" of size 0:
	* empty area *


Layout for memory area "block_scope12!:*STACK*" of size 0:
	* empty area *


Layout for memory area "block_scope12!:*STATIC*" of size 0:
	* empty area *

End of declarations for module block_scope12!


block_scope

Declarations for module "block_scope" with type "() -> int"

Variable list:

	Declared entity "TOP-LEVEL:*STATIC*" with type "area" with size 0
	Declared entity "block_scope12!:*STATIC*" with type "area" with size 0
	Declared entity "block_scope:*DYNAMIC*" with type "area" with size 32
	Declared entity "block_scope:*HEAP*" with type "area" with size 0
	Declared entity "block_scope:*STACK*" with type "area" with size 0
	Declared entity "block_scope:*STATIC*" with type "area" with size 0
	Declared entity "block_scope:0`2`x" with type "variable" "int"
	Declared entity "block_scope:0`__FUNCTION__" with type "variable" "char *"
	Declared entity "block_scope:0`__func__" with type "variable" "char *"
	Declared entity "block_scope:0`x" with type "variable" "int"
	Declared entity "block_scope:block_scope" with type "variable" "int"

* empty extern declaration list *


Layout for return variable:

	Variable "block_scope:block_scope"	size = 4

Layouts for memory areas:

Layout for memory area "TOP-LEVEL:*STATIC*" of size 0:
	* empty area *


Layout for memory area "block_scope12!:*STATIC*" of size 0:
	* empty area *


Layout for memory area "block_scope:*DYNAMIC*" of size 32:
	Variable "block_scope:0`x"	offset = 24	size = 4
	Variable "block_scope:0`2`x"	offset = 28	size = 4
	Variable "block_scope:0`__func__"	offset = 0	size = 12
	Variable "block_scope:0`__FUNCTION__"	offset = 12	size = 12


Layout for memory area "block_scope:*HEAP*" of size 0:
	* empty area *


Layout for memory area "block_scope:*STACK*" of size 0:
	* empty area *


Layout for memory area "block_scope:*STATIC*" of size 0:
	* empty area *

End of declarations for module block_scope


Parser output

// (statement ordering unavailable)
// BEGIN BLOCK
// (statement ordering unavailable)
extern int block_scope();
// END BLOCK

int block_scope()
{
// (statement ordering unavailable)
   // BEGIN BLOCK
// (statement ordering unavailable)
   int x = 6;
// (statement ordering unavailable)
   // BEGIN BLOCK
// (statement ordering unavailable)
lab1:   x--;
// (statement ordering unavailable)
   x++;
   // END BLOCK
   {
// (statement ordering unavailable)
      // BEGIN BLOCK
// (statement ordering unavailable)
      int x = -1;
// (statement ordering unavailable)
      goto lab1;
      // END BLOCK
   }
// (statement ordering unavailable)
   return x;
   // END BLOCK
}

Controlizer output

int block_scope()
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int x = 6;
// (0,3)
//:   BEGIN UNSTRUCTURED
// (1,1)
   // BEGIN BLOCK
// (1,2)
lab1:   x--;
// (1,3)
   x++;
// (1,4)
   int x = -1;
   // END BLOCK
   goto lab1;
//:   END UNSTRUCTURED
   // END BLOCK
}
int block_scope()
{
// (0,1)
   // BEGIN BLOCK
// (0,2)
   int x = 6;
// (0,3)
//:   BEGIN UNSTRUCTURED
// (1,1)
   // BEGIN BLOCK
// (1,2)
lab1:   x--;
// (1,3)
   x++;
// (1,4)
   int x = -1;
   // END BLOCK
   goto lab1;
//:   END UNSTRUCTURED
   // END BLOCK
}

